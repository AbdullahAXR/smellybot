,Unnamed: 0,Project,File,Class,Code,isDC,isGC
1,1,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\console\command\store\amq\AMQJournalToolCommand.,AMQJournalToolCommand,"public class AMQJournalToolCommand implements Command { private CommandContext context; Override public String getName() { return journal-audit ; } Override public String getOneLineDescription() { return Allows you to view records stored in the persistent journal ; } public void execute(List<String> tokens) throws Exception { AMQJournalTool consumerTool = new AMQJournalTool(); String args[] = new String[tokens size()]; tokens toArray(args); String[] directories = CommandLineSupport setOptions(consumerTool, args); for (int i = 0; i < directories length; i++) { consumerTool getDirs() add(new File(directories[i])); } consumerTool execute(); } public void setCommandContext(CommandContext context) { this context = context; } }",1.0,
2,2,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\console\command\store\amq\CustomResourceLoader.,CustomResourceLoader,"public class CustomResourceLoader extends ResourceLoader { private final static ThreadLocal<HashMap<String, String>> resourcesTL = new ThreadLocal<HashMap<String, String>>(); private final FileResourceLoader fileResourceLoader = new FileResourceLoader(); Override public void commonInit(RuntimeServices rs, ExtendedProperties configuration) { super commonInit(rs, configuration); fileResourceLoader commonInit(rs, configuration); } public void init( ExtendedProperties configuration) { fileResourceLoader init(configuration); this setCachingOn(true); } public synchronized InputStream getResourceStream( String name ) throws ResourceNotFoundException { InputStream result = null; if (name == null || name length() == 0) { throw new ResourceNotFoundException ( No template name provided ); } String value = null; HashMap<String, String> resources = resourcesTL get(); if( resources!=null ) { value = resources get(name); } if( value == null ) { result = this fileResourceLoader getResourceStream(name); } else { try { result = new ByteArrayInputStream(value getBytes()); } catch( Exception e ) { throw new ResourceNotFoundException( e getMessage() ); } } return result; } public boolean isSourceModified(Resource resource) { return false; } public long getLastModified(Resource resource) { return 0; } static public HashMap<String, String> getResources() { return resourcesTL get(); } static public void setResources(HashMap<String, String> arg0) { resourcesTL set(arg0); } }",1.0,
4,4,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\console\command\store\amq\MessageBodyFormatter.,MessageBodyFormatter,"public class MessageBodyFormatter { final ActiveMQMessage message; public MessageBodyFormatter(ActiveMQMessage message) { this message=message; } Override public String toString() { try { switch (message getDataStructureType()) { case ActiveMQMessage DATA STRUCTURE TYPE return ; case ActiveMQBlobMessage DATA STRUCTURE TYPE ActiveMQBlobMessage blob = (ActiveMQBlobMessage) message; return blob getRemoteBlobUrl(); case ActiveMQMapMessage DATA STRUCTURE TYPE ActiveMQMapMessage map = (ActiveMQMapMessage)message; return map getContentMap() toString(); case ActiveMQTextMessage DATA STRUCTURE TYPE ActiveMQTextMessage text = (ActiveMQTextMessage)message; return text getText(); case ActiveMQBytesMessage DATA STRUCTURE TYPE case ActiveMQObjectMessage DATA STRUCTURE TYPE case ActiveMQStreamMessage DATA STRUCTURE TYPE ByteSequence data = message getContent(); return binary payload {length= +data getLength()+ , compressed= +message isCompressed()+ } ; } } catch (JMSException e) { } return ; } }",1.0,
5,5,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\console\command\store\amq\reader\AMQIterator.,AMQIterator,"class AMQIterator implements Iterator<Message>{ private AMQReader reader; private BooleanExpression expression; private MessageLocation currentLocation; private MessageLocation nextLocation; private boolean valid=true; AMQIterator(AMQReader reader, BooleanExpression expression){ this reader=reader; this expression=expression; } public boolean hasNext() { try { this nextLocation = reader getNextMessage(currentLocation); Message next = nextLocation != null nextLocation getMessage() null; if (expression == null) { return next != null; } else { while (next != null) { MessageEvaluationContext context = new MessageEvaluationContext(); context setMessageReference((MessageReference) next); if (expression matches(context)) { return true; } this nextLocation = reader getNextMessage(currentLocation); next = nextLocation != null nextLocation getMessage() null; } valid=false; return false; } } catch (Exception e) { throw new RuntimeException( Failed to get next message from reader , e); } } public Message next() { if (valid && (nextLocation != null || hasNext())) { this currentLocation=nextLocation; return nextLocation getMessage(); } return null; } public void remove() { throw new IllegalStateException( Not supported ); } }",1.0,
7,7,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\console\command\store\amq\reader\MessageLocation.,MessageLocation,class MessageLocation { private Message message; private Location location; public Location getLocation() { return location; } public void setLocation(Location location) { this location = location; } public Message getMessage() { return message; } public void setMessage(Message message) { this message = message; } },1.0,
8,8,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\BytesMarshaller.,BytesMarshaller,"public class BytesMarshaller implements Marshaller { public void writePayload(Object object, DataOutput dataOut) throws IOException { byte[] data = (byte[])object; dataOut writeInt(data length); dataOut write(data); } public Object readPayload(DataInput dataIn) throws IOException { int size = dataIn readInt(); byte[] data = new byte[size]; dataIn readFully(data); return data; } }",1.0,
10,10,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\ContainerId.,ContainerId,"public class ContainerId implements Externalizable { private static final long serialVersionUID = -8883779541021821943L; private Object key; private String dataContainerName; public ContainerId() { } public ContainerId(Object key, String dataContainerName) { this key = key; this dataContainerName = dataContainerName; } public String getDataContainerName() { return dataContainerName; } public Object getKey() { return key; } public int hashCode() { return key hashCode() ^ dataContainerName hashCode(); } public boolean equals(Object obj) { if (obj == null || obj getClass() != ContainerId class) { return false; } ContainerId other = (ContainerId)obj; return other key equals(this key) && other dataContainerName equals(this dataContainerName); } public void writeExternal(ObjectOutput out) throws IOException { out writeUTF(getDataContainerName()); out writeObject(key); } public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { dataContainerName = in readUTF(); key = in readObject(); } public String toString() { return CID{ + dataContainerName + + key + } ; } }",1.0,
11,11,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\MessageAckWithLocation.,MessageAckWithLocation,"public final class MessageAckWithLocation extends MessageAck { public final Location location; public MessageAckWithLocation(MessageAck ack, Location location) { ack copy(this); this location = location; } }",1.0,
12,12,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\MessageIdMarshaller.,MessageIdMarshaller,"public class MessageIdMarshaller implements Marshaller<MessageId> { public void writePayload(MessageId object, DataOutput dataOut) throws IOException { dataOut writeUTF(object toString()); } public MessageId readPayload(DataInput dataIn) throws IOException { return new MessageId(dataIn readUTF()); } }",1.0,
15,15,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\RuntimeStoreException.,RuntimeStoreException,"public class RuntimeStoreException extends RuntimeException { private static final long serialVersionUID = 8807084681372365173L; public RuntimeStoreException() { super(); } public RuntimeStoreException(String message) { super(message); } public RuntimeStoreException(String message, Throwable cause) { super(message, cause); } public RuntimeStoreException(Throwable cause) { super(cause); } }",1.0,
16,16,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\StoreFactory.,StoreFactory,"public final class StoreFactory { private StoreFactory() { } public static Store open(String name, String mode) throws IOException { return new KahaStore(name, mode,new AtomicLong()); } public static Store open(File directory, String mode) throws IOException { return new KahaStore(directory, mode, new AtomicLong()); } public static Store open(String name, String mode, AtomicLong size) throws IOException { return new KahaStore(name, mode,size); } public static Store open(File directory, String mode, AtomicLong size) throws IOException { return new KahaStore(directory, mode, size); } public static boolean delete(String name) throws IOException { KahaStore store = new KahaStore(name, rw ); return store delete(); } public static boolean delete(File directory) throws IOException { KahaStore store = new KahaStore(directory, rw ); return store delete(); } }",1.0,
17,17,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\StringMarshaller.,StringMarshaller,"public class StringMarshaller implements Marshaller<String> { public void writePayload(String object, DataOutput dataOut) throws IOException { dataOut writeUTF(object); } public String readPayload(DataInput dataIn) throws IOException { return dataIn readUTF(); } }",1.0,
18,18,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\IndexRootContainer.,IndexRootContainer,"class IndexRootContainer { protected static final Marshaller ROOT MARSHALLER = Store OBJECT MARSHALLER; private static final Logger LOG = LoggerFactory getLogger(IndexRootContainer class); protected IndexItem root; protected IndexManager indexManager; protected DataManager dataManager; protected Map<Object, StoreEntry> map = new ConcurrentHashMap<Object, StoreEntry>(); protected LinkedList<StoreEntry> list = new LinkedList<StoreEntry>(); IndexRootContainer(IndexItem root, IndexManager im, DataManager dfm) throws IOException { this root = root; this indexManager = im; this dataManager = dfm; long nextItem = root getNextItem(); while (nextItem != Item POSITION NOT SET) { StoreEntry item = indexManager getIndex(nextItem); StoreLocation data = item getKeyDataItem(); Object key = dataManager readItem(ROOT MARSHALLER, data); map put(key, item); list add(item); nextItem = item getNextItem(); dataManager addInterestInFile(item getKeyFile()); } } Set<Object> getKeys() { return map keySet(); } IndexItem addRoot(IndexManager containerIndexManager, ContainerId key) throws IOException { if (map containsKey(key)) { removeRoot(containerIndexManager, key); } StoreLocation data = dataManager storeDataItem(ROOT MARSHALLER, key); IndexItem newRoot = indexManager createNewIndex(); newRoot setKeyData(data); IndexItem containerRoot = containerIndexManager createNewIndex(); containerIndexManager storeIndex(containerRoot); newRoot setValueOffset(containerRoot getOffset()); IndexItem last = list isEmpty() null (IndexItem)list getLast(); last = last == null root last; long prev = last getOffset(); newRoot setPreviousItem(prev); indexManager storeIndex(newRoot); last setNextItem(newRoot getOffset()); indexManager storeIndex(last); map put(key, newRoot); list add(newRoot); return containerRoot; } void removeRoot(IndexManager containerIndexManager, ContainerId key) throws IOException { StoreEntry oldRoot = map remove(key); if (oldRoot != null) { dataManager removeInterestInFile(oldRoot getKeyFile()); IndexItem containerRoot = containerIndexManager getIndex(oldRoot getValueOffset()); if (containerRoot != null) { containerIndexManager freeIndex(containerRoot); } int index = list indexOf(oldRoot); IndexItem prev = index > 0 (IndexItem)list get(index - 1) root; prev = prev == null root prev; IndexItem next = index < (list size() - 1) (IndexItem)list get(index + 1) null; if (next != null) { prev setNextItem(next getOffset()); next setPreviousItem(prev getOffset()); indexManager updateIndexes(next); } else { prev setNextItem(Item POSITION NOT SET); } indexManager updateIndexes(prev); list remove(oldRoot); indexManager freeIndex((IndexItem)oldRoot); } } IndexItem getRoot(IndexManager containerIndexManager, ContainerId key) throws IOException { StoreEntry index = map get(key); if (index != null) { return containerIndexManager getIndex(index getValueOffset()); } return null; } boolean doesRootExist(Object key) { return map containsKey(key); } }",1.0,
20,20,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\StoreLockedExcpetion.,StoreLockedExcpetion,public class StoreLockedExcpetion extends IOException { private static final long serialVersionUID = 3857646689671366926L; public StoreLockedExcpetion() { } public StoreLockedExcpetion(String s) { super(s); } },1.0,
22,22,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\ControlFile.,ControlFile,"public final class ControlFile { private static final boolean DISABLE FILE LOCK = true equals(System getProperty( java nio channels FileLock broken , false )); private final File file; private final RandomAccessFile randomAccessFile; private final int maxRecordSize; private final int firstRecordStart; private final int secondRecordStart; private final int firstRecordEnd; private final int secondRecordEnd; private long version; private FileLock lock; private boolean disposed; public ControlFile(File file, int recordSize) throws IOException { this file = file; this maxRecordSize = recordSize + 4; this firstRecordStart = 8; this secondRecordStart = 8 + maxRecordSize + 8 + 8; this firstRecordEnd = firstRecordStart+maxRecordSize; this secondRecordEnd = secondRecordStart+maxRecordSize; randomAccessFile = new RandomAccessFile(file, rw ); } public void lock() throws IOException { if (DISABLE FILE LOCK) { return; } if (lock == null) { try { lock = randomAccessFile getChannel() tryLock(0, Math max(1, randomAccessFile getChannel() size()), false); } catch (OverlappingFileLockException e) { throw IOExceptionSupport create( Control file + file + could not be locked ,e); } if (lock == null) { throw new IOException( Control file + file + could not be locked ); } } } public void unlock() throws IOException { if (DISABLE FILE LOCK) { return; } if (lock != null) { lock release(); lock = null; } } public void dispose() { if (disposed) { return; } disposed = true; try { unlock(); } catch (IOException ignore) { } try { randomAccessFile close(); } catch (IOException ignore) { } } public synchronized ByteSequence load() throws IOException { long l = randomAccessFile length(); if (l < maxRecordSize) { return null; } randomAccessFile seek(firstRecordStart-8); long v1 = randomAccessFile readLong(); randomAccessFile seek(firstRecordEnd); long v1check = randomAccessFile readLong(); randomAccessFile seek(secondRecordStart - 8); long v2 = randomAccessFile readLong(); randomAccessFile seek(secondRecordEnd); long v2check = randomAccessFile readLong(); byte[] data = null; if (v2 == v2check) { version = v2; randomAccessFile seek(secondRecordStart); int size = randomAccessFile readInt(); data = new byte[size]; randomAccessFile readFully(data); } else if (v1 == v1check) { version = v1; randomAccessFile seek(firstRecordStart); int size = randomAccessFile readInt(); data = new byte[size]; randomAccessFile readFully(data); } else { throw new IOException( Control data corrupted ); } return new ByteSequence(data, 0, data length); } public void store(ByteSequence data, boolean sync) throws IOException { version++; randomAccessFile setLength((maxRecordSize * 2) + 32); randomAccessFile seek(0); randomAccessFile writeLong(version); randomAccessFile writeInt(data getLength()); randomAccessFile write(data getData()); randomAccessFile seek(firstRecordEnd); randomAccessFile writeLong(version); randomAccessFile writeLong(version); randomAccessFile writeInt(data getLength()); randomAccessFile write(data getData()); randomAccessFile seek(secondRecordEnd); randomAccessFile writeLong(version); if (sync) { randomAccessFile getFD() sync(); } } public boolean isDisposed() { return disposed; } }",1.0,
23,23,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\DataFile.,DataFile,"public class DataFile extends LinkedNode implements Comparable<DataFile> { protected final File file; protected final Integer dataFileId; protected final int preferedSize; protected int length; protected int referenceCount; DataFile(File file, int number, int preferedSize) { this file = file; this preferedSize = preferedSize; this dataFileId = Integer valueOf(number); length = (int)(file exists() file length() 0); } File getFile() { return file; } public Integer getDataFileId() { return dataFileId; } public synchronized int getLength() { return length; } public void setLength(int length) { this length = length; } public synchronized void incrementLength(int size) { length += size; } public synchronized int increment() { return ++referenceCount; } public synchronized int decrement() { return --referenceCount; } public synchronized int getReferenceCount(){ return referenceCount; } public synchronized boolean isUnused() { return referenceCount <= 0; } public synchronized String toString() { String result = file getName() + number = + dataFileId + , length = + length + refCount = + referenceCount; return result; } public synchronized RandomAccessFile openRandomAccessFile(boolean appender) throws IOException { RandomAccessFile rc = new RandomAccessFile(file, rw ); if (appender) { if (length < preferedSize) { try { rc setLength(preferedSize); } catch (IOException ioe) { try { rc close(); } catch(Exception ignored) { } throw ioe; } } } return rc; } public synchronized void closeRandomAccessFile(RandomAccessFile file) throws IOException { if (length != file length()) { file setLength(getLength()); } file close(); } public synchronized boolean delete() throws IOException { return file delete(); } public synchronized void move(File targetDirectory) throws IOException{ IOHelper moveFile(file,targetDirectory); } public int compareTo(DataFile df) { return dataFileId - df dataFileId; } Override public boolean equals(Object o) { boolean result = false; if (o instanceof DataFile) { result = compareTo((DataFile)o) == 0; } return result; } Override public int hashCode() { return dataFileId; } }",1.0,
25,25,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\DataFileAccessorPool.,DataFileAccessorPool,"public class DataFileAccessorPool { private final AsyncDataManager dataManager; private final Map<Integer, Pool> pools = new HashMap<Integer, Pool>(); private boolean closed; private int maxOpenReadersPerFile = 5; class Pool { private final DataFile file; private final List<DataFileAccessor> pool = new ArrayList<DataFileAccessor>(); private boolean used; private int openCounter; private boolean disposed; public Pool(DataFile file) { this file = file; } public DataFileAccessor openDataFileReader() throws IOException { DataFileAccessor rc = null; if (pool isEmpty()) { rc = new DataFileAccessor(dataManager, file); } else { rc = (DataFileAccessor)pool remove(pool size() - 1); } used = true; openCounter++; return rc; } public synchronized void closeDataFileReader(DataFileAccessor reader) { openCounter--; if (pool size() >= maxOpenReadersPerFile || disposed) { reader dispose(); } else { pool add(reader); } } public synchronized void clearUsedMark() { used = false; } public synchronized boolean isUsed() { return used; } public synchronized void dispose() { for (DataFileAccessor reader pool) { reader dispose(); } pool clear(); disposed = true; } public synchronized int getOpenCounter() { return openCounter; } } public DataFileAccessorPool(AsyncDataManager dataManager) { this dataManager = dataManager; } synchronized void clearUsedMark() { for (Iterator iter = pools values() iterator(); iter hasNext();) { Pool pool = (Pool)iter next(); pool clearUsedMark(); } } synchronized void disposeUnused() { for (Iterator<Pool> iter = pools values() iterator(); iter hasNext();) { Pool pool = iter next(); if (!pool isUsed()) { pool dispose(); iter remove(); } } } synchronized void disposeDataFileAccessors(DataFile dataFile) { if (closed) { throw new IllegalStateException( Closed ); } Pool pool = pools get(dataFile getDataFileId()); if (pool != null) { if (pool getOpenCounter() == 0) { pool dispose(); pools remove(dataFile getDataFileId()); } else { throw new IllegalStateException( The data file is still in use + dataFile + , use count + pool getOpenCounter()); } } } synchronized DataFileAccessor openDataFileAccessor(DataFile dataFile) throws IOException { if (closed) { throw new IOException( Closed ); } Pool pool = pools get(dataFile getDataFileId()); if (pool == null) { pool = new Pool(dataFile); pools put(dataFile getDataFileId(), pool); } return pool openDataFileReader(); } synchronized void closeDataFileAccessor(DataFileAccessor reader) { Pool pool = pools get(reader getDataFile() getDataFileId()); if (pool == null || closed) { reader dispose(); } else { pool closeDataFileReader(reader); } } public synchronized void close() { if (closed) { return; } closed = true; for (Iterator<Pool> iter = pools values() iterator(); iter hasNext();) { Pool pool = iter next(); pool dispose(); } pools clear(); } }",1.0,
26,26,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\DataFileAccessorPool.,Pool,"class Pool { private final DataFile file; private final List<DataFileAccessor> pool = new ArrayList<DataFileAccessor>(); private boolean used; private int openCounter; private boolean disposed; public Pool(DataFile file) { this file = file; } public DataFileAccessor openDataFileReader() throws IOException { DataFileAccessor rc = null; if (pool isEmpty()) { rc = new DataFileAccessor(dataManager, file); } else { rc = (DataFileAccessor)pool remove(pool size() - 1); } used = true; openCounter++; return rc; } public synchronized void closeDataFileReader(DataFileAccessor reader) { openCounter--; if (pool size() >= maxOpenReadersPerFile || disposed) { reader dispose(); } else { pool add(reader); } } public synchronized void clearUsedMark() { used = false; } public synchronized boolean isUsed() { return used; } public synchronized void dispose() { for (DataFileAccessor reader pool) { reader dispose(); } pool clear(); disposed = true; } public synchronized int getOpenCounter() { return openCounter; } }",1.0,
27,27,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\DataFileAppender.,DataFileAppender,"class DataFileAppender { protected static final byte[] RESERVED SPACE = new byte[AsyncDataManager ITEM HEAD RESERVED SPACE]; protected static final int DEFAULT MAX BATCH SIZE = 1024 * 1024 * 4; protected final AsyncDataManager dataManager; protected final Map<WriteKey, WriteCommand> inflightWrites; protected final Object enqueueMutex = new Object(){}; protected WriteBatch nextWriteBatch; protected boolean shutdown; protected IOException firstAsyncException; protected final CountDownLatch shutdownDone = new CountDownLatch(1); protected int maxWriteBatchSize = DEFAULT MAX BATCH SIZE; protected boolean running; private Thread thread; public static class WriteKey { private final int file; private final long offset; private final int hash; public WriteKey(Location item) { file = item getDataFileId(); offset = item getOffset(); hash = (int)(file ^ offset); } public int hashCode() { return hash; } public boolean equals(Object obj) { if (obj instanceof WriteKey) { WriteKey di = (WriteKey)obj; return di file == file && di offset == offset; } return false; } } public class WriteBatch { public final DataFile dataFile; public final WriteCommand first; public final CountDownLatch latch = new CountDownLatch(1); public int size; public AtomicReference<IOException> exception = new AtomicReference<IOException>(); public WriteBatch(DataFile dataFile, WriteCommand write) throws IOException { this dataFile = dataFile; this first = write; size += write location getSize(); } public boolean canAppend(DataFile dataFile, WriteCommand write) { if (dataFile != this dataFile) { return false; } if (size + write location getSize() >= maxWriteBatchSize) { return false; } return true; } public void append(WriteCommand write) throws IOException { this first getTailNode() linkAfter(write); size += write location getSize(); } } public static class WriteCommand extends LinkedNode { public final Location location; public final ByteSequence data; final boolean sync; public final Runnable onComplete; public WriteCommand(Location location, ByteSequence data, boolean sync) { this location = location; this data = data; this sync = sync; this onComplete=null; } public WriteCommand(Location location, ByteSequence data, Runnable onComplete) { this location = location; this data = data; this onComplete = onComplete; this sync = false; } } public DataFileAppender(AsyncDataManager dataManager) { this dataManager = dataManager; this inflightWrites = this dataManager getInflightWrites(); } public Location storeItem(ByteSequence data, byte type, boolean sync) throws IOException { int size = data getLength() + AsyncDataManager ITEM HEAD FOOT SPACE; final Location location = new Location(); location setSize(size); location setType(type); WriteBatch batch; WriteCommand write = new WriteCommand(location, data, sync); synchronized (this) { DataFile dataFile = dataManager allocateLocation(location); if( !sync ) { inflightWrites put(new WriteKey(location), write); } batch = enqueue(dataFile, write); } location setLatch(batch latch); if (sync) { try { batch latch await(); } catch (InterruptedException e) { throw new InterruptedIOException(); } IOException exception = batch exception get(); if (exception != null) { throw exception; } } return location; } public Location storeItem(ByteSequence data, byte type, Runnable onComplete) throws IOException { int size = data getLength() + AsyncDataManager ITEM HEAD FOOT SPACE; final Location location = new Location(); location setSize(size); location setType(type); WriteBatch batch; WriteCommand write = new WriteCommand(location, data, onComplete); synchronized (this) { DataFile dataFile = dataManager allocateLocation(location); inflightWrites put(new WriteKey(location), write); batch = enqueue(dataFile, write); } location setLatch(batch latch); return location; } private WriteBatch enqueue(DataFile dataFile, WriteCommand write) throws IOException { synchronized (enqueueMutex) { WriteBatch rc = null; if (shutdown) { throw new IOException( Async Writter Thread Shutdown ); } if (!running) { running = true; thread = new Thread() { public void run() { processQueue(); } }; thread setPriority(Thread MAX PRIORITY); thread setDaemon(true); thread setName( ActiveMQ Data File Writer ); thread start(); firstAsyncException = null; } if (firstAsyncException != null) { throw firstAsyncException; } if (nextWriteBatch == null) { nextWriteBatch = new WriteBatch(dataFile, write); rc = nextWriteBatch; enqueueMutex notify(); } else { if (nextWriteBatch canAppend(dataFile, write)) { nextWriteBatch append(write); rc = nextWriteBatch; } else { try { while (nextWriteBatch != null) { enqueueMutex wait(); } } catch (InterruptedException e) { throw new InterruptedIOException(); } if (shutdown) { throw new IOException( Async Writter Thread Shutdown ); } nextWriteBatch = new WriteBatch(dataFile, write); rc = nextWriteBatch; enqueueMutex notify(); } } return rc; } } public void close() throws IOException { synchronized (enqueueMutex) { if (!shutdown) { shutdown = true; if (running) { enqueueMutex notifyAll(); } else { shutdownDone countDown(); } } } try { shutdownDone await(); } catch (InterruptedException e) { throw new InterruptedIOException(); } } protected void processQueue() { DataFile dataFile = null; RandomAccessFile file = null; WriteBatch wb = null; try { DataByteArrayOutputStream buff = new DataByteArrayOutputStream(maxWriteBatchSize); while (true) { Object o = null; synchronized (enqueueMutex) { while (true) { if (nextWriteBatch != null) { o = nextWriteBatch; nextWriteBatch = null; break; } if (shutdown) { return; } enqueueMutex wait(); } enqueueMutex notify(); } wb = (WriteBatch)o; if (dataFile != wb dataFile) { if (file != null) { dataFile closeRandomAccessFile(file); } dataFile = wb dataFile; file = dataFile openRandomAccessFile(true); } WriteCommand write = wb first; file seek(write location getOffset()); boolean forceToDisk=false; if (wb size == write location getSize()) { forceToDisk = write sync | write onComplete!=null; file writeInt(write location getSize()); file writeByte(write location getType()); file write(RESERVED SPACE); file write(AsyncDataManager ITEM HEAD SOR); file write(write data getData(), write data getOffset(), write data getLength()); file write(AsyncDataManager ITEM HEAD EOR); } else { while (write != null) { forceToDisk |= write sync | write onComplete!=null; buff writeInt(write location getSize()); buff writeByte(write location getType()); buff write(RESERVED SPACE); buff write(AsyncDataManager ITEM HEAD SOR); buff write(write data getData(), write data getOffset(), write data getLength()); buff write(AsyncDataManager ITEM HEAD EOR); write = (WriteCommand)write getNext(); } ByteSequence sequence = buff toByteSequence(); file write(sequence getData(), sequence getOffset(), sequence getLength()); buff reset(); } if( forceToDisk ) { file getFD() sync(); } WriteCommand lastWrite = (WriteCommand)wb first getTailNode(); dataManager setLastAppendLocation(lastWrite location); write = wb first; while (write != null) { if (!write sync) { inflightWrites remove(new WriteKey(write location)); } if( write onComplete !=null ) { try { write onComplete run(); } catch (Throwable e) { e printStackTrace(); } } write = (WriteCommand)write getNext(); } wb latch countDown(); } } catch (IOException e) { synchronized (enqueueMutex) { firstAsyncException = e; if (wb != null) { wb latch countDown(); wb exception set(e); } if (nextWriteBatch != null) { nextWriteBatch latch countDown(); nextWriteBatch exception set(e); } } } catch (InterruptedException e) { } finally { try { if (file != null) { dataFile closeRandomAccessFile(file); } } catch (Throwable ignore) { } shutdownDone countDown(); } } }",1.0,
28,28,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\DataFileAppender.,WriteKey,public static class WriteKey { private final int file; private final long offset; private final int hash; public WriteKey(Location item) { file = item getDataFileId(); offset = item getOffset(); hash = (int)(file ^ offset); } public int hashCode() { return hash; } public boolean equals(Object obj) { if (obj instanceof WriteKey) { WriteKey di = (WriteKey)obj; return di file == file && di offset == offset; } return false; } },1.0,
29,29,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\DataFileAppender.,WriteBatch,"public class WriteBatch { public final DataFile dataFile; public final WriteCommand first; public final CountDownLatch latch = new CountDownLatch(1); public int size; public AtomicReference<IOException> exception = new AtomicReference<IOException>(); public WriteBatch(DataFile dataFile, WriteCommand write) throws IOException { this dataFile = dataFile; this first = write; size += write location getSize(); } public boolean canAppend(DataFile dataFile, WriteCommand write) { if (dataFile != this dataFile) { return false; } if (size + write location getSize() >= maxWriteBatchSize) { return false; } return true; } public void append(WriteCommand write) throws IOException { this first getTailNode() linkAfter(write); size += write location getSize(); } }",1.0,
30,30,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\DataFileAppender.,WriteCommand,"public static class WriteCommand extends LinkedNode { public final Location location; public final ByteSequence data; final boolean sync; public final Runnable onComplete; public WriteCommand(Location location, ByteSequence data, boolean sync) { this location = location; this data = data; this sync = sync; this onComplete=null; } public WriteCommand(Location location, ByteSequence data, Runnable onComplete) { this location = location; this data = data; this onComplete = onComplete; this sync = false; } }",1.0,
34,34,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\JournalFacade.,RecordLocationFacade,public static class RecordLocationFacade implements RecordLocation { private final Location location; public RecordLocationFacade(Location location) { this location = location; } public Location getLocation() { return location; } public int compareTo(Object o) { RecordLocationFacade rlf = (RecordLocationFacade)o; int rc = location compareTo(rlf location); return rc; } },1.0,
36,36,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\NIODataFileAppender.,NIODataFileAppender,"class NIODataFileAppender extends DataFileAppender { public NIODataFileAppender(AsyncDataManager fileManager) { super(fileManager); } protected void processQueue() { DataFile dataFile = null; RandomAccessFile file = null; FileChannel channel = null; WriteBatch wb = null; try { ByteBuffer header = ByteBuffer allocateDirect(AsyncDataManager ITEM HEAD SPACE); ByteBuffer footer = ByteBuffer allocateDirect(AsyncDataManager ITEM FOOT SPACE); ByteBuffer buffer = ByteBuffer allocateDirect(maxWriteBatchSize); header putInt(0); header put((byte)0); header put(RESERVED SPACE); header put(AsyncDataManager ITEM HEAD SOR); footer put(AsyncDataManager ITEM HEAD EOR); while (true) { Object o = null; synchronized (enqueueMutex) { while (true) { if (nextWriteBatch != null) { o = nextWriteBatch; nextWriteBatch = null; break; } if (shutdown) { return; } enqueueMutex wait(); } enqueueMutex notify(); } wb = (WriteBatch)o; if (dataFile != wb dataFile) { if (file != null) { dataFile closeRandomAccessFile(file); } dataFile = wb dataFile; file = dataFile openRandomAccessFile(true); channel = file getChannel(); } WriteCommand write = wb first; file seek(write location getOffset()); boolean forceToDisk=false; if (wb size == write location getSize()) { forceToDisk = write sync | write onComplete!=null; header clear(); header putInt(write location getSize()); header put(write location getType()); header clear(); transfer(header, channel); ByteBuffer source = ByteBuffer wrap(write data getData(), write data getOffset(), write data getLength()); transfer(source, channel); footer clear(); transfer(footer, channel); } else { while (write != null) { forceToDisk |= write sync | write onComplete!=null; header clear(); header putInt(write location getSize()); header put(write location getType()); header clear(); copy(header, buffer); assert !header hasRemaining(); ByteBuffer source = ByteBuffer wrap(write data getData(), write data getOffset(), write data getLength()); copy(source, buffer); assert !source hasRemaining(); footer clear(); copy(footer, buffer); assert !footer hasRemaining(); write = (WriteCommand)write getNext(); } buffer flip(); transfer(buffer, channel); buffer clear(); } if( forceToDisk ) { file getChannel() force(false); } WriteCommand lastWrite = (WriteCommand)wb first getTailNode(); dataManager setLastAppendLocation(lastWrite location); write = wb first; while (write != null) { if (!write sync) { inflightWrites remove(new WriteKey(write location)); } if (write onComplete != null) { try { write onComplete run(); } catch (Throwable e) { e printStackTrace(); } } write = (WriteCommand)write getNext(); } wb latch countDown(); } } catch (IOException e) { synchronized (enqueueMutex) { firstAsyncException = e; if (wb != null) { wb latch countDown(); wb exception set(e); } if (nextWriteBatch != null) { nextWriteBatch latch countDown(); nextWriteBatch exception set(e); } } } catch (InterruptedException e) { } finally { try { if (file != null) { dataFile closeRandomAccessFile(file); dataFile = null; file close(); file = null; } if (channel != null) { channel close(); channel = null; } } catch (IOException e) { } shutdownDone countDown(); running = false; } } private void transfer(ByteBuffer header, FileChannel channel) throws IOException { while (header hasRemaining()) { channel write(header); } } private int copy(ByteBuffer src, ByteBuffer dest) { int rc = Math min(dest remaining(), src remaining()); if (rc > 0) { int limit = src limit(); src limit(src position() + rc); dest put(src); src limit(limit); } return rc; } }",1.0,
37,37,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\ReadOnlyAsyncDataManager.,ReadOnlyAsyncDataManager,"public class ReadOnlyAsyncDataManager extends AsyncDataManager { private static final Logger LOG = LoggerFactory getLogger(ReadOnlyAsyncDataManager class); private final ArrayList<File> dirs; public ReadOnlyAsyncDataManager(final ArrayList<File> dirs) { this dirs = dirs; } SuppressWarnings( unchecked ) public synchronized void start() throws IOException { if (started) { return; } started = true; accessorPool = new DataFileAccessorPool(this); ArrayList<File> files = new ArrayList<File>(); for (File directory dirs) { final File d = directory; File[] f = d listFiles(new FilenameFilter() { public boolean accept(File dir, String n) { return dir equals(d) && n startsWith(filePrefix); } }); for (int i = 0; i < f length; i++) { files add(f[i]); } } for (File file files) { try { String n = file getName(); String numStr = n substring(filePrefix length(), n length()); int num = Integer parseInt(numStr); DataFile dataFile = new ReadOnlyDataFile(file, num, preferedFileLength); fileMap put(dataFile getDataFileId(), dataFile); storeSize addAndGet(dataFile getLength()); } catch (NumberFormatException e) { } } List<DataFile> dataFiles = new ArrayList<DataFile>(fileMap values()); Collections sort(dataFiles); currentWriteFile = null; for (DataFile df dataFiles) { if (currentWriteFile != null) { currentWriteFile linkAfter(df); } currentWriteFile = df; fileByFileMap put(df getFile(), df); } if (currentWriteFile != null) { Location l = lastAppendLocation get(); if (l != null && l getDataFileId() != currentWriteFile getDataFileId() intValue()) { l = null; } } } public synchronized void close() throws IOException { if (!started) { return; } accessorPool close(); fileMap clear(); fileByFileMap clear(); started = false; } public Location getFirstLocation() throws IllegalStateException, IOException { if( currentWriteFile == null ) { return null; } DataFile first = (DataFile)currentWriteFile getHeadNode(); Location cur = new Location(); cur setDataFileId(first getDataFileId()); cur setOffset(0); cur setSize(0); return getNextLocation(cur); } Override public synchronized boolean delete() throws IOException { throw new RuntimeException( Cannot delete a ReadOnlyAsyncDataManager ); } }",1.0,
38,38,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\async\ReadOnlyDataFile.,ReadOnlyDataFile,"public class ReadOnlyDataFile extends DataFile { ReadOnlyDataFile(File file, int number, int preferedSize) { super(file, number, preferedSize); } public RandomAccessFile openRandomAccessFile(boolean appender) throws IOException { RandomAccessFile rc = new RandomAccessFile(file, r ); if (appender) { if (length < preferedSize) { rc setLength(preferedSize); } } return rc; } public void closeRandomAccessFile(RandomAccessFile file) throws IOException { file close(); } public synchronized boolean delete() throws IOException { throw new RuntimeException( Not valid on a read only file ); } public synchronized void move(File targetDirectory) throws IOException{ throw new RuntimeException( Not valid on a read only file ); } }",1.0,
39,39,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\BaseContainerImpl.,BaseContainerImpl,"public abstract class BaseContainerImpl { private static final Logger LOG = LoggerFactory getLogger(BaseContainerImpl class); protected IndexItem root; protected IndexLinkedList indexList; protected IndexManager indexManager; protected DataManager dataManager; protected ContainerId containerId; protected boolean loaded; protected boolean closed; protected boolean initialized; protected boolean persistentIndex; protected BaseContainerImpl(ContainerId id, IndexItem root, IndexManager indexManager, DataManager dataManager, boolean persistentIndex) { this containerId = id; this root = root; this indexManager = indexManager; this dataManager = dataManager; this persistentIndex = persistentIndex; } public ContainerId getContainerId() { return containerId; } public synchronized void init() { if (!initialized) { if (!initialized) { initialized = true; if (this indexList == null) { if (persistentIndex) { this indexList = new DiskIndexLinkedList(indexManager, root); } else { this indexList = new VMIndexLinkedList(root); } } } } } public synchronized void clear() { if (indexList != null) { indexList clear(); } } public IndexLinkedList getList() { return indexList; } public void setList(IndexLinkedList indexList) { this indexList = indexList; } public abstract void unload(); public abstract void load(); public abstract int size(); protected abstract Object getValue(StoreEntry currentItem); protected abstract void remove(IndexItem currentItem); protected final synchronized IndexLinkedList getInternalList() { return indexList; } public final synchronized void close() { unload(); closed = true; } public final synchronized boolean isLoaded() { checkClosed(); return loaded; } public final Object getId() { checkClosed(); return containerId getKey(); } public DataManager getDataManager() { return dataManager; } public IndexManager getIndexManager() { return indexManager; } public final synchronized void expressDataInterest() throws IOException { long nextItem = root getNextItem(); while (nextItem != Item POSITION NOT SET) { IndexItem item = indexManager getIndex(nextItem); item setOffset(nextItem); dataManager addInterestInFile(item getKeyFile()); dataManager addInterestInFile(item getValueFile()); nextItem = item getNextItem(); } } protected final void doClear() { checkClosed(); loaded = true; List<IndexItem> indexList = new ArrayList<IndexItem>(); try { init(); long nextItem = root getNextItem(); while (nextItem != Item POSITION NOT SET) { IndexItem item = new IndexItem(); item setOffset(nextItem); indexList add(item); nextItem = item getNextItem(); } root setNextItem(Item POSITION NOT SET); storeIndex(root); for (int i = 0; i < indexList size(); i++) { IndexItem item = indexList get(i); dataManager removeInterestInFile(item getKeyFile()); dataManager removeInterestInFile(item getValueFile()); indexManager freeIndex(item); } indexList clear(); } catch (IOException e) { LOG error( Failed to clear Container + getId(), e); throw new RuntimeStoreException(e); } } protected final void delete(final IndexItem keyItem, final IndexItem prevItem, final IndexItem nextItem) { if (keyItem != null) { try { root = indexList getRoot(); IndexItem prev = prevItem == null root prevItem; IndexItem next = (nextItem == null || !nextItem equals(root)) nextItem null; dataManager removeInterestInFile(keyItem getKeyFile()); dataManager removeInterestInFile(keyItem getValueFile()); if (next != null) { prev setNextItem(next getOffset()); next setPreviousItem(prev getOffset()); updateIndexes(next); } else { prev setNextItem(Item POSITION NOT SET); } updateIndexes(prev); indexManager freeIndex(keyItem); } catch (IOException e) { LOG error( Failed to delete + keyItem, e); throw new RuntimeStoreException(e); } } } protected final void checkClosed() { if (closed) { throw new RuntimeStoreException( The store is closed ); } } protected void storeIndex(IndexItem item) throws IOException { indexManager storeIndex(item); } protected void updateIndexes(IndexItem item) throws IOException { indexManager updateIndexes(item); } protected final boolean isRoot(StoreEntry item) { return item != null && root != null && (root == item || root getOffset() == item getOffset()); } }",1.0,
40,40,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerCollectionSupport.,ContainerCollectionSupport,class ContainerCollectionSupport { protected MapContainerImpl container; protected ContainerCollectionSupport(MapContainerImpl container) { this container = container; } public int size() { return container size(); } public boolean isEmpty() { return container isEmpty(); } },1.0,
41,41,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerEntrySet.,ContainerEntrySet,"public class ContainerEntrySet extends ContainerCollectionSupport implements Set { ContainerEntrySet(MapContainerImpl container) { super(container); } public boolean contains(Object o) { return container entrySet() contains(o); } public Iterator iterator() { return new ContainerEntrySetIterator(container, buildEntrySet() iterator()); } public Object[] toArray() { return buildEntrySet() toArray(); } public Object[] toArray(Object[] a) { return buildEntrySet() toArray(a); } public boolean add(Object o) { throw new UnsupportedOperationException( Cannot add here ); } public boolean remove(Object o) { boolean result = false; if (buildEntrySet() remove(o)) { ContainerMapEntry entry = (ContainerMapEntry)o; container remove(entry getKey()); } return result; } public boolean containsAll(Collection c) { return buildEntrySet() containsAll(c); } public boolean addAll(Collection c) { throw new UnsupportedOperationException( Cannot add here ); } public boolean retainAll(Collection c) { List<Object> tmpList = new ArrayList<Object>(); for (Iterator i = c iterator(); i hasNext();) { Object o = i next(); if (!contains(o)) { tmpList add(o); } } boolean result = false; for (Iterator<Object> i = tmpList iterator(); i hasNext();) { result |= remove(i next()); } return result; } public boolean removeAll(Collection c) { boolean result = true; for (Iterator i = c iterator(); i hasNext();) { if (!remove(i next())) { result = false; } } return result; } public void clear() { container clear(); } protected Set<ContainerMapEntry> buildEntrySet() { Set<ContainerMapEntry> set = new HashSet<ContainerMapEntry>(); for (Iterator i = container keySet() iterator(); i hasNext();) { ContainerMapEntry entry = new ContainerMapEntry(container, i next()); set add(entry); } return set; } }",1.0,
42,42,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerEntrySetIterator.,ContainerEntrySetIterator,"public class ContainerEntrySetIterator implements Iterator { private MapContainerImpl container; private Iterator iter; private ContainerMapEntry currentEntry; ContainerEntrySetIterator(MapContainerImpl container, Iterator iter) { this container = container; this iter = iter; } public boolean hasNext() { return iter hasNext(); } public Object next() { currentEntry = (ContainerMapEntry)iter next(); return currentEntry; } public void remove() { if (currentEntry != null) { container remove(currentEntry getKey()); } } }",1.0,
43,43,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerKeySet.,ContainerKeySet,"public class ContainerKeySet extends ContainerCollectionSupport implements Set { ContainerKeySet(MapContainerImpl container) { super(container); } public boolean contains(Object o) { return container containsKey(o); } public Iterator iterator() { return new ContainerKeySetIterator(container); } public Object[] toArray() { List<Object> list = new ArrayList<Object>(); IndexItem item = container getInternalList() getRoot(); while ((item = container getInternalList() getNextEntry(item)) != null) { list add(container getKey(item)); } return list toArray(); } public Object[] toArray(Object[] a) { List<Object> list = new ArrayList<Object>(); IndexItem item = container getInternalList() getRoot(); while ((item = container getInternalList() getNextEntry(item)) != null) { list add(container getKey(item)); } return list toArray(a); } public boolean add(Object o) { throw new UnsupportedOperationException( Cannot add here ); } public boolean remove(Object o) { return container remove(o) != null; } public boolean containsAll(Collection c) { for (Object key c) { if (!container containsKey(key)) { return false; } } return true; } public boolean addAll(Collection c) { throw new UnsupportedOperationException( Cannot add here ); } public boolean retainAll(Collection c) { List<Object> tmpList = new ArrayList<Object>(); for (Iterator i = c iterator(); i hasNext();) { Object o = i next(); if (!contains(o)) { tmpList add(o); } } for (Iterator<Object> i = tmpList iterator(); i hasNext();) { remove(i next()); } return !tmpList isEmpty(); } public boolean removeAll(Collection c) { boolean result = true; for (Iterator i = c iterator(); i hasNext();) { if (!remove(i next())) { result = false; } } return result; } public void clear() { container clear(); } public String toString() { StringBuffer result = new StringBuffer(32); result append( ContainerKeySet[ ); IndexItem item = container getInternalList() getRoot(); while ((item = container getInternalList() getNextEntry(item)) != null) { result append(container getKey(item)); result append( , ); } result append( ] ); return result toString(); } }",1.0,
44,44,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerKeySetIterator.,ContainerKeySetIterator,public class ContainerKeySetIterator implements Iterator { protected IndexItem nextItem; protected IndexItem currentItem; private MapContainerImpl container; private IndexLinkedList list; ContainerKeySetIterator(MapContainerImpl container) { this container = container; this list = container getInternalList(); this currentItem = list getRoot(); this nextItem = list getNextEntry(currentItem); } public boolean hasNext() { return nextItem != null; } public Object next() { currentItem = nextItem; Object result = container getKey(nextItem); nextItem = list getNextEntry(nextItem); return result; } public void remove() { if (currentItem != null) { container remove(currentItem); if (nextItem != null) { list refreshEntry(nextItem); } } } },1.0,
45,45,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerListIterator.,ContainerListIterator,"public class ContainerListIterator extends ContainerValueCollectionIterator implements ListIterator { protected ContainerListIterator(ListContainerImpl container, IndexLinkedList list, IndexItem start) { super(container, list, start); } public boolean hasPrevious() { synchronized (container) { nextItem = (IndexItem)list refreshEntry(nextItem); return list getPrevEntry(nextItem) != null; } } public Object previous() { synchronized (container) { nextItem = (IndexItem)list refreshEntry(nextItem); nextItem = list getPrevEntry(nextItem); return nextItem != null container getValue(nextItem) null; } } public int nextIndex() { int result = -1; if (nextItem != null) { synchronized (container) { nextItem = (IndexItem)list refreshEntry(nextItem); StoreEntry next = list getNextEntry(nextItem); if (next != null) { result = container getInternalList() indexOf(next); } } } return result; } public int previousIndex() { int result = -1; if (nextItem != null) { synchronized (container) { nextItem = (IndexItem)list refreshEntry(nextItem); StoreEntry prev = list getPrevEntry(nextItem); if (prev != null) { result = container getInternalList() indexOf(prev); } } } return result; } public void set(Object o) { IndexItem item = ((ListContainerImpl)container) internalSet(previousIndex() + 1, o); nextItem = item; } public void add(Object o) { IndexItem item = ((ListContainerImpl)container) internalAdd(previousIndex() + 1, o); nextItem = item; } }",1.0,
46,46,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerMapEntry.,ContainerMapEntry,"class ContainerMapEntry implements Map Entry { private MapContainer container; private Object key; ContainerMapEntry(MapContainer container, Object key) { this container = container; this key = key; } public Object getKey() { return key; } public Object getValue() { return container get(key); } public Object setValue(Object value) { return container put(key, value); } }",1.0,
47,47,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerValueCollection.,ContainerValueCollection,"class ContainerValueCollection extends ContainerCollectionSupport implements Collection { ContainerValueCollection(MapContainerImpl container) { super(container); } public boolean contains(Object o) { return container containsValue(o); } public Iterator iterator() { IndexLinkedList list = container getItemList(); return new ContainerValueCollectionIterator(container, list, list getRoot()); } public Object[] toArray() { Object[] result = null; IndexLinkedList list = container getItemList(); synchronized (list) { result = new Object[list size()]; IndexItem item = list getFirst(); int count = 0; while (item != null) { Object value = container getValue(item); result[count++] = value; item = list getNextEntry(item); } } return result; } public Object[] toArray(Object[] result) { IndexLinkedList list = container getItemList(); synchronized (list) { if (result length <= list size()) { IndexItem item = list getFirst(); int count = 0; while (item != null) { Object value = container getValue(item); result[count++] = value; item = list getNextEntry(item); } } } return result; } public boolean add(Object o) { throw new UnsupportedOperationException( Can t add an object here ); } public boolean remove(Object o) { return container removeValue(o); } public boolean containsAll(Collection c) { boolean result = !c isEmpty(); for (Iterator i = c iterator(); i hasNext();) { if (!contains(i next())) { result = false; break; } } return result; } public boolean addAll(Collection c) { throw new UnsupportedOperationException( Can t add everything here! ); } public boolean removeAll(Collection c) { boolean result = true; for (Iterator i = c iterator(); i hasNext();) { Object obj = i next(); result &= remove(obj); } return result; } public boolean retainAll(Collection c) { List<Object> tmpList = new ArrayList<Object>(); for (Iterator i = c iterator(); i hasNext();) { Object o = i next(); if (!contains(o)) { tmpList add(o); } } for (Iterator<Object> i = tmpList iterator(); i hasNext();) { remove(i next()); } return !tmpList isEmpty(); } public void clear() { container clear(); } }",1.0,
48,48,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerValueCollectionIterator.,ContainerValueCollectionIterator,"public class ContainerValueCollectionIterator implements Iterator { protected BaseContainerImpl container; protected IndexLinkedList list; protected IndexItem nextItem; protected IndexItem currentItem; ContainerValueCollectionIterator(BaseContainerImpl container, IndexLinkedList list, IndexItem start) { this container = container; this list = list; this currentItem = start; this nextItem = list getNextEntry((IndexItem)list refreshEntry(start)); } public boolean hasNext() { return nextItem != null; } public Object next() { synchronized (container) { nextItem = (IndexItem)list refreshEntry(nextItem); currentItem = nextItem; Object result = container getValue(nextItem); nextItem = list getNextEntry(nextItem); return result; } } public void remove() { synchronized (container) { if (currentItem != null) { currentItem = (IndexItem)list refreshEntry(currentItem); container remove(currentItem); } } } }",1.0,
49,49,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ListContainerImpl.,ListContainerImpl,"public class ListContainerImpl extends BaseContainerImpl implements ListContainer { private static final Logger LOG = LoggerFactory getLogger(ListContainerImpl class); protected Marshaller marshaller = Store OBJECT MARSHALLER; public ListContainerImpl(ContainerId id, IndexItem root, IndexManager indexManager, DataManager dataManager, boolean persistentIndex) throws IOException { super(id, root, indexManager, dataManager, persistentIndex); } public synchronized void load() { checkClosed(); if (!loaded) { if (!loaded) { loaded = true; try { init(); long nextItem = root getNextItem(); while (nextItem != Item POSITION NOT SET) { IndexItem item = indexManager getIndex(nextItem); indexList add(item); itemAdded(item, indexList size() - 1, getValue(item)); nextItem = item getNextItem(); } } catch (IOException e) { LOG error( Failed to load container + getId(), e); throw new RuntimeStoreException(e); } } } } public synchronized void unload() { checkClosed(); if (loaded) { loaded = false; indexList clear(); } } public synchronized void setMarshaller(Marshaller marshaller) { checkClosed(); this marshaller = marshaller; } public synchronized boolean equals(Object obj) { load(); boolean result = false; if (obj != null && obj instanceof List) { List other = (List)obj; result = other size() == size(); if (result) { for (int i = 0; i < indexList size(); i++) { Object o1 = other get(i); Object o2 = get(i); result = o1 == o2 || (o1 != null && o2 != null && o1 equals(o2)); if (!result) { break; } } } } return result; } public int hashCode() { return super hashCode(); } public synchronized int size() { load(); return indexList size(); } public synchronized void addFirst(Object o) { internalAddFirst(o); } public synchronized void addLast(Object o) { internalAddLast(o); } public synchronized Object removeFirst() { load(); Object result = null; IndexItem item = indexList getFirst(); if (item != null) { itemRemoved(0); result = getValue(item); IndexItem prev = root; IndexItem next = indexList size() > 1 (IndexItem)indexList get(1) null; indexList removeFirst(); delete(item, prev, next); item = null; } return result; } public synchronized Object removeLast() { load(); Object result = null; IndexItem last = indexList getLast(); if (last != null) { itemRemoved(indexList size() - 1); result = getValue(last); IndexItem prev = indexList getPrevEntry(last); IndexItem next = null; indexList removeLast(); delete(last, prev, next); } return result; } public synchronized boolean isEmpty() { load(); return indexList isEmpty(); } public synchronized boolean contains(Object o) { load(); boolean result = false; if (o != null) { IndexItem next = indexList getFirst(); while (next != null) { Object value = getValue(next); if (value != null && value equals(o)) { result = true; break; } next = indexList getNextEntry(next); } } return result; } public synchronized Iterator iterator() { load(); return listIterator(); } public synchronized Object[] toArray() { load(); List<Object> tmp = new ArrayList<Object>(indexList size()); IndexItem next = indexList getFirst(); while (next != null) { Object value = getValue(next); tmp add(value); next = indexList getNextEntry(next); } return tmp toArray(); } public synchronized Object[] toArray(Object[] a) { load(); List<Object> tmp = new ArrayList<Object>(indexList size()); IndexItem next = indexList getFirst(); while (next != null) { Object value = getValue(next); tmp add(value); next = indexList getNextEntry(next); } return tmp toArray(a); } public synchronized boolean add(Object o) { load(); addLast(o); return true; } public synchronized boolean remove(Object o) { load(); boolean result = false; int pos = 0; IndexItem next = indexList getFirst(); while (next != null) { Object value = getValue(next); if (value != null && value equals(o)) { remove(next); itemRemoved(pos); result = true; break; } next = indexList getNextEntry(next); pos++; } return result; } protected synchronized void remove(IndexItem item) { IndexItem prev = indexList getPrevEntry(item); IndexItem next = indexList getNextEntry(item); indexList remove(item); delete(item, prev, next); } public synchronized boolean containsAll(Collection c) { load(); for (Iterator i = c iterator(); i hasNext();) { Object obj = i next(); if (!contains(obj)) { return false; } } return true; } public synchronized boolean addAll(Collection c) { load(); for (Iterator i = c iterator(); i hasNext();) { add(i next()); } return true; } public synchronized boolean addAll(int index, Collection c) { load(); boolean result = false; ListIterator e1 = listIterator(index); Iterator e2 = c iterator(); while (e2 hasNext()) { e1 add(e2 next()); result = true; } return result; } public synchronized boolean removeAll(Collection c) { load(); boolean result = true; for (Iterator i = c iterator(); i hasNext();) { Object obj = i next(); result &= remove(obj); } return result; } public synchronized boolean retainAll(Collection c) { load(); List<Object> tmpList = new ArrayList<Object>(); IndexItem next = indexList getFirst(); while (next != null) { Object o = getValue(next); if (!c contains(o)) { tmpList add(o); } next = indexList getNextEntry(next); } for (Iterator<Object> i = tmpList iterator(); i hasNext();) { remove(i next()); } return !tmpList isEmpty(); } public synchronized void clear() { checkClosed(); super clear(); doClear(); } public synchronized Object get(int index) { load(); Object result = null; IndexItem item = indexList get(index); if (item != null) { result = getValue(item); } return result; } public synchronized Object set(int index, Object element) { load(); Object result = null; IndexItem replace = indexList isEmpty() null (IndexItem)indexList get(index); IndexItem prev = (indexList isEmpty() || (index - 1) < 0) null (IndexItem)indexList get(index - 1); IndexItem next = (indexList isEmpty() || (index + 1) >= size()) null (IndexItem)indexList get(index + 1); result = getValue(replace); indexList remove(index); delete(replace, prev, next); itemRemoved(index); add(index, element); return result; } protected synchronized IndexItem internalSet(int index, Object element) { IndexItem replace = indexList isEmpty() null (IndexItem)indexList get(index); IndexItem prev = (indexList isEmpty() || (index - 1) < 0) null (IndexItem)indexList get(index - 1); IndexItem next = (indexList isEmpty() || (index + 1) >= size()) null (IndexItem)indexList get(index + 1); indexList remove(index); delete(replace, prev, next); itemRemoved(index); return internalAdd(index, element); } public synchronized void add(int index, Object element) { load(); IndexItem item = insert(index, element); indexList add(index, item); itemAdded(item, index, element); } protected synchronized StoreEntry internalAddLast(Object o) { load(); IndexItem item = writeLast(o); indexList addLast(item); itemAdded(item, indexList size() - 1, o); return item; } protected synchronized StoreEntry internalAddFirst(Object o) { load(); IndexItem item = writeFirst(o); indexList addFirst(item); itemAdded(item, 0, o); return item; } protected synchronized IndexItem internalAdd(int index, Object element) { load(); IndexItem item = insert(index, element); indexList add(index, item); itemAdded(item, index, element); return item; } protected synchronized StoreEntry internalGet(int index) { load(); if (index >= 0 && index < indexList size()) { return indexList get(index); } return null; } public synchronized boolean doRemove(int index) { load(); boolean result = false; IndexItem item = indexList get(index); if (item != null) { result = true; IndexItem prev = indexList getPrevEntry(item); prev = prev != null prev root; IndexItem next = indexList getNextEntry(prev); indexList remove(index); itemRemoved(index); delete(item, prev, next); } return result; } public synchronized Object remove(int index) { load(); Object result = null; IndexItem item = indexList get(index); if (item != null) { itemRemoved(index); result = getValue(item); IndexItem prev = indexList getPrevEntry(item); prev = prev != null prev root; IndexItem next = indexList getNextEntry(item); indexList remove(index); delete(item, prev, next); } return result; } public synchronized int indexOf(Object o) { load(); int result = -1; if (o != null) { int count = 0; IndexItem next = indexList getFirst(); while (next != null) { Object value = getValue(next); if (value != null && value equals(o)) { result = count; break; } count++; next = indexList getNextEntry(next); } } return result; } public synchronized int lastIndexOf(Object o) { load(); int result = -1; if (o != null) { int count = indexList size() - 1; IndexItem next = indexList getLast(); while (next != null) { Object value = getValue(next); if (value != null && value equals(o)) { result = count; break; } count--; next = indexList getPrevEntry(next); } } return result; } public synchronized ListIterator listIterator() { load(); return new ContainerListIterator(this, indexList, indexList getRoot()); } public synchronized ListIterator listIterator(int index) { load(); IndexItem start = (index - 1) > 0 indexList get(index - 1) indexList getRoot(); return new ContainerListIterator(this, indexList, start); } public synchronized List<Object> subList(int fromIndex, int toIndex) { load(); List<Object> result = new ArrayList<Object>(); int count = fromIndex; IndexItem next = indexList get(fromIndex); while (next != null && count++ < toIndex) { result add(getValue(next)); next = indexList getNextEntry(next); } return result; } public synchronized StoreEntry placeLast(Object object) { StoreEntry item = internalAddLast(object); return item; } public synchronized StoreEntry placeFirst(Object object) { StoreEntry item = internalAddFirst(object); return item; } public synchronized void update(StoreEntry entry, Object object) { try { dataManager updateItem(entry getValueDataItem(), marshaller, object); } catch (IOException e) { throw new RuntimeException(e); } } public synchronized Object get(final StoreEntry entry) { load(); StoreEntry entryToUse = refresh(entry); return getValue(entryToUse); } public synchronized boolean remove(StoreEntry entry) { IndexItem item = (IndexItem)entry; load(); boolean result = false; if (item != null) { remove(item); result = true; } return result; } public synchronized StoreEntry getFirst() { load(); return indexList getFirst(); } public synchronized StoreEntry getLast() { load(); return indexList getLast(); } public synchronized StoreEntry getNext(StoreEntry entry) { load(); IndexItem item = (IndexItem)entry; return indexList getNextEntry(item); } public synchronized StoreEntry getPrevious(StoreEntry entry) { load(); IndexItem item = (IndexItem)entry; return indexList getPrevEntry(item); } public synchronized StoreEntry refresh(StoreEntry entry) { load(); return indexList getEntry(entry); } protected synchronized IndexItem writeLast(Object value) { IndexItem index = null; try { if (value != null) { StoreLocation data = dataManager storeDataItem(marshaller, value); index = indexManager createNewIndex(); index setValueData(data); IndexItem prev = indexList getLast(); prev = prev != null prev root; IndexItem next = indexList getNextEntry(prev); prev setNextItem(index getOffset()); index setPreviousItem(prev getOffset()); updateIndexes(prev); if (next != null) { next setPreviousItem(index getOffset()); index setNextItem(next getOffset()); updateIndexes(next); } storeIndex(index); } } catch (IOException e) { LOG error( Failed to write + value, e); throw new RuntimeStoreException(e); } return index; } protected synchronized IndexItem writeFirst(Object value) { IndexItem index = null; try { if (value != null) { StoreLocation data = dataManager storeDataItem(marshaller, value); index = indexManager createNewIndex(); index setValueData(data); IndexItem prev = root; IndexItem next = indexList getNextEntry(prev); prev setNextItem(index getOffset()); index setPreviousItem(prev getOffset()); updateIndexes(prev); if (next != null) { next setPreviousItem(index getOffset()); index setNextItem(next getOffset()); updateIndexes(next); } storeIndex(index); } } catch (IOException e) { LOG error( Failed to write + value, e); throw new RuntimeStoreException(e); } return index; } protected synchronized IndexItem insert(int insertPos, Object value) { IndexItem index = null; try { if (value != null) { StoreLocation data = dataManager storeDataItem(marshaller, value); index = indexManager createNewIndex(); index setValueData(data); IndexItem prev = null; IndexItem next = null; if (insertPos <= 0) { prev = root; next = indexList getNextEntry(root); } else if (insertPos >= indexList size()) { prev = indexList getLast(); if (prev==null) { prev=root; } next = null; } else { prev = indexList get(insertPos); prev = prev != null prev root; next = indexList getNextEntry(prev); } prev setNextItem(index getOffset()); index setPreviousItem(prev getOffset()); updateIndexes(prev); if (next != null) { next setPreviousItem(index getOffset()); index setNextItem(next getOffset()); updateIndexes(next); } storeIndex(index); indexList setRoot(root); } } catch (IOException e) { LOG error( Failed to insert + value, e); throw new RuntimeStoreException(e); } return index; } protected synchronized Object getValue(StoreEntry item) { Object result = null; if (item != null) { try { StoreLocation data = item getValueDataItem(); result = dataManager readItem(marshaller, data); } catch (IOException e) { LOG error( Failed to get value for + item, e); throw new RuntimeStoreException(e); } } return result; } public synchronized String toString() { StringBuffer result = new StringBuffer(); result append( [ ); Iterator i = iterator(); boolean hasNext = i hasNext(); while (hasNext) { Object o = i next(); result append(String valueOf(o)); hasNext = i hasNext(); if (hasNext) { result append( , ); } } result append( ] ); return result toString(); } protected synchronized void itemAdded(IndexItem item, int pos, Object value) { } protected synchronized void itemRemoved(int pos) { } }",1.0,
51,51,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\data\DataFile.,DataFile,"class DataFile { private final File file; private final Integer number; private int referenceCount; private RandomAccessFile randomAcessFile; private Object writerData; private long length; private boolean dirty; DataFile(File file, int number) { this file = file; this number = Integer valueOf(number); length = file exists() file length() 0; } Integer getNumber() { return number; } synchronized RandomAccessFile getRandomAccessFile() throws FileNotFoundException { if (randomAcessFile == null) { randomAcessFile = new RandomAccessFile(file, rw ); } return randomAcessFile; } synchronized long getLength() { return length; } synchronized void incrementLength(int size) { length += size; } synchronized void purge() throws IOException { if (randomAcessFile != null) { randomAcessFile close(); randomAcessFile = null; } } synchronized boolean delete() throws IOException { purge(); return file delete(); } synchronized void close() throws IOException { if (randomAcessFile != null) { randomAcessFile close(); } } synchronized int increment() { return ++referenceCount; } synchronized int decrement() { return --referenceCount; } synchronized boolean isUnused() { return referenceCount <= 0; } public String toString() { String result = file getName() + number = + number + , length = + length + refCount = + referenceCount; return result; } public synchronized Object getWriterData() { return writerData; } public synchronized void setWriterData(Object writerData) { this writerData = writerData; dirty = true; } public synchronized boolean isDirty() { return dirty; } public synchronized void setDirty(boolean value) { this dirty = value; } }",1.0,
52,52,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\data\DataItem.,DataItem,"public final class DataItem implements Item, StoreLocation { private int file = (int)POSITION NOT SET; private long offset = POSITION NOT SET; private int size; public DataItem() { } DataItem(DataItem item) { this file = item file; this offset = item offset; this size = item size; } boolean isValid() { return file != POSITION NOT SET; } public int getSize() { return size; } public void setSize(int size) { this size = size; } public long getOffset() { return offset; } public void setOffset(long offset) { this offset = offset; } public int getFile() { return file; } public void setFile(int file) { this file = file; } public String toString() { String result = offset = + offset + , file = + file + , size = + size; return result; } public DataItem copy() { return new DataItem(this); } }",1.0,
55,55,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\data\SyncDataFileWriter.,SyncDataFileWriter,"public final class SyncDataFileWriter { private DataByteArrayOutputStream buffer; private DataManagerImpl dataManager; SyncDataFileWriter(DataManagerImpl fileManager) { this dataManager = fileManager; this buffer = new DataByteArrayOutputStream(); } public synchronized DataItem storeItem(Marshaller marshaller, Object payload, byte type) throws IOException { buffer reset(); buffer position(DataManagerImpl ITEM HEAD SIZE); marshaller writePayload(payload, buffer); int size = buffer size(); int payloadSize = size - DataManagerImpl ITEM HEAD SIZE; buffer reset(); buffer writeByte(type); buffer writeInt(payloadSize); DataItem item = new DataItem(); item setSize(payloadSize); DataFile dataFile = dataManager findSpaceForData(item); dataFile getRandomAccessFile() seek(item getOffset()); dataFile getRandomAccessFile() write(buffer getData(), 0, size); dataFile setWriterData(Boolean TRUE); dataManager addInterestInFile(dataFile); return item; } public synchronized void updateItem(DataItem item, Marshaller marshaller, Object payload, byte type) throws IOException { buffer reset(); buffer position(DataManagerImpl ITEM HEAD SIZE); marshaller writePayload(payload, buffer); int size = buffer size(); int payloadSize = size - DataManagerImpl ITEM HEAD SIZE; buffer reset(); buffer writeByte(type); buffer writeInt(payloadSize); item setSize(payloadSize); DataFile dataFile = dataManager getDataFile(item); RandomAccessFile file = dataFile getRandomAccessFile(); file seek(item getOffset()); file write(buffer getData(), 0, size); dataFile setWriterData(Boolean TRUE); } public synchronized void force(DataFile dataFile) throws IOException { if (dataFile getWriterData() != null && dataFile isDirty()) { dataFile getRandomAccessFile() getFD() sync(); dataFile setWriterData(null); dataFile setDirty(false); } } public void close() throws IOException { } }",1.0,
56,56,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\BadMagicException.,BadMagicException,public class BadMagicException extends IOException { private static final long serialVersionUID = -570930196733067056L; public BadMagicException() { super(); } public BadMagicException(String s) { super(s); } },1.0,
57,57,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\DiskIndexLinkedList.,DiskIndexLinkedList,"public class DiskIndexLinkedList implements IndexLinkedList { protected IndexManager indexManager; protected transient IndexItem root; protected transient IndexItem last; protected transient int size; public DiskIndexLinkedList(IndexManager im, IndexItem header) { this indexManager = im; this root = header; } public synchronized IndexItem getRoot() { return root; } public void setRoot(IndexItem e) { this root = e; } public synchronized IndexItem getFirst() { if (size == 0) { return null; } return getNextEntry(root); } public synchronized IndexItem getLast() { if (size == 0) { return null; } if (last != null) { last next = null; last setNextItem(IndexItem POSITION NOT SET); } return last; } public synchronized StoreEntry removeFirst() { if (size == 0) { return null; } IndexItem result = getNextEntry(root); remove(result); return result; } public synchronized Object removeLast() { if (size == 0) { return null; } StoreEntry result = last; remove(last); return result; } public synchronized void addFirst(IndexItem item) { if (size == 0) { last = item; } size++; } public synchronized void addLast(IndexItem item) { size++; last = item; } public synchronized int size() { return size; } public synchronized boolean isEmpty() { return size == 0; } public synchronized boolean add(IndexItem item) { addLast(item); return true; } public synchronized void clear() { last = null; size = 0; } public synchronized IndexItem get(int index) { return entry(index); } public synchronized void add(int index, IndexItem element) { if (index == size) { last = element; } size++; } public synchronized Object remove(int index) { IndexItem e = entry(index); remove(e); return e; } private IndexItem entry(int index) { if (index < 0 || index >= size) { throw new IndexOutOfBoundsException( Index + index + , Size + size); } IndexItem e = root; for (int i = 0; i <= index; i++) { e = getNextEntry(e); } if (e != null && last != null && last equals(e)) { last = e; } return e; } public synchronized int indexOf(StoreEntry o) { int index = 0; if (size > 0) { for (IndexItem e = getNextEntry(root); e != null; e = getNextEntry(e)) { if (o equals(e)) { return index; } index++; } } return -1; } public synchronized IndexItem getNextEntry(IndexItem current) { IndexItem result = null; if (current != null) { current = (IndexItem) refreshEntry(current); if (current getNextItem() >= 0) { try { result = indexManager getIndex(current getNextItem()); } catch (IOException e) { throw new RuntimeException( Failed to get next index from + indexManager + for + current, e); } } } if (result != null && last != null && last equals(result)) { last=result; } return result; } public synchronized IndexItem getPrevEntry(IndexItem current) { IndexItem result = null; if (current != null) { if (current getPreviousItem() >= 0) { current = (IndexItem) refreshEntry(current); try { result = indexManager getIndex(current getPreviousItem()); } catch (IOException e) { throw new RuntimeException( Failed to get current index for + current, e); } } } if (result != null && root != null && root equals(result)) { return null; } return result; } public synchronized StoreEntry getEntry(StoreEntry current) { StoreEntry result = null; if (current != null && current getOffset() >= 0) { try { result = indexManager getIndex(current getOffset()); } catch (IOException e) { throw new RuntimeException( Failed to index , e); } } if (result != null && root != null && root equals(result)) { return root; } return result; } public synchronized StoreEntry refreshEntry(StoreEntry current) { StoreEntry result = null; if (current != null && current getOffset() >= 0) { try { result = indexManager refreshIndex((IndexItem)current); } catch (IOException e) { throw new RuntimeException( Failed to index , e); } } if (result != null && root != null && root equals(result)) { return root; } return result; } public synchronized void remove(IndexItem e) { if (e==null || e == root || e equals(root)) { return; } if (e == last || e equals(last)) { if (size > 1) { last = (IndexItem)refreshEntry(last); last = getPrevEntry(last); } else { last = null; } } size--; } }",1.0,
59,59,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\IndexManager.,IndexManager,"public final class IndexManager { public static final String NAME PREFIX = index- ; private static final Logger LOG = LoggerFactory getLogger(IndexManager class); private final String name; private File directory; private File file; private RandomAccessFile indexFile; private StoreIndexReader reader; private StoreIndexWriter writer; private DataManager redoLog; private String mode; private long length; private IndexItem firstFree; private IndexItem lastFree; private boolean dirty; private final AtomicLong storeSize; private int freeSize = 0; public IndexManager(File directory, String name, String mode, DataManager redoLog, AtomicLong storeSize) throws IOException { this directory = directory; this name = name; this mode = mode; this redoLog = redoLog; this storeSize=storeSize; initialize(); } public synchronized boolean isEmpty() { return lastFree == null && length == 0; } public synchronized IndexItem getIndex(long offset) throws IOException { IndexItem result = null; if (offset >= 0) { result = reader readItem(offset); } return result; } public synchronized IndexItem refreshIndex(IndexItem item) throws IOException { reader updateIndexes(item); return item; } public synchronized void freeIndex(IndexItem item) throws IOException { item reset(); item setActive(false); if (lastFree == null) { firstFree = item; lastFree = item; } else { lastFree setNextItem(item getOffset()); if (lastFree equals(firstFree)) { firstFree=new IndexItem(); firstFree copyIndex(lastFree); writer updateIndexes(firstFree); } writer updateIndexes(lastFree); lastFree=item; } writer updateIndexes(item); freeSize++; dirty = true; } public synchronized void storeIndex(IndexItem index) throws IOException { writer storeItem(index); dirty = true; } public synchronized void updateIndexes(IndexItem index) throws IOException { try { writer updateIndexes(index); } catch (Throwable e) { LOG error(name + error updating indexes , e); } dirty = true; } public synchronized void redo(final RedoStoreIndexItem redo) throws IOException { writer redoStoreItem(redo); dirty = true; } public synchronized IndexItem createNewIndex() throws IOException { IndexItem result = getNextFreeIndex(); if (result == null) { result = new IndexItem(); result setOffset(length); length += IndexItem INDEX SIZE; storeSize addAndGet(IndexItem INDEX SIZE); } return result; } public synchronized void close() throws IOException { if (indexFile != null) { indexFile close(); indexFile = null; } } public synchronized void force() throws IOException { if (indexFile != null && dirty) { indexFile getFD() sync(); dirty = false; } } public synchronized boolean delete() throws IOException { firstFree = null; lastFree = null; if (indexFile != null) { indexFile close(); indexFile = null; } return file delete(); } private synchronized IndexItem getNextFreeIndex() throws IOException { IndexItem result = null; if (firstFree != null) { if (firstFree equals(lastFree)) { result = firstFree; firstFree = null; lastFree = null; } else { result = firstFree; firstFree = getIndex(firstFree getNextItem()); if (firstFree == null) { lastFree = null; } } result reset(); writer updateIndexes(result); freeSize--; } return result; } synchronized long getLength() { return length; } public final long size() { return length; } public synchronized void setLength(long value) { this length = value; storeSize addAndGet(length); } public synchronized FileLock getLock() throws IOException { return indexFile getChannel() tryLock(0, Math max(1, indexFile getChannel() size()), false); } public String toString() { return IndexManager ( + NAME PREFIX + name + ) ; } protected void initialize() throws IOException { file = new File(directory, NAME PREFIX + IOHelper toFileSystemSafeName(name) ); IOHelper mkdirs(file getParentFile()); indexFile = new RandomAccessFile(file, mode); reader = new StoreIndexReader(indexFile); writer = new StoreIndexWriter(indexFile, name, redoLog); long offset = 0; while ((offset + IndexItem INDEX SIZE) <= indexFile length()) { IndexItem index = reader readItem(offset); if (!index isActive()) { index reset(); if (lastFree != null) { lastFree setNextItem(index getOffset()); updateIndexes(lastFree); lastFree = index; } else { lastFree = index; firstFree = index; } freeSize++; } offset += IndexItem INDEX SIZE; } length = offset; storeSize addAndGet(length); } }",1.0,
60,60,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\RedoStoreIndexItem.,RedoStoreIndexItem,"public class RedoStoreIndexItem implements Externalizable { public static final Marshaller MARSHALLER = new Marshaller() { public Object readPayload(DataInput in) throws IOException { RedoStoreIndexItem item = new RedoStoreIndexItem(); item readExternal(in); return item; } public void writePayload(Object object, DataOutput out) throws IOException { RedoStoreIndexItem item = (RedoStoreIndexItem)object; item writeExternal(out); } }; private static final long serialVersionUID = -4865508871719676655L; private String indexName; private IndexItem indexItem; private long offset; public RedoStoreIndexItem() { } public RedoStoreIndexItem(String indexName, long offset, IndexItem item) { this indexName = indexName; this offset = offset; this indexItem = item; } public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { readExternal((DataInput)in); } public void readExternal(DataInput in) throws IOException { offset = in readLong(); indexItem = new IndexItem(); indexItem read(in); } public void writeExternal(ObjectOutput out) throws IOException { writeExternal((DataOutput)out); } public void writeExternal(DataOutput out) throws IOException { out writeLong(offset); indexItem write(out); } public String getIndexName() { return indexName; } public void setIndexName(String indexName) { this indexName = indexName; } public IndexItem getIndexItem() { return indexItem; } public void setIndexItem(IndexItem item) { this indexItem = item; } public long getOffset() { return offset; } public void setOffset(long offset) { this offset = offset; } }",1.0,
61,61,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\StoreIndexReader.,StoreIndexReader,"class StoreIndexReader { protected RandomAccessFile file; protected DataByteArrayInputStream dataIn; protected byte[] buffer = new byte[IndexItem INDEX SIZE]; StoreIndexReader(RandomAccessFile file) { this file = file; this dataIn = new DataByteArrayInputStream(); } protected IndexItem readItem(long offset) throws IOException { file seek(offset); file readFully(buffer); dataIn restart(buffer); IndexItem result = new IndexItem(); result setOffset(offset); result read(dataIn); return result; } void updateIndexes(IndexItem indexItem) throws IOException { if (indexItem != null) { file seek(indexItem getOffset()); file readFully(buffer, 0, IndexItem INDEXES ONLY SIZE); dataIn restart(buffer); indexItem readIndexes(dataIn); } } }",1.0,
63,63,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\VMIndex.,VMIndex,"public class VMIndex implements Index, IndexMBean { private static final Logger LOG = LoggerFactory getLogger(VMIndex class); private IndexManager indexManager; private Map<Object, StoreEntry> map = new HashMap<Object, StoreEntry>(); public VMIndex(IndexManager manager) { this indexManager = manager; } public void clear() { map clear(); } public boolean containsKey(Object key) { return map containsKey(key); } public StoreEntry remove(Object key) { StoreEntry result = map remove(key); if (result != null) { try { result = indexManager refreshIndex((IndexItem)result); } catch (IOException e) { LOG error( Failed to refresh entry , e); throw new RuntimeException( Failed to refresh entry ); } } return result; } public void store(Object key, StoreEntry entry) { map put(key, entry); } public StoreEntry get(Object key) { StoreEntry result = map get(key); if (result != null) { try { result = indexManager refreshIndex((IndexItem)result); } catch (IOException e) { LOG error( Failed to refresh entry , e); throw new RuntimeException( Failed to refresh entry ); } } return result; } public boolean isTransient() { return true; } public void load() { } public void unload() { map clear(); } public void delete() throws IOException { unload(); } public void setKeyMarshaller(Marshaller marshaller) { } public int getSize() { return map size(); } }",1.0,
64,64,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\VMIndexLinkedList.,VMIndexLinkedList,"public final class VMIndexLinkedList implements Cloneable, IndexLinkedList { private transient IndexItem root; private transient int size; public VMIndexLinkedList(IndexItem header) { this root = header; this root next=this root prev=this root; } public void setRoot(IndexItem newRoot) { this root=newRoot; } public synchronized IndexItem getRoot() { return root; } public synchronized IndexItem getFirst() { if (size == 0) { return null; } return root next; } public synchronized IndexItem getLast() { if (size == 0) { return null; } return root prev; } public synchronized StoreEntry removeFirst() { if (size == 0) { return null; } StoreEntry result = root next; remove(root next); return result; } public synchronized Object removeLast() { if (size == 0) { return null; } StoreEntry result = root prev; remove(root prev); return result; } public synchronized void addFirst(IndexItem item) { addBefore(item, root next); } public synchronized void addLast(IndexItem item) { addBefore(item, root); } public synchronized int size() { return size; } public synchronized boolean isEmpty() { return size == 0; } public synchronized boolean add(IndexItem item) { addBefore(item, root); return true; } public synchronized void clear() { root next=root prev=root; size = 0; } public synchronized IndexItem get(int index) { return entry(index); } public synchronized void add(int index, IndexItem element) { addBefore(element, index == size root entry(index)); } public synchronized Object remove(int index) { IndexItem e = entry(index); remove(e); return e; } private IndexItem entry(int index) { if (index < 0 || index >= size) { throw new IndexOutOfBoundsException( Index + index + , Size + size); } IndexItem e = root; if (index < size / 2) { for (int i = 0; i <= index; i++) { e = e next; } } else { for (int i = size; i > index; i--) { e = e prev; } } return e; } public synchronized int indexOf(StoreEntry o) { int index = 0; for (IndexItem e = root next; e != root; e = e next) { if (o == e) { return index; } index++; } return -1; } public synchronized IndexItem getNextEntry(IndexItem entry) { return entry next != root entry next null; } public synchronized IndexItem getPrevEntry(IndexItem entry) { return entry prev != root entry prev null; } public synchronized void addBefore(IndexItem insert, IndexItem e) { insert next = e; insert prev = e prev; insert prev next = insert; insert next prev = insert; size++; } public synchronized void remove(IndexItem e) { if (e == root || e equals(root)) { return; } e prev next = e next; e next prev = e prev; size--; } public synchronized Object clone() { IndexLinkedList clone = new VMIndexLinkedList(this root); for (IndexItem e = root next; e != root; e = e next) { clone add(e); } return clone; } public synchronized StoreEntry getEntry(StoreEntry current) { return current; } public synchronized StoreEntry refreshEntry(StoreEntry current) { return current; } }",1.0,
69,69,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\hash\HashPageInfo.,HashPageInfo,"class HashPageInfo extends LinkedNode{ private HashIndex hashIndex; private long id; private int size; private HashPage page; private boolean dirty; HashPageInfo(HashIndex index) { this hashIndex = index; } long getId() { return this id; } void setId(long id) { this id = id; } int size() { return this size; } boolean isEmpty() { return size <= 0; } void setSize(int size) { this size = size; } void addHashEntry(int index, HashEntry entry) throws IOException { page addHashEntry(index, entry); size=page size(); dirty = true; } HashEntry getHashEntry(int index) throws IOException { return page getHashEntry(index); } HashEntry removeHashEntry(int index) throws IOException { HashEntry result = page removeHashEntry(index); if (result != null) { size=page size(); dirty = true; } return result; } String dump() { return page dump(); } void begin() throws IOException { if (page == null) { page = hashIndex lookupPage(id); } } void end() throws IOException { if (page != null) { if (dirty) { hashIndex writeFullPage(page); } } page = null; dirty = false; } HashPage getPage() { return page; } void setPage(HashPage page) { this page = page; } public String toString() { return Page[ +id+ ] size= + size; } }",1.0,
73,73,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\index\tree\TreePageEntry.,TreePageEntry,"class TreePageEntry { private TreeEntry treeEntry; private TreePage treePage; private TreePage Flavour flavour; private int index = -1; TreePageEntry(TreeEntry treeEntry, TreePage treePage, TreePage Flavour flavour, int index) { this treeEntry = treeEntry; this treePage = treePage; this flavour = flavour; this index = index; } TreePage Flavour getFlavour() { return this flavour; } void setFlavour(TreePage Flavour flavour) { this flavour = flavour; } TreePage getTreePage() { return this treePage; } void setTreePage(TreePage treePage) { this treePage = treePage; } public int getIndex() { return this index; } public void setIndex(int index) { this index = index; } public TreeEntry getTreeEntry() { return this treeEntry; } public void setTreeEntry(TreeEntry treeEntry) { this treeEntry = treeEntry; } }",1.0,
75,75,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\AMQJournalToolCommand.,AMQJournalToolCommand,"public class AMQJournalToolCommand implements Command { private CommandContext context; Override public String getName() { return journal-audit ; } Override public String getOneLineDescription() { return Allows you to view records stored in the persistent journal ; } public void execute(List<String> tokens) throws Exception { AMQJournalTool consumerTool = new AMQJournalTool(); String args[] = new String[tokens size()]; tokens toArray(args); String[] directories = CommandLineSupport setOptions(consumerTool, args); for (int i = 0; i < directories length; i++) { consumerTool getDirs() add(new File(directories[i])); } consumerTool execute(); } public void setCommandContext(CommandContext context) { this context = context; } }",1.0,
80,80,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\AMQTopicMessageStore.,MessageCounter,"private class MessageCounter implements MessageRecoveryListener { int count = 0; SubscriptionInfo info; BooleanExpression selectorExpression; TopicMessageStore store; public MessageCounter(SubscriptionInfo info, TopicMessageStore store) throws Exception { this info = info; if (info != null) { String selector = info getSelector(); if (selector != null) { this selectorExpression = SelectorParser parse(selector); } } this store = store; } public boolean recoverMessageReference(MessageId ref) throws Exception { if (selectorExpression != null) { MessageEvaluationContext ctx = new MessageEvaluationContext(); ctx setMessageReference(store getMessage(ref)); if (selectorExpression matches(ctx)) { count++; } } else { count ++; } return true; } public boolean recoverMessage(Message message) throws Exception { if (selectorExpression != null) { MessageEvaluationContext ctx = new MessageEvaluationContext(); ctx setMessageReference(store getMessage(message getMessageId())); if (selectorExpression matches(ctx)) { count++; } } else { count++; } return true; } public boolean isDuplicate(MessageId ref) { return false; } public boolean hasSpace() { return true; } }",1.0,
81,81,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\AMQTransactionStore.,AMQTransactionStore,"public class AMQTransactionStore implements TransactionStore { protected Map<TransactionId, AMQTx> inflightTransactions = new LinkedHashMap<TransactionId, AMQTx>(); Map<TransactionId, AMQTx> preparedTransactions = new LinkedHashMap<TransactionId, AMQTx>(); private final AMQPersistenceAdapter peristenceAdapter; private boolean doingRecover; public AMQTransactionStore(AMQPersistenceAdapter adapter) { this peristenceAdapter = adapter; } public void prepare(TransactionId txid) throws IOException { AMQTx tx = null; synchronized (inflightTransactions) { tx = inflightTransactions remove(txid); } if (tx == null) { return; } peristenceAdapter writeCommand(new JournalTransaction(JournalTransaction XA PREPARE, txid, false), true); synchronized (preparedTransactions) { preparedTransactions put(txid, tx); } } public void replayPrepare(TransactionId txid) throws IOException { AMQTx tx = null; synchronized (inflightTransactions) { tx = inflightTransactions remove(txid); } if (tx == null) { return; } synchronized (preparedTransactions) { preparedTransactions put(txid, tx); } } public AMQTx getTx(TransactionId txid, Location location) { AMQTx tx = null; synchronized (inflightTransactions) { tx = inflightTransactions get(txid); if (tx == null) { tx = new AMQTx(location); inflightTransactions put(txid, tx); } } return tx; } public void commit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit) throws IOException { if (preCommit != null) { preCommit run(); } AMQTx tx; if (wasPrepared) { synchronized (preparedTransactions) { tx = preparedTransactions remove(txid); } } else { synchronized (inflightTransactions) { tx = inflightTransactions remove(txid); } } if (tx == null) { if (postCommit != null) { postCommit run(); } return; } if (txid isXATransaction()) { peristenceAdapter writeCommand(new JournalTransaction(JournalTransaction XA COMMIT, txid, wasPrepared), true,true); } else { peristenceAdapter writeCommand(new JournalTransaction(JournalTransaction LOCAL COMMIT, txid, wasPrepared), true,true); } if (postCommit != null) { postCommit run(); } } public AMQTx replayCommit(TransactionId txid, boolean wasPrepared) throws IOException { if (wasPrepared) { synchronized (preparedTransactions) { return preparedTransactions remove(txid); } } else { synchronized (inflightTransactions) { return inflightTransactions remove(txid); } } } public void rollback(TransactionId txid) throws IOException { AMQTx tx = null; synchronized (inflightTransactions) { tx = inflightTransactions remove(txid); } if (tx != null) { synchronized (preparedTransactions) { tx = preparedTransactions remove(txid); } } if (tx != null) { if (txid isXATransaction()) { peristenceAdapter writeCommand(new JournalTransaction(JournalTransaction XA ROLLBACK, txid, false), true,true); } else { peristenceAdapter writeCommand(new JournalTransaction(JournalTransaction LOCAL ROLLBACK, txid, false), true,true); } } } public void replayRollback(TransactionId txid) throws IOException { boolean inflight = false; synchronized (inflightTransactions) { inflight = inflightTransactions remove(txid) != null; } if (inflight) { synchronized (preparedTransactions) { preparedTransactions remove(txid); } } } public void start() throws Exception { } public void stop() throws Exception { } public synchronized void recover(TransactionRecoveryListener listener) throws IOException { synchronized (inflightTransactions) { inflightTransactions clear(); } this doingRecover = true; try { Map<TransactionId, AMQTx> txs = null; synchronized (preparedTransactions) { txs = new LinkedHashMap<TransactionId, AMQTx>(preparedTransactions); } for (Iterator<TransactionId> iter = txs keySet() iterator(); iter hasNext();) { Object txid = iter next(); AMQTx tx = txs get(txid); listener recover((XATransactionId)txid, tx getMessages(), tx getAcks()); } } finally { this doingRecover = false; } } void addMessage(AMQMessageStore store, Message message, Location location) throws IOException { AMQTx tx = getTx(message getTransactionId(), location); tx add(store, message, location); } public void removeMessage(AMQMessageStore store, MessageAck ack, Location location) throws IOException { AMQTx tx = getTx(ack getTransactionId(), location); tx add(store, ack); } public void acknowledge(AMQTopicMessageStore store, JournalTopicAck ack, Location location) { AMQTx tx = getTx(ack getTransactionId(), location); tx add(store, ack); } public Location checkpoint() throws IOException { Location minimumLocationInUse = null; synchronized (inflightTransactions) { for (Iterator<AMQTx> iter = inflightTransactions values() iterator(); iter hasNext();) { AMQTx tx = iter next(); Location location = tx getLocation(); if (minimumLocationInUse == null || location compareTo(minimumLocationInUse) < 0) { minimumLocationInUse = location; } } } synchronized (preparedTransactions) { for (Iterator<AMQTx> iter = preparedTransactions values() iterator(); iter hasNext();) { AMQTx tx = iter next(); Location location = tx getLocation(); if (minimumLocationInUse == null || location compareTo(minimumLocationInUse) < 0) { minimumLocationInUse = location; } } return minimumLocationInUse; } } public boolean isDoingRecover() { return doingRecover; } public Map<TransactionId, AMQTx> getPreparedTransactions() { return this preparedTransactions; } public void setPreparedTransactions(Map<TransactionId, AMQTx> preparedTransactions) { if (preparedTransactions != null) { this preparedTransactions clear(); this preparedTransactions putAll(preparedTransactions); } } }",1.0,
84,84,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\CommandLineSupport.,CommandLineSupport,"public final class CommandLineSupport { private CommandLineSupport() { } public static String[] setOptions(Object target, String[] args) { ArrayList<String> rc = new ArrayList<String>(); for (int i = 0; i < args length; i++) { if (args[i] == null) { continue; } if (args[i] startsWith( -- )) { String value = true ; String name = args[i] substring(2); int p = name indexOf( = ); if (p > 0) { value = name substring(p + 1); name = name substring(0, p); } if (name length() == 0) { rc add(args[i]); continue; } String propName = convertOptionToPropertyName(name); if (!IntrospectionSupport setProperty(target, propName, value)) { rc add(args[i]); continue; } } else { rc add(args[i]); } } String r[] = new String[rc size()]; rc toArray(r); return r; } private static String convertOptionToPropertyName(String name) { String rc = ; int p = name indexOf( - ); while (p > 0) { rc += name substring(0, p); name = name substring(p + 1); if (name length() > 0) { rc += name substring(0, 1) toUpperCase(); name = name substring(1); } p = name indexOf( - ); } return rc + name; } }",1.0,
85,85,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\CustomResourceLoader.,CustomResourceLoader,"public class CustomResourceLoader extends ResourceLoader { private final static ThreadLocal<HashMap<String, String>> resourcesTL = new ThreadLocal<HashMap<String, String>>(); private final FileResourceLoader fileResourceLoader = new FileResourceLoader(); Override public void commonInit(RuntimeServices rs, ExtendedProperties configuration) { super commonInit(rs, configuration); fileResourceLoader commonInit(rs, configuration); } public void init( ExtendedProperties configuration) { fileResourceLoader init(configuration); } public synchronized InputStream getResourceStream( String name ) throws ResourceNotFoundException { InputStream result = null; if (name == null || name length() == 0) { throw new ResourceNotFoundException ( No template name provided ); } String value = null; HashMap<String, String> resources = resourcesTL get(); if( resources!=null ) { value = resources get(name); } if( value == null ) { result = this fileResourceLoader getResourceStream(name); } else { try { result = new ByteArrayInputStream(value getBytes()); } catch( Exception e ) { throw new ResourceNotFoundException( e getMessage() ); } } return result; } public boolean isSourceModified(Resource resource) { return false; } public long getLastModified(Resource resource) { return 0; } static public HashMap<String, String> getResources() { return resourcesTL get(); } static public void setResources(HashMap<String, String> arg0) { resourcesTL set(arg0); } }",1.0,
87,87,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\MessageBodyFormatter.,MessageBodyFormatter,"public class MessageBodyFormatter { final ActiveMQMessage message; public MessageBodyFormatter(ActiveMQMessage message) { this message=message; } Override public String toString() { try { switch (message getDataStructureType()) { case ActiveMQMessage DATA STRUCTURE TYPE return ; case ActiveMQBlobMessage DATA STRUCTURE TYPE ActiveMQBlobMessage blob = (ActiveMQBlobMessage) message; return blob getRemoteBlobUrl(); case ActiveMQMapMessage DATA STRUCTURE TYPE ActiveMQMapMessage map = (ActiveMQMapMessage)message; return map getContentMap() toString(); case ActiveMQTextMessage DATA STRUCTURE TYPE ActiveMQTextMessage text = (ActiveMQTextMessage)message; return text getText(); case ActiveMQBytesMessage DATA STRUCTURE TYPE case ActiveMQObjectMessage DATA STRUCTURE TYPE case ActiveMQStreamMessage DATA STRUCTURE TYPE ByteSequence data = message getContent(); return binary payload {length= +data getLength()+ , compressed= +message isCompressed()+ } ; } } catch (JMSException e) { } return ; } }",1.0,
88,88,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\RecoveryListenerAdapter.,RecoveryListenerAdapter,"final class RecoveryListenerAdapter implements MessageRecoveryListener { private static final Logger LOG = LoggerFactory getLogger(RecoveryListenerAdapter class); private final MessageStore store; private final MessageRecoveryListener listener; private int count; private MessageId lastRecovered; RecoveryListenerAdapter(MessageStore store, MessageRecoveryListener listener) { this store = store; this listener = listener; } public boolean hasSpace() { return listener hasSpace(); } public boolean isDuplicate(MessageId id) { return listener isDuplicate(id); } public boolean recoverMessage(Message message) throws Exception { if (listener hasSpace()) { if (listener recoverMessage(message)) { lastRecovered = message getMessageId(); count++; return true; } } return false; } public boolean recoverMessageReference(MessageId ref) throws Exception { Message message = this store getMessage(ref); if (message != null) { return recoverMessage(message); } else { throw new IllegalStateException( Message id + ref + could not be recovered from the data store for + store getDestination() getQualifiedName() + - already dispatched ); } } MessageId getLastRecoveredMessageId() { return lastRecovered; } int size() { return count; } void reset() { count = 0; } }",1.0,
89,89,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\reader\AMQIterator.,AMQIterator,"class AMQIterator implements Iterator<Message>{ private AMQReader reader; private BooleanExpression expression; private MessageLocation currentLocation; private MessageLocation nextLocation; private boolean valid=true; AMQIterator(AMQReader reader, BooleanExpression expression){ this reader=reader; this expression=expression; } public boolean hasNext() { try { this nextLocation = reader getNextMessage(currentLocation); Message next = nextLocation != null nextLocation getMessage() null; if (expression == null) { return next != null; } else { while (next != null) { MessageEvaluationContext context = new MessageEvaluationContext(); context setMessageReference((MessageReference) next); if (expression matches(context)) { return true; } this nextLocation = reader getNextMessage(currentLocation); next = nextLocation != null nextLocation getMessage() null; } valid=false; return false; } } catch (Exception e) { throw new RuntimeException( Failed to get next message from reader , e); } } public Message next() { if (valid && (nextLocation != null || hasNext())) { this currentLocation=nextLocation; return nextLocation getMessage(); } return null; } public void remove() { throw new IllegalStateException( Not supported ); } }",1.0,
91,91,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\reader\MessageLocation.,MessageLocation,class MessageLocation { private Message message; private Location location; public Location getLocation() { return location; } public void setLocation(Location location) { this location = location; } public Message getMessage() { return message; } public void setMessage(Message message) { this message = message; } },1.0,
93,93,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\AtomicIntegerMarshaller.,AtomicIntegerMarshaller,"public class AtomicIntegerMarshaller implements Marshaller<AtomicInteger> { public void writePayload(AtomicInteger ai, DataOutput dataOut) throws IOException { dataOut writeInt(ai get()); } public AtomicInteger readPayload(DataInput dataIn) throws IOException { int value = dataIn readInt(); return new AtomicInteger(value); } }",1.0,
95,95,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\ConsumerMessageRefMarshaller.,ConsumerMessageRefMarshaller,"public class ConsumerMessageRefMarshaller implements Marshaller { public void writePayload(Object object, DataOutput dataOut) throws IOException { ConsumerMessageRef ref = (ConsumerMessageRef)object; dataOut writeUTF(ref getMessageId() toString()); IndexItem item = (IndexItem)ref getMessageEntry(); dataOut writeLong(item getOffset()); item write(dataOut); item = (IndexItem)ref getAckEntry(); dataOut writeLong(item getOffset()); item write(dataOut); } public Object readPayload(DataInput dataIn) throws IOException { ConsumerMessageRef ref = new ConsumerMessageRef(); ref setMessageId(new MessageId(dataIn readUTF())); IndexItem item = new IndexItem(); item setOffset(dataIn readLong()); item read(dataIn); ref setMessageEntry(item); item = new IndexItem(); item setOffset(dataIn readLong()); item read(dataIn); ref setAckEntry(item); return ref; } }",1.0,
96,96,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\IntegerMarshaller.,IntegerMarshaller,"public class IntegerMarshaller implements Marshaller<Integer> { public void writePayload(Integer object, DataOutput dataOut) throws IOException { dataOut writeInt(object intValue()); } public Integer readPayload(DataInput dataIn) throws IOException { return dataIn readInt(); } }",1.0,
100,100,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\KahaReferenceStoreAdapter.,KahaReferenceStoreAdapter,"public class KahaReferenceStoreAdapter extends KahaPersistenceAdapter implements ReferenceStoreAdapter { private static final Logger LOG = LoggerFactory getLogger(KahaReferenceStoreAdapter class); private static final String STORE STATE = store-state ; private static final String QUEUE DATA = queue-data ; private static final String INDEX VERSION NAME = INDEX VERSION ; private static final Integer INDEX VERSION = new Integer(7); private static final String RECORD REFERENCES = record-references ; private static final String TRANSACTIONS = transactions-state ; private MapContainer stateMap; private MapContainer<TransactionId, AMQTx> preparedTransactions; private Map<Integer, AtomicInteger> recordReferences = new HashMap<Integer, AtomicInteger>(); private ListContainer<SubscriptionInfo> durableSubscribers; private boolean storeValid; private Store stateStore; private boolean persistentIndex = true; private int indexBinSize = HashIndex DEFAULT BIN SIZE; private int indexKeySize = HashIndex DEFAULT KEY SIZE; private int indexPageSize = HashIndex DEFAULT PAGE SIZE; private int indexMaxBinSize = HashIndex MAXIMUM CAPACITY; private int indexLoadFactor = HashIndex DEFAULT LOAD FACTOR; public KahaReferenceStoreAdapter(AtomicLong size){ super(size); } public synchronized MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException { throw new RuntimeException( Use createQueueReferenceStore instead ); } public synchronized TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException { throw new RuntimeException( Use createTopicReferenceStore instead ); } Override public synchronized void start() throws Exception { super start(); Store store = getStateStore(); boolean empty = store getMapContainerIds() isEmpty(); stateMap = store getMapContainer( state , STORE STATE); stateMap load(); storeValid=true; if (!empty) { AtomicBoolean status = (AtomicBoolean)stateMap get(STORE STATE); if (status != null) { storeValid = status get(); } if (storeValid) { Integer indexVersion = (Integer) stateMap get(INDEX VERSION NAME); if (indexVersion==null || indexVersion intValue() < INDEX VERSION intValue()) { storeValid = false; LOG warn( Indexes at an older version - need to regenerate ); } } if (storeValid) { if (stateMap containsKey(RECORD REFERENCES)) { recordReferences = (Map<Integer, AtomicInteger>)stateMap get(RECORD REFERENCES); } } } stateMap put(STORE STATE, new AtomicBoolean()); stateMap put(INDEX VERSION NAME, INDEX VERSION); durableSubscribers = store getListContainer( durableSubscribers ); durableSubscribers setMarshaller(new CommandMarshaller()); preparedTransactions = store getMapContainer( transactions , TRANSACTIONS, false); preparedTransactions setKeyMarshaller(Store COMMAND MARSHALLER); preparedTransactions setValueMarshaller(new AMQTxMarshaller(wireFormat)); } Override public synchronized void stop() throws Exception { stateMap put(RECORD REFERENCES, recordReferences); stateMap put(STORE STATE, new AtomicBoolean(true)); stateMap put(INDEX VERSION NAME, INDEX VERSION); if (this stateStore != null) { this stateStore close(); this stateStore = null; this stateMap = null; } super stop(); } public void commitTransaction(ConnectionContext context) throws IOException { } public boolean isStoreValid() { return storeValid; } public ReferenceStore createQueueReferenceStore(ActiveMQQueue destination) throws IOException { ReferenceStore rc = (ReferenceStore)queues get(destination); if (rc == null) { rc = new KahaReferenceStore(this, getMapReferenceContainer(destination, QUEUE DATA), destination); messageStores put(destination, rc); queues put(destination, rc); } return rc; } public TopicReferenceStore createTopicReferenceStore(ActiveMQTopic destination) throws IOException { TopicReferenceStore rc = (TopicReferenceStore)topics get(destination); if (rc == null) { Store store = getStore(); MapContainer messageContainer = getMapReferenceContainer(destination getPhysicalName(), topic-data ); MapContainer subsContainer = getSubsMapContainer(destination getPhysicalName() + -Subscriptions , blob ); ListContainer<TopicSubAck> ackContainer = store getListContainer(destination getPhysicalName(), topic-acks ); ackContainer setMarshaller(new TopicSubAckMarshaller()); rc = new KahaTopicReferenceStore(store, this, messageContainer, ackContainer, subsContainer, destination); messageStores put(destination, rc); topics put(destination, rc); } return rc; } public void removeReferenceStore(KahaReferenceStore referenceStore) { ActiveMQDestination destination = referenceStore getDestination(); if (destination isQueue()) { queues remove(destination); try { getStore() deleteMapContainer(destination, QUEUE DATA); } catch (IOException e) { LOG error( Failed to delete + QUEUE DATA + map container for destination + destination, e); } } else { topics remove(destination); } messageStores remove(destination); } protected MapContainer<MessageId, ReferenceRecord> getMapReferenceContainer(Object id, String containerName) throws IOException { Store store = getStore(); MapContainer<MessageId, ReferenceRecord> container = store getMapContainer(id, containerName,persistentIndex); container setIndexBinSize(getIndexBinSize()); container setIndexKeySize(getIndexKeySize()); container setIndexPageSize(getIndexPageSize()); container setIndexMaxBinSize(getIndexMaxBinSize()); container setIndexLoadFactor(getIndexLoadFactor()); container setKeyMarshaller(new MessageIdMarshaller()); container setValueMarshaller(new ReferenceRecordMarshaller()); container load(); return container; } synchronized void addInterestInRecordFile(int recordNumber) { Integer key = Integer valueOf(recordNumber); AtomicInteger rr = recordReferences get(key); if (rr == null) { rr = new AtomicInteger(); recordReferences put(key, rr); } rr incrementAndGet(); } synchronized void removeInterestInRecordFile(int recordNumber) { Integer key = Integer valueOf(recordNumber); AtomicInteger rr = recordReferences get(key); if (rr != null && rr decrementAndGet() <= 0) { recordReferences remove(key); } } public synchronized Set<Integer> getReferenceFileIdsInUse() throws IOException { Set inUse = new HashSet<Integer>(recordReferences keySet()); Iterator<Map Entry<Integer, Set<Integer>>> ackReferences = ackMessageFileMap entrySet() iterator(); while (ackReferences hasNext()) { Map Entry<Integer, Set<Integer>> ackReference = ackReferences next(); if (!inUse contains(ackReference getKey())) { for (Integer referencedFileId ackReference getValue()) { if (inUse contains(referencedFileId)) { inUse add(ackReference getKey()); LOG debug( not removing data file + ackReference getKey() + as contained ack(s) refer to referencedFileId file + ackReference getValue()); break; } } } if (!inUse contains(ackReference getKey())) { ackReferences remove(); } } return inUse; } Map<Integer, Set<Integer>> ackMessageFileMap = new HashMap<Integer, Set<Integer>>(); public synchronized void recordAckFileReferences(int ackDataFileId, int messageFileId) { Set<Integer> referenceFileIds = ackMessageFileMap get(Integer valueOf(ackDataFileId)); if (referenceFileIds == null) { referenceFileIds = new HashSet<Integer>(); referenceFileIds add(Integer valueOf(messageFileId)); ackMessageFileMap put(Integer valueOf(ackDataFileId), referenceFileIds); } else { Integer id = Integer valueOf(messageFileId); if (!referenceFileIds contains(id)) { referenceFileIds add(id); } } } public void clearMessages() throws IOException { super deleteAllMessages(); } public void recoverState() throws IOException { Set<SubscriptionInfo> set = new HashSet<SubscriptionInfo>(this durableSubscribers); for (SubscriptionInfo info set) { LOG info( Recovering subscriber state for durable subscriber + info); TopicReferenceStore ts = createTopicReferenceStore((ActiveMQTopic)info getDestination()); ts addSubsciption(info, false); } } public void recoverSubscription(SubscriptionInfo info) throws IOException { TopicReferenceStore ts = createTopicReferenceStore((ActiveMQTopic)info getDestination()); LOG info( Recovering subscriber state for durable subscriber + info); ts addSubsciption(info, false); } public Map<TransactionId, AMQTx> retrievePreparedState() throws IOException { Map<TransactionId, AMQTx> result = new HashMap<TransactionId, AMQTx>(); preparedTransactions load(); for (Iterator<TransactionId> i = preparedTransactions keySet() iterator(); i hasNext();) { TransactionId key = i next(); AMQTx value = preparedTransactions get(key); result put(key, value); } return result; } public void savePreparedState(Map<TransactionId, AMQTx> map) throws IOException { preparedTransactions clear(); for (Iterator<Map Entry<TransactionId, AMQTx>> iter = map entrySet() iterator(); iter hasNext();) { Map Entry<TransactionId, AMQTx> entry = iter next(); preparedTransactions put(entry getKey(), entry getValue()); } } Override public synchronized void setDirectory(File directory) { File file = new File(directory, data ); super setDirectory(file); this stateStore = createStateStore(directory); } protected synchronized Store getStateStore() throws IOException { if (this stateStore == null) { File stateDirectory = new File(getDirectory(), kr-state ); IOHelper mkdirs(stateDirectory); this stateStore = createStateStore(getDirectory()); } return this stateStore; } public void deleteAllMessages() throws IOException { super deleteAllMessages(); if (stateStore != null) { if (stateStore isInitialized()) { stateStore clear(); } else { stateStore delete(); } } else { File stateDirectory = new File(getDirectory(), kr-state ); StoreFactory delete(stateDirectory); } } public boolean isPersistentIndex() { return persistentIndex; } public void setPersistentIndex(boolean persistentIndex) { this persistentIndex = persistentIndex; } private Store createStateStore(File directory) { File stateDirectory = new File(directory, state ); try { IOHelper mkdirs(stateDirectory); return StoreFactory open(stateDirectory, rw ); } catch (IOException e) { LOG error( Failed to create the state store , e); } return null; } protected void addSubscriberState(SubscriptionInfo info) throws IOException { durableSubscribers add(info); } protected void removeSubscriberState(SubscriptionInfo info) { durableSubscribers remove(info); } public int getIndexBinSize() { return indexBinSize; } public void setIndexBinSize(int indexBinSize) { this indexBinSize = indexBinSize; } public int getIndexKeySize() { return indexKeySize; } public void setIndexKeySize(int indexKeySize) { this indexKeySize = indexKeySize; } public int getIndexPageSize() { return indexPageSize; } public void setIndexPageSize(int indexPageSize) { this indexPageSize = indexPageSize; } public int getIndexMaxBinSize() { return indexMaxBinSize; } public void setIndexMaxBinSize(int maxBinSize) { this indexMaxBinSize = maxBinSize; } public int getIndexLoadFactor() { return indexLoadFactor; } public void setIndexLoadFactor(int loadFactor) { this indexLoadFactor = loadFactor; } }",1.0,
106,106,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\ReferenceRecordMarshaller.,ReferenceRecordMarshaller,"public class ReferenceRecordMarshaller implements Marshaller<ReferenceRecord> { public ReferenceRecord readPayload(DataInput dataIn) throws IOException { ReferenceRecord rr = new ReferenceRecord(); rr setMessageId(dataIn readUTF()); ReferenceData referenceData = new ReferenceData(); referenceData setFileId(dataIn readInt()); referenceData setOffset(dataIn readInt()); referenceData setExpiration(dataIn readLong()); rr setData(referenceData); return rr; } public void writePayload(ReferenceRecord rr, DataOutput dataOut) throws IOException { dataOut writeUTF(rr getMessageId()); dataOut writeInt(rr getData() getFileId()); dataOut writeInt(rr getData() getOffset()); dataOut writeLong(rr getData() getExpiration()); } }",1.0,
107,107,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\StoreEntryMarshaller.,StoreEntryMarshaller,"public class StoreEntryMarshaller implements Marshaller { public void writePayload(Object object, DataOutput dataOut) throws IOException { IndexItem item = (IndexItem)object; dataOut writeLong(item getOffset()); item write(dataOut); } public Object readPayload(DataInput dataIn) throws IOException { IndexItem item = new IndexItem(); item setOffset(dataIn readLong()); item read(dataIn); return item; } }",1.0,
108,108,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\TopicSubAck.,TopicSubAck,public class TopicSubAck { private int count; private StoreEntry messageEntry; public int getCount() { return this count; } public void setCount(int count) { this count = count; } public int decrementCount() { return --count; } public int incrementCount() { return ++count; } public StoreEntry getMessageEntry() { return this messageEntry; } public void setMessageEntry(StoreEntry storeEntry) { this messageEntry = storeEntry; } },1.0,
109,109,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\TopicSubAckMarshaller.,TopicSubAckMarshaller,"public class TopicSubAckMarshaller implements Marshaller { public void writePayload(Object object, DataOutput dataOut) throws IOException { TopicSubAck tsa = (TopicSubAck)object; dataOut writeInt(tsa getCount()); IndexItem item = (IndexItem)tsa getMessageEntry(); dataOut writeLong(item getOffset()); item write(dataOut); } public Object readPayload(DataInput dataIn) throws IOException { TopicSubAck tsa = new TopicSubAck(); int count = dataIn readInt(); tsa setCount(count); IndexItem item = new IndexItem(); item setOffset(dataIn readLong()); item read(dataIn); tsa setMessageEntry(item); return tsa; } }",1.0,
110,110,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\kahadaptor\TopicSubContainer.,TopicSubContainer,"public class TopicSubContainer { private transient MapContainer mapContainer; private transient StoreEntry batchEntry; public TopicSubContainer(MapContainer container) { this mapContainer = container; } public StoreEntry getBatchEntry() { return this batchEntry; } public void setBatchEntry(String id, StoreEntry batchEntry) { this batchEntry = batchEntry; } public void reset() { batchEntry = null; } public boolean isEmpty() { return mapContainer isEmpty(); } public StoreEntry add(ConsumerMessageRef ref) { return mapContainer place(ref getMessageId(),ref); } public ConsumerMessageRef remove(MessageId id) { ConsumerMessageRef result = null; StoreEntry entry = mapContainer getEntry(id); if (entry != null) { result = (ConsumerMessageRef) mapContainer getValue(entry); mapContainer remove(entry); if (batchEntry != null && batchEntry equals(entry)) { reset(); } } if(mapContainer isEmpty()) { reset(); } return result; } public ConsumerMessageRef get(StoreEntry entry) { return (ConsumerMessageRef)mapContainer getValue(entry); } public StoreEntry getEntry() { return mapContainer getFirst(); } public StoreEntry refreshEntry(StoreEntry entry) { return mapContainer refresh(entry); } public StoreEntry getNextEntry(StoreEntry entry) { return mapContainer getNext(entry); } public Iterator iterator() { return mapContainer values() iterator(); } public int size() { return mapContainer size(); } public void clear() { reset(); mapContainer clear(); } }",1.0,
113,113,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\console\command\AMQJournalToolTest.,AMQJournalToolTest,"public class AMQJournalToolTest { private static final Log LOG = LogFactory getLog(AMQJournalToolTest class); private static BrokerService broker = null; protected static final int NUM MSGS = 2000; protected static final String DATA DIR = target/activemq-data/ ; public static final String DESTNAME = AMQ-3665 ; protected static String failMsg = null; Test public void testAMQJournalTool() throws Exception { this startBroker(); Consumer consumerWorker = new Consumer(); Thread consumer = new Thread(consumerWorker); consumer start(); synchronized(consumerWorker init) { consumerWorker init wait(); } LOG info( Starting producer ); Thread producer = new Thread(new Producer()); producer start(); LOG info( Waiting for producer and consumer to join ); producer join(); consumer join(); LOG info( Producer and Consumer finished ); assertNull(failMsg); broker stop(); broker waitUntilStopped(); LOG info( Starting journal audit ); AMQJournalTool consumerTool = new AMQJournalTool(); consumerTool getDirs() add(new File(DATA DIR + Broker1/journal/ )); consumerTool execute(); LOG info( journal audit finished ); int cacheSize = getVelocityIntrospectionCacheSize(consumerTool); LOG info( VelocityContext introspectionCacheSize is of size + cacheSize); Assert assertTrue( VelocityContext introspectionCache too high + cacheSize + It may not have template caching turned on in Velocity (AMQ-3665) , cacheSize < 20); consumerTool = null; } protected BrokerService createBroker(URI brokerUri, String brokerName) throws Exception { BrokerService broker = BrokerFactory createBroker(brokerUri); broker setBrokerName(brokerName); broker setDataDirectory(DATA DIR); PersistenceAdapter store = new AMQPersistenceAdapter(); broker setPersistenceAdapter(store); return broker; } protected void startBroker() throws Exception { if (broker != null) { broker start(); broker waitUntilStarted(); } broker deleteAllMessages(); LOG info( Broker started ); sleep(1000); } Before public void setUp() throws Exception { final String options = persistent=true&useJmx=false&deleteAllMessagesOnStartup=true ; broker = createBroker(new URI( broker (tcp } After public void tearDown() throws Exception { if (broker != null && broker isStarted()) { broker stop(); LOG info( Broker stopped ); } else LOG info( Broker already stopped ); } private void sleep(int milliSecondTime) { try { Thread sleep(milliSecondTime); } catch (InterruptedException ignored) { LOG warn(ignored getMessage()); } } public int getVelocityIntrospectionCacheSize(AMQJournalTool reader) { Object context = null; Field fields[] = reader getClass() getDeclaredFields(); for (int i = 0; i < fields length; ++i) { if (LOG isDebugEnabled()) LOG debug( Checking field + fields[i] getName()); if ( context equals(fields[i] getName())) { try { fields[i] setAccessible(true); context = fields[i] get(reader); break; } catch (IllegalAccessException ex) { Assert fail ( IllegalAccessException accessing context ); } } } Object cache = null; Class parent = context getClass() getSuperclass() getSuperclass(); LOG debug(parent toString()); if (!parent toString() endsWith( org apache velocity context InternalContextBase )) { Assert fail( Unable to retrieve introspectionCache via reflection APIs ); } Field fields2[] = parent getDeclaredFields(); for (int i = 0; i < fields2 length; ++i) { if (LOG isDebugEnabled()) LOG debug( Checking field + fields2[i] getName()); if ( introspectionCache equals(fields2[i] getName())) { try { fields2[i] setAccessible(true); cache = fields2[i] get(context); break; } catch (IllegalAccessException ex) { Assert fail ( IllegalAccessException accessing introspectionCache ); } } } return ((HashMap)cache) size(); } class Producer implements Runnable{ private Log log = LogFactory getLog(Producer class); public Producer() { } public void run() { Connection connection = null; Session session = null; MessageProducer producer = null; try { ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory( failover (tcp connection = amq createConnection(); connection setExceptionListener(new javax jms ExceptionListener() { public void onException(javax jms JMSException e) { e printStackTrace(); } }); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(AMQJournalToolTest DESTNAME); producer = session createProducer(destination); long counter = 0; StringBuilder stringBuilder = new StringBuilder(); stringBuilder append( Hello world! From ); stringBuilder append(Thread currentThread() getName()); stringBuilder append( ); stringBuilder append(this hashCode()); stringBuilder append( ); stringBuilder append(counter); String text = stringBuilder toString(); TextMessage message = session createTextMessage(text); log info( Sending + AMQJournalToolTest NUM MSGS + messages ); for (int i = 0; i < AMQJournalToolTest NUM MSGS; i++) { log debug( Sent message + message hashCode() + + Thread currentThread() getName()); producer send(message); counter ++; Thread sleep(10); if ((counter % 1000) == 0) log info( sent + counter + messages ); } } catch (Exception ex) { log error(ex); AMQJournalToolTest failMsg = ex getMessage(); return; } finally { try { if (producer != null) producer close(); if (session != null) session close(); if (connection != null) connection close(); } catch (Exception e) { log error( Problem closing down JMS objects + e); AMQJournalToolTest failMsg = e getMessage(); } } } } class Consumer implements Runnable{ public Object init = new Object(); private Log log = LogFactory getLog(Consumer class); public Consumer() { } public void run() { Connection connection = null; Session session = null; MessageConsumer consumer = null; String url = failover (tcp try { ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory(url); connection = amq createConnection(); connection setExceptionListener(new javax jms ExceptionListener() { public void onException(javax jms JMSException e) { e printStackTrace(); } }); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(AMQJournalToolTest DESTNAME); consumer = session createConsumer(destination); long counter = 0; log info( Consumer connected to + url); synchronized(init) { init notifyAll(); } for (int i = 0; i < AMQJournalToolTest NUM MSGS; i++) { Message message2 = consumer receive(); if (message2 instanceof TextMessage) { TextMessage textMessage = (TextMessage) message2; String text = textMessage getText(); log debug( Received + text); } else { log warn( Received message of unsupported type Expecting TextMessage + message2); } counter ++; if ((counter % 1000) == 0) log info( received + counter + messages ); } log info( Received all + AMQJournalToolTest NUM MSGS + messages ); } catch(Exception e) { log error( Error in Consumer + e); AMQJournalToolTest failMsg = e getMessage(); return; } finally { try { if (consumer != null) consumer close(); if (session != null) session close(); if (connection != null) connection close(); } catch (Exception ex) { log error( Error closing down JMS objects + ex); AMQJournalToolTest failMsg = ex getMessage(); } } } } }",1.0,
114,114,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\console\command\AMQJournalToolTest.,Producer,"class Producer implements Runnable{ private Log log = LogFactory getLog(Producer class); public Producer() { } public void run() { Connection connection = null; Session session = null; MessageProducer producer = null; try { ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory( failover (tcp connection = amq createConnection(); connection setExceptionListener(new javax jms ExceptionListener() { public void onException(javax jms JMSException e) { e printStackTrace(); } }); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(AMQJournalToolTest DESTNAME); producer = session createProducer(destination); long counter = 0; StringBuilder stringBuilder = new StringBuilder(); stringBuilder append( Hello world! From ); stringBuilder append(Thread currentThread() getName()); stringBuilder append( ); stringBuilder append(this hashCode()); stringBuilder append( ); stringBuilder append(counter); String text = stringBuilder toString(); TextMessage message = session createTextMessage(text); log info( Sending + AMQJournalToolTest NUM MSGS + messages ); for (int i = 0; i < AMQJournalToolTest NUM MSGS; i++) { log debug( Sent message + message hashCode() + + Thread currentThread() getName()); producer send(message); counter ++; Thread sleep(10); if ((counter % 1000) == 0) log info( sent + counter + messages ); } } catch (Exception ex) { log error(ex); AMQJournalToolTest failMsg = ex getMessage(); return; } finally { try { if (producer != null) producer close(); if (session != null) session close(); if (connection != null) connection close(); } catch (Exception e) { log error( Problem closing down JMS objects + e); AMQJournalToolTest failMsg = e getMessage(); } } } }",1.0,
117,117,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\Loader.,Loader,"class Loader extends Thread { private static final Logger LOG = LoggerFactory getLogger(Loader class); private String name; private Store store; private int count; private CountDownLatch start; private CountDownLatch stop; public Loader(String name, Store store, int count, CountDownLatch start, CountDownLatch stop) { this name = name; this store = store; this count = count; this start = start; this stop = stop; } public void run() { try { start countDown(); start await(); Marshaller<String> keyMarshaller = new StringMarshaller(); Marshaller<Object> valueMarshaller = new BytesMarshaller(); MapContainer<String, Object> container = store getMapContainer(name, store getDefaultContainerName(), true); container setKeyMarshaller(keyMarshaller); container setValueMarshaller(valueMarshaller); container load(); Object value = getData(1024); long startTime = System currentTimeMillis(); long startLoad = System currentTimeMillis(); for (int i = 0; i < count; i++) { String key = key + i; container put(key, value); } long finishLoad = System currentTimeMillis(); long totalLoadTime = finishLoad - startLoad; LOG info( name + name + load time = + totalLoadTime + (ms) ); Set<String> keys = container keySet(); long startExtract = System currentTimeMillis(); for (Iterator<String> i = keys iterator(); i hasNext();) { byte[] data = (byte[])container get(i next()); } long finishExtract = System currentTimeMillis(); long totalExtractTime = finishExtract - startExtract; LOG info( name + name + extract time = + totalExtractTime + (ms) ); long startRemove = System currentTimeMillis(); for (Iterator<String> i = keys iterator(); i hasNext();) { container remove(i next()); } long finishRemove = System currentTimeMillis(); long totalRemoveTime = finishRemove - startRemove; LOG info( name + name + remove time = + totalRemoveTime + (ms) ); startLoad = System currentTimeMillis(); value = getData(2048); for (int i = 0; i < count; i++) { String key = key + i; container put(key, value); } finishLoad = System currentTimeMillis(); totalLoadTime = finishLoad - startLoad; LOG info( name + name + 2nd load time = + totalLoadTime + (ms) ); } catch (Exception e) { e printStackTrace(); } finally { stop countDown(); } } byte[] getData(int size) { byte[] result = new byte[size]; for (int i = 0; i < size; i++) { result[i] = a ; } return result; } }",1.0,
118,118,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\LoadTest.,LoadTest,"public class LoadTest extends TestCase { static final int COUNT = 10000; static final int NUM LOADERS = 5; protected String name = load db ; protected KahaStore store; public void testLoad() throws Exception { CountDownLatch start = new CountDownLatch(NUM LOADERS); CountDownLatch stop = new CountDownLatch(NUM LOADERS); for (int i = 0; i < NUM LOADERS; i++) { Loader loader = new Loader( loader + i, store, COUNT, start, stop); loader start(); } stop await(); } protected KahaStore getStore() throws IOException { return (KahaStore)StoreFactory open(name, rw ); } protected void setUp() throws Exception { super setUp(); name = System getProperty( basedir , ) + /target/activemq-data/load db ; StoreFactory delete(name); store = getStore(); } protected void tearDown() throws Exception { super tearDown(); store clear(); store close(); assertTrue(StoreFactory delete(name)); } }",1.0,
119,119,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\MapContainerTest.,MapContainerTest,"public class MapContainerTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(MapContainerTest class); protected static final int COUNT = 10; protected String name = test ; protected Store store; protected MapContainer<String, String> container; protected Map<String, String> testMap; public void testBasicAllocations() throws Exception { String key = key ; Object value = testMap; MapContainer<String, Object> test = store getMapContainer( test , test ); test put(key, value); store close(); store = getStore(); assertFalse(store getMapContainerIds() isEmpty()); test = store getMapContainer( test , test ); assertEquals(value, test get(key)); } public void testSize() throws Exception { container putAll(testMap); assertTrue(container size() == testMap size()); } public void testIsEmpty() throws Exception { assertTrue(container isEmpty()); } public void testClear() throws Exception { container putAll(testMap); assertTrue(container size() == testMap size()); container clear(); assertTrue(container isEmpty()); } public void testContainsKeyObject() throws Exception { container putAll(testMap); for (Iterator i = testMap entrySet() iterator(); i hasNext();) { Map Entry entry = (Entry)i next(); assertTrue(container containsKey(entry getKey())); } } public void testGetObject() throws Exception { container putAll(testMap); for (Iterator i = testMap entrySet() iterator(); i hasNext();) { Map Entry entry = (Entry)i next(); Object value = container get(entry getKey()); assertNotNull(value); assertTrue(value equals(entry getValue())); } } public void testContainsValueObject() throws Exception { container putAll(testMap); for (Iterator i = testMap entrySet() iterator(); i hasNext();) { Map Entry entry = (Entry)i next(); assertTrue(container containsValue(entry getValue())); } } public void testPutAllMap() throws Exception { container putAll(testMap); for (Iterator i = testMap entrySet() iterator(); i hasNext();) { Map Entry entry = (Entry)i next(); assertTrue(container containsValue(entry getValue())); assertTrue(container containsKey(entry getKey())); } } public void testKeySet() throws Exception { container putAll(testMap); Set<String> keys = container keySet(); assertTrue(keys size() == testMap size()); for (Iterator<String> i = testMap keySet() iterator(); i hasNext();) { Object key = i next(); assertTrue(keys contains(key)); keys remove(key); } assertTrue(container isEmpty()); } public void testValues() throws Exception { container putAll(testMap); Collection<String> values = container values(); assertTrue(values size() == testMap size()); for (Iterator<String> i = testMap values() iterator(); i hasNext();) { Object value = i next(); assertTrue(values contains(value)); assertTrue(values remove(value)); } assertTrue(container isEmpty()); } public void testEntrySet() throws Exception { container putAll(testMap); Set entries = container entrySet(); assertTrue(entries size() == testMap size()); for (Iterator i = entries iterator(); i hasNext();) { Map Entry entry = (Entry)i next(); assertTrue(testMap containsKey(entry getKey())); assertTrue(testMap containsValue(entry getValue())); } } public void testRemoveObject() throws Exception { container putAll(testMap); for (Iterator<String> i = testMap keySet() iterator(); i hasNext();) { container remove(i next()); } assertTrue(container isEmpty()); } public void testDuplicatesOk() throws Exception { StoreEntry first, entry; container put( M1 , DD ); first = container getFirst(); LOG info( First= + first); assertEquals(-1, first getNextItem()); String old = container put( M1 , DD ); assertNotNull(old); assertEquals(1, container size()); entry = container getFirst(); LOG info( New First= + entry); assertEquals(-1, entry getNextItem()); assertEquals(first, entry); container remove( M1 ); entry = container getFirst(); assertNull(entry); } public void testDuplicatesFreeListShared() throws Exception { StoreEntry batchEntry; MapContainer other = store getMapContainer(getName()+ 2 , test , true); other load(); other put( M1 , DD ); container put( M1 , DD ); batchEntry = container getFirst(); LOG info( First= + batchEntry); assertEquals(-1, batchEntry getNextItem()); other remove( M1 ); String old = container put( M1 , DD ); assertNotNull(old); assertEquals(1, container size()); batchEntry = container refresh(batchEntry); assertEquals(-1, batchEntry getNextItem()); LOG info( refreshed= + batchEntry); container remove( M1 ); assertNull(container getFirst()); batchEntry = container refresh(batchEntry); LOG info( refreshed= + batchEntry); assertTrue(batchEntry getNextItem() != -1); } protected Store getStore() throws IOException { return StoreFactory open(name, rw ); } protected void setUp() throws Exception { super setUp(); name = System getProperty( basedir , ) + /target/activemq-data/map-container db ; store = getStore(); container = store getMapContainer(getName(), test , true); container load(); testMap = new HashMap<String, String>(); for (int i = 0; i < COUNT; i++) { String key = key + i; String value = value + i; testMap put(key, value); } } protected void tearDown() throws Exception { super tearDown(); if (store != null) { store close(); store = null; } assertTrue(StoreFactory delete(name)); } }",1.0,
120,120,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\StoreTest.,StoreTest,"public class StoreTest extends TestCase { protected String name; protected Store store; public void testClose() throws Exception { store close(); try { store getListContainer( fred ); assertTrue( Should have got a enception , false); } catch (Exception e) { } } public void testClear() throws Exception { int count = 100; ListContainer list = store getListContainer( testClear ); list load(); for (int i = 0; i < count; i++) { list add( test + i); } assertEquals(count, list size()); store clear(); assertTrue(list isEmpty()); } public void testGetMapContainer() throws Exception { String containerId = test ; MapContainer<Object, String> container = store getMapContainer(containerId); container load(); assertNotNull(container); store close(); store = getStore(); container = store getMapContainer(containerId); assertNotNull(container); } public void testDeleteMapContainer() throws Exception { String containerId = test ; MapContainer<Object, String> container = store getMapContainer(containerId); assertNotNull(container); store deleteMapContainer(containerId); assertFalse(store doesMapContainerExist(containerId)); store close(); store = getStore(); assertFalse(store doesMapContainerExist(containerId)); } public void testGetListContainer() throws Exception { String containerId = test ; ListContainer container = store getListContainer(containerId); assertNotNull(container); store close(); store = getStore(); container = store getListContainer(containerId); assertNotNull(container); } public void testDeleteListContainer() throws Exception { String containerId = test ; ListContainer container = store getListContainer(containerId); assertNotNull(container); store deleteListContainer(containerId); assertFalse(store doesListContainerExist(containerId)); store close(); store = getStore(); assertFalse(store doesListContainerExist(containerId)); } public void testBasicAllocations() throws Exception { Map<Object, String> testMap = new HashMap<Object, String>(); int count = 1000; for (int i = 0; i < count; i++) { String key = key + i; String value = value + i; testMap put(key, value); } List testList = new ArrayList(); for (int i = 0; i < count; i++) { testList add( value + i); } String listId = testList ; String mapId1 = testMap ; String mapId2 = testMap2 ; MapContainer<Object, String> mapContainer1 = store getMapContainer(mapId1); mapContainer1 load(); mapContainer1 putAll(testMap); MapContainer<Object, String> mapContainer2 = store getMapContainer(mapId2, mapId2); mapContainer2 load(); mapContainer2 putAll(testMap); ListContainer listContainer = store getListContainer(listId); listContainer load(); listContainer addAll(testList); store close(); store = getStore(); mapContainer1 = store getMapContainer(mapId1); mapContainer1 load(); mapContainer2 = store getMapContainer(mapId2, mapId2); mapContainer2 load(); listContainer = store getListContainer(listId); listContainer load(); for (Iterator<Object> i = testMap keySet() iterator(); i hasNext();) { Object key = i next(); Object value = testMap get(key); assertTrue(mapContainer1 containsKey(key)); assertEquals(value, mapContainer1 get(key)); } for (Iterator<Object> i = testMap keySet() iterator(); i hasNext();) { Object key = i next(); Object value = testMap get(key); assertTrue(mapContainer2 containsKey(key)); assertEquals(value, mapContainer2 get(key)); } assertEquals(testList size(), listContainer size()); Iterator j = listContainer iterator(); for (Iterator i = testList iterator(); i hasNext();) { assertEquals(i next(), j next()); } } public void testLock() throws Exception { store doesListContainerExist( fred ); Store s = getStore(); try { s doesListContainerExist( fred ); } catch (StoreLockedExcpetion e) { return; } finally { s close(); } fail( Expected to catch an exception ); } protected Store getStore() throws IOException { return StoreFactory open(name, rw ); } protected void setUp() throws Exception { super setUp(); name = System getProperty( basedir , ) + /target/activemq-data/store-test db ; store = getStore(); } protected void tearDown() throws Exception { super tearDown(); if (store != null) { store close(); store = null; } boolean rc = StoreFactory delete(name); assertTrue(rc); } }",1.0,
121,121,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\VolumeTest.,VolumeTest,"public class VolumeTest extends TestCase { protected static final int NUMBER = 1; private static final transient Logger LOG = LoggerFactory getLogger(VolumeTest class); protected Store store; protected String name; public void testListVolume() throws Exception { ListContainer container = store getListContainer( volume ); container setMarshaller(Store BYTES MARSHALLER); byte[] data = new byte[10]; for (int i = 0; i < NUMBER; i++) { container add(data); if (i % 100000 == 0) { LOG error( persisted + i); } } int count = 0; for (Iterator i = container iterator(); i hasNext();) { assertNotNull(i next()); count++; if (count % 100000 == 0) { LOG error( retrived + count); } } assertEquals( Different retrieved to stored , NUMBER, count); } protected Store getStore() throws IOException { return StoreFactory open(name, rw ); } protected void setUp() throws Exception { super setUp(); name = System getProperty( basedir , ) + /target/activemq-data/volume-container db ; StoreFactory delete(name); store = StoreFactory open(name, rw ); } protected void tearDown() throws Exception { super tearDown(); if (store != null) { store close(); } assertTrue(StoreFactory delete(name)); } }",1.0,
122,122,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\async\DataFileAppenderTest.,DataFileAppenderTest,"public class DataFileAppenderTest extends TestCase { AsyncDataManager dataManager; File dir; Override public void setUp() throws Exception { dir = new File( target/tests/DataFileAppenderTest ); dir mkdirs(); dataManager = new AsyncDataManager(); dataManager setDirectory(dir); configure(dataManager); dataManager start(); } protected void configure(AsyncDataManager dataManager) { dataManager setUseNio(false); } Override public void tearDown() throws Exception { dataManager close(); deleteFilesInDirectory(dir); dir delete(); } private void deleteFilesInDirectory(File directory) { File[] files = directory listFiles(); for (int i=0; i<files length; i++) { File f = files[i]; if (f isDirectory()) { deleteFilesInDirectory(f); } f delete(); } } public void testBatchWriteCallbackCompleteAfterTimeout() throws Exception { final int iterations = 10; final CountDownLatch latch = new CountDownLatch(iterations); ByteSequence data = new ByteSequence( DATA getBytes()); for (int i=0; i < iterations; i++) { dataManager write(data, new Runnable() { public void run() { latch countDown(); } }); } assertTrue( queued data is written , latch await(5, TimeUnit SECONDS)); } public void testBatchWriteCallbackCompleteAfterClose() throws Exception { final int iterations = 10; final CountDownLatch latch = new CountDownLatch(iterations); ByteSequence data = new ByteSequence( DATA getBytes()); for (int i=0; i<iterations; i++) { dataManager write(data, new Runnable() { public void run() { latch countDown(); } }); } dataManager close(); assertTrue( queued data is written , dataManager getInflightWrites() isEmpty()); assertEquals( none written , 0, latch getCount()); } public void testBatchWriteCompleteAfterClose() throws Exception { ByteSequence data = new ByteSequence( DATA getBytes()); final int iterations = 10; for (int i=0; i<iterations; i++) { dataManager write(data, false); } dataManager close(); assertTrue( queued data is written + dataManager getInflightWrites() size(), dataManager getInflightWrites() isEmpty()); } public void testBatchWriteToMaxMessageSize() throws Exception { final int iterations = 4; final CountDownLatch latch = new CountDownLatch(iterations); Runnable done = new Runnable() { public void run() { latch countDown(); } }; int messageSize = DataFileAppender DEFAULT MAX BATCH SIZE / iterations; byte[] message = new byte[messageSize]; ByteSequence data = new ByteSequence(message); for (int i=0; i< iterations; i++) { dataManager write(data, done); } assertTrue( all callbacks complete , latch await(10, TimeUnit SECONDS)); } public void testNoBatchWriteWithSync() throws Exception { ByteSequence data = new ByteSequence( DATA getBytes()); final int iterations = 10; for (int i=0; i<iterations; i++) { dataManager write(data, true); assertTrue( queued data is written , dataManager getInflightWrites() isEmpty()); } } }",1.0,
123,123,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\async\JournalImplTest.,JournalImplTest,"public class JournalImplTest extends TestCase { Logger log = LoggerFactory getLogger(JournalImplTest class); int size = 1024 * 10; int logFileCount = 2; File logDirectory = new File( target/dm-data2 ); private JournalFacade journal; protected void setUp() throws Exception { if (logDirectory exists()) { deleteDir(logDirectory); } assertTrue( Could not delete directory + logDirectory getCanonicalPath(), !logDirectory exists()); AsyncDataManager dm = new AsyncDataManager(); dm setDirectory(logDirectory); dm setMaxFileLength(1024 * 64); dm start(); journal = new JournalFacade(dm); } private void deleteDir(File f) { File[] files = f listFiles(); for (int i = 0; i < files length; i++) { File file = files[i]; file delete(); } f delete(); } protected void tearDown() throws Exception { journal close(); if (logDirectory exists()) { deleteDir(logDirectory); } } public void testLogFileCreation() throws IOException { RecordLocation mark = journal getMark(); assertNull(mark); } SuppressWarnings( unchecked ) public void testAppendAndRead() throws InvalidRecordLocationException, InterruptedException, IOException { Packet data1 = createPacket( Hello World 1 ); RecordLocation location1 = journal write(data1, false); Packet data2 = createPacket( Hello World 2 ); RecordLocation location2 = journal write(data2, false); Packet data3 = createPacket( Hello World 3 ); RecordLocation location3 = journal write(data3, false); Packet data; data = journal read(location2); assertEquals(data2, data); data = journal read(location1); assertEquals(data1, data); data = journal read(location3); assertEquals(data3, data); RecordLocation l = journal getNextRecordLocation(null); int t = l compareTo(location1); assertEquals(0, t); data = journal read(l); assertEquals(data1, data); l = journal getNextRecordLocation(l); assertEquals(0, l compareTo(location2)); data = journal read(l); assertEquals(data2, data); l = journal getNextRecordLocation(l); assertEquals(0, l compareTo(location3)); data = journal read(l); assertEquals(data3, data); l = journal getNextRecordLocation(l); assertNull(l); log info(journal toString()); } public void testReadOnlyRead() throws InvalidRecordLocationException, InterruptedException, IOException { Packet data1 = createPacket( Hello World 1 ); RecordLocation location1 = journal write(data1, false); Packet data2 = createPacket( Hello World 2 ); RecordLocation location2 = journal write(data2, false); Packet data3 = createPacket( Hello World 3 ); RecordLocation location3 = journal write(data3, false); Packet packet; packet = journal read(location2); assertEquals(data2, packet); packet = journal read(location1); assertEquals(data1, packet); packet = journal read(location3); assertEquals(data3, packet); ArrayList<File> data = new ArrayList<File>(); data add(logDirectory); ReadOnlyAsyncDataManager rodm = new ReadOnlyAsyncDataManager(data); rodm start(); try { for (Location curr = rodm getFirstLocation(); curr != null; curr = rodm getNextLocation(curr)) { ByteSequence bs = rodm read(curr); assertNotNull(bs); } } finally { rodm close(); } } public void testCanReadFromArchivedLogFile() throws InvalidRecordLocationException, InterruptedException, IOException { Packet data1 = createPacket( Hello World 1 ); RecordLocationFacade location1 = (RecordLocationFacade)journal write(data1, false); RecordLocationFacade pos; int counter = 0; do { Packet p = createPacket( <<<data>>> ); pos = (RecordLocationFacade)journal write(p, false); if (counter++ % 1000 == 0) { journal setMark(pos, false); } } while (pos getLocation() getDataFileId() < 5); Packet data; data = journal read(location1); assertEquals(data1, data); } private Packet createPacket(String string) { return new ByteArrayPacket(string getBytes()); } public static void assertEquals(Packet arg0, Packet arg1) { assertEquals(arg0 sliceAsBytes(), arg1 sliceAsBytes()); } public static void assertEquals(byte[] arg0, byte[] arg1) { if (arg0 == null ^ arg1 == null) { fail( Not equal + arg0 + != + arg1); } if (arg0 == null) { return; } if (arg0 length != arg1 length) { fail( Array lenght not equal + arg0 length + != + arg1 length); } for (int i = 0; i < arg0 length; i++) { if (arg0[i] != arg1[i]) { fail( Array item not equal at index + i + + arg0[i] + != + arg1[i]); } } } }",1.0,
124,124,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\async\LocationTest.,LocationTest,"public class LocationTest extends TestCase { private static final transient Logger LOG = LoggerFactory getLogger(LocationTest class); SuppressWarnings( unchecked ) public synchronized void testRecordLocationImplComparison() throws IOException { Location l1 = new Location(); l1 setDataFileId(0); l1 setOffset(5); Location l2 = new Location(l1); l2 setOffset(10); Location l3 = new Location(l2); l3 setDataFileId(2); l3 setOffset(0); assertTrue(l1 compareTo(l2) < 0); ArrayList<RecordLocationFacade> l = new ArrayList<RecordLocationFacade>(); l add(new RecordLocationFacade(l2)); l add(new RecordLocationFacade(l3)); l add(new RecordLocationFacade(l1)); Collections sort(l); LOG debug(l get(0) toString()); assertSame(l get(0) getLocation(), l1); assertSame(l get(1) getLocation(), l2); assertSame(l get(2) getLocation(), l3); } }",1.0,
125,125,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\async\NioDataFileAppenderTest.,NioDataFileAppenderTest,public class NioDataFileAppenderTest extends DataFileAppenderTest { Override protected void configure(AsyncDataManager dataManager) { dataManager setUseNio(true); } },1.0,
126,126,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\index\DiskIndexLinkedListTest.,DiskIndexLinkedListTest,"public class DiskIndexLinkedListTest extends VMIndexLinkedListTest { private IndexManager im; protected IndexLinkedList createList(IndexItem root) throws IOException { String dirName = System getProperty( basedir , ) + /target/activemq-data/testIndex ; File file = new File(dirName); file mkdirs(); IOHelper deleteChildren(file); DataManager dm = new DataManagerImpl(file, test ,new AtomicLong()); im = new IndexManager(file, test , rw ,dm,new AtomicLong()); root = im createNewIndex(); im storeIndex(root); return new DiskIndexLinkedList(im,root); } IndexItem createIndex(IndexLinkedList indexList,int offset) throws IOException { IndexItem result = im createNewIndex(); im storeIndex(result); return result; } protected void addToList(IndexLinkedList list,IndexItem item) throws IOException { IndexItem root = list getRoot(); IndexItem prev = list getLast(); prev = prev != null prev root; IndexItem next = list getNextEntry(prev); prev setNextItem(item getOffset()); item setPreviousItem(prev getOffset()); im updateIndexes(prev); if (next != null) { next setPreviousItem(item getOffset()); item setNextItem(next getOffset()); im updateIndexes(next); } im storeIndex(item); list add(item); } protected void insertToList(IndexLinkedList list,int pos,IndexItem item) throws IOException { IndexItem root = list getRoot(); IndexItem prev = null; IndexItem next = null; if (pos <= 0) { prev = root; next = list getNextEntry(root); } else if (pos >= list size()) { prev = list getLast(); if (prev==null) { prev=root; } next = null; } else { prev = list get(pos); prev = prev != null prev root; next = list getNextEntry(prev); } prev setNextItem(item getOffset()); item setPreviousItem(prev getOffset()); im updateIndexes(prev); if (next != null) { next setPreviousItem(item getOffset()); item setNextItem(next getOffset()); im updateIndexes(next); } im storeIndex(item); list setRoot(root); list add(pos,item); } protected void insertFirst(IndexLinkedList list,IndexItem item) throws IOException { IndexItem root = list getRoot(); IndexItem prev = root; IndexItem next = list getNextEntry(prev); prev setNextItem(item getOffset()); item setPreviousItem(prev getOffset()); im updateIndexes(prev); if (next != null) { next setPreviousItem(item getOffset()); item setNextItem(next getOffset()); im updateIndexes(next); } im storeIndex(item); list addFirst(item); } protected synchronized void remove(IndexLinkedList list,IndexItem item) throws IOException { IndexItem root = list getRoot(); IndexItem prev = list getPrevEntry(item); IndexItem next = list getNextEntry(item); list remove(item); prev = prev == null root prev; next = (next == null || !next equals(root)) next null; if (next != null) { prev setNextItem(next getOffset()); next setPreviousItem(prev getOffset()); im updateIndexes(next); } else { prev setNextItem(Item POSITION NOT SET); } im updateIndexes(prev); } }",1.0,
128,128,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\index\IndexBenchmark.,Producer,"class Producer extends Thread { private final String name; AtomicBoolean shutdown = new AtomicBoolean(); public Producer(String name) { super( Producer + name); this name = name; } public void shutdown() { shutdown set(true); } Override public void run() { try { IndexItem value = indexManager createNewIndex(); indexManager storeIndex(value); Index index = openIndex(name); long counter = 0; while (!shutdown get()) { long c = counter; String key = a-long-message-id-like-key- + c; index store(key, value); onProduced(counter++); } } catch (Throwable e) { e printStackTrace(); } } public void onProduced(long counter) { } }",1.0,
129,129,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\index\IndexBenchmark.,Consumer,class Consumer extends Thread { private final String name; AtomicBoolean shutdown = new AtomicBoolean(); public Consumer(String name) { super( Consumer + name); this name = name; } public void shutdown() { shutdown set(true); } Override public void run() { try { Index index = openIndex(name); long counter = 0; while (!shutdown get()) { long c = counter; String key = a-long-message-id-like-key- + c; StoreEntry record; record = index get(key); if (record != null) { index remove(key); onConsumed(counter++); } else { Thread sleep(0); } } } catch (Throwable e) { e printStackTrace(); } } public void onConsumed(long counter) { } },1.0,
130,130,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\index\VMIndexLinkedListTest.,VMIndexLinkedListTest,"public class VMIndexLinkedListTest extends TestCase { static final int NUMBER = 30; private IndexItem root; private List<IndexItem> testData = new ArrayList<IndexItem>(); private IndexLinkedList list; protected void setUp() throws Exception { super setUp(); IndexItem item = new IndexItem(); list = createList(item); this root = list getRoot(); for (int i = 0; i < NUMBER; i++) { item = createIndex(list,i); testData add(item); } } protected void tearDown() throws Exception { super tearDown(); testData clear(); list = null; } IndexItem createIndex(IndexLinkedList list,int offset) throws IOException { IndexItem result = new IndexItem(); result setOffset(offset); return result; } protected IndexLinkedList createList(IndexItem root) throws IOException { return new VMIndexLinkedList(root); } protected void addToList(IndexLinkedList list,IndexItem item) throws IOException { list add(item); } protected void insertToList(IndexLinkedList list,int pos,IndexItem item) throws IOException { list add(pos, item); } protected void insertFirst(IndexLinkedList list,IndexItem item) throws IOException { list addFirst(item); } protected synchronized void remove(IndexLinkedList list,IndexItem item) throws IOException { IndexItem root = list getRoot(); IndexItem prev = list getPrevEntry(item); IndexItem next = list getNextEntry(item); list remove(item); } public void testGetFirst() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } assertNotNull(list getFirst()); assertTrue(list getFirst() equals(testData get(0))); } public void testGetLast() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } assertTrue(list getLast() == testData get(testData size() - 1)); } public void testRemoveFirst() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } assertTrue(list removeFirst() equals(testData get(0))); } public void testRemoveLast() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } assertTrue(list removeLast() equals(testData get(testData size() - 1))); } public void testAddFirst() throws IOException { for (int i = 0; i < testData size(); i++) { insertFirst(list, testData get(i)); } int count = 0; for (int i = testData size() - 1; i >= 0; i--) { assertTrue(testData get(i) equals(list get(count++))); } } public void testAddLast() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } for (int i = 0; i < testData size(); i++) { assertTrue(testData get(i) equals(list get(i))); } } public void testSize() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); assertTrue(list size() == i + 1); } } public void testIsEmpty() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); assertTrue(list size() == i + 1); } list clear(); assertTrue(list isEmpty()); } public void testAddIndexItem() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } for (int i = 0; i < testData size(); i++) { assertTrue(testData get(i) equals(list get(i))); } } public void testClear() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); assertTrue(list size() == i + 1); } list clear(); assertTrue(list isEmpty()); } public void testAddIntIndexItem() throws IOException { for (int i = 0; i < this testData size(); i++) { insertToList(list, i, testData get(i)); } for (int i = 0; i < testData size(); i++) { assertTrue(testData get(i) equals(list get(i))); } } public void testRemoveInt() throws IOException { for (int i = 0; i < testData size(); i++) { insertToList(list, i, testData get(i)); } for (int i = 0; i < testData size(); i++) { list remove(0); } assertTrue(list isEmpty()); for (int i = 0; i < testData size(); i++) { insertToList(list, i, testData get(i)); } for (int i = 0; i < testData size(); i++) { list remove(list size() - 1); } assertTrue(list isEmpty()); } public void testIndexOf() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } for (int i = 0; i < testData size(); i++) { assertTrue(list indexOf(testData get(i)) == i); } } public void testGetNextEntry() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } IndexItem next = list getFirst(); int count = 0; while (next != null) { assertTrue(next equals(testData get(count++))); next = list getNextEntry(next); assertTrue(next == null || !next equals(root)); } } public void testGetPrevEntry() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } IndexItem next = list getLast(); int count = testData size() - 1; while (next != null) { assertTrue(next equals(testData get(count--))); next = list getPrevEntry(next); assertTrue(next == null || !next equals(root)); } } public void testRemoveIndexItem() throws IOException { for (int i = 0; i < testData size(); i++) { addToList(list,testData get(i)); } for (int i = 0; i < testData size(); i++) { list remove(testData get(i)); assertTrue(list size() == testData size() - i - 1); } } public void testAddRemove() throws IOException { IndexItem a = createIndex(list,0); addToList(list, a); IndexItem b = createIndex(list,1); addToList(list, b); IndexItem c = createIndex(list,2); addToList(list, c); IndexItem d = createIndex(list,3); addToList(list, d); remove(list, d); assertTrue(list getLast() equals(c)); assertTrue(list getNextEntry(b) equals(c)); remove(list, b); assertTrue(list getNextEntry(a) equals(c)); assertTrue(list getLast() equals(c)); } }",1.0,
131,131,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\index\hash\HashIndexBenchMark.,HashIndexBenchMark,"public class HashIndexBenchMark extends IndexBenchmark { Override protected Index createIndex(File root, String name) throws Exception { HashIndex index = new HashIndex(root, name, indexManager); index setNumberOfBins(12); index setPageSize(32 * 1024); index setKeyMarshaller(Store STRING MARSHALLER); return index; } }",1.0,
132,132,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\index\hash\HashTest.,HashTest,"public class HashTest extends TestCase { private static final int COUNT = 10000; private HashIndex hashIndex; private File directory; private IndexManager indexManager; protected void setUp() throws Exception { super setUp(); directory = new File(IOHelper getDefaultDataDirectory()); IOHelper mkdirs(directory); IOHelper deleteChildren(directory); indexManager = new IndexManager(directory, im-hash-test , rw , null, new AtomicLong()); this hashIndex = new HashIndex(directory, testHash , indexManager); this hashIndex setNumberOfBins(12); this hashIndex setPageSize(32 * 1024); this hashIndex setKeyMarshaller(Store STRING MARSHALLER); } public void testHashIndex() throws Exception { doTest(300); hashIndex clear(); hashIndex unload(); doTest(600); hashIndex clear(); hashIndex unload(); doTest(128); } public void doTest(int pageSize) throws Exception { String keyRoot = key ; hashIndex setPageSize(pageSize); this hashIndex load(); doInsert(keyRoot); this hashIndex unload(); this hashIndex load(); checkRetrieve(keyRoot); doRemove(keyRoot); this hashIndex unload(); this hashIndex load(); doInsert(keyRoot); doRemoveHalf(keyRoot); doInsertHalf(keyRoot); this hashIndex unload(); this hashIndex load(); checkRetrieve(keyRoot); this hashIndex unload(); } void doInsert(String keyRoot) throws Exception { for (int i = 0; i < COUNT; i++) { IndexItem value = indexManager createNewIndex(); indexManager storeIndex(value); hashIndex store(keyRoot + i, value); } } void checkRetrieve(String keyRoot) throws IOException { for (int i = 0; i < COUNT; i++) { IndexItem item = (IndexItem) hashIndex get(keyRoot + i); assertNotNull(item); } } void doRemoveHalf(String keyRoot) throws Exception { for (int i = 0; i < COUNT; i++) { if (i % 2 == 0) { hashIndex remove(keyRoot + i); } } } void doInsertHalf(String keyRoot) throws Exception { for (int i = 0; i < COUNT; i++) { if (i % 2 == 0) { IndexItem value = indexManager createNewIndex(); indexManager storeIndex(value); hashIndex store(keyRoot + i, value); } } } void doRemove(String keyRoot) throws Exception { for (int i = 0; i < COUNT; i++) { hashIndex remove(keyRoot + i); } for (int i = 0; i < COUNT; i++) { IndexItem item = (IndexItem) hashIndex get(keyRoot + i); assertNull(item); } } void doRemoveBackwards(String keyRoot) throws Exception { for (int i = COUNT - 1; i >= 0; i--) { hashIndex remove(keyRoot + i); } for (int i = 0; i < COUNT; i++) { IndexItem item = (IndexItem) hashIndex get(keyRoot + i); assertNull(item); } } protected void tearDown() throws Exception { super tearDown(); File[] files = directory listFiles(); for (File file files) { file delete(); } } }",1.0,
133,133,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\index\tree\TreeTest.,TreeTest,"public class TreeTest extends TestCase { private static final int COUNT = 55; private TreeIndex tree; private File directory; private IndexManager indexManager; private boolean dumpTree; protected void setUp() throws Exception { super setUp(); directory = new File( activemq-data ); directory mkdirs(); indexManager = new IndexManager(directory, im-test , rw , null,new AtomicLong()); this tree = new TreeIndex(directory, testTree , indexManager); this tree setKeyMarshaller(Store STRING MARSHALLER); } public void testTreeWithCaching() throws Exception { this tree setEnablePageCaching(true); } public void testTreeWithoutCaching() throws Exception { this tree setEnablePageCaching(false); } public void doTest() throws Exception { doTest(600); } public void doTest(int pageSize) throws Exception { String keyRoot = key ; tree setPageSize(pageSize); this tree load(); doInsert(keyRoot); doRemoveBackwards(keyRoot); } void doInsert(String keyRoot) throws Exception { for (int i = 0; i < COUNT; i++) { IndexItem value = indexManager createNewIndex(); indexManager storeIndex(value); tree store(keyRoot + i, value); } } void checkRetrieve(String keyRoot) throws IOException { for (int i = 0; i < COUNT; i++) { IndexItem item = (IndexItem)tree get(keyRoot + i); assertNotNull(item); } } void doRemove(String keyRoot) throws Exception { for (int i = 0; i < COUNT; i++) { tree remove(keyRoot + i); } for (int i = 0; i < COUNT; i++) { IndexItem item = (IndexItem)tree get(keyRoot + i); assertNull(item); } } void doRemoveBackwards(String keyRoot) throws Exception { for (int i = COUNT - 1; i >= 0; i--) { tree remove(keyRoot + i); System out println( BACK Removed + keyRoot + i); tree getRoot() dump(); System out println( ); } for (int i = 0; i < COUNT; i++) { IndexItem item = (IndexItem)tree get(keyRoot + i); assertNull(item); } } protected void tearDown() throws Exception { super tearDown(); File[] files = directory listFiles(); for (File file files) { file delete(); } } }",1.0,
134,134,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\store\amq\reader\AMQReaderTest.,AMQReaderTest,"public class AMQReaderTest extends TestCase { public void testIterateArchive() throws Exception{ String resourceName = getClass() getPackage() getName() + File separator + data ; resourceName = resourceName replace( , File separatorChar); Resource resource = new ClassPathResource(resourceName); AMQReader reader = new AMQReader(resource getFile()); for (Message m reader) { assertNotNull(m); } } public void xtestIterateFile() throws Exception{ String resourceName = getClass() getPackage() getName() + File separator + data ; resourceName = resourceName replace( , File separatorChar); Resource resource = new ClassPathResource(resourceName); Set<File> files = AMQReader listDataFiles(resource getFile()); assertNotNull(files); assertTrue(files size() >0); for (File file files) { System err println( READING + file); AMQReader reader = new AMQReader(file); for (Message m reader) { assertNotNull(m); } } } }",1.0,
136,136,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpHeader.,AmqpHeader,"public class AmqpHeader { static final Buffer PREFIX = new Buffer(new byte[]{ A , M , Q , P }); private Buffer buffer; public AmqpHeader(){ this(new Buffer(new byte[]{ A , M , Q , P , 0, 1, 0, 0 })); } public AmqpHeader(Buffer buffer){ setBuffer(buffer); } public int getProtocolId() { return buffer get(4) & 0xFF; } public void setProtocolId(int value) { buffer data[buffer offset+4] = (byte) value; } public int getMajor() { return buffer get(5) & 0xFF; } public void setMajor(int value) { buffer data[buffer offset+5] = (byte) value; } public int getMinor() { return buffer get(6) & 0xFF; } public void setMinor(int value) { buffer data[buffer offset+6] = (byte) value; } public int getRevision() { return buffer get(7) & 0xFF; } public void setRevision(int value) { buffer data[buffer offset+7] = (byte) value; } public Buffer getBuffer() { return buffer; } public void setBuffer(Buffer value) { if( !value startsWith(PREFIX) || value length()!=8 ) { throw new IllegalArgumentException( Not an AMQP header buffer ); } buffer = value buffer(); } Override public String toString() { return buffer toString(); } }",1.0,
137,137,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpNioSslTransport.,AmqpNioSslTransport,"public class AmqpNioSslTransport extends NIOSSLTransport { public AmqpNioSslTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException { super(wireFormat, socketFactory, remoteLocation, localLocation); } public AmqpNioSslTransport(WireFormat wireFormat, Socket socket) throws IOException { super(wireFormat, socket); } Override protected void initializeStreams() throws IOException { super initializeStreams(); if (inputBuffer position() != 0 && inputBuffer hasRemaining()) { serviceRead(); } } Override protected void processCommand(ByteBuffer plain) throws Exception { doConsume(AmqpSupport toBuffer(plain)); } }",1.0,
138,138,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpNioSslTransportFactory.,AmqpNioSslTransportFactory,"public class AmqpNioSslTransportFactory extends AmqpNioTransportFactory { SSLContext context; Override protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpTransportServer(this, location, serverSocketFactory) { protected Transport createTransport(Socket socket, WireFormat format) throws IOException { AmqpNioSslTransport transport = new AmqpNioSslTransport(format, socket); if (context != null) { transport setSslContext(context); } return transport; } Override public boolean isSslServer() { return true; } }; } Override protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new AmqpNioSslTransport(wf, socketFactory, location, localLocation); } Override public TransportServer doBind(URI location) throws IOException { if (SslContext getCurrentSslContext() != null) { try { context = SslContext getCurrentSslContext() getSSLContext(); } catch (Exception e) { throw new IOException(e); } } return super doBind(location); } }",1.0,
140,140,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpNioTransportFactory.,AmqpNioTransportFactory,"public class AmqpNioTransportFactory extends NIOTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return amqp ; } protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpTransportServer(this, location, serverSocketFactory) { protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new AmqpNioTransport(format, socket); } }; } protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new AmqpNioTransport(wf, socketFactory, location, localLocation); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); if( transport instanceof MutexTransport ) { transport = ((MutexTransport)transport) getNext(); } return transport; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new AmqpTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } Override protected boolean isUseInactivityMonitor(Transport transport) { return false; } }",1.0,
142,142,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpProtocolConverter.,AmqpSessionContext,"static class AmqpSessionContext { private final SessionId sessionId; long nextProducerId = 0; long nextConsumerId = 0; public AmqpSessionContext(ConnectionId connectionId, long id) { sessionId = new SessionId(connectionId, id); } }",1.0,
143,143,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpProtocolConverter.,AmqpDeliveryListener,static abstract class AmqpDeliveryListener { abstract public void onDelivery(Delivery delivery) throws Exception; public void onClose() throws Exception {} public void drainCheck() {} },1.0,
144,144,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpProtocolConverter.,BaseProducerContext,"abstract class BaseProducerContext extends AmqpDeliveryListener { ByteArrayOutputStream current = new ByteArrayOutputStream(); Override public void onDelivery(Delivery delivery) throws Exception { Receiver receiver = ((Receiver)delivery getLink()); if( !delivery isReadable() ) { System out println( it was not readable! ); return; } if( current==null ) { current = new ByteArrayOutputStream(); } int count; byte data[] = new byte[1024*4]; while( (count = receiver recv(data, 0, data length)) > 0 ) { current write(data, 0, count); } if( count == 0 ) { return; } receiver advance(); Buffer buffer = current toBuffer(); current = null; onMessage(receiver, delivery, buffer); } abstract protected void onMessage(Receiver receiver, Delivery delivery, Buffer buffer) throws Exception; }",1.0,
146,146,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpProtocolConverter.,Transaction,class Transaction { },1.0,
148,148,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpProtocolException.,AmqpProtocolException,"public class AmqpProtocolException extends IOException { private static final long serialVersionUID = -2869735532997332242L; private final String symbolicName; private final boolean fatal; public AmqpProtocolException() { this(null); } public AmqpProtocolException(String s) { this(s, false); } public AmqpProtocolException(String s, boolean fatal) { this(s, fatal, null); } public AmqpProtocolException(String s, String msg) { this(s, msg, false, null); } public AmqpProtocolException(String s, boolean fatal, Throwable cause) { this( error , s, fatal, cause); } public AmqpProtocolException(String symbolicName, String s, boolean fatal, Throwable cause) { super(s); this symbolicName = symbolicName; this fatal = fatal; initCause(cause); } public boolean isFatal() { return fatal; } public String getSymbolicName() { return symbolicName; } }",1.0,
149,149,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AMQPSslTransportFactory.,AMQPSslTransportFactory,"public class AMQPSslTransportFactory extends SslTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return amqp ; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new AmqpTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); if( transport instanceof MutexTransport ) { transport = ((MutexTransport)transport) getNext(); } return transport; } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } Override protected boolean isUseInactivityMonitor(Transport transport) { return false; } }",1.0,
150,150,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpSupport.,AmqpSupport,public class AmqpSupport { static public Buffer toBuffer(ByteBuffer data) { if( data == null ) { return null; } Buffer rc; if( data isDirect() ) { rc = new Buffer(data remaining()); data get(rc data); } else { rc = new Buffer(data); data position(data position()+data remaining()); } return rc; } },1.0,
151,151,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpTransportFactory.,AmqpTransportFactory,"public class AmqpTransportFactory extends TcpTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return amqp ; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new AmqpTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); if( transport instanceof MutexTransport ) { transport = ((MutexTransport)transport) getNext(); } return transport; } Override protected boolean isUseInactivityMonitor(Transport transport) { return false; } }",1.0,
154,154,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpWireFormatFactory.,AmqpWireFormatFactory,public class AmqpWireFormatFactory implements WireFormatFactory { public WireFormat createWireFormat() { return new AmqpWireFormat(); } },1.0,
155,155,data,\smellybot\activemq\activemq-amqp\src\test\java\org\apache\activemq\transport\amqp\AmqpNioTest.,AmqpNioTest,public class AmqpNioTest extends AmqpTestSupport { protected void addAMQPConnector(BrokerService brokerService) throws Exception { brokerService addConnector( amqp+nio } },1.0,
156,156,data,\smellybot\activemq\activemq-amqp\src\test\java\org\apache\activemq\transport\amqp\AmqpSslTest.,AmqpSslTest,"public class AmqpSslTest extends AmqpTestSupport { public void startBroker() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super startBroker(); } protected void addAMQPConnector(BrokerService brokerService) throws Exception { brokerService addConnector( amqp+ssl } static class DefaultTrustManager implements X509TrustManager { public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { } public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { } public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; } } }",1.0,
157,157,data,\smellybot\activemq\activemq-amqp\src\test\java\org\apache\activemq\transport\amqp\AmqpSslTest.,DefaultTrustManager,"static class DefaultTrustManager implements X509TrustManager { public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { } public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { } public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; } }",1.0,
159,159,data,\smellybot\activemq\activemq-amqp\src\test\java\org\apache\activemq\transport\amqp\JMSClientTest.,JMSClientTest,"public class JMSClientTest extends AmqpTestSupport { Test public void testTransactions() throws Exception { ActiveMQAdmin enableJMSFrameTracing(); QueueImpl queue = new QueueImpl( queue Connection connection = createConnection(); { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer p = session createProducer(queue); TextMessage message = session createTextMessage(); message setText( hello ); p send(message); QueueBrowser browser = session createBrowser(queue); Enumeration enumeration = browser getEnumeration(); while (enumeration hasMoreElements()) { Message m = (Message) enumeration nextElement(); assertTrue(m instanceof TextMessage); } MessageConsumer consumer = session createConsumer(queue); Message msg = consumer receive(TestConfig TIMEOUT); assertTrue(message instanceof TextMessage); } connection close(); } private Connection createConnection() throws JMSException { final ConnectionFactoryImpl factory = new ConnectionFactoryImpl( localhost , port, admin , password ); final Connection connection = factory createConnection(); connection setExceptionListener(new ExceptionListener() { Override public void onException(JMSException exception) { exception printStackTrace(); } }); connection start(); return connection; } }",1.0,
160,160,data,\smellybot\activemq\activemq-amqp\src\test\java\org\apache\activemq\transport\amqp\joram\ActiveMQAdmin.,ActiveMQAdmin,"public class ActiveMQAdmin implements Admin { Context context; { try { final Hashtable<String, String> env = new Hashtable<String, String>(); env put( java naming factory initial , org eclipse jetty jndi InitialContextFactory ); env put( java naming factory url pkgs , org eclipse jetty jndi );; context = new InitialContext(env); } catch (NamingException e) { throw new RuntimeException(e); } } static public void enableJMSFrameTracing() throws FileNotFoundException { final SimpleFormatter formatter = new SimpleFormatter(); final PrintStream out = new PrintStream(new FileOutputStream(new File( /tmp/amqp-trace txt ))); Handler handler = new Handler() { Override public void publish(LogRecord r) { out println(String format( %s %s , r getLoggerName(), r getMessage())); } Override public void flush() { out flush(); } Override public void close() throws SecurityException { } }; Logger log = Logger getLogger( FRM ); log addHandler(handler); log setLevel(Level FINEST); } protected BrokerService createBroker() throws Exception { return BrokerFactory createBroker(new URI( broker } public String getName() { return getClass() getName(); } static BrokerService broker; static int port; public void startServer() throws Exception { if( broker!=null ) { stopServer(); } if (System getProperty( basedir ) == null) { File file = new File( ); System setProperty( basedir , file getAbsolutePath()); } broker = createBroker(); TransportConnector connector = broker addConnector( amqp broker start(); port = connector getConnectUri() getPort(); } public void stopServer() throws Exception { broker stop(); broker = null; } public void start() throws Exception { } public void stop() throws Exception { } public Context createContext() throws NamingException { return context; } public void createQueue(String name) { try { context bind(name, new QueueImpl( queue } catch (NamingException e) { throw new RuntimeException(e); } } public void createTopic(String name) { try { context bind(name, new TopicImpl( topic } catch (NamingException e) { throw new RuntimeException(e); } } public void deleteQueue(String name) { try { context unbind(name); } catch (NamingException e) { throw new RuntimeException(e); } } public void deleteTopic(String name) { try { context unbind(name); } catch (NamingException e) { throw new RuntimeException(e); } } public void createConnectionFactory(String name) { try { final ConnectionFactory factory = new ConnectionFactoryImpl( localhost , port, null, null); context bind(name, factory); } catch (NamingException e) { throw new RuntimeException(e); } } public void deleteConnectionFactory(String name) { try { context unbind(name); } catch (NamingException e) { throw new RuntimeException(e); } } public void createQueueConnectionFactory(String name) { createConnectionFactory(name); } public void createTopicConnectionFactory(String name) { createConnectionFactory(name); } public void deleteQueueConnectionFactory(String name) { deleteConnectionFactory(name); } public void deleteTopicConnectionFactory(String name) { deleteConnectionFactory(name); } }",1.0,
164,164,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\AbstractLocker.,AbstractLocker,public abstract class AbstractLocker extends ServiceSupport implements Locker { public static final long DEFAULT LOCK ACQUIRE SLEEP INTERVAL = 10 * 1000; protected String name; protected boolean failIfLocked = false; protected long lockAcquireSleepInterval = DEFAULT LOCK ACQUIRE SLEEP INTERVAL; Override public boolean keepAlive() throws IOException { return true; } Override public void setLockAcquireSleepInterval(long lockAcquireSleepInterval) { this lockAcquireSleepInterval = lockAcquireSleepInterval; } Override public void setName(String name) { this name = name; } Override public void setFailIfLocked(boolean failIfLocked) { this failIfLocked = failIfLocked; } },1.0,
166,166,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\BrokerFactory.,BrokerFactory,"public final class BrokerFactory { private static final FactoryFinder BROKER FACTORY HANDLER FINDER = new FactoryFinder( META-INF/services/org/apache/activemq/broker/ ); private BrokerFactory() { } public static BrokerFactoryHandler createBrokerFactoryHandler(String type) throws IOException { try { return (BrokerFactoryHandler)BROKER FACTORY HANDLER FINDER newInstance(type); } catch (Throwable e) { throw IOExceptionSupport create( Could not load + type + factory + e, e); } } public static BrokerService createBroker(URI brokerURI) throws Exception { return createBroker(brokerURI, false); } public static BrokerService createBroker(URI brokerURI, boolean startBroker) throws Exception { if (brokerURI getScheme() == null) { throw new IllegalArgumentException( Invalid broker URI, no scheme specified + brokerURI); } BrokerFactoryHandler handler = createBrokerFactoryHandler(brokerURI getScheme()); BrokerService broker = handler createBroker(brokerURI); if (startBroker) { broker start(); } return broker; } public static BrokerService createBroker(String brokerURI) throws Exception { return createBroker(new URI(brokerURI)); } public static BrokerService createBroker(String brokerURI, boolean startBroker) throws Exception { return createBroker(new URI(brokerURI), startBroker); } private static final ThreadLocal<Boolean> START DEFAULT = new ThreadLocal<Boolean>(); public static void setStartDefault(boolean startDefault) { START DEFAULT set(startDefault); } public static void resetStartDefault() { START DEFAULT remove(); } public static boolean getStartDefault() { Boolean value = START DEFAULT get(); if( value==null ) { return true; } return value booleanValue(); } }",1.0,
168,168,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\BrokerPluginSupport.,BrokerPluginSupport,public abstract class BrokerPluginSupport extends MutableBrokerFilter implements BrokerPlugin { private static final Logger LOG = LoggerFactory getLogger(BrokerPluginSupport class); public BrokerPluginSupport() { super(null); } public Broker installPlugin(Broker broker) throws Exception { setNext(broker); return this; } Override public void start() throws Exception { super start(); LOG info( Broker Plugin + getClass() getName() + started ); } Override public void stop() throws Exception { super stop(); LOG info( Broker Plugin + getClass() getName() + stopped ); } },1.0,
171,171,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\BrokerStoppedException.,BrokerStoppedException,"public class BrokerStoppedException extends IllegalStateException { private static final long serialVersionUID = -3435230276850902220L; public BrokerStoppedException() { super(); } public BrokerStoppedException(String message, Throwable cause) { super(message); initCause(cause); } public BrokerStoppedException(String s) { super(s); } public BrokerStoppedException(Throwable cause) { initCause(cause); } }",1.0,
175,175,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\DefaultBrokerFactory.,DefaultBrokerFactory,"public class DefaultBrokerFactory implements BrokerFactoryHandler { public BrokerService createBroker(URI brokerURI) throws Exception { CompositeData compositeData = URISupport parseComposite(brokerURI); Map<String, String> params = new HashMap<String, String>(compositeData getParameters()); BrokerService brokerService = new BrokerService(); IntrospectionSupport setProperties(brokerService, params); if (!params isEmpty()) { String msg = There are + params size() + Broker options that couldn t be set on the BrokerService + Check the options are spelled correctly + Unknown parameters=[ + params + ] + This BrokerService cannot be started ; throw new IllegalArgumentException(msg); } if (compositeData getPath() != null) { brokerService setBrokerName(compositeData getPath()); } URI[] components = compositeData getComponents(); for (int i = 0; i < components length; i++) { if ( network equals(components[i] getScheme())) { brokerService addNetworkConnector(components[i] getSchemeSpecificPart()); } else if ( proxy equals(components[i] getScheme())) { brokerService addProxyConnector(components[i] getSchemeSpecificPart()); } else { brokerService addConnector(components[i]); } } return brokerService; } }",1.0,
178,178,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\InsertableMutableBrokerFilter.,InsertableMutableBrokerFilter,public class InsertableMutableBrokerFilter extends MutableBrokerFilter { MutableBrokerFilter parent; public InsertableMutableBrokerFilter(MutableBrokerFilter parent) { super(parent getNext()); this parent = parent; parent setNext(this); } public void remove() { parent setNext(getNext()); } },1.0,
180,180,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\MapTransportConnectionStateRegister.,MapTransportConnectionStateRegister,"public class MapTransportConnectionStateRegister implements TransportConnectionStateRegister{ private Map <ConnectionId,TransportConnectionState>connectionStates = new ConcurrentHashMap<ConnectionId,TransportConnectionState>(); public TransportConnectionState registerConnectionState(ConnectionId connectionId, TransportConnectionState state) { TransportConnectionState rc = connectionStates put(connectionId, state); return rc; } public TransportConnectionState unregisterConnectionState(ConnectionId connectionId) { TransportConnectionState rc = connectionStates remove(connectionId); if (rc getReferenceCounter() get() > 1) { rc decrementReference(); connectionStates put(connectionId, rc); } return rc; } public List<TransportConnectionState> listConnectionStates() { List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>(); rc addAll(connectionStates values()); return rc; } public TransportConnectionState lookupConnectionState(String connectionId) { return connectionStates get(new ConnectionId(connectionId)); } public TransportConnectionState lookupConnectionState(ConsumerId id) { TransportConnectionState cs = lookupConnectionState(id getConnectionId()); if (cs == null) { throw new IllegalStateException( Cannot lookup a consumer from a connection that had not been registered + id getParentId() getParentId()); } return cs; } public TransportConnectionState lookupConnectionState(ProducerId id) { TransportConnectionState cs = lookupConnectionState(id getConnectionId()); if (cs == null) { throw new IllegalStateException( Cannot lookup a producer from a connection that had not been registered + id getParentId() getParentId()); } return cs; } public TransportConnectionState lookupConnectionState(SessionId id) { TransportConnectionState cs = lookupConnectionState(id getConnectionId()); if (cs == null) { throw new IllegalStateException( Cannot lookup a session from a connection that had not been registered + id getParentId()); } return cs; } public TransportConnectionState lookupConnectionState(ConnectionId connectionId) { TransportConnectionState cs = connectionStates get(connectionId); if (cs == null) { throw new IllegalStateException( Cannot lookup a connection that had not been registered + connectionId); } return cs; } public boolean doesHandleMultipleConnectionStates() { return true; } public boolean isEmpty() { return connectionStates isEmpty(); } public void clear() { connectionStates clear(); } public void intialize(TransportConnectionStateRegister other) { connectionStates clear(); connectionStates putAll(other mapStates()); } public Map<ConnectionId, TransportConnectionState> mapStates() { HashMap<ConnectionId, TransportConnectionState> map = new HashMap<ConnectionId, TransportConnectionState>(connectionStates); return map; } }",1.0,
183,183,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\PropertiesBrokerFactory.,PropertiesBrokerFactory,"public class PropertiesBrokerFactory implements BrokerFactoryHandler { public BrokerService createBroker(URI brokerURI) throws Exception { Map properties = loadProperties(brokerURI); BrokerService brokerService = createBrokerService(brokerURI, properties); IntrospectionSupport setProperties(brokerService, properties); return brokerService; } protected Map loadProperties(URI brokerURI) throws IOException { String remaining = brokerURI getSchemeSpecificPart(); Properties properties = new Properties(); File file = new File(remaining); InputStream inputStream = null; if (file exists()) { inputStream = new FileInputStream(file); } else { URL url = null; try { url = new URL(remaining); } catch (MalformedURLException e) { inputStream = findResourceOnClassPath(remaining); if (inputStream == null) { throw new IOException( File does not exist + remaining + , could not be found on the classpath and is not a valid URL + e); } } if (inputStream == null && url != null) { inputStream = url openStream(); } } if (inputStream != null) { properties load(inputStream); inputStream close(); } try { Properties systemProperties = System getProperties(); properties putAll(systemProperties); } catch (Exception e) { } return properties; } protected InputStream findResourceOnClassPath(String remaining) { InputStream answer = Thread currentThread() getContextClassLoader() getResourceAsStream(remaining); if (answer == null) { answer = getClass() getClassLoader() getResourceAsStream(remaining); } return answer; } protected BrokerService createBrokerService(URI brokerURI, Map properties) { return new BrokerService(); } }",1.0,
184,184,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\PublishedAddressPolicy.,PublishedAddressPolicy,"public class PublishedAddressPolicy { private String clusterClientUriQuery; private PublishedHostStrategy publishedHostStrategy = PublishedHostStrategy DEFAULT; public enum PublishedHostStrategy { DEFAULT, IPADDRESS, HOSTNAME, FQDN; public static PublishedHostStrategy getValue(String value) { return valueOf(value toUpperCase(Locale ENGLISH)); } } public String getPublishableConnectString(TransportConnector connector) throws Exception { URI connectorURI = connector getConnectUri(); if (connectorURI == null) { return null; } String scheme = connectorURI getScheme(); String userInfo = getPublishedUserInfoValue(connectorURI getUserInfo()); String host = getPublishedHostValue(connectorURI getHost()); int port = connectorURI getPort(); String path = getPublishedPathValue(connectorURI getPath()); String fragment = getPublishedFragmentValue(connectorURI getFragment()); URI publishedURI = new URI(scheme, userInfo, host, port, path, getClusterClientUriQuery(), fragment); return publishedURI toString(); } protected String getPublishedHostValue(String uriHostEntry) throws UnknownHostException { String result = uriHostEntry; if (this publishedHostStrategy equals(PublishedHostStrategy IPADDRESS)) { InetAddress address = InetAddress getByName(uriHostEntry); result = address getHostAddress(); } else if (this publishedHostStrategy equals(PublishedHostStrategy HOSTNAME)) { InetAddress address = InetAddress getByName(uriHostEntry); if (address isAnyLocalAddress()) { result = InetAddressUtil getLocalHostName(); } else { result = address getHostName(); } } else if (this publishedHostStrategy equals(PublishedHostStrategy FQDN)) { InetAddress address = InetAddress getByName(uriHostEntry); if (address isAnyLocalAddress()) { result = InetAddressUtil getLocalHostName(); } else { result = address getCanonicalHostName(); } } return result; } protected String getPublishedPathValue(String uriPathEntry) { return uriPathEntry; } protected String getPublishedFragmentValue(String uriFragmentEntry) { return uriFragmentEntry; } protected String getPublishedUserInfoValue(String uriUserInfoEntry) { return uriUserInfoEntry; } public String getClusterClientUriQuery() { return clusterClientUriQuery; } public void setClusterClientUriQuery(String clusterClientUriQuery) { this clusterClientUriQuery = clusterClientUriQuery; } public PublishedHostStrategy getPublishedHostStrategy() { return publishedHostStrategy; } public void setPublishedHostStrategy(PublishedHostStrategy strategy) { this publishedHostStrategy = strategy; } public void setPublishedHostStrategy(String strategy) { this publishedHostStrategy = PublishedHostStrategy getValue(strategy); } }",1.0,
185,185,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\SingleTransportConnectionStateRegister.,SingleTransportConnectionStateRegister,"public class SingleTransportConnectionStateRegister implements TransportConnectionStateRegister{ private TransportConnectionState connectionState; private ConnectionId connectionId; public TransportConnectionState registerConnectionState(ConnectionId connectionId, TransportConnectionState state) { TransportConnectionState rc = connectionState; connectionState = state; this connectionId = connectionId; return rc; } public synchronized TransportConnectionState unregisterConnectionState(ConnectionId connectionId) { TransportConnectionState rc = null; if (connectionId != null && connectionState != null && this connectionId!=null){ if (this connectionId equals(connectionId)){ rc = connectionState; connectionState = null; connectionId = null; } } return rc; } public synchronized List<TransportConnectionState> listConnectionStates() { List<TransportConnectionState> rc = new ArrayList<TransportConnectionState>(); if (connectionState != null) { rc add(connectionState); } return rc; } public synchronized TransportConnectionState lookupConnectionState(String connectionId) { TransportConnectionState cs = connectionState; if (cs == null) { throw new IllegalStateException( Cannot lookup a connectionId for a connection that had not been registered + connectionId); } return cs; } public synchronized TransportConnectionState lookupConnectionState(ConsumerId id) { TransportConnectionState cs = connectionState; if (cs == null) { throw new IllegalStateException( Cannot lookup a consumer from a connection that had not been registered + id getParentId() getParentId()); } return cs; } public synchronized TransportConnectionState lookupConnectionState(ProducerId id) { TransportConnectionState cs = connectionState; if (cs == null) { throw new IllegalStateException( Cannot lookup a producer from a connection that had not been registered + id getParentId() getParentId()); } return cs; } public synchronized TransportConnectionState lookupConnectionState(SessionId id) { TransportConnectionState cs = connectionState; if (cs == null) { throw new IllegalStateException( Cannot lookup a session from a connection that had not been registered + id getParentId()); } return cs; } public synchronized TransportConnectionState lookupConnectionState(ConnectionId connectionId) { TransportConnectionState cs = connectionState; return cs; } public synchronized boolean doesHandleMultipleConnectionStates() { return false; } public synchronized boolean isEmpty() { return connectionState == null; } public void intialize(TransportConnectionStateRegister other) { if (other isEmpty()){ clear(); }else{ Map map = other mapStates(); Iterator i = map entrySet() iterator(); Map Entry<ConnectionId, TransportConnectionState> entry = (Entry<ConnectionId, TransportConnectionState>) i next(); connectionId = entry getKey(); connectionState =entry getValue(); } } public Map<ConnectionId, TransportConnectionState> mapStates() { Map<ConnectionId, TransportConnectionState> map = new HashMap<ConnectionId, TransportConnectionState>(); if (!isEmpty()) { map put(connectionId, connectionState); } return map; } public void clear() { connectionState=null; connectionId=null; } }",1.0,
186,186,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\SslBrokerService.,SslBrokerService,"public class SslBrokerService extends BrokerService { public TransportConnector addSslConnector(String bindAddress, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws Exception { return addSslConnector(new URI(bindAddress), km, tm, random); } public TransportConnector addSslConnector(URI bindAddress, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws Exception { return addConnector(createSslTransportServer(bindAddress, km, tm, random)); } protected TransportServer createSslTransportServer(URI brokerURI, KeyManager[] km, TrustManager[] tm, SecureRandom random) throws IOException, KeyManagementException { if (brokerURI getScheme() equals( ssl )) { SslTransportFactory transportFactory = new SslTransportFactory(); SslContext ctx = new SslContext(km, tm, random); SslContext setCurrentSslContext(ctx); try { return transportFactory doBind(brokerURI); } finally { SslContext setCurrentSslContext(null); } } else { return TransportFactorySupport bind(this, brokerURI); } } }",1.0,
188,188,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\TransactionBroker.,PreparedDestinationCompletion,"static class PreparedDestinationCompletion extends Synchronization { final Destination destination; final boolean messageSend; int opCount = 1; public PreparedDestinationCompletion(final Destination destination, boolean messageSend) { this destination = destination; this messageSend = messageSend; } public void incrementOpCount() { opCount++; } Override public int hashCode() { return System identityHashCode(destination) + System identityHashCode(Boolean valueOf(messageSend)); } Override public boolean equals(Object other) { return other instanceof PreparedDestinationCompletion && destination equals(((PreparedDestinationCompletion) other) destination) && messageSend == ((PreparedDestinationCompletion) other) messageSend; } Override public void afterRollback() throws Exception { if (!messageSend) { destination clearPendingMessages(); if (LOG isDebugEnabled()) { LOG debug( cleared pending from afterRollback + destination); } } } Override public void afterCommit() throws Exception { if (messageSend) { destination clearPendingMessages(); destination getDestinationStatistics() getEnqueues() add(opCount); destination getDestinationStatistics() getMessages() add(opCount); if (LOG isDebugEnabled()) { LOG debug( cleared pending from afterCommit + destination); } } else { destination getDestinationStatistics() getDequeues() add(opCount); destination getDestinationStatistics() getMessages() subtract(opCount); } } }",1.0,
193,193,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\UserIDBroker.,UserIDBroker,"public class UserIDBroker extends BrokerFilter { boolean useAuthenticatePrincipal = false; public UserIDBroker(Broker next) { super(next); } public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception { final ConnectionContext context = producerExchange getConnectionContext(); String userID = context getUserName(); if (isUseAuthenticatePrincipal()) { SecurityContext securityContext = context getSecurityContext(); if (securityContext != null) { Set< > principals = securityContext getPrincipals(); if (principals != null) { for (Object candidate principals) { if (candidate instanceof UserPrincipal) { userID = ((UserPrincipal)candidate) getName(); break; } } } } } messageSend setUserID(userID); super send(producerExchange, messageSend); } public boolean isUseAuthenticatePrincipal() { return useAuthenticatePrincipal; } public void setUseAuthenticatePrincipal(boolean useAuthenticatePrincipal) { this useAuthenticatePrincipal = useAuthenticatePrincipal; } }",1.0,
195,195,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\AbortSlowConsumerStrategyView.,AbortSlowConsumerStrategyView,"public class AbortSlowConsumerStrategyView implements AbortSlowConsumerStrategyViewMBean { private static final Logger LOG = LoggerFactory getLogger(AbortSlowConsumerStrategyView class); private ManagedRegionBroker broker; private AbortSlowConsumerStrategy strategy; public AbortSlowConsumerStrategyView(ManagedRegionBroker managedRegionBroker, AbortSlowConsumerStrategy slowConsumerStrategy) { this broker = managedRegionBroker; this strategy = slowConsumerStrategy; } public long getMaxSlowCount() { return strategy getMaxSlowCount(); } public void setMaxSlowCount(long maxSlowCount) { strategy setMaxSlowCount(maxSlowCount); } public long getMaxSlowDuration() { return strategy getMaxSlowDuration(); } public void setMaxSlowDuration(long maxSlowDuration) { strategy setMaxSlowDuration(maxSlowDuration); } public long getCheckPeriod() { return strategy getCheckPeriod(); } public TabularData getSlowConsumers() throws OpenDataException { OpenTypeSupport OpenTypeFactory factory = OpenTypeSupport getFactory(SlowConsumerEntry class); CompositeType ct = factory getCompositeType(); TabularType tt = new TabularType( SlowConsumers , Table of current slow Consumers , ct, new String[] { subscription }); TabularDataSupport rc = new TabularDataSupport(tt); int index = 0; Map<Subscription, SlowConsumerEntry> slowConsumers = strategy getSlowConsumers(); for (Map Entry<Subscription, SlowConsumerEntry> entry slowConsumers entrySet()) { entry getValue() setSubscription(broker getSubscriberObjectName(entry getKey())); rc put(OpenTypeSupport convert(entry getValue())); } return rc; } public void abortConsumer(ObjectName consumerToAbort) { Subscription sub = broker getSubscriber(consumerToAbort); if (sub != null) { LOG info( aborting consumer via jmx + sub getConsumerInfo() getConsumerId()); strategy abortConsumer(sub, false); } else { LOG warn( cannot resolve subscription matching name + consumerToAbort); } } public void abortConnection(ObjectName consumerToAbort) { Subscription sub = broker getSubscriber(consumerToAbort); if (sub != null) { LOG info( aborting consumer connection via jmx + sub getConsumerInfo() getConsumerId() getConnectionId()); strategy abortConsumer(sub, true); } else { LOG warn( cannot resolve subscription matching name + consumerToAbort); } } public void abortConsumer(String objectNameOfConsumerToAbort) { abortConsumer(toObjectName(objectNameOfConsumerToAbort)); } public void abortConnection(String objectNameOfConsumerToAbort) { abortConnection(toObjectName(objectNameOfConsumerToAbort)); } private ObjectName toObjectName(String objectName) { ObjectName result = null; try { result = new ObjectName(objectName); } catch (Exception e) { LOG warn( cannot create subscription ObjectName to abort, from string + objectName); } return result; } }",1.0,
197,197,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\AsyncAnnotatedMBean.,AsyncAnnotatedMBean,"public class AsyncAnnotatedMBean extends AnnotatedMBean { private ExecutorService executor; private long timeout = 0; public <T> AsyncAnnotatedMBean(ExecutorService executor, long timeout, T impl, Class<T> mbeanInterface) throws NotCompliantMBeanException { super(impl, mbeanInterface); this executor = executor; this timeout = timeout; } protected AsyncAnnotatedMBean(Class< > mbeanInterface) throws NotCompliantMBeanException { super(mbeanInterface); } protected Object asyncInvole(String s, Object[] objects, String[] strings) throws MBeanException, ReflectionException { return super invoke(s, objects, strings); } SuppressWarnings({ unchecked , rawtypes }) public static void registerMBean(ExecutorService executor, long timeout, ManagementContext context, Object object, ObjectName objectName) throws Exception { if (timeout < 0 && executor != null) { throw new IllegalArgumentException( async timeout cannot be negative ); } if (timeout > 0 && executor == null) { throw new NullPointerException( timeout given but no ExecutorService instance given ); } String mbeanName = object getClass() getName() + MBean ; for (Class c object getClass() getInterfaces()) { if (mbeanName equals(c getName())) { if (timeout == 0) { context registerMBean(new AnnotatedMBean(object, c), objectName); } else { context registerMBean(new AsyncAnnotatedMBean(executor, timeout, object, c), objectName); } return; } } context registerMBean(object, objectName); } Override public Object invoke(String s, Object[] objects, String[] strings) throws MBeanException, ReflectionException { final String action = s; final Object[] params = objects; final String[] signature = strings; Future<Object> task = executor submit(new Callable<Object>() { Override public Object call() throws Exception { return asyncInvole(action, params, signature); } }); try { return task get(timeout, TimeUnit MILLISECONDS); } catch (ExecutionException e) { if (e getCause() instanceof MBeanException) { throw (MBeanException) e getCause(); } throw new MBeanException(e); } catch (Exception e) { throw new MBeanException(e); } finally { if (!task isDone()) { task cancel(true); } } } }",1.0,
199,199,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\BrokerView.,BrokerView,"public class BrokerView implements BrokerViewMBean { private static final Logger LOG = LoggerFactory getLogger(BrokerView class); ManagedRegionBroker broker; private final BrokerService brokerService; private final AtomicInteger sessionIdCounter = new AtomicInteger(0); private ObjectName jmsJobScheduler; public BrokerView(BrokerService brokerService, ManagedRegionBroker managedBroker) throws Exception { this brokerService = brokerService; this broker = managedBroker; } public ManagedRegionBroker getBroker() { return broker; } public void setBroker(ManagedRegionBroker broker) { this broker = broker; } public String getBrokerId() { return safeGetBroker() getBrokerId() toString(); } public String getBrokerName() { return safeGetBroker() getBrokerName(); } public String getBrokerVersion() { return ActiveMQConnectionMetaData PROVIDER VERSION; } Override public String getUptime() { return brokerService getUptime(); } public void gc() throws Exception { brokerService getBroker() gc(); try { brokerService getPersistenceAdapter() checkpoint(true); } catch (IOException e) { LOG error( Failed to checkpoint persistence adapter on gc request, reason + e, e); } } public void start() throws Exception { brokerService start(); } public void stop() throws Exception { brokerService stop(); } public void stopGracefully(String connectorName, String queueName, long timeout, long pollInterval) throws Exception { brokerService stopGracefully(connectorName, queueName, timeout, pollInterval); } public long getTotalEnqueueCount() { return safeGetBroker() getDestinationStatistics() getEnqueues() getCount(); } public long getTotalDequeueCount() { return safeGetBroker() getDestinationStatistics() getDequeues() getCount(); } public long getTotalConsumerCount() { return safeGetBroker() getDestinationStatistics() getConsumers() getCount(); } public long getTotalProducerCount() { return safeGetBroker() getDestinationStatistics() getProducers() getCount(); } public long getTotalMessageCount() { return safeGetBroker() getDestinationStatistics() getMessages() getCount(); } public long getTotalMessagesCached() { return safeGetBroker() getDestinationStatistics() getMessagesCached() getCount(); } public int getMemoryPercentUsage() { return brokerService getSystemUsage() getMemoryUsage() getPercentUsage(); } public long getMemoryLimit() { return brokerService getSystemUsage() getMemoryUsage() getLimit(); } public void setMemoryLimit(long limit) { brokerService getSystemUsage() getMemoryUsage() setLimit(limit); } public long getStoreLimit() { return brokerService getSystemUsage() getStoreUsage() getLimit(); } public int getStorePercentUsage() { return brokerService getSystemUsage() getStoreUsage() getPercentUsage(); } public long getTempLimit() { return brokerService getSystemUsage() getTempUsage() getLimit(); } public int getTempPercentUsage() { return brokerService getSystemUsage() getTempUsage() getPercentUsage(); } public long getJobSchedulerStoreLimit() { return brokerService getSystemUsage() getJobSchedulerUsage() getLimit(); } public int getJobSchedulerStorePercentUsage() { return brokerService getSystemUsage() getJobSchedulerUsage() getPercentUsage(); } public void setStoreLimit(long limit) { brokerService getSystemUsage() getStoreUsage() setLimit(limit); } public void setTempLimit(long limit) { brokerService getSystemUsage() getTempUsage() setLimit(limit); } public void setJobSchedulerStoreLimit(long limit) { brokerService getSystemUsage() getJobSchedulerUsage() setLimit(limit); } public void resetStatistics() { safeGetBroker() getDestinationStatistics() reset(); } public void enableStatistics() { safeGetBroker() getDestinationStatistics() setEnabled(true); } public void disableStatistics() { safeGetBroker() getDestinationStatistics() setEnabled(false); } public boolean isStatisticsEnabled() { return safeGetBroker() getDestinationStatistics() isEnabled(); } public boolean isPersistent() { return brokerService isPersistent(); } public void terminateJVM(int exitCode) { System exit(exitCode); } public ObjectName[] getTopics() { return safeGetBroker() getTopics(); } public ObjectName[] getQueues() { return safeGetBroker() getQueues(); } public ObjectName[] getTemporaryTopics() { return safeGetBroker() getTemporaryTopics(); } public ObjectName[] getTemporaryQueues() { return safeGetBroker() getTemporaryQueues(); } public ObjectName[] getTopicSubscribers() { return safeGetBroker() getTopicSubscribers(); } public ObjectName[] getDurableTopicSubscribers() { return safeGetBroker() getDurableTopicSubscribers(); } public ObjectName[] getQueueSubscribers() { return safeGetBroker() getQueueSubscribers(); } public ObjectName[] getTemporaryTopicSubscribers() { return safeGetBroker() getTemporaryTopicSubscribers(); } public ObjectName[] getTemporaryQueueSubscribers() { return safeGetBroker() getTemporaryQueueSubscribers(); } public ObjectName[] getInactiveDurableTopicSubscribers() { return safeGetBroker() getInactiveDurableTopicSubscribers(); } public ObjectName[] getTopicProducers() { return safeGetBroker() getTopicProducers(); } public ObjectName[] getQueueProducers() { return safeGetBroker() getQueueProducers(); } public ObjectName[] getTemporaryTopicProducers() { return safeGetBroker() getTemporaryTopicProducers(); } public ObjectName[] getTemporaryQueueProducers() { return safeGetBroker() getTemporaryQueueProducers(); } public ObjectName[] getDynamicDestinationProducers() { return safeGetBroker() getDynamicDestinationProducers(); } public String addConnector(String discoveryAddress) throws Exception { TransportConnector connector = brokerService addConnector(discoveryAddress); if (connector == null) { throw new NoSuchElementException( Not connector matched the given name + discoveryAddress); } connector start(); return connector getName(); } public String addNetworkConnector(String discoveryAddress) throws Exception { NetworkConnector connector = brokerService addNetworkConnector(discoveryAddress); if (connector == null) { throw new NoSuchElementException( Not connector matched the given name + discoveryAddress); } connector start(); return connector getName(); } public boolean removeConnector(String connectorName) throws Exception { TransportConnector connector = brokerService getConnectorByName(connectorName); if (connector == null) { throw new NoSuchElementException( Not connector matched the given name + connectorName); } connector stop(); return brokerService removeConnector(connector); } public boolean removeNetworkConnector(String connectorName) throws Exception { NetworkConnector connector = brokerService getNetworkConnectorByName(connectorName); if (connector == null) { throw new NoSuchElementException( Not connector matched the given name + connectorName); } connector stop(); return brokerService removeNetworkConnector(connector); } public void addTopic(String name) throws Exception { safeGetBroker() getContextBroker() addDestination(BrokerSupport getConnectionContext(safeGetBroker() getContextBroker()), new ActiveMQTopic(name),true); } public void addQueue(String name) throws Exception { safeGetBroker() getContextBroker() addDestination(BrokerSupport getConnectionContext(safeGetBroker() getContextBroker()), new ActiveMQQueue(name),true); } public void removeTopic(String name) throws Exception { safeGetBroker() getContextBroker() removeDestination(BrokerSupport getConnectionContext(safeGetBroker() getContextBroker()), new ActiveMQTopic(name), 1000); } public void removeQueue(String name) throws Exception { safeGetBroker() getContextBroker() removeDestination(BrokerSupport getConnectionContext(safeGetBroker() getContextBroker()), new ActiveMQQueue(name), 1000); } public ObjectName createDurableSubscriber(String clientId, String subscriberName, String topicName, String selector) throws Exception { ConnectionContext context = new ConnectionContext(); context setBroker(safeGetBroker()); context setClientId(clientId); ConsumerInfo info = new ConsumerInfo(); ConsumerId consumerId = new ConsumerId(); consumerId setConnectionId(clientId); consumerId setSessionId(sessionIdCounter incrementAndGet()); consumerId setValue(0); info setConsumerId(consumerId); info setDestination(new ActiveMQTopic(topicName)); info setSubscriptionName(subscriberName); info setSelector(selector); Subscription subscription = safeGetBroker() addConsumer(context, info); safeGetBroker() removeConsumer(context, info); if (subscription != null) { return subscription getObjectName(); } return null; } public void destroyDurableSubscriber(String clientId, String subscriberName) throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); info setClientId(clientId); info setSubscriptionName(subscriberName); ConnectionContext context = new ConnectionContext(); context setBroker(safeGetBroker()); context setClientId(clientId); safeGetBroker() removeSubscription(context, info); } public void reloadLog4jProperties() throws Throwable { try { ClassLoader cl = getClass() getClassLoader(); Class< > logManagerClass = cl loadClass( org apache log4j LogManager ); Method resetConfiguration = logManagerClass getMethod( resetConfiguration , new Class[]{}); resetConfiguration invoke(null, new Object[]{}); String configurationOptionStr = System getProperty( log4j configuration ); URL log4jprops = null; if (configurationOptionStr != null) { try { log4jprops = new URL(configurationOptionStr); } catch (MalformedURLException ex) { log4jprops = cl getResource( log4j properties ); } } else { log4jprops = cl getResource( log4j properties ); } if (log4jprops != null) { Class< > propertyConfiguratorClass = cl loadClass( org apache log4j PropertyConfigurator ); Method configure = propertyConfiguratorClass getMethod( configure , new Class[]{URL class}); configure invoke(null, new Object[]{log4jprops}); } } catch (InvocationTargetException e) { throw e getTargetException(); } } public Map<String, String> getTransportConnectors() { Map<String, String> answer = new HashMap<String, String>(); try { for (TransportConnector connector brokerService getTransportConnectors()) { answer put(connector getName(), connector getConnectUri() toString()); } } catch (Exception e) { LOG debug( Failed to read URI to build transport connectors map , e); } return answer; } Override public String getTransportConnectorByType(String type) { return brokerService getTransportConnectorURIsAsMap() get(type); } Deprecated public String getOpenWireURL() { String answer = brokerService getTransportConnectorURIsAsMap() get( tcp ); return answer != null answer ; } Deprecated public String getStompURL() { String answer = brokerService getTransportConnectorURIsAsMap() get( stomp ); return answer != null answer ; } Deprecated public String getSslURL() { String answer = brokerService getTransportConnectorURIsAsMap() get( ssl ); return answer != null answer ; } Deprecated public String getStompSslURL() { String answer = brokerService getTransportConnectorURIsAsMap() get( stomp+ssl ); return answer != null answer ; } public String getVMURL() { URI answer = brokerService getVmConnectorURI(); return answer != null answer toString() ; } public String getDataDirectory() { File file = brokerService getDataDirectoryFile(); try { return file != null file getCanonicalPath() ; } catch (IOException e) { return ; } } public ObjectName getJMSJobScheduler() { return this jmsJobScheduler; } public void setJMSJobScheduler(ObjectName name) { this jmsJobScheduler=name; } private ManagedRegionBroker safeGetBroker() { if (broker == null) { throw new IllegalStateException( Broker is not yet started ); } return broker; } }",1.0,
200,200,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\CompositeDataHelper.,CompositeDataHelper,"public class CompositeDataHelper { public static Map getTabularMap(CompositeData cdata, String fieldName) { Map map = new HashMap(); appendTabularMap(map, cdata, fieldName); return map; } public static void appendTabularMap(Map map, CompositeData cdata, String fieldName) { Object tabularObject = cdata get(fieldName); if (tabularObject instanceof TabularData) { TabularData tabularData = (TabularData) tabularObject; Collection<CompositeData> values = (Collection<CompositeData>) tabularData values(); for (CompositeData compositeData values) { Object key = compositeData get( key ); Object value = compositeData get( value ); map put(key, value); } } } public static Map getMessageUserProperties(CompositeData cdata) { Map map = new HashMap(); appendTabularMap(map, cdata, CompositeDataConstants STRING PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants BOOLEAN PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants BYTE PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants SHORT PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants INT PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants LONG PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants FLOAT PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants DOUBLE PROPERTIES); return map; } }",1.0,
201,201,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ConnectionView.,ConnectionView,"public class ConnectionView implements ConnectionViewMBean { private final Connection connection; private final ManagementContext managementContext; private String userName; public ConnectionView(Connection connection) { this(connection, null); } public ConnectionView(Connection connection, ManagementContext managementContext) { this connection = connection; this managementContext = managementContext; } Override public void start() throws Exception { connection start(); } Override public void stop() throws Exception { connection stop(); } Override public boolean isSlow() { return connection isSlow(); } Override public boolean isBlocked() { return connection isBlocked(); } Override public boolean isConnected() { return connection isConnected(); } Override public boolean isActive() { return connection isActive(); } Override public int getDispatchQueueSize() { return connection getDispatchQueueSize(); } Override public void resetStatistics() { connection getStatistics() reset(); } Override public String getRemoteAddress() { return connection getRemoteAddress(); } Override public String getClientId() { return connection getConnectionId(); } public String getConnectionId() { return connection getConnectionId(); } Override public String getUserName() { return userName; } public void setUserName(String userName) { this userName = userName; } Override public ObjectName[] getConsumers() { ObjectName[] result = null; if (connection != null && managementContext != null) { try { ObjectName query = createConsumerQueury(connection getConnectionId()); Set<ObjectName> names = managementContext queryNames(query, null); result = names toArray(new ObjectName[0]); } catch (Exception e) { } } return result; } Override public ObjectName[] getProducers() { ObjectName[] result = null; if (connection != null && managementContext != null) { try { ObjectName query = createProducerQueury(connection getConnectionId()); Set<ObjectName> names = managementContext queryNames(query, null); result = names toArray(new ObjectName[0]); } catch (Exception e) { } } return result; } private ObjectName createConsumerQueury(String clientId) throws IOException { try { return BrokerMBeanSupport createConsumerQueury(managementContext getJmxDomainName(), clientId); } catch (Throwable e) { throw IOExceptionSupport create(e); } } private ObjectName createProducerQueury(String clientId) throws IOException { try { return BrokerMBeanSupport createProducerQueury(managementContext getJmxDomainName(), clientId); } catch (Throwable e) { throw IOExceptionSupport create(e); } } }",1.0,
202,202,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ConnectorView.,ConnectorView,public class ConnectorView implements ConnectorViewMBean { private final Connector connector; public ConnectorView(Connector connector) { this connector = connector; } public void start() throws Exception { connector start(); } public String getBrokerName() { return getBrokerInfo() getBrokerName(); } public void stop() throws Exception { connector stop(); } public String getBrokerURL() { return getBrokerInfo() getBrokerURL(); } public BrokerInfo getBrokerInfo() { return connector getBrokerInfo(); } public void resetStatistics() { connector getStatistics() reset(); } public void enableStatistics() { connector getStatistics() setEnabled(true); } public void disableStatistics() { connector getStatistics() setEnabled(false); } public boolean isStatisticsEnabled() { return connector getStatistics() isEnabled(); } public int connectionCount() { return connector connectionCount(); } },1.0,
203,203,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\DestinationView.,DestinationView,"public class DestinationView implements DestinationViewMBean { private static final Logger LOG = LoggerFactory getLogger(DestinationViewMBean class); protected final Destination destination; protected final ManagedRegionBroker broker; public DestinationView(ManagedRegionBroker broker, Destination destination) { this broker = broker; this destination = destination; } public void gc() { destination gc(); } Override public String getName() { return destination getName(); } Override public void resetStatistics() { destination getDestinationStatistics() reset(); } Override public long getEnqueueCount() { return destination getDestinationStatistics() getEnqueues() getCount(); } Override public long getDequeueCount() { return destination getDestinationStatistics() getDequeues() getCount(); } Override public long getDispatchCount() { return destination getDestinationStatistics() getDispatched() getCount(); } Override public long getInFlightCount() { return destination getDestinationStatistics() getInflight() getCount(); } Override public long getExpiredCount() { return destination getDestinationStatistics() getExpired() getCount(); } Override public long getConsumerCount() { return destination getDestinationStatistics() getConsumers() getCount(); } Override public long getQueueSize() { return destination getDestinationStatistics() getMessages() getCount(); } public long getMessagesCached() { return destination getDestinationStatistics() getMessagesCached() getCount(); } Override public int getMemoryPercentUsage() { return destination getMemoryUsage() getPercentUsage(); } Override public long getMemoryUsageByteCount() { return destination getMemoryUsage() getUsage(); } Override public long getMemoryLimit() { return destination getMemoryUsage() getLimit(); } Override public void setMemoryLimit(long limit) { destination getMemoryUsage() setLimit(limit); } Override public double getAverageEnqueueTime() { return destination getDestinationStatistics() getProcessTime() getAverageTime(); } Override public long getMaxEnqueueTime() { return destination getDestinationStatistics() getProcessTime() getMaxTime(); } Override public long getMinEnqueueTime() { return destination getDestinationStatistics() getProcessTime() getMinTime(); } Override public boolean isPrioritizedMessages() { return destination isPrioritizedMessages(); } Override public CompositeData[] browse() throws OpenDataException { try { return browse(null); } catch (InvalidSelectorException e) { throw new RuntimeException(e); } } Override public CompositeData[] browse(String selector) throws OpenDataException, InvalidSelectorException { Message[] messages = destination browse(); ArrayList<CompositeData> c = new ArrayList<CompositeData>(); MessageEvaluationContext ctx = new MessageEvaluationContext(); ctx setDestination(destination getActiveMQDestination()); BooleanExpression selectorExpression = selector == null null SelectorParser parse(selector); for (int i = 0; i < messages length; i++) { try { if (selectorExpression == null) { c add(OpenTypeSupport convert(messages[i])); } else { ctx setMessageReference(messages[i]); if (selectorExpression matches(ctx)) { c add(OpenTypeSupport convert(messages[i])); } } } catch (Throwable e) { System out println(e); e printStackTrace(); LOG warn( exception browsing destination , e); } } CompositeData rc[] = new CompositeData[c size()]; c toArray(rc); return rc; } Override public List<Object> browseMessages() throws InvalidSelectorException { return browseMessages(null); } Override public List<Object> browseMessages(String selector) throws InvalidSelectorException { Message[] messages = destination browse(); ArrayList<Object> answer = new ArrayList<Object>(); MessageEvaluationContext ctx = new MessageEvaluationContext(); ctx setDestination(destination getActiveMQDestination()); BooleanExpression selectorExpression = selector == null null SelectorParser parse(selector); for (int i = 0; i < messages length; i++) { try { Message message = messages[i]; message setReadOnlyBody(true); if (selectorExpression == null) { answer add(message); } else { ctx setMessageReference(message); if (selectorExpression matches(ctx)) { answer add(message); } } } catch (Throwable e) { LOG warn( exception browsing destination , e); } } return answer; } Override public TabularData browseAsTable() throws OpenDataException { try { return browseAsTable(null); } catch (InvalidSelectorException e) { throw new RuntimeException(e); } } Override public TabularData browseAsTable(String selector) throws OpenDataException, InvalidSelectorException { OpenTypeFactory factory = OpenTypeSupport getFactory(ActiveMQMessage class); Message[] messages = destination browse(); CompositeType ct = factory getCompositeType(); TabularType tt = new TabularType( MessageList , MessageList , ct, new String[] { JMSMessageID }); TabularDataSupport rc = new TabularDataSupport(tt); MessageEvaluationContext ctx = new MessageEvaluationContext(); ctx setDestination(destination getActiveMQDestination()); BooleanExpression selectorExpression = selector == null null SelectorParser parse(selector); for (int i = 0; i < messages length; i++) { try { if (selectorExpression == null) { rc put(new CompositeDataSupport(ct, factory getFields(messages[i]))); } else { ctx setMessageReference(messages[i]); if (selectorExpression matches(ctx)) { rc put(new CompositeDataSupport(ct, factory getFields(messages[i]))); } } } catch (Throwable e) { LOG warn( exception browsing destination , e); } } return rc; } Override public String sendTextMessage(String body) throws Exception { return sendTextMessage(Collections EMPTY MAP, body); } Override public String sendTextMessage(Map headers, String body) throws Exception { return sendTextMessage(headers, body, null, null); } Override public String sendTextMessage(String body, String user, String password) throws Exception { return sendTextMessage(Collections EMPTY MAP, body, user, password); } Override public String sendTextMessage(Map headers, String body, String userName, String password) throws Exception { String brokerUrl = vm ActiveMQDestination dest = destination getActiveMQDestination(); ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(brokerUrl); Connection connection = null; try { connection = cf createConnection(userName, password); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(dest); ActiveMQTextMessage msg = (ActiveMQTextMessage) session createTextMessage(body); for (Iterator iter = headers entrySet() iterator(); iter hasNext();) { Map Entry entry = (Map Entry) iter next(); msg setObjectProperty((String) entry getKey(), entry getValue()); } producer setDeliveryMode(msg getJMSDeliveryMode()); producer setPriority(msg getPriority()); long ttl = msg getExpiration() - System currentTimeMillis(); producer setTimeToLive(ttl > 0 ttl 0); producer send(msg); return msg getJMSMessageID(); } finally { connection close(); } } Override public int getMaxAuditDepth() { return destination getMaxAuditDepth(); } Override public int getMaxProducersToAudit() { return destination getMaxProducersToAudit(); } public boolean isEnableAudit() { return destination isEnableAudit(); } public void setEnableAudit(boolean enableAudit) { destination setEnableAudit(enableAudit); } Override public void setMaxAuditDepth(int maxAuditDepth) { destination setMaxAuditDepth(maxAuditDepth); } Override public void setMaxProducersToAudit(int maxProducersToAudit) { destination setMaxProducersToAudit(maxProducersToAudit); } Override public float getMemoryUsagePortion() { return destination getMemoryUsage() getUsagePortion(); } Override public long getProducerCount() { return destination getDestinationStatistics() getProducers() getCount(); } Override public boolean isProducerFlowControl() { return destination isProducerFlowControl(); } Override public void setMemoryUsagePortion(float value) { destination getMemoryUsage() setUsagePortion(value); } Override public void setProducerFlowControl(boolean producerFlowControl) { destination setProducerFlowControl(producerFlowControl); } Override public boolean isAlwaysRetroactive() { return destination isAlwaysRetroactive(); } Override public void setAlwaysRetroactive(boolean alwaysRetroactive) { destination setAlwaysRetroactive(alwaysRetroactive); } Override public void setBlockedProducerWarningInterval(long blockedProducerWarningInterval) { destination setBlockedProducerWarningInterval(blockedProducerWarningInterval); } Override public long getBlockedProducerWarningInterval() { return destination getBlockedProducerWarningInterval(); } Override public int getMaxPageSize() { return destination getMaxPageSize(); } Override public void setMaxPageSize(int pageSize) { destination setMaxPageSize(pageSize); } Override public boolean isUseCache() { return destination isUseCache(); } Override public void setUseCache(boolean value) { destination setUseCache(value); } Override public ObjectName[] getSubscriptions() throws IOException, MalformedObjectNameException { List<Subscription> subscriptions = destination getConsumers(); ObjectName[] answer = new ObjectName[subscriptions size()]; ObjectName brokerObjectName = broker getBrokerService() getBrokerObjectName(); int index = 0; for (Subscription subscription subscriptions) { String connectionClientId = subscription getContext() getClientId(); answer[index++] = BrokerMBeanSupport createSubscriptionName(brokerObjectName, connectionClientId, subscription getConsumerInfo()); } return answer; } Override public ObjectName getSlowConsumerStrategy() throws IOException, MalformedObjectNameException { ObjectName result = null; SlowConsumerStrategy strategy = destination getSlowConsumerStrategy(); if (strategy != null && strategy instanceof AbortSlowConsumerStrategy) { result = broker registerSlowConsumerStrategy((AbortSlowConsumerStrategy)strategy); } return result; } Override public String getOptions() { Map<String, String> options = destination getActiveMQDestination() getOptions(); String optionsString = ; try { if (options != null) { optionsString = URISupport createQueryString(options); } } catch (URISyntaxException ignored) {} return optionsString; } }",1.0,
204,204,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\DurableSubscriptionView.,DurableSubscriptionView,"public class DurableSubscriptionView extends SubscriptionView implements DurableSubscriptionViewMBean { protected ManagedRegionBroker broker; protected String subscriptionName; protected DurableTopicSubscription durableSub; public DurableSubscriptionView(ManagedRegionBroker broker, String clientId, String userName, Subscription sub) { super(clientId, userName, sub); this broker = broker; this durableSub=(DurableTopicSubscription) sub; if (sub != null) { this subscriptionName = sub getConsumerInfo() getSubscriptionName(); } } public String getSubscriptionName() { return subscriptionName; } public CompositeData[] browse() throws OpenDataException { return broker browse(this); } public TabularData browseAsTable() throws OpenDataException { return broker browseAsTable(this); } public void destroy() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); info setClientId(clientId); info setSubscriptionName(subscriptionName); ConnectionContext context = new ConnectionContext(); context setBroker(broker); context setClientId(clientId); broker removeSubscription(context, info); } public String toString() { return ActiveDurableSubscriptionView + getClientId() + + getSubscriptionName(); } public int cursorSize() { if (durableSub != null && durableSub getPending() != null) { return durableSub getPending() size(); } return 0; } public boolean doesCursorHaveMessagesBuffered() { if (durableSub != null && durableSub getPending() != null) { return durableSub getPending() hasMessagesBufferedToDeliver(); } return false; } public boolean doesCursorHaveSpace() { if (durableSub != null && durableSub getPending() != null) { return durableSub getPending() hasSpace(); } return false; } public long getCursorMemoryUsage() { if (durableSub != null && durableSub getPending() != null && durableSub getPending() getSystemUsage()!=null) { return durableSub getPending() getSystemUsage() getMemoryUsage() getUsage(); } return 0; } public int getCursorPercentUsage() { if (durableSub != null && durableSub getPending() != null && durableSub getPending() getSystemUsage()!=null) { return durableSub getPending() getSystemUsage() getMemoryUsage() getPercentUsage(); } return 0; } public boolean isCursorFull() { if (durableSub != null && durableSub getPending() != null) { return durableSub getPending() isFull(); } return false; } Override public boolean isActive() { return durableSub isActive(); } }",1.0,
205,205,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\HealthStatus.,HealthStatus,"public class HealthStatus implements Serializable { private final String healthId; private final String level; private final String message; private final String resource; public HealthStatus(String healthId, String level, String message, String resource) { this healthId = healthId; this level = level; this message = message; this resource = resource; } public String getHealthId() { return healthId; } public String getLevel() { return level; } public String getMessage() { return message; } public String getResource() { return resource; } public String toString(){ return healthId + + level + + message + from + resource; } }",1.0,
208,208,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\JmsConnectorView.,JmsConnectorView,public class JmsConnectorView implements JmsConnectorViewMBean { private final JmsConnector connector; public JmsConnectorView(JmsConnector connector) { this connector = connector; } public void start() throws Exception { connector start(); } public void stop() throws Exception { connector stop(); } },1.0,
209,209,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\JobSchedulerView.,JobSchedulerView,"public class JobSchedulerView implements JobSchedulerViewMBean { private final JobScheduler jobScheduler; public JobSchedulerView(JobScheduler jobScheduler) { this jobScheduler = jobScheduler; } public TabularData getAllJobs() throws Exception { OpenTypeFactory factory = OpenTypeSupport getFactory(Job class); CompositeType ct = factory getCompositeType(); TabularType tt = new TabularType( Scheduled Jobs , Scheduled Jobs , ct, new String[] { jobId }); TabularDataSupport rc = new TabularDataSupport(tt); List<Job> jobs = this jobScheduler getAllJobs(); for (Job job jobs) { rc put(new CompositeDataSupport(ct, factory getFields(job))); } return rc; } public TabularData getAllJobs(String startTime, String finishTime) throws Exception { OpenTypeFactory factory = OpenTypeSupport getFactory(Job class); CompositeType ct = factory getCompositeType(); TabularType tt = new TabularType( Scheduled Jobs , Scheduled Jobs , ct, new String[] { jobId }); TabularDataSupport rc = new TabularDataSupport(tt); long start = JobSupport getDataTime(startTime); long finish = JobSupport getDataTime(finishTime); List<Job> jobs = this jobScheduler getAllJobs(start, finish); for (Job job jobs) { rc put(new CompositeDataSupport(ct, factory getFields(job))); } return rc; } public TabularData getNextScheduleJobs() throws Exception { OpenTypeFactory factory = OpenTypeSupport getFactory(Job class); CompositeType ct = factory getCompositeType(); TabularType tt = new TabularType( Scheduled Jobs , Scheduled Jobs , ct, new String[] { jobId }); TabularDataSupport rc = new TabularDataSupport(tt); List<Job> jobs = this jobScheduler getNextScheduleJobs(); for (Job job jobs) { rc put(new CompositeDataSupport(ct, factory getFields(job))); } return rc; } public String getNextScheduleTime() throws Exception { long time = this jobScheduler getNextScheduleTime(); return JobSupport getDateTime(time); } public void removeAllJobs() throws Exception { this jobScheduler removeAllJobs(); } public void removeAllJobs(String startTime, String finishTime) throws Exception { long start = JobSupport getDataTime(startTime); long finish = JobSupport getDataTime(finishTime); this jobScheduler removeAllJobs(start, finish); } public void removeJob(String jobId) throws Exception { this jobScheduler remove(jobId); } public void removeJobAtScheduledTime(String time) throws IOException { } }",1.0,
210,210,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ManagedQueueRegion.,ManagedQueueRegion,"public class ManagedQueueRegion extends QueueRegion { private final ManagedRegionBroker regionBroker; public ManagedQueueRegion(ManagedRegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) { super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory); regionBroker = broker; } protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException { Subscription sub = super createSubscription(context, info); ObjectName name = regionBroker registerSubscription(context, sub); sub setObjectName(name); return sub; } protected void destroySubscription(Subscription sub) { regionBroker unregisterSubscription(sub); super destroySubscription(sub); } protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception { Destination rc = super createDestination(context, destination); regionBroker register(destination, rc); return rc; } public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception { super removeDestination(context, destination, timeout); regionBroker unregister(destination); } }",1.0,
212,212,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ManagedTempQueueRegion.,ManagedTempQueueRegion,"public class ManagedTempQueueRegion extends TempQueueRegion { private final ManagedRegionBroker regionBroker; public ManagedTempQueueRegion(ManagedRegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) { super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory); this regionBroker = broker; } protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException { Subscription sub = super createSubscription(context, info); ObjectName name = regionBroker registerSubscription(context, sub); sub setObjectName(name); return sub; } protected void destroySubscription(Subscription sub) { regionBroker unregisterSubscription(sub); super destroySubscription(sub); } protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception { Destination rc = super createDestination(context, destination); regionBroker register(destination, rc); return rc; } public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception { super removeDestination(context, destination, timeout); regionBroker unregister(destination); } }",1.0,
213,213,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ManagedTempTopicRegion.,ManagedTempTopicRegion,"public class ManagedTempTopicRegion extends TempTopicRegion { private final ManagedRegionBroker regionBroker; public ManagedTempTopicRegion(ManagedRegionBroker regionBroker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) { super(regionBroker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory); this regionBroker = regionBroker; } protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException { Subscription sub = super createSubscription(context, info); ObjectName name = regionBroker registerSubscription(context, sub); sub setObjectName(name); return sub; } protected void destroySubscription(Subscription sub) { regionBroker unregisterSubscription(sub); super destroySubscription(sub); } protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception { Destination rc = super createDestination(context, destination); regionBroker register(destination, rc); return rc; } public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception { super removeDestination(context, destination, timeout); regionBroker unregister(destination); } }",1.0,
214,214,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ManagedTopicRegion.,ManagedTopicRegion,"public class ManagedTopicRegion extends TopicRegion { private final ManagedRegionBroker regionBroker; public ManagedTopicRegion(ManagedRegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) { super(broker, destinationStatistics, memoryManager, taskRunnerFactory, destinationFactory); regionBroker = broker; } protected Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws JMSException { Subscription sub = super createSubscription(context, info); ObjectName name = regionBroker registerSubscription(context, sub); sub setObjectName(name); return sub; } protected void destroySubscription(Subscription sub) { regionBroker unregisterSubscription(sub); super destroySubscription(sub); } protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception { Destination rc = super createDestination(context, destination); regionBroker register(destination, rc); return rc; } public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception { super removeDestination(context, destination, timeout); regionBroker unregister(destination); } }",1.0,
215,215,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ManagedTransportConnection.,ManagedTransportConnection,"public class ManagedTransportConnection extends TransportConnection { private static final Logger LOG = LoggerFactory getLogger(ManagedTransportConnection class); private final ManagementContext managementContext; private final ObjectName connectorName; private final ConnectionViewMBean mbean; private ObjectName byClientIdName; private ObjectName byAddressName; private final boolean populateUserName; public ManagedTransportConnection(TransportConnector connector, Transport transport, Broker broker, TaskRunnerFactory factory, TaskRunnerFactory stopFactory, ManagementContext context, ObjectName connectorName) throws IOException { super(connector, transport, broker, factory, stopFactory); this managementContext = context; this connectorName = connectorName; this mbean = new ConnectionView(this, managementContext); this populateUserName = broker getBrokerService() isPopulateUserNameInMBeans(); if (managementContext isAllowRemoteAddressInMBeanNames()) { byAddressName = createObjectName( remoteAddress , transport getRemoteAddress()); registerMBean(byAddressName); } } Override public void stopAsync() { if (!isStopping()) { synchronized (this) { unregisterMBean(byClientIdName); unregisterMBean(byAddressName); byClientIdName = null; byAddressName = null; } } super stopAsync(); } Override public Response processAddConnection(ConnectionInfo info) throws Exception { Response answer = super processAddConnection(info); String clientId = info getClientId(); if (populateUserName) { ((ConnectionView) mbean) setUserName(info getUserName()); } if (clientId != null) { if (byClientIdName == null) { byClientIdName = createObjectName( clientId , clientId); registerMBean(byClientIdName); } } return answer; } protected void registerMBean(ObjectName name) { if (name != null) { try { AnnotatedMBean registerMBean(managementContext, mbean, name); } catch (Throwable e) { LOG warn( Failed to register MBean + name); LOG debug( Failure reason + e, e); } } } protected void unregisterMBean(ObjectName name) { if (name != null) { try { managementContext unregisterMBean(name); } catch (Throwable e) { LOG warn( Failed to unregister mbean + name); LOG debug( Failure reason + e, e); } } } protected ObjectName createObjectName(String type, String value) throws IOException { try { return BrokerMBeanSupport createConnectionViewByType(connectorName, type, value); } catch (Throwable e) { throw IOExceptionSupport create(e); } } }",1.0,
216,216,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ManagedTransportConnector.,ManagedTransportConnector,"public class ManagedTransportConnector extends TransportConnector { static long nextConnectionId = 1; private final ManagementContext managementContext; private final ObjectName connectorName; public ManagedTransportConnector(ManagementContext context, ObjectName connectorName, TransportServer server) { super(server); this managementContext = context; this connectorName = connectorName; } public ManagedTransportConnector asManagedConnector(MBeanServer mbeanServer, ObjectName connectorName) throws IOException, URISyntaxException { return this; } protected Connection createConnection(Transport transport) throws IOException { return new ManagedTransportConnection(this, transport, getBroker(), isDisableAsyncDispatch() null getTaskRunnerFactory(), getBrokerService() getTaskRunnerFactory(), managementContext, connectorName); } protected static synchronized long getNextConnectionId() { return nextConnectionId++; } }",1.0,
218,218,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\NetworkBridgeView.,NetworkBridgeView,public class NetworkBridgeView implements NetworkBridgeViewMBean { private final NetworkBridge bridge; private boolean createByDuplex = false; public NetworkBridgeView(NetworkBridge bridge) { this bridge = bridge; } public void start() throws Exception { bridge start(); } public void stop() throws Exception { bridge stop(); } public String getLocalAddress() { return bridge getLocalAddress(); } public String getRemoteAddress() { return bridge getRemoteAddress(); } public String getRemoteBrokerName() { return bridge getRemoteBrokerName(); } public String getLocalBrokerName() { return bridge getLocalBrokerName(); } public long getEnqueueCounter() { return bridge getEnqueueCounter(); } public long getDequeueCounter() { return bridge getDequeueCounter(); } public boolean isCreatedByDuplex() { return createByDuplex; } public void setCreateByDuplex(boolean createByDuplex) { this createByDuplex = createByDuplex; } },1.0,
219,219,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\NetworkConnectorView.,NetworkConnectorView,"public class NetworkConnectorView implements NetworkConnectorViewMBean { private final NetworkConnector connector; public NetworkConnectorView(NetworkConnector connector) { this connector = connector; } public void start() throws Exception { connector start(); } public void stop() throws Exception { connector stop(); } public String getName() { return connector getName(); } public int getNetworkTTL() { return connector getNetworkTTL(); } public int getPrefetchSize() { return connector getPrefetchSize(); } public String getUserName() { return connector getUserName(); } public boolean isBridgeTempDestinations() { return connector isBridgeTempDestinations(); } public boolean isConduitSubscriptions() { return connector isConduitSubscriptions(); } public boolean isDecreaseNetworkConsumerPriority() { return connector isDecreaseNetworkConsumerPriority(); } public boolean isDispatchAsync() { return connector isDispatchAsync(); } public boolean isDynamicOnly() { return connector isDynamicOnly(); } public boolean isDuplex() { return connector isDuplex(); } public boolean isSuppressDuplicateQueueSubscriptions() { return connector isSuppressDuplicateQueueSubscriptions(); } public boolean isSuppressDuplicateTopicSubscriptions() { return connector isSuppressDuplicateTopicSubscriptions(); } public void setBridgeTempDestinations(boolean bridgeTempDestinations) { connector setBridgeTempDestinations(bridgeTempDestinations); } public void setConduitSubscriptions(boolean conduitSubscriptions) { connector setConduitSubscriptions(conduitSubscriptions); } public void setDispatchAsync(boolean dispatchAsync) { connector setDispatchAsync(dispatchAsync); } public void setDynamicOnly(boolean dynamicOnly) { connector setDynamicOnly(dynamicOnly); } public void setNetworkTTL(int networkTTL) { connector setNetworkTTL(networkTTL); } public void setPassword(String password) { connector setPassword(password); } public void setPrefetchSize(int prefetchSize) { connector setPrefetchSize(prefetchSize); } public void setUserName(String userName) { connector setUserName(userName); } public String getPassword() { String pw = connector getPassword(); if (pw != null) { pw = pw replaceAll( , * ); } return pw; } public void setDecreaseNetworkConsumerPriority(boolean decreaseNetworkConsumerPriority) { connector setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority); } public void setSuppressDuplicateQueueSubscriptions(boolean val) { connector setSuppressDuplicateQueueSubscriptions(val); } public void setSuppressDuplicateTopicSubscriptions(boolean val) { connector setSuppressDuplicateTopicSubscriptions(val); } }",1.0,
221,221,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,AbstractOpenTypeFactory,"abstract static class AbstractOpenTypeFactory implements OpenTypeFactory { private CompositeType compositeType; private final List<String> itemNamesList = new ArrayList<String>(); private final List<String> itemDescriptionsList = new ArrayList<String>(); private final List<OpenType> itemTypesList = new ArrayList<OpenType>(); public CompositeType getCompositeType() throws OpenDataException { if (compositeType == null) { init(); compositeType = createCompositeType(); } return compositeType; } protected void init() throws OpenDataException { } protected CompositeType createCompositeType() throws OpenDataException { String[] itemNames = itemNamesList toArray(new String[itemNamesList size()]); String[] itemDescriptions = itemDescriptionsList toArray(new String[itemDescriptionsList size()]); OpenType[] itemTypes = itemTypesList toArray(new OpenType[itemTypesList size()]); return new CompositeType(getTypeName(), getDescription(), itemNames, itemDescriptions, itemTypes); } protected abstract String getTypeName(); protected void addItem(String name, String description, OpenType type) { itemNamesList add(name); itemDescriptionsList add(description); itemTypesList add(type); } protected String getDescription() { return getTypeName(); } public Map<String, Object> getFields(Object o) throws OpenDataException { Map<String, Object> rc = new HashMap<String, Object>(); return rc; } }",1.0,
223,223,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,ByteMessageOpenTypeFactory,"static class ByteMessageOpenTypeFactory extends MessageOpenTypeFactory { Override protected String getTypeName() { return ActiveMQBytesMessage class getName(); } Override protected void init() throws OpenDataException { super init(); addItem(CompositeDataConstants BODY LENGTH, Body length , SimpleType LONG); addItem(CompositeDataConstants BODY PREVIEW, Body preview , new ArrayType(1, SimpleType BYTE)); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { ActiveMQBytesMessage m = (ActiveMQBytesMessage)o; m setReadOnlyBody(true); Map<String, Object> rc = super getFields(o); long length = 0; try { length = m getBodyLength(); rc put(CompositeDataConstants BODY LENGTH, Long valueOf(length)); } catch (JMSException e) { rc put(CompositeDataConstants BODY LENGTH, Long valueOf(0)); } try { byte preview[] = new byte[(int)Math min(length, 255)]; m readBytes(preview); m reset(); Byte data[] = new Byte[preview length]; for (int i = 0; i < data length; i++) { data[i] = new Byte(preview[i]); } rc put(CompositeDataConstants BODY PREVIEW, data); } catch (JMSException e) { rc put(CompositeDataConstants BODY PREVIEW, new Byte[] {}); } return rc; } }",1.0,
224,224,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,MapMessageOpenTypeFactory,"static class MapMessageOpenTypeFactory extends MessageOpenTypeFactory { Override protected String getTypeName() { return ActiveMQMapMessage class getName(); } Override protected void init() throws OpenDataException { super init(); addItem(CompositeDataConstants CONTENT MAP, Content map , SimpleType STRING); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { ActiveMQMapMessage m = (ActiveMQMapMessage)o; Map<String, Object> rc = super getFields(o); try { rc put(CompositeDataConstants CONTENT MAP, + m getContentMap()); } catch (JMSException e) { rc put(CompositeDataConstants CONTENT MAP, ); } return rc; } }",1.0,
225,225,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,ObjectMessageOpenTypeFactory,"static class ObjectMessageOpenTypeFactory extends MessageOpenTypeFactory { Override protected String getTypeName() { return ActiveMQObjectMessage class getName(); } Override protected void init() throws OpenDataException { super init(); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { Map<String, Object> rc = super getFields(o); return rc; } }",1.0,
226,226,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,StreamMessageOpenTypeFactory,"static class StreamMessageOpenTypeFactory extends MessageOpenTypeFactory { Override protected String getTypeName() { return ActiveMQStreamMessage class getName(); } Override protected void init() throws OpenDataException { super init(); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { Map<String, Object> rc = super getFields(o); return rc; } }",1.0,
227,227,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,TextMessageOpenTypeFactory,"static class TextMessageOpenTypeFactory extends MessageOpenTypeFactory { Override protected String getTypeName() { return ActiveMQTextMessage class getName(); } Override protected void init() throws OpenDataException { super init(); addItem(CompositeDataConstants MESSAGE TEXT, CompositeDataConstants MESSAGE TEXT, SimpleType STRING); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { ActiveMQTextMessage m = (ActiveMQTextMessage)o; Map<String, Object> rc = super getFields(o); try { rc put(CompositeDataConstants MESSAGE TEXT, + m getText()); } catch (JMSException e) { rc put(CompositeDataConstants MESSAGE TEXT, ); } return rc; } }",1.0,
228,228,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,JobOpenTypeFactory,"static class JobOpenTypeFactory extends AbstractOpenTypeFactory { Override protected String getTypeName() { return Job class getName(); } Override protected void init() throws OpenDataException { super init(); addItem( jobId , jobId , SimpleType STRING); addItem( cronEntry , Cron entry , SimpleType STRING); addItem( start , start time , SimpleType STRING); addItem( delay , initial delay , SimpleType LONG); addItem( next , next time , SimpleType STRING); addItem( period , period between jobs , SimpleType LONG); addItem( repeat , number of times to repeat , SimpleType INTEGER); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { Job job = (Job) o; Map<String, Object> rc = super getFields(o); rc put( jobId , job getJobId()); rc put( cronEntry , + job getCronEntry()); rc put( start , job getStartTime()); rc put( delay , job getDelay()); rc put( next , job getNextExecutionTime()); rc put( period , job getPeriod()); rc put( repeat , job getRepeat()); return rc; } }",1.0,
229,229,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,ActiveMQBlobMessageOpenTypeFactory,"static class ActiveMQBlobMessageOpenTypeFactory extends MessageOpenTypeFactory { Override protected String getTypeName() { return ActiveMQBlobMessage class getName(); } Override protected void init() throws OpenDataException { super init(); addItem(CompositeDataConstants MESSAGE URL, Body Url , SimpleType STRING); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { ActiveMQBlobMessage m = (ActiveMQBlobMessage)o; Map<String, Object> rc = super getFields(o); try { rc put(CompositeDataConstants MESSAGE URL, + m getURL() toString()); } catch (JMSException e) { rc put(CompositeDataConstants MESSAGE URL, ); } return rc; } }",1.0,
230,230,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,SlowConsumerEntryOpenTypeFactory,"static class SlowConsumerEntryOpenTypeFactory extends AbstractOpenTypeFactory { Override protected String getTypeName() { return SlowConsumerEntry class getName(); } Override protected void init() throws OpenDataException { super init(); addItem( subscription , the subscription view , SimpleType OBJECTNAME); addItem( slowCount , number of times deemed slow , SimpleType INTEGER); addItem( markCount , number of periods remaining slow , SimpleType INTEGER); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { SlowConsumerEntry entry = (SlowConsumerEntry) o; Map<String, Object> rc = super getFields(o); rc put( subscription , entry getSubscription()); rc put( slowCount , Integer valueOf(entry getSlowCount())); rc put( markCount , Integer valueOf(entry getMarkCount())); return rc; } }",1.0,
231,231,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\OpenTypeSupport.,HealthStatusOpenTypeFactory,"static class HealthStatusOpenTypeFactory extends AbstractOpenTypeFactory { Override protected String getTypeName() { return HealthStatus class getName(); } Override protected void init() throws OpenDataException { super init(); addItem( healthId , health check id , SimpleType STRING); addItem( level , severity , SimpleType STRING); addItem( message , severity , SimpleType STRING); addItem( resource , event resource , SimpleType STRING); } Override public Map<String, Object> getFields(Object o) throws OpenDataException { HealthStatus event = (HealthStatus) o; Map<String, Object> rc = super getFields(o); rc put( healthId , event getHealthId()); rc put( level , event getLevel()); rc put( message , event getMessage()); rc put( resource , event getResource()); return rc; } } static {",1.0,
232,232,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\PersistenceAdapterView.,PersistenceAdapterView,public class PersistenceAdapterView implements PersistenceAdapterViewMBean { private final String name; private final PersistenceAdapter persistenceAdapter; private Callable<String> inflightTransactionViewCallable; private Callable<String> dataViewCallable; public PersistenceAdapterView(PersistenceAdapter adapter) { this name = adapter toString(); this persistenceAdapter = adapter; } Override public String getName() { return name; } Override public String getTransactions() { return invoke(inflightTransactionViewCallable); } Override public String getData() { return invoke(dataViewCallable); } Override public long getSize() { return persistenceAdapter size(); } private String invoke(Callable<String> callable) { String result = null; if (callable != null) { try { result = callable call(); } catch (Exception e) { result = e toString(); } } return result; } public void setDataViewCallable(Callable<String> dataViewCallable) { this dataViewCallable = dataViewCallable; } public void setInflightTransactionViewCallable(Callable<String> inflightTransactionViewCallable) { this inflightTransactionViewCallable = inflightTransactionViewCallable; } },1.0,
234,234,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\ProxyConnectorView.,ProxyConnectorView,public class ProxyConnectorView implements ProxyConnectorViewMBean { private final ProxyConnector connector; public ProxyConnectorView(ProxyConnector connector) { this connector = connector; } public void start() throws Exception { connector start(); } public void stop() throws Exception { connector stop(); } },1.0,
236,236,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\RecoveredXATransactionView.,RecoveredXATransactionView,"public class RecoveredXATransactionView implements RecoveredXATransactionViewMBean { private final XATransaction transaction; public RecoveredXATransactionView(final ManagedRegionBroker managedRegionBroker, final XATransaction transaction) { this transaction = transaction; transaction addSynchronization(new Synchronization() { Override public void afterCommit() throws Exception { managedRegionBroker unregister(transaction); } Override public void afterRollback() throws Exception { managedRegionBroker unregister(transaction); } }); } Override public int getFormatId() { return transaction getXid() getFormatId(); } Override public byte[] getBranchQualifier() { return transaction getXid() getBranchQualifier(); } Override public byte[] getGlobalTransactionId() { return transaction getXid() getGlobalTransactionId(); } Override public void heuristicCommit() throws Exception { transaction commit(false); } Override public void heuristicRollback() throws Exception { transaction rollback(); } }",1.0,
238,238,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\TopicSubscriptionView.,TopicSubscriptionView,"public class TopicSubscriptionView extends SubscriptionView implements TopicSubscriptionViewMBean { public TopicSubscriptionView(String clientId, String userName, TopicSubscription subs) { super(clientId, userName, subs); } protected TopicSubscription getTopicSubscription() { return (TopicSubscription)subscription; } public int getDiscardedCount() { TopicSubscription topicSubscription = getTopicSubscription(); return topicSubscription != null topicSubscription discarded() 0; } public int getMaximumPendingQueueSize() { TopicSubscription topicSubscription = getTopicSubscription(); return topicSubscription != null topicSubscription getMaximumPendingMessages() 0; } public void setMaximumPendingQueueSize(int max) { TopicSubscription topicSubscription = getTopicSubscription(); if (topicSubscription != null) { topicSubscription setMaximumPendingMessages(max); } } Override public boolean isActive() { if (subscription instanceof DurableTopicSubscription) { return ((DurableTopicSubscription)subscription) isActive(); } else { return super isActive(); } } }",1.0,
239,239,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\TopicView.,TopicView,"public class TopicView extends DestinationView implements TopicViewMBean { public TopicView(ManagedRegionBroker broker, Topic destination) { super(broker, destination); } }",1.0,
240,240,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\AbstractRegion.,AbstractRegion,"public abstract class AbstractRegion implements Region { private static final Logger LOG = LoggerFactory getLogger(AbstractRegion class); protected final Map<ActiveMQDestination, Destination> destinations = new ConcurrentHashMap<ActiveMQDestination, Destination>(); protected final DestinationMap destinationMap = new DestinationMap(); protected final Map<ConsumerId, Subscription> subscriptions = new ConcurrentHashMap<ConsumerId, Subscription>(); protected final SystemUsage usageManager; protected final DestinationFactory destinationFactory; protected final DestinationStatistics destinationStatistics; protected final RegionBroker broker; protected boolean autoCreateDestinations = true; protected final TaskRunnerFactory taskRunnerFactory; protected final ReentrantReadWriteLock destinationsLock = new ReentrantReadWriteLock(); protected final Map<ConsumerId, Object> consumerChangeMutexMap = new HashMap<ConsumerId, Object>(); protected boolean started; public AbstractRegion(RegionBroker broker, DestinationStatistics destinationStatistics, SystemUsage memoryManager, TaskRunnerFactory taskRunnerFactory, DestinationFactory destinationFactory) { if (broker == null) { throw new IllegalArgumentException( null broker ); } this broker = broker; this destinationStatistics = destinationStatistics; this usageManager = memoryManager; this taskRunnerFactory = taskRunnerFactory; if (destinationFactory == null) { throw new IllegalArgumentException( null destinationFactory ); } this destinationFactory = destinationFactory; } public final void start() throws Exception { started = true; Set<ActiveMQDestination> inactiveDests = getInactiveDestinations(); for (Iterator<ActiveMQDestination> iter = inactiveDests iterator(); iter hasNext();) { ActiveMQDestination dest = iter next(); ConnectionContext context = new ConnectionContext(); context setBroker(broker getBrokerService() getBroker()); context setSecurityContext(SecurityContext BROKER SECURITY CONTEXT); context getBroker() addDestination(context, dest, false); } destinationsLock readLock() lock(); try{ for (Iterator<Destination> i = destinations values() iterator(); i hasNext();) { Destination dest = i next(); dest start(); } } finally { destinationsLock readLock() unlock(); } } public void stop() throws Exception { started = false; destinationsLock readLock() lock(); try{ for (Iterator<Destination> i = destinations values() iterator(); i hasNext();) { Destination dest = i next(); dest stop(); } } finally { destinationsLock readLock() unlock(); } destinations clear(); } public Destination addDestination(ConnectionContext context, ActiveMQDestination destination, boolean createIfTemporary) throws Exception { destinationsLock writeLock() lock(); try { Destination dest = destinations get(destination); if (dest == null) { if (destination isTemporary() == false || createIfTemporary) { if (LOG isDebugEnabled()) { LOG debug(broker getBrokerName() + adding destination + destination); } dest = createDestination(context, destination); DestinationInterceptor destinationInterceptor = broker getDestinationInterceptor(); if (destinationInterceptor != null) { dest = destinationInterceptor intercept(dest); } dest start(); destinations put(destination, dest); destinationMap put(destination, dest); addSubscriptionsForDestination(context, dest); } if (dest == null) { throw new DestinationDoesNotExistException(destination getQualifiedName()); } } return dest; } finally { destinationsLock writeLock() unlock(); } } public Map<ConsumerId, Subscription> getSubscriptions() { return subscriptions; } protected List<Subscription> addSubscriptionsForDestination(ConnectionContext context, Destination dest) throws Exception { List<Subscription> rc = new ArrayList<Subscription>(); for (Iterator<Subscription> iter = subscriptions values() iterator(); iter hasNext();) { Subscription sub = iter next(); if (sub matches(dest getActiveMQDestination())) { dest addSubscription(context, sub); rc add(sub); } } return rc; } public void removeDestination(ConnectionContext context, ActiveMQDestination destination, long timeout) throws Exception { if (timeout == 0) { for (Iterator<Subscription> iter = subscriptions values() iterator(); iter hasNext();) { Subscription sub = iter next(); if (sub matches(destination)) { throw new JMSException( Destination still has an active subscription + destination); } } } if (timeout > 0) { } if (LOG isDebugEnabled()) { LOG debug(broker getBrokerName() + removing destination + destination); } destinationsLock writeLock() lock(); try { Destination dest = destinations remove(destination); if (dest != null) { for (Iterator<Subscription> iter = subscriptions values() iterator(); iter hasNext();) { Subscription sub = iter next(); if (sub matches(destination)) { dest removeSubscription(context, sub, 0l); } } destinationMap removeAll(destination); dispose(context, dest); DestinationInterceptor destinationInterceptor = broker getDestinationInterceptor(); if (destinationInterceptor != null) { destinationInterceptor remove(dest); } } else { if (LOG isDebugEnabled()) { LOG debug( Cannot remove a destination that doesn t exist + destination); } } } finally { destinationsLock writeLock() unlock(); } } SuppressWarnings( unchecked ) public Set<Destination> getDestinations(ActiveMQDestination destination) { destinationsLock readLock() lock(); try{ return destinationMap get(destination); } finally { destinationsLock readLock() unlock(); } } public Map<ActiveMQDestination, Destination> getDestinationMap() { destinationsLock readLock() lock(); try{ return destinations; } finally { destinationsLock readLock() unlock(); } } SuppressWarnings( unchecked ) public Subscription addConsumer(ConnectionContext context, ConsumerInfo info) throws Exception { if (LOG isDebugEnabled()) { LOG debug(broker getBrokerName() + adding consumer + info getConsumerId() + for destination + info getDestination()); } ActiveMQDestination destination = info getDestination(); if (destination != null && !destination isPattern() && !destination isComposite()) { lookup(context, destination,true); } Object addGuard; synchronized (consumerChangeMutexMap) { addGuard = consumerChangeMutexMap get(info getConsumerId()); if (addGuard == null) { addGuard = new Object(); consumerChangeMutexMap put(info getConsumerId(), addGuard); } } synchronized (addGuard) { Subscription o = subscriptions get(info getConsumerId()); if (o != null) { LOG warn( A duplicate subscription was detected Clients may be misbehaving Later warnings you may see about subscription removal are a consequence of this ); return o; } DestinationFilter parseFilter(info getDestination()); Subscription sub = createSubscription(context, info); subscriptions put(info getConsumerId(), sub); List<Destination> addList = new ArrayList<Destination>(); destinationsLock readLock() lock(); try { for (Destination dest (Set<Destination>) destinationMap get(info getDestination())) { addList add(dest); } } finally { destinationsLock readLock() unlock(); } for (Destination dest addList) { dest addSubscription(context, sub); } if (info isBrowser()) { ((QueueBrowserSubscription) sub) destinationsAdded(); } return sub; } } SuppressWarnings( rawtypes ) public Set getDurableDestinations() { return destinationFactory getDestinations(); } protected Set<ActiveMQDestination> getInactiveDestinations() { Set<ActiveMQDestination> inactiveDests = destinationFactory getDestinations(); destinationsLock readLock() lock(); try { inactiveDests removeAll(destinations keySet()); } finally { destinationsLock readLock() unlock(); } return inactiveDests; } SuppressWarnings( unchecked ) public void removeConsumer(ConnectionContext context, ConsumerInfo info) throws Exception { if (LOG isDebugEnabled()) { LOG debug(broker getBrokerName() + removing consumer + info getConsumerId() + for destination + info getDestination()); } Subscription sub = subscriptions remove(info getConsumerId()); if (sub != null) { List<Destination> removeList = new ArrayList<Destination>(); destinationsLock readLock() lock(); try { for (Destination dest (Set<Destination>) destinationMap get(info getDestination())) { removeList add(dest); } } finally { destinationsLock readLock() unlock(); } for (Destination dest removeList) { dest removeSubscription(context, sub, info getLastDeliveredSequenceId()); } destroySubscription(sub); } synchronized (consumerChangeMutexMap) { consumerChangeMutexMap remove(info getConsumerId()); } } protected void destroySubscription(Subscription sub) { sub destroy(); } public void removeSubscription(ConnectionContext context, RemoveSubscriptionInfo info) throws Exception { throw new JMSException( Invalid operation ); } public void send(final ProducerBrokerExchange producerExchange, Message messageSend) throws Exception { final ConnectionContext context = producerExchange getConnectionContext(); if (producerExchange isMutable() || producerExchange getRegionDestination() == null) { final Destination regionDestination = lookup(context, messageSend getDestination(),false); producerExchange setRegionDestination(regionDestination); } producerExchange getRegionDestination() send(producerExchange, messageSend); } public void acknowledge(ConsumerBrokerExchange consumerExchange, MessageAck ack) throws Exception { Subscription sub = consumerExchange getSubscription(); if (sub == null) { sub = subscriptions get(ack getConsumerId()); if (sub == null) { if (!consumerExchange getConnectionContext() isInRecoveryMode()) { LOG warn( Ack for non existent subscription, ack + ack); throw new IllegalArgumentException( The subscription does not exist + ack getConsumerId()); } else { if (LOG isDebugEnabled()) { LOG debug( Ack for non existent subscription in recovery, ack + ack); } return; } } consumerExchange setSubscription(sub); } sub acknowledge(consumerExchange getConnectionContext(), ack); } public Response messagePull(ConnectionContext context, MessagePull pull) throws Exception { Subscription sub = subscriptions get(pull getConsumerId()); if (sub == null) { throw new IllegalArgumentException( The subscription does not exist + pull getConsumerId()); } return sub pullMessage(context, pull); } protected Destination lookup(ConnectionContext context, ActiveMQDestination destination,boolean createTemporary) throws Exception { Destination dest = null; destinationsLock readLock() lock(); try { dest = destinations get(destination); } finally { destinationsLock readLock() unlock(); } if (dest == null) { if (isAutoCreateDestinations()) { context getBroker() addDestination(context, destination, createTemporary); dest = addDestination(context, destination, false); destinationsLock readLock() lock(); try { dest = destinations get(destination); } finally { destinationsLock readLock() unlock(); } } if (dest == null) { throw new JMSException( The destination + destination + does not exist ); } } return dest; } public void processDispatchNotification(MessageDispatchNotification messageDispatchNotification) throws Exception { Subscription sub = subscriptions get(messageDispatchNotification getConsumerId()); if (sub != null) { sub processMessageDispatchNotification(messageDispatchNotification); } else { throw new JMSException( Slave broker out of sync with master - Subscription + messageDispatchNotification getConsumerId() + on + messageDispatchNotification getDestination() + does not exist for dispatch of message + messageDispatchNotification getMessageId()); } } protected void processDispatchNotificationViaDestination(MessageDispatchNotification messageDispatchNotification) throws Exception { Destination dest = null; destinationsLock readLock() lock(); try { dest = destinations get(messageDispatchNotification getDestination()); } finally { destinationsLock readLock() unlock(); } if (dest != null) { dest processDispatchNotification(messageDispatchNotification); } else { throw new JMSException( Slave broker out of sync with master - Destination + messageDispatchNotification getDestination() + does not exist for consumer + messageDispatchNotification getConsumerId() + with message + messageDispatchNotification getMessageId()); } } public void gc() { for (Subscription sub subscriptions values()) { sub gc(); } destinationsLock readLock() lock(); try { for (Destination dest destinations values()) { dest gc(); } } finally { destinationsLock readLock() unlock(); } } protected abstract Subscription createSubscription(ConnectionContext context, ConsumerInfo info) throws Exception; protected Destination createDestination(ConnectionContext context, ActiveMQDestination destination) throws Exception { return destinationFactory createDestination(context, destination, destinationStatistics); } public boolean isAutoCreateDestinations() { return autoCreateDestinations; } public void setAutoCreateDestinations(boolean autoCreateDestinations) { this autoCreateDestinations = autoCreateDestinations; } SuppressWarnings( unchecked ) public void addProducer(ConnectionContext context, ProducerInfo info) throws Exception { destinationsLock readLock() lock(); try { for (Destination dest (Set<Destination>) destinationMap get(info getDestination())) { dest addProducer(context, info); } } finally { destinationsLock readLock() unlock(); } } SuppressWarnings( unchecked ) public void removeProducer(ConnectionContext context, ProducerInfo info) throws Exception { destinationsLock readLock() lock(); try { for (Destination dest (Set<Destination>) destinationMap get(info getDestination())) { dest removeProducer(context, info); } } finally { destinationsLock readLock() unlock(); } } protected void dispose(ConnectionContext context, Destination dest) throws Exception { dest dispose(context); dest stop(); destinationFactory removeDestination(dest); } public void processConsumerControl(ConsumerBrokerExchange consumerExchange, ConsumerControl control) { Subscription sub = subscriptions get(control getConsumerId()); if (sub != null && sub instanceof AbstractSubscription) { ((AbstractSubscription) sub) setPrefetchSize(control getPrefetch()); if (broker getDestinationPolicy() != null) { PolicyEntry entry = broker getDestinationPolicy() getEntryFor(control getDestination()); if (entry != null) { entry configurePrefetch(sub); } } if (LOG isDebugEnabled()) { LOG debug( setting prefetch + control getPrefetch() + , on subscription + control getConsumerId() + ; resulting value + sub getConsumerInfo() getCurrentPrefetchSize()); } try { lookup(consumerExchange getConnectionContext(), control getDestination(),false) wakeup(); } catch (Exception e) { LOG warn( failed to deliver post consumerControl dispatch-wakeup, to destination + control getDestination(), e); } } } }",1.0,
241,241,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\AbstractSubscription.,AbstractSubscription,"public abstract class AbstractSubscription implements Subscription { private static final Logger LOG = LoggerFactory getLogger(AbstractSubscription class); protected Broker broker; protected ConnectionContext context; protected ConsumerInfo info; protected final DestinationFilter destinationFilter; protected final CopyOnWriteArrayList<Destination> destinations = new CopyOnWriteArrayList<Destination>(); private BooleanExpression selectorExpression; private ObjectName objectName; private int cursorMemoryHighWaterMark = 70; private boolean slowConsumer; public AbstractSubscription(Broker broker,ConnectionContext context, ConsumerInfo info) throws InvalidSelectorException { this broker = broker; this context = context; this info = info; this destinationFilter = DestinationFilter parseFilter(info getDestination()); this selectorExpression = parseSelector(info); } private static BooleanExpression parseSelector(ConsumerInfo info) throws InvalidSelectorException { BooleanExpression rc = null; if (info getSelector() != null) { rc = SelectorParser parse(info getSelector()); } if (info isNoLocal()) { if (rc == null) { rc = new NoLocalExpression(info getConsumerId() getConnectionId()); } else { rc = LogicExpression createAND(new NoLocalExpression(info getConsumerId() getConnectionId()), rc); } } if (info getAdditionalPredicate() != null) { if (rc == null) { rc = info getAdditionalPredicate(); } else { rc = LogicExpression createAND(info getAdditionalPredicate(), rc); } } return rc; } public boolean matches(MessageReference node, MessageEvaluationContext context) throws IOException { ConsumerId targetConsumerId = node getTargetConsumerId(); if (targetConsumerId != null) { if (!targetConsumerId equals(info getConsumerId())) { return false; } } try { return (selectorExpression == null || selectorExpression matches(context)) && this context isAllowedToConsume(node); } catch (JMSException e) { LOG info( Selector failed to evaluate + e getMessage(), e); return false; } } public boolean matches(ActiveMQDestination destination) { return destinationFilter matches(destination); } public void add(ConnectionContext context, Destination destination) throws Exception { destinations add(destination); } public List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception { destinations remove(destination); return Collections EMPTY LIST; } public ConsumerInfo getConsumerInfo() { return info; } public void gc() { } public ConnectionContext getContext() { return context; } public ConsumerInfo getInfo() { return info; } public BooleanExpression getSelectorExpression() { return selectorExpression; } public String getSelector() { return info getSelector(); } public void setSelector(String selector) throws InvalidSelectorException { ConsumerInfo copy = info copy(); copy setSelector(selector); BooleanExpression newSelector = parseSelector(copy); info setSelector(selector); this selectorExpression = newSelector; } public ObjectName getObjectName() { return objectName; } public void setObjectName(ObjectName objectName) { this objectName = objectName; } public int getPrefetchSize() { return info getPrefetchSize(); } public void setPrefetchSize(int newSize) { info setPrefetchSize(newSize); } public boolean isRecoveryRequired() { return true; } public boolean isSlowConsumer() { return slowConsumer; } public void setSlowConsumer(boolean val) { slowConsumer = val; } public boolean addRecoveredMessage(ConnectionContext context, MessageReference message) throws Exception { boolean result = false; MessageEvaluationContext msgContext = context getMessageEvaluationContext(); try { Destination regionDestination = (Destination) message getRegionDestination(); msgContext setDestination(regionDestination getActiveMQDestination()); msgContext setMessageReference(message); result = matches(message, msgContext); if (result) { doAddRecoveredMessage(message); } } finally { msgContext clear(); } return result; } public ActiveMQDestination getActiveMQDestination() { return info != null info getDestination() null; } public boolean isBrowser() { return info != null && info isBrowser(); } public int getInFlightUsage() { if (info getPrefetchSize() > 0) { return (getInFlightSize() * 100)/info getPrefetchSize(); } return Integer MAX VALUE; } public void addDestination(Destination destination) { } public void removeDestination(Destination destination) { } public int getCursorMemoryHighWaterMark(){ return this cursorMemoryHighWaterMark; } public void setCursorMemoryHighWaterMark(int cursorMemoryHighWaterMark){ this cursorMemoryHighWaterMark=cursorMemoryHighWaterMark; } public int countBeforeFull() { return getDispatchedQueueSize() - info getPrefetchSize(); } public void unmatched(MessageReference node) throws IOException { } protected void doAddRecoveredMessage(MessageReference message) throws Exception { add(message); } }",1.0,
246,246,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\ConnectionStatistics.,ConnectionStatistics,"public class ConnectionStatistics extends StatsImpl { private CountStatisticImpl enqueues; private CountStatisticImpl dequeues; public ConnectionStatistics() { enqueues = new CountStatisticImpl( enqueues , The number of messages that have been sent to the connection ); dequeues = new CountStatisticImpl( dequeues , The number of messages that have been dispatched from the connection ); addStatistic( enqueues , enqueues); addStatistic( dequeues , dequeues); } public CountStatisticImpl getEnqueues() { return enqueues; } public CountStatisticImpl getDequeues() { return dequeues; } public void reset() { super reset(); enqueues reset(); dequeues reset(); } public void setEnabled(boolean enabled) { super setEnabled(enabled); enqueues setEnabled(enabled); dequeues setEnabled(enabled); } public void setParent(ConnectorStatistics parent) { if (parent != null) { enqueues setParent(parent getEnqueues()); dequeues setParent(parent getDequeues()); } else { enqueues setParent(null); dequeues setParent(null); } } }",1.0,
247,247,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\ConnectorStatistics.,ConnectorStatistics,"public class ConnectorStatistics extends StatsImpl { protected CountStatisticImpl enqueues; protected CountStatisticImpl dequeues; protected CountStatisticImpl consumers; protected CountStatisticImpl messages; protected PollCountStatisticImpl messagesCached; public ConnectorStatistics() { enqueues = new CountStatisticImpl( enqueues , The number of messages that have been sent to the destination ); dequeues = new CountStatisticImpl( dequeues , The number of messages that have been dispatched from the destination ); consumers = new CountStatisticImpl( consumers , The number of consumers that that are subscribing to messages from the destination ); messages = new CountStatisticImpl( messages , The number of messages that that are being held by the destination ); messagesCached = new PollCountStatisticImpl( messagesCached , The number of messages that are held in the destination s memory cache ); addStatistic( enqueues , enqueues); addStatistic( dequeues , dequeues); addStatistic( consumers , consumers); addStatistic( messages , messages); addStatistic( messagesCached , messagesCached); } public CountStatisticImpl getEnqueues() { return enqueues; } public CountStatisticImpl getDequeues() { return dequeues; } public CountStatisticImpl getConsumers() { return consumers; } public PollCountStatisticImpl getMessagesCached() { return messagesCached; } public CountStatisticImpl getMessages() { return messages; } public void reset() { super reset(); enqueues reset(); dequeues reset(); } public void setEnabled(boolean enabled) { super setEnabled(enabled); enqueues setEnabled(enabled); dequeues setEnabled(enabled); consumers setEnabled(enabled); messages setEnabled(enabled); messagesCached setEnabled(enabled); } public void setParent(ConnectorStatistics parent) { if (parent != null) { enqueues setParent(parent enqueues); dequeues setParent(parent dequeues); consumers setParent(parent consumers); messagesCached setParent(parent messagesCached); messages setParent(parent messages); } else { enqueues setParent(null); dequeues setParent(null); consumers setParent(null); messagesCached setParent(null); messages setParent(null); } } public void setMessagesCached(PollCountStatisticImpl messagesCached) { this messagesCached = messagesCached; } }",1.0,
251,251,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\DestinationStatistics.,DestinationStatistics,"public class DestinationStatistics extends StatsImpl { protected CountStatisticImpl enqueues; protected CountStatisticImpl dequeues; protected CountStatisticImpl consumers; protected CountStatisticImpl producers; protected CountStatisticImpl messages; protected PollCountStatisticImpl messagesCached; protected CountStatisticImpl dispatched; protected CountStatisticImpl inflight; protected CountStatisticImpl expired; protected TimeStatisticImpl processTime; public DestinationStatistics() { enqueues = new CountStatisticImpl( enqueues , The number of messages that have been sent to the destination ); dispatched = new CountStatisticImpl( dispatched , The number of messages that have been dispatched from the destination ); dequeues = new CountStatisticImpl( dequeues , The number of messages that have been acknowledged from the destination ); inflight = new CountStatisticImpl( inflight , The number of messages dispatched but awaiting acknowledgement ); expired = new CountStatisticImpl( expired , The number of messages that have expired ); consumers = new CountStatisticImpl( consumers , The number of consumers that that are subscribing to messages from the destination ); consumers setDoReset(false); producers = new CountStatisticImpl( producers , The number of producers that that are publishing messages to the destination ); producers setDoReset(false); messages = new CountStatisticImpl( messages , The number of messages that that are being held by the destination ); messages setDoReset(false); messagesCached = new PollCountStatisticImpl( messagesCached , The number of messages that are held in the destination s memory cache ); processTime = new TimeStatisticImpl( processTime , information around length of time messages are held by a destination ); addStatistic( enqueues , enqueues); addStatistic( dispatched , dispatched); addStatistic( dequeues , dequeues); addStatistic( inflight , inflight); addStatistic( expired , expired); addStatistic( consumers , consumers); addStatistic( producers , producers); addStatistic( messages , messages); addStatistic( messagesCached , messagesCached); addStatistic( processTime , processTime); } public CountStatisticImpl getEnqueues() { return enqueues; } public CountStatisticImpl getDequeues() { return dequeues; } public CountStatisticImpl getInflight() { return inflight; } public CountStatisticImpl getExpired() { return expired; } public CountStatisticImpl getConsumers() { return consumers; } public CountStatisticImpl getProducers() { return producers; } public PollCountStatisticImpl getMessagesCached() { return messagesCached; } public CountStatisticImpl getMessages() { return messages; } public void setMessagesCached(PollCountStatisticImpl messagesCached) { this messagesCached = messagesCached; } public CountStatisticImpl getDispatched() { return dispatched; } public TimeStatisticImpl getProcessTime() { return this processTime; } public void reset() { if (this isDoReset()) { super reset(); enqueues reset(); dequeues reset(); dispatched reset(); inflight reset(); expired reset(); } } public void setEnabled(boolean enabled) { super setEnabled(enabled); enqueues setEnabled(enabled); dispatched setEnabled(enabled); dequeues setEnabled(enabled); inflight setEnabled(enabled); expired setEnabled(true); consumers setEnabled(enabled); producers setEnabled(enabled); messages setEnabled(enabled); messagesCached setEnabled(enabled); processTime setEnabled(enabled); } public void setParent(DestinationStatistics parent) { if (parent != null) { enqueues setParent(parent enqueues); dispatched setParent(parent dispatched); dequeues setParent(parent dequeues); inflight setParent(parent inflight); expired setParent(parent expired); consumers setParent(parent consumers); producers setParent(parent producers); messagesCached setParent(parent messagesCached); messages setParent(parent messages); processTime setParent(parent processTime); } else { enqueues setParent(null); dispatched setParent(null); dequeues setParent(null); inflight setParent(null); expired setParent(null); consumers setParent(null); producers setParent(null); messagesCached setParent(null); messages setParent(null); processTime setParent(null); } } }",1.0,
257,257,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\Queue.,TimeoutMessage,"class TimeoutMessage implements Delayed { Message message; ConnectionContext context; long trigger; public TimeoutMessage(Message message, ConnectionContext context, long delay) { this message = message; this context = context; this trigger = System currentTimeMillis() + delay; } public long getDelay(TimeUnit unit) { long n = trigger - System currentTimeMillis(); return unit convert(n, TimeUnit MILLISECONDS); } public int compareTo(Delayed delayed) { long other = ((TimeoutMessage) delayed) trigger; int returnValue; if (this trigger < other) { returnValue = -1; } else if (this trigger > other) { returnValue = 1; } else { returnValue = 0; } return returnValue; } }",1.0,
258,258,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\Queue.,FlowControlTimeoutTask,class FlowControlTimeoutTask extends Thread { Override public void run() { TimeoutMessage timeout; try { while (true) { timeout = flowControlTimeoutMessages take(); if (timeout != null) { synchronized (messagesWaitingForSpace) { if (messagesWaitingForSpace remove(timeout message getMessageId()) != null) { ExceptionResponse response = new ExceptionResponse( new ResourceAllocationException( Usage Manager Memory Limit reached Stopping producer ( + timeout message getProducerId() + ) to prevent flooding + getActiveMQDestination() getQualifiedName() + + See http response setCorrelationId(timeout message getCommandId()); timeout context getConnection() dispatchAsync(response); } } } } } catch (InterruptedException e) { if (LOG isDebugEnabled()) { LOG debug(getName() + Producer Flow Control Timeout Task is stopping ); } } } };,1.0,
259,259,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\Queue.,QueueThread,"final class QueueThread extends Thread { final Queue queue; public QueueThread(Runnable runnable, String name, Queue queue) { super(runnable, name); this queue = queue; } }",1.0,
260,260,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\Queue.,BatchMessageRecoveryListener,"class BatchMessageRecoveryListener implements MessageRecoveryListener { final LinkedList<Message> toExpire = new LinkedList<Message>(); final double totalMessageCount; int recoveredAccumulator = 0; int currentBatchCount; BatchMessageRecoveryListener(int totalMessageCount) { this totalMessageCount = totalMessageCount; currentBatchCount = recoveredAccumulator; } public boolean recoverMessage(Message message) { recoveredAccumulator++; if (LOG isInfoEnabled() && (recoveredAccumulator % 10000) == 0) { LOG info( cursor for + getActiveMQDestination() getQualifiedName() + has recovered + recoveredAccumulator + messages + (int) (recoveredAccumulator * 100 / totalMessageCount) + % complete ); } if (message isExpired() && broker isExpired(message)) { toExpire add(message); return true; } if (hasSpace()) { message setRegionDestination(Queue this); messagesLock writeLock() lock(); try { try { messages addMessageLast(message); } catch (Exception e) { LOG error( Failed to add message to cursor , e); } } finally { messagesLock writeLock() unlock(); } destinationStatistics getMessages() increment(); return true; } return false; } public boolean recoverMessageReference(MessageId messageReference) throws Exception { throw new RuntimeException( Should not be called ); } public boolean hasSpace() { return true; } public boolean isDuplicate(MessageId id) { return false; } public void reset() { currentBatchCount = recoveredAccumulator; } public void processExpired() { for (Message message toExpire) { messageExpired(createConnectionContext(), createMessageReference(message)); destinationStatistics getMessages() increment(); } toExpire clear(); } public boolean done() { return currentBatchCount == recoveredAccumulator; } } Override",1.0,
261,261,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\Queue.,BrowserDispatch,"class BrowserDispatch { QueueBrowserSubscription browser; public BrowserDispatch(QueueBrowserSubscription browserSubscription) { browser = browserSubscription; browser incrementQueueRef(); } void done() { try { browser decrementQueueRef(); } catch (Exception e) { LOG warn( decrement ref on browser + browser, e); } } public QueueBrowserSubscription getBrowser() { return browser; } }",1.0,
263,263,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\QueueDispatchSelector.,QueueDispatchSelector,"public class QueueDispatchSelector extends SimpleDispatchSelector { private static final Logger LOG = LoggerFactory getLogger(QueueDispatchSelector class); private Subscription exclusiveConsumer; public QueueDispatchSelector(ActiveMQDestination destination) { super(destination); } public Subscription getExclusiveConsumer() { return exclusiveConsumer; } public void setExclusiveConsumer(Subscription exclusiveConsumer) { this exclusiveConsumer = exclusiveConsumer; } public boolean isExclusiveConsumer(Subscription s) { return s == this exclusiveConsumer; } public boolean canSelect(Subscription subscription, MessageReference m) throws Exception { boolean result = super canDispatch(subscription, m); if (result && !subscription isBrowser()) { result = exclusiveConsumer == null || exclusiveConsumer == subscription; } return result; } }",1.0,
269,269,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\TempTopic.,TempTopic,"public class TempTopic extends Topic implements Task{ private final ActiveMQTempDestination tempDest; public TempTopic(BrokerService brokerService, ActiveMQDestination destination, TopicMessageStore store, DestinationStatistics parentStats, TaskRunnerFactory taskFactory) throws Exception { super(brokerService, destination, store, parentStats, taskFactory); this tempDest = (ActiveMQTempDestination) destination; } public void addSubscription(ConnectionContext context, Subscription sub) throws Exception { if (!context isFaultTolerant() && (!context isNetworkConnection() && !tempDest getConnectionId() equals( sub getConsumerInfo() getConsumerId() getConnectionId()))) { tempDest setConnectionId(sub getConsumerInfo() getConsumerId() getConnectionId()); if (LOG isDebugEnabled()) { LOG debug( changed ownership of + this + to + tempDest getConnectionId()); } } super addSubscription(context, sub); } public void initialize() { } }",1.0,
274,274,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\AbstractPendingMessageCursor.,AbstractPendingMessageCursor,"public abstract class AbstractPendingMessageCursor implements PendingMessageCursor { protected int memoryUsageHighWaterMark = 70; protected int maxBatchSize = BaseDestination MAX PAGE SIZE; protected SystemUsage systemUsage; protected int maxProducersToAudit = BaseDestination MAX PRODUCERS TO AUDIT; protected int maxAuditDepth = BaseDestination MAX AUDIT DEPTH; protected boolean enableAudit=true; protected ActiveMQMessageAudit audit; protected boolean useCache=true; private boolean cacheEnabled=true; private boolean started=false; protected MessageReference last = null; protected final boolean prioritizedMessages; public AbstractPendingMessageCursor(boolean prioritizedMessages) { this prioritizedMessages=prioritizedMessages; } public synchronized void start() throws Exception { if (!started && enableAudit && audit==null) { audit= new ActiveMQMessageAudit(maxAuditDepth,maxProducersToAudit); } started=true; } public synchronized void stop() throws Exception { started=false; gc(); } public void add(ConnectionContext context, Destination destination) throws Exception { } SuppressWarnings( unchecked ) public List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception { return Collections EMPTY LIST; } public boolean isRecoveryRequired() { return true; } public void addMessageFirst(MessageReference node) throws Exception { } public void addMessageLast(MessageReference node) throws Exception { } public boolean tryAddMessageLast(MessageReference node, long maxWaitTime) throws Exception { addMessageLast(node); return true; } public void addRecoveredMessage(MessageReference node) throws Exception { addMessageLast(node); } public void clear() { } public boolean hasNext() { return false; } public boolean isEmpty() { return false; } public boolean isEmpty(Destination destination) { return isEmpty(); } public MessageReference next() { return null; } public void remove() { } public void reset() { } public int size() { return 0; } public int getMaxBatchSize() { return maxBatchSize; } public void setMaxBatchSize(int maxBatchSize) { this maxBatchSize = maxBatchSize; } protected void fillBatch() throws Exception { } public void resetForGC() { reset(); } public void remove(MessageReference node) { } public void gc() { } public void setSystemUsage(SystemUsage usageManager) { this systemUsage = usageManager; } public boolean hasSpace() { return systemUsage != null (systemUsage getMemoryUsage() getPercentUsage() < memoryUsageHighWaterMark) true; } public boolean isFull() { return systemUsage != null systemUsage getMemoryUsage() isFull() false; } public void release() { } public boolean hasMessagesBufferedToDeliver() { return false; } public int getMemoryUsageHighWaterMark() { return memoryUsageHighWaterMark; } public void setMemoryUsageHighWaterMark(int memoryUsageHighWaterMark) { this memoryUsageHighWaterMark = memoryUsageHighWaterMark; } public SystemUsage getSystemUsage() { return this systemUsage; } public void destroy() throws Exception { stop(); } public LinkedList<MessageReference> pageInList(int maxItems) { throw new RuntimeException( Not supported ); } public int getMaxProducersToAudit() { return maxProducersToAudit; } public synchronized void setMaxProducersToAudit(int maxProducersToAudit) { this maxProducersToAudit = maxProducersToAudit; if (audit != null) { audit setMaximumNumberOfProducersToTrack(maxProducersToAudit); } } public int getMaxAuditDepth() { return maxAuditDepth; } public synchronized void setMaxAuditDepth(int maxAuditDepth) { this maxAuditDepth = maxAuditDepth; if (audit != null) { audit setAuditDepth(maxAuditDepth); } } public boolean isEnableAudit() { return enableAudit; } public synchronized void setEnableAudit(boolean enableAudit) { this enableAudit = enableAudit; if (enableAudit && started && audit==null) { audit= new ActiveMQMessageAudit(maxAuditDepth,maxProducersToAudit); } } public boolean isTransient() { return false; } public void setMessageAudit(ActiveMQMessageAudit audit) { this audit=audit; } public ActiveMQMessageAudit getMessageAudit() { return audit; } public boolean isUseCache() { return useCache; } public void setUseCache(boolean useCache) { this useCache = useCache; } public synchronized boolean isDuplicate(MessageId messageId) { boolean unique = recordUniqueId(messageId); rollback(messageId); return !unique; } public synchronized boolean recordUniqueId(MessageId messageId) { if (!enableAudit || audit==null) { return true; } return !audit isDuplicate(messageId); } public synchronized void rollback(MessageId id) { if (audit != null) { audit rollback(id); } } protected synchronized boolean isStarted() { return started; } public static boolean isPrioritizedMessageSubscriber(Broker broker,Subscription sub) { boolean result = false; Set<Destination> destinations = broker getDestinations(sub getActiveMQDestination()); if (destinations != null) { for (Destination dest destinations) { if (dest isPrioritizedMessages()) { result = true; break; } } } return result; } public synchronized boolean isCacheEnabled() { return cacheEnabled; } public synchronized void setCacheEnabled(boolean val) { cacheEnabled = val; } }",1.0,
275,275,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\AbstractStoreCursor.,AbstractStoreCursor,"public abstract class AbstractStoreCursor extends AbstractPendingMessageCursor implements MessageRecoveryListener { private static final Logger LOG = LoggerFactory getLogger(AbstractStoreCursor class); protected final Destination regionDestination; protected final PendingList batchList; private Iterator<MessageReference> iterator = null; protected boolean batchResetNeeded = false; private boolean storeHasMessages = false; protected int size; private MessageId lastCachedId; private boolean hadSpace = false; protected AbstractStoreCursor(Destination destination) { super((destination != null destination isPrioritizedMessages() false)); this regionDestination=destination; if (this prioritizedMessages) { this batchList= new PrioritizedPendingList(); } else { this batchList = new OrderedPendingList(); } } public final synchronized void start() throws Exception{ if (!isStarted()) { super start(); resetBatch(); resetSize(); setCacheEnabled(!this storeHasMessages&&useCache); } } protected void resetSize() { this size = getStoreSize(); this storeHasMessages=this size > 0; } public final synchronized void stop() throws Exception { resetBatch(); super stop(); gc(); } public final boolean recoverMessage(Message message) throws Exception { return recoverMessage(message,false); } public synchronized boolean recoverMessage(Message message, boolean cached) throws Exception { boolean recovered = false; if (recordUniqueId(message getMessageId())) { if (!cached) { message setRegionDestination(regionDestination); if( message getMemoryUsage()==null ) { message setMemoryUsage(this getSystemUsage() getMemoryUsage()); } } message incrementReferenceCount(); batchList addMessageLast(message); clearIterator(true); recovered = true; storeHasMessages = true; } else { if (LOG isTraceEnabled()) { LOG trace(this + - cursor got duplicate + message getMessageId() + , + message getPriority()); } } return recovered; } public final synchronized void reset() { if (batchList isEmpty()) { try { fillBatch(); } catch (Exception e) { LOG error(this + - Failed to fill batch , e); throw new RuntimeException(e); } } clearIterator(true); size(); } public synchronized void release() { clearIterator(false); } private synchronized void clearIterator(boolean ensureIterator) { boolean haveIterator = this iterator != null; this iterator=null; if(haveIterator&&ensureIterator) { ensureIterator(); } } private synchronized void ensureIterator() { if(this iterator==null) { this iterator=this batchList iterator(); } } public final void finished() { } public final synchronized boolean hasNext() { if (batchList isEmpty()) { try { fillBatch(); } catch (Exception e) { LOG error(this + - Failed to fill batch , e); throw new RuntimeException(e); } } ensureIterator(); return this iterator hasNext(); } public final synchronized MessageReference next() { MessageReference result = null; if (!this batchList isEmpty()&&this iterator hasNext()) { result = this iterator next(); } last = result; if (result != null) { result incrementReferenceCount(); } return result; } public final synchronized void addMessageLast(MessageReference node) throws Exception { boolean disableCache = false; if (hasSpace()) { if (!isCacheEnabled() && size==0 && isStarted() && useCache) { if (LOG isTraceEnabled()) { LOG trace(this + - enabling cache for empty store + node getMessageId()); } setCacheEnabled(true); } if (isCacheEnabled()) { if (recoverMessage(node getMessage(),true)) { lastCachedId = node getMessageId(); } else { disableCache = true; } } } else { disableCache = true; } if (disableCache && isCacheEnabled()) { setCacheEnabled(false); if (lastCachedId != null) { if (LOG isTraceEnabled()) { LOG trace(this + - disabling cache + , lastCachedId + lastCachedId + current node Id + node getMessageId() + batchList size + batchList size()); } setBatch(lastCachedId); lastCachedId = null; } } this storeHasMessages = true; size++; } protected void setBatch(MessageId messageId) throws Exception { } public final synchronized void addMessageFirst(MessageReference node) throws Exception { setCacheEnabled(false); size++; } public final synchronized void remove() { size--; if (iterator!=null) { iterator remove(); } if (last != null) { last decrementReferenceCount(); } } public final synchronized void remove(MessageReference node) { if (batchList remove(node) != null) { size--; setCacheEnabled(false); } } public final synchronized void clear() { gc(); } public synchronized void gc() { for (Iterator<MessageReference>i = batchList iterator();i hasNext();) { MessageReference msg = i next(); rollback(msg getMessageId()); msg decrementReferenceCount(); } batchList clear(); clearIterator(false); batchResetNeeded = true; setCacheEnabled(false); } Override public boolean hasSpace() { hadSpace = super hasSpace(); return hadSpace; } protected final synchronized void fillBatch() { if (LOG isTraceEnabled()) { LOG trace(this + - fillBatch ); } if (batchResetNeeded) { resetSize(); setMaxBatchSize(Math min(regionDestination getMaxPageSize(), size)); resetBatch(); this batchResetNeeded = false; } if (this batchList isEmpty() && this storeHasMessages && this size >0) { try { doFillBatch(); } catch (Exception e) { LOG error(this + - Failed to fill batch , e); throw new RuntimeException(e); } this storeHasMessages = !this batchList isEmpty() || !hadSpace; } } public final synchronized boolean isEmpty() { return size == 0; } public final synchronized boolean hasMessagesBufferedToDeliver() { return !batchList isEmpty(); } public final synchronized int size() { if (size < 0) { this size = getStoreSize(); } return size; } Override public String toString() { return super toString() + + regionDestination getActiveMQDestination() getPhysicalName() + ,batchResetNeeded= + batchResetNeeded + ,storeHasMessages= + this storeHasMessages + ,size= + this size + ,cacheEnabled= + isCacheEnabled() + ,maxBatchSize + maxBatchSize; } protected abstract void doFillBatch() throws Exception; protected abstract void resetBatch(); protected abstract int getStoreSize(); protected abstract boolean isStoreEmpty(); }",1.0,
277,277,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\FilePendingMessageCursor.,DiskIterator,"final class DiskIterator implements Iterator<MessageReference> { private final PList PListIterator iterator; DiskIterator() { try { iterator = getDiskList() iterator(); } catch (Exception e) { throw new RuntimeException(e); } } public boolean hasNext() { return iterator hasNext(); } public MessageReference next() { try { PListEntry entry = iterator next(); Message message = getMessage(entry getByteSequence()); message getMessageId() setPlistLocator(entry getLocator()); return message; } catch (IOException e) { LOG error( I/O error , e); throw new RuntimeException(e); } } public void remove() { iterator remove(); } public void release() { iterator release(); } }",1.0,
278,278,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\OrderedPendingList.,OrderedPendingList,"public class OrderedPendingList implements PendingList { private PendingNode root = null; private PendingNode tail = null; private final Map<MessageId, PendingNode> map = new HashMap<MessageId, PendingNode>(); public PendingNode addMessageFirst(MessageReference message) { PendingNode node = new PendingNode(this, message); if (root == null) { root = node; tail = node; } else { root linkBefore(node); root = node; } this map put(message getMessageId(), node); return node; } public PendingNode addMessageLast(MessageReference message) { PendingNode node = new PendingNode(this, message); if (root == null) { root = node; } else { tail linkAfter(node); } tail = node; this map put(message getMessageId(), node); return node; } public void clear() { this root = null; this tail = null; this map clear(); } public boolean isEmpty() { return this map isEmpty(); } public Iterator<MessageReference> iterator() { return new Iterator<MessageReference>() { private PendingNode current = null; private PendingNode next = root; public boolean hasNext() { return next != null; } public MessageReference next() { MessageReference result = null; this current = this next; result = this current getMessage(); this next = (PendingNode) this next getNext(); return result; } public void remove() { if (this current != null && this current getMessage() != null) { map remove(this current getMessage() getMessageId()); } removeNode(this current); } }; } public PendingNode remove(MessageReference message) { PendingNode node = null; if (message != null) { node = this map remove(message getMessageId()); removeNode(node); } return node; } public int size() { return this map size(); } void removeNode(PendingNode node) { if (node != null) { map remove(node getMessage() getMessageId()); if (root == node) { root = (PendingNode) node getNext(); } if (tail == node) { tail = (PendingNode) node getPrevious(); } node unlink(); } } List<PendingNode> getAsList() { List<PendingNode> result = new ArrayList<PendingNode>(size()); PendingNode node = root; while (node != null) { result add(node); node = (PendingNode) node getNext(); } return result; } Override public String toString() { return OrderedPendingList( + System identityHashCode(this) + ) ; } Override public boolean contains(MessageReference message) { if (message != null) { for (PendingNode value map values()) { if (value getMessage() equals(message)) { return true; } } } return false; } Override public Collection<MessageReference> values() { List<MessageReference> messageReferences = new ArrayList<MessageReference>(); Iterator<MessageReference> iterator = iterator(); while (iterator hasNext()) { messageReferences add(iterator next()); } return messageReferences; } Override public void addAll(PendingList pendingList) { if (pendingList != null) { for(MessageReference messageReference pendingList) { addMessageLast(messageReference); } } } }",1.0,
279,279,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\PendingNode.,PendingNode,"public class PendingNode extends LinkedNode { private final MessageReference message; private final OrderedPendingList list; public PendingNode(OrderedPendingList list,MessageReference message) { this list = list; this message = message; } MessageReference getMessage() { return this message; } OrderedPendingList getList() { return this list; } Override public String toString() { PendingNode n = (PendingNode) getNext(); String str = PendingNode( ; str += System identityHashCode(this) + ),root= +isHeadNode()+ ,next= +(n != null System identityHashCode(n) NULL ); return str; } }",1.0,
280,280,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\PrioritizedPendingList.,PrioritizedPendingList,"public class PrioritizedPendingList implements PendingList { private static final Integer MAX PRIORITY = 10; private final OrderedPendingList[] lists = new OrderedPendingList[MAX PRIORITY]; private final Map<MessageId, PendingNode> map = new HashMap<MessageId, PendingNode>(); public PrioritizedPendingList() { for (int i = 0; i < MAX PRIORITY; i++) { this lists[i] = new OrderedPendingList(); } } public PendingNode addMessageFirst(MessageReference message) { PendingNode node = getList(message) addMessageFirst(message); this map put(message getMessageId(), node); return node; } public PendingNode addMessageLast(MessageReference message) { PendingNode node = getList(message) addMessageLast(message); this map put(message getMessageId(), node); return node; } public void clear() { for (int i = 0; i < MAX PRIORITY; i++) { this lists[i] clear(); } this map clear(); } public boolean isEmpty() { return this map isEmpty(); } public Iterator<MessageReference> iterator() { return new PrioritizedPendingListIterator(); } public PendingNode remove(MessageReference message) { PendingNode node = null; if (message != null) { node = this map remove(message getMessageId()); if (node != null) { node getList() removeNode(node); } } return node; } public int size() { return this map size(); } Override public String toString() { return PrioritizedPendingList( + System identityHashCode(this) + ) ; } protected int getPriority(MessageReference message) { int priority = javax jms Message DEFAULT PRIORITY; if (message getMessageId() != null) { priority = Math max(message getMessage() getPriority(), 0); priority = Math min(priority, 9); } return priority; } protected OrderedPendingList getList(MessageReference msg) { return lists[getPriority(msg)]; } private class PrioritizedPendingListIterator implements Iterator<MessageReference> { private int index = 0; private int currentIndex = 0; List<PendingNode> list = new ArrayList<PendingNode>(size()); PrioritizedPendingListIterator() { for (int i = MAX PRIORITY - 1; i >= 0; i--) { OrderedPendingList orderedPendingList = lists[i]; if (!orderedPendingList isEmpty()) { list addAll(orderedPendingList getAsList()); } } } public boolean hasNext() { return list size() > index; } public MessageReference next() { PendingNode node = list get(this index); this currentIndex = this index; this index++; return node getMessage(); } public void remove() { PendingNode node = list get(this currentIndex); if (node != null) { map remove(node getMessage() getMessageId()); node getList() removeNode(node); } } } Override public boolean contains(MessageReference message) { if (map values() contains(message)) { return true; } return false; } Override public Collection<MessageReference> values() { List<MessageReference> messageReferences = new ArrayList<MessageReference>(); for (PendingNode pendingNode map values()) { messageReferences add(pendingNode getMessage()); } return messageReferences; } Override public void addAll(PendingList pendingList) { for(MessageReference messageReference pendingList) { addMessageLast(messageReference); } } }",1.0,
281,281,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\PrioritizedPendingList.,PrioritizedPendingListIterator,private class PrioritizedPendingListIterator implements Iterator<MessageReference> { private int index = 0; private int currentIndex = 0; List<PendingNode> list = new ArrayList<PendingNode>(size()); PrioritizedPendingListIterator() { for (int i = MAX PRIORITY - 1; i >= 0; i--) { OrderedPendingList orderedPendingList = lists[i]; if (!orderedPendingList isEmpty()) { list addAll(orderedPendingList getAsList()); } } } public boolean hasNext() { return list size() > index; } public MessageReference next() { PendingNode node = list get(this index); this currentIndex = this index; this index++; return node getMessage(); } public void remove() { PendingNode node = list get(this currentIndex); if (node != null) { map remove(node getMessage() getMessageId()); node getList() removeNode(node); } } } Override,1.0,
282,282,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\QueueStorePrefetch.,QueueStorePrefetch,"class QueueStorePrefetch extends AbstractStoreCursor { private static final Logger LOG = LoggerFactory getLogger(QueueStorePrefetch class); private final MessageStore store; public QueueStorePrefetch(Queue queue) { super(queue); this store = queue getMessageStore(); } public boolean recoverMessageReference(MessageId messageReference) throws Exception { Message msg = this store getMessage(messageReference); if (msg != null) { return recoverMessage(msg); } else { String err = Failed to retrieve message for id + messageReference; LOG error(err); throw new IOException(err); } } Override protected synchronized int getStoreSize() { try { int result = this store getMessageCount(); return result; } catch (IOException e) { LOG error( Failed to get message count , e); throw new RuntimeException(e); } } Override protected synchronized boolean isStoreEmpty() { try { return this store isEmpty(); } catch (Exception e) { LOG error( Failed to get message count , e); throw new RuntimeException(e); } } Override protected void resetBatch() { this store resetBatching(); } Override protected void setBatch(MessageId messageId) throws Exception { store setBatch(messageId); batchResetNeeded = false; } Override protected void doFillBatch() throws Exception { this store recoverNextMessages(this maxBatchSize, this); } }",1.0,
283,283,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\StoreDurableSubscriberCursor.,StoreDurableSubscriberCursor,"public class StoreDurableSubscriberCursor extends AbstractPendingMessageCursor { private static final Logger LOG = LoggerFactory getLogger(StoreDurableSubscriberCursor class); private final String clientId; private final String subscriberName; private final Map<Destination, TopicStorePrefetch> topics = new HashMap<Destination, TopicStorePrefetch>(); private final List<PendingMessageCursor> storePrefetches = new CopyOnWriteArrayList<PendingMessageCursor>(); private final PendingMessageCursor nonPersistent; private PendingMessageCursor currentCursor; private final DurableTopicSubscription subscription; private boolean immediatePriorityDispatch = true; public StoreDurableSubscriberCursor(Broker broker,String clientId, String subscriberName,int maxBatchSize, DurableTopicSubscription subscription) { super(AbstractPendingMessageCursor isPrioritizedMessageSubscriber(broker,subscription)); this subscription=subscription; this clientId = clientId; this subscriberName = subscriberName; if (broker getBrokerService() isPersistent()) { this nonPersistent = new FilePendingMessageCursor(broker,clientId + subscriberName,this prioritizedMessages); } else { this nonPersistent = new VMPendingMessageCursor(this prioritizedMessages); } this nonPersistent setMaxBatchSize(maxBatchSize); this nonPersistent setSystemUsage(systemUsage); this storePrefetches add(this nonPersistent); if (prioritizedMessages) { setMaxAuditDepth(10*getMaxAuditDepth()); } } Override public synchronized void start() throws Exception { if (!isStarted()) { super start(); for (PendingMessageCursor tsp storePrefetches) { tsp setMessageAudit(getMessageAudit()); tsp start(); } } } Override public synchronized void stop() throws Exception { if (isStarted()) { if (subscription isKeepDurableSubsActive()) { super gc(); for (PendingMessageCursor tsp storePrefetches) { tsp gc(); } } else { super stop(); for (PendingMessageCursor tsp storePrefetches) { tsp stop(); } getMessageAudit() clear(); } } } Override public synchronized void add(ConnectionContext context, Destination destination) throws Exception { if (destination != null && !AdvisorySupport isAdvisoryTopic(destination getActiveMQDestination())) { TopicStorePrefetch tsp = new TopicStorePrefetch(this subscription,(Topic)destination, clientId, subscriberName); tsp setMaxBatchSize(destination getMaxPageSize()); tsp setSystemUsage(systemUsage); tsp setMessageAudit(getMessageAudit()); tsp setEnableAudit(isEnableAudit()); tsp setMemoryUsageHighWaterMark(getMemoryUsageHighWaterMark()); tsp setUseCache(isUseCache()); tsp setCacheEnabled(isUseCache() && tsp isEmpty()); topics put(destination, tsp); storePrefetches add(tsp); if (isStarted()) { tsp start(); } } } Override public synchronized List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception { PendingMessageCursor tsp = topics remove(destination); if (tsp != null) { storePrefetches remove(tsp); } return Collections EMPTY LIST; } Override public synchronized boolean isEmpty() { for (PendingMessageCursor tsp storePrefetches) { if( !tsp isEmpty() ) return false; } return true; } Override public synchronized boolean isEmpty(Destination destination) { boolean result = true; TopicStorePrefetch tsp = topics get(destination); if (tsp != null) { result = tsp isEmpty(); } return result; } Override public boolean isRecoveryRequired() { return false; } Override public synchronized void addMessageLast(MessageReference node) throws Exception { if (node != null) { Message msg = node getMessage(); if (isStarted()) { if (!msg isPersistent()) { nonPersistent addMessageLast(node); } } if (msg isPersistent()) { Destination dest = (Destination) msg getRegionDestination(); TopicStorePrefetch tsp = topics get(dest); if (tsp != null) { tsp addMessageLast(node); if (prioritizedMessages && immediatePriorityDispatch && tsp isPaging()) { if (msg getPriority() > tsp getLastRecoveredPriority()) { tsp recoverMessage(node getMessage(), true); if (LOG isTraceEnabled()) { LOG trace( cached high priority ( + msg getPriority() + ) message + msg getMessageId() + , current paged batch priority + tsp getLastRecoveredPriority() + , cache size + tsp batchList size()); } } } } } } } Override public boolean isTransient() { return subscription isKeepDurableSubsActive(); } Override public void addMessageFirst(MessageReference node) throws Exception { if (node != null) { Message msg = node getMessage(); if (!msg isPersistent()) { nonPersistent addMessageFirst(node); } else { Destination dest = (Destination) msg getRegionDestination(); TopicStorePrefetch tsp = topics get(dest); if (tsp != null) { tsp addMessageFirst(node); } } } } Override public synchronized void addRecoveredMessage(MessageReference node) throws Exception { nonPersistent addMessageLast(node); } Override public synchronized void clear() { for (PendingMessageCursor tsp storePrefetches) { tsp clear(); } } Override public synchronized boolean hasNext() { boolean result = true; if (result) { try { currentCursor = getNextCursor(); } catch (Exception e) { LOG error( Failed to get current cursor , e); throw new RuntimeException(e); } result = currentCursor != null currentCursor hasNext() false; } return result; } Override public synchronized MessageReference next() { MessageReference result = currentCursor != null currentCursor next() null; return result; } Override public synchronized void remove() { if (currentCursor != null) { currentCursor remove(); } } Override public synchronized void remove(MessageReference node) { for (PendingMessageCursor tsp storePrefetches) { tsp remove(node); } } Override public synchronized void reset() { for (PendingMessageCursor storePrefetch storePrefetches) { storePrefetch reset(); } } Override public synchronized void release() { this currentCursor = null; for (PendingMessageCursor storePrefetch storePrefetches) { storePrefetch release(); } } Override public synchronized int size() { int pendingCount=0; for (PendingMessageCursor tsp storePrefetches) { pendingCount += tsp size(); } return pendingCount; } Override public void setMaxBatchSize(int newMaxBatchSize) { for (PendingMessageCursor storePrefetch storePrefetches) { storePrefetch setMaxBatchSize(newMaxBatchSize); } super setMaxBatchSize(newMaxBatchSize); } Override public synchronized void gc() { for (PendingMessageCursor tsp storePrefetches) { tsp gc(); } } Override public void setSystemUsage(SystemUsage usageManager) { super setSystemUsage(usageManager); for (PendingMessageCursor tsp storePrefetches) { tsp setSystemUsage(usageManager); } } Override public void setMemoryUsageHighWaterMark(int memoryUsageHighWaterMark) { super setMemoryUsageHighWaterMark(memoryUsageHighWaterMark); for (PendingMessageCursor cursor storePrefetches) { cursor setMemoryUsageHighWaterMark(memoryUsageHighWaterMark); } } Override public void setMaxProducersToAudit(int maxProducersToAudit) { super setMaxProducersToAudit(maxProducersToAudit); for (PendingMessageCursor cursor storePrefetches) { cursor setMaxAuditDepth(maxAuditDepth); } } Override public void setMaxAuditDepth(int maxAuditDepth) { super setMaxAuditDepth(maxAuditDepth); for (PendingMessageCursor cursor storePrefetches) { cursor setMaxAuditDepth(maxAuditDepth); } } Override public void setEnableAudit(boolean enableAudit) { super setEnableAudit(enableAudit); for (PendingMessageCursor cursor storePrefetches) { cursor setEnableAudit(enableAudit); } } Override public void setUseCache(boolean useCache) { super setUseCache(useCache); for (PendingMessageCursor cursor storePrefetches) { cursor setUseCache(useCache); } } protected synchronized PendingMessageCursor getNextCursor() throws Exception { if (currentCursor == null || currentCursor isEmpty()) { currentCursor = null; for (PendingMessageCursor tsp storePrefetches) { if (tsp hasNext()) { currentCursor = tsp; break; } } if (storePrefetches size()>1) { PendingMessageCursor first = storePrefetches remove(0); storePrefetches add(first); } } return currentCursor; } Override public String toString() { return StoreDurableSubscriber( + clientId + + subscriberName + ) ; } public boolean isImmediatePriorityDispatch() { return immediatePriorityDispatch; } public void setImmediatePriorityDispatch(boolean immediatePriorityDispatch) { this immediatePriorityDispatch = immediatePriorityDispatch; } }",1.0,
284,284,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\StoreQueueCursor.,StoreQueueCursor,"public class StoreQueueCursor extends AbstractPendingMessageCursor { private static final Logger LOG = LoggerFactory getLogger(StoreQueueCursor class); private final Broker broker; private int pendingCount; private final Queue queue; private PendingMessageCursor nonPersistent; private final QueueStorePrefetch persistent; private boolean started; private PendingMessageCursor currentCursor; public StoreQueueCursor(Broker broker,Queue queue) { super((queue != null queue isPrioritizedMessages() false)); this broker=broker; this queue = queue; this persistent = new QueueStorePrefetch(queue); currentCursor = persistent; } public synchronized void start() throws Exception { started = true; super start(); if (nonPersistent == null) { if (broker getBrokerService() isPersistent()) { nonPersistent = new FilePendingMessageCursor(broker,queue getName(),this prioritizedMessages); }else { nonPersistent = new VMPendingMessageCursor(this prioritizedMessages); } nonPersistent setMaxBatchSize(getMaxBatchSize()); nonPersistent setSystemUsage(systemUsage); nonPersistent setEnableAudit(isEnableAudit()); nonPersistent setMaxAuditDepth(getMaxAuditDepth()); nonPersistent setMaxProducersToAudit(getMaxProducersToAudit()); } nonPersistent setMessageAudit(getMessageAudit()); nonPersistent start(); persistent setMessageAudit(getMessageAudit()); persistent start(); pendingCount = persistent size() + nonPersistent size(); } public synchronized void stop() throws Exception { started = false; if (nonPersistent != null) { nonPersistent destroy(); } persistent stop(); persistent gc(); super stop(); pendingCount = 0; } public synchronized void addMessageLast(MessageReference node) throws Exception { if (node != null) { Message msg = node getMessage(); if (started) { pendingCount++; if (!msg isPersistent()) { nonPersistent addMessageLast(node); } } if (msg isPersistent()) { persistent addMessageLast(node); } } } public synchronized void addMessageFirst(MessageReference node) throws Exception { if (node != null) { Message msg = node getMessage(); if (started) { pendingCount++; if (!msg isPersistent()) { nonPersistent addMessageFirst(node); } } if (msg isPersistent()) { persistent addMessageFirst(node); } } } public synchronized void clear() { pendingCount = 0; } public synchronized boolean hasNext() { try { getNextCursor(); } catch (Exception e) { LOG error( Failed to get current cursor , e); throw new RuntimeException(e); } return currentCursor != null currentCursor hasNext() false; } public synchronized MessageReference next() { MessageReference result = currentCursor != null currentCursor next() null; return result; } public synchronized void remove() { if (currentCursor != null) { currentCursor remove(); } pendingCount--; } public synchronized void remove(MessageReference node) { if (!node isPersistent()) { nonPersistent remove(node); } else { persistent remove(node); } pendingCount--; } public synchronized void reset() { nonPersistent reset(); persistent reset(); pendingCount = persistent size() + nonPersistent size(); } public void release() { nonPersistent release(); persistent release(); } public synchronized int size() { if (pendingCount < 0) { pendingCount = persistent size() + nonPersistent size(); } return pendingCount; } public synchronized boolean isEmpty() { return pendingCount == 0; } public boolean isRecoveryRequired() { return false; } public PendingMessageCursor getNonPersistent() { return this nonPersistent; } public void setNonPersistent(PendingMessageCursor nonPersistent) { this nonPersistent = nonPersistent; } public void setMaxBatchSize(int maxBatchSize) { persistent setMaxBatchSize(maxBatchSize); if (nonPersistent != null) { nonPersistent setMaxBatchSize(maxBatchSize); } super setMaxBatchSize(maxBatchSize); } public void setMaxProducersToAudit(int maxProducersToAudit) { super setMaxProducersToAudit(maxProducersToAudit); if (persistent != null) { persistent setMaxProducersToAudit(maxProducersToAudit); } if (nonPersistent != null) { nonPersistent setMaxProducersToAudit(maxProducersToAudit); } } public void setMaxAuditDepth(int maxAuditDepth) { super setMaxAuditDepth(maxAuditDepth); if (persistent != null) { persistent setMaxAuditDepth(maxAuditDepth); } if (nonPersistent != null) { nonPersistent setMaxAuditDepth(maxAuditDepth); } } public void setEnableAudit(boolean enableAudit) { super setEnableAudit(enableAudit); if (persistent != null) { persistent setEnableAudit(enableAudit); } if (nonPersistent != null) { nonPersistent setEnableAudit(enableAudit); } } Override public void setUseCache(boolean useCache) { super setUseCache(useCache); if (persistent != null) { persistent setUseCache(useCache); } if (nonPersistent != null) { nonPersistent setUseCache(useCache); } } Override public void setMemoryUsageHighWaterMark(int memoryUsageHighWaterMark) { super setMemoryUsageHighWaterMark(memoryUsageHighWaterMark); if (persistent != null) { persistent setMemoryUsageHighWaterMark(memoryUsageHighWaterMark); } if (nonPersistent != null) { nonPersistent setMemoryUsageHighWaterMark(memoryUsageHighWaterMark); } } public synchronized void gc() { if (persistent != null) { persistent gc(); } if (nonPersistent != null) { nonPersistent gc(); } pendingCount = persistent size() + nonPersistent size(); } public void setSystemUsage(SystemUsage usageManager) { super setSystemUsage(usageManager); if (persistent != null) { persistent setSystemUsage(usageManager); } if (nonPersistent != null) { nonPersistent setSystemUsage(usageManager); } } protected synchronized PendingMessageCursor getNextCursor() throws Exception { if (currentCursor == null || !currentCursor hasMessagesBufferedToDeliver()) { currentCursor = currentCursor == persistent nonPersistent persistent; if (currentCursor isEmpty()) { currentCursor = currentCursor == persistent nonPersistent persistent; } } return currentCursor; } Override public boolean isCacheEnabled() { boolean cacheEnabled = isUseCache(); if (cacheEnabled) { if (persistent != null) { cacheEnabled &= persistent isCacheEnabled(); } if (nonPersistent != null) { cacheEnabled &= nonPersistent isCacheEnabled(); } setCacheEnabled(cacheEnabled); } return cacheEnabled; } }",1.0,
286,286,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\cursors\VMPendingMessageCursor.,VMPendingMessageCursor,"public class VMPendingMessageCursor extends AbstractPendingMessageCursor { private final PendingList list; private Iterator<MessageReference> iter; public VMPendingMessageCursor(boolean prioritizedMessages) { super(prioritizedMessages); if (this prioritizedMessages) { this list= new PrioritizedPendingList(); }else { this list = new OrderedPendingList(); } } public synchronized List<MessageReference> remove(ConnectionContext context, Destination destination) throws Exception { List<MessageReference> rc = new ArrayList<MessageReference>(); for (Iterator<MessageReference> iterator = list iterator(); iterator hasNext();) { MessageReference r = iterator next(); if (r getRegionDestination() == destination) { r decrementReferenceCount(); rc add(r); iterator remove(); } } return rc; } public synchronized boolean isEmpty() { if (list isEmpty()) { return true; } else { for (Iterator<MessageReference> iterator = list iterator(); iterator hasNext();) { MessageReference node = iterator next(); if (node == QueueMessageReference NULL MESSAGE) { continue; } if (!node isDropped()) { return false; } iterator remove(); } return true; } } public synchronized void reset() { iter = list iterator(); last = null; } public synchronized void addMessageLast(MessageReference node) { node incrementReferenceCount(); list addMessageLast(node); } public synchronized void addMessageFirst(MessageReference node) { node incrementReferenceCount(); list addMessageFirst(node); } public synchronized boolean hasNext() { return iter hasNext(); } public synchronized MessageReference next() { last = iter next(); if (last != null) { last incrementReferenceCount(); } return last; } public synchronized void remove() { if (last != null) { last decrementReferenceCount(); } iter remove(); } public synchronized int size() { return list size(); } public synchronized void clear() { for (Iterator<MessageReference> i = list iterator(); i hasNext();) { MessageReference ref = i next(); ref decrementReferenceCount(); } list clear(); } public synchronized void remove(MessageReference node) { list remove(node); node decrementReferenceCount(); } public LinkedList<MessageReference> pageInList(int maxItems) { LinkedList<MessageReference> result = new LinkedList<MessageReference>(); for (Iterator<MessageReference>i = list iterator();i hasNext();) { MessageReference ref = i next(); ref incrementReferenceCount(); result add(ref); if (result size() >= maxItems) { break; } } return result; } public boolean isTransient() { return true; } public void destroy() throws Exception { super destroy(); clear(); } }",1.0,
287,287,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\group\EmptyMessageGroupSet.,EmptyMessageGroupSet,public class EmptyMessageGroupSet implements MessageGroupSet { public static final MessageGroupSet INSTANCE = new EmptyMessageGroupSet(); public boolean contains(String groupID) { return false; } },1.0,
288,288,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\group\MessageGroupHashBucket.,MessageGroupHashBucket,"public class MessageGroupHashBucket implements MessageGroupMap { private final int bucketCount; private final ConsumerId[] consumers; public MessageGroupHashBucket(int bucketCount) { this bucketCount = bucketCount; this consumers = new ConsumerId[bucketCount]; } public void put(String groupId, ConsumerId consumerId) { int bucket = getBucketNumber(groupId); consumers[bucket] = consumerId; } public ConsumerId get(String groupId) { int bucket = getBucketNumber(groupId); return consumers[bucket]; } public ConsumerId removeGroup(String groupId) { int bucket = getBucketNumber(groupId); ConsumerId answer = consumers[bucket]; consumers[bucket] = null; return answer; } public MessageGroupSet removeConsumer(ConsumerId consumerId) { MessageGroupSet answer = null; for (int i = 0; i < consumers length; i++) { ConsumerId owner = consumers[i]; if (owner != null && owner equals(consumerId)) { answer = createMessageGroupSet(i, answer); consumers[i] = null; } } if (answer == null) { answer = EmptyMessageGroupSet INSTANCE; } return answer; } public String toString() { int count = 0; for (int i = 0; i < consumers length; i++) { if (consumers[i] != null) { count++; } } return active message group buckets + count; } protected MessageGroupSet createMessageGroupSet(int bucketNumber, final MessageGroupSet parent) { final MessageGroupSet answer = createMessageGroupSet(bucketNumber); if (parent == null) { return answer; } else { return new MessageGroupSet() { public boolean contains(String groupID) { return parent contains(groupID) || answer contains(groupID); } }; } } protected MessageGroupSet createMessageGroupSet(final int bucketNumber) { return new MessageGroupSet() { public boolean contains(String groupID) { int bucket = getBucketNumber(groupID); return bucket == bucketNumber; } }; } protected int getBucketNumber(String groupId) { int bucket = groupId hashCode() % bucketCount; if (bucket < 0) { bucket *= -1; } return bucket; } }",1.0,
289,289,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\group\MessageGroupHashBucketFactory.,MessageGroupHashBucketFactory,public class MessageGroupHashBucketFactory implements MessageGroupMapFactory { private int bucketCount = 1024; public MessageGroupMap createMessageGroupMap() { return new MessageGroupHashBucket(bucketCount); } public int getBucketCount() { return bucketCount; } public void setBucketCount(int bucketCount) { this bucketCount = bucketCount; } },1.0,
290,290,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\group\SimpleMessageGroupMap.,SimpleMessageGroupMap,"public class SimpleMessageGroupMap implements MessageGroupMap { private Map<String, ConsumerId> map = new ConcurrentHashMap<String, ConsumerId>(); public void put(String groupId, ConsumerId consumerId) { map put(groupId, consumerId); } public ConsumerId get(String groupId) { return map get(groupId); } public ConsumerId removeGroup(String groupId) { return map remove(groupId); } public MessageGroupSet removeConsumer(ConsumerId consumerId) { SimpleMessageGroupSet ownedGroups = new SimpleMessageGroupSet(); for (Iterator<String> iter = map keySet() iterator(); iter hasNext();) { String group = iter next(); ConsumerId owner = map get(group); if (owner equals(consumerId)) { ownedGroups add(group); iter remove(); } } return ownedGroups; } public String toString() { return message groups + map size(); } }",1.0,
291,291,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\group\SimpleMessageGroupMapFactory.,SimpleMessageGroupMapFactory,public class SimpleMessageGroupMapFactory implements MessageGroupMapFactory { public MessageGroupMap createMessageGroupMap() { return new SimpleMessageGroupMap(); } },1.0,
294,294,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\AbstractDeadLetterStrategy.,AbstractDeadLetterStrategy,"public abstract class AbstractDeadLetterStrategy implements DeadLetterStrategy { private static final Logger LOG = LoggerFactory getLogger(AbstractDeadLetterStrategy class); private boolean processNonPersistent = false; private boolean processExpired = true; private boolean enableAudit = true; private ActiveMQMessageAudit messageAudit = new ActiveMQMessageAudit(); public boolean isSendToDeadLetterQueue(Message message) { boolean result = false; if (message != null) { result = true; if (enableAudit && messageAudit isDuplicate(message)) { result = false; if (LOG isDebugEnabled()) { LOG debug( Not adding duplicate to DLQ + message getMessageId() + , dest + message getDestination()); } } if (!message isPersistent() && !processNonPersistent) { result = false; } if (message isExpired() && !processExpired) { result = false; } } return result; } public boolean isProcessExpired() { return this processExpired; } public void setProcessExpired(boolean processExpired) { this processExpired = processExpired; } public boolean isProcessNonPersistent() { return this processNonPersistent; } public void setProcessNonPersistent(boolean processNonPersistent) { this processNonPersistent = processNonPersistent; } public boolean isEnableAudit() { return enableAudit; } public void setEnableAudit(boolean enableAudit) { this enableAudit = enableAudit; } }",1.0,
295,295,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\ConstantPendingMessageLimitStrategy.,ConstantPendingMessageLimitStrategy,public class ConstantPendingMessageLimitStrategy implements PendingMessageLimitStrategy { private int limit = -1; public int getMaximumPendingMessageLimit(TopicSubscription subscription) { return limit; } public int getLimit() { return limit; } public void setLimit(int limit) { this limit = limit; } },1.0,
296,296,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\FilePendingDurableSubscriberMessageStoragePolicy.,FilePendingDurableSubscriberMessageStoragePolicy,"public class FilePendingDurableSubscriberMessageStoragePolicy implements PendingDurableSubscriberMessageStoragePolicy { public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String clientId, String name, int maxBatchSize, DurableTopicSubscription sub) { return new FilePendingMessageCursor(broker,name,AbstractPendingMessageCursor isPrioritizedMessageSubscriber(broker, sub)); } }",1.0,
297,297,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\FilePendingQueueMessageStoragePolicy.,FilePendingQueueMessageStoragePolicy,"public class FilePendingQueueMessageStoragePolicy implements PendingQueueMessageStoragePolicy { public PendingMessageCursor getQueuePendingMessageCursor(Broker broker,Queue queue) { return new FilePendingMessageCursor(broker, PendingCursor + queue getName(),queue isPrioritizedMessages()); } }",1.0,
298,298,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\FilePendingSubscriberMessageStoragePolicy.,FilePendingSubscriberMessageStoragePolicy,"public class FilePendingSubscriberMessageStoragePolicy implements PendingSubscriberMessageStoragePolicy { public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker, String name, int maxBatchSize, Subscription subs) { return new FilePendingMessageCursor(broker, PendingCursor + name, AbstractPendingMessageCursor isPrioritizedMessageSubscriber(broker, subs)); } }",1.0,
299,299,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\FixedCountSubscriptionRecoveryPolicy.,FixedCountSubscriptionRecoveryPolicy,"public class FixedCountSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy { private volatile MessageReference messages[]; private int maximumSize = 100; private int tail; public SubscriptionRecoveryPolicy copy() { FixedCountSubscriptionRecoveryPolicy rc = new FixedCountSubscriptionRecoveryPolicy(); rc setMaximumSize(maximumSize); return rc; } public synchronized boolean add(ConnectionContext context, MessageReference node) throws Exception { messages[tail++] = node; if (tail >= messages length) { tail = 0; } return true; } public synchronized void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception { int t = tail; if (messages[t] == null) { t = 0; } if (messages[t] == null) { return; } do { MessageReference node = messages[t]; sub addRecoveredMessage(context, node); t++; if (t >= messages length) { t = 0; } } while (t != tail); } public void start() throws Exception { messages = new MessageReference[maximumSize]; } public void stop() throws Exception { messages = null; } public int getMaximumSize() { return maximumSize; } public void setMaximumSize(int maximumSize) { this maximumSize = maximumSize; } public synchronized Message[] browse(ActiveMQDestination destination) throws Exception { List<Message> result = new ArrayList<Message>(); DestinationFilter filter = DestinationFilter parseFilter(destination); int t = tail; if (messages[t] == null) { t = 0; } if (messages[t] != null) { do { MessageReference ref = messages[t]; Message message = ref getMessage(); if (filter matches(message getDestination())) { result add(message); } t++; if (t >= messages length) { t = 0; } } while (t != tail); } return result toArray(new Message[result size()]); } public void setBroker(Broker broker) { } }",1.0,
300,300,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\FixedSizedSubscriptionRecoveryPolicy.,FixedSizedSubscriptionRecoveryPolicy,"public class FixedSizedSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy { private MessageList buffer; private int maximumSize = 64 * 1024; private boolean useSharedBuffer = true; public FixedSizedSubscriptionRecoveryPolicy() { } public SubscriptionRecoveryPolicy copy() { FixedSizedSubscriptionRecoveryPolicy rc = new FixedSizedSubscriptionRecoveryPolicy(); rc setMaximumSize(maximumSize); rc setUseSharedBuffer(useSharedBuffer); return rc; } public boolean add(ConnectionContext context, MessageReference message) throws Exception { buffer add(message); return true; } public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception { List copy = buffer getMessages(sub getActiveMQDestination()); if (!copy isEmpty()) { for (Iterator iter = copy iterator(); iter hasNext();) { MessageReference node = (MessageReference)iter next(); sub addRecoveredMessage(context, node); } } } public void start() throws Exception { buffer = createMessageList(); } public void stop() throws Exception { buffer clear(); } public MessageList getBuffer() { return buffer; } public void setBuffer(MessageList buffer) { this buffer = buffer; } public int getMaximumSize() { return maximumSize; } public void setMaximumSize(int maximumSize) { this maximumSize = maximumSize; } public boolean isUseSharedBuffer() { return useSharedBuffer; } public void setUseSharedBuffer(boolean useSharedBuffer) { this useSharedBuffer = useSharedBuffer; } public Message[] browse(ActiveMQDestination destination) throws Exception { return buffer browse(destination); } public void setBroker(Broker broker) { } protected MessageList createMessageList() { if (useSharedBuffer) { return new SimpleMessageList(maximumSize); } else { return new DestinationBasedMessageList(maximumSize); } } }",1.0,
302,302,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\LastImageSubscriptionRecoveryPolicy.,LastImageSubscriptionRecoveryPolicy,"public class LastImageSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy { private volatile MessageReference lastImage; public boolean add(ConnectionContext context, MessageReference node) throws Exception { lastImage = node; return true; } public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception { MessageReference node = lastImage; if (node != null) { sub addRecoveredMessage(context, node); } } public void start() throws Exception { } public void stop() throws Exception { } public Message[] browse(ActiveMQDestination destination) throws Exception { List<Message> result = new ArrayList<Message>(); if (lastImage != null) { DestinationFilter filter = DestinationFilter parseFilter(destination); if (filter matches(lastImage getMessage() getDestination())) { result add(lastImage getMessage()); } } return result toArray(new Message[result size()]); } public SubscriptionRecoveryPolicy copy() { return new LastImageSubscriptionRecoveryPolicy(); } public void setBroker(Broker broker) { } }",1.0,
303,303,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\MessageEvictionStrategySupport.,MessageEvictionStrategySupport,public abstract class MessageEvictionStrategySupport implements MessageEvictionStrategy { private int evictExpiredMessagesHighWatermark = 1000; public int getEvictExpiredMessagesHighWatermark() { return evictExpiredMessagesHighWatermark; } public void setEvictExpiredMessagesHighWatermark(int evictExpiredMessagesHighWaterMark) { this evictExpiredMessagesHighWatermark = evictExpiredMessagesHighWaterMark; } },1.0,
304,304,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\NoSubscriptionRecoveryPolicy.,NoSubscriptionRecoveryPolicy,"public class NoSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy { public SubscriptionRecoveryPolicy copy() { return this; } public boolean add(ConnectionContext context, MessageReference node) throws Exception { return true; } public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception { } public void start() throws Exception { } public void stop() throws Exception { } public Message[] browse(ActiveMQDestination dest) throws Exception { return new Message[0]; } public void setBroker(Broker broker) { } }",1.0,
305,305,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\OldestMessageEvictionStrategy.,OldestMessageEvictionStrategy,public class OldestMessageEvictionStrategy extends MessageEvictionStrategySupport { public MessageReference[] evictMessages(LinkedList messages) { return new MessageReference[] {(MessageReference) messages removeFirst()}; } },1.0,
306,306,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\OldestMessageWithLowestPriorityEvictionStrategy.,OldestMessageWithLowestPriorityEvictionStrategy,public class OldestMessageWithLowestPriorityEvictionStrategy extends MessageEvictionStrategySupport { public MessageReference[] evictMessages(LinkedList messages) throws IOException { byte lowestPriority = Byte MAX VALUE; int pivot = 0; Iterator iter = messages iterator(); for (int i = 0; iter hasNext(); i++) { MessageReference reference = (MessageReference) iter next(); byte priority = reference getMessage() getPriority(); if (priority < lowestPriority) { lowestPriority = priority; pivot = i; } } return new MessageReference[] {(MessageReference) messages remove(pivot)}; } },1.0,
308,308,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\PolicyMap.,PolicyMap,public class PolicyMap extends DestinationMap { private PolicyEntry defaultEntry; public PolicyEntry getEntryFor(ActiveMQDestination destination) { PolicyEntry answer = (PolicyEntry) chooseValue(destination); if (answer == null) { answer = getDefaultEntry(); } return answer; } public void setPolicyEntries(List entries) { super setEntries(entries); } public PolicyEntry getDefaultEntry() { return defaultEntry; } public void setDefaultEntry(PolicyEntry defaultEntry) { this defaultEntry = defaultEntry; } protected Class< extends DestinationMapEntry> getEntryClass() { return PolicyEntry class; } },1.0,
309,309,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\PrefetchRatePendingMessageLimitStrategy.,PrefetchRatePendingMessageLimitStrategy,public class PrefetchRatePendingMessageLimitStrategy implements PendingMessageLimitStrategy { private double multiplier = 0 5; public int getMaximumPendingMessageLimit(TopicSubscription subscription) { int prefetchSize = subscription getConsumerInfo() getPrefetchSize(); return (int) (prefetchSize * multiplier); } public double getMultiplier() { return multiplier; } public void setMultiplier(double rate) { this multiplier = rate; } },1.0,
313,313,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\RoundRobinDispatchPolicy.,RoundRobinDispatchPolicy,"public class RoundRobinDispatchPolicy implements DispatchPolicy { static final Logger LOG = LoggerFactory getLogger(RoundRobinDispatchPolicy class); public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List<Subscription> consumers) throws Exception { int count = 0; Subscription firstMatchingConsumer = null; synchronized (consumers) { for (Iterator<Subscription> iter = consumers iterator(); iter hasNext();) { Subscription sub = iter next(); if (!sub matches(node, msgContext)) { sub unmatched(node); continue; } if (firstMatchingConsumer == null) { firstMatchingConsumer = sub; } sub add(node); count++; } if (firstMatchingConsumer != null) { try { consumers remove(firstMatchingConsumer); consumers add(firstMatchingConsumer); } catch (Throwable bestEffort) { } } } return count > 0; } }",1.0,
314,314,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\SharedDeadLetterStrategy.,SharedDeadLetterStrategy,"public class SharedDeadLetterStrategy extends AbstractDeadLetterStrategy { public static final String DEFAULT DEAD LETTER QUEUE NAME = ActiveMQ DLQ ; private ActiveMQDestination deadLetterQueue = new ActiveMQQueue(DEFAULT DEAD LETTER QUEUE NAME); public ActiveMQDestination getDeadLetterQueueFor(Message message, Subscription subscription) { return deadLetterQueue; } public ActiveMQDestination getDeadLetterQueue() { return deadLetterQueue; } public void setDeadLetterQueue(ActiveMQDestination deadLetterQueue) { this deadLetterQueue = deadLetterQueue; } }",1.0,
315,315,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\SimpleDispatchPolicy.,SimpleDispatchPolicy,"public class SimpleDispatchPolicy implements DispatchPolicy { public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List<Subscription> consumers) throws Exception { int count = 0; for (Subscription sub consumers) { if (sub getConsumerInfo() isBrowser()) { continue; } if (!sub matches(node, msgContext)) { sub unmatched(node); continue; } sub add(node); count++; } return count > 0; } }",1.0,
317,317,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\SlowConsumerEntry.,SlowConsumerEntry,public class SlowConsumerEntry { final ConnectionContext context; Object subscription; int slowCount = 1; int markCount = 0; SlowConsumerEntry(ConnectionContext context) { this context = context; } public void slow() { slowCount++; } public void mark() { markCount++; } public void setSubscription(Object subscriptionObjectName) { this subscription = subscriptionObjectName; } public Object getSubscription() { return subscription; } public int getSlowCount() { return slowCount; } public int getMarkCount() { return markCount; } },1.0,
318,318,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\StorePendingDurableSubscriberMessageStoragePolicy.,StorePendingDurableSubscriberMessageStoragePolicy,"public class StorePendingDurableSubscriberMessageStoragePolicy implements PendingDurableSubscriberMessageStoragePolicy { boolean immediatePriorityDispatch = true; boolean useCache = true; public boolean isImmediatePriorityDispatch() { return immediatePriorityDispatch; } public void setImmediatePriorityDispatch(boolean immediatePriorityDispatch) { this immediatePriorityDispatch = immediatePriorityDispatch; } public boolean isUseCache() { return useCache; } public void setUseCache(boolean useCache) { this useCache = useCache; } public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String clientId, String name, int maxBatchSize, DurableTopicSubscription sub) { StoreDurableSubscriberCursor cursor = new StoreDurableSubscriberCursor(broker,clientId, name, maxBatchSize, sub); cursor setUseCache(isUseCache()); cursor setImmediatePriorityDispatch(isImmediatePriorityDispatch()); return cursor; } }",1.0,
319,319,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\StorePendingQueueMessageStoragePolicy.,StorePendingQueueMessageStoragePolicy,"public class StorePendingQueueMessageStoragePolicy implements PendingQueueMessageStoragePolicy { public PendingMessageCursor getQueuePendingMessageCursor(Broker broker,Queue queue) { return new StoreQueueCursor(broker,queue); } }",1.0,
320,320,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\StrictOrderDispatchPolicy.,StrictOrderDispatchPolicy,"public class StrictOrderDispatchPolicy implements DispatchPolicy { public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Exception { synchronized (consumers) { int count = 0; for (Iterator iter = consumers iterator(); iter hasNext();) { Subscription sub = (Subscription)iter next(); if (!sub matches(node, msgContext)) { sub unmatched(node); continue; } sub add(node); count++; } return count > 0; } } }",1.0,
321,321,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\TimedSubscriptionRecoveryPolicy.,TimedSubscriptionRecoveryPolicy,"public class TimedSubscriptionRecoveryPolicy implements SubscriptionRecoveryPolicy { private static final int GC INTERVAL = 1000; private Scheduler scheduler; private final List<TimestampWrapper> buffer = Collections synchronizedList(new LinkedList<TimestampWrapper>()); private volatile long lastGCRun = System currentTimeMillis(); private long recoverDuration = 60 * 1000; static class TimestampWrapper { public MessageReference message; public long timestamp; public TimestampWrapper(MessageReference message, long timestamp) { this message = message; this timestamp = timestamp; } } private final Runnable gcTask = new Runnable() { public void run() { gc(); } }; public SubscriptionRecoveryPolicy copy() { TimedSubscriptionRecoveryPolicy rc = new TimedSubscriptionRecoveryPolicy(); rc setRecoverDuration(recoverDuration); return rc; } public boolean add(ConnectionContext context, MessageReference message) throws Exception { buffer add(new TimestampWrapper(message, lastGCRun)); return true; } public void recover(ConnectionContext context, Topic topic, SubscriptionRecovery sub) throws Exception { ArrayList<TimestampWrapper> copy = new ArrayList<TimestampWrapper>(buffer); if (!copy isEmpty()) { for (Iterator<TimestampWrapper> iter = copy iterator(); iter hasNext();) { TimestampWrapper timestampWrapper = iter next(); MessageReference message = timestampWrapper message; sub addRecoveredMessage(context, message); } } } public void setBroker(Broker broker) { this scheduler = broker getScheduler(); } public void start() throws Exception { scheduler executePeriodically(gcTask, GC INTERVAL); } public void stop() throws Exception { scheduler cancel(gcTask); } public void gc() { lastGCRun = System currentTimeMillis(); while (buffer size() > 0) { TimestampWrapper timestampWrapper = buffer get(0); if (lastGCRun > timestampWrapper timestamp + recoverDuration) { buffer remove(0); } else { break; } } } public long getRecoverDuration() { return recoverDuration; } public void setRecoverDuration(long recoverDuration) { this recoverDuration = recoverDuration; } public Message[] browse(ActiveMQDestination destination) throws Exception { List<Message> result = new ArrayList<Message>(); ArrayList<TimestampWrapper> copy = new ArrayList<TimestampWrapper>(buffer); DestinationFilter filter = DestinationFilter parseFilter(destination); for (Iterator<TimestampWrapper> iter = copy iterator(); iter hasNext();) { TimestampWrapper timestampWrapper = iter next(); MessageReference ref = timestampWrapper message; Message message = ref getMessage(); if (filter matches(message getDestination())) { result add(message); } } return result toArray(new Message[result size()]); } }",1.0,
322,322,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\TimedSubscriptionRecoveryPolicy.,TimestampWrapper,"static class TimestampWrapper { public MessageReference message; public long timestamp; public TimestampWrapper(MessageReference message, long timestamp) { this message = message; this timestamp = timestamp; } }",1.0,
323,323,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\UniquePropertyMessageEvictionStrategy.,UniquePropertyMessageEvictionStrategy,"public class UniquePropertyMessageEvictionStrategy extends MessageEvictionStrategySupport { private static final Logger LOG = LoggerFactory getLogger(UniquePropertyMessageEvictionStrategy class); protected String propertyName; public String getPropertyName() { return propertyName; } public void setPropertyName(String propertyName) { this propertyName = propertyName; } Override public MessageReference[] evictMessages(LinkedList messages) throws IOException { MessageReference oldest = (MessageReference)messages getFirst(); HashMap<Object, MessageReference> pivots = new HashMap<Object, MessageReference>(); Iterator iter = messages iterator(); for (int i = 0; iter hasNext(); i++) { MessageReference reference = (MessageReference) iter next(); if (propertyName != null && reference getMessage() getProperty(propertyName) != null) { Object key = reference getMessage() getProperty(propertyName); if (pivots containsKey(key)) { MessageReference pivot = pivots get(key); if (reference getMessage() getTimestamp() > pivot getMessage() getTimestamp()) { pivots put(key, reference); } } else { pivots put(key, reference); } } } if (!pivots isEmpty()) { for (MessageReference ref pivots values()) { messages remove(ref); } if (messages size() != 0) { return (MessageReference[])messages toArray(new MessageReference[messages size()]); } } return new MessageReference[] {oldest}; } }",1.0,
324,324,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\VMPendingDurableSubscriberMessageStoragePolicy.,VMPendingDurableSubscriberMessageStoragePolicy,"public class VMPendingDurableSubscriberMessageStoragePolicy implements PendingDurableSubscriberMessageStoragePolicy { public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String clientId, String name,int maxBatchSize, DurableTopicSubscription sub) { return new VMPendingMessageCursor(AbstractPendingMessageCursor isPrioritizedMessageSubscriber(broker, sub)); } }",1.0,
325,325,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\VMPendingQueueMessageStoragePolicy.,VMPendingQueueMessageStoragePolicy,"public class VMPendingQueueMessageStoragePolicy implements PendingQueueMessageStoragePolicy { public PendingMessageCursor getQueuePendingMessageCursor(Broker broker,Queue queue) { return new VMPendingMessageCursor(queue isPrioritizedMessages()); } }",1.0,
326,326,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\VMPendingSubscriberMessageStoragePolicy.,VMPendingSubscriberMessageStoragePolicy,"public class VMPendingSubscriberMessageStoragePolicy implements PendingSubscriberMessageStoragePolicy { public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String name,int maxBatchSize,Subscription subs) { return new VMPendingMessageCursor(AbstractPendingMessageCursor isPrioritizedMessageSubscriber(broker, subs)); } }",1.0,
329,329,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\virtual\CompositeQueue.,CompositeQueue,public class CompositeQueue extends CompositeDestination { public ActiveMQDestination getVirtualDestination() { return new ActiveMQQueue(getName()); } },1.0,
330,330,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\virtual\CompositeTopic.,CompositeTopic,public class CompositeTopic extends CompositeDestination { public ActiveMQDestination getVirtualDestination() { return new ActiveMQTopic(getName()); } },1.0,
337,337,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\scheduler\JobSchedulerFacade.,JobSchedulerFacade,"public class JobSchedulerFacade implements JobScheduler { private final SchedulerBroker broker; JobSchedulerFacade(SchedulerBroker broker){ this broker=broker; } public void addListener(JobListener l) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js addListener(l); } } public List<Job> getAllJobs() throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { return js getAllJobs(); } return Collections emptyList(); } public List<Job> getAllJobs(long start, long finish) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { return js getAllJobs(start,finish); } return Collections emptyList(); } public String getName() throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { return js getName(); } return ; } public List<Job> getNextScheduleJobs() throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { return js getNextScheduleJobs(); } return Collections emptyList(); } public long getNextScheduleTime() throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { return js getNextScheduleTime(); } return 0; } public void remove(long time) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js remove(time); } } public void remove(String jobId) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js remove(jobId); } } public void removeAllJobs() throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js removeAllJobs(); } } public void removeAllJobs(long start, long finish) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js removeAllJobs(start,finish); } } public void removeListener(JobListener l) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js removeListener(l); } } public void schedule(String jobId, ByteSequence payload, long delay) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js schedule(jobId, payload, delay); } } public void schedule(String jobId, ByteSequence payload,String cronEntry, long start, long period, int repeat) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js schedule(jobId, payload, cronEntry,start,period,repeat); } } public void schedule(String jobId, ByteSequence payload, String cronEntry) throws Exception { JobScheduler js = this broker getInternalScheduler(); if (js !=null) { js schedule(jobId, payload, cronEntry); } } }",1.0,
338,338,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\scheduler\JobSupport.,JobSupport,public class JobSupport { public static String getDateTime(long value) { DateFormat dateFormat = new SimpleDateFormat( yyyy-MM-dd HH mm ss ); Date date = new Date(value); return dateFormat format(date); } public static long getDataTime(String value) throws Exception { DateFormat dfm = new SimpleDateFormat( yyyy-MM-dd HH mm ss ); Date date = dfm parse(value); return date getTime(); } },1.0,
340,340,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\AuditLogEntry.,AuditLogEntry,"public class AuditLogEntry { protected String user = anonymous ; protected long timestamp; protected String operation; protected String remoteAddr; SimpleDateFormat formatter = new SimpleDateFormat( dd-MM-yyyy HH mm ss,SSS ); protected Map<String, Object> parameters = new HashMap<String, Object>(); public String getUser() { return user; } public void setUser(String user) { this user = user; } public long getTimestamp() { return timestamp; } public void setTimestamp(long timestamp) { this timestamp = timestamp; } public String getFormattedTime() { return formatter format(new Date(timestamp)); } public String getOperation() { return operation; } public void setOperation(String operation) { this operation = operation; } public String getRemoteAddr() { return remoteAddr; } public void setRemoteAddr(String remoteAddr) { this remoteAddr = remoteAddr; } public Map<String, Object> getParameters() { return parameters; } public void setParameters(Map<String, Object> parameters) { this parameters = parameters; } }",1.0,
341,341,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\AuditLogService.,AuditLogService,public class AuditLogService { private AuditLogFactory factory; private static AuditLogService auditLog; public static AuditLogService getAuditLog() { if (auditLog == null) { auditLog = new AuditLogService(); } return auditLog; } private AuditLogService() { factory = new DefaultAuditLogFactory(); } public void log(AuditLogEntry entry) { for (AuditLog log factory getAuditLogs()) { log log(entry); } } public void setFactory(AuditLogFactory factory) { this factory = factory; } },1.0,
343,343,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\CommandMessageListener.,CommandMessageListener,"public class CommandMessageListener implements MessageListener { private static final Logger LOG = LoggerFactory getLogger(CommandMessageListener class); private Session session; private MessageProducer producer; private CommandHandler handler; public CommandMessageListener(Session session) { this session = session; } public void onMessage(Message message) { if (LOG isDebugEnabled()) { LOG debug( Received command + message); } if (message instanceof TextMessage) { TextMessage request = (TextMessage)message; try { Destination replyTo = message getJMSReplyTo(); if (replyTo == null) { LOG warn( Ignored message as no JMSReplyTo set + message); return; } Message response = processCommand(request); addReplyHeaders(request, response); getProducer() send(replyTo, response); } catch (Exception e) { LOG error( Failed to process message due to + e + Message + message, e); } } else { LOG warn( Ignoring invalid message + message); } } protected void addReplyHeaders(TextMessage request, Message response) throws JMSException { String correlationID = request getJMSCorrelationID(); if (correlationID != null) { response setJMSCorrelationID(correlationID); } } public Message processCommand(TextMessage request) throws Exception { TextMessage response = session createTextMessage(); getHandler() processCommand(request, response); return response; } public String processCommandText(String line) throws Exception { TextMessage request = new ActiveMQTextMessage(); request setText(line); TextMessage response = new ActiveMQTextMessage(); getHandler() processCommand(request, response); return response getText(); } public Session getSession() { return session; } public MessageProducer getProducer() throws JMSException { if (producer == null) { producer = getSession() createProducer(null); } return producer; } public CommandHandler getHandler() throws IllegalAccessException, IOException, InstantiationException, ClassNotFoundException { if (handler == null) { handler = createHandler(); } return handler; } private CommandHandler createHandler() throws IllegalAccessException, IOException, ClassNotFoundException, InstantiationException { FactoryFinder factoryFinder = new FactoryFinder( META-INF/services/org/apache/activemq/broker/ ); return (CommandHandler)factoryFinder newInstance( agent ); } }",1.0,
345,345,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\DefaultAuditLogFactory.,DefaultAuditLogFactory,public class DefaultAuditLogFactory implements AuditLogFactory { private ArrayList<AuditLog> auditLogs = new ArrayList<AuditLog>(); public DefaultAuditLogFactory() { ServiceLoader<AuditLog> logs = ServiceLoader load(AuditLog class); for (AuditLog log logs) { auditLogs add(log); } if (auditLogs size() == 0) { auditLogs add(new DefaultAuditLog()); } } Override public List<AuditLog> getAuditLogs() { return auditLogs; } },1.0,
347,347,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\InsertionCountList.,InsertionCountList,"public class InsertionCountList<T> extends AbstractList<T> { int size = 0; Override public void add(int index, T element) { size++; } Override public int size() { return size; } Override public T get(int index) { return null; } }",1.0,
348,348,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\JMXAuditLogEntry.,JMXAuditLogEntry,public class JMXAuditLogEntry extends AuditLogEntry { Override public String toString() { return user trim() + called + operation + Arrays toString((Object[])parameters get( arguments )) + at + getFormattedTime(); } },1.0,
350,350,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\MulticastTraceBrokerPlugin.,MulticastTraceBrokerPlugin,public class MulticastTraceBrokerPlugin extends UDPTraceBrokerPlugin { private int timeToLive = 1; public MulticastTraceBrokerPlugin() { try { destination = new URI( multicast } catch (URISyntaxException wontHappen) { } } protected DatagramSocket createSocket() throws IOException { MulticastSocket s = new MulticastSocket(); s setSendBufferSize(maxTraceDatagramSize); s setBroadcast(broadcast); s setLoopbackMode(true); s setTimeToLive(timeToLive); return s; } public int getTimeToLive() { return timeToLive; } public void setTimeToLive(int timeToLive) { this timeToLive = timeToLive; } },1.0,
351,351,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\RedeliveryPlugin.,RedeliveryPlugin,"public class RedeliveryPlugin extends BrokerPluginSupport { private static final Logger LOG = LoggerFactory getLogger(RedeliveryPlugin class); public static final String REDELIVERY DELAY = redeliveryDelay ; RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap(); boolean sendToDlqIfMaxRetriesExceeded = true; private boolean fallbackToDeadLetter = true; Override public Broker installPlugin(Broker broker) throws Exception { if (!broker getBrokerService() isSchedulerSupport()) { throw new IllegalStateException( RedeliveryPlugin requires schedulerSupport=true on the broker ); } validatePolicyDelay(1000); return super installPlugin(broker); } private void validatePolicyDelay(long limit) { final ActiveMQDestination matchAll = new AnyDestination(new ActiveMQDestination[]{new ActiveMQQueue( > ), new ActiveMQTopic( > )}); for (Object entry redeliveryPolicyMap get(matchAll)) { RedeliveryPolicy redeliveryPolicy = (RedeliveryPolicy) entry; validateLimit(limit, redeliveryPolicy); } RedeliveryPolicy defaultEntry = redeliveryPolicyMap getDefaultEntry(); if (defaultEntry != null) { validateLimit(limit, defaultEntry); } } private void validateLimit(long limit, RedeliveryPolicy redeliveryPolicy) { if (redeliveryPolicy getInitialRedeliveryDelay() < limit) { throw new IllegalStateException( RedeliveryPolicy initialRedeliveryDelay must exceed + limit + + redeliveryPolicy); } if (redeliveryPolicy getRedeliveryDelay() < limit) { throw new IllegalStateException( RedeliveryPolicy redeliveryDelay must exceed + limit + + redeliveryPolicy); } } public RedeliveryPolicyMap getRedeliveryPolicyMap() { return redeliveryPolicyMap; } public void setRedeliveryPolicyMap(RedeliveryPolicyMap redeliveryPolicyMap) { this redeliveryPolicyMap = redeliveryPolicyMap; } public boolean isSendToDlqIfMaxRetriesExceeded() { return sendToDlqIfMaxRetriesExceeded; } public void setSendToDlqIfMaxRetriesExceeded(boolean sendToDlqIfMaxRetriesExceeded) { this sendToDlqIfMaxRetriesExceeded = sendToDlqIfMaxRetriesExceeded; } public boolean isFallbackToDeadLetter() { return fallbackToDeadLetter; } public void setFallbackToDeadLetter(boolean fallbackToDeadLetter) { this fallbackToDeadLetter = fallbackToDeadLetter; } Override public void sendToDeadLetterQueue(ConnectionContext context, MessageReference messageReference, Subscription subscription) { if (messageReference isExpired()) { super sendToDeadLetterQueue(context, messageReference, subscription); } else { try { Destination regionDestination = (Destination) messageReference getRegionDestination(); final RedeliveryPolicy redeliveryPolicy = redeliveryPolicyMap getEntryFor(regionDestination getActiveMQDestination()); if (redeliveryPolicy != null) { int redeliveryCount = messageReference getRedeliveryCounter(); if (redeliveryCount < redeliveryPolicy getMaximumRedeliveries()) { long delay = ( redeliveryCount == 0 redeliveryPolicy getInitialRedeliveryDelay() redeliveryPolicy getNextRedeliveryDelay(getExistingDelay(messageReference))); scheduleRedelivery(context, messageReference, delay, ++redeliveryCount); } else if (isSendToDlqIfMaxRetriesExceeded()) { super sendToDeadLetterQueue(context, messageReference, subscription); } else { LOG debug( Discarding message that exceeds max redelivery count, + messageReference getMessageId()); } } else if (isFallbackToDeadLetter()) { super sendToDeadLetterQueue(context, messageReference, subscription); } else { LOG debug( Ignoring dlq request for + messageReference getMessageId() + , RedeliveryPolicy not found (and no fallback) for + regionDestination getActiveMQDestination()); } } catch (Exception exception) { RuntimeException toThrow = new RuntimeException( Failed to schedule redelivery for + messageReference getMessageId(), exception); LOG error(toThrow toString(), exception); throw toThrow; } } } private void scheduleRedelivery(ConnectionContext context, MessageReference messageReference, long delay, int redeliveryCount) throws Exception { if (LOG isTraceEnabled()) { Destination regionDestination = (Destination) messageReference getRegionDestination(); LOG trace( redelivery + redeliveryCount + of + messageReference getMessageId() + with delay + delay + , dest + regionDestination getActiveMQDestination()); } final Message old = messageReference getMessage(); Message message = old copy(); message setTransactionId(null); message setMemoryUsage(null); message setMarshalledProperties(null); message removeProperty(ScheduledMessage AMQ SCHEDULED ID); message setProperty(REDELIVERY DELAY, delay); message setProperty(ScheduledMessage AMQ SCHEDULED DELAY, delay); message setRedeliveryCounter(redeliveryCount); boolean originalFlowControl = context isProducerFlowControl(); try { context setProducerFlowControl(false); ProducerInfo info = new ProducerInfo(); ProducerState state = new ProducerState(info); ProducerBrokerExchange producerExchange = new ProducerBrokerExchange(); producerExchange setProducerState(state); producerExchange setMutable(true); producerExchange setConnectionContext(context); context getBroker() send(producerExchange, message); } finally { context setProducerFlowControl(originalFlowControl); } } private int getExistingDelay(MessageReference messageReference) throws IOException { Object val = messageReference getMessage() getProperty(REDELIVERY DELAY); if (val instanceof Long) { return ((Long)val) intValue(); } return 0; } }",1.0,
353,353,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\util\TraceBrokerPathPlugin.,TraceBrokerPathPlugin,"public class TraceBrokerPathPlugin extends BrokerPluginSupport { private String stampProperty = BrokerPath ; private static final Logger LOG = LoggerFactory getLogger(TraceBrokerPathPlugin class); public String getStampProperty() { return stampProperty; } public void setStampProperty(String stampProperty) { if (stampProperty != null && !stampProperty isEmpty()) { this stampProperty = stampProperty; } } public void preProcessDispatch(MessageDispatch messageDispatch) { try { if (messageDispatch != null && messageDispatch getMessage() != null) { String brokerStamp = (String)messageDispatch getMessage() getProperty(getStampProperty()); if (brokerStamp == null) { brokerStamp = getBrokerName(); } else { brokerStamp += , + getBrokerName(); } messageDispatch getMessage() setProperty(getStampProperty(), brokerStamp); messageDispatch getMessage() setMarshalledProperties(null); } } catch (IOException ioe) { LOG warn( Setting broker property failed + ioe, ioe); } super preProcessDispatch(messageDispatch); } }",1.0,
356,356,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\view\ConnectionDotFilePlugin.,ConnectionDotFilePlugin,"public class ConnectionDotFilePlugin implements BrokerPlugin { private String file = ActiveMQConnections dot ; private boolean redrawOnRemove; public Broker installPlugin(Broker broker) throws Exception { return new ConnectionDotFileInterceptor(broker, file, redrawOnRemove); } public String getFile() { return file; } public void setFile(String file) { this file = file; } }",1.0,
358,358,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\view\DestinationDotFilePlugin.,DestinationDotFilePlugin,"public class DestinationDotFilePlugin implements BrokerPlugin { private String file = ActiveMQDestinations dot ; public Broker installPlugin(Broker broker) { return new DestinationDotFileInterceptor(broker, file); } public String getFile() { return file; } public void setFile(String file) { this file = file; } }",1.0,
359,359,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\view\DotFileInterceptorSupport.,DotFileInterceptorSupport,"public abstract class DotFileInterceptorSupport extends BrokerFilter { private final Logger log = LoggerFactory getLogger(DotFileInterceptorSupport class); private String file; public DotFileInterceptorSupport(Broker next, String file) { super(next); this file = file; } protected void generateFile() throws Exception { if (log isDebugEnabled()) { log debug( Creating DOT file at + file); } PrintWriter writer = new PrintWriter(new FileWriter(file)); try { generateFile(writer); } finally { writer close(); } } protected abstract void generateFile(PrintWriter writer) throws Exception; }",1.0,
360,360,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\filter\JAXPXPathEvaluator.,JAXPXPathEvaluator,"public class JAXPXPathEvaluator implements XPathExpression XPathEvaluator { private static final XPathFactory FACTORY = XPathFactory newInstance(); private javax xml xpath XPathExpression expression; public JAXPXPathEvaluator(String xpathExpression) { try { XPath xpath = FACTORY newXPath(); expression = xpath compile(xpathExpression); } catch (XPathExpressionException e) { throw new RuntimeException( Invalid XPath expression + xpathExpression); } } public boolean evaluate(Message message) throws JMSException { if (message instanceof TextMessage) { String text = ((TextMessage)message) getText(); return evaluate(text); } else if (message instanceof BytesMessage) { BytesMessage bm = (BytesMessage)message; byte data[] = new byte[(int)bm getBodyLength()]; bm readBytes(data); return evaluate(data); } return false; } private boolean evaluate(byte[] data) { try { InputSource inputSource = new InputSource(new ByteArrayInputStream(data)); return ((Boolean)expression evaluate(inputSource, XPathConstants BOOLEAN)) booleanValue(); } catch (XPathExpressionException e) { return false; } } private boolean evaluate(String text) { try { InputSource inputSource = new InputSource(new StringReader(text)); return ((Boolean)expression evaluate(inputSource, XPathConstants BOOLEAN)) booleanValue(); } catch (XPathExpressionException e) { return false; } } }",1.0,
361,361,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\filter\XalanXPathEvaluator.,XalanXPathEvaluator,"public class XalanXPathEvaluator implements XPathExpression XPathEvaluator { private final String xpath; public XalanXPathEvaluator(String xpath) { this xpath = xpath; } public boolean evaluate(Message m) throws JMSException { if (m instanceof TextMessage) { String text = ((TextMessage)m) getText(); return evaluate(text); } else if (m instanceof BytesMessage) { BytesMessage bm = (BytesMessage)m; byte data[] = new byte[(int)bm getBodyLength()]; bm readBytes(data); return evaluate(data); } return false; } private boolean evaluate(byte[] data) { try { InputSource inputSource = new InputSource(new ByteArrayInputStream(data)); DocumentBuilderFactory factory = DocumentBuilderFactory newInstance(); factory setNamespaceAware(true); DocumentBuilder dbuilder = factory newDocumentBuilder(); Document doc = dbuilder parse(inputSource); CachedXPathAPI cachedXPathAPI = new CachedXPathAPI(); XObject result = cachedXPathAPI eval(doc, xpath); if (result bool()) return true; else { NodeIterator iterator = cachedXPathAPI selectNodeIterator(doc, xpath); return (iterator nextNode() != null); } } catch (Throwable e) { return false; } } private boolean evaluate(String text) { try { InputSource inputSource = new InputSource(new StringReader(text)); DocumentBuilderFactory factory = DocumentBuilderFactory newInstance(); factory setNamespaceAware(true); DocumentBuilder dbuilder = factory newDocumentBuilder(); Document doc = dbuilder parse(inputSource); CachedXPathAPI cachedXPathAPI = new CachedXPathAPI(); XObject result = cachedXPathAPI eval(doc, xpath); if (result bool()) return true; else { NodeIterator iterator = cachedXPathAPI selectNodeIterator(doc, xpath); return (iterator nextNode() != null); } } catch (Throwable e) { return false; } } }",1.0,
362,362,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\CacheEntry.,CacheEntry,"public class CacheEntry { public final Object key; public final Object value; public CacheEntry next; public CacheEntry previous; public CacheEntryList owner; public CacheEntry(Object key, Object value) { this key = key; this value = value; } public boolean remove() { if (owner == null || this key == null || this next == null) { return false; } synchronized (owner tail) { this next previous = this previous; this previous next = this next; this owner = null; this next = null; this previous = null; } return true; } }",1.0,
363,363,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\CacheEntryList.,CacheEntryList,"public class CacheEntryList { public final CacheEntry tail = new CacheEntry(null, null); public CacheEntryList() { tail next = tail; tail previous = tail; } public void add(CacheEntry ce) { addEntryBefore(tail, ce); } private void addEntryBefore(CacheEntry position, CacheEntry ce) { assert ce key != null && ce next == null && ce owner == null; synchronized (tail) { ce owner = this; ce next = position; ce previous = position previous; ce previous next = ce; ce next previous = ce; } } public void clear() { synchronized (tail) { tail next = tail; tail previous = tail; } } public CacheEvictor createFIFOCacheEvictor() { return new CacheEvictor() { public CacheEntry evictCacheEntry() { CacheEntry rc; synchronized (tail) { rc = tail next; } return rc remove() rc null; } }; } public CacheEvictor createLIFOCacheEvictor() { return new CacheEvictor() { public CacheEntry evictCacheEntry() { CacheEntry rc; synchronized (tail) { rc = tail previous; } return rc remove() rc null; } }; } }",1.0,
364,364,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\CacheEvictionUsageListener.,CacheEvictionUsageListener,"public class CacheEvictionUsageListener implements UsageListener { private static final Logger LOG = LoggerFactory getLogger(CacheEvictionUsageListener class); private final List<CacheEvictor> evictors = new CopyOnWriteArrayList<CacheEvictor>(); private final int usageHighMark; private final int usageLowMark; private final TaskRunner evictionTask; private final Usage usage; public CacheEvictionUsageListener(Usage usage, int usageHighMark, int usageLowMark, TaskRunnerFactory taskRunnerFactory) { this usage = usage; this usageHighMark = usageHighMark; this usageLowMark = usageLowMark; evictionTask = taskRunnerFactory createTaskRunner(new Task() { public boolean iterate() { return evictMessages(); } }, Cache Evictor + System identityHashCode(this)); } boolean evictMessages() { LOG debug( Evicting cache memory usage + usage getPercentUsage()); List<CacheEvictor> list = new LinkedList<CacheEvictor>(evictors); while (list size() > 0 && usage getPercentUsage() > usageLowMark) { for (Iterator<CacheEvictor> iter = list iterator(); iter hasNext();) { CacheEvictor evictor = iter next(); if (evictor evictCacheEntry() == null) { iter remove(); } } } return false; } public void onUsageChanged(Usage usage, int oldPercentUsage, int newPercentUsage) { if (oldPercentUsage < newPercentUsage && usage getPercentUsage() >= usageHighMark) { try { evictionTask wakeup(); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } } public void add(CacheEvictor evictor) { evictors add(evictor); } public void remove(CacheEvictor evictor) { evictors remove(evictor); } }",1.0,
365,365,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\CacheFilter.,CacheFilter,"public class CacheFilter implements Cache { protected final Cache next; public CacheFilter(Cache next) { this next = next; } public Object put(Object key, Object value) { return next put(key, value); } public Object get(Object key) { return next get(key); } public Object remove(Object key) { return next remove(key); } public void close() { next close(); } public int size() { return next size(); } }",1.0,
366,366,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\LRUMap.,LRUMap,"public class LRUMap<K,V> extends LinkedHashMap<K,V>{ protected static final float DEFAULT LOAD FACTOR = (float) 0 75; protected static final int DEFAULT INITIAL CAPACITY = 5000; private static final long serialVersionUID = -9179676638408888162L; private int maximumSize; public LRUMap(int maximumSize) { this(DEFAULT INITIAL CAPACITY, DEFAULT LOAD FACTOR, true, maximumSize); } public LRUMap(int maximumSize, boolean accessOrder) { this(DEFAULT INITIAL CAPACITY, DEFAULT LOAD FACTOR, accessOrder, maximumSize); } public LRUMap(int initialCapacity, float loadFactor, boolean accessOrder, int maximumSize) { super(initialCapacity, loadFactor, accessOrder); this maximumSize = maximumSize; } protected boolean removeEldestEntry(Map Entry<K,V> eldest) { return size() > maximumSize; } }",1.0,
367,367,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\MapCache.,MapCache,"public class MapCache implements Cache { protected final Map<Object, Object> map; public MapCache() { this(new ConcurrentHashMap<Object, Object>()); } public MapCache(Map<Object, Object> map) { this map = map; } public Object put(Object key, Object value) { return map put(key, value); } public Object get(Object key) { return map get(key); } public Object remove(Object key) { return map remove(key); } public void close() { map clear(); } public int size() { return map size(); } }",1.0,
368,368,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\UsageManagerCacheFilter.,UsageManagerCacheFilter,"public class UsageManagerCacheFilter extends CacheFilter { private final AtomicLong totalUsage = new AtomicLong(0); private final MemoryUsage usage; public UsageManagerCacheFilter(Cache next, MemoryUsage um) { super(next); this usage = um; } public Object put(Object key, Object value) { long usageValue = getUsageOfAddedObject(value); Object rc = super put(key, value); if (rc != null) { usageValue -= getUsageOfRemovedObject(rc); } totalUsage addAndGet(usageValue); usage increaseUsage(usageValue); return rc; } public Object remove(Object key) { Object rc = super remove(key); if (rc != null) { long usageValue = getUsageOfRemovedObject(rc); totalUsage addAndGet(-usageValue); usage decreaseUsage(usageValue); } return rc; } protected long getUsageOfAddedObject(Object value) { return 1; } protected long getUsageOfRemovedObject(Object value) { return 1; } public void close() { usage decreaseUsage(totalUsage get()); } }",1.0,
369,369,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\buffer\MessageQueue.,MessageQueue,"public class MessageQueue { private MessageBuffer buffer; private LinkedList<MessageReference> list = new LinkedList<MessageReference>(); private int size; private Object lock = new Object(); private int position; public MessageQueue(MessageBuffer buffer) { this buffer = buffer; } public void add(MessageReference messageRef) { Message message = messageRef getMessageHardRef(); int delta = message getSize(); int newSize = 0; synchronized (lock) { list add(messageRef); size += delta; newSize = size; } buffer onSizeChanged(this, delta, newSize); } public void add(ActiveMQMessage message) { int delta = message getSize(); int newSize = 0; synchronized (lock) { list add(message); size += delta; newSize = size; } buffer onSizeChanged(this, delta, newSize); } public int evictMessage() { synchronized (lock) { if (!list isEmpty()) { ActiveMQMessage message = (ActiveMQMessage) list removeFirst(); int messageSize = message getSize(); size -= messageSize; return messageSize; } } return 0; } public List<MessageReference> getList() { synchronized (lock) { return new ArrayList<MessageReference>(list); } } public void appendMessages(List<MessageReference> answer) { synchronized (lock) { for (Iterator<MessageReference> iter = list iterator(); iter hasNext();) { answer add(iter next()); } } } public int getSize() { synchronized (lock) { return size; } } public int getPosition() { return position; } public void setPosition(int position) { this position = position; } public void clear() { synchronized (lock) { list clear(); size = 0; } } }",1.0,
370,370,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\buffer\OrderBasedMessageBuffer.,OrderBasedMessageBuffer,"public class OrderBasedMessageBuffer implements MessageBuffer { private int limit = 100 * 64 * 1024; private LinkedList<MessageQueue> list = new LinkedList<MessageQueue>(); private int size; private Object lock = new Object(); public OrderBasedMessageBuffer() { } public OrderBasedMessageBuffer(int limit) { this limit = limit; } public int getSize() { synchronized (lock) { return size; } } public MessageQueue createMessageQueue() { return new MessageQueue(this); } public void onSizeChanged(MessageQueue queue, int delta, int queueSize) { synchronized (lock) { list addLast(queue); size += delta; while (size > limit) { MessageQueue biggest = list removeFirst(); size -= biggest evictMessage(); } } } public void clear() { synchronized (lock) { for (Iterator<MessageQueue> iter = list iterator(); iter hasNext();) { MessageQueue queue = iter next(); queue clear(); } size = 0; } } }",1.0,
371,371,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\buffer\SizeBasedMessageBuffer.,SizeBasedMessageBuffer,"public class SizeBasedMessageBuffer implements MessageBuffer { private int limit = 100 * 64 * 1024; private List<MessageQueue> bubbleList = new ArrayList<MessageQueue>(); private int size; private Object lock = new Object(); public SizeBasedMessageBuffer() { } public SizeBasedMessageBuffer(int limit) { this limit = limit; } public int getSize() { synchronized (lock) { return size; } } public MessageQueue createMessageQueue() { MessageQueue queue = new MessageQueue(this); synchronized (lock) { queue setPosition(bubbleList size()); bubbleList add(queue); } return queue; } public void onSizeChanged(MessageQueue queue, int delta, int queueSize) { synchronized (lock) { bubbleUp(queue, queueSize); size += delta; while (size > limit) { MessageQueue biggest = bubbleList get(0); size -= biggest evictMessage(); bubbleDown(biggest, 0); } } } public void clear() { synchronized (lock) { for (Iterator<MessageQueue> iter = bubbleList iterator(); iter hasNext();) { MessageQueue queue = iter next(); queue clear(); } size = 0; } } protected void bubbleUp(MessageQueue queue, int queueSize) { int position = queue getPosition(); while (--position >= 0) { MessageQueue pivot = bubbleList get(position); if (pivot getSize() < queueSize) { swap(position, pivot, position + 1, queue); } else { break; } } } protected void bubbleDown(MessageQueue biggest, int position) { int queueSize = biggest getSize(); int end = bubbleList size(); for (int second = position + 1; second < end; second++) { MessageQueue pivot = bubbleList get(second); if (pivot getSize() > queueSize) { swap(position, biggest, second, pivot); } else { break; } position = second; } } protected void swap(int firstPosition, MessageQueue first, int secondPosition, MessageQueue second) { bubbleList set(firstPosition, second); bubbleList set(secondPosition, first); first setPosition(secondPosition); second setPosition(firstPosition); } }",1.0,
373,373,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\list\SimpleMessageList.,SimpleMessageList,public class SimpleMessageList implements MessageList { private static final Logger LOG = LoggerFactory getLogger(SimpleMessageList class); private final LinkedList<MessageReference> list = new LinkedList<MessageReference>(); private int maximumSize = 100 * 64 * 1024; private int size; private final Object lock = new Object(); public SimpleMessageList() { } public SimpleMessageList(int maximumSize) { this maximumSize = maximumSize; } public void add(MessageReference node) { int delta = node getMessageHardRef() getSize(); synchronized (lock) { list add(node); size += delta; while (size > maximumSize) { MessageReference evicted = list removeFirst(); size -= evicted getMessageHardRef() getSize(); } } } public List<MessageReference> getMessages(ActiveMQDestination destination) { return getList(); } public Message[] browse(ActiveMQDestination destination) { List<Message> result = new ArrayList<Message>(); DestinationFilter filter = DestinationFilter parseFilter(destination); synchronized (lock) { for (Iterator<MessageReference> i = list iterator(); i hasNext();) { MessageReference ref = i next(); Message msg; msg = ref getMessage(); if (filter matches(msg getDestination())) { result add(msg); } } } return result toArray(new Message[result size()]); } public List<MessageReference> getList() { synchronized (lock) { return new ArrayList<MessageReference>(list); } } public int getSize() { synchronized (lock) { return size; } } public void clear() { synchronized (lock) { list clear(); size = 0; } } },1.0,
374,374,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\CompositeDemandForwardingBridge.,CompositeDemandForwardingBridge,"public class CompositeDemandForwardingBridge extends DemandForwardingBridgeSupport { public CompositeDemandForwardingBridge(NetworkBridgeConfiguration configuration, Transport localBroker, Transport remoteBroker) { super(configuration, localBroker, remoteBroker); remoteBrokerName = remoteBroker toString(); } protected void serviceLocalBrokerInfo(Command command) throws InterruptedException { } }",1.0,
377,377,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\ConduitBridge.,ConduitBridge,"public class ConduitBridge extends DemandForwardingBridge { private static final Logger LOG = LoggerFactory getLogger(ConduitBridge class); public ConduitBridge(NetworkBridgeConfiguration configuration, Transport localBroker, Transport remoteBroker) { super(configuration, localBroker, remoteBroker); } Override protected DemandSubscription createDemandSubscription(ConsumerInfo info) throws IOException { if (addToAlreadyInterestedConsumers(info)) { return null; } info addNetworkConsumerId(info getConsumerId()); info setSelector(null); return doCreateDemandSubscription(info); } protected boolean checkPaths(BrokerId[] first, BrokerId[] second) { if (first == null || second == null) { return true; } if (Arrays equals(first, second)) { return true; } if (first[0] equals(second[0]) && first[first length - 1] equals(second[second length - 1])) { return false; } else { return true; } } protected boolean addToAlreadyInterestedConsumers(ConsumerInfo info) { boolean matched = false; for (DemandSubscription ds subscriptionMapByLocalId values()) { DestinationFilter filter = DestinationFilter parseFilter(ds getLocalInfo() getDestination()); if (filter matches(info getDestination())) { if (LOG isDebugEnabled()) { LOG debug(configuration getBrokerName() + matched (add interest) to exsting sub for + ds getRemoteInfo() + with sub + info getConsumerId()); } if (checkPaths(info getBrokerPath(), ds getRemoteInfo() getBrokerPath())) { ds add(info getConsumerId()); } matched = true; } } return matched; } Override protected void removeDemandSubscription(ConsumerId id) throws IOException { List<DemandSubscription> tmpList = new ArrayList<DemandSubscription>(); for (DemandSubscription ds subscriptionMapByLocalId values()) { if (ds remove(id)) { if (LOG isDebugEnabled()) { LOG debug(configuration getBrokerName() + removing interest in sub on + localBroker + from + remoteBrokerName + sub + id + existing matched sub + ds getRemoteInfo()); } } if (ds isEmpty()) { tmpList add(ds); } } for (DemandSubscription ds tmpList) { removeSubscription(ds); if (LOG isDebugEnabled()) { LOG debug(configuration getBrokerName() + removing sub on + localBroker + from + remoteBrokerName + + ds getRemoteInfo()); } } } }",1.0,
378,378,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\DefaultNetworkBridgeFilterFactory.,DefaultNetworkBridgeFilterFactory,"public class DefaultNetworkBridgeFilterFactory implements NetworkBridgeFilterFactory { public NetworkBridgeFilter create(ConsumerInfo info, BrokerId[] remoteBrokerPath, int networkTimeToLive) { return new NetworkBridgeFilter(info, remoteBrokerPath[0], networkTimeToLive); } }",1.0,
379,379,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\DemandForwardingBridge.,DemandForwardingBridge,"public class DemandForwardingBridge extends DemandForwardingBridgeSupport { public DemandForwardingBridge(NetworkBridgeConfiguration configuration, Transport localBroker, Transport remoteBroker) { super(configuration, localBroker, remoteBroker); } }",1.0,
381,381,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\DemandForwardingBridgeSupport.,FutureBrokerInfo,"private static class FutureBrokerInfo implements Future<BrokerInfo> { private final CountDownLatch slot = new CountDownLatch(1); private final AtomicBoolean disposed; private BrokerInfo info = null; public FutureBrokerInfo(BrokerInfo info, AtomicBoolean disposed) { this info = info; this disposed = disposed; } Override public boolean cancel(boolean mayInterruptIfRunning) { slot countDown(); return true; } Override public boolean isCancelled() { return slot getCount() == 0 && info == null; } Override public boolean isDone() { return info != null; } Override public BrokerInfo get() throws InterruptedException, ExecutionException { try { if (info == null) { while (!disposed get()) { if (slot await(1, TimeUnit SECONDS)) { break; } } } return info; } catch (InterruptedException e) { Thread currentThread() interrupt(); if (LOG isDebugEnabled()) { LOG debug( Operation interupted + e, e); } throw new InterruptedException( Interrupted ); } } Override public BrokerInfo get(long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException { try { if (info == null) { long deadline = System currentTimeMillis() + unit toMillis(timeout); while (!disposed get() || System currentTimeMillis() < deadline) { if (slot await(1, TimeUnit MILLISECONDS)) { break; } } if (info == null) { throw new TimeoutException(); } } return info; } catch (InterruptedException e) { throw new InterruptedException( Interrupted ); } } public void set(BrokerInfo info) { this info = info; this slot countDown(); } }",1.0,
383,383,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\DiscoveryNetworkConnector.,DiscoveryNetworkConnector,"public class DiscoveryNetworkConnector extends NetworkConnector implements DiscoveryListener { private static final Logger LOG = LoggerFactory getLogger(DiscoveryNetworkConnector class); private DiscoveryAgent discoveryAgent; private Map<String, String> parameters; private final ConcurrentMap<URI, DiscoveryEvent> activeEvents = new ConcurrentHashMap<URI, DiscoveryEvent>(); public DiscoveryNetworkConnector() { } public DiscoveryNetworkConnector(URI discoveryURI) throws IOException { setUri(discoveryURI); } public void setUri(URI discoveryURI) throws IOException { setDiscoveryAgent(DiscoveryAgentFactory createDiscoveryAgent(discoveryURI)); try { parameters = URISupport parseParameters(discoveryURI); IntrospectionSupport setProperties(getDiscoveryAgent(), parameters); } catch (URISyntaxException e) { LOG warn( failed to parse query parameters from discoveryURI + discoveryURI, e); } } Override public void onServiceAdd(DiscoveryEvent event) { if (serviceSupport isStopped() || serviceSupport isStopping()) { return; } String url = event getServiceName(); if (url != null) { URI uri; try { uri = new URI(url); } catch (URISyntaxException e) { LOG warn( Could not connect to remote URI + url + due to bad URI syntax + e, e); return; } if (localURI equals(uri)) { if (LOG isDebugEnabled()) { LOG debug( not connecting loopback + uri); } return; } if (connectionFilter != null && !connectionFilter connectTo(uri)) { if (LOG isDebugEnabled()) { LOG debug( connectionFilter disallows connection to + uri); } return; } if (activeEvents putIfAbsent(uri, event) != null) { if (LOG isDebugEnabled()) { LOG debug( Discovery agent generated a duplicate onServiceAdd event for + uri); } return; } URI connectUri = uri; try { connectUri = URISupport applyParameters(connectUri, parameters, DISCOVERED OPTION PREFIX); } catch (URISyntaxException e) { LOG warn( could not apply query parameters + parameters + to + connectUri, e); } if (LOG isInfoEnabled()) { LOG info( Establishing network connection from + localURI + to + connectUri); } Transport remoteTransport; Transport localTransport; try { SslContext setCurrentSslContext(getBrokerService() getSslContext()); try { remoteTransport = TransportFactory connect(connectUri); } catch (Exception e) { LOG warn( Could not connect to remote URI + connectUri + + e getMessage()); if (LOG isDebugEnabled()) { LOG debug( Connection failure exception + e, e); } activeEvents remove(uri); return; } try { localTransport = createLocalTransport(); } catch (Exception e) { ServiceSupport dispose(remoteTransport); LOG warn( Could not connect to local URI + localURI + + e getMessage()); if (LOG isDebugEnabled()) { LOG debug( Connection failure exception + e, e); } activeEvents remove(uri); return; } } finally { SslContext setCurrentSslContext(null); } NetworkBridge bridge = createBridge(localTransport, remoteTransport, event); try { synchronized (bridges) { bridges put(uri, bridge); } bridge start(); } catch (Exception e) { ServiceSupport dispose(localTransport); ServiceSupport dispose(remoteTransport); LOG warn( Could not start network bridge between + localURI + and + uri + due to + e); if (LOG isDebugEnabled()) { LOG debug( Start failure exception + e, e); } try { discoveryAgent serviceFailed(event); } catch (IOException e1) { if (LOG isDebugEnabled()) { LOG debug( Discovery agent failure while handling failure event + e1 getMessage(), e1); } } } } } Override public void onServiceRemove(DiscoveryEvent event) { String url = event getServiceName(); if (url != null) { URI uri; try { uri = new URI(url); } catch (URISyntaxException e) { LOG warn( Could not connect to remote URI + url + due to bad URI syntax + e, e); return; } if (activeEvents remove(uri, event)) { synchronized (bridges) { bridges remove(uri); } } } } public DiscoveryAgent getDiscoveryAgent() { return discoveryAgent; } public void setDiscoveryAgent(DiscoveryAgent discoveryAgent) { this discoveryAgent = discoveryAgent; if (discoveryAgent != null) { this discoveryAgent setDiscoveryListener(this); } } Override protected void handleStart() throws Exception { if (discoveryAgent == null) { throw new IllegalStateException( You must configure the discoveryAgent property ); } this discoveryAgent start(); super handleStart(); } Override protected void handleStop(ServiceStopper stopper) throws Exception { for (Iterator<NetworkBridge> i = bridges values() iterator(); i hasNext();) { NetworkBridge bridge = i next(); try { bridge stop(); } catch (Exception e) { stopper onException(this, e); } } bridges clear(); activeEvents clear(); try { this discoveryAgent stop(); } catch (Exception e) { stopper onException(this, e); } super handleStop(stopper); } protected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) { class DiscoverNetworkBridgeListener extends MBeanNetworkListener { public DiscoverNetworkBridgeListener(BrokerService brokerService, ObjectName connectorName) { super(brokerService, connectorName); } Override public void bridgeFailed() { if (!serviceSupport isStopped()) { try { discoveryAgent serviceFailed(event); } catch (IOException e) { } } } } NetworkBridgeListener listener = new DiscoverNetworkBridgeListener(getBrokerService(), getObjectName()); DemandForwardingBridge result = NetworkBridgeFactory createBridge(this, localTransport, remoteTransport, listener); result setBrokerService(getBrokerService()); return configureBridge(result); } Override public String toString() { return DiscoveryNetworkConnector + getName() + + getBrokerService(); } }",1.0,
384,384,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\DiscoveryNetworkConnector.,DiscoverNetworkBridgeListener,"class DiscoverNetworkBridgeListener extends MBeanNetworkListener { public DiscoverNetworkBridgeListener(BrokerService brokerService, ObjectName connectorName) { super(brokerService, connectorName); } Override public void bridgeFailed() { if (!serviceSupport isStopped()) { try { discoveryAgent serviceFailed(event); } catch (IOException e) { } } } }",1.0,
385,385,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\DurableConduitBridge.,DurableConduitBridge,"public class DurableConduitBridge extends ConduitBridge { private static final Logger LOG = LoggerFactory getLogger(DurableConduitBridge class); public DurableConduitBridge(NetworkBridgeConfiguration configuration, Transport localBroker, Transport remoteBroker) { super(configuration, localBroker, remoteBroker); } protected void setupStaticDestinations() { super setupStaticDestinations(); ActiveMQDestination[] dests = configuration isDynamicOnly() null durableDestinations; if (dests != null) { for (ActiveMQDestination dest dests) { if (isPermissableDestination(dest) && !doesConsumerExist(dest)) { DemandSubscription sub = createDemandSubscription(dest); if (dest isTopic()) { sub getLocalInfo() setSubscriptionName(getSubscriberName(dest)); } try { addSubscription(sub); } catch (IOException e) { LOG error( Failed to add static destination + dest, e); } if (LOG isTraceEnabled()) { LOG trace( Forwarding messages for durable destination + dest); } } } } } protected DemandSubscription createDemandSubscription(ConsumerInfo info) throws IOException { if (addToAlreadyInterestedConsumers(info)) { return null; } info addNetworkConsumerId(info getConsumerId()); if (info isDurable()) { info setSubscriptionName(getSubscriberName(info getDestination())); info setConsumerId(new ConsumerId(localSessionInfo getSessionId(), consumerIdGenerator getNextSequenceId())); } info setSelector(null); return doCreateDemandSubscription(info); } protected String getSubscriberName(ActiveMQDestination dest) { String subscriberName = DURABLE SUB PREFIX + configuration getBrokerName() + + dest getPhysicalName(); return subscriberName; } protected boolean doesConsumerExist(ActiveMQDestination dest) { DestinationFilter filter = DestinationFilter parseFilter(dest); for (DemandSubscription ds subscriptionMapByLocalId values()) { if (filter matches(ds getLocalInfo() getDestination())) { return true; } } return false; } }",1.0,
388,388,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\MBeanNetworkListener.,MBeanNetworkListener,"public class MBeanNetworkListener implements NetworkBridgeListener { private static final Logger LOG = LoggerFactory getLogger(MBeanNetworkListener class); BrokerService brokerService; ObjectName connectorName; boolean createdByDuplex = false; public MBeanNetworkListener(BrokerService brokerService, ObjectName connectorName) { this brokerService = brokerService; this connectorName = connectorName; } Override public void bridgeFailed() { } Override public void onStart(NetworkBridge bridge) { if (!brokerService isUseJmx()) { return; } NetworkBridgeViewMBean view = new NetworkBridgeView(bridge); ((NetworkBridgeView)view) setCreateByDuplex(createdByDuplex); try { ObjectName objectName = createNetworkBridgeObjectName(bridge); AnnotatedMBean registerMBean(brokerService getManagementContext(), view, objectName); bridge setMbeanObjectName(objectName); if (LOG isDebugEnabled()) { LOG debug( registered + bridge + as + objectName); } } catch (Throwable e) { LOG debug( Network bridge could not be registered in JMX + e getMessage(), e); } } Override public void onStop(NetworkBridge bridge) { if (!brokerService isUseJmx()) { return; } try { ObjectName objectName = bridge getMbeanObjectName(); if (objectName != null) { brokerService getManagementContext() unregisterMBean(objectName); } } catch (Throwable e) { LOG debug( Network bridge could not be unregistered in JMX + e getMessage(), e); } } protected ObjectName createNetworkBridgeObjectName(NetworkBridge bridge) throws MalformedObjectNameException { return BrokerMBeanSupport createNetworkBridgeObjectName(connectorName, bridge getRemoteAddress()); } public void setCreatedByDuplex(boolean createdByDuplex) { this createdByDuplex = createdByDuplex; } }",1.0,
389,389,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\MulticastNetworkConnector.,MulticastNetworkConnector,"public class MulticastNetworkConnector extends NetworkConnector { private Transport localTransport; private Transport remoteTransport; private URI remoteURI; private DemandForwardingBridgeSupport bridge; public MulticastNetworkConnector() { } public MulticastNetworkConnector(URI remoteURI) { this remoteURI = remoteURI; } public DemandForwardingBridgeSupport getBridge() { return bridge; } public void setBridge(DemandForwardingBridgeSupport bridge) { this bridge = bridge; } public Transport getLocalTransport() { return localTransport; } public void setLocalTransport(Transport localTransport) { this localTransport = localTransport; } public Transport getRemoteTransport() { return remoteTransport; } public void setRemoteTransport(Transport remoteTransport) { this remoteTransport = remoteTransport; } public URI getRemoteURI() { return remoteURI; } public void setRemoteURI(URI remoteURI) { this remoteURI = remoteURI; } protected void handleStart() throws Exception { if (remoteTransport == null) { if (remoteURI == null) { throw new IllegalArgumentException( You must specify the remoteURI property ); } remoteTransport = TransportFactory connect(remoteURI); } if (localTransport == null) { localTransport = createLocalTransport(); } bridge = createBridge(localTransport, remoteTransport); configureBridge(bridge); bridge start(); remoteTransport start(); localTransport start(); super handleStart(); } protected void handleStop(ServiceStopper stopper) throws Exception { super handleStop(stopper); if (bridge != null) { try { bridge stop(); } catch (Exception e) { stopper onException(this, e); } } if (remoteTransport != null) { try { remoteTransport stop(); } catch (Exception e) { stopper onException(this, e); } } if (localTransport != null) { try { localTransport stop(); } catch (Exception e) { stopper onException(this, e); } } } Override public String toString() { return getClass() getName() + + getName() + [ + remoteTransport toString() + ] ; } protected DemandForwardingBridgeSupport createBridge(Transport local, Transport remote) { CompositeDemandForwardingBridge bridge = new CompositeDemandForwardingBridge(this, local, remote); bridge setBrokerService(getBrokerService()); return bridge; } }",1.0,
391,391,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\NetworkBridgeFactory.,NetworkBridgeFactory,"public final class NetworkBridgeFactory { private NetworkBridgeFactory() { } public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration config, Transport localTransport, Transport remoteTransport) { return createBridge(config, localTransport, remoteTransport, null); } public static DemandForwardingBridge createBridge(NetworkBridgeConfiguration configuration, Transport localTransport, Transport remoteTransport, final NetworkBridgeListener listener) { DemandForwardingBridge result = null; if (configuration isConduitSubscriptions()) { result = new DurableConduitBridge(configuration, localTransport, remoteTransport); } else { result = new DemandForwardingBridge(configuration, localTransport, remoteTransport); } if (listener != null) { result setNetworkBridgeListener(listener); } return result; } public static Transport createLocalTransport(Broker broker) throws Exception { URI uri = broker getVmConnectorURI(); HashMap<String, String> map = new HashMap<String, String>(URISupport parseParameters(uri)); map put( network , true ); map put( async , false ); uri = URISupport createURIWithQuery(uri, URISupport createQueryString(map)); return TransportFactory connect(uri); } }",1.0,
393,393,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\DestinationBridge.,DestinationBridge,"public abstract class DestinationBridge implements Service, MessageListener { private static final Logger LOG = LoggerFactory getLogger(DestinationBridge class); protected MessageConsumer consumer; protected AtomicBoolean started = new AtomicBoolean(false); protected JmsMesageConvertor jmsMessageConvertor; protected boolean doHandleReplyTo = true; protected JmsConnector jmsConnector; public MessageConsumer getConsumer() { return consumer; } public void setConsumer(MessageConsumer consumer) { this consumer = consumer; } public void setJmsConnector(JmsConnector connector) { this jmsConnector = connector; } public JmsMesageConvertor getJmsMessageConvertor() { return jmsMessageConvertor; } public void setJmsMessageConvertor(JmsMesageConvertor jmsMessageConvertor) { this jmsMessageConvertor = jmsMessageConvertor; } protected Destination processReplyToDestination(Destination destination) { return jmsConnector createReplyToBridge(destination, getConnnectionForConsumer(), getConnectionForProducer()); } public void start() throws Exception { if (started compareAndSet(false, true)) { createConsumer(); createProducer(); } } public void stop() throws Exception { started set(false); } public void onMessage(Message message) { int attempt = 0; final int maxRetries = jmsConnector getReconnectionPolicy() getMaxSendRetries(); while (started get() && message != null && attempt <= maxRetries) { try { if (attempt++ > 0) { try { Thread sleep(jmsConnector getReconnectionPolicy() getNextDelay(attempt)); } catch(InterruptedException e) { break; } } Message converted; if (jmsMessageConvertor != null) { if (doHandleReplyTo) { Destination replyTo = message getJMSReplyTo(); if (replyTo != null) { converted = jmsMessageConvertor convert(message, processReplyToDestination(replyTo)); } else { converted = jmsMessageConvertor convert(message); } } else { message setJMSReplyTo(null); converted = jmsMessageConvertor convert(message); } } else { continue; } try { sendMessage(converted); } catch(Exception e) { jmsConnector handleConnectionFailure(getConnectionForProducer()); continue; } try { message acknowledge(); } catch(Exception e) { jmsConnector handleConnectionFailure(getConnnectionForConsumer()); continue; } return; } catch (Exception e) { LOG info( failed to forward message on attempt + attempt + reason + e + message + message, e); } } } protected boolean isDoHandleReplyTo() { return doHandleReplyTo; } protected void setDoHandleReplyTo(boolean doHandleReplyTo) { this doHandleReplyTo = doHandleReplyTo; } protected abstract MessageConsumer createConsumer() throws JMSException; protected abstract MessageProducer createProducer() throws JMSException; protected abstract void sendMessage(Message message) throws JMSException; protected abstract Connection getConnnectionForConsumer(); protected abstract Connection getConnectionForProducer(); }",1.0,
394,394,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\InboundQueueBridge.,InboundQueueBridge,public class InboundQueueBridge extends QueueBridge { String inboundQueueName; String localQueueName; public InboundQueueBridge(String inboundQueueName) { this inboundQueueName = inboundQueueName; this localQueueName = inboundQueueName; } public InboundQueueBridge() { } public String getInboundQueueName() { return inboundQueueName; } public void setInboundQueueName(String inboundQueueName) { this inboundQueueName = inboundQueueName; if (this localQueueName == null) { this localQueueName = inboundQueueName; } } public String getLocalQueueName() { return localQueueName; } public void setLocalQueueName(String localQueueName) { this localQueueName = localQueueName; } },1.0,
395,395,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\InboundTopicBridge.,InboundTopicBridge,public class InboundTopicBridge extends TopicBridge { String inboundTopicName; String localTopicName; public InboundTopicBridge(String inboundTopicName) { this inboundTopicName = inboundTopicName; this localTopicName = inboundTopicName; } public InboundTopicBridge() { } public String getInboundTopicName() { return inboundTopicName; } public void setInboundTopicName(String inboundTopicName) { this inboundTopicName = inboundTopicName; if (this localTopicName == null) { this localTopicName = inboundTopicName; } } public String getLocalTopicName() { return localTopicName; } public void setLocalTopicName(String localTopicName) { this localTopicName = localTopicName; } },1.0,
397,397,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\JndiLookupFactory.,JndiLookupFactory,"public class JndiLookupFactory { public <T> T lookup(String name, Class<T> clazz) throws NamingException { InitialContext ctx = new InitialContext(); try { return clazz cast(ctx lookup(name)); } finally { ctx close(); } } }",1.0,
398,398,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\OutboundQueueBridge.,OutboundQueueBridge,public class OutboundQueueBridge extends QueueBridge { String outboundQueueName; String localQueueName; public OutboundQueueBridge(String outboundQueueName) { this outboundQueueName = outboundQueueName; this localQueueName = outboundQueueName; } public OutboundQueueBridge() { } public String getOutboundQueueName() { return outboundQueueName; } public void setOutboundQueueName(String outboundQueueName) { this outboundQueueName = outboundQueueName; if (this localQueueName == null) { this localQueueName = outboundQueueName; } } public String getLocalQueueName() { return localQueueName; } public void setLocalQueueName(String localQueueName) { this localQueueName = localQueueName; } },1.0,
399,399,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\OutboundTopicBridge.,OutboundTopicBridge,public class OutboundTopicBridge extends TopicBridge { String outboundTopicName; String localTopicName; public OutboundTopicBridge(String outboundTopicName) { this outboundTopicName = outboundTopicName; this localTopicName = outboundTopicName; } public OutboundTopicBridge() { } public String getOutboundTopicName() { return outboundTopicName; } public void setOutboundTopicName(String outboundTopicName) { this outboundTopicName = outboundTopicName; if (this localTopicName == null) { this localTopicName = outboundTopicName; } } public String getLocalTopicName() { return localTopicName; } public void setLocalTopicName(String localTopicName) { this localTopicName = localTopicName; } },1.0,
401,401,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\ReconnectionPolicy.,ReconnectionPolicy,public class ReconnectionPolicy { private int maxSendRetries = 10; private long sendRetryDelay = 1000L; private int maxReconnectAttempts = -1; private int maxInitialConnectAttempts = -1; private long maximumReconnectDelay = 30000; private long initialReconnectDelay = 1000L; private boolean useExponentialBackOff = false; private double backOffMultiplier = 2 0; public int getMaxSendRetries() { return maxSendRetries; } public void setMaxSendRetries(int maxSendRetries) { this maxSendRetries = maxSendRetries; } public long getSendRetryDelay() { return this sendRetryDelay; } public void setSendRetyDelay(long sendRetryDelay) { if (sendRetryDelay < 1000L) { this sendRetryDelay = 1000L; } this sendRetryDelay = sendRetryDelay; } public int getMaxReconnectAttempts() { return maxReconnectAttempts; } public void setMaxReconnectAttempts(int maxReconnectAttempts) { this maxReconnectAttempts = maxReconnectAttempts; } public int getMaxInitialConnectAttempts() { return this maxInitialConnectAttempts; } public void setMaxInitialConnectAttempts(int maxAttempts) { this maxInitialConnectAttempts = maxAttempts; } public long getMaximumReconnectDelay() { return maximumReconnectDelay; } public void setMaximumReconnectDelay(long maximumReconnectDelay) { this maximumReconnectDelay = maximumReconnectDelay; } public long getInitialReconnectDelay() { return initialReconnectDelay; } public void setInitialReconnectDelay(long initialReconnectDelay) { this initialReconnectDelay = initialReconnectDelay; } public boolean isUseExponentialBackOff() { return useExponentialBackOff; } public void setUseExponentialBackOff(boolean useExponentialBackOff) { this useExponentialBackOff = useExponentialBackOff; } public double getBackOffMultiplier() { return backOffMultiplier; } public void setBackOffMultiplier(double backOffMultiplier) { this backOffMultiplier = backOffMultiplier; } public long getNextDelay(int attempt) { if (attempt == 0) { return 0; } long nextDelay = initialReconnectDelay; if (useExponentialBackOff) { nextDelay = nextDelay * (long)(attempt * backOffMultiplier); } if (maximumReconnectDelay > 0 && nextDelay > maximumReconnectDelay) { nextDelay = maximumReconnectDelay; } return nextDelay; } },1.0,
402,402,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\SimpleJmsMessageConvertor.,SimpleJmsMessageConvertor,"public class SimpleJmsMessageConvertor implements JmsMesageConvertor { public Message convert(Message message) throws JMSException { return message; } public Message convert(Message message, Destination replyTo) throws JMSException { Message msg = convert(message); if (replyTo != null) { msg setJMSReplyTo(replyTo); } else { msg setJMSReplyTo(null); } return msg; } public void setConnection(Connection connection) { } }",1.0,
403,403,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\SimpleJmsQueueConnector.,SimpleJmsQueueConnector,"public class SimpleJmsQueueConnector extends JmsConnector { private static final Logger LOG = LoggerFactory getLogger(SimpleJmsQueueConnector class); private String outboundQueueConnectionFactoryName; private String localConnectionFactoryName; private QueueConnectionFactory outboundQueueConnectionFactory; private QueueConnectionFactory localQueueConnectionFactory; private InboundQueueBridge[] inboundQueueBridges; private OutboundQueueBridge[] outboundQueueBridges; public InboundQueueBridge[] getInboundQueueBridges() { return inboundQueueBridges; } public void setInboundQueueBridges(InboundQueueBridge[] inboundQueueBridges) { this inboundQueueBridges = inboundQueueBridges; } public OutboundQueueBridge[] getOutboundQueueBridges() { return outboundQueueBridges; } public void setOutboundQueueBridges(OutboundQueueBridge[] outboundQueueBridges) { this outboundQueueBridges = outboundQueueBridges; } public QueueConnectionFactory getLocalQueueConnectionFactory() { return localQueueConnectionFactory; } public void setLocalQueueConnectionFactory(QueueConnectionFactory localConnectionFactory) { this localQueueConnectionFactory = localConnectionFactory; } public QueueConnectionFactory getOutboundQueueConnectionFactory() { return outboundQueueConnectionFactory; } public String getOutboundQueueConnectionFactoryName() { return outboundQueueConnectionFactoryName; } public void setOutboundQueueConnectionFactoryName(String foreignQueueConnectionFactoryName) { this outboundQueueConnectionFactoryName = foreignQueueConnectionFactoryName; } public String getLocalConnectionFactoryName() { return localConnectionFactoryName; } public void setLocalConnectionFactoryName(String localConnectionFactoryName) { this localConnectionFactoryName = localConnectionFactoryName; } public QueueConnection getLocalQueueConnection() { return (QueueConnection) localConnection get(); } public void setLocalQueueConnection(QueueConnection localQueueConnection) { this localConnection set(localQueueConnection); } public QueueConnection getOutboundQueueConnection() { return (QueueConnection) foreignConnection get(); } public void setOutboundQueueConnection(QueueConnection foreignQueueConnection) { this foreignConnection set(foreignQueueConnection); } public void setOutboundQueueConnectionFactory(QueueConnectionFactory foreignQueueConnectionFactory) { this outboundQueueConnectionFactory = foreignQueueConnectionFactory; } Override protected void initializeForeignConnection() throws NamingException, JMSException { final QueueConnection newConnection; if (foreignConnection get() == null) { if (outboundQueueConnectionFactory == null) { if (outboundQueueConnectionFactoryName != null) { outboundQueueConnectionFactory = (QueueConnectionFactory)jndiOutboundTemplate lookup(outboundQueueConnectionFactoryName, QueueConnectionFactory class); if (outboundUsername != null) { newConnection = outboundQueueConnectionFactory createQueueConnection(outboundUsername, outboundPassword); } else { newConnection = outboundQueueConnectionFactory createQueueConnection(); } } else { throw new JMSException( Cannot create foreignConnection - no information ); } } else { if (outboundUsername != null) { newConnection = outboundQueueConnectionFactory createQueueConnection(outboundUsername, outboundPassword); } else { newConnection = outboundQueueConnectionFactory createQueueConnection(); } } } else { newConnection = (QueueConnection) foreignConnection getAndSet(null); } if (outboundClientId != null && outboundClientId length() > 0) { newConnection setClientID(getOutboundClientId()); } newConnection start(); outboundMessageConvertor setConnection(newConnection); initializeInboundDestinationBridgesOutboundSide(newConnection); initializeOutboundDestinationBridgesOutboundSide(newConnection); newConnection setExceptionListener(new ExceptionListener() { Override public void onException(JMSException exception) { handleConnectionFailure(newConnection); } }); foreignConnection set(newConnection); } Override protected void initializeLocalConnection() throws NamingException, JMSException { final QueueConnection newConnection; if (localConnection get() == null) { if (localQueueConnectionFactory == null) { if (embeddedConnectionFactory == null) { if (localConnectionFactoryName != null) { localQueueConnectionFactory = (QueueConnectionFactory)jndiLocalTemplate lookup(localConnectionFactoryName, QueueConnectionFactory class); if (localUsername != null) { newConnection = localQueueConnectionFactory createQueueConnection(localUsername, localPassword); } else { newConnection = localQueueConnectionFactory createQueueConnection(); } } else { throw new JMSException( Cannot create localConnection - no information ); } } else { newConnection = embeddedConnectionFactory createQueueConnection(); } } else { if (localUsername != null) { newConnection = localQueueConnectionFactory createQueueConnection(localUsername, localPassword); } else { newConnection = localQueueConnectionFactory createQueueConnection(); } } } else { newConnection = (QueueConnection) localConnection getAndSet(null); } if (localClientId != null && localClientId length() > 0) { newConnection setClientID(getLocalClientId()); } newConnection start(); inboundMessageConvertor setConnection(newConnection); initializeInboundDestinationBridgesLocalSide(newConnection); initializeOutboundDestinationBridgesLocalSide(newConnection); newConnection setExceptionListener(new ExceptionListener() { Override public void onException(JMSException exception) { handleConnectionFailure(newConnection); } }); localConnection set(newConnection); } protected void initializeInboundDestinationBridgesOutboundSide(QueueConnection connection) throws JMSException { if (inboundQueueBridges != null) { QueueSession outboundSession = connection createQueueSession(false, Session AUTO ACKNOWLEDGE); for (InboundQueueBridge bridge inboundQueueBridges) { String queueName = bridge getInboundQueueName(); Queue foreignQueue = createForeignQueue(outboundSession, queueName); bridge setConsumer(null); bridge setConsumerQueue(foreignQueue); bridge setConsumerConnection(connection); bridge setJmsConnector(this); addInboundBridge(bridge); } outboundSession close(); } } protected void initializeInboundDestinationBridgesLocalSide(QueueConnection connection) throws JMSException { if (inboundQueueBridges != null) { QueueSession localSession = connection createQueueSession(false,Session AUTO ACKNOWLEDGE); for (InboundQueueBridge bridge inboundQueueBridges) { String localQueueName = bridge getLocalQueueName(); Queue activemqQueue = createActiveMQQueue(localSession, localQueueName); bridge setProducerQueue(activemqQueue); bridge setProducerConnection(connection); if (bridge getJmsMessageConvertor() == null) { bridge setJmsMessageConvertor(getInboundMessageConvertor()); } bridge setJmsConnector(this); addInboundBridge(bridge); } localSession close(); } } protected void initializeOutboundDestinationBridgesOutboundSide(QueueConnection connection) throws JMSException { if (outboundQueueBridges != null) { QueueSession outboundSession = connection createQueueSession(false, Session AUTO ACKNOWLEDGE); for (OutboundQueueBridge bridge outboundQueueBridges) { String queueName = bridge getOutboundQueueName(); Queue foreignQueue = createForeignQueue(outboundSession, queueName); bridge setProducerQueue(foreignQueue); bridge setProducerConnection(connection); if (bridge getJmsMessageConvertor() == null) { bridge setJmsMessageConvertor(getOutboundMessageConvertor()); } bridge setJmsConnector(this); addOutboundBridge(bridge); } outboundSession close(); } } protected void initializeOutboundDestinationBridgesLocalSide(QueueConnection connection) throws JMSException { if (outboundQueueBridges != null) { QueueSession localSession = connection createQueueSession(false, Session AUTO ACKNOWLEDGE); for (OutboundQueueBridge bridge outboundQueueBridges) { String localQueueName = bridge getLocalQueueName(); Queue activemqQueue = createActiveMQQueue(localSession, localQueueName); bridge setConsumer(null); bridge setConsumerQueue(activemqQueue); bridge setConsumerConnection(connection); bridge setJmsConnector(this); addOutboundBridge(bridge); } localSession close(); } } protected Destination createReplyToBridge(Destination destination, Connection replyToProducerConnection, Connection replyToConsumerConnection) { Queue replyToProducerQueue = (Queue)destination; boolean isInbound = replyToProducerConnection equals(localConnection get()); if (isInbound) { InboundQueueBridge bridge = (InboundQueueBridge)replyToBridges get(replyToProducerQueue); if (bridge == null) { bridge = new InboundQueueBridge() { protected Destination processReplyToDestination(Destination destination) { return null; } }; try { QueueSession replyToConsumerSession = ((QueueConnection)replyToConsumerConnection) createQueueSession(false, Session AUTO ACKNOWLEDGE); Queue replyToConsumerQueue = replyToConsumerSession createTemporaryQueue(); replyToConsumerSession close(); bridge setConsumerQueue(replyToConsumerQueue); bridge setProducerQueue(replyToProducerQueue); bridge setProducerConnection((QueueConnection)replyToProducerConnection); bridge setConsumerConnection((QueueConnection)replyToConsumerConnection); bridge setDoHandleReplyTo(false); if (bridge getJmsMessageConvertor() == null) { bridge setJmsMessageConvertor(getInboundMessageConvertor()); } bridge setJmsConnector(this); bridge start(); LOG info( Created replyTo bridge for + replyToProducerQueue); } catch (Exception e) { LOG error( Failed to create replyTo bridge for queue + replyToProducerQueue, e); return null; } replyToBridges put(replyToProducerQueue, bridge); } return bridge getConsumerQueue(); } else { OutboundQueueBridge bridge = (OutboundQueueBridge)replyToBridges get(replyToProducerQueue); if (bridge == null) { bridge = new OutboundQueueBridge() { protected Destination processReplyToDestination(Destination destination) { return null; } }; try { QueueSession replyToConsumerSession = ((QueueConnection)replyToConsumerConnection) createQueueSession(false, Session AUTO ACKNOWLEDGE); Queue replyToConsumerQueue = replyToConsumerSession createTemporaryQueue(); replyToConsumerSession close(); bridge setConsumerQueue(replyToConsumerQueue); bridge setProducerQueue(replyToProducerQueue); bridge setProducerConnection((QueueConnection)replyToProducerConnection); bridge setConsumerConnection((QueueConnection)replyToConsumerConnection); bridge setDoHandleReplyTo(false); if (bridge getJmsMessageConvertor() == null) { bridge setJmsMessageConvertor(getOutboundMessageConvertor()); } bridge setJmsConnector(this); bridge start(); LOG info( Created replyTo bridge for + replyToProducerQueue); } catch (Exception e) { LOG error( Failed to create replyTo bridge for queue + replyToProducerQueue, e); return null; } replyToBridges put(replyToProducerQueue, bridge); } return bridge getConsumerQueue(); } } protected Queue createActiveMQQueue(QueueSession session, String queueName) throws JMSException { return session createQueue(queueName); } protected Queue createForeignQueue(QueueSession session, String queueName) throws JMSException { Queue result = null; if (preferJndiDestinationLookup) { try { result = (Queue)jndiOutboundTemplate lookup(queueName, Queue class); } catch (NamingException e) { try { result = session createQueue(queueName); } catch (JMSException e1) { String errStr = Failed to look-up or create Queue for name + queueName; LOG error(errStr, e); JMSException jmsEx = new JMSException(errStr); jmsEx setLinkedException(e1); throw jmsEx; } } } else { try { result = session createQueue(queueName); } catch (JMSException e) { try { result = (Queue)jndiOutboundTemplate lookup(queueName, Queue class); } catch (NamingException e1) { String errStr = Failed to look-up Queue for name + queueName; LOG error(errStr, e); JMSException jmsEx = new JMSException(errStr); jmsEx setLinkedException(e1); throw jmsEx; } } } return result; } }",1.0,
404,404,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\SimpleJmsTopicConnector.,SimpleJmsTopicConnector,"public class SimpleJmsTopicConnector extends JmsConnector { private static final Logger LOG = LoggerFactory getLogger(SimpleJmsTopicConnector class); private String outboundTopicConnectionFactoryName; private String localConnectionFactoryName; private TopicConnectionFactory outboundTopicConnectionFactory; private TopicConnectionFactory localTopicConnectionFactory; private InboundTopicBridge[] inboundTopicBridges; private OutboundTopicBridge[] outboundTopicBridges; public InboundTopicBridge[] getInboundTopicBridges() { return inboundTopicBridges; } public void setInboundTopicBridges(InboundTopicBridge[] inboundTopicBridges) { this inboundTopicBridges = inboundTopicBridges; } public OutboundTopicBridge[] getOutboundTopicBridges() { return outboundTopicBridges; } public void setOutboundTopicBridges(OutboundTopicBridge[] outboundTopicBridges) { this outboundTopicBridges = outboundTopicBridges; } public TopicConnectionFactory getLocalTopicConnectionFactory() { return localTopicConnectionFactory; } public void setLocalTopicConnectionFactory(TopicConnectionFactory localConnectionFactory) { this localTopicConnectionFactory = localConnectionFactory; } public TopicConnectionFactory getOutboundTopicConnectionFactory() { return outboundTopicConnectionFactory; } public String getOutboundTopicConnectionFactoryName() { return outboundTopicConnectionFactoryName; } public void setOutboundTopicConnectionFactoryName(String foreignTopicConnectionFactoryName) { this outboundTopicConnectionFactoryName = foreignTopicConnectionFactoryName; } public String getLocalConnectionFactoryName() { return localConnectionFactoryName; } public void setLocalConnectionFactoryName(String localConnectionFactoryName) { this localConnectionFactoryName = localConnectionFactoryName; } public TopicConnection getLocalTopicConnection() { return (TopicConnection) localConnection get(); } public void setLocalTopicConnection(TopicConnection localTopicConnection) { this localConnection set(localTopicConnection); } public TopicConnection getOutboundTopicConnection() { return (TopicConnection) foreignConnection get(); } public void setOutboundTopicConnection(TopicConnection foreignTopicConnection) { this foreignConnection set(foreignTopicConnection); } public void setOutboundTopicConnectionFactory(TopicConnectionFactory foreignTopicConnectionFactory) { this outboundTopicConnectionFactory = foreignTopicConnectionFactory; } Override protected void initializeForeignConnection() throws NamingException, JMSException { final TopicConnection newConnection; if (foreignConnection get() == null) { if (outboundTopicConnectionFactory == null) { if (outboundTopicConnectionFactoryName != null) { outboundTopicConnectionFactory = (TopicConnectionFactory)jndiOutboundTemplate lookup(outboundTopicConnectionFactoryName, TopicConnectionFactory class); if (outboundUsername != null) { newConnection = outboundTopicConnectionFactory createTopicConnection(outboundUsername, outboundPassword); } else { newConnection = outboundTopicConnectionFactory createTopicConnection(); } } else { throw new JMSException( Cannot create foreignConnection - no information ); } } else { if (outboundUsername != null) { newConnection = outboundTopicConnectionFactory createTopicConnection(outboundUsername, outboundPassword); } else { newConnection = outboundTopicConnectionFactory createTopicConnection(); } } } else { newConnection = (TopicConnection) foreignConnection getAndSet(null); } if (outboundClientId != null && outboundClientId length() > 0) { newConnection setClientID(getOutboundClientId()); } newConnection start(); outboundMessageConvertor setConnection(newConnection); initializeInboundDestinationBridgesOutboundSide(newConnection); initializeOutboundDestinationBridgesOutboundSide(newConnection); newConnection setExceptionListener(new ExceptionListener() { Override public void onException(JMSException exception) { handleConnectionFailure(newConnection); } }); foreignConnection set(newConnection); } Override protected void initializeLocalConnection() throws NamingException, JMSException { final TopicConnection newConnection; if (localConnection get() == null) { if (localTopicConnectionFactory == null) { if (embeddedConnectionFactory == null) { if (localConnectionFactoryName != null) { localTopicConnectionFactory = (TopicConnectionFactory)jndiLocalTemplate lookup(localConnectionFactoryName, TopicConnectionFactory class); if (localUsername != null) { newConnection = localTopicConnectionFactory createTopicConnection(localUsername, localPassword); } else { newConnection = localTopicConnectionFactory createTopicConnection(); } } else { throw new JMSException( Cannot create localConnection - no information ); } } else { newConnection = embeddedConnectionFactory createTopicConnection(); } } else { if (localUsername != null) { newConnection = localTopicConnectionFactory createTopicConnection(localUsername, localPassword); } else { newConnection = localTopicConnectionFactory createTopicConnection(); } } } else { newConnection = (TopicConnection) localConnection getAndSet(null); } if (localClientId != null && localClientId length() > 0) { newConnection setClientID(getLocalClientId()); } newConnection start(); inboundMessageConvertor setConnection(newConnection); initializeInboundDestinationBridgesLocalSide(newConnection); initializeOutboundDestinationBridgesLocalSide(newConnection); newConnection setExceptionListener(new ExceptionListener() { Override public void onException(JMSException exception) { handleConnectionFailure(newConnection); } }); localConnection set(newConnection); } protected void initializeInboundDestinationBridgesOutboundSide(TopicConnection connection) throws JMSException { if (inboundTopicBridges != null) { TopicSession outboundSession = connection createTopicSession(false, Session AUTO ACKNOWLEDGE); for (InboundTopicBridge bridge inboundTopicBridges) { String TopicName = bridge getInboundTopicName(); Topic foreignTopic = createForeignTopic(outboundSession, TopicName); bridge setConsumer(null); bridge setConsumerTopic(foreignTopic); bridge setConsumerConnection(connection); bridge setJmsConnector(this); addInboundBridge(bridge); } outboundSession close(); } } protected void initializeInboundDestinationBridgesLocalSide(TopicConnection connection) throws JMSException { if (inboundTopicBridges != null) { TopicSession localSession = connection createTopicSession(false,Session AUTO ACKNOWLEDGE); for (InboundTopicBridge bridge inboundTopicBridges) { String localTopicName = bridge getLocalTopicName(); Topic activemqTopic = createActiveMQTopic(localSession, localTopicName); bridge setProducerTopic(activemqTopic); bridge setProducerConnection(connection); if (bridge getJmsMessageConvertor() == null) { bridge setJmsMessageConvertor(getInboundMessageConvertor()); } bridge setJmsConnector(this); addInboundBridge(bridge); } localSession close(); } } protected void initializeOutboundDestinationBridgesOutboundSide(TopicConnection connection) throws JMSException { if (outboundTopicBridges != null) { TopicSession outboundSession = connection createTopicSession(false, Session AUTO ACKNOWLEDGE); for (OutboundTopicBridge bridge outboundTopicBridges) { String topicName = bridge getOutboundTopicName(); Topic foreignTopic = createForeignTopic(outboundSession, topicName); bridge setProducerTopic(foreignTopic); bridge setProducerConnection(connection); if (bridge getJmsMessageConvertor() == null) { bridge setJmsMessageConvertor(getOutboundMessageConvertor()); } bridge setJmsConnector(this); addOutboundBridge(bridge); } outboundSession close(); } } protected void initializeOutboundDestinationBridgesLocalSide(TopicConnection connection) throws JMSException { if (outboundTopicBridges != null) { TopicSession localSession = connection createTopicSession(false, Session AUTO ACKNOWLEDGE); for (OutboundTopicBridge bridge outboundTopicBridges) { String localTopicName = bridge getLocalTopicName(); Topic activemqTopic = createActiveMQTopic(localSession, localTopicName); bridge setConsumer(null); bridge setConsumerTopic(activemqTopic); bridge setConsumerConnection(connection); bridge setJmsConnector(this); addOutboundBridge(bridge); } localSession close(); } } protected Destination createReplyToBridge(Destination destination, Connection replyToProducerConnection, Connection replyToConsumerConnection) { Topic replyToProducerTopic = (Topic)destination; boolean isInbound = replyToProducerConnection equals(localConnection get()); if (isInbound) { InboundTopicBridge bridge = (InboundTopicBridge)replyToBridges get(replyToProducerTopic); if (bridge == null) { bridge = new InboundTopicBridge() { protected Destination processReplyToDestination(Destination destination) { return null; } }; try { TopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection) createTopicSession(false, Session AUTO ACKNOWLEDGE); Topic replyToConsumerTopic = replyToConsumerSession createTemporaryTopic(); replyToConsumerSession close(); bridge setConsumerTopic(replyToConsumerTopic); bridge setProducerTopic(replyToProducerTopic); bridge setProducerConnection((TopicConnection)replyToProducerConnection); bridge setConsumerConnection((TopicConnection)replyToConsumerConnection); bridge setDoHandleReplyTo(false); if (bridge getJmsMessageConvertor() == null) { bridge setJmsMessageConvertor(getInboundMessageConvertor()); } bridge setJmsConnector(this); bridge start(); LOG info( Created replyTo bridge for + replyToProducerTopic); } catch (Exception e) { LOG error( Failed to create replyTo bridge for topic + replyToProducerTopic, e); return null; } replyToBridges put(replyToProducerTopic, bridge); } return bridge getConsumerTopic(); } else { OutboundTopicBridge bridge = (OutboundTopicBridge)replyToBridges get(replyToProducerTopic); if (bridge == null) { bridge = new OutboundTopicBridge() { protected Destination processReplyToDestination(Destination destination) { return null; } }; try { TopicSession replyToConsumerSession = ((TopicConnection)replyToConsumerConnection) createTopicSession(false, Session AUTO ACKNOWLEDGE); Topic replyToConsumerTopic = replyToConsumerSession createTemporaryTopic(); replyToConsumerSession close(); bridge setConsumerTopic(replyToConsumerTopic); bridge setProducerTopic(replyToProducerTopic); bridge setProducerConnection((TopicConnection)replyToProducerConnection); bridge setConsumerConnection((TopicConnection)replyToConsumerConnection); bridge setDoHandleReplyTo(false); if (bridge getJmsMessageConvertor() == null) { bridge setJmsMessageConvertor(getOutboundMessageConvertor()); } bridge setJmsConnector(this); bridge start(); LOG info( Created replyTo bridge for + replyToProducerTopic); } catch (Exception e) { LOG error( Failed to create replyTo bridge for topic + replyToProducerTopic, e); return null; } replyToBridges put(replyToProducerTopic, bridge); } return bridge getConsumerTopic(); } } protected Topic createActiveMQTopic(TopicSession session, String topicName) throws JMSException { return session createTopic(topicName); } protected Topic createForeignTopic(TopicSession session, String topicName) throws JMSException { Topic result = null; if (preferJndiDestinationLookup) { try { result = (Topic)jndiOutboundTemplate lookup(topicName, Topic class); } catch (NamingException e) { try { result = session createTopic(topicName); } catch (JMSException e1) { String errStr = Failed to look-up or create Topic for name + topicName; LOG error(errStr, e); JMSException jmsEx = new JMSException(errStr); jmsEx setLinkedException(e1); throw jmsEx; } } } else { try { result = session createTopic(topicName); } catch (JMSException e) { try { result = (Topic)jndiOutboundTemplate lookup(topicName, Topic class); } catch (NamingException e1) { String errStr = Failed to look-up Topic for name + topicName; LOG error(errStr, e); JMSException jmsEx = new JMSException(errStr); jmsEx setLinkedException(e1); throw jmsEx; } } } return result; } }",1.0,
405,405,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\network\jms\TopicBridge.,TopicBridge,"class TopicBridge extends DestinationBridge { protected Topic consumerTopic; protected Topic producerTopic; protected TopicSession consumerSession; protected TopicSession producerSession; protected String consumerName; protected String selector; protected TopicPublisher producer; protected TopicConnection consumerConnection; protected TopicConnection producerConnection; public void stop() throws Exception { super stop(); if (consumerSession != null) { consumerSession close(); } if (producerSession != null) { producerSession close(); } } protected MessageConsumer createConsumer() throws JMSException { if (consumerConnection == null) return null; consumerSession = consumerConnection createTopicSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = null; if (consumerName != null && consumerName length() > 0) { if (selector != null && selector length() > 0) { consumer = consumerSession createDurableSubscriber(consumerTopic, consumerName, selector, false); } else { consumer = consumerSession createDurableSubscriber(consumerTopic, consumerName); } } else { if (selector != null && selector length() > 0) { consumer = consumerSession createSubscriber(consumerTopic, selector, false); } else { consumer = consumerSession createSubscriber(consumerTopic); } } consumer setMessageListener(this); return consumer; } protected synchronized MessageProducer createProducer() throws JMSException { if (producerConnection == null) return null; producerSession = producerConnection createTopicSession(false, Session AUTO ACKNOWLEDGE); producer = producerSession createPublisher(null); return producer; } protected synchronized void sendMessage(Message message) throws JMSException { if (producer == null && createProducer() == null) { throw new JMSException( Producer for remote queue not available ); } try { producer publish(producerTopic, message); } catch (JMSException e) { producer = null; throw e; } } public TopicConnection getConsumerConnection() { return consumerConnection; } public void setConsumerConnection(TopicConnection consumerConnection) { this consumerConnection = consumerConnection; if (started get()) { try { createConsumer(); } catch(Exception e) { jmsConnector handleConnectionFailure(getConnnectionForConsumer()); } } } public String getConsumerName() { return consumerName; } public void setConsumerName(String consumerName) { this consumerName = consumerName; } public Topic getConsumerTopic() { return consumerTopic; } public void setConsumerTopic(Topic consumerTopic) { this consumerTopic = consumerTopic; } public TopicConnection getProducerConnection() { return producerConnection; } public void setProducerConnection(TopicConnection producerConnection) { this producerConnection = producerConnection; } public Topic getProducerTopic() { return producerTopic; } public void setProducerTopic(Topic producerTopic) { this producerTopic = producerTopic; } public String getSelector() { return selector; } public void setSelector(String selector) { this selector = selector; } protected Connection getConnnectionForConsumer() { return getConsumerConnection(); } protected Connection getConnectionForProducer() { return getProducerConnection(); } }",1.0,
407,407,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\plugin\DiscardingDLQBrokerPlugin.,DiscardingDLQBrokerPlugin,"public class DiscardingDLQBrokerPlugin implements BrokerPlugin { public DiscardingDLQBrokerPlugin() { } public static Logger log = LoggerFactory getLogger(DiscardingDLQBrokerPlugin class); private boolean dropTemporaryTopics = true; private boolean dropTemporaryQueues = true; private boolean dropAll = true; private String dropOnly; private int reportInterval = 1000; public Broker installPlugin(Broker broker) throws Exception { log info( Installing Discarding Dead Letter Queue broker plugin[dropAll= +isDropAll()+ ; dropTemporaryTopics= +isDropTemporaryTopics()+ ; dropTemporaryQueues= + isDropTemporaryQueues()+ ; dropOnly= +getDropOnly()+ ; reportInterval= + getReportInterval()+ ] ); DiscardingDLQBroker cb = new DiscardingDLQBroker(broker); cb setDropAll(isDropAll()); cb setDropTemporaryQueues(isDropTemporaryQueues()); cb setDropTemporaryTopics(isDropTemporaryTopics()); cb setDestFilter(getDestFilter()); cb setReportInterval(getReportInterval()); return cb; } public boolean isDropAll() { return dropAll; } public boolean isDropTemporaryQueues() { return dropTemporaryQueues; } public boolean isDropTemporaryTopics() { return dropTemporaryTopics; } public String getDropOnly() { return dropOnly; } public int getReportInterval() { return reportInterval; } public void setDropTemporaryTopics(boolean dropTemporaryTopics) { this dropTemporaryTopics = dropTemporaryTopics; } public void setDropTemporaryQueues(boolean dropTemporaryQueues) { this dropTemporaryQueues = dropTemporaryQueues; } public void setDropAll(boolean dropAll) { this dropAll = dropAll; } public void setDropOnly(String dropOnly) { this dropOnly = dropOnly; } public void setReportInterval(int reportInterval) { this reportInterval = reportInterval; } public Pattern[] getDestFilter() { if (getDropOnly()==null) return null; ArrayList<Pattern> list = new ArrayList<Pattern>(); StringTokenizer t = new StringTokenizer(getDropOnly(), ); while (t hasMoreTokens()) { String s = t nextToken(); if (s!=null && s trim() length()>0) list add(Pattern compile(s)); } if (list size()==0) return null; return list toArray(new Pattern[0]); } }",1.0,
408,408,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\plugin\ForcePersistencyModeBroker.,ForcePersistencyModeBroker,"public class ForcePersistencyModeBroker extends BrokerFilter{ public static Logger log = LoggerFactory getLogger(ForcePersistencyModeBroker class); private boolean persistence = false; public boolean isPersistent() { return persistence; } public void setPersistenceFlag(boolean mode) { this persistence = mode; } public ForcePersistencyModeBroker(Broker next) { super(next); System out println(this getBrokerSequenceId()); } public void send(ProducerBrokerExchange producerExchange, Message messageSend) throws Exception { messageSend getMessage() setPersistent(isPersistent()); next send(producerExchange, messageSend); } }",1.0,
409,409,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\plugin\ForcePersistencyModeBrokerPlugin.,ForcePersistencyModeBrokerPlugin,public class ForcePersistencyModeBrokerPlugin implements BrokerPlugin { private static Logger LOG = LoggerFactory getLogger(ForcePersistencyModeBrokerPlugin class); private boolean persistenceFlag = false; public ForcePersistencyModeBrokerPlugin() { } public Broker installPlugin(Broker broker) throws Exception{ ForcePersistencyModeBroker pB = new ForcePersistencyModeBroker(broker); pB setPersistenceFlag(isPersistenceForced()); LOG info( Installing ForcePersistencyModeBroker plugin persistency enforced= + pB isPersistent()); return pB; } public void setPersistenceFlag(final boolean persistenceFlag) { this persistenceFlag = persistenceFlag; } public final boolean isPersistenceForced() { return persistenceFlag; } },1.0,
411,411,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\plugin\StatisticsBrokerPlugin.,StatisticsBrokerPlugin,public class StatisticsBrokerPlugin implements BrokerPlugin { private static Logger LOG = LoggerFactory getLogger(StatisticsBrokerPlugin class); public Broker installPlugin(Broker broker) throws Exception { StatisticsBroker answer = new StatisticsBroker(broker); LOG info( Installing StaticsBroker ); return answer; } },1.0,
413,413,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\plugin\SubQueueSelectorCacheBrokerPlugin.,SubQueueSelectorCacheBrokerPlugin,"public class SubQueueSelectorCacheBrokerPlugin implements BrokerPlugin { private File persistFile; Override public Broker installPlugin(Broker broker) throws Exception { return new SubQueueSelectorCacheBroker(broker, persistFile); } public void setPersistFile(File persistFile) { this persistFile = persistFile; } public File getPersistFile() { return persistFile; } }",1.0,
414,414,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\proxy\ProxyConnection.,ProxyConnection,"class ProxyConnection implements Service { private static final Logger LOG = LoggerFactory getLogger(ProxyConnection class); private final Transport localTransport; private final Transport remoteTransport; private AtomicBoolean shuttingDown = new AtomicBoolean(false); private AtomicBoolean running = new AtomicBoolean(false); public ProxyConnection(Transport localTransport, Transport remoteTransport) { this localTransport = localTransport; this remoteTransport = remoteTransport; } public void onFailure(IOException e) { if (!shuttingDown get()) { LOG debug( Transport error + e, e); try { stop(); } catch (Exception ignore) { } } } public void start() throws Exception { if (!running compareAndSet(false, true)) { return; } this localTransport setTransportListener(new DefaultTransportListener() { public void onCommand(Object command) { boolean shutdown = false; if (command getClass() == ShutdownInfo class) { shuttingDown set(true); shutdown = true; } if (command getClass() == WireFormatInfo class) { return; } try { remoteTransport oneway(command); if (shutdown) { stop(); } } catch (IOException error) { onFailure(error); } catch (Exception error) { onFailure(IOExceptionSupport create(error)); } } public void onException(IOException error) { onFailure(error); } }); this remoteTransport setTransportListener(new DefaultTransportListener() { public void onCommand(Object command) { try { if (command getClass() == WireFormatInfo class) { return; } localTransport oneway(command); } catch (IOException error) { onFailure(error); } } public void onException(IOException error) { onFailure(error); } }); localTransport start(); remoteTransport start(); } public void stop() throws Exception { if (!running compareAndSet(true, false)) { return; } shuttingDown set(true); ServiceStopper ss = new ServiceStopper(); ss stop(localTransport); ss stop(remoteTransport); ss throwFirstException(); } }",1.0,
415,415,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\proxy\ProxyConnector.,ProxyConnector,"public class ProxyConnector implements Service { private static final Logger LOG = LoggerFactory getLogger(ProxyConnector class); private TransportServer server; private URI bind; private URI remote; private URI localUri; private String name; private boolean proxyToLocalBroker = true; private final CopyOnWriteArrayList<ProxyConnection> connections = new CopyOnWriteArrayList<ProxyConnection>(); public void start() throws Exception { this getServer() setAcceptListener(new TransportAcceptListener() { public void onAccept(Transport localTransport) { try { Transport remoteTransport = createRemoteTransport(); ProxyConnection connection = new ProxyConnection(localTransport, remoteTransport); connections add(connection); connection start(); } catch (Exception e) { onAcceptError(e); } } public void onAcceptError(Exception error) { LOG error( Could not accept connection + error, error); } }); getServer() start(); LOG info( Proxy Connector + getName() + Started ); } public void stop() throws Exception { ServiceStopper ss = new ServiceStopper(); if (this server != null) { ss stop(this server); } for (Iterator<ProxyConnection> iter = connections iterator(); iter hasNext();) { LOG info( Connector stopped Stopping proxy ); ss stop(iter next()); } ss throwFirstException(); LOG info( Proxy Connector + getName() + Stopped ); } public URI getLocalUri() { return localUri; } public void setLocalUri(URI localURI) { this localUri = localURI; } public URI getBind() { return bind; } public void setBind(URI bind) { this bind = bind; } public URI getRemote() { return remote; } public void setRemote(URI remote) { this remote = remote; } public TransportServer getServer() throws IOException, URISyntaxException { if (server == null) { server = createServer(); } return server; } public void setServer(TransportServer server) { this server = server; } protected TransportServer createServer() throws IOException, URISyntaxException { if (bind == null) { throw new IllegalArgumentException( You must specify either a server or the bind property ); } return TransportFactory bind(bind); } private Transport createRemoteTransport() throws Exception { Transport transport = TransportFactory compositeConnect(remote); CompositeTransport ct = transport narrow(CompositeTransport class); if (ct != null && localUri != null && proxyToLocalBroker) { ct add(false,new URI[] {localUri}); } transport = new TransportFilter(transport) { Override public void stop() throws Exception { LOG info( Stopping proxy ); super stop(); connections remove(this); } }; return transport; } public String getName() { if (name == null) { if (server != null) { name = server getConnectURI() toString(); } else { name = proxy ; } } return name; } public void setName(String name) { this name = name; } public boolean isProxyToLocalBroker() { return proxyToLocalBroker; } public void setProxyToLocalBroker(boolean proxyToLocalBroker) { this proxyToLocalBroker = proxyToLocalBroker; } }",1.0,
416,416,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\AuthenticationUser.,AuthenticationUser,"public class AuthenticationUser { String username; String password; String groups; public AuthenticationUser(String username, String password, String groups) { this username = username; this password = password; this groups = groups; } public String getGroups() { return groups; } public void setGroups(String groups) { this groups = groups; } public String getPassword() { return password; } public void setPassword(String password) { this password = password; } public String getUsername() { return username; } public void setUsername(String username) { this username = username; } }",1.0,
419,419,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\AuthorizationPlugin.,AuthorizationPlugin,"public class AuthorizationPlugin implements BrokerPlugin { private AuthorizationMap map; public AuthorizationPlugin() { } public AuthorizationPlugin(AuthorizationMap map) { this map = map; } public Broker installPlugin(Broker broker) { if (map == null) { throw new IllegalArgumentException( You must configure a map property ); } return new AuthorizationBroker(broker, map); } public AuthorizationMap getMap() { return map; } public void setMap(AuthorizationMap map) { this map = map; } }",1.0,
420,420,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\DefaultAuthorizationMap.,DefaultAuthorizationMap,"public class DefaultAuthorizationMap extends DestinationMap implements AuthorizationMap { private AuthorizationEntry defaultEntry; private TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry; public DefaultAuthorizationMap() { } SuppressWarnings( rawtypes ) public DefaultAuthorizationMap(List<DestinationMapEntry> authorizationEntries) { setAuthorizationEntries(authorizationEntries); } public void setTempDestinationAuthorizationEntry(TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) { this tempDestinationAuthorizationEntry = tempDestinationAuthorizationEntry; } public TempDestinationAuthorizationEntry getTempDestinationAuthorizationEntry() { return this tempDestinationAuthorizationEntry; } public Set<Object> getTempDestinationAdminACLs() { if (tempDestinationAuthorizationEntry != null) { return tempDestinationAuthorizationEntry getAdminACLs(); } else { return null; } } public Set<Object> getTempDestinationReadACLs() { if (tempDestinationAuthorizationEntry != null) { return tempDestinationAuthorizationEntry getReadACLs(); } else { return null; } } public Set<Object> getTempDestinationWriteACLs() { if (tempDestinationAuthorizationEntry != null) { return tempDestinationAuthorizationEntry getWriteACLs(); } else { return null; } } public Set<Object> getAdminACLs(ActiveMQDestination destination) { Set<AuthorizationEntry> entries = getAllEntries(destination); Set<Object> answer = new HashSet<Object>(); for (Iterator<AuthorizationEntry> iter = entries iterator(); iter hasNext();) { AuthorizationEntry entry = iter next(); answer addAll(entry getAdminACLs()); } return answer; } public Set<Object> getReadACLs(ActiveMQDestination destination) { Set<AuthorizationEntry> entries = getAllEntries(destination); Set<Object> answer = new HashSet<Object>(); for (Iterator<AuthorizationEntry> iter = entries iterator(); iter hasNext();) { AuthorizationEntry entry = iter next(); answer addAll(entry getReadACLs()); } return answer; } public Set<Object> getWriteACLs(ActiveMQDestination destination) { Set<AuthorizationEntry> entries = getAllEntries(destination); Set<Object> answer = new HashSet<Object>(); for (Iterator<AuthorizationEntry> iter = entries iterator(); iter hasNext();) { AuthorizationEntry entry = iter next(); answer addAll(entry getWriteACLs()); } return answer; } public AuthorizationEntry getEntryFor(ActiveMQDestination destination) { AuthorizationEntry answer = (AuthorizationEntry)chooseValue(destination); if (answer == null) { answer = getDefaultEntry(); } return answer; } Override SuppressWarnings({ rawtypes , unchecked }) public synchronized Set get(ActiveMQDestination key) { if (key isComposite()) { ActiveMQDestination[] destinations = key getCompositeDestinations(); Set answer = null; for (int i = 0; i < destinations length; i++) { ActiveMQDestination childDestination = destinations[i]; answer = union(answer, get(childDestination)); if (answer == null || answer isEmpty()) { break; } } return answer; } return findWildcardMatches(key); } SuppressWarnings( rawtypes ) public void setAuthorizationEntries(List<DestinationMapEntry> entries) { super setEntries(entries); } public AuthorizationEntry getDefaultEntry() { return defaultEntry; } public void setDefaultEntry(AuthorizationEntry defaultEntry) { this defaultEntry = defaultEntry; } SuppressWarnings( rawtypes ) protected Class< extends DestinationMapEntry> getEntryClass() { return AuthorizationEntry class; } SuppressWarnings( unchecked ) protected Set<AuthorizationEntry> getAllEntries(ActiveMQDestination destination) { Set<AuthorizationEntry> entries = get(destination); if (defaultEntry != null) { entries add(defaultEntry); } return entries; } }",1.0,
421,421,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasAuthenticationBroker.,JaasAuthenticationBroker,"public class JaasAuthenticationBroker extends BrokerFilter { private final String jassConfiguration; private final CopyOnWriteArrayList<SecurityContext> securityContexts = new CopyOnWriteArrayList<SecurityContext>(); public JaasAuthenticationBroker(Broker next, String jassConfiguration) { super(next); this jassConfiguration = jassConfiguration; } static class JaasSecurityContext extends SecurityContext { private final Subject subject; public JaasSecurityContext(String userName, Subject subject) { super(userName); this subject = subject; } public Set<Principal> getPrincipals() { return subject getPrincipals(); } } public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception { if (context getSecurityContext() == null) { ClassLoader original = Thread currentThread() getContextClassLoader(); Thread currentThread() setContextClassLoader(JaasAuthenticationBroker class getClassLoader()); try { try { JassCredentialCallbackHandler callback = new JassCredentialCallbackHandler(info getUserName(), info getPassword()); LoginContext lc = new LoginContext(jassConfiguration, callback); lc login(); Subject subject = lc getSubject(); SecurityContext s = new JaasSecurityContext(info getUserName(), subject); context setSecurityContext(s); securityContexts add(s); } catch (Exception e) { throw (SecurityException)new SecurityException( User name [ + info getUserName() + ] or password is invalid ) initCause(e); } } finally { Thread currentThread() setContextClassLoader(original); } } super addConnection(context, info); } public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception { super removeConnection(context, info, error); if (securityContexts remove(context getSecurityContext())) { context setSecurityContext(null); } } public void refresh() { for (Iterator<SecurityContext> iter = securityContexts iterator(); iter hasNext();) { SecurityContext sc = iter next(); sc getAuthorizedReadDests() clear(); sc getAuthorizedWriteDests() clear(); } } }",1.0,
422,422,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasAuthenticationBroker.,JaasSecurityContext,"static class JaasSecurityContext extends SecurityContext { private final Subject subject; public JaasSecurityContext(String userName, Subject subject) { super(userName); this subject = subject; } public Set<Principal> getPrincipals() { return subject getPrincipals(); } }",1.0,
423,423,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasAuthenticationPlugin.,JaasAuthenticationPlugin,"public class JaasAuthenticationPlugin implements BrokerPlugin { protected String configuration = activemq-domain ; protected boolean discoverLoginConfig = true; public Broker installPlugin(Broker broker) { initialiseJaas(); return new JaasAuthenticationBroker(broker, configuration); } public String getConfiguration() { return configuration; } public void setConfiguration(String jaasConfiguration) { this configuration = jaasConfiguration; } public boolean isDiscoverLoginConfig() { return discoverLoginConfig; } public void setDiscoverLoginConfig(boolean discoverLoginConfig) { this discoverLoginConfig = discoverLoginConfig; } protected void initialiseJaas() { if (discoverLoginConfig) { String path = System getProperty( java security auth login config ); if (path == null) { URL resource = null; if (resource == null) { resource = getClass() getClassLoader() getResource( login config ); } if (resource != null) { path = resource getFile(); System setProperty( java security auth login config , path); } } } } }",1.0,
424,424,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasCertificateAuthenticationBroker.,JaasCertificateAuthenticationBroker,"public class JaasCertificateAuthenticationBroker extends BrokerFilter { private final String jaasConfiguration; public JaasCertificateAuthenticationBroker(Broker next, String jaasConfiguration) { super(next); this jaasConfiguration = jaasConfiguration; } public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception { if (context getSecurityContext() == null) { if (!(info getTransportContext() instanceof X509Certificate[])) { throw new SecurityException( Unable to authenticate transport without SSL certificate ); } ClassLoader original = Thread currentThread() getContextClassLoader(); Thread currentThread() setContextClassLoader(JaasAuthenticationBroker class getClassLoader()); try { try { CallbackHandler callback = new JaasCertificateCallbackHandler((X509Certificate[])info getTransportContext()); LoginContext lc = new LoginContext(jaasConfiguration, callback); lc login(); Subject subject = lc getSubject(); String dnName = ; for (Principal principal subject getPrincipals()) { if (principal instanceof UserPrincipal) { dnName = ((UserPrincipal)principal) getName(); break; } } SecurityContext s = new JaasCertificateSecurityContext(dnName, subject, (X509Certificate[])info getTransportContext()); context setSecurityContext(s); } catch (Exception e) { throw new SecurityException( User name [ + info getUserName() + ] or password is invalid + e getMessage(), e); } } finally { Thread currentThread() setContextClassLoader(original); } } super addConnection(context, info); } public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception { super removeConnection(context, info, error); context setSecurityContext(null); } }",1.0,
425,425,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasCertificateAuthenticationPlugin.,JaasCertificateAuthenticationPlugin,"public class JaasCertificateAuthenticationPlugin extends JaasAuthenticationPlugin { public Broker installPlugin(Broker broker) { initialiseJaas(); return new JaasCertificateAuthenticationBroker(broker, configuration); } }",1.0,
426,426,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasCertificateSecurityContext.,JaasCertificateSecurityContext,"public class JaasCertificateSecurityContext extends SecurityContext { private Subject subject; private X509Certificate[] certs; public JaasCertificateSecurityContext(String userName, Subject subject, X509Certificate[] certs) { super(userName); this subject = subject; this certs = certs; } public Set<Principal> getPrincipals() { return subject getPrincipals(); } public String getUserName() { if (certs != null && certs length > 0) { return certs[0] getSubjectDN() getName(); } return super getUserName(); } }",1.0,
427,427,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasDualAuthenticationBroker.,JaasDualAuthenticationBroker,"public class JaasDualAuthenticationBroker extends BrokerFilter { private final JaasCertificateAuthenticationBroker sslBroker; private final JaasAuthenticationBroker nonSslBroker; public JaasDualAuthenticationBroker(Broker next, String jaasConfiguration, String jaasSslConfiguration) { super(next); this nonSslBroker = new JaasAuthenticationBroker(new EmptyBroker(), jaasConfiguration); this sslBroker = new JaasCertificateAuthenticationBroker(new EmptyBroker(), jaasSslConfiguration); } public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception { if (context getSecurityContext() == null) { boolean isSSL; Connector connector = context getConnector(); if (connector instanceof TransportConnector) { TransportConnector transportConnector = (TransportConnector) connector; isSSL = transportConnector getServer() isSslServer(); } else { isSSL = false; } if (isSSL) { this sslBroker addConnection(context, info); } else { this nonSslBroker addConnection(context, info); } super addConnection(context, info); } } public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception { boolean isSSL; Connector connector = context getConnector(); if (connector instanceof TransportConnector) { TransportConnector transportConnector = (TransportConnector) connector; isSSL = (transportConnector getServer() instanceof SslTransportServer); } else { isSSL = false; } super removeConnection(context, info, error); if (isSSL) { this sslBroker removeConnection(context, info, error); } else { this nonSslBroker removeConnection(context, info, error); } } }",1.0,
428,428,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasDualAuthenticationPlugin.,JaasDualAuthenticationPlugin,"public class JaasDualAuthenticationPlugin extends JaasAuthenticationPlugin { private String sslConfiguration = activemq-ssl-domain ; public Broker installPlugin(Broker broker) { initialiseJaas(); return new JaasDualAuthenticationBroker(broker, configuration, sslConfiguration); } public void setSslConfiguration(String sslConfiguration) { this sslConfiguration = sslConfiguration; } public String getSslConfiguration() { return sslConfiguration; } }",1.0,
429,429,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\LDAPAuthorizationMap.,LDAPAuthorizationMap,"public class LDAPAuthorizationMap implements AuthorizationMap { public static final String INITIAL CONTEXT FACTORY = initialContextFactory ; public static final String CONNECTION URL = connectionURL ; public static final String CONNECTION USERNAME = connectionUsername ; public static final String CONNECTION PASSWORD = connectionPassword ; public static final String CONNECTION PROTOCOL = connectionProtocol ; public static final String AUTHENTICATION = authentication ; public static final String TOPIC SEARCH MATCHING = topicSearchMatching ; public static final String TOPIC SEARCH SUBTREE = topicSearchSubtree ; public static final String QUEUE SEARCH MATCHING = queueSearchMatching ; public static final String QUEUE SEARCH SUBTREE = queueSearchSubtree ; public static final String ADMIN BASE = adminBase ; public static final String ADMIN ATTRIBUTE = adminAttribute ; public static final String READ BASE = readBase ; public static final String READ ATTRIBUTE = readAttribute ; public static final String WRITE BASE = writeBAse ; public static final String WRITE ATTRIBUTE = writeAttribute ; private static final Logger LOG = LoggerFactory getLogger(LDAPLoginModule class); private String initialContextFactory; private String connectionURL; private String connectionUsername; private String connectionPassword; private String connectionProtocol; private String authentication; private DirContext context; private MessageFormat topicSearchMatchingFormat; private MessageFormat queueSearchMatchingFormat; private String advisorySearchBase = uid=ActiveMQ Advisory,ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com ; private String tempSearchBase = uid=ActiveMQ Temp,ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com ; private boolean topicSearchSubtreeBool = true; private boolean queueSearchSubtreeBool = true; private boolean useAdvisorySearchBase = true; private String adminBase; private String adminAttribute; private String readBase; private String readAttribute; private String writeBase; private String writeAttribute; public LDAPAuthorizationMap() { initialContextFactory = com sun jndi ldap LdapCtxFactory ; connectionURL = ldap connectionUsername = uid=admin,ou=system ; connectionPassword = secret ; connectionProtocol = s ; authentication = simple ; topicSearchMatchingFormat = new MessageFormat( uid={0},ou=topics,ou=destinations,o=ActiveMQ,dc=example,dc=com ); queueSearchMatchingFormat = new MessageFormat( uid={0},ou=queues,ou=destinations,o=ActiveMQ,dc=example,dc=com ); adminBase = (cn=admin) ; adminAttribute = uniqueMember ; readBase = (cn=read) ; readAttribute = uniqueMember ; writeBase = (cn=write) ; writeAttribute = uniqueMember ; } public LDAPAuthorizationMap(Map<String,String> options) { initialContextFactory = options get(INITIAL CONTEXT FACTORY); connectionURL = options get(CONNECTION URL); connectionUsername = options get(CONNECTION USERNAME); connectionPassword = options get(CONNECTION PASSWORD); connectionProtocol = options get(CONNECTION PROTOCOL); authentication = options get(AUTHENTICATION); adminBase = options get(ADMIN BASE); adminAttribute = options get(ADMIN ATTRIBUTE); readBase = options get(READ BASE); readAttribute = options get(READ ATTRIBUTE); writeBase = options get(WRITE BASE); writeAttribute = options get(WRITE ATTRIBUTE); String topicSearchMatching = options get(TOPIC SEARCH MATCHING); String topicSearchSubtree = options get(TOPIC SEARCH SUBTREE); String queueSearchMatching = options get(QUEUE SEARCH MATCHING); String queueSearchSubtree = options get(QUEUE SEARCH SUBTREE); topicSearchMatchingFormat = new MessageFormat(topicSearchMatching); queueSearchMatchingFormat = new MessageFormat(queueSearchMatching); topicSearchSubtreeBool = Boolean valueOf(topicSearchSubtree) booleanValue(); queueSearchSubtreeBool = Boolean valueOf(queueSearchSubtree) booleanValue(); } public Set<GroupPrincipal> getTempDestinationAdminACLs() { try { context = open(); } catch (NamingException e) { LOG error(e toString()); return new HashSet<GroupPrincipal>(); } SearchControls constraints = new SearchControls(); constraints setReturningAttributes(new String[] {adminAttribute}); return getACLs(tempSearchBase, constraints, adminBase, adminAttribute); } public Set<GroupPrincipal> getTempDestinationReadACLs() { try { context = open(); } catch (NamingException e) { LOG error(e toString()); return new HashSet<GroupPrincipal>(); } SearchControls constraints = new SearchControls(); constraints setReturningAttributes(new String[] {readAttribute}); return getACLs(tempSearchBase, constraints, readBase, readAttribute); } public Set<GroupPrincipal> getTempDestinationWriteACLs() { try { context = open(); } catch (NamingException e) { LOG error(e toString()); return new HashSet<GroupPrincipal>(); } SearchControls constraints = new SearchControls(); constraints setReturningAttributes(new String[] {writeAttribute}); return getACLs(tempSearchBase, constraints, writeBase, writeAttribute); } public Set<GroupPrincipal> getAdminACLs(ActiveMQDestination destination) { if (destination isComposite()) { return getCompositeACLs(destination, adminBase, adminAttribute); } return getACLs(destination, adminBase, adminAttribute); } public Set<GroupPrincipal> getReadACLs(ActiveMQDestination destination) { if (destination isComposite()) { return getCompositeACLs(destination, readBase, readAttribute); } return getACLs(destination, readBase, readAttribute); } public Set<GroupPrincipal> getWriteACLs(ActiveMQDestination destination) { if (destination isComposite()) { return getCompositeACLs(destination, writeBase, writeAttribute); } return getACLs(destination, writeBase, writeAttribute); } public String getAdminAttribute() { return adminAttribute; } public void setAdminAttribute(String adminAttribute) { this adminAttribute = adminAttribute; } public String getAdminBase() { return adminBase; } public void setAdminBase(String adminBase) { this adminBase = adminBase; } public String getAuthentication() { return authentication; } public void setAuthentication(String authentication) { this authentication = authentication; } public String getConnectionPassword() { return connectionPassword; } public void setConnectionPassword(String connectionPassword) { this connectionPassword = connectionPassword; } public String getConnectionProtocol() { return connectionProtocol; } public void setConnectionProtocol(String connectionProtocol) { this connectionProtocol = connectionProtocol; } public String getConnectionURL() { return connectionURL; } public void setConnectionURL(String connectionURL) { this connectionURL = connectionURL; } public String getConnectionUsername() { return connectionUsername; } public void setConnectionUsername(String connectionUsername) { this connectionUsername = connectionUsername; } public DirContext getContext() { return context; } public void setContext(DirContext context) { this context = context; } public String getInitialContextFactory() { return initialContextFactory; } public void setInitialContextFactory(String initialContextFactory) { this initialContextFactory = initialContextFactory; } public MessageFormat getQueueSearchMatchingFormat() { return queueSearchMatchingFormat; } public void setQueueSearchMatchingFormat(MessageFormat queueSearchMatchingFormat) { this queueSearchMatchingFormat = queueSearchMatchingFormat; } public boolean isQueueSearchSubtreeBool() { return queueSearchSubtreeBool; } public void setQueueSearchSubtreeBool(boolean queueSearchSubtreeBool) { this queueSearchSubtreeBool = queueSearchSubtreeBool; } public String getReadAttribute() { return readAttribute; } public void setReadAttribute(String readAttribute) { this readAttribute = readAttribute; } public String getReadBase() { return readBase; } public void setReadBase(String readBase) { this readBase = readBase; } public MessageFormat getTopicSearchMatchingFormat() { return topicSearchMatchingFormat; } public void setTopicSearchMatchingFormat(MessageFormat topicSearchMatchingFormat) { this topicSearchMatchingFormat = topicSearchMatchingFormat; } public boolean isTopicSearchSubtreeBool() { return topicSearchSubtreeBool; } public void setTopicSearchSubtreeBool(boolean topicSearchSubtreeBool) { this topicSearchSubtreeBool = topicSearchSubtreeBool; } public String getWriteAttribute() { return writeAttribute; } public void setWriteAttribute(String writeAttribute) { this writeAttribute = writeAttribute; } public String getWriteBase() { return writeBase; } public void setWriteBase(String writeBase) { this writeBase = writeBase; } public boolean isUseAdvisorySearchBase() { return useAdvisorySearchBase; } public void setUseAdvisorySearchBase(boolean useAdvisorySearchBase) { this useAdvisorySearchBase = useAdvisorySearchBase; } public String getAdvisorySearchBase() { return advisorySearchBase; } public void setAdvisorySearchBase(String advisorySearchBase) { this advisorySearchBase = advisorySearchBase; } public String getTempSearchBase() { return tempSearchBase; } public void setTempSearchBase(String tempSearchBase) { this tempSearchBase = tempSearchBase; } protected Set<GroupPrincipal> getCompositeACLs(ActiveMQDestination destination, String roleBase, String roleAttribute) { ActiveMQDestination[] dests = destination getCompositeDestinations(); Set<GroupPrincipal> acls = null; for (ActiveMQDestination dest dests) { acls = DestinationMap union(acls, getACLs(dest, roleBase, roleAttribute)); if (acls == null || acls isEmpty()) { break; } } return acls; } protected Set<GroupPrincipal> getACLs(ActiveMQDestination destination, String roleBase, String roleAttribute) { try { context = open(); } catch (NamingException e) { LOG error(e toString()); return new HashSet<GroupPrincipal>(); } String destinationBase = ; SearchControls constraints = new SearchControls(); if (AdvisorySupport isAdvisoryTopic(destination) && useAdvisorySearchBase) { destinationBase = advisorySearchBase; } else { if ((destination getDestinationType() & ActiveMQDestination QUEUE TYPE) == ActiveMQDestination QUEUE TYPE) { destinationBase = queueSearchMatchingFormat format(new String[]{destination getPhysicalName()}); if (queueSearchSubtreeBool) { constraints setSearchScope(SearchControls SUBTREE SCOPE); } else { constraints setSearchScope(SearchControls ONELEVEL SCOPE); } } if ((destination getDestinationType() & ActiveMQDestination TOPIC TYPE) == ActiveMQDestination TOPIC TYPE) { destinationBase = topicSearchMatchingFormat format(new String[]{destination getPhysicalName()}); if (topicSearchSubtreeBool) { constraints setSearchScope(SearchControls SUBTREE SCOPE); } else { constraints setSearchScope(SearchControls ONELEVEL SCOPE); } } } constraints setReturningAttributes(new String[] {roleAttribute}); return getACLs(destinationBase, constraints, roleBase, roleAttribute); } protected Set<GroupPrincipal> getACLs(String destinationBase, SearchControls constraints, String roleBase, String roleAttribute) { try { Set<GroupPrincipal> roles = new HashSet<GroupPrincipal>(); Set<String> acls = new HashSet<String>(); NamingEnumeration< > results = context search(destinationBase, roleBase, constraints); while (results hasMore()) { SearchResult result = (SearchResult)results next(); Attributes attrs = result getAttributes(); if (attrs == null) { continue; } acls = addAttributeValues(roleAttribute, attrs, acls); } for (Iterator<String> iter = acls iterator(); iter hasNext();) { String roleName = iter next(); LdapName ldapname = new LdapName(roleName); Rdn rdn = ldapname getRdn(ldapname size() - 1); LOG debug( Found role [ + rdn getValue() toString() + ] ); roles add(new GroupPrincipal(rdn getValue() toString())); } return roles; } catch (NamingException e) { LOG error(e toString()); return new HashSet<GroupPrincipal>(); } } protected Set<String> addAttributeValues(String attrId, Attributes attrs, Set<String> values) throws NamingException { if (attrId == null || attrs == null) { return values; } if (values == null) { values = new HashSet<String>(); } Attribute attr = attrs get(attrId); if (attr == null) { return values; } NamingEnumeration< > e = attr getAll(); while (e hasMore()) { String value = (String)e next(); values add(value); } return values; } protected DirContext open() throws NamingException { if (context != null) { return context; } try { Hashtable<String, String> env = new Hashtable<String, String>(); env put(Context INITIAL CONTEXT FACTORY, initialContextFactory); if (connectionUsername != null || ! equals(connectionUsername)) { env put(Context SECURITY PRINCIPAL, connectionUsername); } if (connectionPassword != null || ! equals(connectionPassword)) { env put(Context SECURITY CREDENTIALS, connectionPassword); } env put(Context SECURITY PROTOCOL, connectionProtocol); env put(Context PROVIDER URL, connectionURL); env put(Context SECURITY AUTHENTICATION, authentication); context = new InitialDirContext(env); } catch (NamingException e) { LOG error(e toString()); throw e; } return context; } }",1.0,
431,431,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\SimpleAuthenticationBroker.,SimpleAuthenticationBroker,"public class SimpleAuthenticationBroker extends BrokerFilter { private boolean anonymousAccessAllowed = false; private String anonymousUser; private String anonymousGroup; private final Map<String,String> userPasswords; private final Map<String,Set<Principal>> userGroups; private final CopyOnWriteArrayList<SecurityContext> securityContexts = new CopyOnWriteArrayList<SecurityContext>(); public SimpleAuthenticationBroker(Broker next, Map<String,String> userPasswords, Map<String,Set<Principal>> userGroups) { super(next); this userPasswords = userPasswords; this userGroups = userGroups; } public void setAnonymousAccessAllowed(boolean anonymousAccessAllowed) { this anonymousAccessAllowed = anonymousAccessAllowed; } public void setAnonymousUser(String anonymousUser) { this anonymousUser = anonymousUser; } public void setAnonymousGroup(String anonymousGroup) { this anonymousGroup = anonymousGroup; } public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception { SecurityContext s = context getSecurityContext(); if (s == null) { if (anonymousAccessAllowed && info getUserName() == null && info getPassword() == null) { info setUserName(anonymousUser); s = new SecurityContext(info getUserName()) { public Set<Principal> getPrincipals() { Set<Principal> groups = new HashSet<Principal>(); groups add(new GroupPrincipal(anonymousGroup)); return groups; } }; } else { String pw = userPasswords get(info getUserName()); if (pw == null || !pw equals(info getPassword())) { throw new SecurityException( User name [ + info getUserName() + ] or password is invalid ); } final Set<Principal> groups = userGroups get(info getUserName()); s = new SecurityContext(info getUserName()) { public Set<Principal> getPrincipals() { return groups; } }; } context setSecurityContext(s); securityContexts add(s); } try { super addConnection(context, info); } catch (Exception e) { securityContexts remove(s); context setSecurityContext(null); throw e; } } public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception { super removeConnection(context, info, error); if (securityContexts remove(context getSecurityContext())) { context setSecurityContext(null); } } public void refresh() { for (Iterator<SecurityContext> iter = securityContexts iterator(); iter hasNext();) { SecurityContext sc = iter next(); sc getAuthorizedReadDests() clear(); sc getAuthorizedWriteDests() clear(); } } }",1.0,
432,432,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\SimpleAuthenticationPlugin.,SimpleAuthenticationPlugin,"public class SimpleAuthenticationPlugin implements BrokerPlugin { private Map<String, String> userPasswords; private Map<String, Set<Principal>> userGroups; private static final String DEFAULT ANONYMOUS USER = anonymous ; private static final String DEFAULT ANONYMOUS GROUP = anonymous ; private String anonymousUser = DEFAULT ANONYMOUS USER; private String anonymousGroup = DEFAULT ANONYMOUS GROUP; private boolean anonymousAccessAllowed = false; public SimpleAuthenticationPlugin() { } public SimpleAuthenticationPlugin(List< > users) { setUsers(users); } public Broker installPlugin(Broker parent) { SimpleAuthenticationBroker broker = new SimpleAuthenticationBroker(parent, userPasswords, userGroups); broker setAnonymousAccessAllowed(anonymousAccessAllowed); broker setAnonymousUser(anonymousUser); broker setAnonymousGroup(anonymousGroup); return broker; } public Map<String, Set<Principal>> getUserGroups() { return userGroups; } public void setUsers(List< > users) { userPasswords = new HashMap<String, String>(); userGroups = new HashMap<String, Set<Principal>>(); for (Iterator< > it = users iterator(); it hasNext();) { AuthenticationUser user = (AuthenticationUser)it next(); userPasswords put(user getUsername(), user getPassword()); Set<Principal> groups = new HashSet<Principal>(); StringTokenizer iter = new StringTokenizer(user getGroups(), , ); while (iter hasMoreTokens()) { String name = iter nextToken() trim(); groups add(new GroupPrincipal(name)); } userGroups put(user getUsername(), groups); } } public void setAnonymousAccessAllowed(boolean anonymousAccessAllowed) { this anonymousAccessAllowed = anonymousAccessAllowed; } public void setAnonymousUser(String anonymousUser) { this anonymousUser = anonymousUser; } public void setAnonymousGroup(String anonymousGroup) { this anonymousGroup = anonymousGroup; } public void setUserGroups(Map<String, Set<Principal>> userGroups) { this userGroups = userGroups; } public Map<String, String> getUserPasswords() { return userPasswords; } public void setUserPasswords(Map<String, String> userPasswords) { this userPasswords = userPasswords; } }",1.0,
433,433,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\SimpleAuthorizationMap.,SimpleAuthorizationMap,"public class SimpleAuthorizationMap implements AuthorizationMap { private DestinationMap writeACLs; private DestinationMap readACLs; private DestinationMap adminACLs; private TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry; public SimpleAuthorizationMap() { } public SimpleAuthorizationMap(DestinationMap writeACLs, DestinationMap readACLs, DestinationMap adminACLs) { this writeACLs = writeACLs; this readACLs = readACLs; this adminACLs = adminACLs; } public void setTempDestinationAuthorizationEntry( TempDestinationAuthorizationEntry tempDestinationAuthorizationEntry) { this tempDestinationAuthorizationEntry = tempDestinationAuthorizationEntry; } public TempDestinationAuthorizationEntry getTempDestinationAuthorizationEntry() { return this tempDestinationAuthorizationEntry; } public Set<Object> getTempDestinationAdminACLs() { if (tempDestinationAuthorizationEntry != null) { return tempDestinationAuthorizationEntry getAdminACLs(); } else { return null; } } public Set<Object> getTempDestinationReadACLs() { if (tempDestinationAuthorizationEntry != null) { return tempDestinationAuthorizationEntry getReadACLs(); } else { return null; } } public Set<Object> getTempDestinationWriteACLs() { if (tempDestinationAuthorizationEntry != null) { return tempDestinationAuthorizationEntry getWriteACLs(); } else { return null; } } SuppressWarnings( unchecked ) public Set<Object> getAdminACLs(ActiveMQDestination destination) { return adminACLs get(destination); } SuppressWarnings( unchecked ) public Set<Object> getReadACLs(ActiveMQDestination destination) { return readACLs get(destination); } SuppressWarnings( unchecked ) public Set<Object> getWriteACLs(ActiveMQDestination destination) { return writeACLs get(destination); } public DestinationMap getAdminACLs() { return adminACLs; } public void setAdminACLs(DestinationMap adminACLs) { this adminACLs = adminACLs; } public DestinationMap getReadACLs() { return readACLs; } public void setReadACLs(DestinationMap readACLs) { this readACLs = readACLs; } public DestinationMap getWriteACLs() { return writeACLs; } public void setWriteACLs(DestinationMap writeACLs) { this writeACLs = writeACLs; } }",1.0,
435,435,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\SimpleCachedLDAPAuthorizationMap.,CachedLDAPAuthorizationMapNamespaceChangeListener,"protected class CachedLDAPAuthorizationMapNamespaceChangeListener implements NamespaceChangeListener, ObjectChangeListener { private final DestinationType destinationType; private final PermissionType permissionType; public CachedLDAPAuthorizationMapNamespaceChangeListener( DestinationType destinationType, PermissionType permissionType) { this destinationType = destinationType; this permissionType = permissionType; } Override public void namingExceptionThrown(NamingExceptionEvent evt) { SimpleCachedLDAPAuthorizationMap this namingExceptionThrown(evt); } Override public void objectAdded(NamingEvent evt) { if (permissionType != null) { SimpleCachedLDAPAuthorizationMap this objectAdded(evt, destinationType, permissionType); } } Override public void objectRemoved(NamingEvent evt) { if (permissionType != null) { SimpleCachedLDAPAuthorizationMap this objectRemoved(evt, destinationType, permissionType); } } Override public void objectRenamed(NamingEvent evt) { SimpleCachedLDAPAuthorizationMap this objectRenamed(evt, destinationType, permissionType); } Override public void objectChanged(NamingEvent evt) { if (permissionType != null) { SimpleCachedLDAPAuthorizationMap this objectChanged(evt, destinationType, permissionType); } } }",1.0,
436,436,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\TempDestinationAuthorizationEntry.,TempDestinationAuthorizationEntry,public class TempDestinationAuthorizationEntry extends AuthorizationEntry { public void afterPropertiesSet() throws Exception { } },1.0,
438,438,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\store\AbstractMessageStore.,CallableImplementation,static class CallableImplementation implements Callable<Object> { public Object call() throws Exception { return null; } } static {,1.0,
442,442,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\store\ReferenceStore.,ReferenceData,"public class ReferenceData { long expiration; int fileId; int offset; public long getExpiration() { return expiration; } public void setExpiration(long expiration) { this expiration = expiration; } public int getFileId() { return fileId; } public void setFileId(int file) { this fileId = file; } public int getOffset() { return offset; } public void setOffset(int offset) { this offset = offset; } Override public String toString() { return ReferenceData fileId= + fileId + , offset= + offset + , expiration= + expiration; } }",1.0,
443,443,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\store\SharedFileLocker.,SharedFileLocker,"public class SharedFileLocker extends AbstractLocker { public static final File DEFAULT DIRECTORY = new File( KahaDB ); private static final Logger LOG = LoggerFactory getLogger(SharedFileLocker class); private LockFile lockFile; protected File directory = DEFAULT DIRECTORY; Override public void doStart() throws Exception { if (lockFile == null) { File lockFileName = new File(directory, lock ); lockFile = new LockFile(lockFileName, true); if (failIfLocked) { lockFile lock(); } else { boolean locked = false; while ((!isStopped()) && (!isStopping())) { try { lockFile lock(); locked = true; break; } catch (IOException e) { LOG info( Database + lockFileName + is locked waiting + (lockAcquireSleepInterval / 1000) + seconds for the database to be unlocked Reason + e); try { Thread sleep(lockAcquireSleepInterval); } catch (InterruptedException e1) { } } } if (!locked) { throw new IOException( attempt to obtain lock aborted due to shutdown ); } } } } Override public void doStop(ServiceStopper stopper) throws Exception { lockFile unlock(); lockFile=null; } public File getDirectory() { return directory; } public void setDirectory(File directory) { this directory = directory; } Override public void configure(PersistenceAdapter persistenceAdapter) throws IOException { this setDirectory(persistenceAdapter getDirectory()); } }",1.0,
445,445,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\store\memory\MemoryPersistenceAdapter.,MemoryPersistenceAdapter,"public class MemoryPersistenceAdapter implements PersistenceAdapter { private static final Logger LOG = LoggerFactory getLogger(MemoryPersistenceAdapter class); MemoryTransactionStore transactionStore; ConcurrentHashMap<ActiveMQDestination, TopicMessageStore> topics = new ConcurrentHashMap<ActiveMQDestination, TopicMessageStore>(); ConcurrentHashMap<ActiveMQDestination, MessageStore> queues = new ConcurrentHashMap<ActiveMQDestination, MessageStore>(); private boolean useExternalMessageReferences; public Set<ActiveMQDestination> getDestinations() { Set<ActiveMQDestination> rc = new HashSet<ActiveMQDestination>(queues size() + topics size()); for (Iterator<ActiveMQDestination> iter = queues keySet() iterator(); iter hasNext();) { rc add(iter next()); } for (Iterator<ActiveMQDestination> iter = topics keySet() iterator(); iter hasNext();) { rc add(iter next()); } return rc; } public static MemoryPersistenceAdapter newInstance(File file) { return new MemoryPersistenceAdapter(); } public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException { MessageStore rc = queues get(destination); if (rc == null) { rc = new MemoryMessageStore(destination); if (transactionStore != null) { rc = transactionStore proxy(rc); } queues put(destination, rc); } return rc; } public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException { TopicMessageStore rc = topics get(destination); if (rc == null) { rc = new MemoryTopicMessageStore(destination); if (transactionStore != null) { rc = transactionStore proxy(rc); } topics put(destination, rc); } return rc; } public void removeQueueMessageStore(ActiveMQQueue destination) { queues remove(destination); } public void removeTopicMessageStore(ActiveMQTopic destination) { topics remove(destination); } public TransactionStore createTransactionStore() throws IOException { if (transactionStore == null) { transactionStore = new MemoryTransactionStore(this); } return transactionStore; } public void beginTransaction(ConnectionContext context) { } public void commitTransaction(ConnectionContext context) { } public void rollbackTransaction(ConnectionContext context) { } public void start() throws Exception { } public void stop() throws Exception { } public long getLastMessageBrokerSequenceId() throws IOException { return 0; } public void deleteAllMessages() throws IOException { for (Iterator<TopicMessageStore> iter = topics values() iterator(); iter hasNext();) { MemoryMessageStore store = asMemoryMessageStore(iter next()); if (store != null) { store delete(); } } for (Iterator<MessageStore> iter = queues values() iterator(); iter hasNext();) { MemoryMessageStore store = asMemoryMessageStore(iter next()); if (store != null) { store delete(); } } if (transactionStore != null) { transactionStore delete(); } } public boolean isUseExternalMessageReferences() { return useExternalMessageReferences; } public void setUseExternalMessageReferences(boolean useExternalMessageReferences) { this useExternalMessageReferences = useExternalMessageReferences; } protected MemoryMessageStore asMemoryMessageStore(Object value) { if (value instanceof MemoryMessageStore) { return (MemoryMessageStore)value; } if (value instanceof ProxyMessageStore) { MessageStore delegate = ((ProxyMessageStore)value) getDelegate(); if (delegate instanceof MemoryMessageStore) { return (MemoryMessageStore) delegate; } } LOG warn( Expected an instance of MemoryMessageStore but was + value); return null; } public void setUsageManager(SystemUsage usageManager) { } public String toString() { return MemoryPersistenceAdapter ; } public void setBrokerName(String brokerName) { } public void setDirectory(File dir) { } public File getDirectory(){ return null; } public void checkpoint(boolean sync) throws IOException { } public long size(){ return 0; } public void setCreateTransactionStore(boolean create) throws IOException { if (create) { createTransactionStore(); } } public long getLastProducerSequenceId(ProducerId id) { return -1; } }",1.0,
447,447,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\store\memory\MemoryTopicSub.,MemoryTopicSub,"class MemoryTopicSub { private Map<MessageId, Message> map = new LinkedHashMap<MessageId, Message>(); private MessageId lastBatch; void addMessage(MessageId id, Message message) { synchronized(this) { map put(id, message); } message incrementReferenceCount(); } void removeMessage(MessageId id) { Message removed; synchronized(this) { removed = map remove(id); if ((lastBatch != null && lastBatch equals(id)) || map isEmpty()) { resetBatching(); } } if( removed!=null ) { removed decrementReferenceCount(); } } synchronized int size() { return map size(); } synchronized void recoverSubscription(MessageRecoveryListener listener) throws Exception { for (Iterator iter = map entrySet() iterator(); iter hasNext();) { Map Entry entry = (Entry)iter next(); Object msg = entry getValue(); if (msg getClass() == MessageId class) { listener recoverMessageReference((MessageId)msg); } else { listener recoverMessage((Message)msg); } } } synchronized void recoverNextMessages(int maxReturned, MessageRecoveryListener listener) throws Exception { boolean pastLackBatch = lastBatch == null; MessageId lastId = null; int count = 0; for (Iterator iter = map entrySet() iterator(); iter hasNext() && count < maxReturned;) { Map Entry entry = (Entry)iter next(); if (pastLackBatch) { count++; Object msg = entry getValue(); lastId = (MessageId)entry getKey(); if (msg getClass() == MessageId class) { listener recoverMessageReference((MessageId)msg); } else { listener recoverMessage((Message)msg); } } else { pastLackBatch = entry getKey() equals(lastBatch); } } if (lastId != null) { lastBatch = lastId; } } synchronized void resetBatching() { lastBatch = null; } }",1.0,
449,449,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\store\memory\MemoryTransactionStore.,Tx,public class Tx { public ArrayList<AddMessageCommand> messages = new ArrayList<AddMessageCommand>(); public final ArrayList<RemoveMessageCommand> acks = new ArrayList<RemoveMessageCommand>(); public void add(AddMessageCommand msg) { messages add(msg); } public void add(RemoveMessageCommand ack) { acks add(ack); } public Message[] getMessages() { Message rc[] = new Message[messages size()]; int count = 0; for (Iterator<AddMessageCommand> iter = messages iterator(); iter hasNext();) { AddMessageCommand cmd = iter next(); rc[count++] = cmd getMessage(); } return rc; } public MessageAck[] getAcks() { MessageAck rc[] = new MessageAck[acks size()]; int count = 0; for (Iterator<RemoveMessageCommand> iter = acks iterator(); iter hasNext();) { RemoveMessageCommand cmd = iter next(); rc[count++] = cmd getMessageAck(); } return rc; } public void commit() throws IOException { ConnectionContext ctx = new ConnectionContext(); persistenceAdapter beginTransaction(ctx); try { for (Iterator<AddMessageCommand> iter = messages iterator(); iter hasNext();) { AddMessageCommand cmd = iter next(); cmd run(ctx); } for (Iterator<RemoveMessageCommand> iter = acks iterator(); iter hasNext();) { RemoveMessageCommand cmd = iter next(); cmd run(ctx); } } catch ( IOException e ) { persistenceAdapter rollbackTransaction(ctx); throw e; } persistenceAdapter commitTransaction(ctx); } },1.0,
450,450,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transaction\LocalTransaction.,LocalTransaction,"public class LocalTransaction extends Transaction { private static final Logger LOG = LoggerFactory getLogger(LocalTransaction class); private final TransactionStore transactionStore; private final LocalTransactionId xid; private final ConnectionContext context; public LocalTransaction(TransactionStore transactionStore, LocalTransactionId xid, ConnectionContext context) { this transactionStore = transactionStore; this xid = xid; this context = context; } Override public void commit(boolean onePhase) throws XAException, IOException { if (LOG isDebugEnabled()) { LOG debug( commit + xid + syncCount + size()); } try { prePrepare(); } catch (XAException e) { throw e; } catch (Throwable e) { LOG warn( COMMIT FAILED , e); rollback(); XAException xae = new XAException( COMMIT FAILED Transaction rolled back ); xae errorCode = XAException XA RBOTHER; xae initCause(e); throw xae; } setState(Transaction FINISHED STATE); context getTransactions() remove(xid); try { transactionStore commit(getTransactionId(), false,preCommitTask, postCommitTask); this waitPostCommitDone(postCommitTask); } catch (Throwable t) { LOG warn( Store COMMIT FAILED , t); rollback(); XAException xae = new XAException( STORE COMMIT FAILED Transaction rolled back ); xae errorCode = XAException XA RBOTHER; xae initCause(t); throw xae; } } Override public void rollback() throws XAException, IOException { if (LOG isDebugEnabled()) { LOG debug( rollback + xid + syncCount + size()); } setState(Transaction FINISHED STATE); context getTransactions() remove(xid); synchronized (transactionStore) { transactionStore rollback(getTransactionId()); try { fireAfterRollback(); } catch (Throwable e) { LOG warn( POST ROLLBACK FAILED , e); XAException xae = new XAException( POST ROLLBACK FAILED ); xae errorCode = XAException XAER RMERR; xae initCause(e); throw xae; } } } Override public int prepare() throws XAException { XAException xae = new XAException( Prepare not implemented on Local Transactions ); xae errorCode = XAException XAER RMERR; throw xae; } Override public TransactionId getTransactionId() { return xid; } Override public Logger getLog() { return LOG; } }",1.0,
451,451,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transaction\Transaction.,Transaction,"public abstract class Transaction { public static final byte START STATE = 0; public static final byte IN USE STATE = 1; public static final byte PREPARED STATE = 2; public static final byte FINISHED STATE = 3; private final ArrayList<Synchronization> synchronizations = new ArrayList<Synchronization>(); private byte state = START STATE; protected FutureTask< > preCommitTask = new FutureTask<Object>(new Callable<Object>() { public Object call() throws Exception { doPreCommit(); return null; } }); protected FutureTask< > postCommitTask = new FutureTask<Object>(new Callable<Object>() { public Object call() throws Exception { doPostCommit(); return null; } }); public byte getState() { return state; } public void setState(byte state) { this state = state; } public void addSynchronization(Synchronization r) { synchronizations add(r); if (state == START STATE) { state = IN USE STATE; } } public Synchronization findMatching(Synchronization r) { int existing = synchronizations indexOf(r); if (existing != -1) { return synchronizations get(existing); } return null; } public void removeSynchronization(Synchronization r) { synchronizations remove(r); } public void prePrepare() throws Exception { switch (state) { case START STATE case IN USE STATE break; default XAException xae = new XAException( Prepare cannot be called now ); xae errorCode = XAException XAER PROTO; throw xae; } } protected void fireBeforeCommit() throws Exception { for (Iterator<Synchronization> iter = synchronizations iterator(); iter hasNext();) { Synchronization s = iter next(); s beforeCommit(); } } protected void fireAfterCommit() throws Exception { for (Iterator<Synchronization> iter = synchronizations iterator(); iter hasNext();) { Synchronization s = iter next(); s afterCommit(); } } public void fireAfterRollback() throws Exception { Collections reverse(synchronizations); for (Iterator<Synchronization> iter = synchronizations iterator(); iter hasNext();) { Synchronization s = iter next(); s afterRollback(); } } Override public String toString() { return super toString() + [synchronizations= + synchronizations + ] ; } public abstract void commit(boolean onePhase) throws XAException, IOException; public abstract void rollback() throws XAException, IOException; public abstract int prepare() throws XAException, IOException; public abstract TransactionId getTransactionId(); public abstract Logger getLog(); public boolean isPrepared() { return getState() == PREPARED STATE; } public int size() { return synchronizations size(); } protected void waitPostCommitDone(FutureTask< > postCommitTask) throws XAException, IOException { try { postCommitTask get(); } catch (InterruptedException e) { throw new InterruptedIOException(e toString()); } catch (ExecutionException e) { Throwable t = e getCause(); if (t instanceof XAException) { throw (XAException) t; } else if (t instanceof IOException) { throw (IOException) t; } else { throw new XAException(e toString()); } } } protected void doPreCommit() throws XAException { try { fireBeforeCommit(); } catch (Throwable e) { getLog() warn( PRE COMMIT FAILED , e); XAException xae = new XAException( PRE COMMIT FAILED ); xae errorCode = XAException XAER RMERR; xae initCause(e); throw xae; } } protected void doPostCommit() throws XAException { try { fireAfterCommit(); } catch (Throwable e) { getLog() warn( POST COMMIT FAILED , e); XAException xae = new XAException( POST COMMIT FAILED ); xae errorCode = XAException XAER RMERR; xae initCause(e); throw xae; } } }",1.0,
452,452,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transaction\XATransaction.,XATransaction,"public class XATransaction extends Transaction { private static final Logger LOG = LoggerFactory getLogger(XATransaction class); private final TransactionStore transactionStore; private final XATransactionId xid; private final TransactionBroker broker; private final ConnectionId connectionId; public XATransaction(TransactionStore transactionStore, XATransactionId xid, TransactionBroker broker, ConnectionId connectionId) { this transactionStore = transactionStore; this xid = xid; this broker = broker; this connectionId = connectionId; if (LOG isDebugEnabled()) { LOG debug( XA Transaction new/begin + xid); } } Override public void commit(boolean onePhase) throws XAException, IOException { if (LOG isDebugEnabled()) { LOG debug( XA Transaction commit onePhase + onePhase + , xid + xid); } switch (getState()) { case START STATE checkForPreparedState(onePhase); setStateFinished(); break; case IN USE STATE checkForPreparedState(onePhase); doPrePrepare(); setStateFinished(); storeCommit(getTransactionId(), false, preCommitTask, postCommitTask); break; case PREPARED STATE setStateFinished(); storeCommit(getTransactionId(), true, preCommitTask, postCommitTask); break; default illegalStateTransition( commit ); } } private void storeCommit(TransactionId txid, boolean wasPrepared, Runnable preCommit,Runnable postCommit) throws XAException, IOException { try { transactionStore commit(getTransactionId(), wasPrepared, preCommitTask, postCommitTask); waitPostCommitDone(postCommitTask); } catch (XAException xae) { throw xae; } catch (Throwable t) { LOG warn( Store COMMIT FAILED , t); rollback(); XAException xae = new XAException( STORE COMMIT FAILED Transaction rolled back ); xae errorCode = XAException XA RBOTHER; xae initCause(t); throw xae; } } private void illegalStateTransition(String callName) throws XAException { XAException xae = new XAException( Cannot call + callName + now ); xae errorCode = XAException XAER PROTO; throw xae; } private void checkForPreparedState(boolean onePhase) throws XAException { if (!onePhase) { XAException xae = new XAException( Cannot do 2 phase commit if the transaction has not been prepared ); xae errorCode = XAException XAER PROTO; throw xae; } } private void doPrePrepare() throws XAException, IOException { try { prePrepare(); } catch (XAException e) { throw e; } catch (Throwable e) { LOG warn( PRE-PREPARE FAILED , e); rollback(); XAException xae = new XAException( PRE-PREPARE FAILED Transaction rolled back ); xae errorCode = XAException XA RBOTHER; xae initCause(e); throw xae; } } Override public void rollback() throws XAException, IOException { if (LOG isDebugEnabled()) { LOG debug( XA Transaction rollback + xid); } switch (getState()) { case START STATE setStateFinished(); break; case IN USE STATE setStateFinished(); transactionStore rollback(getTransactionId()); doPostRollback(); break; case PREPARED STATE setStateFinished(); transactionStore rollback(getTransactionId()); doPostRollback(); break; case FINISHED STATE transactionStore rollback(getTransactionId()); doPostRollback(); break; default throw new XAException( Invalid state ); } } private void doPostRollback() throws XAException { try { fireAfterRollback(); } catch (Throwable e) { LOG warn( POST ROLLBACK FAILED , e); XAException xae = new XAException( POST ROLLBACK FAILED ); xae errorCode = XAException XAER RMERR; xae initCause(e); throw xae; } } Override public int prepare() throws XAException, IOException { if (LOG isDebugEnabled()) { LOG debug( XA Transaction prepare + xid); } switch (getState()) { case START STATE setStateFinished(); return XAResource XA RDONLY; case IN USE STATE doPrePrepare(); setState(Transaction PREPARED STATE); transactionStore prepare(getTransactionId()); return XAResource XA OK; default illegalStateTransition( prepare ); return XAResource XA RDONLY; } } private void setStateFinished() { setState(Transaction FINISHED STATE); broker removeTransaction(xid); } public ConnectionId getConnectionId() { return connectionId; } Override public TransactionId getTransactionId() { return xid; } Override public Logger getLog() { return LOG; } public XATransactionId getXid() { return xid; } }",1.0,
453,453,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\TransportFactorySupport.,TransportFactorySupport,"public class TransportFactorySupport { public static TransportServer bind(BrokerService brokerService, URI location) throws IOException { TransportFactory tf = TransportFactory findTransportFactory(location); if( brokerService!=null && tf instanceof BrokerServiceAware) { ((BrokerServiceAware)tf) setBrokerService(brokerService); } try { if( brokerService!=null ) { SslContext setCurrentSslContext(brokerService getSslContext()); } return tf doBind(location); } finally { SslContext setCurrentSslContext(null); } } }",1.0,
454,454,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\TransportLogger.,TransportLogger,"public class TransportLogger extends TransportFilter { private final Logger log; private boolean logging; private final LogWriter logWriter; private TransportLoggerView view; public TransportLogger(Transport next, Logger log, boolean startLogging, LogWriter logWriter) { super(next); this log = log; this logging = startLogging; this logWriter = logWriter; } public boolean isLogging() { return logging; } public void setLogging(boolean logging) { this logging = logging; } public Object request(Object command) throws IOException { if (logging) logWriter logRequest(log, command); Object rc = super request(command); if (logging) logWriter logResponse(log, command); return rc; } public Object request(Object command, int timeout) throws IOException { if (logging) logWriter logRequest(log, command); Object rc = super request(command, timeout); if (logging) logWriter logResponse(log, command); return rc; } public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException { if (logging) logWriter logAsyncRequest(log, command); FutureResponse rc = next asyncRequest(command, responseCallback); return rc; } public void oneway(Object command) throws IOException { if( logging && log isDebugEnabled() ) { logWriter logOneWay(log, command); } next oneway(command); } public void onCommand(Object command) { if( logging && log isDebugEnabled() ) { logWriter logReceivedCommand(log, command); } getTransportListener() onCommand(command); } public void onException(IOException error) { if( logging && log isDebugEnabled() ) { logWriter logReceivedException(log, error); } getTransportListener() onException(error); } public TransportLoggerView getView() { return view; } public void setView(TransportLoggerView view) { this view = view; } public String toString() { return next toString(); } public void finalize() throws Throwable { if (view != null) { view unregister(); } } }",1.0,
455,455,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\TransportLoggerControl.,TransportLoggerControl,"public class TransportLoggerControl implements TransportLoggerControlMBean { public TransportLoggerControl(ManagementContext managementContext) { } public void disableAllTransportLoggers() { TransportLoggerView disableAllTransportLoggers(); } public void enableAllTransportLoggers() { TransportLoggerView enableAllTransportLoggers(); } public void reloadLog4jProperties() throws Throwable { new BrokerView(null, null) reloadLog4jProperties(); } }",1.0,
457,457,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\TransportLoggerFactorySPI.,TransportLoggerFactorySPI,"public class TransportLoggerFactorySPI implements TransportLoggerSupport SPI { Override public Transport createTransportLogger(Transport transport) throws IOException { return TransportLoggerFactory getInstance() createTransportLogger(transport); } Override public Transport createTransportLogger(Transport transport, String logWriterName, boolean dynamicManagement, boolean startLogging, int jmxPort) throws IOException { return TransportLoggerFactory getInstance() createTransportLogger(transport, logWriterName, dynamicManagement, startLogging, jmxPort); } }",1.0,
460,460,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\logwriters\DefaultLogWriter.,DefaultLogWriter,"public class DefaultLogWriter implements LogWriter { public void initialMessage(Logger log) { } public void logRequest (Logger log, Object command) { log debug( SENDING REQUEST +command); } public void logResponse (Logger log, Object response) { log debug( GOT RESPONSE +response); } public void logAsyncRequest (Logger log, Object command) { log debug( SENDING ASNYC REQUEST +command); } public void logOneWay (Logger log, Object command) { log debug( SENDING +command); } public void logReceivedCommand (Logger log, Object command) { log debug( RECEIVED + command); } public void logReceivedException (Logger log, IOException error) { log debug( RECEIVED Exception +error, error); } }",1.0,
461,461,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\peer\PeerTransportFactory.,PeerTransportFactory,"public class PeerTransportFactory extends TransportFactory { public static final ConcurrentHashMap BROKERS = new ConcurrentHashMap(); public static final ConcurrentHashMap CONNECTORS = new ConcurrentHashMap(); public static final ConcurrentHashMap SERVERS = new ConcurrentHashMap(); private static final IdGenerator ID GENERATOR = new IdGenerator( peer- ); public Transport doConnect(URI location) throws Exception { VMTransportFactory vmTransportFactory = createTransportFactory(location); return vmTransportFactory doConnect(location); } public Transport doCompositeConnect(URI location) throws Exception { VMTransportFactory vmTransportFactory = createTransportFactory(location); return vmTransportFactory doCompositeConnect(location); } private VMTransportFactory createTransportFactory(URI location) throws IOException { try { String group = location getHost(); String broker = URISupport stripPrefix(location getPath(), / ); if (group == null) { group = default ; } if (broker == null || broker length() == 0) { broker = ID GENERATOR generateSanitizedId(); } final Map<String, String> brokerOptions = new HashMap<String, String>(URISupport parseParameters(location)); if (!brokerOptions containsKey( persistent )) { brokerOptions put( persistent , false ); } final URI finalLocation = new URI( vm final String finalBroker = broker; final String finalGroup = group; VMTransportFactory rc = new VMTransportFactory() { public Transport doConnect(URI ignore) throws Exception { return super doConnect(finalLocation); }; public Transport doCompositeConnect(URI ignore) throws Exception { return super doCompositeConnect(finalLocation); }; }; rc setBrokerFactoryHandler(new BrokerFactoryHandler() { public BrokerService createBroker(URI brokerURI) throws Exception { BrokerService service = new BrokerService(); IntrospectionSupport setProperties(service, brokerOptions); service setBrokerName(finalBroker); TransportConnector c = service addConnector( tcp c setDiscoveryUri(new URI( multicast service addNetworkConnector( multicast return service; } }); return rc; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } public TransportServer doBind(URI location) throws IOException { throw new IOException( This protocol does not support being bound ); } }",1.0,
463,463,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\vm\VMTransportFactory.,VMTransportFactory,"public class VMTransportFactory extends TransportFactory { public static final ConcurrentHashMap<String, BrokerService> BROKERS = new ConcurrentHashMap<String, BrokerService>(); public static final ConcurrentHashMap<String, TransportConnector> CONNECTORS = new ConcurrentHashMap<String, TransportConnector>(); public static final ConcurrentHashMap<String, VMTransportServer> SERVERS = new ConcurrentHashMap<String, VMTransportServer>(); private static final Logger LOG = LoggerFactory getLogger(VMTransportFactory class); BrokerFactoryHandler brokerFactoryHandler; public Transport doConnect(URI location) throws Exception { return VMTransportServer configure(doCompositeConnect(location)); } public Transport doCompositeConnect(URI location) throws Exception { URI brokerURI; String host; Map<String, String> options; boolean create = true; int waitForStart = -1; CompositeData data = URISupport parseComposite(location); if (data getComponents() length == 1 && broker equals(data getComponents()[0] getScheme())) { brokerURI = data getComponents()[0]; CompositeData brokerData = URISupport parseComposite(brokerURI); host = (String)brokerData getParameters() get( brokerName ); if (host == null) { host = localhost ; } if (brokerData getPath() != null) { host = brokerData getPath(); } options = data getParameters(); location = new URI( vm } else { try { host = extractHost(location); options = URISupport parseParameters(location); String config = (String)options remove( brokerConfig ); if (config != null) { brokerURI = new URI(config); } else { Map brokerOptions = IntrospectionSupport extractProperties(options, broker ); brokerURI = new URI( broker + URISupport createQueryString(brokerOptions)); } if ( false equals(options remove( create ))) { create = false; } String waitForStartString = options remove( waitForStart ); if (waitForStartString != null) { waitForStart = Integer parseInt(waitForStartString); } } catch (URISyntaxException e1) { throw IOExceptionSupport create(e1); } location = new URI( vm } if (host == null) { host = localhost ; } VMTransportServer server = SERVERS get(host); if (!validateBroker(host) || server == null) { BrokerService broker = null; synchronized (BrokerRegistry getInstance() getRegistryMutext()) { broker = lookupBroker(BrokerRegistry getInstance(), host, waitForStart); if (broker == null) { if (!create) { throw new IOException( Broker named + host + does not exist ); } try { if (brokerFactoryHandler != null) { broker = brokerFactoryHandler createBroker(brokerURI); } else { broker = BrokerFactory createBroker(brokerURI); } broker start(); MDC put( activemq broker , broker getBrokerName()); } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } BROKERS put(host, broker); BrokerRegistry getInstance() getRegistryMutext() notifyAll(); } server = SERVERS get(host); if (server == null) { server = (VMTransportServer)bind(location, true); TransportConnector connector = new TransportConnector(server); connector setBrokerService(broker); connector setUri(location); connector setTaskRunnerFactory(broker getTaskRunnerFactory()); connector start(); CONNECTORS put(host, connector); } } } VMTransport vmtransport = server connect(); IntrospectionSupport setProperties(vmtransport peer, new HashMap<String,String>(options)); IntrospectionSupport setProperties(vmtransport, options); Transport transport = vmtransport; if (vmtransport isMarshal()) { Map<String, String> optionsCopy = new HashMap<String, String>(options); transport = new MarshallingTransportFilter(transport, createWireFormat(options), createWireFormat(optionsCopy)); } if (!options isEmpty()) { throw new IllegalArgumentException( Invalid connect parameters + options); } return transport; } private static String extractHost(URI location) { String host = location getHost(); if (host == null || host length() == 0) { host = location getAuthority(); if (host == null || host length() == 0) { host = localhost ; } } return host; } private BrokerService lookupBroker(final BrokerRegistry registry, final String brokerName, int waitForStart) { BrokerService broker = null; synchronized(registry getRegistryMutext()) { broker = registry lookup(brokerName); if (broker == null && waitForStart > 0) { final long expiry = System currentTimeMillis() + waitForStart; while ((broker == null || !broker isStarted()) && expiry > System currentTimeMillis()) { long timeout = Math max(0, expiry - System currentTimeMillis()); try { LOG debug( waiting for broker named + brokerName + to start ); registry getRegistryMutext() wait(timeout); } catch (InterruptedException ignored) { } broker = registry lookup(brokerName); } } } return broker; } public TransportServer doBind(URI location) throws IOException { return bind(location, false); } private TransportServer bind(URI location, boolean dispose) throws IOException { String host = extractHost(location); LOG debug( binding to broker + host); VMTransportServer server = new VMTransportServer(location, dispose); Object currentBoundValue = SERVERS get(host); if (currentBoundValue != null) { throw new IOException( VMTransportServer already bound at + location); } SERVERS put(host, server); return server; } public static void stopped(VMTransportServer server) { String host = extractHost(server getBindURI()); stopped(host); } public static void stopped(String host) { SERVERS remove(host); TransportConnector connector = CONNECTORS remove(host); if (connector != null) { LOG debug( Shutting down VM connectors for broker + host); ServiceSupport dispose(connector); BrokerService broker = BROKERS remove(host); if (broker != null) { ServiceSupport dispose(broker); } MDC remove( activemq broker ); } } public BrokerFactoryHandler getBrokerFactoryHandler() { return brokerFactoryHandler; } public void setBrokerFactoryHandler(BrokerFactoryHandler brokerFactoryHandler) { this brokerFactoryHandler = brokerFactoryHandler; } private boolean validateBroker(String host) { boolean result = true; if (BROKERS containsKey(host) || SERVERS containsKey(host) || CONNECTORS containsKey(host)) { TransportConnector connector = CONNECTORS get(host); if (BrokerRegistry getInstance() lookup(host) == null || (connector != null && connector getBroker() isStopped())) { result = false; BROKERS remove(host); SERVERS remove(host); if (connector != null) { CONNECTORS remove(host); if (connector != null) { ServiceSupport dispose(connector); } } } } return result; } }",1.0,
464,464,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\vm\VMTransportServer.,VMTransportServer,"public class VMTransportServer implements TransportServer { private TransportAcceptListener acceptListener; private final URI location; private boolean disposed; private final AtomicInteger connectionCount = new AtomicInteger(0); private final boolean disposeOnDisconnect; public VMTransportServer(URI location, boolean disposeOnDisconnect) { this location = location; this disposeOnDisconnect = disposeOnDisconnect; } public String toString() { return VMTransportServer( + location + ) ; } public VMTransport connect() throws IOException { TransportAcceptListener al; synchronized (this) { if (disposed) { throw new IOException( Server has been disposed ); } al = acceptListener; } if (al == null) { throw new IOException( Server TransportAcceptListener is null ); } connectionCount incrementAndGet(); VMTransport client = new VMTransport(location) { public void stop() throws Exception { if (!disposed get()) { super stop(); if (connectionCount decrementAndGet() == 0 && disposeOnDisconnect) { VMTransportServer this stop(); } } }; }; VMTransport server = new VMTransport(location); client setPeer(server); server setPeer(client); al onAccept(configure(server)); return client; } public static Transport configure(Transport transport) { transport = new MutexTransport(transport); transport = new ResponseCorrelator(transport); return transport; } public synchronized void setAcceptListener(TransportAcceptListener acceptListener) { this acceptListener = acceptListener; } public void start() throws IOException { } public void stop() throws IOException { VMTransportFactory stopped(this); } public URI getConnectURI() { return location; } public URI getBindURI() { return location; } public void setBrokerInfo(BrokerInfo brokerInfo) { } public InetSocketAddress getSocketAddress() { return null; } public int getConnectionCount() { return connectionCount intValue(); } Override public boolean isSslServer() { return false; } }",1.0,
465,465,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\usage\JobSchedulerUsage.,JobSchedulerUsage,"public class JobSchedulerUsage extends Usage<JobSchedulerUsage> { private JobSchedulerStore store; public JobSchedulerUsage() { super(null, null, 1 0f); } public JobSchedulerUsage(String name, JobSchedulerStore store) { super(null, name, 1 0f); this store = store; } public JobSchedulerUsage(JobSchedulerUsage parent, String name) { super(parent, name, 1 0f); this store = parent store; } Override protected long retrieveUsage() { if (store == null) { return 0; } return store size(); } public JobSchedulerStore getStore() { return store; } public void setStore(JobSchedulerStore store) { this store = store; onLimitChange(); } }",1.0,
466,466,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\usage\StoreUsage.,StoreUsage,"public class StoreUsage extends Usage<StoreUsage> { private PersistenceAdapter store; public StoreUsage() { super(null, null, 1 0f); } public StoreUsage(String name, PersistenceAdapter store) { super(null, name, 1 0f); this store = store; } public StoreUsage(StoreUsage parent, String name) { super(parent, name, 1 0f); this store = parent store; } protected long retrieveUsage() { if (store == null) return 0; return store size(); } public PersistenceAdapter getStore() { return store; } public void setStore(PersistenceAdapter store) { this store = store; onLimitChange(); } Override public int getPercentUsage() { synchronized (usageMutex) { percentUsage = caclPercentUsage(); return super getPercentUsage(); } } Override public boolean waitForSpace(long timeout, int highWaterMark) throws InterruptedException { if (parent != null) { if (parent waitForSpace(timeout, highWaterMark)) { return true; } } return super waitForSpace(timeout, highWaterMark); } }",1.0,
467,467,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\usage\SystemUsage.,SystemUsage,"public class SystemUsage implements Service { private SystemUsage parent; private String name; private MemoryUsage memoryUsage; private StoreUsage storeUsage; private TempUsage tempUsage; private ThreadPoolExecutor executor; private JobSchedulerUsage jobSchedulerUsage; private boolean sendFailIfNoSpaceExplicitySet; private boolean sendFailIfNoSpace; private boolean sendFailIfNoSpaceAfterTimeoutExplicitySet; private long sendFailIfNoSpaceAfterTimeout = 0; private final List<SystemUsage> children = new CopyOnWriteArrayList<SystemUsage>(); public SystemUsage() { this( default , null, null, null); } public SystemUsage(String name, PersistenceAdapter adapter, PListStore tempStore, JobSchedulerStore jobSchedulerStore) { this parent = null; this name = name; this memoryUsage = new MemoryUsage(name + memory ); this storeUsage = new StoreUsage(name + store , adapter); this tempUsage = new TempUsage(name + temp , tempStore); this jobSchedulerUsage = new JobSchedulerUsage(name + jobScheduler , jobSchedulerStore); this memoryUsage setExecutor(getExecutor()); this storeUsage setExecutor(getExecutor()); this tempUsage setExecutor(getExecutor()); } public SystemUsage(SystemUsage parent, String name) { this parent = parent; this executor = parent getExecutor(); this name = name; this memoryUsage = new MemoryUsage(parent memoryUsage, name + memory ); this storeUsage = new StoreUsage(parent storeUsage, name + store ); this tempUsage = new TempUsage(parent tempUsage, name + temp ); this jobSchedulerUsage = new JobSchedulerUsage(parent jobSchedulerUsage, name + jobScheduler ); this memoryUsage setExecutor(getExecutor()); this storeUsage setExecutor(getExecutor()); this tempUsage setExecutor(getExecutor()); } public String getName() { return name; } public MemoryUsage getMemoryUsage() { return this memoryUsage; } public StoreUsage getStoreUsage() { return this storeUsage; } public TempUsage getTempUsage() { return this tempUsage; } public JobSchedulerUsage getJobSchedulerUsage() { return this jobSchedulerUsage; } Override public String toString() { return UsageManager( + getName() + ) ; } Override public void start() { if (parent != null) { parent addChild(this); } this memoryUsage start(); this storeUsage start(); this tempUsage start(); this jobSchedulerUsage start(); } Override public void stop() { if (parent != null) { parent removeChild(this); } this memoryUsage stop(); this storeUsage stop(); this tempUsage stop(); this jobSchedulerUsage stop(); } public void setSendFailIfNoSpace(boolean failProducerIfNoSpace) { sendFailIfNoSpaceExplicitySet = true; this sendFailIfNoSpace = failProducerIfNoSpace; } public boolean isSendFailIfNoSpace() { if (sendFailIfNoSpaceExplicitySet || parent == null) { return sendFailIfNoSpace; } else { return parent isSendFailIfNoSpace(); } } private void addChild(SystemUsage child) { children add(child); } private void removeChild(SystemUsage child) { children remove(child); } public SystemUsage getParent() { return parent; } public void setParent(SystemUsage parent) { this parent = parent; } public boolean isSendFailIfNoSpaceExplicitySet() { return sendFailIfNoSpaceExplicitySet; } public void setSendFailIfNoSpaceExplicitySet(boolean sendFailIfNoSpaceExplicitySet) { this sendFailIfNoSpaceExplicitySet = sendFailIfNoSpaceExplicitySet; } public long getSendFailIfNoSpaceAfterTimeout() { if (sendFailIfNoSpaceAfterTimeoutExplicitySet || parent == null) { return sendFailIfNoSpaceAfterTimeout; } else { return parent getSendFailIfNoSpaceAfterTimeout(); } } public void setSendFailIfNoSpaceAfterTimeout(long sendFailIfNoSpaceAfterTimeout) { this sendFailIfNoSpaceAfterTimeoutExplicitySet = true; this sendFailIfNoSpaceAfterTimeout = sendFailIfNoSpaceAfterTimeout; } public void setName(String name) { this name = name; this memoryUsage setName(name + memory ); this storeUsage setName(name + store ); this tempUsage setName(name + temp ); this jobSchedulerUsage setName(name + jobScheduler ); } public void setMemoryUsage(MemoryUsage memoryUsage) { if (memoryUsage getName() == null) { memoryUsage setName(this memoryUsage getName()); } if (parent != null) { memoryUsage setParent(parent memoryUsage); } this memoryUsage = memoryUsage; this memoryUsage setExecutor(getExecutor()); } public void setStoreUsage(StoreUsage storeUsage) { if (storeUsage getStore() == null) { storeUsage setStore(this storeUsage getStore()); } if (storeUsage getName() == null) { storeUsage setName(this storeUsage getName()); } if (parent != null) { storeUsage setParent(parent storeUsage); } this storeUsage = storeUsage; this storeUsage setExecutor(executor); } public void setTempUsage(TempUsage tempDiskUsage) { if (tempDiskUsage getStore() == null) { tempDiskUsage setStore(this tempUsage getStore()); } if (tempDiskUsage getName() == null) { tempDiskUsage setName(this tempUsage getName()); } if (parent != null) { tempDiskUsage setParent(parent tempUsage); } this tempUsage = tempDiskUsage; this tempUsage setExecutor(getExecutor()); } public void setJobSchedulerUsage(JobSchedulerUsage jobSchedulerUsage) { if (jobSchedulerUsage getStore() == null) { jobSchedulerUsage setStore(this jobSchedulerUsage getStore()); } if (jobSchedulerUsage getName() == null) { jobSchedulerUsage setName(this jobSchedulerUsage getName()); } if (parent != null) { jobSchedulerUsage setParent(parent jobSchedulerUsage); } this jobSchedulerUsage = jobSchedulerUsage; this jobSchedulerUsage setExecutor(getExecutor()); } public ThreadPoolExecutor getExecutor() { return this executor; } public void setExecutor(ThreadPoolExecutor executor) { this executor = executor; if (this memoryUsage != null) { this memoryUsage setExecutor(this executor); } if (this storeUsage != null) { this storeUsage setExecutor(this executor); } if (this tempUsage != null) { this tempUsage setExecutor(this executor); } if(this jobSchedulerUsage != null) { this jobSchedulerUsage setExecutor(this executor); } } }",1.0,
468,468,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\usage\TempUsage.,TempUsage,"public class TempUsage extends Usage<TempUsage> { private PListStore store; public TempUsage() { super(null, null, 1 0f); } public TempUsage(String name, PListStore store) { super(null, name, 1 0f); this store = store; } public TempUsage(TempUsage parent, String name) { super(parent, name, 1 0f); this store = parent store; } Override protected long retrieveUsage() { if (store == null) { return 0; } return store size(); } public PListStore getStore() { return store; } public void setStore(PListStore store) { this store = store; onLimitChange(); } }",1.0,
469,469,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\BooleanEditor.,BooleanEditor,"public class BooleanEditor extends PropertyEditorSupport { public String getJavaInitializationString() { return String valueOf(((Boolean)getValue()) booleanValue()); } public String getAsText() { return getJavaInitializationString(); } public void setAsText(String text) throws java lang IllegalArgumentException { if (text toLowerCase() equals( true )) { setValue(Boolean TRUE); } else if (text toLowerCase() equals( false )) { setValue(Boolean FALSE); } else { throw new java lang IllegalArgumentException(text); } } public String[] getTags() { String result[] = { true , false }; return result; } }",1.0,
470,470,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\BrokerSupport.,BrokerSupport,"public final class BrokerSupport { private BrokerSupport() { } public static void resendNoCopy(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination) throws Exception { doResend(context, originalMessage, deadLetterDestination, false); } public static void resend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination) throws Exception { doResend(context, originalMessage, deadLetterDestination, true); } public static void doResend(final ConnectionContext context, Message originalMessage, ActiveMQDestination deadLetterDestination, boolean copy) throws Exception { Message message = copy originalMessage copy() originalMessage; message setOriginalDestination(message getDestination()); message setOriginalTransactionId(message getTransactionId()); message setDestination(deadLetterDestination); message setTransactionId(null); message setMemoryUsage(null); message setRedeliveryCounter(0); boolean originalFlowControl = context isProducerFlowControl(); try { context setProducerFlowControl(false); ProducerInfo info = new ProducerInfo(); ProducerState state = new ProducerState(info); ProducerBrokerExchange producerExchange = new ProducerBrokerExchange(); producerExchange setProducerState(state); producerExchange setMutable(true); producerExchange setConnectionContext(context); context getBroker() send(producerExchange, message); } finally { context setProducerFlowControl(originalFlowControl); } } public static ConnectionContext getConnectionContext(Broker broker) { ConnectionContext adminConnectionContext = broker getAdminConnectionContext(); if (adminConnectionContext == null) { adminConnectionContext = createAdminConnectionContext(broker); broker setAdminConnectionContext(adminConnectionContext); } return adminConnectionContext; } protected static ConnectionContext createAdminConnectionContext(Broker broker) { ConnectionContext context = new ConnectionContext(); context setBroker(broker); context setSecurityContext(SecurityContext BROKER SECURITY CONTEXT); return context; } }",1.0,
471,471,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\DefaultIOExceptionHandler.,DefaultIOExceptionHandler,"public class DefaultIOExceptionHandler implements IOExceptionHandler { private static final Logger LOG = LoggerFactory getLogger(DefaultIOExceptionHandler class); protected BrokerService broker; private boolean ignoreAllErrors = false; private boolean ignoreNoSpaceErrors = true; private boolean ignoreSQLExceptions = true; private boolean stopStartConnectors = false; private String noSpaceMessage = space ; private String sqlExceptionMessage = ; private long resumeCheckSleepPeriod = 5*1000; private AtomicBoolean stopStartInProgress = new AtomicBoolean(false); public void handle(IOException exception) { if (ignoreAllErrors) { LOG info( Ignoring IO exception, + exception, exception); return; } if (ignoreNoSpaceErrors) { Throwable cause = exception; while (cause != null && cause instanceof IOException) { String message = cause getMessage(); if (message != null && message contains(noSpaceMessage)) { LOG info( Ignoring no space left exception, + exception, exception); return; } cause = cause getCause(); } } if (ignoreSQLExceptions) { Throwable cause = exception; while (cause != null) { String message = cause getMessage(); if (cause instanceof SQLException && message contains(sqlExceptionMessage)) { LOG info( Ignoring SQLException, + exception, cause); return; } cause = cause getCause(); } } if (stopStartConnectors) { if (!stopStartInProgress compareAndSet(false, true)) { return; } LOG info( Initiating stop/restart of broker transport due to IO exception, + exception, exception); new Thread( stop transport connectors on IO exception ) { public void run() { try { ServiceStopper stopper = new ServiceStopper(); broker stopAllConnectors(stopper); } catch (Exception e) { LOG warn( Failure occurred while stopping broker connectors , e); } } } start(); new Thread( restart transport connectors post IO exception ) { public void run() { try { while (hasLockOwnership() && isPersistenceAdapterDown()) { LOG info( waiting for broker persistence adapter checkpoint to succeed before restarting transports ); TimeUnit MILLISECONDS sleep(resumeCheckSleepPeriod); } broker startAllConnectors(); } catch (Exception e) { LOG warn( Stopping broker due to failure while restarting broker connectors , e); stopBroker(e); } finally { stopStartInProgress compareAndSet(true, false); } } private boolean isPersistenceAdapterDown() { boolean checkpointSuccess = false; try { broker getPersistenceAdapter() checkpoint(true); checkpointSuccess = true; } catch (Throwable ignored) {} return !checkpointSuccess; } } start(); return; } stopBroker(exception); } private void stopBroker(Exception exception) { LOG info( Stopping the broker due to exception, + exception, exception); new Thread( Stopping the broker due to IO exception ) { public void run() { try { broker stop(); } catch (Exception e) { LOG warn( Failure occurred while stopping broker , e); } } } start(); } protected boolean hasLockOwnership() throws IOException { return true; } public void setBrokerService(BrokerService broker) { this broker = broker; } public boolean isIgnoreAllErrors() { return ignoreAllErrors; } public void setIgnoreAllErrors(boolean ignoreAllErrors) { this ignoreAllErrors = ignoreAllErrors; } public boolean isIgnoreNoSpaceErrors() { return ignoreNoSpaceErrors; } public void setIgnoreNoSpaceErrors(boolean ignoreNoSpaceErrors) { this ignoreNoSpaceErrors = ignoreNoSpaceErrors; } public String getNoSpaceMessage() { return noSpaceMessage; } public void setNoSpaceMessage(String noSpaceMessage) { this noSpaceMessage = noSpaceMessage; } public boolean isIgnoreSQLExceptions() { return ignoreSQLExceptions; } public void setIgnoreSQLExceptions(boolean ignoreSQLExceptions) { this ignoreSQLExceptions = ignoreSQLExceptions; } public String getSqlExceptionMessage() { return sqlExceptionMessage; } public void setSqlExceptionMessage(String sqlExceptionMessage) { this sqlExceptionMessage = sqlExceptionMessage; } public boolean isStopStartConnectors() { return stopStartConnectors; } public void setStopStartConnectors(boolean stopStartConnectors) { this stopStartConnectors = stopStartConnectors; } public long getResumeCheckSleepPeriod() { return resumeCheckSleepPeriod; } public void setResumeCheckSleepPeriod(long resumeCheckSleepPeriod) { this resumeCheckSleepPeriod = resumeCheckSleepPeriod; } }",1.0,
474,474,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\JMXSupport.,JMXSupport,"public final class JMXSupport { private static final Pattern PART 1 = Pattern compile( [ , ] ); private static final Pattern PART 2 = Pattern compile( ); private static final Pattern PART 3 = Pattern compile( = ); private static final Pattern PART 4 = Pattern compile( * ); private JMXSupport() { } public static String encodeObjectNamePart(String part) { String answer = PART 1 matcher(part) replaceAll( ); answer = PART 2 matcher(answer) replaceAll( &qe; ); answer = PART 3 matcher(answer) replaceAll( &amp; ); answer = PART 4 matcher(answer) replaceAll( &ast; ); return answer; } }",1.0,
475,475,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\LinkedNode.,LinkedNode,public class LinkedNode { protected LinkedNode next = this; protected LinkedNode prev = this; protected boolean tail = true; public LinkedNode getHeadNode() { if (isHeadNode()) { return this; } if (isTailNode()) { return next; } LinkedNode rc = prev; while (!rc isHeadNode()) { rc = rc prev; } return rc; } public LinkedNode getTailNode() { if (isTailNode()) { return this; } if (isHeadNode()) { return prev; } LinkedNode rc = next; while (!rc isTailNode()) { rc = rc next; } return rc; } public LinkedNode getNext() { return tail null next; } public LinkedNode getPrevious() { return prev tail null prev; } public boolean isHeadNode() { return prev isTailNode(); } public boolean isTailNode() { return tail; } public LinkedNode linkAfter(LinkedNode rightHead) { if (rightHead == this) { throw new IllegalArgumentException( You cannot link to yourself ); } if (!rightHead isHeadNode()) { throw new IllegalArgumentException( You only insert nodes that are the first in a list ); } LinkedNode rightTail = rightHead prev; if (tail) { tail = false; } else { rightTail tail = false; } rightHead prev = this; rightTail next = next; next prev = rightTail; next = rightHead; return this; } public LinkedNode linkBefore(LinkedNode leftHead) { if (leftHead == this) { throw new IllegalArgumentException( You cannot link to yourself ); } if (!leftHead isHeadNode()) { throw new IllegalArgumentException( You only insert nodes that are the first in a list ); } LinkedNode leftTail = leftHead prev; leftTail tail = false; leftTail next = this; leftHead prev = prev; prev next = leftHead; prev = leftTail; return leftHead; } public void unlink() { if (prev == this) { reset(); return; } if (tail) { prev tail = true; } next prev = prev; prev next = next; reset(); } public void reset() { next = this; prev = this; tail = true; } },1.0,
476,476,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\LockFile.,LockFile,"public class LockFile { private static final boolean DISABLE FILE LOCK = Boolean getBoolean( java nio channels FileLock broken ); final private File file; private FileLock lock; private RandomAccessFile readFile; private int lockCounter; private final boolean deleteOnUnlock; public LockFile(File file, boolean deleteOnUnlock) { this file = file; this deleteOnUnlock = deleteOnUnlock; } synchronized public void lock() throws IOException { if (DISABLE FILE LOCK) { return; } if (lockCounter > 0) { return; } IOHelper mkdirs(file getParentFile()); synchronized (LockFile class) { if (System getProperty(getVmLockKey()) != null) { throw new IOException( File + file + could not be locked as lock is already held for this jvm ); } System setProperty(getVmLockKey(), new Date() toString()); } try { if (lock == null) { readFile = new RandomAccessFile(file, rw ); IOException reason = null; try { lock = readFile getChannel() tryLock(0, Math max(1, readFile getChannel() size()), false); } catch (OverlappingFileLockException e) { reason = IOExceptionSupport create( File + file + could not be locked , e); } catch (IOException ioe) { reason = ioe; } if (lock != null) { lockCounter++; System setProperty(getVmLockKey(), new Date() toString()); } else { closeReadFile(); if (reason != null) { throw reason; } throw new IOException( File + file + could not be locked ); } } } finally { synchronized (LockFile class) { if (lock == null) { System getProperties() remove(getVmLockKey()); } } } } public void unlock() { if (DISABLE FILE LOCK) { return; } lockCounter--; if (lockCounter != 0) { return; } if (lock != null) { try { lock release(); System getProperties() remove(getVmLockKey()); } catch (Throwable ignore) { } lock = null; } closeReadFile(); if (deleteOnUnlock) { file delete(); } } private String getVmLockKey() throws IOException { return getClass() getName() + lock + file getCanonicalPath(); } private void closeReadFile() { if (readFile != null) { try { readFile close(); } catch (Throwable ignore) { } readFile = null; } } }",1.0,
477,477,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\LogWriterFinder.,LogWriterFinder,"public class LogWriterFinder { private static final Logger log = LoggerFactory getLogger(TransportLoggerView class); private final String path; private final ConcurrentHashMap classMap = new ConcurrentHashMap(); public LogWriterFinder(String path) { this path = path; } public LogWriter newInstance(String logWriterName) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException { Class clazz = (Class) classMap get(logWriterName); if (clazz == null) { clazz = newInstance(doFindLogWriterProperties(logWriterName)); classMap put(logWriterName, clazz); } return (LogWriter)clazz newInstance(); } private Class newInstance(Properties properties) throws ClassNotFoundException, IOException { String className = properties getProperty( class ); if (className == null) { throw new IOException( Expected property is missing + class ); } Class clazz; try { clazz = Thread currentThread() getContextClassLoader() loadClass(className); } catch (ClassNotFoundException e) { clazz = LogWriterFinder class getClassLoader() loadClass(className); } return clazz; } protected Properties doFindLogWriterProperties (String logWriterName) throws IOException { String uri = path + logWriterName; ClassLoader classLoader = Thread currentThread() getContextClassLoader(); if (classLoader == null) classLoader = getClass() getClassLoader(); InputStream in = classLoader getResourceAsStream(uri); if (in == null) { in = LogWriterFinder class getClassLoader() getResourceAsStream(uri); if (in == null) { log error( Could not find log writer for resource + uri); throw new IOException( Could not find log writer for resource + uri); } } BufferedInputStream reader = null; Properties properties = new Properties(); try { reader = new BufferedInputStream(in); properties load(reader); return properties; } finally { try { reader close(); } catch (Exception e) { } } } }",1.0,
478,478,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\MemoryIntPropertyEditor.,MemoryIntPropertyEditor,"public class MemoryIntPropertyEditor extends PropertyEditorSupport { public void setAsText(String text) throws IllegalArgumentException { Pattern p = Pattern compile( ^ s*( d+) s*(b) s* , Pattern CASE INSENSITIVE); Matcher m = p matcher(text); if (m matches()) { setValue(Integer valueOf(Integer parseInt(m group(1)))); return; } p = Pattern compile( ^ s*( d+) s*k(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Integer valueOf(Integer parseInt(m group(1)) * 1024)); return; } p = Pattern compile( ^ s*( d+) s*m(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Integer valueOf(Integer parseInt(m group(1)) * 1024 * 1024)); return; } p = Pattern compile( ^ s*( d+) s*g(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Integer valueOf(Integer parseInt(m group(1)) * 1024 * 1024 * 1024)); return; } throw new IllegalArgumentException( Could convert not to a memory size + text); } public String getAsText() { Integer value = (Integer)getValue(); return value != null value toString() ; } }",1.0,
479,479,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\MemoryPropertyEditor.,MemoryPropertyEditor,"public class MemoryPropertyEditor extends PropertyEditorSupport { public void setAsText(String text) throws IllegalArgumentException { Pattern p = Pattern compile( ^ s*( d+) s*(b) s* , Pattern CASE INSENSITIVE); Matcher m = p matcher(text); if (m matches()) { setValue(Long valueOf(Long parseLong(m group(1)))); return; } p = Pattern compile( ^ s*( d+) s*k(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Long valueOf(Long parseLong(m group(1)) * 1024)); return; } p = Pattern compile( ^ s*( d+) s*m(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Long valueOf(Long parseLong(m group(1)) * 1024 * 1024)); return; } p = Pattern compile( ^ s*( d+) s*g(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Long valueOf(Long parseLong(m group(1)) * 1024 * 1024 * 1024)); return; } throw new IllegalArgumentException( Could convert not to a memory size + text); } public String getAsText() { Long value = (Long)getValue(); return value != null value toString() ; } }",1.0,
480,480,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\SubscriptionKey.,SubscriptionKey,"public class SubscriptionKey { public final String clientId; public final String subscriptionName; private final int hashValue; public SubscriptionKey(SubscriptionInfo info) { this(info getClientId(), info getSubscriptionName()); } public SubscriptionKey(String clientId, String subscriptionName) { this clientId = clientId; this subscriptionName = subscriptionName != null subscriptionName NOT SET ; hashValue = clientId hashCode() ^ this subscriptionName hashCode(); } public int hashCode() { return hashValue; } public boolean equals(Object o) { try { SubscriptionKey key = (SubscriptionKey)o; return key clientId equals(clientId) && key subscriptionName equals(subscriptionName); } catch (Throwable e) { return false; } } public String toString() { return clientId + + subscriptionName; } public String getClientId() { return clientId; } public String getSubscriptionName() { return subscriptionName; } }",1.0,
481,481,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\ThreadTracker.,ThreadTracker,"public class ThreadTracker { static final Logger LOG = LoggerFactory getLogger(ThreadTracker class); static HashMap<String, Tracker> trackers = new HashMap<String, Tracker>(); public static void track(final String name) { Tracker t; final String key = name intern(); synchronized(trackers) { t = trackers get(key); if (t == null) { t = new Tracker(); trackers put(key, t); } } t track(); } public static void result() { synchronized(trackers) { for (Entry<String, Tracker> t trackers entrySet()) { LOG info( Tracker + t getKey() + , + t getValue() size() + entry points ); for (Trace trace t getValue() values()) { LOG info( count + trace count, trace); } LOG info( Tracker + t getKey() + , done ); } } } } SuppressWarnings( serial )",1.0,
482,482,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\ThreadTracker.,Trace,class Trace extends Throwable { public int count = 1; public final long id; Trace() { super(); id = calculateIdentifier(); } private long calculateIdentifier() { int len = 0; for (int i=0; i<this getStackTrace() length; i++) { len += this getStackTrace()[i] toString() intern() hashCode(); } return len; } } SuppressWarnings( serial ),1.0,
483,483,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\ThreadTracker.,Tracker,"class Tracker extends HashMap<Long, Trace> { public void track() { Trace current = new Trace(); synchronized(this) { Trace exist = get(current id); if (exist != null) { exist count++; } else { put(current id, current); } } } }",1.0,
484,484,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\TransactionTemplate.,TransactionTemplate,"public class TransactionTemplate { private static final Logger LOG = LoggerFactory getLogger(TransactionTemplate class); private PersistenceAdapter persistenceAdapter; private ConnectionContext context; public TransactionTemplate(PersistenceAdapter persistenceAdapter, ConnectionContext context) { this persistenceAdapter = persistenceAdapter; this context = context; } public void run(Callback task) throws IOException { persistenceAdapter beginTransaction(context); Throwable throwable = null; try { task execute(); } catch (IOException t) { throwable = t; throw t; } catch (RuntimeException t) { throwable = t; throw t; } catch (Throwable t) { throwable = t; throw IOExceptionSupport create( Persistence task failed + t, t); } finally { if (throwable == null) { persistenceAdapter commitTransaction(context); } else { LOG error( Having to Rollback - caught an exception + throwable); persistenceAdapter rollbackTransaction(context); } } } public ConnectionContext getContext() { return context; } public PersistenceAdapter getPersistenceAdapter() { return persistenceAdapter; } }",1.0,
485,485,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\WrappedException.,WrappedException,public class WrappedException extends RuntimeException { private static final long serialVersionUID = 3257290240212217905L; public WrappedException(Throwable original) { super(original); } },1.0,
486,486,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\osgi\Activator.,Activator,"public class Activator implements BundleActivator, SynchronousBundleListener, ObjectFactory { private static final Logger LOG = LoggerFactory getLogger(Activator class); private final ConcurrentHashMap<String, Class> serviceCache = new ConcurrentHashMap<String, Class>(); private final ConcurrentMap<Long, BundleWrapper> bundleWrappers = new ConcurrentHashMap<Long, BundleWrapper>(); private BundleContext bundleContext; public synchronized void start(BundleContext bundleContext) throws Exception { FactoryFinder setObjectFactory(this); debug( activating ); this bundleContext = bundleContext; debug( checking existing bundles ); bundleContext addBundleListener(this); for (Bundle bundle bundleContext getBundles()) { if (bundle getState() == Bundle RESOLVED || bundle getState() == Bundle STARTING || bundle getState() == Bundle ACTIVE || bundle getState() == Bundle STOPPING) { register(bundle); } } debug( activated ); } public synchronized void stop(BundleContext bundleContext) throws Exception { debug( deactivating ); bundleContext removeBundleListener(this); while (!bundleWrappers isEmpty()) { unregister(bundleWrappers keySet() iterator() next()); } debug( deactivated ); this bundleContext = null; } public void bundleChanged(BundleEvent event) { if (event getType() == BundleEvent RESOLVED) { register(event getBundle()); } else if (event getType() == BundleEvent UNRESOLVED || event getType() == BundleEvent UNINSTALLED) { unregister(event getBundle() getBundleId()); } } protected void register(final Bundle bundle) { debug( checking bundle + bundle getBundleId()); if( !isImportingUs(bundle) ) { debug( The bundle does not import us + bundle getBundleId()); return; } bundleWrappers put(bundle getBundleId(), new BundleWrapper(bundle)); } protected void unregister(long bundleId) { BundleWrapper bundle = bundleWrappers remove(bundleId); if (bundle != null) { for (String path bundle cachedServices) { debug( unregistering service for key +path ); serviceCache remove(path); } } } public Object create(String path) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException { Class clazz = serviceCache get(path); if (clazz == null) { StringBuffer warnings = new StringBuffer(); int wrrningCounter=1; for (BundleWrapper wrapper bundleWrappers values()) { URL resource = wrapper bundle getResource(path); if( resource == null ) { continue; } Properties properties = loadProperties(resource); String className = properties getProperty( class ); if (className == null) { warnings append( ( +(wrrningCounter++)+ ) Invalid service file in bundle +wrapper+ class property not defined ); continue; } try { clazz = wrapper bundle loadClass(className); } catch (ClassNotFoundException e) { warnings append( ( +(wrrningCounter++)+ ) Bundle +wrapper+ could not load +className+ +e); continue; } serviceCache put(path, clazz); wrapper cachedServices add(path); break; } if( clazz == null ) { String msg = Service not found + path + ; if (warnings length()!= 0) { msg += , +warnings; } throw new IOException(msg); } } return clazz newInstance(); } private void debug(Object msg) { LOG debug(msg toString()); } private Properties loadProperties(URL resource) throws IOException { InputStream in = resource openStream(); try { BufferedReader br = new BufferedReader(new InputStreamReader(in, UTF-8 )); Properties properties = new Properties(); properties load(in); return properties; } finally { try { in close(); } catch (Exception e) { } } } private boolean isImportingUs(Bundle bundle) { return isImportingClass(bundle, Service class) || isImportingClass(bundle, Transport class) || isImportingClass(bundle, DiscoveryAgent class) || isImportingClass(bundle, PersistenceAdapter class); } private boolean isImportingClass(Bundle bundle, Class clazz) { try { return bundle loadClass(clazz getName())==clazz; } catch (ClassNotFoundException e) { return false; } } private static class BundleWrapper { private final Bundle bundle; private final List<String> cachedServices = new ArrayList<String>(); public BundleWrapper(Bundle bundle) { this bundle = bundle; } } }",1.0,
487,487,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\osgi\Activator.,BundleWrapper,private static class BundleWrapper { private final Bundle bundle; private final List<String> cachedServices = new ArrayList<String>(); public BundleWrapper(Bundle bundle) { this bundle = bundle; } },1.0,
490,490,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\JmsTransactionTestSupport.,JmsTransactionTestSupport,"public abstract class JmsTransactionTestSupport extends TestSupport implements MessageListener { private static final Logger LOG = LoggerFactory getLogger(JmsTransactionTestSupport class); private static final int MESSAGE COUNT = 5; private static final String MESSAGE TEXT = message ; protected ConnectionFactory connectionFactory; protected Connection connection; protected Session session; protected MessageConsumer consumer; protected MessageProducer producer; protected JmsResourceProvider resourceProvider; protected Destination destination; protected int batchCount = 10; protected int batchSize = 20; protected BrokerService broker; private List<Message> unackMessages = new ArrayList<Message>(MESSAGE COUNT); private List<Message> ackMessages = new ArrayList<Message>(MESSAGE COUNT); private boolean resendPhase; public JmsTransactionTestSupport() { super(); } public JmsTransactionTestSupport(String name) { super(name); } protected void setUp() throws Exception { broker = createBroker(); broker start(); broker waitUntilStarted(); resourceProvider = getJmsResourceProvider(); topic = resourceProvider isTopic(); setSessionTransacted(); connectionFactory = newConnectionFactory(); reconnect(); } protected void setSessionTransacted() { resourceProvider setTransacted(true); } protected ConnectionFactory newConnectionFactory() throws Exception { return resourceProvider createConnectionFactory(); } protected void beginTx() throws Exception { } protected void commitTx() throws Exception { session commit(); } protected void rollbackTx() throws Exception { session rollback(); } protected BrokerService createBroker() throws Exception, URISyntaxException { return BrokerFactory createBroker(new URI( broker } protected void tearDown() throws Exception { LOG info( Closing down connection ); session close(); session = null; connection close(); connection = null; broker stop(); broker waitUntilStopped(); broker = null; LOG info( Connection closed ); } protected abstract JmsResourceProvider getJmsResourceProvider(); public void testSendReceiveTransactedBatches() throws Exception { TextMessage message = session createTextMessage( Batch Message ); for (int j = 0; j < batchCount; j++) { LOG info( Producing bacth + j + of + batchSize + messages ); beginTx(); for (int i = 0; i < batchSize; i++) { producer send(message); } messageSent(); commitTx(); LOG info( Consuming bacth + j + of + batchSize + messages ); beginTx(); for (int i = 0; i < batchSize; i++) { message = (TextMessage)consumer receive(1000 * 5); assertNotNull( Received only + i + messages in batch + j, message); assertEquals( Batch Message , message getText()); } commitTx(); } } protected void messageSent() throws Exception { } public void testSendRollback() throws Exception { Message[] outbound = new Message[] {session createTextMessage( First Message ), session createTextMessage( Second Message )}; beginTx(); producer send(outbound[0]); commitTx(); beginTx(); producer send(session createTextMessage( I m going to get rolled back )); rollbackTx(); beginTx(); producer send(outbound[1]); commitTx(); beginTx(); ArrayList<Message> messages = new ArrayList<Message>(); LOG info( About to consume message 1 ); Message message = consumer receive(1000); messages add(message); LOG info( Received + message); LOG info( About to consume message 2 ); message = consumer receive(4000); messages add(message); LOG info( Received + message); commitTx(); Message inbound[] = new Message[messages size()]; messages toArray(inbound); assertTextMessagesEqual( Rollback did not work , outbound, inbound); } public void testAckMessageInTx() throws Exception { Message[] outbound = new Message[] {session createTextMessage( First Message )}; beginTx(); producer send(outbound[0]); outbound[0] acknowledge(); commitTx(); outbound[0] acknowledge(); beginTx(); ArrayList<Message> messages = new ArrayList<Message>(); LOG info( About to consume message 1 ); Message message = consumer receive(1000); messages add(message); LOG info( Received + message); commitTx(); Message inbound[] = new Message[messages size()]; messages toArray(inbound); assertTextMessagesEqual( Message not delivered , outbound, inbound); } public void testSendSessionClose() throws Exception { Message[] outbound = new Message[] {session createTextMessage( First Message ), session createTextMessage( Second Message )}; beginTx(); producer send(outbound[0]); commitTx(); beginTx(); producer send(session createTextMessage( I m going to get rolled back )); consumer close(); reconnectSession(); producer send(outbound[1]); commitTx(); ArrayList<Message> messages = new ArrayList<Message>(); LOG info( About to consume message 1 ); beginTx(); Message message = consumer receive(1000); messages add(message); LOG info( Received + message); LOG info( About to consume message 2 ); message = consumer receive(4000); messages add(message); LOG info( Received + message); commitTx(); Message inbound[] = new Message[messages size()]; messages toArray(inbound); assertTextMessagesEqual( Rollback did not work , outbound, inbound); } public void testSendSessionAndConnectionClose() throws Exception { Message[] outbound = new Message[] {session createTextMessage( First Message ), session createTextMessage( Second Message )}; beginTx(); producer send(outbound[0]); commitTx(); beginTx(); producer send(session createTextMessage( I m going to get rolled back )); consumer close(); session close(); reconnect(); beginTx(); producer send(outbound[1]); commitTx(); ArrayList<Message> messages = new ArrayList<Message>(); LOG info( About to consume message 1 ); beginTx(); Message message = consumer receive(1000); messages add(message); LOG info( Received + message); LOG info( About to consume message 2 ); message = consumer receive(4000); messages add(message); LOG info( Received + message); commitTx(); Message inbound[] = new Message[messages size()]; messages toArray(inbound); assertTextMessagesEqual( Rollback did not work , outbound, inbound); } public void testReceiveRollback() throws Exception { Message[] outbound = new Message[] {session createTextMessage( First Message ), session createTextMessage( Second Message )}; beginTx(); while (consumer receive(1000) != null) { } commitTx(); beginTx(); producer send(outbound[0]); producer send(outbound[1]); commitTx(); LOG info( Sent 0 + outbound[0]); LOG info( Sent 1 + outbound[1]); ArrayList<Message> messages = new ArrayList<Message>(); beginTx(); Message message = consumer receive(1000); messages add(message); assertEquals(outbound[0], message); commitTx(); beginTx(); message = consumer receive(1000); assertNotNull(message); assertEquals(outbound[1], message); rollbackTx(); beginTx(); message = consumer receive(5000); assertNotNull( Should have re-received the message again! , message); messages add(message); commitTx(); Message inbound[] = new Message[messages size()]; messages toArray(inbound); assertTextMessagesEqual( Rollback did not work , outbound, inbound); } public void testReceiveTwoThenRollback() throws Exception { Message[] outbound = new Message[] {session createTextMessage( First Message ), session createTextMessage( Second Message )}; beginTx(); while (consumer receive(1000) != null) { } commitTx(); beginTx(); producer send(outbound[0]); producer send(outbound[1]); commitTx(); LOG info( Sent 0 + outbound[0]); LOG info( Sent 1 + outbound[1]); ArrayList<Message> messages = new ArrayList<Message>(); beginTx(); Message message = consumer receive(1000); assertEquals(outbound[0], message); message = consumer receive(1000); assertNotNull(message); assertEquals(outbound[1], message); rollbackTx(); beginTx(); message = consumer receive(5000); assertNotNull( Should have re-received the first message again! , message); messages add(message); assertEquals(outbound[0], message); message = consumer receive(5000); assertNotNull( Should have re-received the second message again! , message); messages add(message); assertEquals(outbound[1], message); assertNull(consumer receiveNoWait()); commitTx(); Message inbound[] = new Message[messages size()]; messages toArray(inbound); assertTextMessagesEqual( Rollback did not work , outbound, inbound); } public void testSendReceiveWithPrefetchOne() throws Exception { setPrefetchToOne(); Message[] outbound = new Message[] {session createTextMessage( First Message ), session createTextMessage( Second Message ), session createTextMessage( Third Message ), session createTextMessage( Fourth Message )}; beginTx(); for (int i = 0; i < outbound length; i++) { producer send(outbound[i]); } commitTx(); beginTx(); for (int i = 0; i < outbound length; i++) { LOG info( About to consume message 1 ); Message message = consumer receive(1000); assertNotNull(message); LOG info( Received + message); } commitTx(); } public void testReceiveTwoThenRollbackManyTimes() throws Exception { for (int i = 0; i < 5; i++) { testReceiveTwoThenRollback(); } } public void testSendRollbackWithPrefetchOfOne() throws Exception { setPrefetchToOne(); testSendRollback(); } public void testReceiveRollbackWithPrefetchOfOne() throws Exception { setPrefetchToOne(); testReceiveRollback(); } public void testCloseConsumerBeforeCommit() throws Exception { TextMessage[] outbound = new TextMessage[] {session createTextMessage( First Message ), session createTextMessage( Second Message )}; beginTx(); while (consumer receiveNoWait() != null) { } commitTx(); beginTx(); producer send(outbound[0]); producer send(outbound[1]); commitTx(); LOG info( Sent 0 + outbound[0]); LOG info( Sent 1 + outbound[1]); beginTx(); TextMessage message = (TextMessage)consumer receive(1000); assertEquals(outbound[0] getText(), message getText()); consumer close(); commitTx(); consumer = resourceProvider createConsumer(session, destination); LOG info( Created consumer + consumer); beginTx(); message = (TextMessage)consumer receive(1000); assertEquals(outbound[1] getText(), message getText()); commitTx(); } public void testChangeMutableObjectInObjectMessageThenRollback() throws Exception { ArrayList<String> list = new ArrayList<String>(); list add( First ); Message outbound = session createObjectMessage(list); outbound setStringProperty( foo , abc ); beginTx(); producer send(outbound); commitTx(); LOG info( About to consume message 1 ); beginTx(); Message message = consumer receive(5000); List<String> body = assertReceivedObjectMessageWithListBody(message); try { message setStringProperty( foo , def ); fail( Cannot change properties of the object! ); } catch (JMSException e) { LOG info( Caught expected exception + e, e); } body clear(); body add( This should never be seen! ); rollbackTx(); beginTx(); message = consumer receive(5000); List<String> secondBody = assertReceivedObjectMessageWithListBody(message); assertNotSame( Second call should return a different body , secondBody, body); commitTx(); } SuppressWarnings( unchecked ) protected List<String> assertReceivedObjectMessageWithListBody(Message message) throws JMSException { assertNotNull( Should have received a message! , message); assertEquals( foo header , abc , message getStringProperty( foo )); assertTrue( Should be an object message but was + message, message instanceof ObjectMessage); ObjectMessage objectMessage = (ObjectMessage)message; List<String> body = (List<String>)objectMessage getObject(); LOG info( Received body + body); assertEquals( Size of list should be 1 , 1, body size()); assertEquals( element 0 of list , First , body get(0)); return body; } protected void reconnect() throws Exception { if (connection != null) { connection close(); } session = null; connection = resourceProvider createConnection(connectionFactory); reconnectSession(); connection start(); } protected void reconnectSession() throws JMSException { if (session != null) { session close(); } session = resourceProvider createSession(connection); destination = resourceProvider createDestination(session, getSubject()); producer = resourceProvider createProducer(session, destination); consumer = resourceProvider createConsumer(session, destination); } protected void setPrefetchToOne() { ActiveMQPrefetchPolicy prefetchPolicy = getPrefetchPolicy(); prefetchPolicy setQueuePrefetch(1); prefetchPolicy setTopicPrefetch(1); prefetchPolicy setDurableTopicPrefetch(1); prefetchPolicy setOptimizeDurableTopicPrefetch(1); } protected ActiveMQPrefetchPolicy getPrefetchPolicy() { return ((ActiveMQConnection)connection) getPrefetchPolicy(); } public void testMessageListener() throws Exception { for (int i = 0; i < MESSAGE COUNT; i++) { producer send(session createTextMessage(MESSAGE TEXT + i)); } commitTx(); consumer setMessageListener(this); waitReceiveUnack(); assertEquals(unackMessages size(), MESSAGE COUNT); waitReceiveAck(); assertEquals(ackMessages size(), MESSAGE COUNT); consumer setMessageListener(null); assertNull(consumer receive(500)); reconnect(); } public void onMessage(Message message) { if (!resendPhase) { unackMessages add(message); if (unackMessages size() == MESSAGE COUNT) { try { rollbackTx(); resendPhase = true; } catch (Exception e) { e printStackTrace(); } } } else { ackMessages add(message); if (ackMessages size() == MESSAGE COUNT) { try { commitTx(); } catch (Exception e) { e printStackTrace(); } } } } private void waitReceiveUnack() throws Exception { for (int i = 0; i < 100 && !resendPhase; i++) { Thread sleep(100); } assertTrue(resendPhase); } private void waitReceiveAck() throws Exception { for (int i = 0; i < 100 && ackMessages size() < MESSAGE COUNT; i++) { Thread sleep(100); } assertFalse(ackMessages size() < MESSAGE COUNT); } }",1.0,
493,493,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\store\PListTestSupport.,A,"class A implements Runnable { Override public void run() { final String threadName = Thread currentThread() getName(); try { for (int i=0; i<iterations; i++) { PList candidate = lists[i%numLists]; Thread currentThread() setName( ALRF +candidate getName()); synchronized (plistLocks(candidate)) { Object last = candidate addLast(String valueOf(i), payload); getFirst(candidate); assertTrue(candidate remove(last)); } } } catch (Exception error) { LOG error( Unexpcted ex , error); error printStackTrace(); exceptions add(error); } finally { Thread currentThread() setName(threadName); } }",1.0,
494,494,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\store\PListTestSupport.,B,"class B implements Runnable { Override public void run() { final String threadName = Thread currentThread() getName(); try { for (int i=0; i<iterations; i++) { PList candidate = lists[i%numLists]; Thread currentThread() setName( ALRF +candidate getName()); synchronized (plistLocks(candidate)) { Object last = candidate addLast(String valueOf(i), payload); getFirst(candidate); assertTrue(candidate remove(last)); } } } catch (Exception error) { error printStackTrace(); exceptions add(error); } finally { Thread currentThread() setName(threadName); } }",1.0,
495,495,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\store\PListTestSupport.,Job,"class Job implements Runnable { int id; TaskType task; int iterations; public Job(int id, TaskType t, int iterations) { this id = id; this task = t; this iterations = iterations; } Override public void run() { final String threadName = Thread currentThread() getName(); try { PList plist = null; switch (task) { case CREATE Thread currentThread() setName( C +id); plist = store getPList(String valueOf(id)); LOG info( Job- + id + , CREATE ); break; case DELETE Thread currentThread() setName( D +id); store removePList(String valueOf(id)); break; case ADD Thread currentThread() setName( A +id); plist = store getPList(String valueOf(id)); for (int j = 0; j < iterations; j++) { synchronized (plistLocks(plist)) { if (exceptions isEmpty()) { String key = PL> + id + idSeed + - + j; entries put(key, plist addLast(key, payload)); } else { break; } } } if (exceptions isEmpty()) { LOG info( Job- + id + , Add, done + iterations); } break; case REMOVE Thread currentThread() setName( R +id); plist = store getPList(String valueOf(id)); synchronized (plistLocks(plist)) { for (int j = iterations -1; j >= 0; j--) { String key = PL> + id + idSeed + - + j; Object position = entries remove(key); if( position!=null ) { plist remove(position); } if (j > 0 && j % (iterations / 2) == 0) { LOG info( Job- + id + Done remove + j); } } } break; case ITERATE Thread currentThread() setName( I +id); plist = store getPList(String valueOf(id)); int iterateCount = 0; synchronized (plistLocks(plist)) { if (exceptions isEmpty()) { Iterator<PListEntry> iterator = plist iterator(); while (iterator hasNext() && exceptions isEmpty()) { iterator next(); iterateCount++; } if (plist size() != iterateCount) { System err println( Count Wrong + iterator); } assertEquals( iterate got all + id + iterator + iterator , plist size(), iterateCount); } } break; case ITERATE REMOVE Thread currentThread() setName( IRM +id); plist = store getPList(String valueOf(id)); int removeCount = 0; synchronized (plistLocks(plist)) { Iterator<PListEntry> removeIterator = plist iterator(); while (removeIterator hasNext()) { removeIterator next(); removeIterator remove(); if (removeCount++ > iterations) { break; } } } LOG info( Job- + id + Done remove + removeCount); break; default } } catch (Exception e) { LOG warn( Job[ +id+ ] caught exception + e getMessage()); e printStackTrace(); exceptions add(e); if (executor != null) { executor shutdownNow(); } } finally { Thread currentThread() setName(threadName); } } }",1.0,
499,499,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\util\SocketProxy.,Bridge,"public class Bridge { private Socket receiveSocket; private Socket sendSocket; private Pump requestThread; private Pump responseThread; public Bridge(Socket socket, URI target) throws Exception { receiveSocket = socket; sendSocket = createSocket(target); if (receiveBufferSize > 0) { sendSocket setReceiveBufferSize(receiveBufferSize); } sendSocket connect(new InetSocketAddress(target getHost(), target getPort())); linkWithThreads(receiveSocket, sendSocket); LOG info( proxy connection + sendSocket + , receiveBufferSize= + sendSocket getReceiveBufferSize()); } public void goOn() { responseThread goOn(); requestThread goOn(); } public void pause() { requestThread pause(); responseThread pause(); } public void close() throws Exception { synchronized(connections) { connections remove(this); } receiveSocket close(); sendSocket close(); } public void halfClose() throws Exception { receiveSocket close(); } private void linkWithThreads(Socket source, Socket dest) { requestThread = new Pump(source, dest); requestThread start(); responseThread = new Pump(dest, source); responseThread start(); } public class Pump extends Thread { protected Socket src; private Socket destination; private AtomicReference<CountDownLatch> pause = new AtomicReference<CountDownLatch>(); public Pump(Socket source, Socket dest) { super( SocketProxy-DataTransfer- + source getPort() + + dest getPort()); src = source; destination = dest; pause set(new CountDownLatch(0)); } public void pause() { pause set(new CountDownLatch(1)); } public void goOn() { pause get() countDown(); } public void run() { byte[] buf = new byte[1024]; try { InputStream in = src getInputStream(); OutputStream out = destination getOutputStream(); while (true) { int len = in read(buf); if (len == -1) { LOG debug( read eof from + src); break; } pause get() await(); out write(buf, 0, len); } } catch (Exception e) { LOG debug( read/write failed, reason + e getLocalizedMessage()); try { if (!receiveSocket isClosed()) { close(); } } catch (Exception ignore) { } } } } }",1.0,
500,500,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\util\SocketProxy.,Pump,"public class Pump extends Thread { protected Socket src; private Socket destination; private AtomicReference<CountDownLatch> pause = new AtomicReference<CountDownLatch>(); public Pump(Socket source, Socket dest) { super( SocketProxy-DataTransfer- + source getPort() + + dest getPort()); src = source; destination = dest; pause set(new CountDownLatch(0)); } public void pause() { pause set(new CountDownLatch(1)); } public void goOn() { pause get() countDown(); } public void run() { byte[] buf = new byte[1024]; try { InputStream in = src getInputStream(); OutputStream out = destination getOutputStream(); while (true) { int len = in read(buf); if (len == -1) { LOG debug( read eof from + src); break; } pause get() await(); out write(buf, 0, len); } } catch (Exception e) { LOG debug( read/write failed, reason + e getLocalizedMessage()); try { if (!receiveSocket isClosed()) { close(); } } catch (Exception ignore) { } } } } }",1.0,
502,502,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\util\Wait.,Wait,"public class Wait { public static final long MAX WAIT MILLIS = 30*1000; public static final int SLEEP MILLIS = 1000; public interface Condition { boolean isSatisified() throws Exception; } public static boolean waitFor(Condition condition) throws Exception { return waitFor(condition, MAX WAIT MILLIS); } public static boolean waitFor(final Condition condition, final long duration) throws Exception { return waitFor(condition, duration, SLEEP MILLIS); } public static boolean waitFor(final Condition condition, final long duration, final int sleepMillis) throws Exception { final long expiry = System currentTimeMillis() + duration; boolean conditionSatisified = condition isSatisified(); while (!conditionSatisified && System currentTimeMillis() < expiry) { TimeUnit MILLISECONDS sleep(sleepMillis); conditionSatisified = condition isSatisified(); } return conditionSatisified; } }",1.0,
503,503,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelConnection.,CamelConnection,"public class CamelConnection extends ActiveMQConnection implements CamelContextAware { private CamelContext camelContext; protected CamelConnection(Transport transport, IdGenerator clientIdGenerator, IdGenerator connectionIdGenerator, JMSStatsImpl factoryStats) throws Exception { super(transport, clientIdGenerator, connectionIdGenerator, factoryStats); } public CamelContext getCamelContext() { return camelContext; } public void setCamelContext(CamelContext camelContext) { this camelContext = camelContext; } }",1.0,
504,504,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelConnectionFactory.,CamelConnectionFactory,"public class CamelConnectionFactory extends ActiveMQConnectionFactory implements CamelContextAware { private CamelContext camelContext; public CamelConnectionFactory() { } public CamelContext getCamelContext() { return camelContext; } public void setCamelContext(CamelContext camelContext) { this camelContext = camelContext; } protected CamelConnection createActiveMQConnection(Transport transport, JMSStatsImpl stats) throws Exception { CamelConnection connection = new CamelConnection(transport, getClientIdGenerator(), getConnectionIdGenerator(), stats); CamelContext context = getCamelContext(); if (context != null) { connection setCamelContext(context); } return connection; } }",1.0,
506,506,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelMessageConsumer.,CamelMessageConsumer,"public class CamelMessageConsumer implements MessageConsumer { private final CamelDestination destination; private final Endpoint endpoint; private final ActiveMQSession session; private final String messageSelector; private final boolean noLocal; private MessageListener messageListener; private Consumer consumer; private PollingConsumer pollingConsumer; private boolean closed; public CamelMessageConsumer(CamelDestination destination, Endpoint endpoint, ActiveMQSession session, String messageSelector, boolean noLocal) { this destination = destination; this endpoint = endpoint; this session = session; this messageSelector = messageSelector; this noLocal = noLocal; } public void close() throws JMSException { if (!closed) { closed = true; try { if (consumer != null) { consumer stop(); } if (pollingConsumer != null) { pollingConsumer stop(); } } catch (JMSException e) { throw e; } catch (Exception e) { throw JMSExceptionSupport create(e); } } } public MessageListener getMessageListener() throws JMSException { return messageListener; } public void setMessageListener(MessageListener messageListener) throws JMSException { this messageListener = messageListener; if (messageListener != null && consumer == null) { consumer = createConsumer(); } } public Message receive() throws JMSException { Exchange exchange = getPollingConsumer() receive(); return createMessage(exchange); } public Message receive(long timeoutMillis) throws JMSException { Exchange exchange = getPollingConsumer() receive(timeoutMillis); return createMessage(exchange); } public Message receiveNoWait() throws JMSException { Exchange exchange = getPollingConsumer() receiveNoWait(); return createMessage(exchange); } public CamelDestination getDestination() { return destination; } public Endpoint getEndpoint() { return endpoint; } public String getMessageSelector() { return messageSelector; } public boolean isNoLocal() { return noLocal; } public ActiveMQSession getSession() { return session; } protected PollingConsumer getPollingConsumer() throws JMSException { try { if (pollingConsumer == null) { pollingConsumer = endpoint createPollingConsumer(); pollingConsumer start(); } return pollingConsumer; } catch (JMSException e) { throw e; } catch (Exception e) { throw JMSExceptionSupport create(e); } } protected Message createMessage(Exchange exchange) throws JMSException { if (exchange != null) { Message message = destination getBinding() makeJmsMessage(exchange, session); return message; } else { return null; } } protected Consumer createConsumer() throws JMSException { try { Consumer answer = endpoint createConsumer(new Processor() { public void process(Exchange exchange) throws Exception { Message message = createMessage(exchange); getMessageListener() onMessage(message); } }); answer start(); return answer; } catch (JMSException e) { throw e; } catch (Exception e) { throw JMSExceptionSupport create(e); } } protected void checkClosed() throws javax jms IllegalStateException { if (closed) { throw new IllegalStateException( The producer is closed ); } } }",1.0,
507,507,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelMessageProducer.,CamelMessageProducer,"public class CamelMessageProducer extends ActiveMQMessageProducerSupport { protected Producer producer; private final CamelDestination destination; private final Endpoint endpoint; private boolean closed; public CamelMessageProducer(CamelDestination destination, Endpoint endpoint, ActiveMQSession session) throws JMSException { super(session); this destination = destination; this endpoint = endpoint; try { this producer = endpoint createProducer(); } catch (JMSException e) { throw e; } catch (Exception e) { throw JMSExceptionSupport create(e); } } public CamelDestination getDestination() throws JMSException { return destination; } public Endpoint getEndpoint() { return endpoint; } public void close() throws JMSException { if (!closed) { closed = true; try { producer stop(); } catch (JMSException e) { throw e; } catch (Exception e) { throw JMSExceptionSupport create(e); } } } public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException { CamelDestination camelDestination = null; if (ObjectHelper equal(destination, this destination)) { camelDestination = this destination; } else { throw new IllegalArgumentException( Invalid destination setting + destination + when expected + this destination); } try { Exchange exchange = endpoint createExchange(ExchangePattern InOnly); exchange setIn(new JmsMessage(message, camelDestination getBinding())); producer process(exchange); } catch (JMSException e) { throw e; } catch (Exception e) { throw JMSExceptionSupport create(e); } } protected void checkClosed() throws IllegalStateException { if (closed) { throw new IllegalStateException( The producer is closed ); } } }",1.0,
508,508,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelQueue.,CamelQueue,"public class CamelQueue extends CamelDestination implements Queue { public CamelQueue(String uri) { super(uri); } public String getQueueName() throws JMSException { return getUri(); } public QueueSender createSender(ActiveMQSession session) throws JMSException { return new CamelQueueSender(this, resolveEndpoint(session), session); } public QueueReceiver createReceiver(ActiveMQSession session, String messageSelector) { return new CamelQueueReceiver(this, resolveEndpoint(session), session, messageSelector); } }",1.0,
509,509,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelQueueReceiver.,CamelQueueReceiver,"public class CamelQueueReceiver extends CamelMessageConsumer implements QueueReceiver { public CamelQueueReceiver(CamelQueue destination, Endpoint endpoint, ActiveMQSession session, String name) { super(destination, endpoint, session, null, false); } public Queue getQueue() throws JMSException { checkClosed(); return (Queue) super getDestination(); } }",1.0,
510,510,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelQueueSender.,CamelQueueSender,"public class CamelQueueSender extends CamelMessageProducer implements QueueSender { public CamelQueueSender(CamelQueue destination, Endpoint endpoint, ActiveMQSession session) throws JMSException { super(destination, endpoint, session); } public Queue getQueue() throws JMSException { return (Queue)super getDestination(); } public void send(Queue queue, Message message) throws JMSException { super send(queue, message); } public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException { super send(queue, message, deliveryMode, priority, timeToLive); } }",1.0,
511,511,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelTopic.,CamelTopic,"public class CamelTopic extends CamelDestination implements Topic { public CamelTopic(String uri) { super(uri); } public String getTopicName() throws JMSException { return getUri(); } public TopicPublisher createPublisher(ActiveMQSession session) throws JMSException { return new CamelTopicPublisher(this, resolveEndpoint(session), session); } public TopicSubscriber createDurableSubscriber(ActiveMQSession session, String name, String messageSelector, boolean noLocal) { return new CamelTopicSubscriber(this, resolveEndpoint(session), session, name, messageSelector, noLocal); } }",1.0,
512,512,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelTopicPublisher.,CamelTopicPublisher,"public class CamelTopicPublisher extends CamelMessageProducer implements TopicPublisher { public CamelTopicPublisher(CamelTopic destination, Endpoint endpoint, ActiveMQSession session) throws JMSException { super(destination, endpoint, session); } public Topic getTopic() throws JMSException { return (Topic) super getDestination(); } public void publish(Message message) throws JMSException { super send(message); } public void publish(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException { super send(message, deliveryMode, priority, timeToLive); } public void publish(Topic topic, Message message) throws JMSException { super send(topic, message); } public void publish(Topic topic, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException { super send(topic, message, deliveryMode, priority, timeToLive); } }",1.0,
513,513,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelTopicSubscriber.,CamelTopicSubscriber,"public class CamelTopicSubscriber extends CamelMessageConsumer implements TopicSubscriber { public CamelTopicSubscriber(CamelTopic destination, Endpoint endpoint, ActiveMQSession session, String name, String messageSelector, boolean noLocal) { super(destination, endpoint, session, messageSelector, noLocal); } public Topic getTopic() throws JMSException { checkClosed(); return (Topic) super getDestination(); } public boolean getNoLocal() throws JMSException { checkClosed(); return super isNoLocal(); } }",1.0,
514,514,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\component\ActiveMQComponent.,ActiveMQComponent,"public class ActiveMQComponent extends JmsComponent { private final CopyOnWriteArrayList<SingleConnectionFactory> singleConnectionFactoryList = new CopyOnWriteArrayList<SingleConnectionFactory>(); private final CopyOnWriteArrayList<Service> pooledConnectionFactoryServiceList = new CopyOnWriteArrayList<Service>(); private boolean exposeAllQueues; private CamelEndpointLoader endpointLoader; public static ActiveMQComponent activeMQComponent() { return new ActiveMQComponent(); } public static ActiveMQComponent activeMQComponent(String brokerURL) { ActiveMQComponent answer = new ActiveMQComponent(); if (answer getConfiguration() instanceof ActiveMQConfiguration) { ((ActiveMQConfiguration) answer getConfiguration()) setBrokerURL(brokerURL); } answer setConnectionFactory(new ActiveMQConnectionFactory(brokerURL)); return answer; } public ActiveMQComponent() { } public ActiveMQComponent(CamelContext context) { super(context); } public ActiveMQComponent(ActiveMQConfiguration configuration) { super(configuration); } public void setBrokerURL(String brokerURL) { if (getConfiguration() instanceof ActiveMQConfiguration) { ((ActiveMQConfiguration)getConfiguration()) setBrokerURL(brokerURL); } } public void setUserName(String userName) { if (getConfiguration() instanceof ActiveMQConfiguration) { ((ActiveMQConfiguration)getConfiguration()) setUserName(userName); } } public void setPassword(String password) { if (getConfiguration() instanceof ActiveMQConfiguration) { ((ActiveMQConfiguration)getConfiguration()) setPassword(password); } } public boolean isExposeAllQueues() { return exposeAllQueues; } public void setExposeAllQueues(boolean exposeAllQueues) { this exposeAllQueues = exposeAllQueues; } public void setUsePooledConnection(boolean usePooledConnection) { if (getConfiguration() instanceof ActiveMQConfiguration) { ((ActiveMQConfiguration)getConfiguration()) setUsePooledConnection(usePooledConnection); } } public void setUseSingleConnection(boolean useSingleConnection) { if (getConfiguration() instanceof ActiveMQConfiguration) { ((ActiveMQConfiguration)getConfiguration()) setUseSingleConnection(useSingleConnection); } } protected void addPooledConnectionFactoryService(Service pooledConnectionFactoryService) { pooledConnectionFactoryServiceList add(pooledConnectionFactoryService); } protected void addSingleConnectionFactory(SingleConnectionFactory singleConnectionFactory) { singleConnectionFactoryList add(singleConnectionFactory); } Override SuppressWarnings( unchecked ) protected String convertPathToActualDestination(String path, Map<String, Object> parameters) { Map options = IntrospectionSupport extractProperties(parameters, destination ); String query; try { query = URISupport createQueryString(options); } catch (URISyntaxException e) { throw ObjectHelper wrapRuntimeCamelException(e); } if (ObjectHelper isNotEmpty(query)) { return path + + query; } else { return path; } } Override protected void doStart() throws Exception { super doStart(); if (isExposeAllQueues()) { endpointLoader = new CamelEndpointLoader(getCamelContext()); endpointLoader afterPropertiesSet(); } } Override protected void doStop() throws Exception { if (endpointLoader != null) { endpointLoader destroy(); endpointLoader = null; } for (Service s pooledConnectionFactoryServiceList) { s stop(); } pooledConnectionFactoryServiceList clear(); for (SingleConnectionFactory s singleConnectionFactoryList) { s destroy(); } singleConnectionFactoryList clear(); super doStop(); } Override public void setConfiguration(JmsConfiguration configuration) { if (configuration instanceof ActiveMQConfiguration) { ((ActiveMQConfiguration) configuration) setActiveMQComponent(this); } super setConfiguration(configuration); } Override protected JmsConfiguration createConfiguration() { ActiveMQConfiguration answer = new ActiveMQConfiguration(); answer setActiveMQComponent(this); return answer; } }",1.0,
517,517,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\converter\ActiveMQConverter.,ActiveMQConverter,"public class ActiveMQConverter { Converter public static ActiveMQDestination toDestination(String name) { return ActiveMQDestination createDestination(name, ActiveMQDestination QUEUE TYPE); } }",1.0,
519,519,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\converter\IdentityMessageReuseConverter.,IdentityMessageReuseConverter,"public class IdentityMessageReuseConverter implements MessageConverter { public Object fromMessage(Message message) throws JMSException, MessageConversionException { return message; } public Message toMessage(Object object, Session session) throws JMSException, MessageConversionException { if (object instanceof ActiveMQMessage) { ((ActiveMQMessage)object) setReadOnlyProperties(false); return (Message)object; } else { throw new MessageConversionException( Cannot reuse object of type [ + ObjectUtils nullSafeClassName(object) + ] as ActiveMQMessage message Message must already be an ActiveMQMessage ); } } }",1.0,
520,520,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\AMQ2240Test.,AMQ2240Test,public class AMQ2240Test { private static final Logger LOG = LoggerFactory getLogger(AMQ2240Test class); Test public void testBadVMTransportOptionsJMSPrefix() throws Exception { try{ final String vmUri = vm jms redeliveryPolicy maximumRedeliveries=0& + jms redeliveryPolicy initialRedeliveryDelay=500& + jms useAsyncSend=false&jms sendTimeout=ABC& + jms maxXXXXReconnectAttempts=1&jms timeout=3000 ; LOG info( creating context with bad URI + vmUri); ActiveMQComponent activeMQComponent(vmUri); fail( Should have received an exception from the bad URI ); } catch(Exception e) { } } Test public void testBadVMTransportOptionsBrokerPrefix() throws Exception { try{ final String vmUri = vm broker XXX=foo&broker persistent=XXX&broker useJmx=false ; LOG info( creating context with bad URI + vmUri); ActiveMQComponent activeMQComponent(vmUri) start(); fail( Should have received an exception from the bad URI ); } catch(Exception e) { } } },1.0,
522,522,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\AMQ2611Test.,Consumer,public static class Consumer { public void consume( Body String message) { log info( consume message = + message); } },1.0,
523,523,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\CamelDestinationExclusiveConsumerTest.,CamelDestinationExclusiveConsumerTest,public class CamelDestinationExclusiveConsumerTest extends AbstractJUnit38SpringContextTests { Autowired protected CamelContext camelContext; EndpointInject(uri = mock results ) protected MockEndpoint expectedEndpoint; public void testMocksAreValid() throws Exception { expectedEndpoint expectedMessageCount(1); MockEndpoint assertIsSatisfied(camelContext); } },1.0,
524,524,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\CamelEmbeddedBrokerTestSupport.,CamelEmbeddedBrokerTestSupport,"public abstract class CamelEmbeddedBrokerTestSupport extends EmbeddedBrokerTestSupport { protected CamelContext camelContext; protected ProducerTemplate template; Override protected void setUp() throws Exception { bindAddress = tcp super setUp(); camelContext = createCamelContext(); addCamelRoutes(camelContext); assertValidContext(camelContext); camelContext start(); template = camelContext createProducerTemplate(); template start(); } Override protected void tearDown() throws Exception { super tearDown(); if (template != null) { template stop(); } if (camelContext != null) { camelContext stop(); } } protected CamelContext createCamelContext() throws Exception { return new DefaultCamelContext(createJndiContext()); } protected Context createJndiContext() throws Exception { return new JndiContext(new Hashtable()); } protected void addCamelRoutes(CamelContext camelContext) throws Exception { } protected Endpoint resolveMandatoryEndpoint(String uri) { return resolveMandatoryEndpoint(camelContext, uri); } protected <T extends Endpoint> T resolveMandatoryEndpoint(String uri, Class<T> endpointType) { return resolveMandatoryEndpoint(camelContext, uri, endpointType); } protected Endpoint resolveMandatoryEndpoint(CamelContext context, String uri) { Endpoint endpoint = context getEndpoint(uri); assertNotNull( No endpoint found for URI + uri, endpoint); return endpoint; } protected <T extends Endpoint> T resolveMandatoryEndpoint(CamelContext context, String uri, Class<T> endpointType) { T endpoint = context getEndpoint(uri, endpointType); assertNotNull( No endpoint found for URI + uri, endpoint); return endpoint; } protected MockEndpoint getMockEndpoint(String uri) { return resolveMandatoryEndpoint(uri, MockEndpoint class); } protected void assertMockEndpointsSatisifed() throws InterruptedException { MockEndpoint assertIsSatisfied(camelContext); } protected void assertValidContext(CamelContext context) { assertNotNull( No context found! , context); } }",1.0,
530,530,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\DlqTest.,CanError,public static class CanError { public String enrich(String body) throws Exception { LOG info( Got body + body); throw new RuntimeException( won t enrich today! ); } },1.0,
532,532,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\JmsJdbcXATest.,JmsJdbcXATest,"public class JmsJdbcXATest extends CamelSpringTestSupport { private static final Logger LOG = LoggerFactory getLogger(JmsJdbcXATest class); BrokerService broker = null; int messageCount; public java sql Connection initDb() throws Exception { String createStatement = CREATE TABLE SCP INPUT MESSAGES ( + id int NOT NULL GENERATED ALWAYS AS IDENTITY, + messageId varchar(96) NOT NULL, + messageCorrelationId varchar(96) NOT NULL, + messageContent varchar(2048) NOT NULL, + PRIMARY KEY (id) ) ; java sql Connection conn = getJDBCConnection(); try { conn createStatement() execute(createStatement); } catch (SQLException alreadyExists) { log info( ex on create tables , alreadyExists); } try { conn createStatement() execute( DELETE FROM SCP INPUT MESSAGES ); } catch (SQLException ex) { log info( ex on create delete all , ex); } return conn; } private java sql Connection getJDBCConnection() throws Exception { BasicDataSource dataSource = getMandatoryBean(BasicDataSource class, managedDataSourceWithRecovery ); return dataSource getConnection(); } private int dumpDb(java sql Connection jdbcConn) throws Exception { int count = 0; ResultSet resultSet = jdbcConn createStatement() executeQuery( SELECT * FROM SCP INPUT MESSAGES ); while (resultSet next()) { count++; log info( message - seq + resultSet getInt(1) + , id + resultSet getString(2) + , corr + resultSet getString(3) + , content + resultSet getString(4)); } return count; } Test public void testRecoveryCommit() throws Exception { java sql Connection jdbcConn = initDb(); sendJMSMessageToKickOffRoute(); LOG info( waiting for route to kick in, it will kill the broker on first 2pc commit ); broker waitUntilStopped(); assertEquals( message in db, commit to db worked , 1, dumpDb(jdbcConn)); LOG info( Broker stopped, restarting ); broker = createBroker(false); broker start(); broker waitUntilStarted(); assertEquals( pending transactions , 1, broker getBroker() getPreparedTransactions(null) length); LOG info( waiting for recovery to complete ); assertTrue( recovery complete in time , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return broker getBroker() getPreparedTransactions(null) length == 0; } })); assertEquals( recovery complete , 0, broker getBroker() getPreparedTransactions(null) length); final java sql Connection freshConnection = getJDBCConnection(); assertTrue( did not get replay , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 1 == dumpDb(freshConnection); } })); assertEquals( still one message in db , 1, dumpDb(freshConnection)); sendJMSMessageToKickOffRoute(); assertTrue( got second message , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 2 == dumpDb(freshConnection); } })); assertEquals( two messages in db , 2, dumpDb(freshConnection)); } private void sendJMSMessageToKickOffRoute() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( vm factory setWatchTopicAdvisories(false); Connection connection = factory createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(new ActiveMQQueue( scp transacted )); TextMessage message = session createTextMessage( Some Text, messageCount + messageCount++); message setJMSCorrelationID( pleaseCorrelate ); producer send(message); connection close(); } private BrokerService createBroker(boolean deleteAllMessages) throws Exception { BrokerService brokerService = new BrokerService(); brokerService setDeleteAllMessagesOnStartup(deleteAllMessages); brokerService setBrokerName( testXA ); brokerService setAdvisorySupport(false); brokerService setUseJmx(false); brokerService setDataDirectory( target/data ); brokerService addConnector( tcp return brokerService; } Override protected AbstractXmlApplicationContext createApplicationContext() { deleteDirectory( target/data/howl ); try { broker = createBroker(true); broker setPlugins(new BrokerPlugin[]{ new BrokerPluginSupport() { Override public void commitTransaction(ConnectionContext context, TransactionId xid, boolean onePhase) throws Exception { if (onePhase) { super commitTransaction(context, xid, onePhase); } else { context setDontSendReponse(true); Executors newSingleThreadExecutor() execute(new Runnable() { public void run() { LOG info( Stopping broker post commit ); try { broker stop(); } catch (Exception e) { e printStackTrace(); } } }); } } } }); broker start(); } catch (Exception e) { throw new RuntimeException( Failed to start broker , e); } return new ClassPathXmlApplicationContext( org/apache/activemq/camel/jmsXajdbc xml ); } }",1.0,
533,533,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\SetGroupIdProcessor.,SetGroupIdProcessor,"public class SetGroupIdProcessor implements Processor { public void process(Exchange exchange) throws Exception { Message out = exchange getOut(); out copyFrom(exchange getIn()); out setHeader( JMSXGroupID , ABC ); } }",1.0,
534,534,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\SetHeaderTest.,SetHeaderTest,public class SetHeaderTest extends AbstractJUnit38SpringContextTests { private static final transient Logger LOG = LoggerFactory getLogger(SetHeaderTest class); Autowired protected CamelContext camelContext; EndpointInject(uri = mock results ) protected MockEndpoint expectedEndpoint; public void testMocksAreValid() throws Exception { expectedEndpoint expectedMessageCount(1); expectedEndpoint message(0) header( JMSXGroupID ) isEqualTo( ABC ); MockEndpoint assertIsSatisfied(camelContext); List<Exchange> list = expectedEndpoint getReceivedExchanges(); for (Exchange exchange list) { Object body = exchange getIn() getBody(); LOG debug( Received body + body + of type + ObjectHelper className(body) + on + exchange); } } },1.0,
536,536,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\TransactedConsumeTest.,ConnectionLog,static class ConnectionLog implements Processor { Override public void process(Exchange exchange) throws Exception { if (consumed getAndIncrement() == 0) { firstConsumed set(System currentTimeMillis()); } ActiveMQTextMessage m = (ActiveMQTextMessage) ((JmsMessage)exchange getIn()) getJmsMessage(); if (consumed get() %500 == 0) { LOG info( received on + m getConnection() toString()); } } },1.0,
546,546,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\component\InvokeRequestReplyUsingJmsReplyToHeaderTest.,MyServer,"protected static class MyServer { private Map<String,Object> headers; public String process( Headers Map<String,Object> headers, String body) { this headers = headers; LOG info( process() invoked with headers + headers); return Hello + body; } public Map<String,Object> getHeaders() { return headers; } }",1.0,
548,548,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\converter\InvokeJmsMessageListenerTest.,InvokeJmsMessageListenerTest,"public class InvokeJmsMessageListenerTest extends CamelTestSupport { protected MyMessageListener messageListener = new MyMessageListener(); private String expectedBody = <hello>world!</hello> ; Test public void testCamelInvokesMessageListener() throws Exception { template sendBody( direct start , expectedBody); Message message = messageListener message; assertNotNull( Should have invoked the message listener! , message); TextMessage textMessage = assertIsInstanceOf(TextMessage class, message); assertEquals( body , expectedBody, textMessage getText()); } Override protected RouteBuilder createRouteBuilder() throws Exception { return new RouteBuilder() { public void configure() throws Exception { from( direct start ) bean(messageListener); } }; } protected static class MyMessageListener implements MessageListener { public Message message; public void onMessage(Message message) { this message = message; } } }",1.0,
549,549,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\converter\InvokeJmsMessageListenerTest.,MyMessageListener,protected static class MyMessageListener implements MessageListener { public Message message; public void onMessage(Message message) { this message = message; } },1.0,
556,556,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQInputStream.,ReadTimeoutException,public class ReadTimeoutException extends IOException { private static final long serialVersionUID = -3217758894326719909L; public ReadTimeoutException() { super(); } },1.0,
557,557,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQMessageAudit.,ActiveMQMessageAudit,"public class ActiveMQMessageAudit extends ActiveMQMessageAuditNoSync { private static final long serialVersionUID = 1L; public ActiveMQMessageAudit() { super(); } public ActiveMQMessageAudit(int auditDepth, final int maximumNumberOfProducersToTrack) { super(auditDepth, maximumNumberOfProducersToTrack); } Override public boolean isDuplicate(String id) { synchronized (this) { return super isDuplicate(id); } } Override public boolean isDuplicate(final MessageId id) { synchronized (this) { return super isDuplicate(id); } } Override public void rollback(final MessageId id) { synchronized (this) { super rollback(id); } } Override public boolean isInOrder(final String id) { synchronized (this) { return super isInOrder(id); } } Override public boolean isInOrder(final MessageId id) { synchronized (this) { return super isInOrder(id); } } public void setMaximumNumberOfProducersToTrack(int maximumNumberOfProducersToTrack) { synchronized (this) { super setMaximumNumberOfProducersToTrack(maximumNumberOfProducersToTrack); } } }",1.0,
558,558,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQMessageAuditNoSync.,ActiveMQMessageAuditNoSync,"public class ActiveMQMessageAuditNoSync implements Serializable { private static final long serialVersionUID = 1L; public static final int DEFAULT WINDOW SIZE = 2048; public static final int MAXIMUM PRODUCER COUNT = 64; private int auditDepth; private int maximumNumberOfProducersToTrack; private final LRUCache<Object, BitArrayBin> map; private transient boolean modified = true; public ActiveMQMessageAuditNoSync() { this(DEFAULT WINDOW SIZE, MAXIMUM PRODUCER COUNT); } public ActiveMQMessageAuditNoSync(int auditDepth, final int maximumNumberOfProducersToTrack) { this auditDepth = auditDepth; this maximumNumberOfProducersToTrack=maximumNumberOfProducersToTrack; this map = new LRUCache<Object, BitArrayBin>(0, maximumNumberOfProducersToTrack, 0 75f, true); } public int getAuditDepth() { return auditDepth; } public void setAuditDepth(int auditDepth) { this auditDepth = auditDepth; this modified = true; } public int getMaximumNumberOfProducersToTrack() { return maximumNumberOfProducersToTrack; } public void setMaximumNumberOfProducersToTrack(int maximumNumberOfProducersToTrack) { if (maximumNumberOfProducersToTrack < this maximumNumberOfProducersToTrack){ LRUCache<Object, BitArrayBin> newMap = new LRUCache<Object, BitArrayBin>(0,maximumNumberOfProducersToTrack,0 75f,true); newMap putAll(this map); this map clear(); this map putAll(newMap); } this map setMaxCacheSize(maximumNumberOfProducersToTrack); this maximumNumberOfProducersToTrack = maximumNumberOfProducersToTrack; this modified = true; } public boolean isDuplicate(Message message) throws JMSException { return isDuplicate(message getJMSMessageID()); } public boolean isDuplicate(String id) { boolean answer = false; String seed = IdGenerator getSeedFromId(id); if (seed != null) { BitArrayBin bab = map get(seed); if (bab == null) { bab = new BitArrayBin(auditDepth); map put(seed, bab); modified = true; } long index = IdGenerator getSequenceFromId(id); if (index >= 0) { answer = bab setBit(index, true); modified = true; } } return answer; } public boolean isDuplicate(final MessageReference message) { MessageId id = message getMessageId(); return isDuplicate(id); } public boolean isDuplicate(final MessageId id) { boolean answer = false; if (id != null) { ProducerId pid = id getProducerId(); if (pid != null) { BitArrayBin bab = map get(pid); if (bab == null) { bab = new BitArrayBin(auditDepth); map put(pid, bab); modified = true; } answer = bab setBit(id getProducerSequenceId(), true); } } return answer; } public void rollback(final MessageReference message) { MessageId id = message getMessageId(); rollback(id); } public void rollback(final MessageId id) { if (id != null) { ProducerId pid = id getProducerId(); if (pid != null) { BitArrayBin bab = map get(pid); if (bab != null) { bab setBit(id getProducerSequenceId(), false); modified = true; } } } } public void rollback(final String id) { String seed = IdGenerator getSeedFromId(id); if (seed != null) { BitArrayBin bab = map get(seed); if (bab != null) { long index = IdGenerator getSequenceFromId(id); bab setBit(index, false); modified = true; } } } public boolean isInOrder(Message msg) throws JMSException { return isInOrder(msg getJMSMessageID()); } public boolean isInOrder(final String id) { boolean answer = true; if (id != null) { String seed = IdGenerator getSeedFromId(id); if (seed != null) { BitArrayBin bab = map get(seed); if (bab != null) { long index = IdGenerator getSequenceFromId(id); answer = bab isInOrder(index); modified = true; } } } return answer; } public boolean isInOrder(final MessageReference message) { return isInOrder(message getMessageId()); } public boolean isInOrder(final MessageId id) { boolean answer = false; if (id != null) { ProducerId pid = id getProducerId(); if (pid != null) { BitArrayBin bab = map get(pid); if (bab == null) { bab = new BitArrayBin(auditDepth); map put(pid, bab); modified = true; } answer = bab isInOrder(id getProducerSequenceId()); } } return answer; } public long getLastSeqId(ProducerId id) { long result = -1; BitArrayBin bab = map get(id toString()); if (bab != null) { result = bab getLastSetIndex(); } return result; } public void clear() { map clear(); } public boolean isModified() { return this modified; } public void setModified(boolean modified) { this modified = modified; } public boolean modified() { if (this modified) { this modified = false; return true; } return false; } }",1.0,
560,560,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQMessageConsumer.,PreviouslyDeliveredMap,"class PreviouslyDeliveredMap<K, V> extends HashMap<K, V> { final TransactionId transactionId; public PreviouslyDeliveredMap(TransactionId transactionId) { this transactionId = transactionId; } }",1.0,
567,567,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQQueueReceiver.,ActiveMQQueueReceiver,"public class ActiveMQQueueReceiver extends ActiveMQMessageConsumer implements QueueReceiver { protected ActiveMQQueueReceiver(ActiveMQSession theSession, ConsumerId consumerId, ActiveMQDestination destination, String selector, int prefetch, int maximumPendingMessageCount, boolean asyncDispatch) throws JMSException { super(theSession, consumerId, destination, null, selector, prefetch, maximumPendingMessageCount, false, false, asyncDispatch, null); } public Queue getQueue() throws JMSException { checkClosed(); return (Queue)super getDestination(); } }",1.0,
568,568,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQQueueSender.,ActiveMQQueueSender,"public class ActiveMQQueueSender extends ActiveMQMessageProducer implements QueueSender { protected ActiveMQQueueSender(ActiveMQSession session, ActiveMQDestination destination,int sendTimeout) throws JMSException { super(session, session getNextProducerId(), destination,sendTimeout); } public Queue getQueue() throws JMSException { return (Queue)super getDestination(); } public void send(Queue queue, Message message) throws JMSException { super send(queue, message); } public void send(Queue queue, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException { super send(queue, message, deliveryMode, priority, timeToLive); } }",1.0,
571,571,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQSessionExecutor.,ActiveMQSessionExecutor,"public class ActiveMQSessionExecutor implements Task { private static final Logger LOG = LoggerFactory getLogger(ActiveMQSessionExecutor class); private final ActiveMQSession session; private final MessageDispatchChannel messageQueue; private boolean dispatchedBySessionPool; private volatile TaskRunner taskRunner; private boolean startedOrWarnedThatNotStarted; ActiveMQSessionExecutor(ActiveMQSession session) { this session = session; if (this session connection != null && this session connection isMessagePrioritySupported()) { this messageQueue = new SimplePriorityMessageDispatchChannel(); }else { this messageQueue = new FifoMessageDispatchChannel(); } } void setDispatchedBySessionPool(boolean value) { dispatchedBySessionPool = value; wakeup(); } void execute(MessageDispatch message) throws InterruptedException { if (!startedOrWarnedThatNotStarted) { ActiveMQConnection connection = session connection; long aboutUnstartedConnectionTimeout = connection getWarnAboutUnstartedConnectionTimeout(); if (connection isStarted() || aboutUnstartedConnectionTimeout < 0L) { startedOrWarnedThatNotStarted = true; } else { long elapsedTime = System currentTimeMillis() - connection getTimeCreated(); if (elapsedTime > aboutUnstartedConnectionTimeout) { LOG warn( Received a message on a connection which is not yet started Have you forgotten to call Connection start() Connection + connection + Received + message); startedOrWarnedThatNotStarted = true; } } } if (!session isSessionAsyncDispatch() && !dispatchedBySessionPool) { dispatch(message); } else { messageQueue enqueue(message); wakeup(); } } public void wakeup() { if (!dispatchedBySessionPool) { if (session isSessionAsyncDispatch()) { try { TaskRunner taskRunner = this taskRunner; if (taskRunner == null) { synchronized (this) { if (this taskRunner == null) { if (!isRunning()) { return; } this taskRunner = session connection getSessionTaskRunner() createTaskRunner(this, ActiveMQ Session + session getSessionId()); } taskRunner = this taskRunner; } } taskRunner wakeup(); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } else { while (iterate()) { } } } } void executeFirst(MessageDispatch message) { messageQueue enqueueFirst(message); wakeup(); } public boolean hasUncomsumedMessages() { return !messageQueue isClosed() && messageQueue isRunning() && !messageQueue isEmpty(); } void dispatch(MessageDispatch message) { for (ActiveMQMessageConsumer consumer this session consumers) { ConsumerId consumerId = message getConsumerId(); if (consumerId equals(consumer getConsumerId())) { consumer dispatch(message); break; } } } synchronized void start() { if (!messageQueue isRunning()) { messageQueue start(); if (hasUncomsumedMessages()) { wakeup(); } } } void stop() throws JMSException { try { if (messageQueue isRunning()) { synchronized(this) { messageQueue stop(); if (this taskRunner != null) { this taskRunner shutdown(); this taskRunner = null; } } } } catch (InterruptedException e) { Thread currentThread() interrupt(); throw JMSExceptionSupport create(e); } } boolean isRunning() { return messageQueue isRunning(); } void close() { messageQueue close(); } void clear() { messageQueue clear(); } MessageDispatch dequeueNoWait() { return messageQueue dequeueNoWait(); } protected void clearMessagesInProgress() { messageQueue clear(); } public boolean isEmpty() { return messageQueue isEmpty(); } public boolean iterate() { for (ActiveMQMessageConsumer consumer this session consumers) { if (consumer iterate()) { return true; } } MessageDispatch message = messageQueue dequeueNoWait(); if (message == null) { return false; } else { dispatch(message); return !messageQueue isEmpty(); } } List<MessageDispatch> getUnconsumedMessages() { return messageQueue removeAll(); } }",1.0,
574,574,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQTopicSession.,ActiveMQTopicSession,"public class ActiveMQTopicSession implements TopicSession { private final TopicSession next; public ActiveMQTopicSession(TopicSession next) { this next = next; } public void close() throws JMSException { next close(); } public void commit() throws JMSException { next commit(); } public QueueBrowser createBrowser(Queue queue) throws JMSException { throw new IllegalStateException( Operation not supported by a TopicSession ); } public QueueBrowser createBrowser(Queue queue, String messageSelector) throws JMSException { throw new IllegalStateException( Operation not supported by a TopicSession ); } public BytesMessage createBytesMessage() throws JMSException { return next createBytesMessage(); } public MessageConsumer createConsumer(Destination destination) throws JMSException { if (destination instanceof Queue) { throw new InvalidDestinationException( Queues are not supported by a TopicSession ); } return next createConsumer(destination); } public MessageConsumer createConsumer(Destination destination, String messageSelector) throws JMSException { if (destination instanceof Queue) { throw new InvalidDestinationException( Queues are not supported by a TopicSession ); } return next createConsumer(destination, messageSelector); } public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean noLocal) throws JMSException { if (destination instanceof Queue) { throw new InvalidDestinationException( Queues are not supported by a TopicSession ); } return next createConsumer(destination, messageSelector, noLocal); } public TopicSubscriber createDurableSubscriber(Topic topic, String name) throws JMSException { return next createDurableSubscriber(topic, name); } public TopicSubscriber createDurableSubscriber(Topic topic, String name, String messageSelector, boolean noLocal) throws JMSException { return next createDurableSubscriber(topic, name, messageSelector, noLocal); } public MapMessage createMapMessage() throws JMSException { return next createMapMessage(); } public Message createMessage() throws JMSException { return next createMessage(); } public ObjectMessage createObjectMessage() throws JMSException { return next createObjectMessage(); } public ObjectMessage createObjectMessage(Serializable object) throws JMSException { return next createObjectMessage(object); } public MessageProducer createProducer(Destination destination) throws JMSException { if (destination instanceof Queue) { throw new InvalidDestinationException( Queues are not supported by a TopicSession ); } return next createProducer(destination); } public TopicPublisher createPublisher(Topic topic) throws JMSException { return next createPublisher(topic); } public Queue createQueue(String queueName) throws JMSException { throw new IllegalStateException( Operation not supported by a TopicSession ); } public StreamMessage createStreamMessage() throws JMSException { return next createStreamMessage(); } public TopicSubscriber createSubscriber(Topic topic) throws JMSException { return next createSubscriber(topic); } public TopicSubscriber createSubscriber(Topic topic, String messageSelector, boolean noLocal) throws JMSException { return next createSubscriber(topic, messageSelector, noLocal); } public TemporaryQueue createTemporaryQueue() throws JMSException { throw new IllegalStateException( Operation not supported by a TopicSession ); } public TemporaryTopic createTemporaryTopic() throws JMSException { return next createTemporaryTopic(); } public TextMessage createTextMessage() throws JMSException { return next createTextMessage(); } public TextMessage createTextMessage(String text) throws JMSException { return next createTextMessage(text); } public Topic createTopic(String topicName) throws JMSException { return next createTopic(topicName); } public boolean equals(Object arg0) { if(this != arg0) { return next equals(arg0); } return true; } public int getAcknowledgeMode() throws JMSException { return next getAcknowledgeMode(); } public MessageListener getMessageListener() throws JMSException { return next getMessageListener(); } public boolean getTransacted() throws JMSException { return next getTransacted(); } public int hashCode() { return next hashCode(); } public void recover() throws JMSException { next recover(); } public void rollback() throws JMSException { next rollback(); } public void run() { next run(); } public void setMessageListener(MessageListener listener) throws JMSException { next setMessageListener(listener); } public String toString() { return next toString(); } public void unsubscribe(String name) throws JMSException { next unsubscribe(name); } public TopicSession getNext() { return next; } }",1.0,
575,575,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQTopicSubscriber.,ActiveMQTopicSubscriber,"public class ActiveMQTopicSubscriber extends ActiveMQMessageConsumer implements TopicSubscriber { protected ActiveMQTopicSubscriber(ActiveMQSession theSession, ConsumerId consumerId, ActiveMQDestination dest, String name, String selector, int prefetch, int maximumPendingMessageCount, boolean noLocalValue, boolean browserValue, boolean asyncDispatch) throws JMSException { super(theSession, consumerId, dest, name, selector, prefetch, maximumPendingMessageCount, noLocalValue, browserValue, asyncDispatch, null); } public Topic getTopic() throws JMSException { checkClosed(); return (Topic) super getDestination(); } public boolean getNoLocal() throws JMSException { checkClosed(); return super isNoLocal(); } }",1.0,
576,576,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQXAConnection.,ActiveMQXAConnection,"public class ActiveMQXAConnection extends ActiveMQConnection implements XATopicConnection, XAQueueConnection, XAConnection { protected ActiveMQXAConnection(Transport transport, IdGenerator clientIdGenerator, IdGenerator connectionIdGenerator, JMSStatsImpl factoryStats) throws Exception { super(transport, clientIdGenerator, connectionIdGenerator, factoryStats); } public XASession createXASession() throws JMSException { return (XASession) createSession(true, Session SESSION TRANSACTED); } public XATopicSession createXATopicSession() throws JMSException { return (XATopicSession) createSession(true, Session SESSION TRANSACTED); } public XAQueueSession createXAQueueSession() throws JMSException { return (XAQueueSession) createSession(true, Session SESSION TRANSACTED); } public Session createSession(boolean transacted, int acknowledgeMode) throws JMSException { checkClosedOrFailed(); ensureConnectionInfoSent(); return new ActiveMQXASession(this, getNextSessionId(), Session SESSION TRANSACTED, isDispatchAsync()); } }",1.0,
578,578,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQXASession.,ActiveMQXASession,"public class ActiveMQXASession extends ActiveMQSession implements QueueSession, TopicSession, XAQueueSession, XATopicSession { public ActiveMQXASession(ActiveMQXAConnection connection, SessionId sessionId, int theAcknowlegeMode, boolean dispatchAsync) throws JMSException { super(connection, sessionId, theAcknowlegeMode, dispatchAsync); } public boolean getTransacted() throws JMSException { return getTransactionContext() isInXATransaction(); } public void rollback() throws JMSException { throw new TransactionInProgressException( Cannot rollback() inside an XASession ); } public void commit() throws JMSException { throw new TransactionInProgressException( Cannot commit() inside an XASession ); } public Session getSession() throws JMSException { return this; } public XAResource getXAResource() { return getTransactionContext(); } public QueueSession getQueueSession() throws JMSException { return new ActiveMQQueueSession(this); } public TopicSession getTopicSession() throws JMSException { return new ActiveMQTopicSession(this); } public boolean isAutoAcknowledge() { return true; } protected void doStartTransaction() throws JMSException { } }",1.0,
580,580,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\AlreadyClosedException.,AlreadyClosedException,"public class AlreadyClosedException extends JMSException { private static final long serialVersionUID = -3203104889571618702L; public AlreadyClosedException() { super( this connection ); } public AlreadyClosedException(String description) { super( Cannot use + description + as it has already been closed , AMQ-1001 ); } }",1.0,
581,581,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ConfigurationException.,ConfigurationException,"public class ConfigurationException extends JMSException { private static final long serialVersionUID = 5639082552451065258L; public ConfigurationException(String description) { super(description, AMQ-1002 ); } }",1.0,
583,583,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ConnectionClosedException.,ConnectionClosedException,"public class ConnectionClosedException extends IllegalStateException { private static final long serialVersionUID = -7681404582227153308L; public ConnectionClosedException() { super( The connection is already closed , AlreadyClosed ); } }",1.0,
584,584,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ConnectionFailedException.,ConnectionFailedException,public class ConnectionFailedException extends JMSException { private static final long serialVersionUID = 2288453203492073973L; public ConnectionFailedException(IOException cause) { super( The JMS connection has failed + extractMessage(cause)); initCause(cause); setLinkedException(cause); } public ConnectionFailedException() { super( The JMS connection has failed due to a Transport problem ); } private static String extractMessage(IOException cause) { String m = cause getMessage(); if (m == null || m length() == 0) { m = cause toString(); } return m; } },1.0,
585,585,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\DestinationDoesNotExistException.,DestinationDoesNotExistException,public class DestinationDoesNotExistException extends JMSException { public DestinationDoesNotExistException(String destination) { super(destination); } public boolean isTemporary() { return getMessage() startsWith( temp- ); } Override public String getLocalizedMessage() { return The destination + getMessage() + does not exist ; } },1.0,
586,586,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\FifoMessageDispatchChannel.,FifoMessageDispatchChannel,public class FifoMessageDispatchChannel implements MessageDispatchChannel { private final Object mutex = new Object(); private final LinkedList<MessageDispatch> list; private boolean closed; private boolean running; public FifoMessageDispatchChannel() { this list = new LinkedList<MessageDispatch>(); } public void enqueue(MessageDispatch message) { synchronized (mutex) { list addLast(message); mutex notify(); } } public void enqueueFirst(MessageDispatch message) { synchronized (mutex) { list addFirst(message); mutex notify(); } } public boolean isEmpty() { synchronized (mutex) { return list isEmpty(); } } public MessageDispatch dequeue(long timeout) throws InterruptedException { synchronized (mutex) { while (timeout != 0 && !closed && (list isEmpty() || !running)) { if (timeout == -1) { mutex wait(); } else { mutex wait(timeout); break; } } if (closed || !running || list isEmpty()) { return null; } return list removeFirst(); } } public MessageDispatch dequeueNoWait() { synchronized (mutex) { if (closed || !running || list isEmpty()) { return null; } return list removeFirst(); } } public MessageDispatch peek() { synchronized (mutex) { if (closed || !running || list isEmpty()) { return null; } return list getFirst(); } } public void start() { synchronized (mutex) { running = true; mutex notifyAll(); } } public void stop() { synchronized (mutex) { running = false; mutex notifyAll(); } } public void close() { synchronized (mutex) { if (!closed) { running = false; closed = true; } mutex notifyAll(); } } public void clear() { synchronized (mutex) { list clear(); } } public boolean isClosed() { return closed; } public int size() { synchronized (mutex) { return list size(); } } public Object getMutex() { return mutex; } public boolean isRunning() { return running; } public List<MessageDispatch> removeAll() { synchronized (mutex) { ArrayList<MessageDispatch> rc = new ArrayList<MessageDispatch>(list); list clear(); return rc; } } Override public String toString() { synchronized (mutex) { return list toString(); } } },1.0,
587,587,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\MessageTransformerSupport.,MessageTransformerSupport,"public abstract class MessageTransformerSupport implements MessageTransformer { protected void copyProperties(Message fromMessage, Message toMesage) throws JMSException { ActiveMQMessageTransformation copyProperties(fromMessage, toMesage); } }",1.0,
588,588,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\NotStartedException.,NotStartedException,"public class NotStartedException extends IllegalStateException { private static final long serialVersionUID = -4907909323529887659L; public NotStartedException() { super( IllegalState This service has not yet been started , AMQ-1003 ); } }",1.0,
589,589,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\RedeliveryPolicy.,RedeliveryPolicy,"public class RedeliveryPolicy extends DestinationMapEntry implements Cloneable, Serializable { public static final int NO MAXIMUM REDELIVERIES = -1; private static Random randomNumberGenerator; protected double collisionAvoidanceFactor = 0 15d; protected int maximumRedeliveries = 6; protected long maximumRedeliveryDelay = -1; protected long initialRedeliveryDelay = 1000L; protected boolean useCollisionAvoidance; protected boolean useExponentialBackOff; protected double backOffMultiplier = 5 0; protected long redeliveryDelay = initialRedeliveryDelay; public RedeliveryPolicy() { } public RedeliveryPolicy copy() { try { return (RedeliveryPolicy)clone(); } catch (CloneNotSupportedException e) { throw new RuntimeException( Could not clone + e, e); } } public double getBackOffMultiplier() { return backOffMultiplier; } public void setBackOffMultiplier(double backOffMultiplier) { this backOffMultiplier = backOffMultiplier; } public short getCollisionAvoidancePercent() { return (short)Math round(collisionAvoidanceFactor * 100); } public void setCollisionAvoidancePercent(short collisionAvoidancePercent) { this collisionAvoidanceFactor = collisionAvoidancePercent * 0 01d; } public long getInitialRedeliveryDelay() { return initialRedeliveryDelay; } public void setInitialRedeliveryDelay(long initialRedeliveryDelay) { this initialRedeliveryDelay = initialRedeliveryDelay; } public long getMaximumRedeliveryDelay() { return maximumRedeliveryDelay; } public void setMaximumRedeliveryDelay(long maximumRedeliveryDelay) { this maximumRedeliveryDelay = maximumRedeliveryDelay; } public int getMaximumRedeliveries() { return maximumRedeliveries; } public void setMaximumRedeliveries(int maximumRedeliveries) { this maximumRedeliveries = maximumRedeliveries; } public long getNextRedeliveryDelay(long previousDelay) { long nextDelay; if (previousDelay == 0) { nextDelay = redeliveryDelay; } else if (useExponentialBackOff && backOffMultiplier > 1) { nextDelay = (long) (previousDelay * backOffMultiplier); if(maximumRedeliveryDelay != -1 && nextDelay > maximumRedeliveryDelay) { nextDelay = Math max(maximumRedeliveryDelay, redeliveryDelay); } } else { nextDelay = previousDelay; } if (useCollisionAvoidance) { Random random = getRandomNumberGenerator(); double variance = (random nextBoolean() collisionAvoidanceFactor -collisionAvoidanceFactor) * random nextDouble(); nextDelay += nextDelay * variance; } return nextDelay; } public boolean isUseCollisionAvoidance() { return useCollisionAvoidance; } public void setUseCollisionAvoidance(boolean useCollisionAvoidance) { this useCollisionAvoidance = useCollisionAvoidance; } public boolean isUseExponentialBackOff() { return useExponentialBackOff; } public void setUseExponentialBackOff(boolean useExponentialBackOff) { this useExponentialBackOff = useExponentialBackOff; } protected static synchronized Random getRandomNumberGenerator() { if (randomNumberGenerator == null) { randomNumberGenerator = new Random(); } return randomNumberGenerator; } public void setRedeliveryDelay(long redeliveryDelay) { this redeliveryDelay = redeliveryDelay; } public long getRedeliveryDelay() { return redeliveryDelay; } Override public String toString() { return IntrospectionSupport toString(this, DestinationMapEntry class, null); } }",1.0,
590,590,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\SimplePriorityMessageDispatchChannel.,SimplePriorityMessageDispatchChannel,"public class SimplePriorityMessageDispatchChannel implements MessageDispatchChannel { private static final Integer MAX PRIORITY = 10; private final Object mutex = new Object(); private final LinkedList<MessageDispatch>[] lists; private boolean closed; private boolean running; private int size = 0; public SimplePriorityMessageDispatchChannel() { this lists = new LinkedList[MAX PRIORITY]; for (int i = 0; i < MAX PRIORITY; i++) { lists[i] = new LinkedList<MessageDispatch>(); } } public void enqueue(MessageDispatch message) { synchronized (mutex) { getList(message) addLast(message); this size++; mutex notify(); } } public void enqueueFirst(MessageDispatch message) { synchronized (mutex) { getList(message) addFirst(message); this size++; mutex notify(); } } public boolean isEmpty() { return this size == 0; } public MessageDispatch dequeue(long timeout) throws InterruptedException { synchronized (mutex) { while (timeout != 0 && !closed && (isEmpty() || !running)) { if (timeout == -1) { mutex wait(); } else { mutex wait(timeout); break; } } if (closed || !running || isEmpty()) { return null; } return removeFirst(); } } public MessageDispatch dequeueNoWait() { synchronized (mutex) { if (closed || !running || isEmpty()) { return null; } return removeFirst(); } } public MessageDispatch peek() { synchronized (mutex) { if (closed || !running || isEmpty()) { return null; } return getFirst(); } } public void start() { synchronized (mutex) { running = true; mutex notifyAll(); } } public void stop() { synchronized (mutex) { running = false; mutex notifyAll(); } } public void close() { synchronized (mutex) { if (!closed) { running = false; closed = true; } mutex notifyAll(); } } public void clear() { synchronized (mutex) { for (int i = 0; i < MAX PRIORITY; i++) { lists[i] clear(); } } } public boolean isClosed() { return closed; } public int size() { synchronized (mutex) { return this size; } } public Object getMutex() { return mutex; } public boolean isRunning() { return running; } public List<MessageDispatch> removeAll() { synchronized (mutex) { ArrayList<MessageDispatch> result = new ArrayList<MessageDispatch>(size()); for (int i = MAX PRIORITY - 1; i >= 0; i--) { List<MessageDispatch> list = lists[i]; result addAll(list); size -= list size(); list clear(); } return result; } } Override public String toString() { String result = ; for (int i = MAX PRIORITY - 1; i >= 0; i--) { result += i + { + lists[i] toString() + } ; } return result; } protected int getPriority(MessageDispatch message) { int priority = javax jms Message DEFAULT PRIORITY; if (message getMessage() != null) { priority = Math max(message getMessage() getPriority(), 0); priority = Math min(priority, 9); } return priority; } protected LinkedList<MessageDispatch> getList(MessageDispatch md) { return lists[getPriority(md)]; } private final MessageDispatch removeFirst() { if (this size > 0) { for (int i = MAX PRIORITY - 1; i >= 0; i--) { LinkedList<MessageDispatch> list = lists[i]; if (!list isEmpty()) { this size--; return list removeFirst(); } } } return null; } private final MessageDispatch getFirst() { if (this size > 0) { for (int i = MAX PRIORITY - 1; i >= 0; i--) { LinkedList<MessageDispatch> list = lists[i]; if (!list isEmpty()) { return list getFirst(); } } } return null; } }",1.0,
591,591,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\TransactionContext.,TransactionContext,"public class TransactionContext implements XAResource { private static final Logger LOG = LoggerFactory getLogger(TransactionContext class); private final static HashMap<TransactionId, List<TransactionContext>> ENDED XA TRANSACTION CONTEXTS = new HashMap<TransactionId, List<TransactionContext>>(); private final ActiveMQConnection connection; private final LongSequenceGenerator localTransactionIdGenerator; private final ConnectionId connectionId; private List<Synchronization> synchronizations; private Xid associatedXid; private TransactionId transactionId; private LocalTransactionEventListener localTransactionEventListener; private int beforeEndIndex; public TransactionContext(ActiveMQConnection connection) { this connection = connection; this localTransactionIdGenerator = connection getLocalTransactionIdGenerator(); this connectionId = connection getConnectionInfo() getConnectionId(); } public boolean isInXATransaction() { if (transactionId != null && transactionId isXATransaction()) { return true; } else { if (!ENDED XA TRANSACTION CONTEXTS isEmpty()) { synchronized(ENDED XA TRANSACTION CONTEXTS) { for(List<TransactionContext> transactions ENDED XA TRANSACTION CONTEXTS values()) { if (transactions contains(this)) { return true; } } } } } return false; } public boolean isInLocalTransaction() { return transactionId != null && transactionId isLocalTransaction(); } public boolean isInTransaction() { return transactionId != null; } public LocalTransactionEventListener getLocalTransactionEventListener() { return localTransactionEventListener; } public void setLocalTransactionEventListener(LocalTransactionEventListener localTransactionEventListener) { this localTransactionEventListener = localTransactionEventListener; } public void addSynchronization(Synchronization s) { if (synchronizations == null) { synchronizations = new ArrayList<Synchronization>(10); } synchronizations add(s); } private void afterRollback() throws JMSException { if (synchronizations == null) { return; } Throwable firstException = null; int size = synchronizations size(); for (int i = 0; i < size; i++) { try { synchronizations get(i) afterRollback(); } catch (Throwable t) { LOG debug( Exception from afterRollback on + synchronizations get(i), t); if (firstException == null) { firstException = t; } } } synchronizations = null; if (firstException != null) { throw JMSExceptionSupport create(firstException); } } private void afterCommit() throws JMSException { if (synchronizations == null) { return; } Throwable firstException = null; int size = synchronizations size(); for (int i = 0; i < size; i++) { try { synchronizations get(i) afterCommit(); } catch (Throwable t) { LOG debug( Exception from afterCommit on + synchronizations get(i), t); if (firstException == null) { firstException = t; } } } synchronizations = null; if (firstException != null) { throw JMSExceptionSupport create(firstException); } } private void beforeEnd() throws JMSException { if (synchronizations == null) { return; } int size = synchronizations size(); try { for (;beforeEndIndex < size;) { synchronizations get(beforeEndIndex++) beforeEnd(); } } catch (JMSException e) { throw e; } catch (Throwable e) { throw JMSExceptionSupport create(e); } } public TransactionId getTransactionId() { return transactionId; } public void begin() throws JMSException { if (isInXATransaction()) { throw new TransactionInProgressException( Cannot start local transaction XA transaction is already in progress ); } if (transactionId == null) { synchronizations = null; beforeEndIndex = 0; this transactionId = new LocalTransactionId(connectionId, localTransactionIdGenerator getNextSequenceId()); TransactionInfo info = new TransactionInfo(getConnectionId(), transactionId, TransactionInfo BEGIN); this connection ensureConnectionInfoSent(); this connection asyncSendPacket(info); if (localTransactionEventListener != null) { localTransactionEventListener beginEvent(); } if (LOG isDebugEnabled()) { LOG debug( Begin + transactionId); } } } public void rollback() throws JMSException { if (isInXATransaction()) { throw new TransactionInProgressException( Cannot rollback() if an XA transaction is already in progress ); } try { beforeEnd(); } catch (TransactionRolledBackException canOcurrOnFailover) { LOG warn( rollback processing error , canOcurrOnFailover); } if (transactionId != null) { if (LOG isDebugEnabled()) { LOG debug( Rollback + transactionId + syncCount + (synchronizations != null synchronizations size() 0)); } TransactionInfo info = new TransactionInfo(getConnectionId(), transactionId, TransactionInfo ROLLBACK); this transactionId = null; this connection syncSendPacket(info); if (localTransactionEventListener != null) { localTransactionEventListener rollbackEvent(); } } afterRollback(); } public void commit() throws JMSException { if (isInXATransaction()) { throw new TransactionInProgressException( Cannot commit() if an XA transaction is already in progress ); } try { beforeEnd(); } catch (JMSException e) { rollback(); throw e; } if (transactionId != null) { if (LOG isDebugEnabled()) { LOG debug( Commit + transactionId + syncCount + (synchronizations != null synchronizations size() 0)); } TransactionInfo info = new TransactionInfo(getConnectionId(), transactionId, TransactionInfo COMMIT ONE PHASE); this transactionId = null; try { syncSendPacketWithInterruptionHandling(info); if (localTransactionEventListener != null) { localTransactionEventListener commitEvent(); } afterCommit(); } catch (JMSException cause) { LOG info( commit failed for transaction + info getTransactionId(), cause); if (localTransactionEventListener != null) { localTransactionEventListener rollbackEvent(); } afterRollback(); throw cause; } } } public void start(Xid xid, int flags) throws XAException { if (LOG isDebugEnabled()) { LOG debug( Start + xid); } if (isInLocalTransaction()) { throw new XAException(XAException XAER PROTO); } if (associatedXid != null) { throw new XAException(XAException XAER PROTO); } synchronizations = null; beforeEndIndex = 0; setXid(xid); } private ConnectionId getConnectionId() { return connection getConnectionInfo() getConnectionId(); } public void end(Xid xid, int flags) throws XAException { if (LOG isDebugEnabled()) { LOG debug( End + xid); } if (isInLocalTransaction()) { throw new XAException(XAException XAER PROTO); } if ((flags & (TMSUSPEND | TMFAIL)) != 0) { if (!equals(associatedXid, xid)) { throw new XAException(XAException XAER PROTO); } try { beforeEnd(); } catch (JMSException e) { throw toXAException(e); } setXid(null); } else if ((flags & TMSUCCESS) == TMSUCCESS) { if (equals(associatedXid, xid)) { try { beforeEnd(); } catch (JMSException e) { throw toXAException(e); } setXid(null); } } else { throw new XAException(XAException XAER INVAL); } } private boolean equals(Xid xid1, Xid xid2) { if (xid1 == xid2) { return true; } if (xid1 == null ^ xid2 == null) { return false; } return xid1 getFormatId() == xid2 getFormatId() && Arrays equals(xid1 getBranchQualifier(), xid2 getBranchQualifier()) && Arrays equals(xid1 getGlobalTransactionId(), xid2 getGlobalTransactionId()); } public int prepare(Xid xid) throws XAException { if (LOG isDebugEnabled()) { LOG debug( Prepare + xid); } XATransactionId x; if (xid == null || (equals(associatedXid, xid))) { throw new XAException(XAException XAER PROTO); } else { x = new XATransactionId(xid); } try { TransactionInfo info = new TransactionInfo(getConnectionId(), x, TransactionInfo PREPARE); IntegerResponse response = (IntegerResponse)syncSendPacketWithInterruptionHandling(info); if (XAResource XA RDONLY == response getResult()) { synchronized(ENDED XA TRANSACTION CONTEXTS) { List<TransactionContext> l = ENDED XA TRANSACTION CONTEXTS remove(x); if (l != null && !l isEmpty()) { if (LOG isDebugEnabled()) { LOG debug( firing afterCommit callbacks on XA RDONLY from prepare + xid); } for (TransactionContext ctx l) { ctx afterCommit(); } } } } return response getResult(); } catch (JMSException e) { LOG warn( prepare of + x + failed with + e, e); synchronized(ENDED XA TRANSACTION CONTEXTS) { List<TransactionContext> l = ENDED XA TRANSACTION CONTEXTS remove(x); if (l != null && !l isEmpty()) { for (TransactionContext ctx l) { try { ctx afterRollback(); } catch (Throwable ignored) { if (LOG isDebugEnabled()) { LOG debug( failed to firing afterRollback callbacks on prepare failure, txid + x + , context + ctx, ignored); } } } } } throw toXAException(e); } } public void rollback(Xid xid) throws XAException { if (LOG isDebugEnabled()) { LOG debug( Rollback + xid); } XATransactionId x; if (xid == null) { throw new XAException(XAException XAER PROTO); } if (equals(associatedXid, xid)) { x = (XATransactionId)transactionId; } else { x = new XATransactionId(xid); } try { this connection checkClosedOrFailed(); this connection ensureConnectionInfoSent(); TransactionInfo info = new TransactionInfo(getConnectionId(), x, TransactionInfo ROLLBACK); syncSendPacketWithInterruptionHandling(info); synchronized(ENDED XA TRANSACTION CONTEXTS) { List<TransactionContext> l = ENDED XA TRANSACTION CONTEXTS remove(x); if (l != null && !l isEmpty()) { for (TransactionContext ctx l) { ctx afterRollback(); } } } } catch (JMSException e) { throw toXAException(e); } } public void commit(Xid xid, boolean onePhase) throws XAException { if (LOG isDebugEnabled()) { LOG debug( Commit + xid + , onePhase= + onePhase); } XATransactionId x; if (xid == null || (equals(associatedXid, xid))) { throw new XAException(XAException XAER PROTO); } else { x = new XATransactionId(xid); } try { this connection checkClosedOrFailed(); this connection ensureConnectionInfoSent(); TransactionInfo info = new TransactionInfo(getConnectionId(), x, onePhase TransactionInfo COMMIT ONE PHASE TransactionInfo COMMIT TWO PHASE); syncSendPacketWithInterruptionHandling(info); synchronized(ENDED XA TRANSACTION CONTEXTS) { List<TransactionContext> l = ENDED XA TRANSACTION CONTEXTS remove(x); if (l != null && !l isEmpty()) { for (TransactionContext ctx l) { try { ctx afterCommit(); } catch (Exception ignored) { LOG debug( ignoring exception from after completion on ended transaction + ignored, ignored); } } } } } catch (JMSException e) { LOG warn( commit of + x + failed with + e, e); if (onePhase) { synchronized(ENDED XA TRANSACTION CONTEXTS) { List<TransactionContext> l = ENDED XA TRANSACTION CONTEXTS remove(x); if (l != null && !l isEmpty()) { for (TransactionContext ctx l) { try { ctx afterRollback(); } catch (Throwable ignored) { if (LOG isDebugEnabled()) { LOG debug( failed to firing afterRollback callbacks commit failure, txid + x + , context + ctx, ignored); } } } } } } throw toXAException(e); } } public void forget(Xid xid) throws XAException { if (LOG isDebugEnabled()) { LOG debug( Forget + xid); } XATransactionId x; if (xid == null) { throw new XAException(XAException XAER PROTO); } if (equals(associatedXid, xid)) { x = (XATransactionId)transactionId; } else { x = new XATransactionId(xid); } TransactionInfo info = new TransactionInfo(getConnectionId(), x, TransactionInfo FORGET); try { syncSendPacketWithInterruptionHandling(info); } catch (JMSException e) { throw toXAException(e); } synchronized(ENDED XA TRANSACTION CONTEXTS) { ENDED XA TRANSACTION CONTEXTS remove(x); } } public boolean isSameRM(XAResource xaResource) throws XAException { if (xaResource == null) { return false; } if (!(xaResource instanceof TransactionContext)) { return false; } TransactionContext xar = (TransactionContext)xaResource; try { return getResourceManagerId() equals(xar getResourceManagerId()); } catch (Throwable e) { throw (XAException)new XAException( Could not get resource manager id ) initCause(e); } } public Xid[] recover(int flag) throws XAException { if (LOG isDebugEnabled()) { LOG debug( Recover + flag); } TransactionInfo info = new TransactionInfo(getConnectionId(), null, TransactionInfo RECOVER); try { this connection checkClosedOrFailed(); this connection ensureConnectionInfoSent(); DataArrayResponse receipt = (DataArrayResponse)this connection syncSendPacket(info); DataStructure[] data = receipt getData(); XATransactionId[] answer; if (data instanceof XATransactionId[]) { answer = (XATransactionId[])data; } else { answer = new XATransactionId[data length]; System arraycopy(data, 0, answer, 0, data length); } return answer; } catch (JMSException e) { throw toXAException(e); } } public int getTransactionTimeout() throws XAException { return 0; } public boolean setTransactionTimeout(int seconds) throws XAException { return false; } private String getResourceManagerId() throws JMSException { return this connection getResourceManagerId(); } private void setXid(Xid xid) throws XAException { try { this connection checkClosedOrFailed(); this connection ensureConnectionInfoSent(); } catch (JMSException e) { throw toXAException(e); } if (xid != null) { associatedXid = xid; transactionId = new XATransactionId(xid); TransactionInfo info = new TransactionInfo(connectionId, transactionId, TransactionInfo BEGIN); try { this connection asyncSendPacket(info); if (LOG isDebugEnabled()) { LOG debug( Started XA transaction + transactionId); } } catch (JMSException e) { throw toXAException(e); } } else { if (transactionId != null) { TransactionInfo info = new TransactionInfo(connectionId, transactionId, TransactionInfo END); try { syncSendPacketWithInterruptionHandling(info); if (LOG isDebugEnabled()) { LOG debug( Ended XA transaction + transactionId); } } catch (JMSException e) { throw toXAException(e); } synchronized(ENDED XA TRANSACTION CONTEXTS) { List<TransactionContext> l = ENDED XA TRANSACTION CONTEXTS get(transactionId); if (l == null) { l = new ArrayList<TransactionContext>(3); ENDED XA TRANSACTION CONTEXTS put(transactionId, l); l add(this); } else if (!l contains(this)) { l add(this); } } } associatedXid = null; transactionId = null; } } private Response syncSendPacketWithInterruptionHandling(Command command) throws JMSException { try { return this connection syncSendPacket(command); } catch (JMSException e) { if (e getLinkedException() instanceof InterruptedIOException) { try { Thread interrupted(); return this connection syncSendPacket(command); } finally { Thread currentThread() interrupt(); } } throw e; } } private XAException toXAException(JMSException e) { if (e getCause() != null && e getCause() instanceof XAException) { XAException original = (XAException)e getCause(); XAException xae = new XAException(original getMessage()); xae errorCode = original errorCode; xae initCause(original); return xae; } XAException xae = new XAException(e getMessage()); xae errorCode = XAException XAER RMFAIL; xae initCause(e); return xae; } public ActiveMQConnection getConnection() { return connection; } public void cleanup() { associatedXid = null; transactionId = null; } Override public String toString() { return TransactionContext{ + transactionId= + transactionId + } ; } }",1.0,
593,593,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\AdvisorySupport.,AdvisorySupport,"public final class AdvisorySupport { public static final String ADVISORY TOPIC PREFIX = ActiveMQ Advisory ; public static final ActiveMQTopic CONNECTION ADVISORY TOPIC = new ActiveMQTopic(ADVISORY TOPIC PREFIX + Connection ); public static final ActiveMQTopic QUEUE ADVISORY TOPIC = new ActiveMQTopic(ADVISORY TOPIC PREFIX + Queue ); public static final ActiveMQTopic TOPIC ADVISORY TOPIC = new ActiveMQTopic(ADVISORY TOPIC PREFIX + Topic ); public static final ActiveMQTopic TEMP QUEUE ADVISORY TOPIC = new ActiveMQTopic(ADVISORY TOPIC PREFIX + TempQueue ); public static final ActiveMQTopic TEMP TOPIC ADVISORY TOPIC = new ActiveMQTopic(ADVISORY TOPIC PREFIX + TempTopic ); public static final String PRODUCER ADVISORY TOPIC PREFIX = ADVISORY TOPIC PREFIX + Producer ; public static final String QUEUE PRODUCER ADVISORY TOPIC PREFIX = PRODUCER ADVISORY TOPIC PREFIX + Queue ; public static final String TOPIC PRODUCER ADVISORY TOPIC PREFIX = PRODUCER ADVISORY TOPIC PREFIX + Topic ; public static final String CONSUMER ADVISORY TOPIC PREFIX = ADVISORY TOPIC PREFIX + Consumer ; public static final String QUEUE CONSUMER ADVISORY TOPIC PREFIX = CONSUMER ADVISORY TOPIC PREFIX + Queue ; public static final String TOPIC CONSUMER ADVISORY TOPIC PREFIX = CONSUMER ADVISORY TOPIC PREFIX + Topic ; public static final String EXPIRED TOPIC MESSAGES TOPIC PREFIX = ADVISORY TOPIC PREFIX + Expired Topic ; public static final String EXPIRED QUEUE MESSAGES TOPIC PREFIX = ADVISORY TOPIC PREFIX + Expired Queue ; public static final String NO TOPIC CONSUMERS TOPIC PREFIX = ADVISORY TOPIC PREFIX + NoConsumer Topic ; public static final String NO QUEUE CONSUMERS TOPIC PREFIX = ADVISORY TOPIC PREFIX + NoConsumer Queue ; public static final String SLOW CONSUMER TOPIC PREFIX = ADVISORY TOPIC PREFIX + SlowConsumer ; public static final String FAST PRODUCER TOPIC PREFIX = ADVISORY TOPIC PREFIX + FastProducer ; public static final String MESSAGE DISCAREDED TOPIC PREFIX = ADVISORY TOPIC PREFIX + MessageDiscarded ; public static final String FULL TOPIC PREFIX = ADVISORY TOPIC PREFIX + FULL ; public static final String MESSAGE DELIVERED TOPIC PREFIX = ADVISORY TOPIC PREFIX + MessageDelivered ; public static final String MESSAGE CONSUMED TOPIC PREFIX = ADVISORY TOPIC PREFIX + MessageConsumed ; public static final String MESSAGE DLQ TOPIC PREFIX = ADVISORY TOPIC PREFIX + MessageDLQd ; public static final String MASTER BROKER TOPIC PREFIX = ADVISORY TOPIC PREFIX + MasterBroker ; public static final String NETWORK BRIDGE TOPIC PREFIX = ADVISORY TOPIC PREFIX + NetworkBridge ; public static final String NETWORK BRIDGE FORWARD FAILURE TOPIC PREFIX = NETWORK BRIDGE TOPIC PREFIX + ForwardFailure ; public static final String AGENT TOPIC = ActiveMQ Agent ; public static final String ADIVSORY MESSAGE TYPE = Advisory ; public static final String MSG PROPERTY ORIGIN BROKER ID = originBrokerId ; public static final String MSG PROPERTY ORIGIN BROKER NAME = originBrokerName ; public static final String MSG PROPERTY ORIGIN BROKER URL = originBrokerURL ; public static final String MSG PROPERTY USAGE NAME = usageName ; public static final String MSG PROPERTY CONSUMER ID = consumerId ; public static final String MSG PROPERTY PRODUCER ID = producerId ; public static final String MSG PROPERTY MESSAGE ID = orignalMessageId ; public static final String MSG PROPERTY CONSUMER COUNT = consumerCount ; public static final String MSG PROPERTY DISCARDED COUNT = discardedCount ; public static final ActiveMQTopic ALL DESTINATIONS COMPOSITE ADVISORY TOPIC = new ActiveMQTopic( TOPIC ADVISORY TOPIC getPhysicalName() + , + QUEUE ADVISORY TOPIC getPhysicalName() + , + TEMP QUEUE ADVISORY TOPIC getPhysicalName() + , + TEMP TOPIC ADVISORY TOPIC getPhysicalName()); public static final ActiveMQTopic TEMP DESTINATION COMPOSITE ADVISORY TOPIC = new ActiveMQTopic( TEMP QUEUE ADVISORY TOPIC getPhysicalName() + , + TEMP TOPIC ADVISORY TOPIC getPhysicalName()); private static final ActiveMQTopic AGENT TOPIC DESTINATION = new ActiveMQTopic(AGENT TOPIC); private AdvisorySupport() { } public static ActiveMQTopic getConnectionAdvisoryTopic() { return CONNECTION ADVISORY TOPIC; } public static ActiveMQTopic[] getAllDestinationAdvisoryTopics(Destination destination) throws JMSException { return getAllDestinationAdvisoryTopics(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic[] getAllDestinationAdvisoryTopics(ActiveMQDestination destination) throws JMSException { ArrayList<ActiveMQTopic> result = new ArrayList<ActiveMQTopic>(); result add(getConsumerAdvisoryTopic(destination)); result add(getProducerAdvisoryTopic(destination)); result add(getExpiredMessageTopic(destination)); result add(getNoConsumersAdvisoryTopic(destination)); result add(getSlowConsumerAdvisoryTopic(destination)); result add(getFastProducerAdvisoryTopic(destination)); result add(getMessageDiscardedAdvisoryTopic(destination)); result add(getMessageDeliveredAdvisoryTopic(destination)); result add(getMessageConsumedAdvisoryTopic(destination)); result add(getMessageDLQdAdvisoryTopic(destination)); result add(getFullAdvisoryTopic(destination)); return result toArray(new ActiveMQTopic[0]); } public static ActiveMQTopic getConsumerAdvisoryTopic(Destination destination) throws JMSException { return getConsumerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getConsumerAdvisoryTopic(ActiveMQDestination destination) { if (destination isQueue()) { return new ActiveMQTopic(QUEUE CONSUMER ADVISORY TOPIC PREFIX + destination getPhysicalName()); } else { return new ActiveMQTopic(TOPIC CONSUMER ADVISORY TOPIC PREFIX + destination getPhysicalName()); } } public static ActiveMQTopic getProducerAdvisoryTopic(Destination destination) throws JMSException { return getProducerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getProducerAdvisoryTopic(ActiveMQDestination destination) { if (destination isQueue()) { return new ActiveMQTopic(QUEUE PRODUCER ADVISORY TOPIC PREFIX + destination getPhysicalName()); } else { return new ActiveMQTopic(TOPIC PRODUCER ADVISORY TOPIC PREFIX + destination getPhysicalName()); } } public static ActiveMQTopic getExpiredMessageTopic(Destination destination) throws JMSException { return getExpiredMessageTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getExpiredMessageTopic(ActiveMQDestination destination) { if (destination isQueue()) { return getExpiredQueueMessageAdvisoryTopic(destination); } return getExpiredTopicMessageAdvisoryTopic(destination); } public static ActiveMQTopic getExpiredTopicMessageAdvisoryTopic(ActiveMQDestination destination) { String name = EXPIRED TOPIC MESSAGES TOPIC PREFIX + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getExpiredQueueMessageAdvisoryTopic(Destination destination) throws JMSException { return getExpiredQueueMessageAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getExpiredQueueMessageAdvisoryTopic(ActiveMQDestination destination) { String name = EXPIRED QUEUE MESSAGES TOPIC PREFIX + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getNoConsumersAdvisoryTopic(Destination destination) throws JMSException { return getExpiredMessageTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getNoConsumersAdvisoryTopic(ActiveMQDestination destination) { if (destination isQueue()) { return getNoQueueConsumersAdvisoryTopic(destination); } return getNoTopicConsumersAdvisoryTopic(destination); } public static ActiveMQTopic getNoTopicConsumersAdvisoryTopic(Destination destination) throws JMSException { return getNoTopicConsumersAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getNoTopicConsumersAdvisoryTopic(ActiveMQDestination destination) { String name = NO TOPIC CONSUMERS TOPIC PREFIX + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getNoQueueConsumersAdvisoryTopic(Destination destination) throws JMSException { return getNoQueueConsumersAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getNoQueueConsumersAdvisoryTopic(ActiveMQDestination destination) { String name = NO QUEUE CONSUMERS TOPIC PREFIX + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getSlowConsumerAdvisoryTopic(Destination destination) throws JMSException { return getSlowConsumerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getSlowConsumerAdvisoryTopic(ActiveMQDestination destination) { String name = SLOW CONSUMER TOPIC PREFIX + destination getDestinationTypeAsString() + + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getFastProducerAdvisoryTopic(Destination destination) throws JMSException { return getFastProducerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getFastProducerAdvisoryTopic(ActiveMQDestination destination) { String name = FAST PRODUCER TOPIC PREFIX + destination getDestinationTypeAsString() + + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getMessageDiscardedAdvisoryTopic(Destination destination) throws JMSException { return getMessageDiscardedAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getMessageDiscardedAdvisoryTopic(ActiveMQDestination destination) { String name = MESSAGE DISCAREDED TOPIC PREFIX + destination getDestinationTypeAsString() + + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getMessageDeliveredAdvisoryTopic(Destination destination) throws JMSException { return getMessageDeliveredAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getMessageDeliveredAdvisoryTopic(ActiveMQDestination destination) { String name = MESSAGE DELIVERED TOPIC PREFIX + destination getDestinationTypeAsString() + + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getMessageConsumedAdvisoryTopic(Destination destination) throws JMSException { return getMessageConsumedAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getMessageConsumedAdvisoryTopic(ActiveMQDestination destination) { String name = MESSAGE CONSUMED TOPIC PREFIX + destination getDestinationTypeAsString() + + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getMessageDLQdAdvisoryTopic(ActiveMQDestination destination) { String name = MESSAGE DLQ TOPIC PREFIX + destination getDestinationTypeAsString() + + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getMasterBrokerAdvisoryTopic() { return new ActiveMQTopic(MASTER BROKER TOPIC PREFIX); } public static ActiveMQTopic getNetworkBridgeAdvisoryTopic() { return new ActiveMQTopic(NETWORK BRIDGE TOPIC PREFIX); } public static ActiveMQTopic getFullAdvisoryTopic(Destination destination) throws JMSException { return getFullAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getFullAdvisoryTopic(ActiveMQDestination destination) { String name = FULL TOPIC PREFIX + destination getDestinationTypeAsString() + + destination getPhysicalName(); return new ActiveMQTopic(name); } public static ActiveMQTopic getDestinationAdvisoryTopic(Destination destination) throws JMSException { return getDestinationAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static ActiveMQTopic getDestinationAdvisoryTopic(ActiveMQDestination destination) { switch (destination getDestinationType()) { case ActiveMQDestination QUEUE TYPE return QUEUE ADVISORY TOPIC; case ActiveMQDestination TOPIC TYPE return TOPIC ADVISORY TOPIC; case ActiveMQDestination TEMP QUEUE TYPE return TEMP QUEUE ADVISORY TOPIC; case ActiveMQDestination TEMP TOPIC TYPE return TEMP TOPIC ADVISORY TOPIC; default throw new RuntimeException( Unknown destination type + destination getDestinationType()); } } public static boolean isDestinationAdvisoryTopic(Destination destination) throws JMSException { return isDestinationAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isTempDestinationAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (!isTempDestinationAdvisoryTopic(compositeDestinations[i])) { return false; } } return true; } else { return destination equals(TEMP QUEUE ADVISORY TOPIC) || destination equals(TEMP TOPIC ADVISORY TOPIC); } } public static boolean isDestinationAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isDestinationAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination equals(TEMP QUEUE ADVISORY TOPIC) || destination equals(TEMP TOPIC ADVISORY TOPIC) || destination equals(QUEUE ADVISORY TOPIC) || destination equals(TOPIC ADVISORY TOPIC); } } public static boolean isAdvisoryTopic(Destination destination) throws JMSException { return isAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isAdvisoryTopic(ActiveMQDestination destination) { if (destination != null) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(ADVISORY TOPIC PREFIX); } } return false; } public static boolean isConnectionAdvisoryTopic(Destination destination) throws JMSException { return isConnectionAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isConnectionAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isConnectionAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination equals(CONNECTION ADVISORY TOPIC); } } public static boolean isProducerAdvisoryTopic(Destination destination) throws JMSException { return isProducerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isProducerAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isProducerAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(PRODUCER ADVISORY TOPIC PREFIX); } } public static boolean isConsumerAdvisoryTopic(Destination destination) throws JMSException { return isConsumerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isConsumerAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isConsumerAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(CONSUMER ADVISORY TOPIC PREFIX); } } public static boolean isSlowConsumerAdvisoryTopic(Destination destination) throws JMSException { return isSlowConsumerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isSlowConsumerAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isSlowConsumerAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(SLOW CONSUMER TOPIC PREFIX); } } public static boolean isFastProducerAdvisoryTopic(Destination destination) throws JMSException { return isFastProducerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isFastProducerAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isFastProducerAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(FAST PRODUCER TOPIC PREFIX); } } public static boolean isMessageConsumedAdvisoryTopic(Destination destination) throws JMSException { return isMessageConsumedAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isMessageConsumedAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isMessageConsumedAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(MESSAGE CONSUMED TOPIC PREFIX); } } public static boolean isMasterBrokerAdvisoryTopic(Destination destination) throws JMSException { return isMasterBrokerAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isMasterBrokerAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isMasterBrokerAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(MASTER BROKER TOPIC PREFIX); } } public static boolean isMessageDeliveredAdvisoryTopic(Destination destination) throws JMSException { return isMessageDeliveredAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isMessageDeliveredAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isMessageDeliveredAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(MESSAGE DELIVERED TOPIC PREFIX); } } public static boolean isMessageDiscardedAdvisoryTopic(Destination destination) throws JMSException { return isMessageDiscardedAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isMessageDiscardedAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isMessageDiscardedAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(MESSAGE DISCAREDED TOPIC PREFIX); } } public static boolean isFullAdvisoryTopic(Destination destination) throws JMSException { return isFullAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isFullAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isFullAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(FULL TOPIC PREFIX); } } public static boolean isNetworkBridgeAdvisoryTopic(Destination destination) throws JMSException { return isNetworkBridgeAdvisoryTopic(ActiveMQMessageTransformation transformDestination(destination)); } public static boolean isNetworkBridgeAdvisoryTopic(ActiveMQDestination destination) { if (destination isComposite()) { ActiveMQDestination[] compositeDestinations = destination getCompositeDestinations(); for (int i = 0; i < compositeDestinations length; i++) { if (isNetworkBridgeAdvisoryTopic(compositeDestinations[i])) { return true; } } return false; } else { return destination isTopic() && destination getPhysicalName() startsWith(NETWORK BRIDGE TOPIC PREFIX); } } public static Destination getAgentDestination() { return AGENT TOPIC DESTINATION; } public static ActiveMQTopic getNetworkBridgeForwardFailureAdvisoryTopic() { return new ActiveMQTopic(NETWORK BRIDGE FORWARD FAILURE TOPIC PREFIX); } }",1.0,
594,594,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\ConsumerEvent.,ConsumerEvent,"public abstract class ConsumerEvent extends EventObject { private static final long serialVersionUID = 2442156576867593780L; private final Destination destination; private final ConsumerId consumerId; private final int consumerCount; public ConsumerEvent(ConsumerEventSource source, Destination destination, ConsumerId consumerId, int consumerCount) { super(source); this destination = destination; this consumerId = consumerId; this consumerCount = consumerCount; } public ConsumerEventSource getAdvisor() { return (ConsumerEventSource) getSource(); } public Destination getDestination() { return destination; } public int getConsumerCount() { return consumerCount; } public ConsumerId getConsumerId() { return consumerId; } public abstract boolean isStarted(); }",1.0,
596,596,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\ConsumerStartedEvent.,ConsumerStartedEvent,"public class ConsumerStartedEvent extends ConsumerEvent { private static final long serialVersionUID = 5088138839609391074L; private final transient ConsumerInfo consumerInfo; public ConsumerStartedEvent(ConsumerEventSource source, ActiveMQDestination destination, ConsumerInfo consumerInfo, int count) { super(source, destination, consumerInfo getConsumerId(), count); this consumerInfo = consumerInfo; } public boolean isStarted() { return true; } public ConsumerInfo getConsumerInfo() { return consumerInfo; } }",1.0,
597,597,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\ConsumerStoppedEvent.,ConsumerStoppedEvent,"public class ConsumerStoppedEvent extends ConsumerEvent { private static final long serialVersionUID = 5378835541037193206L; public ConsumerStoppedEvent(ConsumerEventSource source, ActiveMQDestination destination, ConsumerId consumerId, int count) { super(source, destination, consumerId, count); } public boolean isStarted() { return false; } }",1.0,
598,598,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\DestinationEvent.,DestinationEvent,"public class DestinationEvent extends EventObject { private static final long serialVersionUID = 2442156576867593780L; private DestinationInfo destinationInfo; public DestinationEvent(DestinationSource source, DestinationInfo destinationInfo) { super(source); this destinationInfo = destinationInfo; } public ActiveMQDestination getDestination() { return getDestinationInfo() getDestination(); } public boolean isAddOperation() { return getDestinationInfo() isAddOperation(); } public long getTimeout() { return getDestinationInfo() getTimeout(); } public boolean isRemoveOperation() { return getDestinationInfo() isRemoveOperation(); } public DestinationInfo getDestinationInfo() { return destinationInfo; } }",1.0,
599,599,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\DestinationSource.,DestinationSource,"public class DestinationSource implements MessageListener { private static final Logger LOG = LoggerFactory getLogger(ConsumerEventSource class); private AtomicBoolean started = new AtomicBoolean(false); private final Connection connection; private Session session; private MessageConsumer queueConsumer; private MessageConsumer topicConsumer; private MessageConsumer tempTopicConsumer; private MessageConsumer tempQueueConsumer; private Set<ActiveMQQueue> queues = new CopyOnWriteArraySet<ActiveMQQueue>(); private Set<ActiveMQTopic> topics = new CopyOnWriteArraySet<ActiveMQTopic>(); private Set<ActiveMQTempQueue> temporaryQueues = new CopyOnWriteArraySet<ActiveMQTempQueue>(); private Set<ActiveMQTempTopic> temporaryTopics = new CopyOnWriteArraySet<ActiveMQTempTopic>(); private DestinationListener listener; public DestinationSource(Connection connection) throws JMSException { this connection = connection; } public DestinationListener getListener() { return listener; } public void setDestinationListener(DestinationListener listener) { this listener = listener; } public Set<ActiveMQQueue> getQueues() { return queues; } public Set<ActiveMQTopic> getTopics() { return topics; } public Set<ActiveMQTempQueue> getTemporaryQueues() { return temporaryQueues; } public Set<ActiveMQTempTopic> getTemporaryTopics() { return temporaryTopics; } public void start() throws JMSException { if (started compareAndSet(false, true)) { session = connection createSession(false, Session AUTO ACKNOWLEDGE); queueConsumer = session createConsumer(AdvisorySupport QUEUE ADVISORY TOPIC); queueConsumer setMessageListener(this); topicConsumer = session createConsumer(AdvisorySupport TOPIC ADVISORY TOPIC); topicConsumer setMessageListener(this); tempQueueConsumer = session createConsumer(AdvisorySupport TEMP QUEUE ADVISORY TOPIC); tempQueueConsumer setMessageListener(this); tempTopicConsumer = session createConsumer(AdvisorySupport TEMP TOPIC ADVISORY TOPIC); tempTopicConsumer setMessageListener(this); } } public void stop() throws JMSException { if (started compareAndSet(true, false)) { if (session != null) { session close(); } } } public void onMessage(Message message) { if (message instanceof ActiveMQMessage) { ActiveMQMessage activeMessage = (ActiveMQMessage) message; Object command = activeMessage getDataStructure(); if (command instanceof DestinationInfo) { DestinationInfo destinationInfo = (DestinationInfo) command; DestinationEvent event = new DestinationEvent(this, destinationInfo); fireDestinationEvent(event); } else { LOG warn( Unknown dataStructure + command); } } else { LOG warn( Unknown message type + message + Message ignored ); } } protected void fireDestinationEvent(DestinationEvent event) { ActiveMQDestination destination = event getDestination(); boolean add = event isAddOperation(); if (destination instanceof ActiveMQQueue) { ActiveMQQueue queue = (ActiveMQQueue) destination; if (add) { queues add(queue); } else { queues remove(queue); } } else if (destination instanceof ActiveMQTopic) { ActiveMQTopic topic = (ActiveMQTopic) destination; if (add) { topics add(topic); } else { topics remove(topic); } } else if (destination instanceof ActiveMQTempQueue) { ActiveMQTempQueue queue = (ActiveMQTempQueue) destination; if (add) { temporaryQueues add(queue); } else { temporaryQueues remove(queue); } } else if (destination instanceof ActiveMQTempTopic) { ActiveMQTempTopic topic = (ActiveMQTempTopic) destination; if (add) { temporaryTopics add(topic); } else { temporaryTopics remove(topic); } } else { LOG warn( Unknown destination type + destination); } if (listener != null) { listener onDestinationEvent(event); } } }",1.0,
600,600,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\ProducerEvent.,ProducerEvent,"public abstract class ProducerEvent extends EventObject { private static final long serialVersionUID = 2442156576867593780L; private final Destination destination; private final ProducerId producerId; private final int producerCount; public ProducerEvent(ProducerEventSource source, Destination destination, ProducerId producerId, int producerCount) { super(source); this destination = destination; this producerId = producerId; this producerCount = producerCount; } public ProducerEventSource getAdvisor() { return (ProducerEventSource) getSource(); } public Destination getDestination() { return destination; } public int getProducerCount() { return producerCount; } public ProducerId getProducerId() { return producerId; } public abstract boolean isStarted(); }",1.0,
602,602,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\ProducerStartedEvent.,ProducerStartedEvent,"public class ProducerStartedEvent extends ProducerEvent { private static final long serialVersionUID = 5088138839609391074L; private final transient ProducerInfo consumerInfo; public ProducerStartedEvent(ProducerEventSource source, ActiveMQDestination destination, ProducerInfo consumerInfo, int count) { super(source, destination, consumerInfo getProducerId(), count); this consumerInfo = consumerInfo; } public boolean isStarted() { return true; } public ProducerInfo getProducerInfo() { return consumerInfo; } }",1.0,
603,603,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\advisory\ProducerStoppedEvent.,ProducerStoppedEvent,"public class ProducerStoppedEvent extends ProducerEvent { private static final long serialVersionUID = 5378835541037193206L; public ProducerStoppedEvent(ProducerEventSource source, ActiveMQDestination destination, ProducerId consumerId, int count) { super(source, destination, consumerId, count); } public boolean isStarted() { return false; } }",1.0,
604,604,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\blob\BlobDownloader.,BlobDownloader,"public class BlobDownloader { private final BlobTransferPolicy blobTransferPolicy; public BlobDownloader(BlobTransferPolicy transferPolicy) { this blobTransferPolicy = transferPolicy copy(); } public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException { return getStrategy() getInputStream(message); } public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException { getStrategy() deleteFile(message); } public BlobTransferPolicy getBlobTransferPolicy() { return blobTransferPolicy; } public BlobDownloadStrategy getStrategy() { return getBlobTransferPolicy() getDownloadStrategy(); } }",1.0,
606,606,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\blob\BlobUploader.,BlobUploader,"public class BlobUploader { private final BlobTransferPolicy blobTransferPolicy; private File file; private InputStream in; public BlobUploader(BlobTransferPolicy blobTransferPolicy, InputStream in) { this blobTransferPolicy = blobTransferPolicy copy(); this in = in; } public BlobUploader(BlobTransferPolicy blobTransferPolicy, File file) { this blobTransferPolicy = blobTransferPolicy copy(); this file = file; } public URL upload(ActiveMQBlobMessage message) throws JMSException, IOException { if (file != null) { return getStrategy() uploadFile(message, file); } else { return getStrategy() uploadStream(message, in); } } public BlobTransferPolicy getBlobTransferPolicy() { return blobTransferPolicy; } public BlobUploadStrategy getStrategy() { return getBlobTransferPolicy() getUploadStrategy(); } }",1.0,
607,607,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\blob\DefaultBlobDownloadStrategy.,DefaultBlobDownloadStrategy,"public class DefaultBlobDownloadStrategy extends DefaultStrategy implements BlobDownloadStrategy { public DefaultBlobDownloadStrategy(BlobTransferPolicy transferPolicy) { super(transferPolicy); } public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException { URL value = message getURL(); if (value == null) { return null; } return value openStream(); } public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException { URL url = createMessageURL(message); HttpURLConnection connection = (HttpURLConnection)url openConnection(); connection setRequestMethod( DELETE ); connection connect(); connection disconnect(); if (!isSuccessfulCode(connection getResponseCode())) { throw new IOException( DELETE was not successful + connection getResponseCode() + + connection getResponseMessage()); } } }",1.0,
608,608,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\blob\DefaultBlobUploadStrategy.,DefaultBlobUploadStrategy,"public class DefaultBlobUploadStrategy extends DefaultStrategy implements BlobUploadStrategy { public DefaultBlobUploadStrategy(BlobTransferPolicy transferPolicy) { super(transferPolicy); } public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException { return uploadStream(message, new FileInputStream(file)); } public URL uploadStream(ActiveMQBlobMessage message, InputStream fis) throws JMSException, IOException { URL url = createMessageURL(message); HttpURLConnection connection = (HttpURLConnection)url openConnection(); connection setRequestMethod( PUT ); connection setDoOutput(true); connection setChunkedStreamingMode(transferPolicy getBufferSize()); OutputStream os = connection getOutputStream(); byte[] buf = new byte[transferPolicy getBufferSize()]; for (int c = fis read(buf); c != -1; c = fis read(buf)) { os write(buf, 0, c); os flush(); } os close(); fis close(); if (!isSuccessfulCode(connection getResponseCode())) { throw new IOException( PUT was not successful + connection getResponseCode() + + connection getResponseMessage()); } return url; } }",1.0,
609,609,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\blob\DefaultStrategy.,DefaultStrategy,"public class DefaultStrategy { protected BlobTransferPolicy transferPolicy; public DefaultStrategy(BlobTransferPolicy transferPolicy) { this transferPolicy = transferPolicy; } protected boolean isSuccessfulCode(int responseCode) { return responseCode >= 200 && responseCode < 300; } protected URL createMessageURL(ActiveMQBlobMessage message) throws JMSException, MalformedURLException { return new URL(transferPolicy getUploadUrl() + message getMessageId() toString()); } }",1.0,
610,610,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\blob\FileSystemBlobStrategy.,FileSystemBlobStrategy,"public class FileSystemBlobStrategy implements BlobUploadStrategy, BlobDownloadStrategy{ private final BlobTransferPolicy policy; private File rootFile; public FileSystemBlobStrategy(final BlobTransferPolicy policy) throws MalformedURLException, URISyntaxException { this policy = policy; createRootFolder(); } protected void createRootFolder() throws MalformedURLException, URISyntaxException { rootFile = new File(new URL(policy getUploadUrl()) toURI()); if (rootFile exists() == false) { rootFile mkdirs(); } else if (rootFile isDirectory() == false) { throw new IllegalArgumentException( Given url is not a directory + rootFile ); } } public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException { return uploadStream(message, new FileInputStream(file)); } public URL uploadStream(ActiveMQBlobMessage message, InputStream in) throws JMSException, IOException { File f = getFile(message); FileOutputStream out = new FileOutputStream(f); byte[] buffer = new byte[policy getBufferSize()]; for (int c = in read(buffer); c != -1; c = in read(buffer)) { out write(buffer, 0, c); out flush(); } out flush(); out close(); return f toURI() toURL(); } public void deleteFile(ActiveMQBlobMessage message) throws IOException, JMSException { File f = getFile(message); if (f exists()) { if (f delete() == false) throw new IOException( Unable to delete file + f); } } public InputStream getInputStream(ActiveMQBlobMessage message) throws IOException, JMSException { return new FileInputStream(getFile(message)); } protected File getFile(ActiveMQBlobMessage message) throws JMSException, IOException { if (message getURL() != null) { try { return new File(message getURL() toURI()); } catch (URISyntaxException e) { IOException ioe = new IOException( Unable to open file for message + message); ioe initCause(e); } } String fileName = message getJMSMessageID() replaceAll( , ); return new File(rootFile, fileName); } }",1.0,
612,612,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\blob\FTPBlobUploadStrategy.,FTPBlobUploadStrategy,"public class FTPBlobUploadStrategy extends FTPStrategy implements BlobUploadStrategy { public FTPBlobUploadStrategy(BlobTransferPolicy transferPolicy) throws MalformedURLException { super(transferPolicy); } public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException { return uploadStream(message, new FileInputStream(file)); } public URL uploadStream(ActiveMQBlobMessage message, InputStream in) throws JMSException, IOException { FTPClient ftp = createFTP(); try { String path = url getPath(); String workingDir = path substring(0, path lastIndexOf( / )); String filename = message getMessageId() toString() replaceAll( , ); ftp setFileType(FTPClient BINARY FILE TYPE); String url; if(!ftp changeWorkingDirectory(workingDir)) { url = this url toString() replaceFirst(this url getPath(), )+ / ; } else { url = this url toString(); } if (!ftp storeFile(filename, in)) { throw new JMSException( FTP store failed + ftp getReplyString()); } return new URL(url + filename); } finally { ftp quit(); ftp disconnect(); } } }",1.0,
615,615,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\broker\region\policy\RedeliveryPolicyMap.,RedeliveryPolicyMap,public class RedeliveryPolicyMap extends DestinationMap { private RedeliveryPolicy defaultEntry; public RedeliveryPolicy getEntryFor(ActiveMQDestination destination) { RedeliveryPolicy answer = (RedeliveryPolicy) chooseValue(destination); if (answer == null) { answer = getDefaultEntry(); } return answer; } public void setRedeliveryPolicyEntries(List entries) { super setEntries(entries); } public RedeliveryPolicy getDefaultEntry() { return defaultEntry; } public void setDefaultEntry(RedeliveryPolicy defaultEntry) { this defaultEntry = defaultEntry; } protected Class< extends DestinationMapEntry> getEntryClass() { return RedeliveryPolicy class; } },1.0,
616,616,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\broker\scheduler\CronParser.,CronParser,"public class CronParser { private static final int NUMBER TOKENS = 5; private static final int MINUTES = 0; private static final int HOURS = 1; private static final int DAY OF MONTH = 2; private static final int MONTH = 3; private static final int DAY OF WEEK = 4; public static long getNextScheduledTime(final String cronEntry, long currentTime) throws MessageFormatException { long result = 0; if (cronEntry == null || cronEntry length() == 0) { return result; } if (cronEntry startsWith( * * * * * )) { result = currentTime + 60 * 1000; result = result / 1000 * 1000; return result; } List<String> list = tokenize(cronEntry); List<CronEntry> entries = buildCronEntries(list); Calendar working = Calendar getInstance(); working setTimeInMillis(currentTime); working set(Calendar SECOND, 0); CronEntry minutes = entries get(MINUTES); CronEntry hours = entries get(HOURS); CronEntry dayOfMonth = entries get(DAY OF MONTH); CronEntry month = entries get(MONTH); CronEntry dayOfWeek = entries get(DAY OF WEEK); int timeToNextMinute = 60 - working get(Calendar SECOND); working add(Calendar SECOND, timeToNextMinute); int currentMinutes = working get(Calendar MINUTE); if (!isCurrent(minutes, currentMinutes)) { int nextMinutes = getNext(minutes, currentMinutes); working add(Calendar MINUTE, nextMinutes); } int currentHours = working get(Calendar HOUR OF DAY); if (!isCurrent(hours, currentHours)) { int nextHour = getNext(hours, currentHours); working add(Calendar HOUR OF DAY, nextHour); } doUpdateCurrentDay(working, dayOfMonth, dayOfWeek); doUpdateCurrentMonth(working, month); doUpdateCurrentDay(working, dayOfMonth, dayOfWeek); currentHours = working get(Calendar HOUR OF DAY); if (!isCurrent(hours, currentHours)) { int nextHour = getNext(hours, currentHours); working add(Calendar HOUR OF DAY, nextHour); } currentMinutes = working get(Calendar MINUTE); if (!isCurrent(minutes, currentMinutes)) { int nextMinutes = getNext(minutes, currentMinutes); working add(Calendar MINUTE, nextMinutes); } result = working getTimeInMillis(); if (result <= currentTime) { throw new ArithmeticException( Unable to compute next scheduled exection time ); } return result; } protected static long doUpdateCurrentMonth(Calendar working, CronEntry month) throws MessageFormatException { int currentMonth = working get(Calendar MONTH) + 1; if (!isCurrent(month, currentMonth)) { int nextMonth = getNext(month, currentMonth); working add(Calendar MONTH, nextMonth); resetToStartOfDay(working, 1); return working getTimeInMillis(); } return 0L; } protected static long doUpdateCurrentDay(Calendar working, CronEntry dayOfMonth, CronEntry dayOfWeek) throws MessageFormatException { int currentDayOfWeek = working get(Calendar DAY OF WEEK) - 1; int currentDayOfMonth = working get(Calendar DAY OF MONTH); if (!isCurrent(dayOfWeek, currentDayOfWeek) || !isCurrent(dayOfMonth, currentDayOfMonth) ) { int nextWeekDay = Integer MAX VALUE; int nextCalendarDay = Integer MAX VALUE; if (!isCurrent(dayOfWeek, currentDayOfWeek)) { nextWeekDay = getNext(dayOfWeek, currentDayOfWeek); } if (!isCurrent(dayOfMonth, currentDayOfMonth)) { nextCalendarDay = getNext(dayOfMonth, currentDayOfMonth); } if( nextWeekDay < nextCalendarDay ) { working add(Calendar DAY OF WEEK, nextWeekDay); } else { working add(Calendar DAY OF MONTH, nextCalendarDay); } resetToStartOfDay(working, working get(Calendar DAY OF MONTH)); return working getTimeInMillis(); } return 0L; } public static void validate(final String cronEntry) throws MessageFormatException { List<String> list = tokenize(cronEntry); List<CronEntry> entries = buildCronEntries(list); for (CronEntry e entries) { validate(e); } } static void validate(final CronEntry entry) throws MessageFormatException { List<Integer> list = entry currentWhen; if (list isEmpty() || list get(0) intValue() < entry start || list get(list size() - 1) intValue() > entry end) { throw new MessageFormatException( Invalid token + entry); } } static int getNext(final CronEntry entry, final int current) throws MessageFormatException { int result = 0; if (entry currentWhen == null) { entry currentWhen = calculateValues(entry); } List<Integer> list = entry currentWhen; int next = -1; for (Integer i list) { if (i intValue() > current) { next = i intValue(); break; } } if (next != -1) { result = next - current; } else { int first = list get(0) intValue(); result = entry end + first - entry start - current; if (entry name equals( DayOfWeek ) || entry name equals( Month )) { result++; } } return result; } static boolean isCurrent(final CronEntry entry, final int current) throws MessageFormatException { boolean result = entry currentWhen contains(new Integer(current)); return result; } protected static void resetToStartOfDay(Calendar target, int day) { target set(Calendar DAY OF MONTH, day); target set(Calendar HOUR OF DAY, 0); target set(Calendar MINUTE, 0); target set(Calendar SECOND, 0); } static List<String> tokenize(String cron) throws IllegalArgumentException { StringTokenizer tokenize = new StringTokenizer(cron); List<String> result = new ArrayList<String>(); while (tokenize hasMoreTokens()) { result add(tokenize nextToken()); } if (result size() != NUMBER TOKENS) { throw new IllegalArgumentException( Not a valid cron entry - wrong number of tokens( + result size() + ) + cron); } return result; } protected static List<Integer> calculateValues(final CronEntry entry) { List<Integer> result = new ArrayList<Integer>(); if (isAll(entry token)) { for (int i = entry start; i <= entry end; i++) { result add(i); } } else if (isAStep(entry token)) { int denominator = getDenominator(entry token); String numerator = getNumerator(entry token); CronEntry ce = new CronEntry(entry name, numerator, entry start, entry end); List<Integer> list = calculateValues(ce); for (Integer i list) { if (i intValue() % denominator == 0) { result add(i); } } } else if (isAList(entry token)) { StringTokenizer tokenizer = new StringTokenizer(entry token, , ); while (tokenizer hasMoreTokens()) { String str = tokenizer nextToken(); CronEntry ce = new CronEntry(entry name, str, entry start, entry end); List<Integer> list = calculateValues(ce); result addAll(list); } } else if (isARange(entry token)) { int index = entry token indexOf( - ); int first = Integer parseInt(entry token substring(0, index)); int last = Integer parseInt(entry token substring(index + 1)); for (int i = first; i <= last; i++) { result add(i); } } else { int value = Integer parseInt(entry token); result add(value); } Collections sort(result); return result; } protected static boolean isARange(String token) { return token != null && token indexOf( - ) >= 0; } protected static boolean isAStep(String token) { return token != null && token indexOf( / ) >= 0; } protected static boolean isAList(String token) { return token != null && token indexOf( , ) >= 0; } protected static boolean isAll(String token) { return token != null && token length() == 1 && (token charAt(0) == * || token charAt(0) == ); } protected static int getDenominator(final String token) { int result = 0; int index = token indexOf( / ); String str = token substring(index + 1); result = Integer parseInt(str); return result; } protected static String getNumerator(final String token) { int index = token indexOf( / ); String str = token substring(0, index); return str; } static List<CronEntry> buildCronEntries(List<String> tokens) { List<CronEntry> result = new ArrayList<CronEntry>(); CronEntry minutes = new CronEntry( Minutes , tokens get(MINUTES), 0, 60); minutes currentWhen = calculateValues(minutes); result add(minutes); CronEntry hours = new CronEntry( Hours , tokens get(HOURS), 0, 24); hours currentWhen = calculateValues(hours); result add(hours); CronEntry dayOfMonth = new CronEntry( DayOfMonth , tokens get(DAY OF MONTH), 1, 31); dayOfMonth currentWhen = calculateValues(dayOfMonth); result add(dayOfMonth); CronEntry month = new CronEntry( Month , tokens get(MONTH), 1, 12); month currentWhen = calculateValues(month); result add(month); CronEntry dayOfWeek = new CronEntry( DayOfWeek , tokens get(DAY OF WEEK), 0, 6); dayOfWeek currentWhen = calculateValues(dayOfWeek); result add(dayOfWeek); return result; } static class CronEntry { final String name; final String token; final int start; final int end; List<Integer> currentWhen; CronEntry(String name, String token, int start, int end) { this name = name; this token = token; this start = start; this end = end; } Override public String toString() { return this name + + token; } } }",1.0,
617,617,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\broker\scheduler\CronParser.,CronEntry,"static class CronEntry { final String name; final String token; final int start; final int end; List<Integer> currentWhen; CronEntry(String name, String token, int start, int end) { this name = name; this token = token; this start = start; this end = end; } Override public String toString() { return this name + + token; } }",1.0,
618,618,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ActiveMQBlobMessage.,ActiveMQBlobMessage,"public class ActiveMQBlobMessage extends ActiveMQMessage implements BlobMessage { public static final byte DATA STRUCTURE TYPE = CommandTypes ACTIVEMQ BLOB MESSAGE; public static final String BINARY MIME TYPE = application/octet-stream ; private String remoteBlobUrl; private String mimeType; private String name; private boolean deletedByBroker; private transient BlobUploader blobUploader; private transient BlobDownloader blobDownloader; private transient URL url; public Message copy() { ActiveMQBlobMessage copy = new ActiveMQBlobMessage(); copy(copy); return copy; } private void copy(ActiveMQBlobMessage copy) { super copy(copy); copy setRemoteBlobUrl(getRemoteBlobUrl()); copy setMimeType(getMimeType()); copy setDeletedByBroker(isDeletedByBroker()); copy setBlobUploader(getBlobUploader()); copy setName(getName()); } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public String getRemoteBlobUrl() { return remoteBlobUrl; } public void setRemoteBlobUrl(String remoteBlobUrl) { this remoteBlobUrl = remoteBlobUrl; url = null; } public String getMimeType() { if (mimeType == null) { return BINARY MIME TYPE; } return mimeType; } public void setMimeType(String mimeType) { this mimeType = mimeType; } public String getName() { return name; } public void setName(String name) { this name = name; } public boolean isDeletedByBroker() { return deletedByBroker; } public void setDeletedByBroker(boolean deletedByBroker) { this deletedByBroker = deletedByBroker; } public String getJMSXMimeType() { return getMimeType(); } public InputStream getInputStream() throws IOException, JMSException { if(blobDownloader == null) { return null; } return blobDownloader getInputStream(this); } public URL getURL() throws JMSException { if (url == null && remoteBlobUrl != null) { try { url = new URL(remoteBlobUrl); } catch (MalformedURLException e) { throw JMSExceptionSupport create(e); } } return url; } public void setURL(URL url) { this url = url; remoteBlobUrl = url != null url toExternalForm() null; } public BlobUploader getBlobUploader() { return blobUploader; } public void setBlobUploader(BlobUploader blobUploader) { this blobUploader = blobUploader; } public BlobDownloader getBlobDownloader() { return blobDownloader; } public void setBlobDownloader(BlobDownloader blobDownloader) { this blobDownloader = blobDownloader; } public void onSend() throws JMSException { super onSend(); if (blobUploader != null) { try { URL value = blobUploader upload(this); setURL(value); } catch (IOException e) { throw JMSExceptionSupport create(e); } } } public void deleteFile() throws IOException, JMSException { blobDownloader deleteFile(this); } }",1.0,
627,627,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ActiveMQTempQueue.,ActiveMQTempQueue,"public class ActiveMQTempQueue extends ActiveMQTempDestination implements TemporaryQueue { public static final byte DATA STRUCTURE TYPE = CommandTypes ACTIVEMQ TEMP QUEUE; private static final long serialVersionUID = 6683049467527633867L; public ActiveMQTempQueue() { } public ActiveMQTempQueue(String name) { super(name); } public ActiveMQTempQueue(ConnectionId connectionId, long sequenceId) { super(connectionId getValue(), sequenceId); } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public boolean isQueue() { return true; } public String getQueueName() throws JMSException { return getPhysicalName(); } public byte getDestinationType() { return TEMP QUEUE TYPE; } protected String getQualifiedPrefix() { return TEMP QUEUE QUALIFED PREFIX; } }",1.0,
628,628,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ActiveMQTempTopic.,ActiveMQTempTopic,"public class ActiveMQTempTopic extends ActiveMQTempDestination implements TemporaryTopic { public static final byte DATA STRUCTURE TYPE = CommandTypes ACTIVEMQ TEMP TOPIC; private static final long serialVersionUID = -4325596784597300253L; public ActiveMQTempTopic() { } public ActiveMQTempTopic(String name) { super(name); } public ActiveMQTempTopic(ConnectionId connectionId, long sequenceId) { super(connectionId getValue(), sequenceId); } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public boolean isTopic() { return true; } public String getTopicName() throws JMSException { return getPhysicalName(); } public byte getDestinationType() { return TEMP TOPIC TYPE; } protected String getQualifiedPrefix() { return TEMP TOPIC QUALIFED PREFIX; } }",1.0,
631,631,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\BaseCommand.,BaseCommand,"public abstract class BaseCommand implements Command { protected int commandId; protected boolean responseRequired; private transient Endpoint from; private transient Endpoint to; public void copy(BaseCommand copy) { copy commandId = commandId; copy responseRequired = responseRequired; } public int getCommandId() { return commandId; } public void setCommandId(int commandId) { this commandId = commandId; } public boolean isResponseRequired() { return responseRequired; } public void setResponseRequired(boolean responseRequired) { this responseRequired = responseRequired; } Override public String toString() { return toString(null); } public String toString(Map<String, Object>overrideFields) { return IntrospectionSupport toString(this, BaseCommand class, overrideFields); } public boolean isWireFormatInfo() { return false; } public boolean isBrokerInfo() { return false; } public boolean isResponse() { return false; } public boolean isMessageDispatch() { return false; } public boolean isMessage() { return false; } public boolean isMarshallAware() { return false; } public boolean isMessageAck() { return false; } public boolean isMessageDispatchNotification() { return false; } public boolean isShutdownInfo() { return false; } public boolean isConnectionControl() { return false; } public Endpoint getFrom() { return from; } public void setFrom(Endpoint from) { this from = from; } public Endpoint getTo() { return to; } public void setTo(Endpoint to) { this to = to; } }",1.0,
632,632,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\BaseEndpoint.,BaseEndpoint,public class BaseEndpoint implements Endpoint { private String name; private BrokerInfo brokerInfo; public BaseEndpoint(String name) { this name = name; } public String getName() { return name; } public String toString() { String brokerText = ; BrokerId brokerId = getBrokerId(); if (brokerId != null) { brokerText = broker + brokerId; } return Endpoint[name + name + brokerText + ] ; } public BrokerId getBrokerId() { if (brokerInfo != null) { return brokerInfo getBrokerId(); } return null; } public BrokerInfo getBrokerInfo() { return brokerInfo; } public void setBrokerInfo(BrokerInfo brokerInfo) { this brokerInfo = brokerInfo; } },1.0,
636,636,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ConnectionError.,ConnectionError,public class ConnectionError extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes CONNECTION ERROR; private ConnectionId connectionId; private Throwable exception; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processConnectionError(this); } public Throwable getException() { return exception; } public void setException(Throwable exception) { this exception = exception; } public ConnectionId getConnectionId() { return connectionId; } public void setConnectionId(ConnectionId connectionId) { this connectionId = connectionId; } },1.0,
637,637,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ConnectionId.,ConnectionId,"public class ConnectionId implements DataStructure, Comparable<ConnectionId> { public static final byte DATA STRUCTURE TYPE = CommandTypes CONNECTION ID; protected String value; public ConnectionId() { } public ConnectionId(String connectionId) { this value = connectionId; } public ConnectionId(ConnectionId id) { this value = id getValue(); } public ConnectionId(SessionId id) { this value = id getConnectionId(); } public ConnectionId(ProducerId id) { this value = id getConnectionId(); } public ConnectionId(ConsumerId id) { this value = id getConnectionId(); } public int hashCode() { return value hashCode(); } public boolean equals(Object o) { if (this == o) { return true; } if (o == null || o getClass() != ConnectionId class) { return false; } ConnectionId id = (ConnectionId)o; return value equals(id value); } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public String toString() { return value; } public String getValue() { return value; } public void setValue(String connectionId) { this value = connectionId; } public boolean isMarshallAware() { return false; } public int compareTo(ConnectionId o) { return value compareTo(o value); } }",1.0,
638,638,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ConnectionInfo.,ConnectionInfo,public class ConnectionInfo extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes CONNECTION INFO; protected ConnectionId connectionId; protected String clientId; protected String clientIp; protected String userName; protected String password; protected BrokerId[] brokerPath; protected boolean brokerMasterConnector; protected boolean manageable; protected boolean clientMaster = true; protected boolean faultTolerant = false; protected boolean failoverReconnect; protected transient Object transportContext; public ConnectionInfo() { } public ConnectionInfo(ConnectionId connectionId) { this connectionId = connectionId; } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public ConnectionInfo copy() { ConnectionInfo copy = new ConnectionInfo(); copy(copy); return copy; } private void copy(ConnectionInfo copy) { super copy(copy); copy connectionId = connectionId; copy clientId = clientId; copy userName = userName; copy password = password; copy brokerPath = brokerPath; copy brokerMasterConnector = brokerMasterConnector; copy manageable = manageable; copy clientMaster = clientMaster; copy transportContext = transportContext; copy faultTolerant= faultTolerant; copy clientIp = clientIp; } public ConnectionId getConnectionId() { return connectionId; } public void setConnectionId(ConnectionId connectionId) { this connectionId = connectionId; } public String getClientId() { return clientId; } public void setClientId(String clientId) { this clientId = clientId; } public RemoveInfo createRemoveCommand() { RemoveInfo command = new RemoveInfo(getConnectionId()); command setResponseRequired(isResponseRequired()); return command; } public String getPassword() { return password; } public void setPassword(String password) { this password = password; } public String getUserName() { return userName; } public void setUserName(String userName) { this userName = userName; } public BrokerId[] getBrokerPath() { return brokerPath; } public void setBrokerPath(BrokerId[] brokerPath) { this brokerPath = brokerPath; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processAddConnection(this); } public boolean isBrokerMasterConnector() { return brokerMasterConnector; } public void setBrokerMasterConnector(boolean slaveBroker) { this brokerMasterConnector = slaveBroker; } public boolean isManageable() { return manageable; } public void setManageable(boolean manageable) { this manageable = manageable; } public Object getTransportContext() { return transportContext; } public void setTransportContext(Object transportContext) { this transportContext = transportContext; } public boolean isClientMaster() { return this clientMaster; } public void setClientMaster(boolean clientMaster) { this clientMaster = clientMaster; } public boolean isFaultTolerant() { return this faultTolerant; } public void setFaultTolerant(boolean faultTolerant) { this faultTolerant = faultTolerant; } public boolean isFailoverReconnect() { return this failoverReconnect; } public void setFailoverReconnect(boolean failoverReconnect) { this failoverReconnect = failoverReconnect; } public String getClientIp() { return clientIp; } public void setClientIp(String clientIp) { this clientIp = clientIp; } },1.0,
642,642,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ControlCommand.,ControlCommand,public class ControlCommand extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes CONTROL COMMAND; private String command; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public String getCommand() { return command; } public void setCommand(String command) { this command = command; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processControlCommand(this); } },1.0,
643,643,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\DataArrayResponse.,DataArrayResponse,public class DataArrayResponse extends Response { public static final byte DATA STRUCTURE TYPE = CommandTypes DATA ARRAY RESPONSE; DataStructure data[]; public DataArrayResponse() { } public DataArrayResponse(DataStructure data[]) { this data = data; } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public DataStructure[] getData() { return data; } public void setData(DataStructure[] data) { this data = data; } },1.0,
644,644,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\DataResponse.,DataResponse,public class DataResponse extends Response { public static final byte DATA STRUCTURE TYPE = CommandTypes DATA RESPONSE; DataStructure data; public DataResponse() { } public DataResponse(DataStructure data) { this data = data; } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public DataStructure getData() { return data; } public void setData(DataStructure data) { this data = data; } },1.0,
648,648,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ExceptionResponse.,ExceptionResponse,public class ExceptionResponse extends Response { public static final byte DATA STRUCTURE TYPE = CommandTypes EXCEPTION RESPONSE; Throwable exception; public ExceptionResponse() { } public ExceptionResponse(Throwable e) { setException(e); } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public Throwable getException() { return exception; } public void setException(Throwable exception) { this exception = exception; } public boolean isException() { return true; } },1.0,
649,649,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\FlushCommand.,FlushCommand,public class FlushCommand extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes FLUSH COMMAND; public static final Command COMMAND = new FlushCommand(); public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processFlush(this); } },1.0,
655,655,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\KeepAliveInfo.,KeepAliveInfo,"public class KeepAliveInfo extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes KEEP ALIVE INFO; private transient Endpoint from; private transient Endpoint to; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public boolean isResponse() { return false; } public boolean isMessageDispatch() { return false; } public boolean isMessage() { return false; } public boolean isMessageAck() { return false; } public boolean isBrokerInfo() { return false; } public boolean isWireFormatInfo() { return false; } public Endpoint getFrom() { return from; } public void setFrom(Endpoint from) { this from = from; } public Endpoint getTo() { return to; } public void setTo(Endpoint to) { this to = to; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processKeepAlive(this); } public boolean isMarshallAware() { return false; } public boolean isMessageDispatchNotification() { return false; } public boolean isShutdownInfo() { return false; } public String toString() { return IntrospectionSupport toString(this, KeepAliveInfo class); } }",1.0,
656,656,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\LastPartialCommand.,LastPartialCommand,public class LastPartialCommand extends PartialCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes PARTIAL LAST COMMAND; public LastPartialCommand() { } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public Response visit(CommandVisitor visitor) throws Exception { throw new IllegalStateException( The transport layer should filter out LastPartialCommand instances but received + this); } public void configure(Command completeCommand) { completeCommand setFrom(getFrom()); } },1.0,
661,661,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\MessageDispatchNotification.,MessageDispatchNotification,public class MessageDispatchNotification extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes MESSAGE DISPATCH NOTIFICATION; protected ConsumerId consumerId; protected ActiveMQDestination destination; protected MessageId messageId; protected long deliverySequenceId; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public boolean isMessageDispatchNotification() { return true; } public ConsumerId getConsumerId() { return consumerId; } public void setConsumerId(ConsumerId consumerId) { this consumerId = consumerId; } public ActiveMQDestination getDestination() { return destination; } public void setDestination(ActiveMQDestination destination) { this destination = destination; } public long getDeliverySequenceId() { return deliverySequenceId; } public void setDeliverySequenceId(long deliverySequenceId) { this deliverySequenceId = deliverySequenceId; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processMessageDispatchNotification(this); } public MessageId getMessageId() { return messageId; } public void setMessageId(MessageId messageId) { this messageId = messageId; } },1.0,
665,665,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\PartialCommand.,PartialCommand,public class PartialCommand implements Command { public static final byte DATA STRUCTURE TYPE = CommandTypes PARTIAL COMMAND; private int commandId; private byte[] data; private transient Endpoint from; private transient Endpoint to; public PartialCommand() { } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public int getCommandId() { return commandId; } public void setCommandId(int commandId) { this commandId = commandId; } public byte[] getData() { return data; } public void setData(byte[] data) { this data = data; } public Endpoint getFrom() { return from; } public void setFrom(Endpoint from) { this from = from; } public Endpoint getTo() { return to; } public void setTo(Endpoint to) { this to = to; } public Response visit(CommandVisitor visitor) throws Exception { throw new IllegalStateException( The transport layer should filter out PartialCommand instances but received + this); } public boolean isResponseRequired() { return false; } public boolean isResponse() { return false; } public boolean isBrokerInfo() { return false; } public boolean isMessageDispatch() { return false; } public boolean isMessage() { return false; } public boolean isMessageAck() { return false; } public boolean isMessageDispatchNotification() { return false; } public boolean isShutdownInfo() { return false; } public boolean isConnectionControl() { return false; } public void setResponseRequired(boolean responseRequired) { } public boolean isWireFormatInfo() { return false; } public boolean isMarshallAware() { return false; } public String toString() { int size = 0; if (data != null) { size = data length; } return PartialCommand[id + commandId + data + size + byte(s)] ; } },1.0,
666,666,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ProducerAck.,ProducerAck,"public class ProducerAck extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes PRODUCER ACK; protected ProducerId producerId; protected int size; public ProducerAck() { } public ProducerAck(ProducerId producerId, int size) { this producerId = producerId; this size = size; } public void copy(ProducerAck copy) { super copy(copy); copy producerId = producerId; copy size = size; } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processProducerAck(this); } public ProducerId getProducerId() { return producerId; } public void setProducerId(ProducerId producerId) { this producerId = producerId; } public int getSize() { return size; } public void setSize(int size) { this size = size; } }",1.0,
670,670,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\RemoveSubscriptionInfo.,RemoveSubscriptionInfo,public class RemoveSubscriptionInfo extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes REMOVE SUBSCRIPTION INFO; protected ConnectionId connectionId; protected String clientId; protected String subscriptionName; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public ConnectionId getConnectionId() { return connectionId; } public void setConnectionId(ConnectionId connectionId) { this connectionId = connectionId; } public String getSubcriptionName() { return subscriptionName; } public void setSubcriptionName(String subscriptionName) { this subscriptionName = subscriptionName; } public String getSubscriptionName() { return subscriptionName; } public void setSubscriptionName(String subscriptionName) { this subscriptionName = subscriptionName; } public String getClientId() { return clientId; } public void setClientId(String clientId) { this clientId = clientId; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processRemoveSubscription(this); } },1.0,
671,671,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ReplayCommand.,ReplayCommand,"public class ReplayCommand extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes REPLAY; private String producerId; private int firstAckNumber; private int lastAckNumber; private int firstNakNumber; private int lastNakNumber; public ReplayCommand() { } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public String getProducerId() { return producerId; } public void setProducerId(String producerId) { this producerId = producerId; } public int getFirstAckNumber() { return firstAckNumber; } public void setFirstAckNumber(int firstSequenceNumber) { this firstAckNumber = firstSequenceNumber; } public int getLastAckNumber() { return lastAckNumber; } public void setLastAckNumber(int lastSequenceNumber) { this lastAckNumber = lastSequenceNumber; } public Response visit(CommandVisitor visitor) throws Exception { return null; } public int getFirstNakNumber() { return firstNakNumber; } public void setFirstNakNumber(int firstNakNumber) { this firstNakNumber = firstNakNumber; } public int getLastNakNumber() { return lastNakNumber; } public void setLastNakNumber(int lastNakNumber) { this lastNakNumber = lastNakNumber; } public String toString() { return ReplayCommand {commandId = + getCommandId() + , firstNakNumber = + getFirstNakNumber() + , lastNakNumber = + getLastNakNumber() + } ; } }",1.0,
672,672,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\Response.,Response,public class Response extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes RESPONSE; int correlationId; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public int getCorrelationId() { return correlationId; } public void setCorrelationId(int responseId) { this correlationId = responseId; } public boolean isResponse() { return true; } public boolean isException() { return false; } public Response visit(CommandVisitor visitor) throws Exception { return null; } },1.0,
674,674,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\SessionInfo.,SessionInfo,"public class SessionInfo extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes SESSION INFO; protected SessionId sessionId; public SessionInfo() { sessionId = new SessionId(); } public SessionInfo(ConnectionInfo connectionInfo, long sessionId) { this sessionId = new SessionId(connectionInfo getConnectionId(), sessionId); } public SessionInfo(SessionId sessionId) { this sessionId = sessionId; } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public SessionId getSessionId() { return sessionId; } public void setSessionId(SessionId sessionId) { this sessionId = sessionId; } public RemoveInfo createRemoveCommand() { RemoveInfo command = new RemoveInfo(getSessionId()); command setResponseRequired(isResponseRequired()); return command; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processAddSession(this); } }",1.0,
675,675,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ShutdownInfo.,ShutdownInfo,public class ShutdownInfo extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes SHUTDOWN INFO; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processShutdown(this); } public boolean isShutdownInfo() { return true; } },1.0,
677,677,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\TransactionId.,TransactionId,public abstract class TransactionId implements DataStructure { public abstract boolean isXATransaction(); public abstract boolean isLocalTransaction(); public abstract String getTransactionKey(); public boolean isMarshallAware() { return false; } },1.0,
681,681,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\AnyChildDestinationNode.,AnyChildDestinationNode,"public class AnyChildDestinationNode implements DestinationNode { private DestinationNode node; public AnyChildDestinationNode(DestinationNode node) { this node = node; } public void appendMatchingValues(Set answer, String[] paths, int startIndex) { Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); child appendMatchingValues(answer, paths, startIndex); } } public void appendMatchingWildcards(Set answer, String[] paths, int startIndex) { Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); child appendMatchingWildcards(answer, paths, startIndex); } } public void appendDescendantValues(Set answer) { Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); child appendDescendantValues(answer); } } public DestinationNode getChild(String path) { final Collection list = new ArrayList(); Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); DestinationNode answer = child getChild(path); if (answer != null) { list add(answer); } } if (!list isEmpty()) { return new AnyChildDestinationNode(this) { protected Collection getChildNodes() { return list; } }; } return null; } public Collection getDesendentValues() { Collection answer = new ArrayList(); Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); answer addAll(child getDesendentValues()); } return answer; } public Collection getValues() { Collection answer = new ArrayList(); Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); answer addAll(child getValues()); } return answer; } public Collection getChildren() { Collection answer = new ArrayList(); Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); answer addAll(child getChildren()); } return answer; } public Collection removeDesendentValues() { Collection answer = new ArrayList(); Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); answer addAll(child removeDesendentValues()); } return answer; } public Collection removeValues() { Collection answer = new ArrayList(); Iterator iter = getChildNodes() iterator(); while (iter hasNext()) { DestinationNode child = (DestinationNode) iter next(); answer addAll(child removeValues()); } return answer; } protected Collection getChildNodes() { return node getChildren(); } }",1.0,
683,683,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\ArithmeticExpression.,ArithmeticExpression,"public abstract class ArithmeticExpression extends BinaryExpression { protected static final int INTEGER = 1; protected static final int LONG = 2; protected static final int DOUBLE = 3; public ArithmeticExpression(Expression left, Expression right) { super(left, right); } public static Expression createPlus(Expression left, Expression right) { return new ArithmeticExpression(left, right) { protected Object evaluate(Object lvalue, Object rvalue) { if (lvalue instanceof String) { String text = (String)lvalue; String answer = text + rvalue; return answer; } else if (lvalue instanceof Number) { return plus((Number)lvalue, asNumber(rvalue)); } throw new RuntimeException( Cannot call plus operation on + lvalue + and + rvalue); } public String getExpressionSymbol() { return + ; } }; } public static Expression createMinus(Expression left, Expression right) { return new ArithmeticExpression(left, right) { protected Object evaluate(Object lvalue, Object rvalue) { if (lvalue instanceof Number) { return minus((Number)lvalue, asNumber(rvalue)); } throw new RuntimeException( Cannot call minus operation on + lvalue + and + rvalue); } public String getExpressionSymbol() { return - ; } }; } public static Expression createMultiply(Expression left, Expression right) { return new ArithmeticExpression(left, right) { protected Object evaluate(Object lvalue, Object rvalue) { if (lvalue instanceof Number) { return multiply((Number)lvalue, asNumber(rvalue)); } throw new RuntimeException( Cannot call multiply operation on + lvalue + and + rvalue); } public String getExpressionSymbol() { return * ; } }; } public static Expression createDivide(Expression left, Expression right) { return new ArithmeticExpression(left, right) { protected Object evaluate(Object lvalue, Object rvalue) { if (lvalue instanceof Number) { return divide((Number)lvalue, asNumber(rvalue)); } throw new RuntimeException( Cannot call divide operation on + lvalue + and + rvalue); } public String getExpressionSymbol() { return / ; } }; } public static Expression createMod(Expression left, Expression right) { return new ArithmeticExpression(left, right) { protected Object evaluate(Object lvalue, Object rvalue) { if (lvalue instanceof Number) { return mod((Number)lvalue, asNumber(rvalue)); } throw new RuntimeException( Cannot call mod operation on + lvalue + and + rvalue); } public String getExpressionSymbol() { return % ; } }; } protected Number plus(Number left, Number right) { switch (numberType(left, right)) { case INTEGER return new Integer(left intValue() + right intValue()); case LONG return new Long(left longValue() + right longValue()); default return new Double(left doubleValue() + right doubleValue()); } } protected Number minus(Number left, Number right) { switch (numberType(left, right)) { case INTEGER return new Integer(left intValue() - right intValue()); case LONG return new Long(left longValue() - right longValue()); default return new Double(left doubleValue() - right doubleValue()); } } protected Number multiply(Number left, Number right) { switch (numberType(left, right)) { case INTEGER return new Integer(left intValue() * right intValue()); case LONG return new Long(left longValue() * right longValue()); default return new Double(left doubleValue() * right doubleValue()); } } protected Number divide(Number left, Number right) { return new Double(left doubleValue() / right doubleValue()); } protected Number mod(Number left, Number right) { return new Double(left doubleValue() % right doubleValue()); } private int numberType(Number left, Number right) { if (isDouble(left) || isDouble(right)) { return DOUBLE; } else if (left instanceof Long || right instanceof Long) { return LONG; } else { return INTEGER; } } private boolean isDouble(Number n) { return n instanceof Float || n instanceof Double; } protected Number asNumber(Object value) { if (value instanceof Number) { return (Number)value; } else { throw new RuntimeException( Cannot convert value + value + into a number ); } } public Object evaluate(MessageEvaluationContext message) throws JMSException { Object lvalue = left evaluate(message); if (lvalue == null) { return null; } Object rvalue = right evaluate(message); if (rvalue == null) { return null; } return evaluate(lvalue, rvalue); } protected abstract Object evaluate(Object lvalue, Object rvalue); }",1.0,
684,684,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\BinaryExpression.,BinaryExpression,"public abstract class BinaryExpression implements Expression { protected Expression left; protected Expression right; public BinaryExpression(Expression left, Expression right) { this left = left; this right = right; } public Expression getLeft() { return left; } public Expression getRight() { return right; } public String toString() { return ( + left toString() + + getExpressionSymbol() + + right toString() + ) ; } public int hashCode() { return toString() hashCode(); } public boolean equals(Object o) { if (o == null || !this getClass() equals(o getClass())) { return false; } return toString() equals(o toString()); } public abstract String getExpressionSymbol(); public void setRight(Expression expression) { right = expression; } public void setLeft(Expression expression) { left = expression; } }",1.0,
688,688,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\ConstantExpression.,ConstantExpression,"public class ConstantExpression implements Expression { static class BooleanConstantExpression extends ConstantExpression implements BooleanExpression { public BooleanConstantExpression(Object value) { super(value); } public boolean matches(MessageEvaluationContext message) throws JMSException { Object object = evaluate(message); return object != null && object == Boolean TRUE; } } public static final BooleanConstantExpression NULL = new BooleanConstantExpression(null); public static final BooleanConstantExpression TRUE = new BooleanConstantExpression(Boolean TRUE); public static final BooleanConstantExpression FALSE = new BooleanConstantExpression(Boolean FALSE); private Object value; public ConstantExpression(Object value) { this value = value; } public static ConstantExpression createFromDecimal(String text) { if (text endsWith( l ) || text endsWith( L )) { text = text substring(0, text length() - 1); } Number value; try { value = new Long(text); } catch (NumberFormatException e) { value = new BigDecimal(text); } long l = value longValue(); if (Integer MIN VALUE <= l && l <= Integer MAX VALUE) { value = Integer valueOf(value intValue()); } return new ConstantExpression(value); } public static ConstantExpression createFromHex(String text) { Number value = Long valueOf(Long parseLong(text substring(2), 16)); long l = value longValue(); if (Integer MIN VALUE <= l && l <= Integer MAX VALUE) { value = Integer valueOf(value intValue()); } return new ConstantExpression(value); } public static ConstantExpression createFromOctal(String text) { Number value = Long valueOf(Long parseLong(text, 8)); long l = value longValue(); if (Integer MIN VALUE <= l && l <= Integer MAX VALUE) { value = Integer valueOf(value intValue()); } return new ConstantExpression(value); } public static ConstantExpression createFloat(String text) { Number value = new Double(text); return new ConstantExpression(value); } public Object evaluate(MessageEvaluationContext message) throws JMSException { return value; } public Object getValue() { return value; } public String toString() { if (value == null) { return NULL ; } if (value instanceof Boolean) { return ((Boolean)value) booleanValue() TRUE FALSE ; } if (value instanceof String) { return encodeString((String)value); } return value toString(); } public int hashCode() { return toString() hashCode(); } public boolean equals(Object o) { if (o == null || !this getClass() equals(o getClass())) { return false; } return toString() equals(o toString()); } public static String encodeString(String s) { StringBuffer b = new StringBuffer(); b append( ); for (int i = 0; i < s length(); i++) { char c = s charAt(i); if (c == ) { b append(c); } b append(c); } b append( ); return b toString(); } }",1.0,
689,689,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\ConstantExpression.,BooleanConstantExpression,static class BooleanConstantExpression extends ConstantExpression implements BooleanExpression { public BooleanConstantExpression(Object value) { super(value); } public boolean matches(MessageEvaluationContext message) throws JMSException { Object object = evaluate(message); return object != null && object == Boolean TRUE; } },1.0,
690,690,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\DefaultDestinationMapEntry.,DefaultDestinationMapEntry,public class DefaultDestinationMapEntry extends DestinationMapEntry { private DestinationMapEntry value; public DestinationMapEntry getValue() { return value; } public void setValue(DestinationMapEntry value) { this value = value; } },1.0,
691,691,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\DestinationFilter.,DestinationFilter,"public abstract class DestinationFilter implements BooleanExpression { public static final String ANY DESCENDENT = > ; public static final String ANY CHILD = * ; public Object evaluate(MessageEvaluationContext message) throws JMSException { return matches(message) Boolean TRUE Boolean FALSE; } public boolean matches(MessageEvaluationContext message) throws JMSException { try { if (message isDropped()) { return false; } return matches(message getMessage() getDestination()); } catch (IOException e) { throw JMSExceptionSupport create(e); } } public abstract boolean matches(ActiveMQDestination destination); public static DestinationFilter parseFilter(ActiveMQDestination destination) { if (destination isComposite()) { return new CompositeDestinationFilter(destination); } String[] paths = DestinationPath getDestinationPaths(destination); int idx = paths length - 1; if (idx >= 0) { String lastPath = paths[idx]; if (lastPath equals(ANY DESCENDENT)) { return new PrefixDestinationFilter(paths, destination getDestinationType()); } else { while (idx >= 0) { lastPath = paths[idx--]; if (lastPath equals(ANY CHILD)) { return new WildcardDestinationFilter(paths, destination getDestinationType()); } } } } return new SimpleDestinationFilter(destination); } }",1.0,
694,694,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\DestinationMapNode.,DestinationMapNode,"public class DestinationMapNode implements DestinationNode { protected static final String ANY CHILD = DestinationMap ANY CHILD; protected static final String ANY DESCENDENT = DestinationMap ANY DESCENDENT; private DestinationMapNode parent; private List<Object> values = new ArrayList<Object>(); private Map<String, DestinationNode> childNodes = new HashMap<String, DestinationNode>(); private String path = Root ; private int pathLength; public DestinationMapNode(DestinationMapNode parent) { this parent = parent; if (parent == null) { pathLength = 0; } else { pathLength = parent pathLength + 1; } } public DestinationNode getChild(String path) { return childNodes get(path); } public Collection<DestinationNode> getChildren() { return childNodes values(); } public int getChildCount() { return childNodes size(); } public DestinationMapNode getChildOrCreate(String path) { DestinationMapNode answer = (DestinationMapNode)childNodes get(path); if (answer == null) { answer = createChildNode(); answer path = path; childNodes put(path, answer); } return answer; } SuppressWarnings({ rawtypes , unchecked }) public List getValues() { return values; } SuppressWarnings({ rawtypes , unchecked }) public List removeValues() { ArrayList v = new ArrayList(values); values clear(); pruneIfEmpty(); return v; } SuppressWarnings({ rawtypes , unchecked }) public Set removeDesendentValues() { Set answer = new HashSet(); removeDesendentValues(answer); return answer; } SuppressWarnings({ rawtypes , unchecked }) protected void removeDesendentValues(Set answer) { answer addAll(removeValues()); } SuppressWarnings({ rawtypes , unchecked }) public Set getDesendentValues() { Set answer = new HashSet(); appendDescendantValues(answer); return answer; } public void add(String[] paths, int idx, Object value) { if (idx >= paths length) { values add(value); } else { getChildOrCreate(paths[idx]) add(paths, idx + 1, value); } } public void remove(String[] paths, int idx, Object value) { if (idx >= paths length) { values remove(value); pruneIfEmpty(); } else { getChildOrCreate(paths[idx]) remove(paths, ++idx, value); } } public void removeAll(Set<DestinationNode> answer, String[] paths, int startIndex) { DestinationNode node = this; int size = paths length; for (int i = startIndex; i < size && node != null; i++) { String path = paths[i]; if (path equals(ANY DESCENDENT)) { answer addAll(node removeDesendentValues()); break; } node appendMatchingWildcards(answer, paths, i); if (path equals(ANY CHILD)) { node = new AnyChildDestinationNode(node); } else { node = node getChild(path); } } if (node != null) { answer addAll(node removeValues()); } } SuppressWarnings({ rawtypes , unchecked }) public void appendDescendantValues(Set answer) { answer addAll(values); for(DestinationNode child childNodes values()) { child appendDescendantValues(answer); } } protected DestinationMapNode createChildNode() { return new DestinationMapNode(this); } SuppressWarnings({ rawtypes , unchecked }) public void appendMatchingWildcards(Set answer, String[] paths, int idx) { if (idx - 1 > pathLength) { return; } DestinationNode wildCardNode = getChild(ANY CHILD); if (wildCardNode != null) { wildCardNode appendMatchingValues(answer, paths, idx + 1); } wildCardNode = getChild(ANY DESCENDENT); if (wildCardNode != null) { answer addAll(wildCardNode getDesendentValues()); } } public void appendMatchingValues(Set<DestinationNode> answer, String[] paths, int startIndex) { DestinationNode node = this; boolean couldMatchAny = true; int size = paths length; for (int i = startIndex; i < size && node != null; i++) { String path = paths[i]; if (path equals(ANY DESCENDENT)) { answer addAll(node getDesendentValues()); couldMatchAny = false; break; } node appendMatchingWildcards(answer, paths, i); if (path equals(ANY CHILD)) { node = new AnyChildDestinationNode(node); } else { node = node getChild(path); } } if (node != null) { answer addAll(node getValues()); if (couldMatchAny) { DestinationNode child = node getChild(ANY DESCENDENT); if (child != null) { answer addAll(child getValues()); } } } } public String getPath() { return path; } protected void pruneIfEmpty() { if (parent != null && childNodes isEmpty() && values isEmpty()) { parent removeChild(this); } } protected void removeChild(DestinationMapNode node) { childNodes remove(node getPath()); pruneIfEmpty(); } }",1.0,
695,695,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\DestinationPath.,DestinationPath,"public final class DestinationPath { protected static final char SEPARATOR = ; private DestinationPath() { } public static String[] getDestinationPaths(String subject) { List<String> list = new ArrayList<String>(); int previous = 0; int lastIndex = subject length() - 1; while (true) { int idx = subject indexOf(SEPARATOR, previous); if (idx < 0) { list add(subject substring(previous, lastIndex + 1)); break; } list add(subject substring(previous, idx)); previous = idx + 1; } String[] answer = new String[list size()]; list toArray(answer); return answer; } public static String[] getDestinationPaths(Message message) throws JMSException { return getDestinationPaths(message getDestination()); } public static String[] getDestinationPaths(ActiveMQDestination destination) { return getDestinationPaths(destination getPhysicalName()); } public static String toString(String[] paths) { StringBuffer buffer = new StringBuffer(); for (int i = 0; i < paths length; i++) { if (i > 0) { buffer append(SEPARATOR); } String path = paths[i]; if (path == null) { buffer append( * ); } else { buffer append(path); } } return buffer toString(); } }",1.0,
696,696,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\LogicExpression.,LogicExpression,"public abstract class LogicExpression extends BinaryExpression implements BooleanExpression { public LogicExpression(BooleanExpression left, BooleanExpression right) { super(left, right); } public static BooleanExpression createOR(BooleanExpression lvalue, BooleanExpression rvalue) { return new LogicExpression(lvalue, rvalue) { public Object evaluate(MessageEvaluationContext message) throws JMSException { Boolean lv = (Boolean)left evaluate(message); if (lv != null && lv booleanValue()) { return Boolean TRUE; } Boolean rv = (Boolean)right evaluate(message); return rv == null null rv; } public String getExpressionSymbol() { return OR ; } }; } public static BooleanExpression createAND(BooleanExpression lvalue, BooleanExpression rvalue) { return new LogicExpression(lvalue, rvalue) { public Object evaluate(MessageEvaluationContext message) throws JMSException { Boolean lv = (Boolean)left evaluate(message); if (lv == null) { return null; } if (!lv booleanValue()) { return Boolean FALSE; } Boolean rv = (Boolean)right evaluate(message); return rv == null null rv; } public String getExpressionSymbol() { return AND ; } }; } public abstract Object evaluate(MessageEvaluationContext message) throws JMSException; public boolean matches(MessageEvaluationContext message) throws JMSException { Object object = evaluate(message); return object != null && object == Boolean TRUE; } }",1.0,
698,698,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\MultiExpressionEvaluator.,MultiExpressionEvaluator,"public class MultiExpressionEvaluator { Map<String, ExpressionListenerSet> rootExpressions = new HashMap<String, ExpressionListenerSet>(); Map<Expression, CacheExpression> cachedExpressions = new HashMap<Expression, CacheExpression>(); int view; public class CacheExpression extends UnaryExpression { short refCount; int cview = view - 1; Object cachedValue; int cachedHashCode; public CacheExpression(Expression realExpression) { super(realExpression); cachedHashCode = realExpression hashCode(); } public Object evaluate(MessageEvaluationContext message) throws JMSException { if (view == cview) { return cachedValue; } cachedValue = right evaluate(message); cview = view; return cachedValue; } public int hashCode() { return cachedHashCode; } public boolean equals(Object o) { if (o == null) { return false; } return ((CacheExpression)o) right equals(right); } public String getExpressionSymbol() { return null; } public String toString() { return right toString(); } } static class ExpressionListenerSet { Expression expression; List<ExpressionListener> listeners = new ArrayList<ExpressionListener>(); } static interface ExpressionListener { void evaluateResultEvent(Expression selector, MessageEvaluationContext message, Object result); } public void addExpressionListner(Expression selector, ExpressionListener c) { ExpressionListenerSet data = rootExpressions get(selector toString()); if (data == null) { data = new ExpressionListenerSet(); data expression = addToCache(selector); rootExpressions put(selector toString(), data); } data listeners add(c); } public boolean removeEventListner(String selector, ExpressionListener c) { String expKey = selector; ExpressionListenerSet d = rootExpressions get(expKey); if (d == null) { return false; } if (!d listeners remove(c)) { return false; } if (d listeners size() == 0) { removeFromCache((CacheExpression)d expression); rootExpressions remove(expKey); } return true; } private CacheExpression addToCache(Expression expr) { CacheExpression n = cachedExpressions get(expr); if (n == null) { n = new CacheExpression(expr); cachedExpressions put(expr, n); if (expr instanceof UnaryExpression) { UnaryExpression un = (UnaryExpression)expr; un setRight(addToCache(un getRight())); } else if (expr instanceof BinaryExpression) { BinaryExpression bn = (BinaryExpression)expr; bn setRight(addToCache(bn getRight())); bn setLeft(addToCache(bn getLeft())); } } n refCount++; return n; } private void removeFromCache(CacheExpression cn) { cn refCount--; Expression realExpr = cn getRight(); if (cn refCount == 0) { cachedExpressions remove(realExpr); } if (realExpr instanceof UnaryExpression) { UnaryExpression un = (UnaryExpression)realExpr; removeFromCache((CacheExpression)un getRight()); } if (realExpr instanceof BinaryExpression) { BinaryExpression bn = (BinaryExpression)realExpr; removeFromCache((CacheExpression)bn getRight()); } } public void evaluate(MessageEvaluationContext message) { Collection<ExpressionListenerSet> expressionListeners = rootExpressions values(); for (Iterator<ExpressionListenerSet> iter = expressionListeners iterator(); iter hasNext();) { ExpressionListenerSet els = iter next(); try { Object result = els expression evaluate(message); for (Iterator<ExpressionListener> iterator = els listeners iterator(); iterator hasNext();) { ExpressionListener l = iterator next(); l evaluateResultEvent(els expression, message, result); } } catch (Throwable e) { e printStackTrace(); } } } }",1.0,
699,699,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\MultiExpressionEvaluator.,CacheExpression,public class CacheExpression extends UnaryExpression { short refCount; int cview = view - 1; Object cachedValue; int cachedHashCode; public CacheExpression(Expression realExpression) { super(realExpression); cachedHashCode = realExpression hashCode(); } public Object evaluate(MessageEvaluationContext message) throws JMSException { if (view == cview) { return cachedValue; } cachedValue = right evaluate(message); cview = view; return cachedValue; } public int hashCode() { return cachedHashCode; } public boolean equals(Object o) { if (o == null) { return false; } return ((CacheExpression)o) right equals(right); } public String getExpressionSymbol() { return null; } public String toString() { return right toString(); } },1.0,
700,700,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\MultiExpressionEvaluator.,ExpressionListenerSet,static class ExpressionListenerSet { Expression expression; List<ExpressionListener> listeners = new ArrayList<ExpressionListener>(); },1.0,
701,701,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\NoLocalExpression.,NoLocalExpression,public class NoLocalExpression implements BooleanExpression { private final String connectionId; public NoLocalExpression(String connectionId) { this connectionId = connectionId; } public boolean matches(MessageEvaluationContext message) throws JMSException { try { if (message isDropped()) { return false; } String messageConnectionId = message getMessage() getProducerId() getConnectionId(); return !connectionId equals(messageConnectionId); } catch (IOException e) { throw JMSExceptionSupport create(e); } } public Object evaluate(MessageEvaluationContext message) throws JMSException { return matches(message) Boolean TRUE Boolean FALSE; } },1.0,
702,702,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\NonCachedMessageEvaluationContext.,NonCachedMessageEvaluationContext,public class NonCachedMessageEvaluationContext extends MessageEvaluationContext { public Message getMessage() throws IOException { return messageReference != null messageReference getMessage() null; } public void setMessageReference(MessageReference messageReference) { this messageReference = messageReference; } protected void clearMessageCache() { } },1.0,
703,703,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\PrefixDestinationFilter.,PrefixDestinationFilter,"public class PrefixDestinationFilter extends DestinationFilter { private String[] prefixes; private byte destinationType; public PrefixDestinationFilter(String[] prefixes, byte destinationType) { this prefixes = prefixes; this destinationType = destinationType; } public boolean matches(ActiveMQDestination destination) { if (destination getDestinationType() != destinationType) return false; String[] path = DestinationPath getDestinationPaths(destination getPhysicalName()); int length = prefixes length; if (path length >= length) { int size = length - 1; for (int i = 0; i < size; i++) { if (!path[i] equals(ANY CHILD) && !prefixes[i] equals(ANY CHILD) && !prefixes[i] equals(path[i])) { return false; } } return true; } return false; } public String getText() { return DestinationPath toString(prefixes); } public String toString() { return super toString() + [destination + getText() + ] ; } public boolean isWildcard() { return true; } }",1.0,
707,707,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\UnaryExpression.,BooleanUnaryExpression,abstract static class BooleanUnaryExpression extends UnaryExpression implements BooleanExpression { public BooleanUnaryExpression(Expression left) { super(left); } public boolean matches(MessageEvaluationContext message) throws JMSException { Object object = evaluate(message); return object != null && object == Boolean TRUE; } };,1.0,
708,708,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\WildcardDestinationFilter.,WildcardDestinationFilter,"public class WildcardDestinationFilter extends DestinationFilter { private String[] prefixes; private byte destinationType; public WildcardDestinationFilter(String[] prefixes, byte destinationType) { this prefixes = new String[prefixes length]; for (int i = 0; i < prefixes length; i++) { String prefix = prefixes[i]; if (!prefix equals( * )) { this prefixes[i] = prefix; } } this destinationType = destinationType; } public boolean matches(ActiveMQDestination destination) { if (destination getDestinationType() != destinationType) return false; String[] path = DestinationPath getDestinationPaths(destination); int length = prefixes length; if (path length == length) { for (int i = 0; i < length; i++) { String prefix = prefixes[i]; if (prefix != null && !prefix equals(path[i])) { return false; } } return true; } return false; } public String getText() { return DestinationPath toString(prefixes); } public String toString() { return super toString() + [destination + getText() + ] ; } public boolean isWildcard() { return true; } }",1.0,
710,710,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\filter\XQueryExpression.,XQueryExpression,public final class XQueryExpression implements BooleanExpression { private final String xpath; XQueryExpression(String xpath) { super(); this xpath = xpath; } public Object evaluate(MessageEvaluationContext message) throws JMSException { return Boolean FALSE; } public String toString() { return XQUERY + ConstantExpression encodeString(xpath); } public boolean matches(MessageEvaluationContext message) throws JMSException { Object object = evaluate(message); return object != null && object == Boolean TRUE; } },1.0,
713,713,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\jndi\JNDIBaseStorable.,JNDIBaseStorable,"public abstract class JNDIBaseStorable implements JNDIStorableInterface, Externalizable { private Properties properties; protected abstract void buildFromProperties(Properties props); protected abstract void populateProperties(Properties props); public synchronized void setProperties(Properties props) { this properties = props; buildFromProperties(props); } public synchronized Properties getProperties() { if (this properties == null) { this properties = new Properties(); } populateProperties(this properties); return this properties; } public Reference getReference() throws NamingException { return JNDIReferenceFactory createReference(this getClass() getName(), this); } public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { Properties props = (Properties)in readObject(); if (props != null) { setProperties(props); } } public void writeExternal(ObjectOutput out) throws IOException { out writeObject(getProperties()); } }",1.0,
714,714,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\jndi\JNDIReferenceFactory.,JNDIReferenceFactory,"public class JNDIReferenceFactory implements ObjectFactory { static Logger log = LoggerFactory getLogger(JNDIReferenceFactory class); public Object getObjectInstance(Object object, Name name, Context nameCtx, Hashtable environment) throws Exception { Object result = null; if (object instanceof Reference) { Reference reference = (Reference)object; if (log isTraceEnabled()) { log trace( Getting instance of + reference getClassName()); } Class theClass = loadClass(this, reference getClassName()); if (JNDIStorableInterface class isAssignableFrom(theClass)) { JNDIStorableInterface store = (JNDIStorableInterface)theClass newInstance(); Properties properties = new Properties(); for (Enumeration iter = reference getAll(); iter hasMoreElements();) { StringRefAddr addr = (StringRefAddr)iter nextElement(); properties put(addr getType(), (addr getContent() == null) addr getContent()); } store setProperties(properties); result = store; } } else { log error( Object + object + is not a reference - cannot load ); throw new RuntimeException( Object + object + is not a reference ); } return result; } public static Reference createReference(String instanceClassName, JNDIStorableInterface po) throws NamingException { if (log isTraceEnabled()) { log trace( Creating reference + instanceClassName + , + po); } Reference result = new Reference(instanceClassName, JNDIReferenceFactory class getName(), null); try { Properties props = po getProperties(); for (Enumeration iter = props propertyNames(); iter hasMoreElements();) { String key = (String)iter nextElement(); String value = props getProperty(key); javax naming StringRefAddr addr = new javax naming StringRefAddr(key, value); result add(addr); } } catch (Exception e) { log error(e getMessage(), e); throw new NamingException(e getMessage()); } return result; } public static Class loadClass(Object thisObj, String className) throws ClassNotFoundException { ClassLoader loader = thisObj getClass() getClassLoader(); Class theClass; if (loader != null) { theClass = loader loadClass(className); } else { theClass = Class forName(className); } return theClass; } }",1.0,
715,715,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\jndi\LazyCreateContext.,LazyCreateContext,"public abstract class LazyCreateContext extends ReadOnlyContext { public Object lookup(String name) throws NamingException { try { return super lookup(name); } catch (NameNotFoundException e) { Object answer = createEntry(name); if (answer == null) { throw e; } internalBind(name, answer); return answer; } } protected abstract Object createEntry(String name); }",1.0,
716,716,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\jndi\NameParserImpl.,NameParserImpl,public class NameParserImpl implements NameParser { public Name parse(String name) throws NamingException { return new CompositeName(name); } },1.0,
717,717,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\jndi\ReadOnlyContext.,ReadOnlyContext,"public class ReadOnlyContext implements Context, Serializable { private static final Logger LOG = LoggerFactory getLogger(ReadOnlyContext class); public static final String SEPARATOR = / ; protected static final NameParser NAME PARSER = new NameParserImpl(); private static final long serialVersionUID = -5754338187296859149L; protected final Hashtable<String, Object> environment; protected final Map<String, Object> bindings; protected final Map<String, Object> treeBindings; private boolean frozen; private String nameInNamespace = ; public ReadOnlyContext() { environment = new Hashtable<String, Object>(); bindings = new HashMap<String, Object>(); treeBindings = new HashMap<String, Object>(); } public ReadOnlyContext(Hashtable env) { if (env == null) { this environment = new Hashtable<String, Object>(); } else { this environment = new Hashtable<String, Object>(env); } this bindings = Collections EMPTY MAP; this treeBindings = Collections EMPTY MAP; } public ReadOnlyContext(Hashtable environment, Map<String, Object> bindings) { if (environment == null) { this environment = new Hashtable<String, Object>(); } else { this environment = new Hashtable<String, Object>(environment); } this bindings = new HashMap<String, Object>(); treeBindings = new HashMap<String, Object>(); if (bindings != null) { for (Map Entry<String, Object> binding bindings entrySet()) { try { internalBind(binding getKey(), binding getValue()); } catch (Throwable e) { LOG error( Failed to bind + binding getKey() + = + binding getValue(), e); } } } frozen = true; } public ReadOnlyContext(Hashtable environment, Map bindings, String nameInNamespace) { this(environment, bindings); this nameInNamespace = nameInNamespace; } protected ReadOnlyContext(ReadOnlyContext clone, Hashtable env) { this bindings = clone bindings; this treeBindings = clone treeBindings; this environment = new Hashtable<String, Object>(env); } protected ReadOnlyContext(ReadOnlyContext clone, Hashtable<String, Object> env, String nameInNamespace) { this(clone, env); this nameInNamespace = nameInNamespace; } public void freeze() { frozen = true; } boolean isFrozen() { return frozen; } protected Map<String, Object> internalBind(String name, Object value) throws NamingException { assert name != null && name length() > 0; assert !frozen; Map<String, Object> newBindings = new HashMap<String, Object>(); int pos = name indexOf( / ); if (pos == -1) { if (treeBindings put(name, value) != null) { throw new NamingException( Something already bound at + name); } bindings put(name, value); newBindings put(name, value); } else { String segment = name substring(0, pos); assert segment != null; assert !segment equals( ); Object o = treeBindings get(segment); if (o == null) { o = newContext(); treeBindings put(segment, o); bindings put(segment, o); newBindings put(segment, o); } else if (!(o instanceof ReadOnlyContext)) { throw new NamingException( Something already bound where a subcontext should go ); } ReadOnlyContext readOnlyContext = (ReadOnlyContext)o; String remainder = name substring(pos + 1); Map<String, Object> subBindings = readOnlyContext internalBind(remainder, value); for (Iterator iterator = subBindings entrySet() iterator(); iterator hasNext();) { Map Entry entry = (Map Entry)iterator next(); String subName = segment + / + (String)entry getKey(); Object bound = entry getValue(); treeBindings put(subName, bound); newBindings put(subName, bound); } } return newBindings; } protected ReadOnlyContext newContext() { return new ReadOnlyContext(); } public Object addToEnvironment(String propName, Object propVal) throws NamingException { return environment put(propName, propVal); } public Hashtable<String, Object> getEnvironment() throws NamingException { return (Hashtable<String, Object>)environment clone(); } public Object removeFromEnvironment(String propName) throws NamingException { return environment remove(propName); } public Object lookup(String name) throws NamingException { if (name length() == 0) { return this; } Object result = treeBindings get(name); if (result == null) { result = bindings get(name); } if (result == null) { int pos = name indexOf( ); if (pos > 0) { String scheme = name substring(0, pos); Context ctx = NamingManager getURLContext(scheme, environment); if (ctx == null) { throw new NamingException( scheme + scheme + not recognized ); } return ctx lookup(name); } else { CompositeName path = new CompositeName(name); if (path size() == 0) { return this; } else { String first = path get(0); Object obj = bindings get(first); if (obj == null) { throw new NameNotFoundException(name); } else if (obj instanceof Context && path size() > 1) { Context subContext = (Context)obj; obj = subContext lookup(path getSuffix(1)); } return obj; } } } if (result instanceof LinkRef) { LinkRef ref = (LinkRef)result; result = lookup(ref getLinkName()); } if (result instanceof Reference) { try { result = NamingManager getObjectInstance(result, null, null, this environment); } catch (NamingException e) { throw e; } catch (Exception e) { throw (NamingException)new NamingException( could not look up + name) initCause(e); } } if (result instanceof ReadOnlyContext) { String prefix = getNameInNamespace(); if (prefix length() > 0) { prefix = prefix + SEPARATOR; } result = new ReadOnlyContext((ReadOnlyContext)result, environment, prefix + name); } return result; } public Object lookup(Name name) throws NamingException { return lookup(name toString()); } public Object lookupLink(String name) throws NamingException { return lookup(name); } public Name composeName(Name name, Name prefix) throws NamingException { Name result = (Name)prefix clone(); result addAll(name); return result; } public String composeName(String name, String prefix) throws NamingException { CompositeName result = new CompositeName(prefix); result addAll(new CompositeName(name)); return result toString(); } public NamingEnumeration list(String name) throws NamingException { Object o = lookup(name); if (o == this) { return new ListEnumeration(); } else if (o instanceof Context) { return ((Context)o) list( ); } else { throw new NotContextException(); } } public NamingEnumeration listBindings(String name) throws NamingException { Object o = lookup(name); if (o == this) { return new ListBindingEnumeration(); } else if (o instanceof Context) { return ((Context)o) listBindings( ); } else { throw new NotContextException(); } } public Object lookupLink(Name name) throws NamingException { return lookupLink(name toString()); } public NamingEnumeration list(Name name) throws NamingException { return list(name toString()); } public NamingEnumeration listBindings(Name name) throws NamingException { return listBindings(name toString()); } public void bind(Name name, Object obj) throws NamingException { throw new OperationNotSupportedException(); } public void bind(String name, Object obj) throws NamingException { throw new OperationNotSupportedException(); } public void close() throws NamingException { } public Context createSubcontext(Name name) throws NamingException { throw new OperationNotSupportedException(); } public Context createSubcontext(String name) throws NamingException { throw new OperationNotSupportedException(); } public void destroySubcontext(Name name) throws NamingException { throw new OperationNotSupportedException(); } public void destroySubcontext(String name) throws NamingException { throw new OperationNotSupportedException(); } public String getNameInNamespace() throws NamingException { return nameInNamespace; } public NameParser getNameParser(Name name) throws NamingException { return NAME PARSER; } public NameParser getNameParser(String name) throws NamingException { return NAME PARSER; } public void rebind(Name name, Object obj) throws NamingException { throw new OperationNotSupportedException(); } public void rebind(String name, Object obj) throws NamingException { throw new OperationNotSupportedException(); } public void rename(Name oldName, Name newName) throws NamingException { throw new OperationNotSupportedException(); } public void rename(String oldName, String newName) throws NamingException { throw new OperationNotSupportedException(); } public void unbind(Name name) throws NamingException { throw new OperationNotSupportedException(); } public void unbind(String name) throws NamingException { throw new OperationNotSupportedException(); } private abstract class LocalNamingEnumeration implements NamingEnumeration { private final Iterator i = bindings entrySet() iterator(); public boolean hasMore() throws NamingException { return i hasNext(); } public boolean hasMoreElements() { return i hasNext(); } protected Map Entry getNext() { return (Map Entry)i next(); } public void close() throws NamingException { } } private class ListEnumeration extends LocalNamingEnumeration { ListEnumeration() { } public Object next() throws NamingException { return nextElement(); } public Object nextElement() { Map Entry entry = getNext(); return new NameClassPair((String)entry getKey(), entry getValue() getClass() getName()); } } private class ListBindingEnumeration extends LocalNamingEnumeration { ListBindingEnumeration() { } public Object next() throws NamingException { return nextElement(); } public Object nextElement() { Map Entry entry = getNext(); return new Binding((String)entry getKey(), entry getValue()); } } }",1.0,
718,718,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\jndi\ReadOnlyContext.,LocalNamingEnumeration,private abstract class LocalNamingEnumeration implements NamingEnumeration { private final Iterator i = bindings entrySet() iterator(); public boolean hasMore() throws NamingException { return i hasNext(); } public boolean hasMoreElements() { return i hasNext(); } protected Map Entry getNext() { return (Map Entry)i next(); } public void close() throws NamingException { } },1.0,
719,719,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\jndi\ReadOnlyContext.,ListEnumeration,"private class ListEnumeration extends LocalNamingEnumeration { ListEnumeration() { } public Object next() throws NamingException { return nextElement(); } public Object nextElement() { Map Entry entry = getNext(); return new NameClassPair((String)entry getKey(), entry getValue() getClass() getName()); } }",1.0,
720,720,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\jndi\ReadOnlyContext.,ListBindingEnumeration,"private class ListBindingEnumeration extends LocalNamingEnumeration { ListBindingEnumeration() { } public Object next() throws NamingException { return nextElement(); } public Object nextElement() { Map Entry entry = getNext(); return new Binding((String)entry getKey(), entry getValue()); } }",1.0,
721,721,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\BoundaryStatisticImpl.,BoundaryStatisticImpl,"public class BoundaryStatisticImpl extends StatisticImpl { private long lowerBound; private long upperBound; public BoundaryStatisticImpl(String name, String unit, String description, long lowerBound, long upperBound) { super(name, unit, description); this lowerBound = lowerBound; this upperBound = upperBound; } public long getLowerBound() { return lowerBound; } public long getUpperBound() { return upperBound; } protected void appendFieldDescription(StringBuffer buffer) { buffer append( lowerBound ); buffer append(Long toString(lowerBound)); buffer append( upperBound ); buffer append(Long toString(upperBound)); super appendFieldDescription(buffer); } }",1.0,
722,722,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\BoundedRangeStatisticImpl.,BoundedRangeStatisticImpl,"public class BoundedRangeStatisticImpl extends RangeStatisticImpl { private long lowerBound; private long upperBound; public BoundedRangeStatisticImpl(String name, String unit, String description, long lowerBound, long upperBound) { super(name, unit, description); this lowerBound = lowerBound; this upperBound = upperBound; } public long getLowerBound() { return lowerBound; } public long getUpperBound() { return upperBound; } protected void appendFieldDescription(StringBuffer buffer) { buffer append( lowerBound ); buffer append(Long toString(lowerBound)); buffer append( upperBound ); buffer append(Long toString(upperBound)); super appendFieldDescription(buffer); } }",1.0,
723,723,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\CountStatisticImpl.,CountStatisticImpl,"public class CountStatisticImpl extends StatisticImpl implements CountStatistic { private final AtomicLong counter = new AtomicLong(0); private CountStatisticImpl parent; public CountStatisticImpl(CountStatisticImpl parent, String name, String description) { this(name, description); this parent = parent; } public CountStatisticImpl(String name, String description) { this(name, count , description); } public CountStatisticImpl(String name, String unit, String description) { super(name, unit, description); } public void reset() { if (isDoReset()) { super reset(); counter set(0); } } public long getCount() { return counter get(); } public void setCount(long count) { if (isEnabled()) { counter set(count); } } public void add(long amount) { if (isEnabled()) { counter addAndGet(amount); updateSampleTime(); if (parent != null) { parent add(amount); } } } public void increment() { if (isEnabled()) { counter incrementAndGet(); updateSampleTime(); if (parent != null) { parent increment(); } } } public void subtract(long amount) { if (isEnabled()) { counter addAndGet(-amount); updateSampleTime(); if (parent != null) { parent subtract(amount); } } } public void decrement() { if (isEnabled()) { counter decrementAndGet(); updateSampleTime(); if (parent != null) { parent decrement(); } } } public CountStatisticImpl getParent() { return parent; } public void setParent(CountStatisticImpl parent) { this parent = parent; } protected void appendFieldDescription(StringBuffer buffer) { buffer append( count ); buffer append(Long toString(counter get())); super appendFieldDescription(buffer); } public double getPeriod() { double count = counter get(); if (count == 0) { return 0; } double time = System currentTimeMillis() - getStartTime(); return time / (count * 1000 0); } public double getFrequency() { double count = counter get(); double time = System currentTimeMillis() - getStartTime(); return count * 1000 0 / time; } }",1.0,
724,724,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\JCAConnectionPoolStatsImpl.,JCAConnectionPoolStatsImpl,"public class JCAConnectionPoolStatsImpl extends JCAConnectionStatsImpl { private CountStatisticImpl closeCount; private CountStatisticImpl createCount; private BoundedRangeStatisticImpl freePoolSize; private BoundedRangeStatisticImpl poolSize; private RangeStatisticImpl waitingThreadCount; public JCAConnectionPoolStatsImpl(String connectionFactory, String managedConnectionFactory, TimeStatisticImpl waitTime, TimeStatisticImpl useTime, CountStatisticImpl closeCount, CountStatisticImpl createCount, BoundedRangeStatisticImpl freePoolSize, BoundedRangeStatisticImpl poolSize, RangeStatisticImpl waitingThreadCount) { super(connectionFactory, managedConnectionFactory, waitTime, useTime); this closeCount = closeCount; this createCount = createCount; this freePoolSize = freePoolSize; this poolSize = poolSize; this waitingThreadCount = waitingThreadCount; addStatistic( freePoolSize , freePoolSize); addStatistic( poolSize , poolSize); addStatistic( waitingThreadCount , waitingThreadCount); } public CountStatisticImpl getCloseCount() { return closeCount; } public CountStatisticImpl getCreateCount() { return createCount; } public BoundedRangeStatisticImpl getFreePoolSize() { return freePoolSize; } public BoundedRangeStatisticImpl getPoolSize() { return poolSize; } public RangeStatisticImpl getWaitingThreadCount() { return waitingThreadCount; } }",1.0,
725,725,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\JCAConnectionStatsImpl.,JCAConnectionStatsImpl,"public class JCAConnectionStatsImpl extends StatsImpl { private String connectionFactory; private String managedConnectionFactory; private TimeStatisticImpl waitTime; private TimeStatisticImpl useTime; public JCAConnectionStatsImpl(String connectionFactory, String managedConnectionFactory, TimeStatisticImpl waitTime, TimeStatisticImpl useTime) { this connectionFactory = connectionFactory; this managedConnectionFactory = managedConnectionFactory; this waitTime = waitTime; this useTime = useTime; addStatistic( waitTime , waitTime); addStatistic( useTime , useTime); } public String getConnectionFactory() { return connectionFactory; } public String getManagedConnectionFactory() { return managedConnectionFactory; } public TimeStatisticImpl getWaitTime() { return waitTime; } public TimeStatisticImpl getUseTime() { return useTime; } }",1.0,
727,727,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\JMSConnectionStatsImpl.,JMSConnectionStatsImpl,"public class JMSConnectionStatsImpl extends StatsImpl { private List sessions; private boolean transactional; public JMSConnectionStatsImpl(List sessions, boolean transactional) { this sessions = sessions; this transactional = transactional; } public JMSSessionStatsImpl[] getSessions() { Object[] sessionArray = sessions toArray(); int size = sessionArray length; JMSSessionStatsImpl[] answer = new JMSSessionStatsImpl[size]; for (int i = 0; i < size; i++) { ActiveMQSession session = (ActiveMQSession)sessionArray[i]; answer[i] = session getSessionStats(); } return answer; } public void reset() { super reset(); JMSSessionStatsImpl[] stats = getSessions(); int size = stats length; for (int i = 0; i < size; i++) { stats[i] reset(); } } public void setEnabled(boolean enabled) { super setEnabled(enabled); JMSSessionStatsImpl[] stats = getSessions(); int size = stats length; for (int i = 0; i < size; i++) { stats[i] setEnabled(enabled); } } public boolean isTransactional() { return transactional; } public String toString() { StringBuffer buffer = new StringBuffer( connection{ ); JMSSessionStatsImpl[] array = getSessions(); for (int i = 0; i < array length; i++) { if (i > 0) { buffer append( , ); } buffer append(Integer toString(i)); buffer append( = ); buffer append(array[i]); } buffer append( } ); return buffer toString(); } public void dump(IndentPrinter out) { out printIndent(); out println( connection { ); out incrementIndent(); JMSSessionStatsImpl[] array = getSessions(); for (int i = 0; i < array length; i++) { JMSSessionStatsImpl sessionStat = (JMSSessionStatsImpl)array[i]; out printIndent(); out println( session { ); out incrementIndent(); sessionStat dump(out); out decrementIndent(); out printIndent(); out println( } ); } out decrementIndent(); out printIndent(); out println( } ); out flush(); } }",1.0,
728,728,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\JMSConsumerStatsImpl.,JMSConsumerStatsImpl,"public class JMSConsumerStatsImpl extends JMSEndpointStatsImpl { private String origin; public JMSConsumerStatsImpl(JMSSessionStatsImpl sessionStats, Destination destination) { super(sessionStats); if (destination != null) { this origin = destination toString(); } } public JMSConsumerStatsImpl(CountStatisticImpl messageCount, CountStatisticImpl pendingMessageCount, CountStatisticImpl expiredMessageCount, TimeStatisticImpl messageWaitTime, TimeStatisticImpl messageRateTime, String origin) { super(messageCount, pendingMessageCount, expiredMessageCount, messageWaitTime, messageRateTime); this origin = origin; } public String getOrigin() { return origin; } public String toString() { StringBuffer buffer = new StringBuffer(); buffer append( consumer ); buffer append(origin); buffer append( { ); buffer append(super toString()); buffer append( } ); return buffer toString(); } public void dump(IndentPrinter out) { out printIndent(); out print( consumer ); out print(origin); out println( { ); out incrementIndent(); super dump(out); out decrementIndent(); out printIndent(); out println( } ); } }",1.0,
729,729,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\JMSEndpointStatsImpl.,JMSEndpointStatsImpl,"public class JMSEndpointStatsImpl extends StatsImpl { private static final Logger LOG = LoggerFactory getLogger(JMSEndpointStatsImpl class); protected CountStatisticImpl messageCount; protected CountStatisticImpl pendingMessageCount; protected CountStatisticImpl expiredMessageCount; protected TimeStatisticImpl messageWaitTime; protected TimeStatisticImpl messageRateTime; public JMSEndpointStatsImpl(JMSSessionStatsImpl sessionStats) { this(); setParent(messageCount, sessionStats getMessageCount()); setParent(pendingMessageCount, sessionStats getPendingMessageCount()); setParent(expiredMessageCount, sessionStats getExpiredMessageCount()); setParent(messageWaitTime, sessionStats getMessageWaitTime()); setParent(messageRateTime, sessionStats getMessageRateTime()); } public JMSEndpointStatsImpl() { this(new CountStatisticImpl( messageCount , Number of messages processed ), new CountStatisticImpl( pendingMessageCount , Number of pending messages ), new CountStatisticImpl( expiredMessageCount , Number of expired messages ), new TimeStatisticImpl( messageWaitTime , Time spent by a message before being delivered ), new TimeStatisticImpl( messageRateTime , Time taken to process a message (thoughtput rate) )); } public JMSEndpointStatsImpl(CountStatisticImpl messageCount, CountStatisticImpl pendingMessageCount, CountStatisticImpl expiredMessageCount, TimeStatisticImpl messageWaitTime, TimeStatisticImpl messageRateTime) { this messageCount = messageCount; this pendingMessageCount = pendingMessageCount; this expiredMessageCount = expiredMessageCount; this messageWaitTime = messageWaitTime; this messageRateTime = messageRateTime; addStatistic( messageCount , messageCount); addStatistic( pendingMessageCount , pendingMessageCount); addStatistic( expiredMessageCount , expiredMessageCount); addStatistic( messageWaitTime , messageWaitTime); addStatistic( messageRateTime , messageRateTime); } public synchronized void reset() { super reset(); messageCount reset(); messageRateTime reset(); pendingMessageCount reset(); expiredMessageCount reset(); messageWaitTime reset(); } public CountStatisticImpl getMessageCount() { return messageCount; } public CountStatisticImpl getPendingMessageCount() { return pendingMessageCount; } public CountStatisticImpl getExpiredMessageCount() { return expiredMessageCount; } public TimeStatisticImpl getMessageRateTime() { return messageRateTime; } public TimeStatisticImpl getMessageWaitTime() { return messageWaitTime; } public String toString() { StringBuffer buffer = new StringBuffer(); buffer append(messageCount); buffer append( ); buffer append(messageRateTime); buffer append( ); buffer append(pendingMessageCount); buffer append( ); buffer append(expiredMessageCount); buffer append( ); buffer append(messageWaitTime); return buffer toString(); } public void onMessage() { if (enabled) { long start = messageCount getLastSampleTime(); messageCount increment(); long end = messageCount getLastSampleTime(); messageRateTime addTime(end - start); } } Override public void setEnabled(boolean enabled) { super setEnabled(enabled); messageCount setEnabled(enabled); messageRateTime setEnabled(enabled); pendingMessageCount setEnabled(enabled); expiredMessageCount setEnabled(enabled); messageWaitTime setEnabled(enabled); } public void dump(IndentPrinter out) { out printIndent(); out println(messageCount); out printIndent(); out println(messageRateTime); out printIndent(); out println(pendingMessageCount); out printIndent(); out println(messageRateTime); out printIndent(); out println(expiredMessageCount); out printIndent(); out println(messageWaitTime); } protected void setParent(CountStatisticImpl child, CountStatisticImpl parent) { if (child instanceof CountStatisticImpl && parent instanceof CountStatisticImpl) { CountStatisticImpl c = (CountStatisticImpl)child; c setParent((CountStatisticImpl)parent); } else { LOG warn( Cannot associate endpoint counters with session level counters as they are not both CountStatisticImpl clases Endpoint + child + session + parent); } } protected void setParent(TimeStatisticImpl child, TimeStatisticImpl parent) { if (child instanceof TimeStatisticImpl && parent instanceof TimeStatisticImpl) { TimeStatisticImpl c = (TimeStatisticImpl)child; c setParent((TimeStatisticImpl)parent); } else { LOG warn( Cannot associate endpoint counters with session level counters as they are not both TimeStatisticImpl clases Endpoint + child + session + parent); } } }",1.0,
730,730,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\JMSProducerStatsImpl.,JMSProducerStatsImpl,"public class JMSProducerStatsImpl extends JMSEndpointStatsImpl { private String destination; public JMSProducerStatsImpl(JMSSessionStatsImpl sessionStats, Destination destination) { super(sessionStats); if (destination != null) { this destination = destination toString(); } } public JMSProducerStatsImpl(CountStatisticImpl messageCount, CountStatisticImpl pendingMessageCount, CountStatisticImpl expiredMessageCount, TimeStatisticImpl messageWaitTime, TimeStatisticImpl messageRateTime, String destination) { super(messageCount, pendingMessageCount, expiredMessageCount, messageWaitTime, messageRateTime); this destination = destination; } public String getDestination() { return destination; } public String toString() { StringBuffer buffer = new StringBuffer(); buffer append( producer ); buffer append(destination); buffer append( { ); buffer append(super toString()); buffer append( } ); return buffer toString(); } public void dump(IndentPrinter out) { out printIndent(); out print( producer ); out print(destination); out println( { ); out incrementIndent(); super dump(out); out decrementIndent(); out printIndent(); out println( } ); } }",1.0,
732,732,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\JMSStatsImpl.,JMSStatsImpl,public class JMSStatsImpl extends StatsImpl { private List<ActiveMQConnection> connections = new CopyOnWriteArrayList<ActiveMQConnection>(); public JMSStatsImpl() { } public JMSConnectionStatsImpl[] getConnections() { Object[] connectionArray = connections toArray(); int size = connectionArray length; JMSConnectionStatsImpl[] answer = new JMSConnectionStatsImpl[size]; for (int i = 0; i < size; i++) { ActiveMQConnection connection = (ActiveMQConnection)connectionArray[i]; answer[i] = connection getConnectionStats(); } return answer; } public void addConnection(ActiveMQConnection connection) { connections add(connection); } public void removeConnection(ActiveMQConnection connection) { connections remove(connection); } public void dump(IndentPrinter out) { out printIndent(); out println( factory { ); out incrementIndent(); JMSConnectionStatsImpl[] array = getConnections(); for (int i = 0; i < array length; i++) { JMSConnectionStatsImpl connectionStat = (JMSConnectionStatsImpl)array[i]; connectionStat dump(out); } out decrementIndent(); out printIndent(); out println( } ); out flush(); } public void setEnabled(boolean enabled) { super setEnabled(enabled); JMSConnectionStatsImpl[] stats = getConnections(); int size = stats length; for (int i = 0; i < size; i++) { stats[i] setEnabled(enabled); } } },1.0,
733,733,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\PollCountStatisticImpl.,PollCountStatisticImpl,"public class PollCountStatisticImpl extends StatisticImpl implements CountStatistic { private PollCountStatisticImpl parent; private List<PollCountStatisticImpl> children; public PollCountStatisticImpl(PollCountStatisticImpl parent, String name, String description) { this(name, description); setParent(parent); } public PollCountStatisticImpl(String name, String description) { this(name, count , description); } public PollCountStatisticImpl(String name, String unit, String description) { super(name, unit, description); } public PollCountStatisticImpl getParent() { return parent; } public void setParent(PollCountStatisticImpl parent) { if (this parent != null) { this parent removeChild(this); } this parent = parent; if (this parent != null) { this parent addChild(this); } } private synchronized void removeChild(PollCountStatisticImpl child) { if (children != null) { children remove(child); } } private synchronized void addChild(PollCountStatisticImpl child) { if (children == null) { children = new ArrayList<PollCountStatisticImpl>(); } children add(child); } public synchronized long getCount() { if (children == null) { return 0; } long count = 0; for (Iterator<PollCountStatisticImpl> iter = children iterator(); iter hasNext();) { PollCountStatisticImpl child = iter next(); count += child getCount(); } return count; } protected void appendFieldDescription(StringBuffer buffer) { buffer append( count ); buffer append(Long toString(getCount())); super appendFieldDescription(buffer); } public double getPeriod() { double count = getCount(); if (count == 0) { return 0; } double time = System currentTimeMillis() - getStartTime(); return time / (count * 1000 0); } public double getFrequency() { double count = getCount(); double time = System currentTimeMillis() - getStartTime(); return count * 1000 0 / time; } }",1.0,
734,734,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\RangeStatisticImpl.,RangeStatisticImpl,"public class RangeStatisticImpl extends StatisticImpl { private long highWaterMark; private long lowWaterMark; private long current; public RangeStatisticImpl(String name, String unit, String description) { super(name, unit, description); } public void reset() { if (isDoReset()) { super reset(); current = 0; lowWaterMark = 0; highWaterMark = 0; } } public long getHighWaterMark() { return highWaterMark; } public long getLowWaterMark() { return lowWaterMark; } public long getCurrent() { return current; } public void setCurrent(long current) { this current = current; if (current > highWaterMark) { highWaterMark = current; } if (current < lowWaterMark || lowWaterMark == 0) { lowWaterMark = current; } updateSampleTime(); } protected void appendFieldDescription(StringBuffer buffer) { buffer append( current ); buffer append(Long toString(current)); buffer append( lowWaterMark ); buffer append(Long toString(lowWaterMark)); buffer append( highWaterMark ); buffer append(Long toString(highWaterMark)); super appendFieldDescription(buffer); } }",1.0,
735,735,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\StatisticImpl.,StatisticImpl,"public class StatisticImpl implements Statistic, Resettable { protected boolean enabled; private String name; private String unit; private String description; private long startTime; private long lastSampleTime; private boolean doReset = true; public StatisticImpl(String name, String unit, String description) { this name = name; this unit = unit; this description = description; this startTime = System currentTimeMillis(); this lastSampleTime = this startTime; } public synchronized void reset() { if(isDoReset()) { this startTime = System currentTimeMillis(); this lastSampleTime = this startTime; } } protected synchronized void updateSampleTime() { this lastSampleTime = System currentTimeMillis(); } public synchronized String toString() { StringBuffer buffer = new StringBuffer(); buffer append(name); buffer append( { ); appendFieldDescription(buffer); buffer append( } ); return buffer toString(); } public String getName() { return this name; } public String getUnit() { return this unit; } public String getDescription() { return this description; } public synchronized long getStartTime() { return this startTime; } public synchronized long getLastSampleTime() { return this lastSampleTime; } public boolean isEnabled() { return this enabled; } public void setEnabled(boolean enabled) { this enabled = enabled; } public boolean isDoReset() { return this doReset; } public void setDoReset(boolean doReset) { this doReset = doReset; } protected synchronized void appendFieldDescription(StringBuffer buffer) { buffer append( unit ); buffer append(this unit); buffer append( startTime ); buffer append(this startTime); buffer append( lastSampleTime ); buffer append(this lastSampleTime); buffer append( description ); buffer append(this description); } }",1.0,
736,736,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\StatsImpl.,StatsImpl,"public class StatsImpl extends StatisticImpl implements Stats, Resettable { private Set<StatisticImpl> set; public StatsImpl() { this(new CopyOnWriteArraySet<StatisticImpl>()); } public StatsImpl(Set<StatisticImpl> set) { super( stats , many , Used only as container, not Statistic ); this set = set; } public void reset() { Statistic[] stats = getStatistics(); int size = stats length; for (int i = 0; i < size; i++) { Statistic stat = stats[i]; if (stat instanceof Resettable) { Resettable r = (Resettable) stat; r reset(); } } } public Statistic getStatistic(String name) { for (StatisticImpl stat this set) { if (stat getName() != null && stat getName() equals(name)) { return stat; } } return null; } public String[] getStatisticNames() { List<String> names = new ArrayList<String>(); for (StatisticImpl stat this set) { names add(stat getName()); } String[] answer = new String[names size()]; names toArray(answer); return answer; } public Statistic[] getStatistics() { Statistic[] answer = new Statistic[this set size()]; set toArray(answer); return answer; } protected void addStatistic(String name, StatisticImpl statistic) { this set add(statistic); } }",1.0,
737,737,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\management\TimeStatisticImpl.,TimeStatisticImpl,"public class TimeStatisticImpl extends StatisticImpl { private long count; private long maxTime; private long minTime; private long totalTime; private TimeStatisticImpl parent; public TimeStatisticImpl(String name, String description) { this(name, millis , description); } public TimeStatisticImpl(TimeStatisticImpl parent, String name, String description) { this(name, description); this parent = parent; } public TimeStatisticImpl(String name, String unit, String description) { super(name, unit, description); } public synchronized void reset() { if(isDoReset()) { super reset(); count = 0; maxTime = 0; minTime = 0; totalTime = 0; } } public synchronized long getCount() { return count; } public synchronized void addTime(long time) { count++; totalTime += time; if (time > maxTime) { maxTime = time; } if (time < minTime || minTime == 0) { minTime = time; } updateSampleTime(); if (parent != null) { parent addTime(time); } } public long getMaxTime() { return maxTime; } public synchronized long getMinTime() { return minTime; } public synchronized long getTotalTime() { return totalTime; } public synchronized double getAverageTime() { if (count == 0) { return 0; } double d = totalTime; return d / count; } public synchronized double getAverageTimeExcludingMinMax() { if (count <= 2) { return 0; } double d = totalTime - minTime - maxTime; return d / (count - 2); } public double getAveragePerSecond() { double d = 1000; double averageTime = getAverageTime(); if (averageTime == 0) { return 0; } return d / averageTime; } public double getAveragePerSecondExcludingMinMax() { double d = 1000; double average = getAverageTimeExcludingMinMax(); if (average == 0) { return 0; } return d / average; } public TimeStatisticImpl getParent() { return parent; } public void setParent(TimeStatisticImpl parent) { this parent = parent; } protected synchronized void appendFieldDescription(StringBuffer buffer) { buffer append( count ); buffer append(Long toString(count)); buffer append( maxTime ); buffer append(Long toString(maxTime)); buffer append( minTime ); buffer append(Long toString(minTime)); buffer append( totalTime ); buffer append(Long toString(totalTime)); buffer append( averageTime ); buffer append(Double toString(getAverageTime())); buffer append( averageTimeExMinMax ); buffer append(Double toString(getAverageTimeExcludingMinMax())); buffer append( averagePerSecond ); buffer append(Double toString(getAveragePerSecond())); buffer append( averagePerSecondExMinMax ); buffer append(Double toString(getAveragePerSecondExcludingMinMax())); super appendFieldDescription(buffer); } }",1.0,
739,739,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\CommandIdComparator.,CommandIdComparator,"public class CommandIdComparator implements Comparator<Command> { public int compare(Command c1, Command c2) { return c1 getCommandId() - c2 getCommandId(); } }",1.0,
741,741,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\OpenWireFormatFactory.,OpenWireFormatFactory,public class OpenWireFormatFactory implements WireFormatFactory { private int version = OpenWireFormat DEFAULT WIRE VERSION; private boolean stackTraceEnabled = true; private boolean tcpNoDelayEnabled = true; private boolean cacheEnabled = true; private boolean tightEncodingEnabled = true; private boolean sizePrefixDisabled; private long maxInactivityDuration = 30*1000; private long maxInactivityDurationInitalDelay = 10*1000; private int cacheSize = 1024; private long maxFrameSize = OpenWireFormat DEFAULT MAX FRAME SIZE; public WireFormat createWireFormat() { WireFormatInfo info = new WireFormatInfo(); info setVersion(version); try { info setStackTraceEnabled(stackTraceEnabled); info setCacheEnabled(cacheEnabled); info setTcpNoDelayEnabled(tcpNoDelayEnabled); info setTightEncodingEnabled(tightEncodingEnabled); info setSizePrefixDisabled(sizePrefixDisabled); info setMaxInactivityDuration(maxInactivityDuration); info setMaxInactivityDurationInitalDelay(maxInactivityDurationInitalDelay); info setCacheSize(cacheSize); info setMaxFrameSize(maxFrameSize); } catch (Exception e) { IllegalStateException ise = new IllegalStateException( Could not configure WireFormatInfo ); ise initCause(e); throw ise; } OpenWireFormat f = new OpenWireFormat(version); f setMaxFrameSize(maxFrameSize); f setPreferedWireFormatInfo(info); return f; } public boolean isStackTraceEnabled() { return stackTraceEnabled; } public void setStackTraceEnabled(boolean stackTraceEnabled) { this stackTraceEnabled = stackTraceEnabled; } public boolean isTcpNoDelayEnabled() { return tcpNoDelayEnabled; } public void setTcpNoDelayEnabled(boolean tcpNoDelayEnabled) { this tcpNoDelayEnabled = tcpNoDelayEnabled; } public int getVersion() { return version; } public void setVersion(int version) { this version = version; } public boolean isCacheEnabled() { return cacheEnabled; } public void setCacheEnabled(boolean cacheEnabled) { this cacheEnabled = cacheEnabled; } public boolean isTightEncodingEnabled() { return tightEncodingEnabled; } public void setTightEncodingEnabled(boolean tightEncodingEnabled) { this tightEncodingEnabled = tightEncodingEnabled; } public boolean isSizePrefixDisabled() { return sizePrefixDisabled; } public void setSizePrefixDisabled(boolean sizePrefixDisabled) { this sizePrefixDisabled = sizePrefixDisabled; } public long getMaxInactivityDuration() { return maxInactivityDuration; } public void setMaxInactivityDuration(long maxInactivityDuration) { this maxInactivityDuration = maxInactivityDuration; } public int getCacheSize() { return cacheSize; } public void setCacheSize(int cacheSize) { this cacheSize = cacheSize; } public long getMaxInactivityDurationInitalDelay() { return maxInactivityDurationInitalDelay; } public void setMaxInactivityDurationInitalDelay( long maxInactivityDurationInitalDelay) { this maxInactivityDurationInitalDelay = maxInactivityDurationInitalDelay; } public long getMaxFrameSize() { return maxFrameSize; } public void setMaxFrameSize(long maxFrameSize) { this maxFrameSize = maxFrameSize; } },1.0,
742,742,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
744,744,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
745,745,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
746,746,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
747,747,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
748,748,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
749,749,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
750,750,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
751,751,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
752,752,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
753,753,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
758,758,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ConnectionControlMarshaller.,ConnectionControlMarshaller,"public class ConnectionControlMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ConnectionControl DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionControl(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionControl info = (ConnectionControl)o; info setClose(bs readBoolean()); info setExit(bs readBoolean()); info setFaultTolerant(bs readBoolean()); info setResume(bs readBoolean()); info setSuspend(bs readBoolean()); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionControl info = (ConnectionControl)o; int rc = super tightMarshal1(wireFormat, o, bs); bs writeBoolean(info isClose()); bs writeBoolean(info isExit()); bs writeBoolean(info isFaultTolerant()); bs writeBoolean(info isResume()); bs writeBoolean(info isSuspend()); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionControl info = (ConnectionControl)o; bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionControl info = (ConnectionControl)o; info setClose(dataIn readBoolean()); info setExit(dataIn readBoolean()); info setFaultTolerant(dataIn readBoolean()); info setResume(dataIn readBoolean()); info setSuspend(dataIn readBoolean()); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionControl info = (ConnectionControl)o; super looseMarshal(wireFormat, o, dataOut); dataOut writeBoolean(info isClose()); dataOut writeBoolean(info isExit()); dataOut writeBoolean(info isFaultTolerant()); dataOut writeBoolean(info isResume()); dataOut writeBoolean(info isSuspend()); } }",1.0,
760,760,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
765,765,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
768,768,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\DataStructureSupportMarshaller.,DataStructureSupportMarshaller,"public abstract class DataStructureSupportMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
770,770,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
771,771,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
772,772,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
776,776,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
778,778,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
779,779,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
789,789,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ProducerIdMarshaller.,ProducerIdMarshaller,"public class ProducerIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ProducerId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ProducerId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ProducerId info = (ProducerId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); info setSessionId(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ProducerId info = (ProducerId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc += tightMarshalLong1(wireFormat, info getValue(), bs); rc += tightMarshalLong1(wireFormat, info getSessionId(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ProducerId info = (ProducerId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); tightMarshalLong2(wireFormat, info getSessionId(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ProducerId info = (ProducerId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); info setSessionId(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ProducerId info = (ProducerId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); looseMarshalLong(wireFormat, info getSessionId(), dataOut); } }",1.0,
795,795,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc += tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
797,797,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
799,799,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v1\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
804,804,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
806,806,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
807,807,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
808,808,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
809,809,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
810,810,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
811,811,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
812,812,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
813,813,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
814,814,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
815,815,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
822,822,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
827,827,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
831,831,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
832,832,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
833,833,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
837,837,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
839,839,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
840,840,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
858,858,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc+=tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
860,860,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
862,862,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v8\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
867,867,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
869,869,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
870,870,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
871,871,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
872,872,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
873,873,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
874,874,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
875,875,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
876,876,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
877,877,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
878,878,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
885,885,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
890,890,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
894,894,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
895,895,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
896,896,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
900,900,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
902,902,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
903,903,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
921,921,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc+=tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
923,923,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
925,925,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\openwire\v9\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
929,929,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\CommandVisitorAdapter.,CommandVisitorAdapter,"public class CommandVisitorAdapter implements CommandVisitor { public Response processAddConnection(ConnectionInfo info) throws Exception { return null; } public Response processAddConsumer(ConsumerInfo info) throws Exception { return null; } public Response processAddDestination(DestinationInfo info) throws Exception { return null; } public Response processAddProducer(ProducerInfo info) throws Exception { return null; } public Response processAddSession(SessionInfo info) throws Exception { return null; } public Response processBeginTransaction(TransactionInfo info) throws Exception { return null; } public Response processBrokerInfo(BrokerInfo info) throws Exception { return null; } public Response processCommitTransactionOnePhase(TransactionInfo info) throws Exception { return null; } public Response processCommitTransactionTwoPhase(TransactionInfo info) throws Exception { return null; } public Response processEndTransaction(TransactionInfo info) throws Exception { return null; } public Response processFlush(FlushCommand command) throws Exception { return null; } public Response processForgetTransaction(TransactionInfo info) throws Exception { return null; } public Response processKeepAlive(KeepAliveInfo info) throws Exception { return null; } public Response processMessage(Message send) throws Exception { return null; } public Response processMessageAck(MessageAck ack) throws Exception { return null; } public Response processMessageDispatchNotification(MessageDispatchNotification notification) throws Exception { return null; } public Response processMessagePull(MessagePull pull) throws Exception { return null; } public Response processPrepareTransaction(TransactionInfo info) throws Exception { return null; } public Response processProducerAck(ProducerAck ack) throws Exception { return null; } public Response processRecoverTransactions(TransactionInfo info) throws Exception { return null; } public Response processRemoveConnection(ConnectionId id, long lastDeliveredSequenceId) throws Exception { return null; } public Response processRemoveConsumer(ConsumerId id, long lastDeliveredSequenceId) throws Exception { return null; } public Response processRemoveDestination(DestinationInfo info) throws Exception { return null; } public Response processRemoveProducer(ProducerId id) throws Exception { return null; } public Response processRemoveSession(SessionId id, long lastDeliveredSequenceId) throws Exception { return null; } public Response processRemoveSubscription(RemoveSubscriptionInfo info) throws Exception { return null; } public Response processRollbackTransaction(TransactionInfo info) throws Exception { return null; } public Response processShutdown(ShutdownInfo info) throws Exception { return null; } public Response processWireFormat(WireFormatInfo info) throws Exception { return null; } public Response processMessageDispatch(MessageDispatch dispatch) throws Exception { return null; } public Response processControlCommand(ControlCommand command) throws Exception { return null; } public Response processConnectionControl(ConnectionControl control) throws Exception { return null; } public Response processConnectionError(ConnectionError error) throws Exception { return null; } public Response processConsumerControl(ConsumerControl control) throws Exception { return null; } }",1.0,
930,930,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\ConnectionState.,ConnectionState,"public class ConnectionState { ConnectionInfo info; private final ConcurrentHashMap<TransactionId, TransactionState> transactions = new ConcurrentHashMap<TransactionId, TransactionState>(); private final ConcurrentHashMap<SessionId, SessionState> sessions = new ConcurrentHashMap<SessionId, SessionState>(); private final List<DestinationInfo> tempDestinations = Collections synchronizedList(new ArrayList<DestinationInfo>()); private final AtomicBoolean shutdown = new AtomicBoolean(false); private boolean connectionInterruptProcessingComplete = true; private HashMap<ConsumerId, ConsumerInfo> recoveringPullConsumers; public ConnectionState(ConnectionInfo info) { this info = info; addSession(new SessionInfo(info, -1)); } public String toString() { return info toString(); } public void reset(ConnectionInfo info) { this info = info; transactions clear(); sessions clear(); tempDestinations clear(); shutdown set(false); addSession(new SessionInfo(info, -1)); } public void addTempDestination(DestinationInfo info) { checkShutdown(); tempDestinations add(info); } public void removeTempDestination(ActiveMQDestination destination) { for (Iterator<DestinationInfo> iter = tempDestinations iterator(); iter hasNext();) { DestinationInfo di = iter next(); if (di getDestination() equals(destination)) { iter remove(); } } } public void addTransactionState(TransactionId id) { checkShutdown(); transactions put(id, new TransactionState(id)); } public TransactionState getTransactionState(TransactionId id) { return transactions get(id); } public Collection<TransactionState> getTransactionStates() { return transactions values(); } public TransactionState removeTransactionState(TransactionId id) { return transactions remove(id); } public void addSession(SessionInfo info) { checkShutdown(); sessions put(info getSessionId(), new SessionState(info)); } public SessionState removeSession(SessionId id) { return sessions remove(id); } public SessionState getSessionState(SessionId id) { return sessions get(id); } public ConnectionInfo getInfo() { return info; } public Set<SessionId> getSessionIds() { return sessions keySet(); } public List<DestinationInfo> getTempDestinations() { return tempDestinations; } public Collection<SessionState> getSessionStates() { return sessions values(); } private void checkShutdown() { if (shutdown get()) { throw new IllegalStateException( Disposed ); } } public void shutdown() { if (shutdown compareAndSet(false, true)) { for (Iterator<SessionState> iter = sessions values() iterator(); iter hasNext();) { SessionState ss = iter next(); ss shutdown(); } } } public Map<ConsumerId, ConsumerInfo> getRecoveringPullConsumers() { if (recoveringPullConsumers == null) { recoveringPullConsumers = new HashMap<ConsumerId, ConsumerInfo>(); } return recoveringPullConsumers; } public void setConnectionInterruptProcessingComplete(boolean connectionInterruptProcessingComplete) { this connectionInterruptProcessingComplete = connectionInterruptProcessingComplete; } public boolean isConnectionInterruptProcessingComplete() { return connectionInterruptProcessingComplete; } }",1.0,
932,932,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\ConnectionStateTracker.,RemoveTransactionAction,private class RemoveTransactionAction implements ResponseHandler { private final TransactionInfo info; public RemoveTransactionAction(TransactionInfo info) { this info = info; } public void onResponse(Command response) { ConnectionId connectionId = info getConnectionId(); ConnectionState cs = connectionStates get(connectionId); if (cs != null) { cs removeTransactionState(info getTransactionId()); } } },1.0,
933,933,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\ConnectionStateTracker.,PrepareReadonlyTransactionAction,private class PrepareReadonlyTransactionAction extends RemoveTransactionAction { public PrepareReadonlyTransactionAction(TransactionInfo info) { super(info); } public void onResponse(Command command) { IntegerResponse response = (IntegerResponse) command; if (XAResource XA RDONLY == response getResult()) { super onResponse(command); } } },1.0,
934,934,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\ConsumerState.,ConsumerState,public class ConsumerState { final ConsumerInfo info; public ConsumerState(ConsumerInfo info) { this info = info; } public String toString() { return info toString(); } public ConsumerInfo getInfo() { return info; } },1.0,
935,935,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\ProducerState.,ProducerState,public class ProducerState { final ProducerInfo info; private TransactionState transactionState; public ProducerState(ProducerInfo info) { this info = info; } public String toString() { return info toString(); } public ProducerInfo getInfo() { return info; } public void setTransactionState(TransactionState transactionState) { this transactionState = transactionState; } public TransactionState getTransactionState() { return transactionState; } },1.0,
936,936,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\SessionState.,SessionState,"public class SessionState { final SessionInfo info; private final Map<ProducerId, ProducerState> producers = new ConcurrentHashMap<ProducerId, ProducerState>(); private final Map<ConsumerId, ConsumerState> consumers = new ConcurrentHashMap<ConsumerId, ConsumerState>(); private final AtomicBoolean shutdown = new AtomicBoolean(false); public SessionState(SessionInfo info) { this info = info; } public String toString() { return info toString(); } public void addProducer(ProducerInfo info) { checkShutdown(); producers put(info getProducerId(), new ProducerState(info)); } public ProducerState removeProducer(ProducerId id) { ProducerState producerState = producers remove(id); if (producerState != null) { if (producerState getTransactionState() != null) { producerState getTransactionState() addProducerState(producerState); } } return producerState; } public void addConsumer(ConsumerInfo info) { checkShutdown(); consumers put(info getConsumerId(), new ConsumerState(info)); } public ConsumerState removeConsumer(ConsumerId id) { return consumers remove(id); } public SessionInfo getInfo() { return info; } public Set<ConsumerId> getConsumerIds() { return consumers keySet(); } public Set<ProducerId> getProducerIds() { return producers keySet(); } public Collection<ProducerState> getProducerStates() { return producers values(); } public ProducerState getProducerState(ProducerId producerId) { return producers get(producerId); } public Collection<ConsumerState> getConsumerStates() { return consumers values(); } public ConsumerState getConsumerState(ConsumerId consumerId) { return consumers get(consumerId); } private void checkShutdown() { if (shutdown get()) { throw new IllegalStateException( Disposed ); } } public void shutdown() { shutdown set(false); } }",1.0,
937,937,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\Tracked.,Tracked,public class Tracked extends Response { private ResponseHandler handler; public Tracked(ResponseHandler runnable) { this handler = runnable; } public void onResponses(Command command) { if (handler != null) { handler onResponse(command); handler = null; } } public boolean isWaitingForResponse() { return handler != null; } },1.0,
938,938,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\TransactionState.,TransactionState,"public class TransactionState { private final List<Command> commands = new ArrayList<Command>(); private final TransactionId id; private final AtomicBoolean shutdown = new AtomicBoolean(false); private boolean prepared; private int preparedResult; private final Map<ProducerId, ProducerState> producers = new ConcurrentHashMap<ProducerId, ProducerState>(); public TransactionState(TransactionId id) { this id = id; } public String toString() { return id toString(); } public void addCommand(Command operation) { checkShutdown(); commands add(operation); } public List<Command> getCommands() { return commands; } private void checkShutdown() { if (shutdown get()) { throw new IllegalStateException( Disposed ); } } public void shutdown() { shutdown set(false); } public TransactionId getId() { return id; } public void setPrepared(boolean prepared) { this prepared = prepared; } public boolean isPrepared() { return prepared; } public void setPreparedResult(int preparedResult) { this preparedResult = preparedResult; } public int getPreparedResult() { return preparedResult; } public void addProducerState(ProducerState producerState) { if (producerState != null) { producers put(producerState getInfo() getProducerId(), producerState); } } public Map<ProducerId, ProducerState> getProducerStates() { return producers; } }",1.0,
939,939,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\thread\DedicatedTaskRunner.,DedicatedTaskRunner,"class DedicatedTaskRunner implements TaskRunner { private static final Logger LOG = LoggerFactory getLogger(DedicatedTaskRunner class); private final Task task; private final Thread thread; private final Object mutex = new Object(); private boolean threadTerminated; private boolean pending; private boolean shutdown; public DedicatedTaskRunner(final Task task, String name, int priority, boolean daemon) { this task = task; thread = new Thread(name) { public void run() { try { runTask(); } finally { LOG trace( Run task done {} , task); } } }; thread setDaemon(daemon); thread setName(name); thread setPriority(priority); thread start(); } public void wakeup() throws InterruptedException { synchronized (mutex) { if (shutdown) { return; } pending = true; mutex notifyAll(); } } public void shutdown(long timeout) throws InterruptedException { LOG trace( Shutdown timeout {} task {} , task); synchronized (mutex) { shutdown = true; pending = true; mutex notifyAll(); if (Thread currentThread() != thread && !threadTerminated) { mutex wait(timeout); } } } public void shutdown() throws InterruptedException { shutdown(0); } final void runTask() { try { while (true) { synchronized (mutex) { pending = false; if (shutdown) { return; } } LOG trace( Running task {} , task); if (!task iterate()) { synchronized (mutex) { if (shutdown) { return; } while (!pending) { mutex wait(); } } } } } catch (InterruptedException e) { Thread currentThread() interrupt(); } finally { synchronized (mutex) { threadTerminated = true; mutex notifyAll(); } } } }",1.0,
940,940,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\thread\DefaultThreadPools.,DefaultThreadPools,public final class DefaultThreadPools { private static final TaskRunnerFactory DEFAULT TASK RUNNER FACTORY = new TaskRunnerFactory(); private DefaultThreadPools() { } Deprecated public static TaskRunnerFactory getDefaultTaskRunnerFactory() { return DEFAULT TASK RUNNER FACTORY; } public static void shutdown() { DEFAULT TASK RUNNER FACTORY shutdown(); } },1.0,
941,941,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\thread\DeterministicTaskRunner.,DeterministicTaskRunner,"public class DeterministicTaskRunner implements TaskRunner { private final Executor executor; private final Task task; private final Runnable runable; private boolean shutdown; public DeterministicTaskRunner(Executor executor, Task task) { this executor = executor; this task = task; this runable = new Runnable() { public void run() { Thread currentThread(); runTask(); } }; } public void wakeup() throws InterruptedException { synchronized (runable) { if (shutdown) { return; } executor execute(runable); } } public void shutdown(long timeout) throws InterruptedException { synchronized (runable) { shutdown = true; } } public void shutdown() throws InterruptedException { shutdown(0); } final void runTask() { synchronized (runable) { if (shutdown) { runable notifyAll(); return; } } task iterate(); } }",1.0,
943,943,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\thread\Scheduler.,Scheduler,"public final class Scheduler extends ServiceSupport { private final String name; private Timer timer; private final HashMap<Runnable, TimerTask> timerTasks = new HashMap<Runnable, TimerTask>(); public Scheduler (String name) { this name = name; } public void executePeriodically(final Runnable task, long period) { TimerTask timerTask = new SchedulerTimerTask(task); timer schedule(timerTask, period, period); timerTasks put(task, timerTask); } public synchronized void schedualPeriodically(final Runnable task, long period) { TimerTask timerTask = new SchedulerTimerTask(task); timer schedule(timerTask, period, period); timerTasks put(task, timerTask); } public synchronized void cancel(Runnable task) { TimerTask ticket = timerTasks remove(task); if (ticket != null) { ticket cancel(); timer purge(); } } public synchronized void executeAfterDelay(final Runnable task, long redeliveryDelay) { TimerTask timerTask = new SchedulerTimerTask(task); timer schedule(timerTask, redeliveryDelay); } public void shutdown() { timer cancel(); } Override protected synchronized void doStart() throws Exception { this timer = new Timer(name, true); } Override protected synchronized void doStop(ServiceStopper stopper) throws Exception { if (this timer != null) { this timer cancel(); } } public String getName() { return name; } }",1.0,
944,944,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\thread\SchedulerTimerTask.,SchedulerTimerTask,public class SchedulerTimerTask extends TimerTask { private final Runnable task; public SchedulerTimerTask(Runnable task) { this task = task; } public void run() { this task run(); } },1.0,
946,946,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transaction\Synchronization.,Synchronization,public class Synchronization { public void beforeEnd() throws Exception { } public void beforeCommit() throws Exception { } public void afterCommit() throws Exception { } public void afterRollback() throws Exception { } },1.0,
947,947,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\AbstractInactivityMonitor.,AbstractInactivityMonitor,"public abstract class AbstractInactivityMonitor extends TransportFilter { private static final Logger LOG = LoggerFactory getLogger(AbstractInactivityMonitor class); private static ThreadPoolExecutor ASYNC TASKS; private static int CHECKER COUNTER; private static long DEFAULT CHECK TIME MILLS = 30000; private static Timer READ CHECK TIMER; private static Timer WRITE CHECK TIMER; private final AtomicBoolean monitorStarted = new AtomicBoolean(false); private final AtomicBoolean commandSent = new AtomicBoolean(false); private final AtomicBoolean inSend = new AtomicBoolean(false); private final AtomicBoolean failed = new AtomicBoolean(false); private final AtomicBoolean commandReceived = new AtomicBoolean(true); private final AtomicBoolean inReceive = new AtomicBoolean(false); private final AtomicInteger lastReceiveCounter = new AtomicInteger(0); private final ReentrantReadWriteLock sendLock = new ReentrantReadWriteLock(); private SchedulerTimerTask writeCheckerTask; private SchedulerTimerTask readCheckerTask; private long readCheckTime = DEFAULT CHECK TIME MILLS; private long writeCheckTime = DEFAULT CHECK TIME MILLS; private long initialDelayTime = DEFAULT CHECK TIME MILLS; private boolean useKeepAlive = true; private boolean keepAliveResponseRequired; protected WireFormat wireFormat; private final Runnable readChecker = new Runnable() { long lastRunTime; Override public void run() { long now = System currentTimeMillis(); long elapsed = (now - lastRunTime); if (lastRunTime != 0 && LOG isDebugEnabled()) { LOG debug( + elapsed + ms elapsed since last read check ); } if (!allowReadCheck(elapsed)) { LOG debug( Aborting read check Not enough time elapsed since last read check ); return; } lastRunTime = now; readCheck(); } Override public String toString() { return ReadChecker ; } }; private boolean allowReadCheck(long elapsed) { return elapsed > (readCheckTime * 9 / 10); } private final Runnable writeChecker = new Runnable() { long lastRunTime; Override public void run() { long now = System currentTimeMillis(); if (lastRunTime != 0 && LOG isDebugEnabled()) { LOG debug(this + + (now - lastRunTime) + ms elapsed since last write check ); } lastRunTime = now; writeCheck(); } Override public String toString() { return WriteChecker ; } }; public AbstractInactivityMonitor(Transport next, WireFormat wireFormat) { super(next); this wireFormat = wireFormat; } Override public void start() throws Exception { next start(); startMonitorThreads(); } Override public void stop() throws Exception { stopMonitorThreads(); next stop(); } final void writeCheck() { if (inSend get()) { if (LOG isTraceEnabled()) { LOG trace( A send is in progress ); } return; } if (!commandSent get() && useKeepAlive && monitorStarted get() && !ASYNC TASKS isTerminating() && !ASYNC TASKS isTerminated()) { if (LOG isTraceEnabled()) { LOG trace(this + no message sent since last write check, sending a KeepAliveInfo ); } try { ASYNC TASKS execute(new Runnable() { Override public void run() { if (LOG isDebugEnabled()) { LOG debug( Running {} , this); } if (monitorStarted get()) { try { if (sendLock writeLock() tryLock()) { KeepAliveInfo info = new KeepAliveInfo(); info setResponseRequired(keepAliveResponseRequired); doOnewaySend(info); } } catch (IOException e) { onException(e); } finally { if (sendLock writeLock() isHeldByCurrentThread()) { sendLock writeLock() unlock(); } } } } Override public String toString() { return WriteCheck[ + getRemoteAddress() + ] ; }; }); } catch (RejectedExecutionException ex) { if (!ASYNC TASKS isTerminating() && !ASYNC TASKS isTerminated()) { LOG error( Async write check was rejected from the executor , ex); throw ex; } } } else { if (LOG isTraceEnabled()) { LOG trace(this + message sent since last write check, resetting flag ); } } commandSent set(false); } final void readCheck() { int currentCounter = next getReceiveCounter(); int previousCounter = lastReceiveCounter getAndSet(currentCounter); if (inReceive get() || currentCounter != previousCounter) { if (LOG isTraceEnabled()) { LOG trace( A receive is in progress ); } return; } if (!commandReceived get() && monitorStarted get() && !ASYNC TASKS isTerminating() && !ASYNC TASKS isTerminated()) { if (LOG isDebugEnabled()) { LOG debug( No message received since last read check for + toString() + Throwing InactivityIOException ); } try { ASYNC TASKS execute(new Runnable() { Override public void run() { if (LOG isDebugEnabled()) { LOG debug( Running {} , this); } onException(new InactivityIOException( Channel was inactive for too (> + readCheckTime + ) long + next getRemoteAddress())); } Override public String toString() { return ReadCheck[ + getRemoteAddress() + ] ; }; }); } catch (RejectedExecutionException ex) { if (!ASYNC TASKS isTerminating() && !ASYNC TASKS isTerminated()) { LOG error( Async read check was rejected from the executor , ex); throw ex; } } } else { if (LOG isTraceEnabled()) { LOG trace( Message received since last read check, resetting flag ); } } commandReceived set(false); } protected abstract void processInboundWireFormatInfo(WireFormatInfo info) throws IOException; protected abstract void processOutboundWireFormatInfo(WireFormatInfo info) throws IOException; Override public void onCommand(Object command) { commandReceived set(true); inReceive set(true); try { if (command getClass() == KeepAliveInfo class) { KeepAliveInfo info = (KeepAliveInfo) command; if (info isResponseRequired()) { sendLock readLock() lock(); try { info setResponseRequired(false); oneway(info); } catch (IOException e) { onException(e); } finally { sendLock readLock() unlock(); } } } else { if (command getClass() == WireFormatInfo class) { synchronized (this) { try { processInboundWireFormatInfo((WireFormatInfo) command); } catch (IOException e) { onException(e); } } } transportListener onCommand(command); } } finally { inReceive set(false); } } Override public void oneway(Object o) throws IOException { this sendLock readLock() lock(); inSend set(true); try { doOnewaySend(o); } finally { commandSent set(true); inSend set(false); this sendLock readLock() unlock(); } } private void doOnewaySend(Object command) throws IOException { if (failed get()) { throw new InactivityIOException( Cannot send, channel has already failed + next getRemoteAddress()); } if (command getClass() == WireFormatInfo class) { synchronized (this) { processOutboundWireFormatInfo((WireFormatInfo) command); } } next oneway(command); } Override public void onException(IOException error) { if (failed compareAndSet(false, true)) { stopMonitorThreads(); if (sendLock writeLock() isHeldByCurrentThread()) { sendLock writeLock() unlock(); } transportListener onException(error); } } public void setUseKeepAlive(boolean val) { useKeepAlive = val; } public long getReadCheckTime() { return readCheckTime; } public void setReadCheckTime(long readCheckTime) { this readCheckTime = readCheckTime; } public long getWriteCheckTime() { return writeCheckTime; } public void setWriteCheckTime(long writeCheckTime) { this writeCheckTime = writeCheckTime; } public long getInitialDelayTime() { return initialDelayTime; } public void setInitialDelayTime(long initialDelayTime) { this initialDelayTime = initialDelayTime; } public boolean isKeepAliveResponseRequired() { return this keepAliveResponseRequired; } public void setKeepAliveResponseRequired(boolean value) { this keepAliveResponseRequired = value; } public boolean isMonitorStarted() { return this monitorStarted get(); } protected synchronized void startMonitorThreads() throws IOException { if (monitorStarted get()) { return; } if (!configuredOk()) { return; } if (readCheckTime > 0) { readCheckerTask = new SchedulerTimerTask(readChecker); } if (writeCheckTime > 0) { writeCheckerTask = new SchedulerTimerTask(writeChecker); } if (writeCheckTime > 0 || readCheckTime > 0) { monitorStarted set(true); synchronized (AbstractInactivityMonitor class) { if (CHECKER COUNTER == 0) { ASYNC TASKS = createExecutor(); READ CHECK TIMER = new Timer( ActiveMQ InactivityMonitor ReadCheckTimer , true); WRITE CHECK TIMER = new Timer( ActiveMQ InactivityMonitor WriteCheckTimer , true); } CHECKER COUNTER++; if (readCheckTime > 0) { READ CHECK TIMER schedule(readCheckerTask, initialDelayTime, readCheckTime); } if (writeCheckTime > 0) { WRITE CHECK TIMER schedule(writeCheckerTask, initialDelayTime, writeCheckTime); } } } } abstract protected boolean configuredOk() throws IOException; protected synchronized void stopMonitorThreads() { if (monitorStarted compareAndSet(true, false)) { if (readCheckerTask != null) { readCheckerTask cancel(); } if (writeCheckerTask != null) { writeCheckerTask cancel(); } synchronized (AbstractInactivityMonitor class) { WRITE CHECK TIMER purge(); READ CHECK TIMER purge(); CHECKER COUNTER--; if (CHECKER COUNTER == 0) { WRITE CHECK TIMER cancel(); READ CHECK TIMER cancel(); WRITE CHECK TIMER = null; READ CHECK TIMER = null; ThreadPoolUtils shutdown(ASYNC TASKS); } } } } private final ThreadFactory factory = new ThreadFactory() { Override public Thread newThread(Runnable runnable) { Thread thread = new Thread(runnable, ActiveMQ InactivityMonitor Worker ); thread setDaemon(true); return thread; } }; private ThreadPoolExecutor createExecutor() { ThreadPoolExecutor exec = new ThreadPoolExecutor(0, Integer MAX VALUE, 10, TimeUnit SECONDS, new SynchronousQueue<Runnable>(), factory); exec allowCoreThreadTimeOut(true); return exec; } }",1.0,
949,949,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\DefaultTransportListener.,DefaultTransportListener,public class DefaultTransportListener implements TransportListener { public void onCommand(Object command) { } public void onException(IOException error) { } public void transportInterupted() { } public void transportResumed() { } },1.0,
950,950,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\FutureResponse.,FutureResponse,"public class FutureResponse { private static final Logger LOG = LoggerFactory getLogger(FutureResponse class); private final ResponseCallback responseCallback; private final ArrayBlockingQueue<Response> responseSlot = new ArrayBlockingQueue<Response>(1); public FutureResponse(ResponseCallback responseCallback) { this responseCallback = responseCallback; } public Response getResult() throws IOException { try { return responseSlot take(); } catch (InterruptedException e) { Thread currentThread() interrupt(); if (LOG isDebugEnabled()) { LOG debug( Operation interupted + e, e); } throw new InterruptedIOException( Interrupted ); } } public Response getResult(int timeout) throws IOException { try { Response result = responseSlot poll(timeout, TimeUnit MILLISECONDS); if (result == null && timeout > 0) { throw new RequestTimedOutIOException(); } return result; } catch (InterruptedException e) { throw new InterruptedIOException( Interrupted ); } } public void set(Response result) { if (responseSlot offer(result)) { if (responseCallback != null) { responseCallback onCompletion(this); } } } }",1.0,
951,951,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\InactivityIOException.,InactivityIOException,public class InactivityIOException extends IOException { private static final long serialVersionUID = 5816001466763503220L; public InactivityIOException() { super(); } public InactivityIOException(String message) { super(message); } },1.0,
953,953,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\MarshallingTransportFilter.,MarshallingTransportFilter,"public class MarshallingTransportFilter extends TransportFilter { private final WireFormat localWireFormat; private final WireFormat remoteWireFormat; public MarshallingTransportFilter(Transport next, WireFormat localWireFormat, WireFormat remoteWireFormat) { super(next); this localWireFormat = localWireFormat; this remoteWireFormat = remoteWireFormat; } public void oneway(Object command) throws IOException { next oneway((Command) remoteWireFormat unmarshal(localWireFormat marshal(command))); } public void onCommand(Object command) { try { getTransportListener() onCommand((Command)localWireFormat unmarshal(remoteWireFormat marshal(command))); } catch (IOException e) { getTransportListener() onException(e); } } }",1.0,
954,954,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\MutexTransport.,MutexTransport,"public class MutexTransport extends TransportFilter { private final ReentrantLock writeLock = new ReentrantLock(); private boolean syncOnCommand; public MutexTransport(Transport next) { super(next); this syncOnCommand = false; } public MutexTransport(Transport next, boolean syncOnCommand) { super(next); this syncOnCommand = syncOnCommand; } Override public void onCommand(Object command) { if (syncOnCommand) { writeLock lock(); try { transportListener onCommand(command); } finally { writeLock unlock(); } } else { transportListener onCommand(command); } } Override public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException { writeLock lock(); try { return next asyncRequest(command, null); } finally { writeLock unlock(); } } Override public void oneway(Object command) throws IOException { writeLock lock(); try { next oneway(command); } finally { writeLock unlock(); } } Override public Object request(Object command) throws IOException { writeLock lock(); try { return next request(command); } finally { writeLock unlock(); } } Override public Object request(Object command, int timeout) throws IOException { writeLock lock(); try { return next request(command, timeout); } finally { writeLock unlock(); } } Override public String toString() { return next toString(); } public boolean isSyncOnCommand() { return syncOnCommand; } public void setSyncOnCommand(boolean syncOnCommand) { this syncOnCommand = syncOnCommand; } }",1.0,
955,955,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\RequestTimedOutIOException.,RequestTimedOutIOException,public class RequestTimedOutIOException extends IOException { },1.0,
956,956,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\ResponseCorrelator.,ResponseCorrelator,"public class ResponseCorrelator extends TransportFilter { private static final Logger LOG = LoggerFactory getLogger(ResponseCorrelator class); private final Map<Integer, FutureResponse> requestMap = new HashMap<Integer, FutureResponse>(); private IntSequenceGenerator sequenceGenerator; private final boolean debug = LOG isDebugEnabled(); private IOException error; public ResponseCorrelator(Transport next) { this(next, new IntSequenceGenerator()); } public ResponseCorrelator(Transport next, IntSequenceGenerator sequenceGenerator) { super(next); this sequenceGenerator = sequenceGenerator; } public void oneway(Object o) throws IOException { Command command = (Command)o; command setCommandId(sequenceGenerator getNextSequenceId()); command setResponseRequired(false); next oneway(command); } public FutureResponse asyncRequest(Object o, ResponseCallback responseCallback) throws IOException { Command command = (Command) o; command setCommandId(sequenceGenerator getNextSequenceId()); command setResponseRequired(true); FutureResponse future = new FutureResponse(responseCallback); IOException priorError = null; synchronized (requestMap) { priorError = this error; if (priorError == null) { requestMap put(new Integer(command getCommandId()), future); } } if (priorError != null) { future set(new ExceptionResponse(priorError)); throw priorError; } next oneway(command); return future; } public Object request(Object command) throws IOException { FutureResponse response = asyncRequest(command, null); return response getResult(); } public Object request(Object command, int timeout) throws IOException { FutureResponse response = asyncRequest(command, null); return response getResult(timeout); } public void onCommand(Object o) { Command command = null; if (o instanceof Command) { command = (Command)o; } else { throw new ClassCastException( Object cannot be converted to a Command, Object + o); } if (command isResponse()) { Response response = (Response)command; FutureResponse future = null; synchronized (requestMap) { future = requestMap remove(Integer valueOf(response getCorrelationId())); } if (future != null) { future set(response); } else { if (debug) { LOG debug( Received unexpected response { + command + }for command id + response getCorrelationId()); } } } else { getTransportListener() onCommand(command); } } public void onException(IOException error) { dispose(error); super onException(error); } Override public void stop() throws Exception { dispose(new IOException( Stopped )); super stop(); } private void dispose(IOException error) { ArrayList<FutureResponse> requests=null; synchronized(requestMap) { if( this error==null) { this error = error; requests = new ArrayList<FutureResponse>(requestMap values()); requestMap clear(); } } if( requests!=null ) { for (Iterator<FutureResponse> iter = requests iterator(); iter hasNext();) { FutureResponse fr = iter next(); fr set(new ExceptionResponse(error)); } } } public IntSequenceGenerator getSequenceGenerator() { return sequenceGenerator; } public String toString() { return next toString(); } }",1.0,
957,957,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\ThreadNameFilter.,ThreadNameFilter,public class ThreadNameFilter extends TransportFilter { public ThreadNameFilter(Transport next) { super(next); } Override public void oneway(Object command) throws IOException { String address =(next!=null next getRemoteAddress() null); if (address!=null) { String name = Thread currentThread() getName(); try { String sendname = name + - SendTo +address; Thread currentThread() setName(sendname); super oneway(command); }finally { Thread currentThread() setName(name); } } else { super oneway(command); } } },1.0,
958,958,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\TransportDisposedIOException.,TransportDisposedIOException,public class TransportDisposedIOException extends IOException { private static final long serialVersionUID = -7107323414439622596L; public TransportDisposedIOException() { super(); } public TransportDisposedIOException(String message) { super(message); } },1.0,
960,960,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\TransportFilter.,TransportFilter,"public class TransportFilter implements TransportListener, Transport { protected final Transport next; protected TransportListener transportListener; public TransportFilter(Transport next) { this next = next; } public TransportListener getTransportListener() { return transportListener; } public void setTransportListener(TransportListener channelListener) { this transportListener = channelListener; if (channelListener == null) { next setTransportListener(null); } else { next setTransportListener(this); } } public void start() throws Exception { if (next == null) { throw new IOException( The next channel has not been set ); } if (transportListener == null) { throw new IOException( The command listener has not been set ); } next start(); } public void stop() throws Exception { next stop(); } public void onCommand(Object command) { transportListener onCommand(command); } public Transport getNext() { return next; } Override public String toString() { return next toString(); } public void oneway(Object command) throws IOException { next oneway(command); } public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException { return next asyncRequest(command, null); } public Object request(Object command) throws IOException { return next request(command); } public Object request(Object command, int timeout) throws IOException { return next request(command, timeout); } public void onException(IOException error) { transportListener onException(error); } public void transportInterupted() { transportListener transportInterupted(); } public void transportResumed() { transportListener transportResumed(); } public <T> T narrow(Class<T> target) { if (target isAssignableFrom(getClass())) { return target cast(this); } return next narrow(target); } public String getRemoteAddress() { return next getRemoteAddress(); } public boolean isFaultTolerant() { return next isFaultTolerant(); } public boolean isDisposed() { return next isDisposed(); } public boolean isConnected() { return next isConnected(); } public void reconnect(URI uri) throws IOException { next reconnect(uri); } public int getReceiveCounter() { return next getReceiveCounter(); } public boolean isReconnectSupported() { return next isReconnectSupported(); } public boolean isUpdateURIsSupported() { return next isUpdateURIsSupported(); } public void updateURIs(boolean rebalance,URI[] uris) throws IOException { next updateURIs(rebalance,uris); } }",1.0,
961,961,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\TransportServerFilter.,TransportServerFilter,public class TransportServerFilter implements TransportServer { protected final TransportServer next; public TransportServerFilter(TransportServer next) { this next = next; } public URI getConnectURI() { return next getConnectURI(); } public void setAcceptListener(TransportAcceptListener acceptListener) { next setAcceptListener(acceptListener); } public void setBrokerInfo(BrokerInfo brokerInfo) { next setBrokerInfo(brokerInfo); } public void start() throws Exception { next start(); } public void stop() throws Exception { next stop(); } public InetSocketAddress getSocketAddress() { return next getSocketAddress(); } public boolean isSslServer() { return next isSslServer(); } },1.0,
962,962,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\TransportServerSupport.,TransportServerSupport,"public abstract class TransportServerSupport extends ServiceSupport implements TransportServer { private URI connectURI; private URI bindLocation; private TransportAcceptListener acceptListener; protected Map<String, Object> transportOptions; public TransportServerSupport() { } public TransportServerSupport(URI location) { this connectURI = location; this bindLocation = location; } public TransportAcceptListener getAcceptListener() { return acceptListener; } public void setAcceptListener(TransportAcceptListener acceptListener) { this acceptListener = acceptListener; } public URI getConnectURI() { return connectURI; } public void setConnectURI(URI location) { this connectURI = location; } protected void onAcceptError(Exception e) { if (acceptListener != null) { acceptListener onAcceptError(e); } } public URI getBindLocation() { return bindLocation; } public void setBindLocation(URI bindLocation) { this bindLocation = bindLocation; } public void setTransportOption(Map<String, Object> transportOptions) { this transportOptions = transportOptions; } }",1.0,
964,964,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\TransportSupport.,TransportSupport,"public abstract class TransportSupport extends ServiceSupport implements Transport { private static final Logger LOG = LoggerFactory getLogger(TransportSupport class); TransportListener transportListener; public TransportListener getTransportListener() { return transportListener; } public void setTransportListener(TransportListener commandListener) { this transportListener = commandListener; } public <T> T narrow(Class<T> target) { boolean assignableFrom = target isAssignableFrom(getClass()); if (assignableFrom) { return target cast(this); } return null; } public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException { throw new AssertionError( Unsupported Method ); } public Object request(Object command) throws IOException { throw new AssertionError( Unsupported Method ); } public Object request(Object command, int timeout) throws IOException { throw new AssertionError( Unsupported Method ); } public void doConsume(Object command) { if (command != null) { if (transportListener != null) { transportListener onCommand(command); } else { LOG error( No transportListener available to process inbound command + command); } } } public void onException(IOException e) { if (transportListener != null) { try { transportListener onException(e); } catch (RuntimeException e2) { LOG debug( Unexpected runtime exception + e2, e2); } } } protected void checkStarted() throws IOException { if (!isStarted()) { throw new IOException( The transport is not running ); } } public boolean isFaultTolerant() { return false; } public void reconnect(URI uri) throws IOException { throw new IOException( Not supported ); } public boolean isReconnectSupported() { return false; } public boolean isUpdateURIsSupported() { return false; } public void updateURIs(boolean reblance,URI[] uris) throws IOException { throw new IOException( Not supported ); } public boolean isDisposed() { return isStopped(); } public boolean isConnected() { return isStarted(); } }",1.0,
965,965,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\TransportThreadSupport.,TransportThreadSupport,"public abstract class TransportThreadSupport extends TransportSupport implements Runnable { private boolean daemon; private Thread runner; private long stackSize; public boolean isDaemon() { return daemon; } public void setDaemon(boolean daemon) { this daemon = daemon; } protected void doStart() throws Exception { runner = new Thread(null, this, ActiveMQ Transport + toString(), stackSize); runner setDaemon(daemon); runner start(); } public long getStackSize() { return this stackSize; } public void setStackSize(long stackSize) { this stackSize = stackSize; } }",1.0,
967,967,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\WriteTimeoutFilter.,WriteTimeoutFilter,"public class WriteTimeoutFilter extends TransportFilter { private static final Logger LOG = LoggerFactory getLogger(WriteTimeoutFilter class); protected static ConcurrentLinkedQueue<WriteTimeoutFilter> writers = new ConcurrentLinkedQueue<WriteTimeoutFilter>(); protected static AtomicInteger messageCounter = new AtomicInteger(0); protected static TimeoutThread timeoutThread = new TimeoutThread(); protected static long sleep = 5000l; protected long writeTimeout = -1; public WriteTimeoutFilter(Transport next) { super(next); } Override public void oneway(Object command) throws IOException { try { registerWrite(this); super oneway(command); } catch (IOException x) { throw x; } finally { deRegisterWrite(this,false,null); } } public long getWriteTimeout() { return writeTimeout; } public void setWriteTimeout(long writeTimeout) { this writeTimeout = writeTimeout; } public static long getSleep() { return sleep; } public static void setSleep(long sleep) { WriteTimeoutFilter sleep = sleep; } protected TimeStampStream getWriter() { return next narrow(TimeStampStream class); } protected Socket getSocket() { return next narrow(Socket class); } protected static void registerWrite(WriteTimeoutFilter filter) { writers add(filter); } protected static boolean deRegisterWrite(WriteTimeoutFilter filter, boolean fail, IOException iox) { boolean result = writers remove(filter); if (result) { if (fail) { String message = Forced write timeout for +filter getNext() getRemoteAddress(); LOG warn(message); Socket sock = filter getSocket(); if (sock==null) { LOG error( Destination socket is null, unable to close socket ( +message+ ) ); } else { try { sock close(); }catch (IOException ignore) { } } } } return result; } Override public void start() throws Exception { super start(); } Override public void stop() throws Exception { super stop(); } protected static class TimeoutThread extends Thread { static AtomicInteger instance = new AtomicInteger(0); boolean run = true; public TimeoutThread() { setName( WriteTimeoutFilter-Timeout- +instance incrementAndGet()); setDaemon(true); setPriority(Thread MIN PRIORITY); start(); } public void run() { while (run) { boolean error = false; try { if (!interrupted()) { Iterator<WriteTimeoutFilter> filters = writers iterator(); while (run && filters hasNext()) { WriteTimeoutFilter filter = filters next(); if (filter getWriteTimeout()<=0) continue; long writeStart = filter getWriter() getWriteTimestamp(); long delta = (filter getWriter() isWriting() && writeStart>0) System currentTimeMillis() - writeStart -1; if (delta>filter getWriteTimeout()) { WriteTimeoutFilter deRegisterWrite(filter, true,null); } } } try { Thread sleep(getSleep()); error = false; } catch (InterruptedException x) { } }catch (Throwable t) { if (!error) { LOG error( WriteTimeout thread unable validate existing sockets ,t); error = true; } } } } } }",1.0,
968,968,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\WriteTimeoutFilter.,TimeoutThread,"protected static class TimeoutThread extends Thread { static AtomicInteger instance = new AtomicInteger(0); boolean run = true; public TimeoutThread() { setName( WriteTimeoutFilter-Timeout- +instance incrementAndGet()); setDaemon(true); setPriority(Thread MIN PRIORITY); start(); } public void run() { while (run) { boolean error = false; try { if (!interrupted()) { Iterator<WriteTimeoutFilter> filters = writers iterator(); while (run && filters hasNext()) { WriteTimeoutFilter filter = filters next(); if (filter getWriteTimeout()<=0) continue; long writeStart = filter getWriter() getWriteTimestamp(); long delta = (filter getWriter() isWriting() && writeStart>0) System currentTimeMillis() - writeStart -1; if (delta>filter getWriteTimeout()) { WriteTimeoutFilter deRegisterWrite(filter, true,null); } } } try { Thread sleep(getSleep()); error = false; } catch (InterruptedException x) { } }catch (Throwable t) { if (!error) { LOG error( WriteTimeout thread unable validate existing sockets ,t); error = true; } } } } }",1.0,
969,969,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\DiscoveryAgentFactory.,DiscoveryAgentFactory,"public abstract class DiscoveryAgentFactory { private static final FactoryFinder DISCOVERY AGENT FINDER = new FactoryFinder( META-INF/services/org/apache/activemq/transport/discoveryagent/ ); private static final ConcurrentHashMap<String, DiscoveryAgentFactory> DISCOVERY AGENT FACTORYS = new ConcurrentHashMap<String, DiscoveryAgentFactory>(); private static DiscoveryAgentFactory findDiscoveryAgentFactory(URI uri) throws IOException { String scheme = uri getScheme(); if (scheme == null) { throw new IOException( DiscoveryAgent scheme not specified [ + uri + ] ); } DiscoveryAgentFactory daf = DISCOVERY AGENT FACTORYS get(scheme); if (daf == null) { try { daf = (DiscoveryAgentFactory)DISCOVERY AGENT FINDER newInstance(scheme); DISCOVERY AGENT FACTORYS put(scheme, daf); } catch (Throwable e) { throw IOExceptionSupport create( DiscoveryAgent scheme NOT recognized [ + scheme + ] , e); } } return daf; } public static DiscoveryAgent createDiscoveryAgent(URI uri) throws IOException { DiscoveryAgentFactory tf = findDiscoveryAgentFactory(uri); return tf doCreateDiscoveryAgent(uri); } protected abstract DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException; }",1.0,
970,970,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\DiscoveryTransport.,DiscoveryTransport,"public class DiscoveryTransport extends TransportFilter implements DiscoveryListener { private static final Logger LOG = LoggerFactory getLogger(DiscoveryTransport class); private final CompositeTransport next; private DiscoveryAgent discoveryAgent; private final ConcurrentHashMap<String, URI> serviceURIs = new ConcurrentHashMap<String, URI>(); private Map<String, String> parameters; public DiscoveryTransport(CompositeTransport next) { super(next); this next = next; } Override public void start() throws Exception { if (discoveryAgent == null) { throw new IllegalStateException( discoveryAgent not configured ); } discoveryAgent setDiscoveryListener(this); discoveryAgent start(); next start(); } Override public void stop() throws Exception { ServiceStopper ss = new ServiceStopper(); ss stop(discoveryAgent); ss stop(next); ss throwFirstException(); } public void onServiceAdd(DiscoveryEvent event) { String url = event getServiceName(); if (url != null) { try { URI uri = new URI(url); LOG info( Adding new broker connection URL + uri); uri = URISupport applyParameters(uri, parameters, DISCOVERED OPTION PREFIX); serviceURIs put(event getServiceName(), uri); next add(false,new URI[] {uri}); } catch (URISyntaxException e) { LOG warn( Could not connect to remote URI + url + due to bad URI syntax + e, e); } } } public void onServiceRemove(DiscoveryEvent event) { URI uri = serviceURIs get(event getServiceName()); if (uri != null) { next remove(false,new URI[] {uri}); } } public DiscoveryAgent getDiscoveryAgent() { return discoveryAgent; } public void setDiscoveryAgent(DiscoveryAgent discoveryAgent) { this discoveryAgent = discoveryAgent; } public void setParameters(Map<String, String> parameters) { this parameters = parameters; } }",1.0,
971,971,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\DiscoveryTransportFactory.,DiscoveryTransportFactory,"public class DiscoveryTransportFactory extends FailoverTransportFactory { public Transport createTransport(CompositeData compositeData) throws IOException { Map<String, String> parameters = new HashMap<String, String>(compositeData getParameters()); FailoverTransport failoverTransport = createTransport(parameters); return createTransport(failoverTransport, compositeData, parameters); } public static DiscoveryTransport createTransport(CompositeTransport compositeTransport, CompositeData compositeData, Map<String, String> parameters) throws IOException { DiscoveryTransport transport = new DiscoveryTransport(compositeTransport); IntrospectionSupport setProperties(transport, parameters); transport setParameters(parameters); URI discoveryAgentURI = compositeData getComponents()[0]; DiscoveryAgent discoveryAgent = DiscoveryAgentFactory createDiscoveryAgent(discoveryAgentURI); transport setDiscoveryAgent(discoveryAgent); return transport; } public TransportServer doBind(URI location) throws IOException { throw new IOException( Invalid server URI + location); } }",1.0,
972,972,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\masterslave\MasterSlaveDiscoveryAgent.,MasterSlaveDiscoveryAgent,"public class MasterSlaveDiscoveryAgent extends SimpleDiscoveryAgent { private final static Logger LOG = LoggerFactory getLogger(MasterSlaveDiscoveryAgent class); private String[] msServices = new String[]{}; Override public String[] getServices() { return msServices; } Override public void setServices(String services) { this msServices = services split( , ); configureServices(); } Override public void setServices(String services[]) { this msServices = services; configureServices(); } Override public void setServices(URI services[]) { this msServices = new String[services length]; for (int i = 0; i < services length; i++) { this msServices[i] = services[i] toString(); } configureServices(); } protected void configureServices() { if ((msServices == null) || (msServices length < 2)) { LOG error( masterSlave requires at least 2 URIs ); msServices = new String[]{}; throw new IllegalArgumentException( Expecting at least 2 arguments ); } StringBuffer buf = new StringBuffer(); buf append( failover ( ); for (int i = 0; i < (msServices length - 1); i++) { buf append(msServices[i]); buf append( , ); } buf append(msServices[msServices length - 1]); buf append( ) randomize=false&maxReconnectAttempts=0 ); super setServices(new String[]{buf toString()}); } }",1.0,
973,973,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\masterslave\MasterSlaveDiscoveryAgentFactory.,MasterSlaveDiscoveryAgentFactory,"public class MasterSlaveDiscoveryAgentFactory extends DiscoveryAgentFactory { Override protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException { try { CompositeData data = URISupport parseComposite(uri); Map options = data getParameters(); MasterSlaveDiscoveryAgent rc = new MasterSlaveDiscoveryAgent(); IntrospectionSupport setProperties(rc, options); rc setServices(data getComponents()); return rc; } catch (Throwable e) { throw IOExceptionSupport create( Could not create discovery agent + uri, e); } } }",1.0,
975,975,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\multicast\MulticastDiscoveryAgent.,RemoteBrokerData,"class RemoteBrokerData extends DiscoveryEvent { long lastHeartBeat; long recoveryTime; int failureCount; boolean failed; public RemoteBrokerData(String brokerName, String service) { super(service); setBrokerName(brokerName); this lastHeartBeat = System currentTimeMillis(); } public synchronized void updateHeartBeat() { lastHeartBeat = System currentTimeMillis(); if (!failed && failureCount > 0 && (lastHeartBeat - recoveryTime) > 1000 * 60) { if (LOG isDebugEnabled()) { LOG debug( I now think that the + serviceName + service has recovered ); } failureCount = 0; recoveryTime = 0; } } public synchronized long getLastHeartBeat() { return lastHeartBeat; } public synchronized boolean markFailed() { if (!failed) { failed = true; failureCount++; long reconnectDelay; if (!useExponentialBackOff) { reconnectDelay = initialReconnectDelay; } else { reconnectDelay = (long)Math pow(backOffMultiplier, failureCount); if (reconnectDelay > maxReconnectDelay) { reconnectDelay = maxReconnectDelay; } } if (LOG isDebugEnabled()) { LOG debug( Remote failure of + serviceName + while still receiving multicast advertisements Advertising events will be suppressed for + reconnectDelay + ms, the current failure count is + failureCount); } recoveryTime = System currentTimeMillis() + reconnectDelay; return true; } return false; } public synchronized boolean doRecovery() { if (!failed) { return false; } if (maxReconnectAttempts > 0 && failureCount > maxReconnectAttempts) { if (LOG isDebugEnabled()) { LOG debug( Max reconnect attempts of the + serviceName + service has been reached ); } return false; } if (System currentTimeMillis() < recoveryTime) { return false; } if (LOG isDebugEnabled()) { LOG debug( Resuming event advertisement of the + serviceName + service ); } failed = false; return true; } public boolean isFailed() { return failed; } }",1.0,
976,976,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\multicast\MulticastDiscoveryAgentFactory.,MulticastDiscoveryAgentFactory,"public class MulticastDiscoveryAgentFactory extends DiscoveryAgentFactory { private static final Logger LOG = LoggerFactory getLogger(MulticastDiscoveryAgentFactory class); protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException { try { if (LOG isTraceEnabled()) { LOG trace( doCreateDiscoveryAgent uri = + uri toString()); } MulticastDiscoveryAgent mda = new MulticastDiscoveryAgent(); mda setDiscoveryURI(uri); Map options = URISupport parseParameters(uri); IntrospectionSupport setProperties(mda, options); return mda; } catch (Throwable e) { throw IOExceptionSupport create( Could not create discovery agent + uri, e); } } }",1.0,
977,977,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\simple\SimpleDiscoveryAgent.,SimpleDiscoveryAgent,"public class SimpleDiscoveryAgent implements DiscoveryAgent { private final static Logger LOG = LoggerFactory getLogger(SimpleDiscoveryAgent class); private long initialReconnectDelay = 1000; private long maxReconnectDelay = 1000 * 30; private long backOffMultiplier = 2; private boolean useExponentialBackOff=true; private int maxReconnectAttempts; private final Object sleepMutex = new Object(); private long minConnectTime = 5000; private DiscoveryListener listener; private String services[] = new String[] {}; private final AtomicBoolean running = new AtomicBoolean(false); private TaskRunnerFactory taskRunner; class SimpleDiscoveryEvent extends DiscoveryEvent { private int connectFailures; private long reconnectDelay = initialReconnectDelay; private long connectTime = System currentTimeMillis(); private AtomicBoolean failed = new AtomicBoolean(false); public SimpleDiscoveryEvent(String service) { super(service); } public SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) { super(copy); connectFailures = copy connectFailures; reconnectDelay = copy reconnectDelay; connectTime = copy connectTime; failed set(copy failed get()); } Override public String toString() { return [ + serviceName + , failed + failed + , connectionFailures + connectFailures + ] ; } } public void setDiscoveryListener(DiscoveryListener listener) { this listener = listener; } public void registerService(String name) throws IOException { } public void start() throws Exception { taskRunner = new TaskRunnerFactory(); taskRunner init(); running set(true); for (int i = 0; i < services length; i++) { listener onServiceAdd(new SimpleDiscoveryEvent(services[i])); } } public void stop() throws Exception { running set(false); taskRunner shutdown(); synchronized (sleepMutex) { sleepMutex notifyAll(); } } public String[] getServices() { return services; } public void setServices(String services) { this services = services split( , ); } public void setServices(String services[]) { this services = services; } public void setServices(URI services[]) { this services = new String[services length]; for (int i = 0; i < services length; i++) { this services[i] = services[i] toString(); } } public void serviceFailed(DiscoveryEvent devent) throws IOException { final SimpleDiscoveryEvent sevent = (SimpleDiscoveryEvent)devent; if (sevent failed compareAndSet(false, true)) { listener onServiceRemove(sevent); taskRunner execute(new Runnable() { public void run() { SimpleDiscoveryEvent event = new SimpleDiscoveryEvent(sevent); if (event connectTime + minConnectTime > System currentTimeMillis()) { LOG debug( Failure occurred soon after the discovery event was generated It will be classified as a connection failure +event); event connectFailures++; if (maxReconnectAttempts > 0 && event connectFailures >= maxReconnectAttempts) { LOG warn( Reconnect attempts exceeded +maxReconnectAttempts+ tries Reconnecting has been disabled for + event); return; } synchronized (sleepMutex) { try { if (!running get()) { LOG debug( Reconnecting disabled stopped ); return; } LOG debug( Waiting +event reconnectDelay+ ms before attempting to reconnect ); sleepMutex wait(event reconnectDelay); } catch (InterruptedException ie) { LOG debug( Reconnecting disabled + ie); Thread currentThread() interrupt(); return; } } if (!useExponentialBackOff) { event reconnectDelay = initialReconnectDelay; } else { event reconnectDelay *= backOffMultiplier; if (event reconnectDelay > maxReconnectDelay) { event reconnectDelay = maxReconnectDelay; } } } else { event connectFailures = 0; event reconnectDelay = initialReconnectDelay; } if (!running get()) { LOG debug( Reconnecting disabled stopped ); return; } event connectTime = System currentTimeMillis(); event failed set(false); listener onServiceAdd(event); } }, Simple Discovery Agent ); } } public long getBackOffMultiplier() { return backOffMultiplier; } public void setBackOffMultiplier(long backOffMultiplier) { this backOffMultiplier = backOffMultiplier; } public long getInitialReconnectDelay() { return initialReconnectDelay; } public void setInitialReconnectDelay(long initialReconnectDelay) { this initialReconnectDelay = initialReconnectDelay; } public int getMaxReconnectAttempts() { return maxReconnectAttempts; } public void setMaxReconnectAttempts(int maxReconnectAttempts) { this maxReconnectAttempts = maxReconnectAttempts; } public long getMaxReconnectDelay() { return maxReconnectDelay; } public void setMaxReconnectDelay(long maxReconnectDelay) { this maxReconnectDelay = maxReconnectDelay; } public long getMinConnectTime() { return minConnectTime; } public void setMinConnectTime(long minConnectTime) { this minConnectTime = minConnectTime; } public boolean isUseExponentialBackOff() { return useExponentialBackOff; } public void setUseExponentialBackOff(boolean useExponentialBackOff) { this useExponentialBackOff = useExponentialBackOff; } }",1.0,
978,978,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\simple\SimpleDiscoveryAgent.,SimpleDiscoveryEvent,"class SimpleDiscoveryEvent extends DiscoveryEvent { private int connectFailures; private long reconnectDelay = initialReconnectDelay; private long connectTime = System currentTimeMillis(); private AtomicBoolean failed = new AtomicBoolean(false); public SimpleDiscoveryEvent(String service) { super(service); } public SimpleDiscoveryEvent(SimpleDiscoveryEvent copy) { super(copy); connectFailures = copy connectFailures; reconnectDelay = copy reconnectDelay; connectTime = copy connectTime; failed set(copy failed get()); } Override public String toString() { return [ + serviceName + , failed + failed + , connectionFailures + connectFailures + ] ; } }",1.0,
979,979,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\simple\SimpleDiscoveryAgentFactory.,SimpleDiscoveryAgentFactory,"public class SimpleDiscoveryAgentFactory extends DiscoveryAgentFactory { protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException { try { CompositeData data = URISupport parseComposite(uri); Map options = data getParameters(); SimpleDiscoveryAgent rc = new SimpleDiscoveryAgent(); IntrospectionSupport setProperties(rc, options); rc setServices(data getComponents()); return rc; } catch (Throwable e) { throw IOExceptionSupport create( Could not create discovery agent + uri, e); } } }",1.0,
980,980,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\zeroconf\JmDNSFactory.,JmDNSFactory,"public final class JmDNSFactory { static Map<InetAddress, UsageTracker> registry = new HashMap<InetAddress, UsageTracker>(); static class UsageTracker { AtomicInteger count = new AtomicInteger(0); JmDNS jmDNS; } private JmDNSFactory() { } static synchronized JmDNS create(final InetAddress address) throws IOException { UsageTracker tracker = registry get(address); if (tracker == null) { tracker = new UsageTracker(); tracker jmDNS = JmDNS create(address); registry put(address, tracker); } tracker count incrementAndGet(); return tracker jmDNS; } static synchronized boolean onClose(InetAddress address) { UsageTracker tracker = registry get(address); if (tracker != null) { if (tracker count decrementAndGet() == 0) { registry remove(address); return true; } } return false; } }",1.0,
981,981,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\zeroconf\JmDNSFactory.,UsageTracker,static class UsageTracker { AtomicInteger count = new AtomicInteger(0); JmDNS jmDNS; },1.0,
983,983,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\zeroconf\ZeroconfDiscoveryAgentFactory.,ZeroconfDiscoveryAgentFactory,"public class ZeroconfDiscoveryAgentFactory extends DiscoveryAgentFactory { protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException { try { Map options = URISupport parseParameters(uri); ZeroconfDiscoveryAgent rc = new ZeroconfDiscoveryAgent(); rc setGroup(uri getHost()); IntrospectionSupport setProperties(rc, options); return rc; } catch (Throwable e) { throw IOExceptionSupport create( Could not create discovery agent + uri, e); } } }",1.0,
984,984,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\failover\BackupTransport.,BackupTransport,class BackupTransport extends DefaultTransportListener{ private final FailoverTransport failoverTransport; private Transport transport; private URI uri; private boolean disposed; BackupTransport(FailoverTransport ft){ this failoverTransport=ft; } Override public void onException(IOException error) { this disposed=true; if (failoverTransport!=null) { this failoverTransport reconnect(false); } } public Transport getTransport() { return transport; } public void setTransport(Transport transport) { this transport = transport; this transport setTransportListener(this); } public URI getUri() { return uri; } public void setUri(URI uri) { this uri = uri; } public boolean isDisposed() { return disposed || transport != null && transport isDisposed(); } public void setDisposed(boolean disposed) { this disposed = disposed; } Override public int hashCode() { return uri != null uri hashCode() -1; } Override public boolean equals(Object obj) { if (obj instanceof BackupTransport) { BackupTransport other = (BackupTransport) obj; return uri== null && other uri==null || (uri != null && other uri != null && uri equals(other uri)); } return false; } Override public String toString() { return Backup transport + uri; } },1.0,
985,985,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\failover\FailoverTransport.,FailoverTransport,"public class FailoverTransport implements CompositeTransport { private static final Logger LOG = LoggerFactory getLogger(FailoverTransport class); private static final int DEFAULT INITIAL RECONNECT DELAY = 10; private static final int INFINITE = -1; private TransportListener transportListener; private boolean disposed; private boolean connected; private final CopyOnWriteArrayList<URI> uris = new CopyOnWriteArrayList<URI>(); private final CopyOnWriteArrayList<URI> updated = new CopyOnWriteArrayList<URI>(); private final Object reconnectMutex = new Object(); private final Object backupMutex = new Object(); private final Object sleepMutex = new Object(); private final Object listenerMutex = new Object(); private final ConnectionStateTracker stateTracker = new ConnectionStateTracker(); private final Map<Integer, Command> requestMap = new LinkedHashMap<Integer, Command>(); private URI connectedTransportURI; private URI failedConnectTransportURI; private final AtomicReference<Transport> connectedTransport = new AtomicReference<Transport>(); private final TaskRunnerFactory reconnectTaskFactory; private final TaskRunner reconnectTask; private boolean started; private boolean initialized; private long initialReconnectDelay = DEFAULT INITIAL RECONNECT DELAY; private long maxReconnectDelay = 1000 * 30; private double backOffMultiplier = 2d; private long timeout = INFINITE; private boolean useExponentialBackOff = true; private boolean randomize = true; private int maxReconnectAttempts = INFINITE; private int startupMaxReconnectAttempts = INFINITE; private int connectFailures; private long reconnectDelay = DEFAULT INITIAL RECONNECT DELAY; private Exception connectionFailure; private boolean firstConnection = true; private boolean backup = false; private final List<BackupTransport> backups = new CopyOnWriteArrayList<BackupTransport>(); private int backupPoolSize = 1; private boolean trackMessages = false; private boolean trackTransactionProducers = true; private int maxCacheSize = 128 * 1024; private final TransportListener disposedListener = new DefaultTransportListener() { }; private final TransportListener myTransportListener = createTransportListener(); private boolean updateURIsSupported = true; private boolean reconnectSupported = true; private SslContext brokerSslContext; private String updateURIsURL = null; private boolean rebalanceUpdateURIs = true; private boolean doRebalance = false; private boolean connectedToPriority = false; private boolean priorityBackup = false; private ArrayList<URI> priorityList = new ArrayList<URI>(); private boolean priorityBackupAvailable = false; public FailoverTransport() throws InterruptedIOException { brokerSslContext = SslContext getCurrentSslContext(); stateTracker setTrackTransactions(true); reconnectTaskFactory = new TaskRunnerFactory(); reconnectTaskFactory init(); reconnectTask = reconnectTaskFactory createTaskRunner(new Task() { public boolean iterate() { boolean result = false; if (!started) { return result; } boolean buildBackup = true; synchronized (backupMutex) { if ((connectedTransport get() == null || doRebalance || priorityBackupAvailable) && !disposed) { result = doReconnect(); buildBackup = false; connectedToPriority = isPriority(connectedTransportURI); } } if (buildBackup) { buildBackups(); if (priorityBackup && !connectedToPriority) { try { doDelay(); if (reconnectTask == null) { return true; } reconnectTask wakeup(); } catch (InterruptedException e) { LOG debug( Reconnect task has been interrupted , e); } } } else { buildBackup = true; try { if (reconnectTask == null) { return true; } reconnectTask wakeup(); } catch (InterruptedException e) { LOG debug( Reconnect task has been interrupted , e); } } return result; } }, ActiveMQ Failover Worker + System identityHashCode(this)); } TransportListener createTransportListener() { return new TransportListener() { public void onCommand(Object o) { Command command = (Command) o; if (command == null) { return; } if (command isResponse()) { Object object = null; synchronized (requestMap) { object = requestMap remove(Integer valueOf(((Response) command) getCorrelationId())); } if (object != null && object getClass() == Tracked class) { ((Tracked) object) onResponses(command); } } if (!initialized) { initialized = true; } if (command isConnectionControl()) { handleConnectionControl((ConnectionControl) command); } if (transportListener != null) { transportListener onCommand(command); } } public void onException(IOException error) { try { handleTransportFailure(error); } catch (InterruptedException e) { Thread currentThread() interrupt(); transportListener onException(new InterruptedIOException()); } } public void transportInterupted() { if (transportListener != null) { transportListener transportInterupted(); } } public void transportResumed() { if (transportListener != null) { transportListener transportResumed(); } } }; } public final void disposeTransport(Transport transport) { transport setTransportListener(disposedListener); ServiceSupport dispose(transport); } public final void handleTransportFailure(IOException e) throws InterruptedException { if (LOG isTraceEnabled()) { LOG trace(this + handleTransportFailure + e); } Transport transport = connectedTransport getAndSet(null); if (transport == null) { synchronized (reconnectMutex) { transport = connectedTransport getAndSet(null); } } if (transport != null) { disposeTransport(transport); boolean reconnectOk = false; synchronized (reconnectMutex) { if (canReconnect()) { reconnectOk = true; } LOG warn( Transport ( + transport getRemoteAddress() + ) failed, reason + e + (reconnectOk , , not ) + attempting to automatically reconnect ); initialized = false; failedConnectTransportURI = connectedTransportURI; connectedTransportURI = null; connected = false; if (transportListener != null) { transportListener transportInterupted(); } if (reconnectOk) { updated remove(failedConnectTransportURI); reconnectTask wakeup(); } else if (!isDisposed()) { propagateFailureToExceptionListener(e); } } } } private boolean canReconnect() { return started && 0 != calculateReconnectAttemptLimit(); } public final void handleConnectionControl(ConnectionControl control) { String reconnectStr = control getReconnectTo(); if (reconnectStr != null) { reconnectStr = reconnectStr trim(); if (reconnectStr length() > 0) { try { URI uri = new URI(reconnectStr); if (isReconnectSupported()) { reconnect(uri); LOG info( Reconnected to + uri); } } catch (Exception e) { LOG error( Failed to handle ConnectionControl reconnect to + reconnectStr, e); } } } processNewTransports(control isRebalanceConnection(), control getConnectedBrokers()); } private final void processNewTransports(boolean rebalance, String newTransports) { if (newTransports != null) { newTransports = newTransports trim(); if (newTransports length() > 0 && isUpdateURIsSupported()) { List<URI> list = new ArrayList<URI>(); StringTokenizer tokenizer = new StringTokenizer(newTransports, , ); while (tokenizer hasMoreTokens()) { String str = tokenizer nextToken(); try { URI uri = new URI(str); list add(uri); } catch (Exception e) { LOG error( Failed to parse broker address + str, e); } } if (list isEmpty() == false) { try { updateURIs(rebalance, list toArray(new URI[list size()])); } catch (IOException e) { LOG error( Failed to update transport URI s from + newTransports, e); } } } } } public void start() throws Exception { synchronized (reconnectMutex) { if (LOG isDebugEnabled()) { LOG debug( Started + this); } if (started) { return; } started = true; stateTracker setMaxCacheSize(getMaxCacheSize()); stateTracker setTrackMessages(isTrackMessages()); stateTracker setTrackTransactionProducers(isTrackTransactionProducers()); if (connectedTransport get() != null) { stateTracker restore(connectedTransport get()); } else { reconnect(false); } } } public void stop() throws Exception { Transport transportToStop = null; List<Transport> backupsToStop = new ArrayList<Transport>(backups size()); try { synchronized (reconnectMutex) { if (LOG isDebugEnabled()) { LOG debug( Stopped + this); } if (!started) { return; } started = false; disposed = true; connected = false; if (connectedTransport get() != null) { transportToStop = connectedTransport getAndSet(null); } reconnectMutex notifyAll(); } synchronized (sleepMutex) { sleepMutex notifyAll(); } } finally { reconnectTask shutdown(); reconnectTaskFactory shutdownNow(); } synchronized(backupMutex) { for (BackupTransport backup backups) { backup setDisposed(true); Transport transport = backup getTransport(); if (transport != null) { transport setTransportListener(disposedListener); backupsToStop add(transport); } } backups clear(); } for (Transport transport backupsToStop) { try { if (LOG isTraceEnabled()) { LOG trace( Stopped backup + transport); } disposeTransport(transport); } catch (Exception e) { } } if (transportToStop != null) { transportToStop stop(); } } public long getInitialReconnectDelay() { return initialReconnectDelay; } public void setInitialReconnectDelay(long initialReconnectDelay) { this initialReconnectDelay = initialReconnectDelay; } public long getMaxReconnectDelay() { return maxReconnectDelay; } public void setMaxReconnectDelay(long maxReconnectDelay) { this maxReconnectDelay = maxReconnectDelay; } public long getReconnectDelay() { return reconnectDelay; } public void setReconnectDelay(long reconnectDelay) { this reconnectDelay = reconnectDelay; } public double getReconnectDelayExponent() { return backOffMultiplier; } public void setReconnectDelayExponent(double reconnectDelayExponent) { this backOffMultiplier = reconnectDelayExponent; } public Transport getConnectedTransport() { return connectedTransport get(); } public URI getConnectedTransportURI() { return connectedTransportURI; } public int getMaxReconnectAttempts() { return maxReconnectAttempts; } public void setMaxReconnectAttempts(int maxReconnectAttempts) { this maxReconnectAttempts = maxReconnectAttempts; } public int getStartupMaxReconnectAttempts() { return this startupMaxReconnectAttempts; } public void setStartupMaxReconnectAttempts(int startupMaxReconnectAttempts) { this startupMaxReconnectAttempts = startupMaxReconnectAttempts; } public long getTimeout() { return timeout; } public void setTimeout(long timeout) { this timeout = timeout; } public boolean isRandomize() { return randomize; } public void setRandomize(boolean randomize) { this randomize = randomize; } public boolean isBackup() { return backup; } public void setBackup(boolean backup) { this backup = backup; } public int getBackupPoolSize() { return backupPoolSize; } public void setBackupPoolSize(int backupPoolSize) { this backupPoolSize = backupPoolSize; } public int getCurrentBackups() { return this backups size(); } public boolean isTrackMessages() { return trackMessages; } public void setTrackMessages(boolean trackMessages) { this trackMessages = trackMessages; } public boolean isTrackTransactionProducers() { return this trackTransactionProducers; } public void setTrackTransactionProducers(boolean trackTransactionProducers) { this trackTransactionProducers = trackTransactionProducers; } public int getMaxCacheSize() { return maxCacheSize; } public void setMaxCacheSize(int maxCacheSize) { this maxCacheSize = maxCacheSize; } public boolean isPriorityBackup() { return priorityBackup; } public void setPriorityBackup(boolean priorityBackup) { this priorityBackup = priorityBackup; } public void setPriorityURIs(String priorityURIs) { StringTokenizer tokenizer = new StringTokenizer(priorityURIs, , ); while (tokenizer hasMoreTokens()) { String str = tokenizer nextToken(); try { URI uri = new URI(str); priorityList add(uri); } catch (Exception e) { LOG error( Failed to parse broker address + str, e); } } } public void oneway(Object o) throws IOException { Command command = (Command) o; Exception error = null; try { synchronized (reconnectMutex) { if (command != null && connectedTransport get() == null) { if (command isShutdownInfo()) { return; } else if (command instanceof RemoveInfo || command isMessageAck()) { stateTracker track(command); if (command isResponseRequired()) { Response response = new Response(); response setCorrelationId(command getCommandId()); myTransportListener onCommand(response); } return; } else if (command instanceof MessagePull) { MessagePull pullRequest = (MessagePull) command; if (pullRequest getTimeout() != 0) { MessageDispatch dispatch = new MessageDispatch(); dispatch setConsumerId(pullRequest getConsumerId()); dispatch setDestination(pullRequest getDestination()); myTransportListener onCommand(dispatch); } return; } } for (int i = 0; !disposed; i++) { try { Transport transport = connectedTransport get(); long start = System currentTimeMillis(); boolean timedout = false; while (transport == null && !disposed && connectionFailure == null && !Thread currentThread() isInterrupted()) { if (LOG isTraceEnabled()) { LOG trace( Waiting for transport to reconnect + command); } long end = System currentTimeMillis(); if (timeout > 0 && (end - start > timeout)) { timedout = true; if (LOG isInfoEnabled()) { LOG info( Failover timed out after + (end - start) + ms ); } break; } try { reconnectMutex wait(100); } catch (InterruptedException e) { Thread currentThread() interrupt(); if (LOG isDebugEnabled()) { LOG debug( Interupted + e, e); } } transport = connectedTransport get(); } if (transport == null) { if (disposed) { error = new IOException( Transport disposed ); } else if (connectionFailure != null) { error = connectionFailure; } else if (timedout == true) { error = new IOException( Failover timeout of + timeout + ms reached ); } else { error = new IOException( Unexpected failure ); } break; } Tracked tracked = stateTracker track(command); synchronized (requestMap) { if (tracked != null && tracked isWaitingForResponse()) { requestMap put(Integer valueOf(command getCommandId()), tracked); } else if (tracked == null && command isResponseRequired()) { requestMap put(Integer valueOf(command getCommandId()), command); } } try { transport oneway(command); stateTracker trackBack(command); } catch (IOException e) { if (tracked == null) { if (command isResponseRequired()) { requestMap remove(Integer valueOf(command getCommandId())); } throw e; } else { if (LOG isDebugEnabled()) { LOG debug( Send oneway attempt + i + failed for command + command); } handleTransportFailure(e); } } return; } catch (IOException e) { if (LOG isDebugEnabled()) { LOG debug( Send oneway attempt + i + failed for command + command); } handleTransportFailure(e); } } } } catch (InterruptedException e) { Thread currentThread() interrupt(); throw new InterruptedIOException(); } if (!disposed) { if (error != null) { if (error instanceof IOException) { throw (IOException) error; } throw IOExceptionSupport create(error); } } } public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException { throw new AssertionError( Unsupported Method ); } public Object request(Object command) throws IOException { throw new AssertionError( Unsupported Method ); } public Object request(Object command, int timeout) throws IOException { throw new AssertionError( Unsupported Method ); } public void add(boolean rebalance, URI u[]) { boolean newURI = false; for (URI uri u) { if (!contains(uri)) { uris add(uri); newURI = true; } } if (newURI) { reconnect(rebalance); } } public void remove(boolean rebalance, URI u[]) { for (URI uri u) { uris remove(uri); } } public void add(boolean rebalance, String u) { try { URI newURI = new URI(u); if (contains(newURI) == false) { uris add(newURI); reconnect(rebalance); } } catch (Exception e) { LOG error( Failed to parse URI + u); } } public void reconnect(boolean rebalance) { synchronized (reconnectMutex) { if (started) { if (rebalance) { doRebalance = true; } LOG debug( Waking up reconnect task ); try { reconnectTask wakeup(); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } else { LOG debug( Reconnect was triggered but transport is not started yet Wait for start to connect the transport ); } } } private List<URI> getConnectList() { if (!updated isEmpty()) { if (failedConnectTransportURI != null) { boolean removed = updated remove(failedConnectTransportURI); if (removed) { updated add(failedConnectTransportURI); } } return updated; } ArrayList<URI> l = new ArrayList<URI>(uris); boolean removed = false; if (failedConnectTransportURI != null) { removed = l remove(failedConnectTransportURI); } if (randomize) { for (int i = 0; i < l size(); i++) { int p = (int) (Math random() * 100 % l size()); URI t = l get(p); l set(p, l get(i)); l set(i, t); } } if (removed) { l add(failedConnectTransportURI); } if (LOG isDebugEnabled()) { LOG debug( urlList connectionList + l + , from + uris); } return l; } public TransportListener getTransportListener() { return transportListener; } public void setTransportListener(TransportListener commandListener) { synchronized (listenerMutex) { this transportListener = commandListener; listenerMutex notifyAll(); } } public <T> T narrow(Class<T> target) { if (target isAssignableFrom(getClass())) { return target cast(this); } Transport transport = connectedTransport get(); if (transport != null) { return transport narrow(target); } return null; } protected void restoreTransport(Transport t) throws Exception, IOException { t start(); ConnectionControl cc = new ConnectionControl(); cc setFaultTolerant(true); t oneway(cc); stateTracker restore(t); Map<Integer, Command> tmpMap = null; synchronized (requestMap) { tmpMap = new LinkedHashMap<Integer, Command>(requestMap); } for (Command command tmpMap values()) { if (LOG isTraceEnabled()) { LOG trace( restore requestMap, replay + command); } t oneway(command); } } public boolean isUseExponentialBackOff() { return useExponentialBackOff; } public void setUseExponentialBackOff(boolean useExponentialBackOff) { this useExponentialBackOff = useExponentialBackOff; } Override public String toString() { return connectedTransportURI == null unconnected connectedTransportURI toString(); } public String getRemoteAddress() { Transport transport = connectedTransport get(); if (transport != null) { return transport getRemoteAddress(); } return null; } public boolean isFaultTolerant() { return true; } private void doUpdateURIsFromDisk() { String fileURL = getUpdateURIsURL(); if (fileURL != null) { BufferedReader in = null; String newUris = null; StringBuffer buffer = new StringBuffer(); try { in = new BufferedReader(getURLStream(fileURL)); while (true) { String line = in readLine(); if (line == null) { break; } buffer append(line); } newUris = buffer toString(); } catch (IOException ioe) { LOG error( Failed to read updateURIsURL + fileURL, ioe); } finally { if (in != null) { try { in close(); } catch (IOException ioe) { } } } processNewTransports(isRebalanceUpdateURIs(), newUris); } } final boolean doReconnect() { Exception failure = null; synchronized (reconnectMutex) { doUpdateURIsFromDisk(); if (disposed || connectionFailure != null) { reconnectMutex notifyAll(); } if ((connectedTransport get() != null && !doRebalance && !priorityBackupAvailable) || disposed || connectionFailure != null) { return false; } else { List<URI> connectList = getConnectList(); if (connectList isEmpty()) { failure = new IOException( No uris available to connect to ); } else { if (doRebalance) { if (connectList get(0) equals(connectedTransportURI)) { doRebalance = false; return false; } else { if (LOG isDebugEnabled()) { LOG debug( Doing rebalance from + connectedTransportURI + to + connectList); } try { Transport transport = this connectedTransport getAndSet(null); if (transport != null) { disposeTransport(transport); } } catch (Exception e) { if (LOG isDebugEnabled()) { LOG debug( Caught an exception stopping existing transport for rebalance , e); } } } doRebalance = false; } resetReconnectDelay(); Transport transport = null; URI uri = null; synchronized (backupMutex) { if ((priorityBackup || backup) && !backups isEmpty()) { ArrayList<BackupTransport> l = new ArrayList<BackupTransport>(backups); if (randomize) { Collections shuffle(l); } BackupTransport bt = l remove(0); backups remove(bt); transport = bt getTransport(); uri = bt getUri(); if (priorityBackup && priorityBackupAvailable) { Transport old = this connectedTransport getAndSet(null); if (transport != null) { disposeTransport(old); } priorityBackupAvailable = false; } } } if (transport == null && !firstConnection && (reconnectDelay > 0) && !disposed) { synchronized (sleepMutex) { if (LOG isDebugEnabled()) { LOG debug( Waiting + reconnectDelay + ms before attempting connection ); } try { sleepMutex wait(reconnectDelay); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } } Iterator<URI> iter = connectList iterator(); while ((transport != null || iter hasNext()) && (connectedTransport get() == null && !disposed)) { try { SslContext setCurrentSslContext(brokerSslContext); if (transport == null) { uri = iter next(); transport = TransportFactory compositeConnect(uri); } if (LOG isDebugEnabled()) { LOG debug( Attempting + connectFailures + th connect to + uri); } transport setTransportListener(myTransportListener); transport start(); if (started && !firstConnection) { restoreTransport(transport); } if (LOG isDebugEnabled()) { LOG debug( Connection established ); } reconnectDelay = initialReconnectDelay; connectedTransportURI = uri; connectedTransport set(transport); reconnectMutex notifyAll(); connectFailures = 0; synchronized (listenerMutex) { if (transportListener == null) { try { listenerMutex wait(2000); } catch (InterruptedException ex) { } } } if (transportListener != null) { transportListener transportResumed(); } else { if (LOG isDebugEnabled()) { LOG debug( transport resumed by transport listener not set ); } } if (firstConnection) { firstConnection = false; LOG info( Successfully connected to + uri); } else { LOG info( Successfully reconnected to + uri); } connected = true; return false; } catch (Exception e) { failure = e; if (LOG isDebugEnabled()) { LOG debug( Connect fail to + uri + , reason + e); } if (transport != null) { try { transport stop(); transport = null; } catch (Exception ee) { if (LOG isDebugEnabled()) { LOG debug( Stop of failed transport + transport + failed with reason + ee); } } } } finally { SslContext setCurrentSslContext(null); } } } } int reconnectLimit = calculateReconnectAttemptLimit(); connectFailures++; if (reconnectLimit != INFINITE && connectFailures >= reconnectLimit) { LOG error( Failed to connect to + uris + after + connectFailures + attempt(s) ); connectionFailure = failure; synchronized (listenerMutex) { if (transportListener == null) { try { listenerMutex wait(2000); } catch (InterruptedException ex) { } } } propagateFailureToExceptionListener(connectionFailure); return false; } } if (!disposed) { doDelay(); } return !disposed; } private void doDelay() { if (reconnectDelay > 0) { synchronized (sleepMutex) { if (LOG isDebugEnabled()) { LOG debug( Waiting + reconnectDelay + ms before attempting connection ); } try { sleepMutex wait(reconnectDelay); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } } if (useExponentialBackOff) { reconnectDelay *= backOffMultiplier; if (reconnectDelay > maxReconnectDelay) { reconnectDelay = maxReconnectDelay; } } } private void resetReconnectDelay() { if (!useExponentialBackOff || reconnectDelay == DEFAULT INITIAL RECONNECT DELAY) { reconnectDelay = initialReconnectDelay; } } private void propagateFailureToExceptionListener(Exception exception) { if (transportListener != null) { if (exception instanceof IOException) { transportListener onException((IOException)exception); } else { transportListener onException(IOExceptionSupport create(exception)); } } reconnectMutex notifyAll(); } private int calculateReconnectAttemptLimit() { int maxReconnectValue = this maxReconnectAttempts; if (firstConnection && this startupMaxReconnectAttempts != INFINITE) { maxReconnectValue = this startupMaxReconnectAttempts; } return maxReconnectValue; } final boolean buildBackups() { synchronized (backupMutex) { if (!disposed && (backup || priorityBackup) && backups size() < backupPoolSize) { ArrayList<URI> backupList = new ArrayList<URI>(priorityList); List<URI> connectList = getConnectList(); for (URI uri connectList) { if (!backupList contains(uri)) { backupList add(uri); } } List<BackupTransport> disposedList = new ArrayList<BackupTransport>(); for (BackupTransport bt backups) { if (bt isDisposed()) { disposedList add(bt); } } backups removeAll(disposedList); disposedList clear(); for (Iterator<URI> iter = backupList iterator(); !disposed && iter hasNext() && backups size() < backupPoolSize; ) { URI uri = iter next(); if (connectedTransportURI != null && !connectedTransportURI equals(uri)) { try { SslContext setCurrentSslContext(brokerSslContext); BackupTransport bt = new BackupTransport(this); bt setUri(uri); if (!backups contains(bt)) { Transport t = TransportFactory compositeConnect(uri); t setTransportListener(bt); t start(); bt setTransport(t); backups add(bt); if (priorityBackup && isPriority(uri)) { priorityBackupAvailable = true; } } } catch (Exception e) { LOG debug( Failed to build backup , e); } finally { SslContext setCurrentSslContext(null); } } } } } return false; } protected boolean isPriority(URI uri) { if (!priorityList isEmpty()) { return priorityList contains(uri); } return uris indexOf(uri) == 0; } public boolean isDisposed() { return disposed; } public boolean isConnected() { return connected; } public void reconnect(URI uri) throws IOException { add(true, new URI[]{uri}); } public boolean isReconnectSupported() { return this reconnectSupported; } public void setReconnectSupported(boolean value) { this reconnectSupported = value; } public boolean isUpdateURIsSupported() { return this updateURIsSupported; } public void setUpdateURIsSupported(boolean value) { this updateURIsSupported = value; } public void updateURIs(boolean rebalance, URI[] updatedURIs) throws IOException { if (isUpdateURIsSupported()) { HashSet<URI> copy = new HashSet<URI>(this updated); updated clear(); if (updatedURIs != null && updatedURIs length > 0) { for (URI uri updatedURIs) { if (uri != null && !updated contains(uri)) { updated add(uri); } } if (!(copy isEmpty() && updated isEmpty()) && !copy equals(new HashSet<URI>(updated))) { buildBackups(); synchronized (reconnectMutex) { reconnect(rebalance); } } } } } public String getUpdateURIsURL() { return this updateURIsURL; } public void setUpdateURIsURL(String updateURIsURL) { this updateURIsURL = updateURIsURL; } public boolean isRebalanceUpdateURIs() { return this rebalanceUpdateURIs; } public void setRebalanceUpdateURIs(boolean rebalanceUpdateURIs) { this rebalanceUpdateURIs = rebalanceUpdateURIs; } public int getReceiveCounter() { Transport transport = connectedTransport get(); if (transport == null) { return 0; } return transport getReceiveCounter(); } public int getConnectFailures() { return connectFailures; } public void connectionInterruptProcessingComplete(ConnectionId connectionId) { synchronized (reconnectMutex) { stateTracker connectionInterruptProcessingComplete(this, connectionId); } } public ConnectionStateTracker getStateTracker() { return stateTracker; } private boolean contains(URI newURI) { boolean result = false; for (URI uri uris) { if (newURI getPort() == uri getPort()) { InetAddress newAddr = null; InetAddress addr = null; try { newAddr = InetAddress getByName(newURI getHost()); addr = InetAddress getByName(uri getHost()); } catch(IOException e) { if (newAddr == null) { LOG error( Failed to Lookup INetAddress for URI[ + newURI + ] + e); } else { LOG error( Failed to Lookup INetAddress for URI[ + uri + ] + e); } if (newURI getHost() equalsIgnoreCase(uri getHost())) { result = true; break; } else { continue; } } if (addr equals(newAddr)) { result = true; break; } } } return result; } private InputStreamReader getURLStream(String path) throws IOException { InputStreamReader result = null; URL url = null; try { url = new URL(path); result = new InputStreamReader(url openStream()); } catch (MalformedURLException e) { } if (result == null) { result = new FileReader(path); } return result; } }",1.0,
986,986,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\failover\FailoverTransportFactory.,FailoverTransportFactory,"public class FailoverTransportFactory extends TransportFactory { Override public Transport doConnect(URI location) throws IOException { try { Transport transport = createTransport(URISupport parseComposite(location)); transport = new MutexTransport(transport); transport = new ResponseCorrelator(transport); return transport; } catch (URISyntaxException e) { throw new IOException( Invalid location + location); } } Override public Transport doCompositeConnect(URI location) throws IOException { try { return createTransport(URISupport parseComposite(location)); } catch (URISyntaxException e) { throw new IOException( Invalid location + location); } } public Transport createTransport(CompositeData compositData) throws IOException { Map<String, String> options = compositData getParameters(); FailoverTransport transport = createTransport(options); if (!options isEmpty()) { throw new IllegalArgumentException( Invalid connect parameters + options); } transport add(false,compositData getComponents()); return transport; } public FailoverTransport createTransport(Map<String, String> parameters) throws IOException { FailoverTransport transport = new FailoverTransport(); IntrospectionSupport setProperties(transport, parameters); return transport; } Override public TransportServer doBind(URI location) throws IOException { throw new IOException( Invalid server URI + location); } }",1.0,
987,987,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\fanout\FanoutTransport.,FanoutTransport,"public class FanoutTransport implements CompositeTransport { private static final Logger LOG = LoggerFactory getLogger(FanoutTransport class); private TransportListener transportListener; private boolean disposed; private boolean connected; private final Object reconnectMutex = new Object(); private final ConnectionStateTracker stateTracker = new ConnectionStateTracker(); private final ConcurrentHashMap<Integer, RequestCounter> requestMap = new ConcurrentHashMap<Integer, RequestCounter>(); private final TaskRunnerFactory reconnectTaskFactory; private final TaskRunner reconnectTask; private boolean started; private final ArrayList<FanoutTransportHandler> transports = new ArrayList<FanoutTransportHandler>(); private int connectedCount; private int minAckCount = 2; private long initialReconnectDelay = 10; private long maxReconnectDelay = 1000 * 30; private long backOffMultiplier = 2; private final boolean useExponentialBackOff = true; private int maxReconnectAttempts; private Exception connectionFailure; private FanoutTransportHandler primary; private boolean fanOutQueues = false; static class RequestCounter { final Command command; final AtomicInteger ackCount; RequestCounter(Command command, int count) { this command = command; this ackCount = new AtomicInteger(count); } Override public String toString() { return command getCommandId() + = + ackCount get(); } } class FanoutTransportHandler extends DefaultTransportListener { private final URI uri; private Transport transport; private int connectFailures; private long reconnectDelay = initialReconnectDelay; private long reconnectDate; public FanoutTransportHandler(URI uri) { this uri = uri; } Override public void onCommand(Object o) { Command command = (Command)o; if (command isResponse()) { Integer id = new Integer(((Response)command) getCorrelationId()); RequestCounter rc = requestMap get(id); if (rc != null) { if (rc ackCount decrementAndGet() <= 0) { requestMap remove(id); transportListenerOnCommand(command); } } else { transportListenerOnCommand(command); } } else { transportListenerOnCommand(command); } } Override public void onException(IOException error) { try { synchronized (reconnectMutex) { if (transport == null || !transport isConnected()) { return; } LOG debug( Transport failed, starting up reconnect task , error); ServiceSupport dispose(transport); transport = null; connectedCount--; if (primary == this) { primary = null; } reconnectTask wakeup(); } } catch (InterruptedException e) { Thread currentThread() interrupt(); if (transportListener != null) { transportListener onException(new InterruptedIOException()); } } } } public FanoutTransport() throws InterruptedIOException { reconnectTaskFactory = new TaskRunnerFactory(); reconnectTaskFactory init(); reconnectTask = reconnectTaskFactory createTaskRunner(new Task() { public boolean iterate() { return doConnect(); } }, ActiveMQ Fanout Worker + System identityHashCode(this)); } private boolean doConnect() { long closestReconnectDate = 0; synchronized (reconnectMutex) { if (disposed || connectionFailure != null) { reconnectMutex notifyAll(); } if (transports size() == connectedCount || disposed || connectionFailure != null) { return false; } else { if (transports isEmpty()) { } else { Iterator<FanoutTransportHandler> iter = transports iterator(); for (int i = 0; iter hasNext() && !disposed; i++) { long now = System currentTimeMillis(); FanoutTransportHandler fanoutHandler = iter next(); if (fanoutHandler transport != null) { continue; } if (fanoutHandler reconnectDate != 0 && fanoutHandler reconnectDate > now) { if (closestReconnectDate == 0 || fanoutHandler reconnectDate < closestReconnectDate) { closestReconnectDate = fanoutHandler reconnectDate; } continue; } URI uri = fanoutHandler uri; try { LOG debug( Stopped + this); LOG debug( Attempting connect to + uri); Transport t = TransportFactory compositeConnect(uri); fanoutHandler transport = t; t setTransportListener(fanoutHandler); if (started) { restoreTransport(fanoutHandler); } LOG debug( Connection established ); fanoutHandler reconnectDelay = initialReconnectDelay; fanoutHandler connectFailures = 0; if (primary == null) { primary = fanoutHandler; } connectedCount++; } catch (Exception e) { LOG debug( Connect fail to + uri + , reason + e); if( fanoutHandler transport !=null ) { ServiceSupport dispose(fanoutHandler transport); fanoutHandler transport=null; } if (maxReconnectAttempts > 0 && ++fanoutHandler connectFailures >= maxReconnectAttempts) { LOG error( Failed to connect to transport after + fanoutHandler connectFailures + attempt(s) ); connectionFailure = e; reconnectMutex notifyAll(); return false; } else { if (useExponentialBackOff) { fanoutHandler reconnectDelay *= backOffMultiplier; if (fanoutHandler reconnectDelay > maxReconnectDelay) { fanoutHandler reconnectDelay = maxReconnectDelay; } } fanoutHandler reconnectDate = now + fanoutHandler reconnectDelay; if (closestReconnectDate == 0 || fanoutHandler reconnectDate < closestReconnectDate) { closestReconnectDate = fanoutHandler reconnectDate; } } } } if (transports size() == connectedCount || disposed) { reconnectMutex notifyAll(); return false; } } } } try { long reconnectDelay = closestReconnectDate - System currentTimeMillis(); if (reconnectDelay > 0) { LOG debug( Waiting + reconnectDelay + ms before attempting connection ); Thread sleep(reconnectDelay); } } catch (InterruptedException e1) { Thread currentThread() interrupt(); } return true; } public void start() throws Exception { synchronized (reconnectMutex) { LOG debug( Started ); if (started) { return; } started = true; for (Iterator<FanoutTransportHandler> iter = transports iterator(); iter hasNext();) { FanoutTransportHandler th = iter next(); if (th transport != null) { restoreTransport(th); } } connected=true; } } public void stop() throws Exception { try { synchronized (reconnectMutex) { ServiceStopper ss = new ServiceStopper(); if (!started) { return; } started = false; disposed = true; connected=false; for (Iterator<FanoutTransportHandler> iter = transports iterator(); iter hasNext();) { FanoutTransportHandler th = iter next(); if (th transport != null) { ss stop(th transport); } } LOG debug( Stopped + this); ss throwFirstException(); } } finally { reconnectTask shutdown(); reconnectTaskFactory shutdownNow(); } } public int getMinAckCount() { return minAckCount; } public void setMinAckCount(int minAckCount) { this minAckCount = minAckCount; } public long getInitialReconnectDelay() { return initialReconnectDelay; } public void setInitialReconnectDelay(long initialReconnectDelay) { this initialReconnectDelay = initialReconnectDelay; } public long getMaxReconnectDelay() { return maxReconnectDelay; } public void setMaxReconnectDelay(long maxReconnectDelay) { this maxReconnectDelay = maxReconnectDelay; } public long getReconnectDelayExponent() { return backOffMultiplier; } public void setReconnectDelayExponent(long reconnectDelayExponent) { this backOffMultiplier = reconnectDelayExponent; } public int getMaxReconnectAttempts() { return maxReconnectAttempts; } public void setMaxReconnectAttempts(int maxReconnectAttempts) { this maxReconnectAttempts = maxReconnectAttempts; } public void oneway(Object o) throws IOException { final Command command = (Command)o; try { synchronized (reconnectMutex) { while (connectedCount < minAckCount && !disposed && connectionFailure == null) { LOG debug( Waiting for at least + minAckCount + transports to be connected ); reconnectMutex wait(1000); } if (connectedCount < minAckCount) { Exception error; if (disposed) { error = new IOException( Transport disposed ); } else if (connectionFailure != null) { error = connectionFailure; } else { error = new IOException( Unexpected failure ); } if (error instanceof IOException) { throw (IOException)error; } throw IOExceptionSupport create(error); } boolean fanout = isFanoutCommand(command); if (stateTracker track(command) == null && command isResponseRequired()) { int size = fanout minAckCount 1; requestMap put(new Integer(command getCommandId()), new RequestCounter(command, size)); } if (fanout) { for (Iterator<FanoutTransportHandler> iter = transports iterator(); iter hasNext();) { FanoutTransportHandler th = iter next(); if (th transport != null) { try { th transport oneway(command); } catch (IOException e) { LOG debug( Send attempt failed ); th onException(e); } } } } else { try { primary transport oneway(command); } catch (IOException e) { LOG debug( Send attempt failed ); primary onException(e); } } } } catch (InterruptedException e) { Thread currentThread() interrupt(); throw new InterruptedIOException(); } } private boolean isFanoutCommand(Command command) { if (command isMessage()) { if( fanOutQueues ) { return true; } return ((Message)command) getDestination() isTopic(); } if (command getDataStructureType() == ConsumerInfo DATA STRUCTURE TYPE || command getDataStructureType() == RemoveInfo DATA STRUCTURE TYPE) { return false; } return true; } public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException { throw new AssertionError( Unsupported Method ); } public Object request(Object command) throws IOException { throw new AssertionError( Unsupported Method ); } public Object request(Object command, int timeout) throws IOException { throw new AssertionError( Unsupported Method ); } public void reconnect() { LOG debug( Waking up reconnect task ); try { reconnectTask wakeup(); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } public TransportListener getTransportListener() { return transportListener; } public void setTransportListener(TransportListener commandListener) { this transportListener = commandListener; } public <T> T narrow(Class<T> target) { if (target isAssignableFrom(getClass())) { return target cast(this); } synchronized (reconnectMutex) { for (Iterator<FanoutTransportHandler> iter = transports iterator(); iter hasNext();) { FanoutTransportHandler th = iter next(); if (th transport != null) { T rc = th transport narrow(target); if (rc != null) { return rc; } } } } return null; } protected void restoreTransport(FanoutTransportHandler th) throws Exception, IOException { th transport start(); stateTracker setRestoreConsumers(th transport == primary); stateTracker restore(th transport); for (Iterator<RequestCounter> iter2 = requestMap values() iterator(); iter2 hasNext();) { RequestCounter rc = iter2 next(); th transport oneway(rc command); } } public void add(boolean reblance,URI uris[]) { synchronized (reconnectMutex) { for (int i = 0; i < uris length; i++) { URI uri = uris[i]; boolean match = false; for (Iterator<FanoutTransportHandler> iter = transports iterator(); iter hasNext();) { FanoutTransportHandler th = iter next(); if (th uri equals(uri)) { match = true; break; } } if (!match) { FanoutTransportHandler th = new FanoutTransportHandler(uri); transports add(th); reconnect(); } } } } public void remove(boolean rebalance,URI uris[]) { synchronized (reconnectMutex) { for (int i = 0; i < uris length; i++) { URI uri = uris[i]; for (Iterator<FanoutTransportHandler> iter = transports iterator(); iter hasNext();) { FanoutTransportHandler th = iter next(); if (th uri equals(uri)) { if (th transport != null) { ServiceSupport dispose(th transport); connectedCount--; } iter remove(); break; } } } } } public void reconnect(URI uri) throws IOException { add(true,new URI[]{uri}); } public boolean isReconnectSupported() { return true; } public boolean isUpdateURIsSupported() { return true; } public void updateURIs(boolean reblance,URI[] uris) throws IOException { add(reblance,uris); } public String getRemoteAddress() { if (primary != null) { if (primary transport != null) { return primary transport getRemoteAddress(); } } return null; } protected void transportListenerOnCommand(Command command) { if (transportListener != null) { transportListener onCommand(command); } } public boolean isFaultTolerant() { return true; } public boolean isFanOutQueues() { return fanOutQueues; } public void setFanOutQueues(boolean fanOutQueues) { this fanOutQueues = fanOutQueues; } public boolean isDisposed() { return disposed; } public boolean isConnected() { return connected; } public int getReceiveCounter() { int rc = 0; synchronized (reconnectMutex) { for (FanoutTransportHandler th transports) { if (th transport != null) { rc += th transport getReceiveCounter(); } } } return rc; } }",1.0,
988,988,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\fanout\FanoutTransport.,RequestCounter,"static class RequestCounter { final Command command; final AtomicInteger ackCount; RequestCounter(Command command, int count) { this command = command; this ackCount = new AtomicInteger(count); } Override public String toString() { return command getCommandId() + = + ackCount get(); } }",1.0,
989,989,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\fanout\FanoutTransport.,FanoutTransportHandler,"class FanoutTransportHandler extends DefaultTransportListener { private final URI uri; private Transport transport; private int connectFailures; private long reconnectDelay = initialReconnectDelay; private long reconnectDate; public FanoutTransportHandler(URI uri) { this uri = uri; } Override public void onCommand(Object o) { Command command = (Command)o; if (command isResponse()) { Integer id = new Integer(((Response)command) getCorrelationId()); RequestCounter rc = requestMap get(id); if (rc != null) { if (rc ackCount decrementAndGet() <= 0) { requestMap remove(id); transportListenerOnCommand(command); } } else { transportListenerOnCommand(command); } } else { transportListenerOnCommand(command); } } Override public void onException(IOException error) { try { synchronized (reconnectMutex) { if (transport == null || !transport isConnected()) { return; } LOG debug( Transport failed, starting up reconnect task , error); ServiceSupport dispose(transport); transport = null; connectedCount--; if (primary == this) { primary = null; } reconnectTask wakeup(); } } catch (InterruptedException e) { Thread currentThread() interrupt(); if (transportListener != null) { transportListener onException(new InterruptedIOException()); } } } }",1.0,
990,990,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\fanout\FanoutTransportFactory.,FanoutTransportFactory,"public class FanoutTransportFactory extends TransportFactory { public Transport doConnect(URI location) throws IOException { try { Transport transport = createTransport(location); transport = new MutexTransport(transport); transport = new ResponseCorrelator(transport); return transport; } catch (URISyntaxException e) { throw new IOException( Invalid location + location); } } public Transport doCompositeConnect(URI location) throws IOException { try { return createTransport(location); } catch (URISyntaxException e) { throw new IOException( Invalid location + location); } } public Transport createTransport(URI location) throws IOException, URISyntaxException { CompositeData compositeData = URISupport parseComposite(location); Map<String, String> parameters = compositeData getParameters(); FanoutTransport fanoutTransport = createTransport(parameters); DiscoveryTransport discoveryTransport = DiscoveryTransportFactory createTransport(fanoutTransport, compositeData, parameters); return discoveryTransport; } public FanoutTransport createTransport(Map<String,String> parameters) throws IOException { FanoutTransport transport = new FanoutTransport(); IntrospectionSupport setProperties(transport, parameters); return transport; } public TransportServer doBind(URI location) throws IOException { throw new IOException( Invalid server URI + location); } }",1.0,
991,991,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\mock\MockTransport.,MockTransport,"public class MockTransport extends DefaultTransportListener implements Transport { protected Transport next; protected TransportListener transportListener; public MockTransport(Transport next) { this next = next; } public synchronized void setTransportListener(TransportListener channelListener) { this transportListener = channelListener; if (channelListener == null) { getNext() setTransportListener(null); } else { getNext() setTransportListener(this); } } public void start() throws Exception { if (getNext() == null) { throw new IOException( The next channel has not been set ); } if (transportListener == null) { throw new IOException( The command listener has not been set ); } getNext() start(); } public void stop() throws Exception { getNext() stop(); } Override public void onCommand(Object command) { getTransportListener() onCommand(command); } public synchronized Transport getNext() { return next; } public synchronized TransportListener getTransportListener() { return transportListener; } Override public String toString() { return getNext() toString(); } public void oneway(Object command) throws IOException { getNext() oneway(command); } public FutureResponse asyncRequest(Object command, ResponseCallback responseCallback) throws IOException { return getNext() asyncRequest(command, null); } public Object request(Object command) throws IOException { return getNext() request(command); } public Object request(Object command, int timeout) throws IOException { return getNext() request(command, timeout); } Override public void onException(IOException error) { getTransportListener() onException(error); } public <T> T narrow(Class<T> target) { if (target isAssignableFrom(getClass())) { return target cast(this); } return getNext() narrow(target); } public synchronized void setNext(Transport next) { this next = next; } public void install(TransportFilter filter) { filter setTransportListener(this); getNext() setTransportListener(filter); setNext(filter); } public String getRemoteAddress() { return getNext() getRemoteAddress(); } public boolean isFaultTolerant() { return getNext() isFaultTolerant(); } public boolean isDisposed() { return getNext() isDisposed(); } public boolean isConnected() { return getNext() isConnected(); } public void reconnect(URI uri) throws IOException { getNext() reconnect(uri); } public int getReceiveCounter() { return getNext() getReceiveCounter(); } public boolean isReconnectSupported() { return getNext() isReconnectSupported(); } public boolean isUpdateURIsSupported() { return getNext() isUpdateURIsSupported(); } public void updateURIs(boolean reblance,URI[] uris) throws IOException { getNext() updateURIs(reblance,uris); } }",1.0,
992,992,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\mock\MockTransportFactory.,MockTransportFactory,"public class MockTransportFactory extends TransportFactory { public Transport doConnect(URI location) throws URISyntaxException, Exception { Transport transport = createTransport(URISupport parseComposite(location)); transport = new MutexTransport(transport); transport = new ResponseCorrelator(transport); return transport; } public Transport doCompositeConnect(URI location) throws URISyntaxException, Exception { return createTransport(URISupport parseComposite(location)); } public Transport createTransport(CompositeData compositData) throws Exception { MockTransport transport = new MockTransport(TransportFactory compositeConnect(compositData getComponents()[0])); IntrospectionSupport setProperties(transport, compositData getParameters()); return transport; } public TransportServer doBind(URI location) throws IOException { throw new IOException( This protocol does not support being bound ); } }",1.0,
993,993,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\multicast\MulticastDatagramHeaderMarshaller.,MulticastDatagramHeaderMarshaller,"public class MulticastDatagramHeaderMarshaller extends DatagramHeaderMarshaller { private final byte[] localUriAsBytes; public MulticastDatagramHeaderMarshaller(String localUri) { this localUriAsBytes = localUri getBytes(); } public Endpoint createEndpoint(ByteBuffer readBuffer, SocketAddress address) { int size = readBuffer getInt(); byte[] data = new byte[size]; readBuffer get(data); return new DatagramEndpoint(new String(data), address); } public void writeHeader(Command command, ByteBuffer writeBuffer) { writeBuffer putInt(localUriAsBytes length); writeBuffer put(localUriAsBytes); super writeHeader(command, writeBuffer); } }",1.0,
994,994,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\multicast\MulticastTransport.,MulticastTransport,"public class MulticastTransport extends UdpTransport { private static final Logger LOG = LoggerFactory getLogger(MulticastTransport class); private static final int DEFAULT IDLE TIME = 5000; private MulticastSocket socket; private InetAddress mcastAddress; private int mcastPort; private int timeToLive = 1; private boolean loopBackMode; private long keepAliveInterval = DEFAULT IDLE TIME; public MulticastTransport(OpenWireFormat wireFormat, URI remoteLocation) throws UnknownHostException, IOException { super(wireFormat, remoteLocation); } public long getKeepAliveInterval() { return keepAliveInterval; } public void setKeepAliveInterval(long keepAliveInterval) { this keepAliveInterval = keepAliveInterval; } public boolean isLoopBackMode() { return loopBackMode; } public void setLoopBackMode(boolean loopBackMode) { this loopBackMode = loopBackMode; } public int getTimeToLive() { return timeToLive; } public void setTimeToLive(int timeToLive) { this timeToLive = timeToLive; } protected String getProtocolName() { return Multicast ; } protected String getProtocolUriScheme() { return multicast } protected void bind(DatagramSocket socket, SocketAddress localAddress) throws SocketException { } protected void doStop(ServiceStopper stopper) throws Exception { super doStop(stopper); if (socket != null) { try { socket leaveGroup(getMulticastAddress()); } catch (IOException e) { stopper onException(this, e); } socket close(); } } protected CommandChannel createCommandChannel() throws IOException { socket = new MulticastSocket(mcastPort); socket setLoopbackMode(loopBackMode); socket setTimeToLive(timeToLive); LOG debug( Joining multicast address + getMulticastAddress()); socket joinGroup(getMulticastAddress()); socket setSoTimeout((int)keepAliveInterval); return new CommandDatagramSocket(this, getWireFormat(), getDatagramSize(), getTargetAddress(), createDatagramHeaderMarshaller(), getSocket()); } protected InetAddress getMulticastAddress() { return mcastAddress; } protected MulticastSocket getSocket() { return socket; } protected void setSocket(MulticastSocket socket) { this socket = socket; } protected InetSocketAddress createAddress(URI remoteLocation) throws UnknownHostException, IOException { this mcastAddress = InetAddress getByName(remoteLocation getHost()); this mcastPort = remoteLocation getPort(); return new InetSocketAddress(mcastAddress, mcastPort); } protected DatagramHeaderMarshaller createDatagramHeaderMarshaller() { return new MulticastDatagramHeaderMarshaller( udp } }",1.0,
996,996,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\NIOBufferedInputStream.,NIOBufferedInputStream,"public class NIOBufferedInputStream extends InputStream { private final static int BUFFER SIZE = 8192; private SocketChannel sc = null; private ByteBuffer bb = null; private Selector rs = null; public NIOBufferedInputStream(ReadableByteChannel channel, int size) throws ClosedChannelException, IOException { if (size <= 0) { throw new IllegalArgumentException( Buffer size <= 0 ); } this bb = ByteBuffer allocateDirect(size); this sc = (SocketChannel) channel; this sc configureBlocking(false); this rs = Selector open(); sc register(rs, SelectionKey OP READ); bb position(0); bb limit(0); } public NIOBufferedInputStream(ReadableByteChannel channel) throws ClosedChannelException, IOException { this(channel, BUFFER SIZE); } public int available() throws IOException { if (!rs isOpen()) throw new IOException( Input Stream Closed ); return bb remaining(); } public void close() throws IOException { if (rs isOpen()) { rs close(); if (sc isOpen()) { sc socket() shutdownInput(); sc socket() close(); } bb = null; sc = null; } } public int read() throws IOException { if (!rs isOpen()) throw new IOException( Input Stream Closed ); if (!bb hasRemaining()) { try { fill(1); } catch (ClosedChannelException e) { close(); return -1; } } return (bb get() & 0xFF); } public int read(byte[] b, int off, int len) throws IOException { int bytesCopied = -1; if (!rs isOpen()) throw new IOException( Input Stream Closed ); while (bytesCopied == -1) { if (bb hasRemaining()) { bytesCopied = (len < bb remaining() len bb remaining()); bb get(b, off, bytesCopied); } else { try { fill(1); } catch (ClosedChannelException e) { close(); return -1; } } } return bytesCopied; } public long skip(long n) throws IOException { long skiped = 0; if (!rs isOpen()) throw new IOException( Input Stream Closed ); while (n > 0) { if (n <= bb remaining()) { skiped += n; bb position(bb position() + (int) n); n = 0; } else { skiped += bb remaining(); n -= bb remaining(); bb position(bb limit()); try { fill((int) n); } catch (ClosedChannelException e) { close(); return skiped; } } } return skiped; } private void fill(int n) throws IOException, ClosedChannelException { int bytesRead = -1; if ((n <= 0) || (n <= bb remaining())) return; bb compact(); n = (bb remaining() < n bb remaining() n); for (;;) { bytesRead = sc read(bb); if (bytesRead == -1) throw new ClosedChannelException(); n -= bytesRead; if (n <= 0) break; rs select(0); rs selectedKeys() clear(); } bb flip(); } }",1.0,
997,997,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\NIOInputStream.,NIOInputStream,"public class NIOInputStream extends InputStream { protected int count; protected int position; private final ByteBuffer in; public NIOInputStream(ByteBuffer in) { this in = in; } public int read() throws IOException { try { int rc = in get() & 0xff; return rc; } catch (BufferUnderflowException e) { return -1; } } public int read(byte b[], int off, int len) throws IOException { if (in hasRemaining()) { int rc = Math min(len, in remaining()); in get(b, off, rc); return rc; } else { return len == 0 0 -1; } } public long skip(long n) throws IOException { int rc = Math min((int)n, in remaining()); in position(in position() + rc); return rc; } public int available() throws IOException { return in remaining(); } public boolean markSupported() { return false; } public void close() throws IOException { } }",1.0,
998,998,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\NIOOutputStream.,NIOOutputStream,"public class NIOOutputStream extends OutputStream implements TimeStampStream { private static final int BUFFER SIZE = 8192; private final WritableByteChannel out; private final byte[] buffer; private final ByteBuffer byteBuffer; private int count; private boolean closed; private volatile long writeTimestamp = -1; private SSLEngine engine; public NIOOutputStream(WritableByteChannel out) { this(out, BUFFER SIZE); } public NIOOutputStream(WritableByteChannel out, int size) { this out = out; if (size <= 0) { throw new IllegalArgumentException( Buffer size <= 0 ); } buffer = new byte[size]; byteBuffer = ByteBuffer wrap(buffer); } public void write(int b) throws IOException { checkClosed(); if (availableBufferToWrite() < 1) { flush(); } buffer[count++] = (byte)b; } public void write(byte b[], int off, int len) throws IOException { checkClosed(); if (availableBufferToWrite() < len) { flush(); } if (buffer length >= len) { System arraycopy(b, off, buffer, count, len); count += len; } else { write(ByteBuffer wrap(b, off, len)); } } public void flush() throws IOException { if (count > 0 && out != null) { byteBuffer position(0); byteBuffer limit(count); write(byteBuffer); count = 0; } } public void close() throws IOException { super close(); if (engine != null) { engine closeOutbound(); } closed = true; } protected void checkClosed() throws IOException { if (closed) { throw new EOFException( Cannot write to the stream any more it has already been closed ); } } private int availableBufferToWrite() { return buffer length - count; } protected void write(ByteBuffer data) throws IOException { ByteBuffer plain; if (engine != null) { plain = ByteBuffer allocate(engine getSession() getPacketBufferSize()); plain clear(); engine wrap(data, plain); plain flip(); } else { plain = data; } int remaining = plain remaining(); int lastRemaining = remaining - 1; long delay = 1; try { writeTimestamp = System currentTimeMillis(); while (remaining > 0) { if (remaining == lastRemaining) { try { Thread sleep(delay); delay *= 2; if (delay > 1000) { delay = 1000; } } catch (InterruptedException e) { throw new InterruptedIOException(); } } else { delay = 1; } lastRemaining = remaining; out write(plain); remaining = data remaining(); if (engine != null && data hasRemaining() && !plain hasRemaining()) { plain clear(); engine wrap(data, plain); plain flip(); } } } finally { writeTimestamp = -1; } } public boolean isWriting() { return writeTimestamp > 0; } public long getWriteTimestamp() { return writeTimestamp; } public void setEngine(SSLEngine engine) { this engine = engine; } }",1.0,
1001,1001,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\NIOSSLTransportServer.,NIOSSLTransportServer,"public class NIOSSLTransportServer extends TcpTransportServer { private SSLContext context; public NIOSSLTransportServer(SSLContext context, TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { super(transportFactory, location, serverSocketFactory); this context = context; } private boolean needClientAuth; private boolean wantClientAuth; Override protected Transport createTransport(Socket socket, WireFormat format) throws IOException { NIOSSLTransport transport = new NIOSSLTransport(format, socket); if (context != null) { transport setSslContext(context); } transport setNeedClientAuth(needClientAuth); transport setWantClientAuth(wantClientAuth); return transport; } Override public boolean isSslServer() { return true; } public boolean isNeedClientAuth() { return this needClientAuth; } public void setNeedClientAuth(boolean value) { this needClientAuth = value; } public boolean isWantClientAuth() { return this wantClientAuth; } public void setWantClientAuth(boolean value) { this wantClientAuth = value; } }",1.0,
1003,1003,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\NIOTransportFactory.,NIOTransportFactory,"public class NIOTransportFactory extends TcpTransportFactory { protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpTransportServer(this, location, serverSocketFactory) { protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new NIOTransport(format, socket); } }; } protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new NIOTransport(wf, socketFactory, location, localLocation); } protected ServerSocketFactory createServerSocketFactory() { return new ServerSocketFactory() { public ServerSocket createServerSocket(int port) throws IOException { ServerSocketChannel serverSocketChannel = ServerSocketChannel open(); serverSocketChannel socket() bind(new InetSocketAddress(port)); return serverSocketChannel socket(); } public ServerSocket createServerSocket(int port, int backlog) throws IOException { ServerSocketChannel serverSocketChannel = ServerSocketChannel open(); serverSocketChannel socket() bind(new InetSocketAddress(port), backlog); return serverSocketChannel socket(); } public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException { ServerSocketChannel serverSocketChannel = ServerSocketChannel open(); serverSocketChannel socket() bind(new InetSocketAddress(ifAddress, port), backlog); return serverSocketChannel socket(); } }; } protected SocketFactory createSocketFactory() throws IOException { return new SocketFactory() { public Socket createSocket() throws IOException { SocketChannel channel = SocketChannel open(); return channel socket(); } public Socket createSocket(String host, int port) throws IOException, UnknownHostException { SocketChannel channel = SocketChannel open(); channel connect(new InetSocketAddress(host, port)); return channel socket(); } public Socket createSocket(InetAddress address, int port) throws IOException { SocketChannel channel = SocketChannel open(); channel connect(new InetSocketAddress(address, port)); return channel socket(); } public Socket createSocket(String address, int port, InetAddress localAddresss, int localPort) throws IOException, UnknownHostException { SocketChannel channel = SocketChannel open(); channel socket() bind(new InetSocketAddress(localAddresss, localPort)); channel connect(new InetSocketAddress(address, port)); return channel socket(); } public Socket createSocket(InetAddress address, int port, InetAddress localAddresss, int localPort) throws IOException { SocketChannel channel = SocketChannel open(); channel socket() bind(new InetSocketAddress(localAddresss, localPort)); channel connect(new InetSocketAddress(address, port)); return channel socket(); } }; } }",1.0,
1004,1004,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\SelectorManager.,SelectorManager,"public final class SelectorManager { public static final SelectorManager SINGLETON = new SelectorManager(); private Executor selectorExecutor = createDefaultExecutor(); private Executor channelExecutor = selectorExecutor; private LinkedList<SelectorWorker> freeWorkers = new LinkedList<SelectorWorker>(); private int maxChannelsPerWorker = 1024; protected ExecutorService createDefaultExecutor() { ThreadPoolExecutor rc = new ThreadPoolExecutor(0, Integer MAX VALUE, 10, TimeUnit SECONDS, new SynchronousQueue<Runnable>(), new ThreadFactory() { private long i = 0; public Thread newThread(Runnable runnable) { this i++; final Thread t = new Thread(runnable, ActiveMQ NIO Worker + this i); return t; } }); return rc; } public static SelectorManager getInstance() { return SINGLETON; } public interface Listener { void onSelect(SelectorSelection selector); void onError(SelectorSelection selection, Throwable error); } public synchronized SelectorSelection register(SocketChannel socketChannel, Listener listener) throws IOException { SelectorSelection selection = null; while( selection == null ) { if (freeWorkers size() > 0) { SelectorWorker worker = freeWorkers getFirst(); if( worker isReleased() ) { freeWorkers remove(worker); } else { worker retain(); selection = new SelectorSelection(worker, socketChannel, listener); } } else { SelectorWorker worker = new SelectorWorker(this); freeWorkers addFirst(worker); selection = new SelectorSelection(worker, socketChannel, listener); } } return selection; } synchronized void onWorkerFullEvent(SelectorWorker worker) { freeWorkers remove(worker); } public synchronized void onWorkerEmptyEvent(SelectorWorker worker) { freeWorkers remove(worker); } public synchronized void onWorkerNotFullEvent(SelectorWorker worker) { freeWorkers addFirst(worker); } public Executor getChannelExecutor() { return channelExecutor; } public void setChannelExecutor(Executor channelExecutor) { this channelExecutor = channelExecutor; } public int getMaxChannelsPerWorker() { return maxChannelsPerWorker; } public void setMaxChannelsPerWorker(int maxChannelsPerWorker) { this maxChannelsPerWorker = maxChannelsPerWorker; } public Executor getSelectorExecutor() { return selectorExecutor; } public void setSelectorExecutor(Executor selectorExecutor) { this selectorExecutor = selectorExecutor; } }",1.0,
1005,1005,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\SelectorSelection.,SelectorSelection,"public final class SelectorSelection { private final SelectorWorker worker; private final Listener listener; private int interest; private SelectionKey key; private AtomicBoolean closed = new AtomicBoolean(); public SelectorSelection(final SelectorWorker worker, final SocketChannel socketChannel, Listener listener) throws ClosedChannelException { this worker = worker; this listener = listener; worker addIoTask(new Runnable() { public void run() { try { SelectorSelection this key = socketChannel register(worker selector, 0, SelectorSelection this); } catch (Exception e) { e printStackTrace(); } } }); } public void setInterestOps(int ops) { interest = ops; } public void enable() { worker addIoTask(new Runnable() { public void run() { try { key interestOps(interest); } catch (CancelledKeyException e) { } } }); } public void disable() { worker addIoTask(new Runnable() { public void run() { try { key interestOps(0); } catch (CancelledKeyException e) { } } }); } public void close() { if( closed compareAndSet(false, true) ) { worker addIoTask(new Runnable() { public void run() { try { key cancel(); } catch (CancelledKeyException e) { } worker release(); } }); } } public void onSelect() { listener onSelect(this); } public void onError(Throwable e) { listener onError(this, e); } }",1.0,
1006,1006,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\SelectorWorker.,SelectorWorker,public class SelectorWorker implements Runnable { private static final AtomicInteger NEXT ID = new AtomicInteger(); final SelectorManager manager; final Selector selector; final int id = NEXT ID getAndIncrement(); private final int maxChannelsPerWorker; final AtomicInteger retainCounter = new AtomicInteger(1); private final ConcurrentLinkedQueue<Runnable> ioTasks = new ConcurrentLinkedQueue<Runnable>(); public SelectorWorker(SelectorManager manager) throws IOException { this manager = manager; selector = Selector open(); maxChannelsPerWorker = manager getMaxChannelsPerWorker(); manager getSelectorExecutor() execute(this); } void retain() { if (retainCounter incrementAndGet() == maxChannelsPerWorker) { manager onWorkerFullEvent(this); } } void release() { int use = retainCounter decrementAndGet(); if (use == 0) { manager onWorkerEmptyEvent(this); } else if (use == maxChannelsPerWorker - 1) { manager onWorkerNotFullEvent(this); } } boolean isReleased() { return retainCounter get()==0; } public void addIoTask(Runnable work) { ioTasks add(work); selector wakeup(); } private void processIoTasks() { Runnable task; while( (task= ioTasks poll()) !=null ) { try { task run(); } catch (Throwable e) { e printStackTrace(); } } } public void run() { String origName = Thread currentThread() getName(); try { Thread currentThread() setName( Selector Worker + id); while (!isReleased()) { processIoTasks(); int count = selector select(10); if (count == 0) { continue; } Set keys = selector selectedKeys(); for (Iterator i = keys iterator(); i hasNext();) { final SelectionKey key = (SelectionKey)i next(); i remove(); final SelectorSelection s = (SelectorSelection)key attachment(); try { if( key isValid() ) { key interestOps(0); } manager getChannelExecutor() execute(new Runnable() { public void run() { try { s onSelect(); s enable(); } catch (Throwable e) { s onError(e); } } }); } catch (Throwable e) { s onError(e); } } } } catch (Throwable e) { e printStackTrace(); Set keys = selector keys(); for (Iterator i = keys iterator(); i hasNext();) { SelectionKey key = (SelectionKey)i next(); SelectorSelection s = (SelectorSelection)key attachment(); s onError(e); } } finally { try { manager onWorkerEmptyEvent(this); selector close(); } catch (IOException ignore) { ignore printStackTrace(); } Thread currentThread() setName(origName); } } },1.0,
1007,1007,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\reliable\DefaultReplayBuffer.,DefaultReplayBuffer,"public class DefaultReplayBuffer implements ReplayBuffer { private static final Logger LOG = LoggerFactory getLogger(DefaultReplayBuffer class); private final int size; private ReplayBufferListener listener; private Map<Integer, Object> map; private int lowestCommandId = 1; private Object lock = new Object(); public DefaultReplayBuffer(int size) { this size = size; map = createMap(size); } public void addBuffer(int commandId, Object buffer) { if (LOG isDebugEnabled()) { LOG debug( Adding command ID + commandId + to replay buffer + this + object + buffer); } synchronized (lock) { int max = size - 1; while (map size() >= max) { Object evictedBuffer = map remove(Integer valueOf(++lowestCommandId)); onEvictedBuffer(lowestCommandId, evictedBuffer); } map put(Integer valueOf(commandId), buffer); } } public void setReplayBufferListener(ReplayBufferListener bufferPoolAdapter) { this listener = bufferPoolAdapter; } public void replayMessages(int fromCommandId, int toCommandId, Replayer replayer) throws IOException { if (replayer == null) { throw new IllegalArgumentException( No Replayer parameter specified ); } if (LOG isDebugEnabled()) { LOG debug( Buffer + this + replaying messages from + fromCommandId + to + toCommandId); } for (int i = fromCommandId; i <= toCommandId; i++) { Object buffer = null; synchronized (lock) { buffer = map get(Integer valueOf(i)); } replayer sendBuffer(i, buffer); } } protected Map<Integer, Object> createMap(int maximumSize) { return new HashMap<Integer, Object>(maximumSize); } protected void onEvictedBuffer(int commandId, Object buffer) { if (listener != null) { listener onBufferDiscarded(commandId, buffer); } } }",1.0,
1008,1008,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\reliable\DefaultReplayStrategy.,DefaultReplayStrategy,"public class DefaultReplayStrategy implements ReplayStrategy { private int maximumDifference = 5; public DefaultReplayStrategy() { } public DefaultReplayStrategy(int maximumDifference) { this maximumDifference = maximumDifference; } public boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter, int nextAvailableCounter) throws IOException { int difference = actualCounter - expectedCounter; long count = Math abs(difference); if (count > maximumDifference) { int upperLimit = actualCounter - 1; if (upperLimit < expectedCounter) { upperLimit = expectedCounter; } transport requestReplay(expectedCounter, upperLimit); } return difference > 0; } public void onReceivedPacket(ReliableTransport transport, long expectedCounter) { } public int getMaximumDifference() { return maximumDifference; } public void setMaximumDifference(int maximumDifference) { this maximumDifference = maximumDifference; } }",1.0,
1009,1009,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\reliable\ExceptionIfDroppedReplayStrategy.,ExceptionIfDroppedReplayStrategy,"public class ExceptionIfDroppedReplayStrategy implements ReplayStrategy { private int maximumDifference = 5; public ExceptionIfDroppedReplayStrategy() { } public ExceptionIfDroppedReplayStrategy(int maximumDifference) { this maximumDifference = maximumDifference; } public boolean onDroppedPackets(ReliableTransport transport, int expectedCounter, int actualCounter, int nextAvailableCounter) throws IOException { int difference = actualCounter - expectedCounter; long count = Math abs(difference); if (count > maximumDifference) { throw new IOException( Packets dropped on + transport + count + count + expected + expectedCounter + but was + actualCounter); } return difference > 0; } public void onReceivedPacket(ReliableTransport transport, long expectedCounter) { } public int getMaximumDifference() { return maximumDifference; } public void setMaximumDifference(int maximumDifference) { this maximumDifference = maximumDifference; } }",1.0,
1010,1010,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\reliable\ReliableTransport.,ReliableTransport,"public class ReliableTransport extends ResponseCorrelator { private static final Logger LOG = LoggerFactory getLogger(ReliableTransport class); private ReplayStrategy replayStrategy; private final SortedSet<Command> commands = new TreeSet<Command>(new CommandIdComparator()); private int expectedCounter = 1; private int replayBufferCommandCount = 50; private int requestTimeout = 2000; private ReplayBuffer replayBuffer; private Replayer replayer; private UdpTransport udpTransport; public ReliableTransport(Transport next, ReplayStrategy replayStrategy) { super(next); this replayStrategy = replayStrategy; } public ReliableTransport(Transport next, UdpTransport udpTransport) throws IOException { super(next, udpTransport getSequenceGenerator()); this udpTransport = udpTransport; this replayer = udpTransport createReplayer(); } public void requestReplay(int fromCommandId, int toCommandId) { ReplayCommand replay = new ReplayCommand(); replay setFirstNakNumber(fromCommandId); replay setLastNakNumber(toCommandId); try { oneway(replay); } catch (IOException e) { getTransportListener() onException(e); } } Override public Object request(Object o) throws IOException { final Command command = (Command)o; FutureResponse response = asyncRequest(command, null); while (true) { Response result = response getResult(requestTimeout); if (result != null) { return result; } onMissingResponse(command, response); } } Override public Object request(Object o, int timeout) throws IOException { final Command command = (Command)o; FutureResponse response = asyncRequest(command, null); while (timeout > 0) { int time = timeout; if (timeout > requestTimeout) { time = requestTimeout; } Response result = response getResult(time); if (result != null) { return result; } onMissingResponse(command, response); timeout -= time; } return response getResult(0); } Override public void onCommand(Object o) { Command command = (Command)o; if (command isWireFormatInfo()) { super onCommand(command); return; } else if (command getDataStructureType() == ReplayCommand DATA STRUCTURE TYPE) { replayCommands((ReplayCommand)command); return; } int actualCounter = command getCommandId(); boolean valid = expectedCounter == actualCounter; if (!valid) { synchronized (commands) { int nextCounter = actualCounter; boolean empty = commands isEmpty(); if (!empty) { Command nextAvailable = commands first(); nextCounter = nextAvailable getCommandId(); } try { boolean keep = replayStrategy onDroppedPackets(this, expectedCounter, actualCounter, nextCounter); if (keep) { if (LOG isDebugEnabled()) { LOG debug( Received out of order command which is being buffered for later + command); } commands add(command); } } catch (IOException e) { onException(e); } if (!empty) { command = commands first(); valid = expectedCounter == command getCommandId(); if (valid) { commands remove(command); } } } } while (valid) { replayStrategy onReceivedPacket(this, expectedCounter); expectedCounter++; super onCommand(command); synchronized (commands) { valid = !commands isEmpty(); if (valid) { command = commands first(); valid = expectedCounter == command getCommandId(); if (valid) { commands remove(command); } } } } } public int getBufferedCommandCount() { synchronized (commands) { return commands size(); } } public int getExpectedCounter() { return expectedCounter; } public void setExpectedCounter(int expectedCounter) { this expectedCounter = expectedCounter; } public int getRequestTimeout() { return requestTimeout; } public void setRequestTimeout(int requestTimeout) { this requestTimeout = requestTimeout; } public ReplayStrategy getReplayStrategy() { return replayStrategy; } public ReplayBuffer getReplayBuffer() { if (replayBuffer == null) { replayBuffer = createReplayBuffer(); } return replayBuffer; } public void setReplayBuffer(ReplayBuffer replayBuffer) { this replayBuffer = replayBuffer; } public int getReplayBufferCommandCount() { return replayBufferCommandCount; } public void setReplayBufferCommandCount(int replayBufferSize) { this replayBufferCommandCount = replayBufferSize; } public void setReplayStrategy(ReplayStrategy replayStrategy) { this replayStrategy = replayStrategy; } public Replayer getReplayer() { return replayer; } public void setReplayer(Replayer replayer) { this replayer = replayer; } Override public String toString() { return next toString(); } Override public void start() throws Exception { if (udpTransport != null) { udpTransport setReplayBuffer(getReplayBuffer()); } if (replayStrategy == null) { throw new IllegalArgumentException( Property replayStrategy not specified ); } super start(); } protected void onMissingResponse(Command command, FutureResponse response) { LOG debug( Still waiting for response on + this + to command + command + sending replay message ); int commandId = command getCommandId(); requestReplay(commandId, commandId); } protected ReplayBuffer createReplayBuffer() { return new DefaultReplayBuffer(getReplayBufferCommandCount()); } protected void replayCommands(ReplayCommand command) { try { if (replayer == null) { onException(new IOException( Cannot replay commands No replayer property configured )); } if (LOG isDebugEnabled()) { LOG debug( Processing replay command + command); } getReplayBuffer() replayMessages(command getFirstNakNumber(), command getLastNakNumber(), replayer); } catch (IOException e) { onException(e); } } }",1.0,
1011,1011,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\ExceededMaximumConnectionsException.,ExceededMaximumConnectionsException,public class ExceededMaximumConnectionsException extends Exception { private static final long serialVersionUID = -1166885550766355524L; public ExceededMaximumConnectionsException(String message) { super(message); } },1.0,
1012,1012,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\QualityOfServiceUtils.,QualityOfServiceUtils,"public class QualityOfServiceUtils { private static final int MAX DIFF SERV = 63; private static final int MIN DIFF SERV = 0; private static final Map<String, Integer> DIFF SERV NAMES = new HashMap<String, Integer>(); static { DIFF SERV NAMES put( CS0 , 0); DIFF SERV NAMES put( CS1 , 8); DIFF SERV NAMES put( CS2 , 16); DIFF SERV NAMES put( CS3 , 24); DIFF SERV NAMES put( CS4 , 32); DIFF SERV NAMES put( CS5 , 40); DIFF SERV NAMES put( CS6 , 48); DIFF SERV NAMES put( CS7 , 56); DIFF SERV NAMES put( AF11 , 10); DIFF SERV NAMES put( AF12 , 12); DIFF SERV NAMES put( AF13 , 14); DIFF SERV NAMES put( AF21 , 18); DIFF SERV NAMES put( AF22 , 20); DIFF SERV NAMES put( AF23 , 22); DIFF SERV NAMES put( AF31 , 26); DIFF SERV NAMES put( AF32 , 28); DIFF SERV NAMES put( AF33 , 30); DIFF SERV NAMES put( AF41 , 34); DIFF SERV NAMES put( AF42 , 36); DIFF SERV NAMES put( AF43 , 38); DIFF SERV NAMES put( EF , 46); } private static final int MAX TOS = 255; private static final int MIN TOS = 0; public static int getDSCP(String value) throws IllegalArgumentException { int intValue = -1; if (DIFF SERV NAMES containsKey(value)) { intValue = DIFF SERV NAMES get(value); } else { try { intValue = Integer parseInt(value); if (intValue > MAX DIFF SERV || intValue < MIN DIFF SERV) { throw new IllegalArgumentException( Differentiated Services + value + intValue + not in legal range [ + MIN DIFF SERV + , + MAX DIFF SERV + ] ); } } catch (NumberFormatException e) { throw new IllegalArgumentException( No such Differentiated + Services name + value); } } return adjustDSCPForECN(intValue); } public static int getToS(int value) throws IllegalArgumentException { if (value > MAX TOS || value < MIN TOS) { throw new IllegalArgumentException( Type of Service value + value + not in legal range [ + MIN TOS + , + MAX TOS + ); } return value; } private static int adjustDSCPForECN(int dscp) throws IllegalArgumentException { Socket socket = new Socket(); try { int systemTrafficClass = socket getTrafficClass(); return (dscp << 2) | (systemTrafficClass & 3); } catch (SocketException e) { throw new IllegalArgumentException( Setting Differentiated Services + not supported + e); } } }",1.0,
1013,1013,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\ResponseHolder.,ResponseHolder,public class ResponseHolder { protected Response response; protected Object lock = new Object(); protected boolean notified; public ResponseHolder() { } public void setResponse(Response r) { synchronized (lock) { this response = r; notified = true; lock notify(); } } public Response getResponse() { return getResponse(0); } public Response getResponse(int timeout) { synchronized (lock) { if (!notified) { try { lock wait(timeout); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } } return this response; } public void close() { synchronized (lock) { notified = true; lock notifyAll(); } } },1.0,
1014,1014,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\SslTransport.,SslTransport,"public class SslTransport extends TcpTransport { public SslTransport(WireFormat wireFormat, SSLSocketFactory socketFactory, URI remoteLocation, URI localLocation, boolean needClientAuth) throws IOException { super(wireFormat, socketFactory, remoteLocation, localLocation); if (this socket != null) { ((SSLSocket)this socket) setNeedClientAuth(needClientAuth); } } public SslTransport(WireFormat wireFormat, SSLSocket socket) throws IOException { super(wireFormat, socket); } public void doConsume(Object command) { if (command instanceof ConnectionInfo) { ConnectionInfo connectionInfo = (ConnectionInfo)command; connectionInfo setTransportContext(getPeerCertificates()); } super doConsume(command); } public X509Certificate[] getPeerCertificates() { SSLSocket sslSocket = (SSLSocket)this socket; SSLSession sslSession = sslSocket getSession(); X509Certificate[] clientCertChain; try { clientCertChain = (X509Certificate[])sslSession getPeerCertificates(); } catch (SSLPeerUnverifiedException e) { clientCertChain = null; } return clientCertChain; } public String toString() { return ssl } }",1.0,
1016,1016,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\SslTransportServer.,SslTransportServer,"public class SslTransportServer extends TcpTransportServer { private boolean needClientAuth; private boolean wantClientAuth; public SslTransportServer(SslTransportFactory transportFactory, URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { super(transportFactory, location, serverSocketFactory); } public void setNeedClientAuth(boolean needAuth) { this needClientAuth = needAuth; } public boolean getNeedClientAuth() { return this needClientAuth; } public boolean getWantClientAuth() { return this wantClientAuth; } public void setWantClientAuth(boolean wantAuth) { this wantClientAuth = wantAuth; } public void bind() throws IOException { super bind(); if (needClientAuth) { ((SSLServerSocket)this serverSocket) setNeedClientAuth(true); } else if (wantClientAuth) { ((SSLServerSocket)this serverSocket) setWantClientAuth(true); } } protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new SslTransport(format, (SSLSocket)socket); } Override public boolean isSslServer() { return true; } }",1.0,
1017,1017,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\TcpBufferedInputStream.,TcpBufferedInputStream,"public class TcpBufferedInputStream extends FilterInputStream { private static final int DEFAULT BUFFER SIZE = 8192; protected byte internalBuffer[]; protected int count; protected int position; public TcpBufferedInputStream(InputStream in) { this(in, DEFAULT BUFFER SIZE); } public TcpBufferedInputStream(InputStream in, int size) { super(in); if (size <= 0) { throw new IllegalArgumentException( Buffer size <= 0 ); } internalBuffer = new byte[size]; } protected void fill() throws IOException { byte[] buffer = internalBuffer; count = 0; position = 0; int n = in read(buffer, position, buffer length - position); if (n > 0) { count = n + position; } } public int read() throws IOException { if (position >= count) { fill(); if (position >= count) { return -1; } } return internalBuffer[position++] & 0xff; } private int readStream(byte[] b, int off, int len) throws IOException { int avail = count - position; if (avail <= 0) { if (len >= internalBuffer length) { return in read(b, off, len); } fill(); avail = count - position; if (avail <= 0) { return -1; } } int cnt = (avail < len) avail len; System arraycopy(internalBuffer, position, b, off, cnt); position += cnt; return cnt; } public int read(byte b[], int off, int len) throws IOException { if ((off | len | (off + len) | (b length - (off + len))) < 0) { throw new IndexOutOfBoundsException(); } else if (len == 0) { return 0; } int n = 0; for (;;) { int nread = readStream(b, off + n, len - n); if (nread <= 0) { return (n == 0) nread n; } n += nread; if (n >= len) { return n; } InputStream input = in; if (input != null && input available() <= 0) { return n; } } } public long skip(long n) throws IOException { if (n <= 0) { return 0; } long avail = count - position; if (avail <= 0) { return in skip(n); } long skipped = (avail < n) avail n; position += skipped; return skipped; } public int available() throws IOException { return in available() + (count - position); } public boolean markSupported() { return false; } public void close() throws IOException { if (in != null) { in close(); } } }",1.0,
1020,1020,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\TcpTransportFactory.,TcpTransportFactory,"public class TcpTransportFactory extends TransportFactory { private static final Logger LOG = LoggerFactory getLogger(TcpTransportFactory class); public TransportServer doBind(final URI location) throws IOException { try { Map<String, String> options = new HashMap<String, String>(URISupport parseParameters(location)); ServerSocketFactory serverSocketFactory = createServerSocketFactory(); TcpTransportServer server = createTcpTransportServer(location, serverSocketFactory); server setWireFormatFactory(createWireFormatFactory(options)); IntrospectionSupport setProperties(server, options); Map<String, Object> transportOptions = IntrospectionSupport extractProperties(options, transport ); server setTransportOption(transportOptions); server bind(); return server; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } protected TcpTransportServer createTcpTransportServer(final URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpTransportServer(this, location, serverSocketFactory); } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { TcpTransport tcpTransport = (TcpTransport)transport narrow(TcpTransport class); IntrospectionSupport setProperties(tcpTransport, options); Map<String, Object> socketOptions = IntrospectionSupport extractProperties(options, socket ); tcpTransport setSocketOptions(socketOptions); if (tcpTransport isTrace()) { try { transport = TransportLoggerSupport createTransportLogger(transport, tcpTransport getLogWriterName(), tcpTransport isDynamicManagement(), tcpTransport isStartLogging(), tcpTransport getJmxPort()); } catch (Throwable e) { LOG error( Could not create TransportLogger object for + tcpTransport getLogWriterName() + , reason + e, e); } } boolean useInactivityMonitor = true equals(getOption(options, useInactivityMonitor , true )); if (useInactivityMonitor && isUseInactivityMonitor(transport)) { transport = createInactivityMonitor(transport, format); IntrospectionSupport setProperties(transport, options); } if (format instanceof OpenWireFormat) { transport = new WireFormatNegotiator(transport, (OpenWireFormat)format, tcpTransport getMinmumWireFormatVersion()); } return super compositeConfigure(transport, format, options); } protected boolean isUseInactivityMonitor(Transport transport) { return true; } protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException { URI localLocation = null; String path = location getPath(); if (path != null && path length() > 0) { int localPortIndex = path indexOf( ); try { Integer parseInt(path substring(localPortIndex + 1, path length())); String localString = location getScheme() + / + path; localLocation = new URI(localString); } catch (Exception e) { LOG warn( path isn t a valid local location for TcpTransport to use , e getMessage()); if(LOG isDebugEnabled()) { LOG debug( Failure detail , e); } } } SocketFactory socketFactory = createSocketFactory(); return createTcpTransport(wf, socketFactory, location, localLocation); } protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new TcpTransport(wf, socketFactory, location, localLocation); } protected ServerSocketFactory createServerSocketFactory() throws IOException { return ServerSocketFactory getDefault(); } protected SocketFactory createSocketFactory() throws IOException { return SocketFactory getDefault(); } protected Transport createInactivityMonitor(Transport transport, WireFormat format) { return new InactivityMonitor(transport, format); } }",1.0,
1021,1021,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\TcpTransportServer.,TcpTransportServer,"public class TcpTransportServer extends TransportServerThreadSupport implements ServiceListener{ private static final Logger LOG = LoggerFactory getLogger(TcpTransportServer class); protected ServerSocket serverSocket; protected int backlog = 5000; protected WireFormatFactory wireFormatFactory = new OpenWireFormatFactory(); protected final TcpTransportFactory transportFactory; protected long maxInactivityDuration = 30000; protected long maxInactivityDurationInitalDelay = 10000; protected int minmumWireFormatVersion; protected boolean useQueueForAccept=true; protected boolean trace = false; protected int soTimeout = 0; protected int socketBufferSize = 64 * 1024; protected int connectionTimeout = 30000; protected String logWriterName = TransportLoggerSupport defaultLogWriterName; protected boolean dynamicManagement = false; protected boolean startLogging = true; protected final ServerSocketFactory serverSocketFactory; protected BlockingQueue<Socket> socketQueue = new LinkedBlockingQueue<Socket>(); protected Thread socketHandlerThread; protected int maximumConnections = Integer MAX VALUE; protected int currentTransportCount=0; public TcpTransportServer(TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { super(location); this transportFactory = transportFactory; this serverSocketFactory = serverSocketFactory; } public void bind() throws IOException { URI bind = getBindLocation(); String host = bind getHost(); host = (host == null || host length() == 0) localhost host; InetAddress addr = InetAddress getByName(host); try { this serverSocket = serverSocketFactory createServerSocket(bind getPort(), backlog, addr); configureServerSocket(this serverSocket); } catch (IOException e) { throw IOExceptionSupport create( Failed to bind to server socket + bind + due to + e, e); } try { setConnectURI(new URI(bind getScheme(), bind getUserInfo(), resolveHostName(serverSocket, addr), serverSocket getLocalPort(), bind getPath(), bind getQuery(), bind getFragment())); } catch (URISyntaxException e) { try { setConnectURI(new URI(bind getScheme(), bind getUserInfo(), addr getHostAddress(), serverSocket getLocalPort(), bind getPath(), bind getQuery(), bind getFragment())); } catch (URISyntaxException e2) { throw IOExceptionSupport create(e2); } } } private void configureServerSocket(ServerSocket socket) throws SocketException { socket setSoTimeout(2000); if (transportOptions != null) { IntrospectionSupport setProperties(socket, transportOptions); } } public WireFormatFactory getWireFormatFactory() { return wireFormatFactory; } public void setWireFormatFactory(WireFormatFactory wireFormatFactory) { this wireFormatFactory = wireFormatFactory; } public void setBrokerInfo(BrokerInfo brokerInfo) { } public long getMaxInactivityDuration() { return maxInactivityDuration; } public void setMaxInactivityDuration(long maxInactivityDuration) { this maxInactivityDuration = maxInactivityDuration; } public long getMaxInactivityDurationInitalDelay() { return this maxInactivityDurationInitalDelay; } public void setMaxInactivityDurationInitalDelay(long maxInactivityDurationInitalDelay) { this maxInactivityDurationInitalDelay = maxInactivityDurationInitalDelay; } public int getMinmumWireFormatVersion() { return minmumWireFormatVersion; } public void setMinmumWireFormatVersion(int minmumWireFormatVersion) { this minmumWireFormatVersion = minmumWireFormatVersion; } public boolean isTrace() { return trace; } public void setTrace(boolean trace) { this trace = trace; } public String getLogWriterName() { return logWriterName; } public void setLogWriterName(String logFormat) { this logWriterName = logFormat; } public boolean isDynamicManagement() { return dynamicManagement; } public void setDynamicManagement(boolean useJmx) { this dynamicManagement = useJmx; } public boolean isStartLogging() { return startLogging; } public void setStartLogging(boolean startLogging) { this startLogging = startLogging; } public int getBacklog() { return backlog; } public void setBacklog(int backlog) { this backlog = backlog; } public boolean isUseQueueForAccept() { return useQueueForAccept; } public void setUseQueueForAccept(boolean useQueueForAccept) { this useQueueForAccept = useQueueForAccept; } public void run() { while (!isStopped()) { Socket socket = null; try { socket = serverSocket accept(); if (socket != null) { if (isStopped() || getAcceptListener() == null) { socket close(); } else { if (useQueueForAccept) { socketQueue put(socket); }else { handleSocket(socket); } } } } catch (SocketTimeoutException ste) { } catch (Exception e) { if (!isStopping()) { onAcceptError(e); } else if (!isStopped()) { LOG warn( run() , e); onAcceptError(e); } } } } protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new TcpTransport(format, socket); } public String toString() { return + getBindLocation(); } protected String resolveHostName(ServerSocket socket, InetAddress bindAddress) throws UnknownHostException { String result = null; if (socket isBound()) { if (socket getInetAddress() isAnyLocalAddress()) { result = InetAddressUtil getLocalHostName(); } else { result = socket getInetAddress() getCanonicalHostName(); } } else { result = bindAddress getCanonicalHostName(); } return result; } protected void doStart() throws Exception { if(useQueueForAccept) { Runnable run = new Runnable() { public void run() { try { while (!isStopped() && !isStopping()) { Socket sock = socketQueue poll(1, TimeUnit SECONDS); if (sock != null) { handleSocket(sock); } } } catch (InterruptedException e) { LOG info( socketQueue interuppted - stopping ); if (!isStopping()) { onAcceptError(e); } } } }; socketHandlerThread = new Thread(null, run, ActiveMQ Transport Server Thread Handler + toString(), getStackSize()); socketHandlerThread setDaemon(true); socketHandlerThread setPriority(ThreadPriorities BROKER MANAGEMENT-1); socketHandlerThread start(); } super doStart(); } protected void doStop(ServiceStopper stopper) throws Exception { super doStop(stopper); if (serverSocket != null) { serverSocket close(); } } public InetSocketAddress getSocketAddress() { return (InetSocketAddress)serverSocket getLocalSocketAddress(); } protected final void handleSocket(Socket socket) { try { if (this currentTransportCount >= this maximumConnections) { throw new ExceededMaximumConnectionsException( Exceeded the maximum + number of allowed client connections See the maximumConnections + property on the TCP transport configuration URI in the ActiveMQ + configuration file (e g , activemq xml) ); } else { HashMap<String, Object> options = new HashMap<String, Object>(); options put( maxInactivityDuration , Long valueOf(maxInactivityDuration)); options put( maxInactivityDurationInitalDelay , Long valueOf(maxInactivityDurationInitalDelay)); options put( minmumWireFormatVersion , Integer valueOf(minmumWireFormatVersion)); options put( trace , Boolean valueOf(trace)); options put( soTimeout , Integer valueOf(soTimeout)); options put( socketBufferSize , Integer valueOf(socketBufferSize)); options put( connectionTimeout , Integer valueOf(connectionTimeout)); options put( logWriterName , logWriterName); options put( dynamicManagement , Boolean valueOf(dynamicManagement)); options put( startLogging , Boolean valueOf(startLogging)); options putAll(transportOptions); WireFormat format = wireFormatFactory createWireFormat(); Transport transport = createTransport(socket, format); if (transport instanceof ServiceSupport) { ((ServiceSupport) transport) addServiceListener(this); } Transport configuredTransport = transportFactory serverConfigure( transport, format, options); getAcceptListener() onAccept(configuredTransport); } } catch (SocketTimeoutException ste) { } catch (Exception e) { if (!isStopping()) { onAcceptError(e); } else if (!isStopped()) { LOG warn( run() , e); onAcceptError(e); } } } public int getSoTimeout() { return soTimeout; } public void setSoTimeout(int soTimeout) { this soTimeout = soTimeout; } public int getSocketBufferSize() { return socketBufferSize; } public void setSocketBufferSize(int socketBufferSize) { this socketBufferSize = socketBufferSize; } public int getConnectionTimeout() { return connectionTimeout; } public void setConnectionTimeout(int connectionTimeout) { this connectionTimeout = connectionTimeout; } public int getMaximumConnections() { return maximumConnections; } public void setMaximumConnections(int maximumConnections) { this maximumConnections = maximumConnections; } public void started(Service service) { this currentTransportCount++; } public void stopped(Service service) { this currentTransportCount--; } Override public boolean isSslServer() { return false; } }",1.0,
1025,1025,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\udp\DatagramEndpoint.,DatagramEndpoint,"public class DatagramEndpoint extends BaseEndpoint { private final SocketAddress address; public DatagramEndpoint(String name, SocketAddress address) { super(name); this address = address; } public SocketAddress getAddress() { return address; } }",1.0,
1026,1026,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\udp\DatagramHeaderMarshaller.,DatagramHeaderMarshaller,"public class DatagramHeaderMarshaller { private Map<SocketAddress, Endpoint> endpoints = new HashMap<SocketAddress, Endpoint>(); public Endpoint createEndpoint(ByteBuffer readBuffer, SocketAddress address) { return getEndpoint(address); } public Endpoint createEndpoint(DatagramPacket datagram, DataInputStream dataIn) { return getEndpoint(datagram getSocketAddress()); } public void writeHeader(Command command, ByteBuffer writeBuffer) { } public void writeHeader(Command command, DataOutputStream dataOut) { } protected Endpoint getEndpoint(SocketAddress address) { Endpoint endpoint = endpoints get(address); if (endpoint == null) { endpoint = createEndpoint(address); endpoints put(address, endpoint); } return endpoint; } protected Endpoint createEndpoint(SocketAddress address) { return new DatagramEndpoint(address toString(), address); } }",1.0,
1027,1027,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\udp\DefaultBufferPool.,DefaultBufferPool,public class DefaultBufferPool extends SimpleBufferPool implements ByteBufferPool { private List<ByteBuffer> buffers = new ArrayList<ByteBuffer>(); private Object lock = new Object(); public DefaultBufferPool() { super(true); } public DefaultBufferPool(boolean useDirect) { super(useDirect); } public synchronized ByteBuffer borrowBuffer() { synchronized (lock) { int size = buffers size(); if (size > 0) { return buffers remove(size - 1); } } return createBuffer(); } public void returnBuffer(ByteBuffer buffer) { synchronized (lock) { buffers add(buffer); } } public void start() throws Exception { } public void stop() throws Exception { synchronized (lock) { buffers clear(); } } },1.0,
1028,1028,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\udp\ResponseRedirectInterceptor.,ResponseRedirectInterceptor,"public class ResponseRedirectInterceptor extends TransportFilter { private final UdpTransport transport; public ResponseRedirectInterceptor(Transport next, UdpTransport transport) { super(next); this transport = transport; } public void onCommand(Object o) { final Command command = (Command)o; Endpoint from = command getFrom(); transport setTargetEndpoint(from); super onCommand(command); } }",1.0,
1029,1029,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\udp\SimpleBufferPool.,SimpleBufferPool,public class SimpleBufferPool implements ByteBufferPool { private int defaultSize; private boolean useDirect; public SimpleBufferPool() { this(false); } public SimpleBufferPool(boolean useDirect) { this useDirect = useDirect; } public synchronized ByteBuffer borrowBuffer() { return createBuffer(); } public void returnBuffer(ByteBuffer buffer) { } public void setDefaultSize(int defaultSize) { this defaultSize = defaultSize; } public boolean isUseDirect() { return useDirect; } public void setUseDirect(boolean useDirect) { this useDirect = useDirect; } public void start() throws Exception { } public void stop() throws Exception { } protected ByteBuffer createBuffer() { if (useDirect) { return ByteBuffer allocateDirect(defaultSize); } else { return ByteBuffer allocate(defaultSize); } } },1.0,
1033,1033,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\usage\DefaultUsageCapacity.,DefaultUsageCapacity,public class DefaultUsageCapacity implements UsageCapacity{ private long limit; public boolean isLimit(long size) { return size >= limit; } public final long getLimit(){ return this limit; } public final void setLimit(long limit){ this limit=limit; } },1.0,
1035,1035,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\usage\Usage.,Usage,"public abstract class Usage<T extends Usage> implements Service { private static final Logger LOG = LoggerFactory getLogger(Usage class); protected final Object usageMutex = new Object(); protected int percentUsage; protected T parent; private UsageCapacity limiter = new DefaultUsageCapacity(); private int percentUsageMinDelta = 1; private final List<UsageListener> listeners = new CopyOnWriteArrayList<UsageListener>(); private final boolean debug = LOG isDebugEnabled(); protected String name; private float usagePortion = 1 0f; private final List<T> children = new CopyOnWriteArrayList<T>(); private final List<Runnable> callbacks = new LinkedList<Runnable>(); private int pollingTime = 100; private final AtomicBoolean started=new AtomicBoolean(); private ThreadPoolExecutor executor; public Usage(T parent, String name, float portion) { this parent = parent; this usagePortion = portion; if (parent != null) { this limiter setLimit((long)(parent getLimit() * portion)); name = parent name + + name; } this name = name; } protected abstract long retrieveUsage(); public void waitForSpace() throws InterruptedException { waitForSpace(0); } public boolean waitForSpace(long timeout) throws InterruptedException { return waitForSpace(timeout, 100); } public boolean waitForSpace(long timeout, int highWaterMark) throws InterruptedException { if (parent != null) { if (!parent waitForSpace(timeout, highWaterMark)) { return false; } } synchronized (usageMutex) { percentUsage=caclPercentUsage(); if (percentUsage >= highWaterMark) { long deadline = timeout > 0 System currentTimeMillis() + timeout Long MAX VALUE; long timeleft = deadline; while (timeleft > 0) { percentUsage=caclPercentUsage(); if (percentUsage >= highWaterMark) { usageMutex wait(pollingTime); timeleft = deadline - System currentTimeMillis(); } else { break; } } } return percentUsage < highWaterMark; } } public boolean isFull() { return isFull(100); } public boolean isFull(int highWaterMark) { if (parent != null && parent isFull(highWaterMark)) { return true; } synchronized (usageMutex) { percentUsage=caclPercentUsage(); return percentUsage >= highWaterMark; } } public void addUsageListener(UsageListener listener) { listeners add(listener); } public void removeUsageListener(UsageListener listener) { listeners remove(listener); } public long getLimit() { synchronized (usageMutex) { return limiter getLimit(); } } public void setLimit(long limit) { if (percentUsageMinDelta < 0) { throw new IllegalArgumentException( percentUsageMinDelta must be greater or equal to 0 ); } synchronized (usageMutex) { this limiter setLimit(limit); this usagePortion = 0; } onLimitChange(); } protected void onLimitChange() { if (usagePortion > 0 && parent != null) { synchronized (usageMutex) { this limiter setLimit((long)(parent getLimit() * usagePortion)); } } int percentUsage; synchronized (usageMutex) { percentUsage = caclPercentUsage(); } setPercentUsage(percentUsage); for (T child children) { child onLimitChange(); } } public float getUsagePortion() { synchronized (usageMutex) { return usagePortion; } } public void setUsagePortion(float usagePortion) { synchronized (usageMutex) { this usagePortion = usagePortion; } onLimitChange(); } public int getPercentUsage() { synchronized (usageMutex) { return percentUsage; } } public int getPercentUsageMinDelta() { synchronized (usageMutex) { return percentUsageMinDelta; } } public void setPercentUsageMinDelta(int percentUsageMinDelta) { if (percentUsageMinDelta < 1) { throw new IllegalArgumentException( percentUsageMinDelta must be greater than 0 ); } int percentUsage; synchronized (usageMutex) { this percentUsageMinDelta = percentUsageMinDelta; percentUsage = caclPercentUsage(); } setPercentUsage(percentUsage); } public long getUsage() { synchronized (usageMutex) { return retrieveUsage(); } } protected void setPercentUsage(int value) { synchronized (usageMutex) { int oldValue = percentUsage; percentUsage = value; if (oldValue != value) { fireEvent(oldValue, value); } } } protected int caclPercentUsage() { if (limiter getLimit() == 0) { return 0; } return (int)((((retrieveUsage() * 100) / limiter getLimit()) / percentUsageMinDelta) * percentUsageMinDelta); } private void fireEvent(final int oldPercentUsage, final int newPercentUsage) { if (debug) { LOG debug(getName() + usage change from + oldPercentUsage + % of available memory, to + newPercentUsage + % of available memory ); } if (started get()) { if (oldPercentUsage >= 100 && newPercentUsage < 100) { synchronized (usageMutex) { usageMutex notifyAll(); if (!callbacks isEmpty()) { for (Iterator<Runnable> iter = new ArrayList<Runnable>(callbacks) iterator(); iter hasNext();) { Runnable callback = iter next(); getExecutor() execute(callback); } callbacks clear(); } } } if (!listeners isEmpty()) { Runnable listenerNotifier = new Runnable() { public void run() { for (Iterator<UsageListener> iter = listeners iterator(); iter hasNext();) { UsageListener l = iter next(); l onUsageChanged(Usage this, oldPercentUsage, newPercentUsage); } } }; if (started get()) { getExecutor() execute(listenerNotifier); } else { LOG warn( Not notifying memory usage change to listeners on shutdown ); } } } } public String getName() { return name; } Override public String toString() { return Usage( + getName() + ) percentUsage= + percentUsage + %, usage= + retrieveUsage() + , limit= + limiter getLimit() + , percentUsageMinDelta= + percentUsageMinDelta + % + (parent != null ;Parent + parent toString() ); } SuppressWarnings( unchecked ) public void start() { if (started compareAndSet(false, true)){ if (parent != null) { parent addChild(this); } for (T t children) { t start(); } } } SuppressWarnings( unchecked ) public void stop() { if (started compareAndSet(true, false)){ if (parent != null) { parent removeChild(this); } synchronized (usageMutex) { usageMutex notifyAll(); for (Iterator<Runnable> iter = new ArrayList<Runnable>(this callbacks) iterator(); iter hasNext();) { Runnable callback = iter next(); callback run(); } this callbacks clear(); } for (T t children) { t stop(); } } } protected void addChild(T child) { children add(child); if (started get()) { child start(); } } protected void removeChild(T child) { children remove(child); } public boolean notifyCallbackWhenNotFull(final Runnable callback) { if (parent != null) { Runnable r = new Runnable() { public void run() { synchronized (usageMutex) { if (percentUsage >= 100) { callbacks add(callback); } else { callback run(); } } } }; if (parent notifyCallbackWhenNotFull(r)) { return true; } } synchronized (usageMutex) { if (percentUsage >= 100) { callbacks add(callback); return true; } else { return false; } } } public UsageCapacity getLimiter() { return this limiter; } public void setLimiter(UsageCapacity limiter) { this limiter = limiter; } public int getPollingTime() { return this pollingTime; } public void setPollingTime(int pollingTime) { this pollingTime = pollingTime; } public void setName(String name) { this name = name; } public T getParent() { return parent; } public void setParent(T parent) { this parent = parent; } public void setExecutor (ThreadPoolExecutor executor) { this executor = executor; } public ThreadPoolExecutor getExecutor() { return executor; } }",1.0,
1037,1037,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\BitArrayBin.,BitArrayBin,"public class BitArrayBin implements Serializable { private static final long serialVersionUID = 1L; private LinkedList<BitArray> list; private int maxNumberOfArrays; private int firstIndex = -1; private long lastInOrderBit=-1; public BitArrayBin(int windowSize) { maxNumberOfArrays = ((windowSize + 1) / BitArray LONG SIZE) + 1; maxNumberOfArrays = Math max(maxNumberOfArrays, 1); list = new LinkedList<BitArray>(); for (int i = 0; i < maxNumberOfArrays; i++) { list add(null); } } public boolean setBit(long index, boolean value) { boolean answer = false; BitArray ba = getBitArray(index); if (ba != null) { int offset = getOffset(index); if (offset >= 0) { answer = ba set(offset, value); } } return answer; } public boolean isInOrder(long index) { boolean result = false; if (lastInOrderBit == -1) { result = true; } else { result = lastInOrderBit + 1 == index; } lastInOrderBit = index; return result; } public boolean getBit(long index) { boolean answer = index >= firstIndex; BitArray ba = getBitArray(index); if (ba != null) { int offset = getOffset(index); if (offset >= 0) { answer = ba get(offset); return answer; } } else { answer = true; } return answer; } private BitArray getBitArray(long index) { int bin = getBin(index); BitArray answer = null; if (bin >= 0) { if (bin >= maxNumberOfArrays) { int overShoot = bin - maxNumberOfArrays + 1; while (overShoot > 0) { list removeFirst(); firstIndex += BitArray LONG SIZE; list add(new BitArray()); overShoot--; } bin = maxNumberOfArrays - 1; } answer = list get(bin); if (answer == null) { answer = new BitArray(); list set(bin, answer); } } return answer; } private int getBin(long index) { int answer = 0; if (firstIndex < 0) { firstIndex = (int) (index - (index % BitArray LONG SIZE)); } else if (firstIndex >= 0) { answer = (int)((index - firstIndex) / BitArray LONG SIZE); } return answer; } private int getOffset(long index) { int answer = 0; if (firstIndex >= 0) { answer = (int)((index - firstIndex) - (BitArray LONG SIZE * getBin(index))); } return answer; } public long getLastSetIndex() { long result = -1; if (firstIndex >=0) { result = firstIndex; BitArray last = null; for (int lastBitArrayIndex = maxNumberOfArrays -1; lastBitArrayIndex >= 0; lastBitArrayIndex--) { last = list get(lastBitArrayIndex); if (last != null) { result += last length() -1; result += lastBitArrayIndex * BitArray LONG SIZE; break; } } } return result; } }",1.0,
1038,1038,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\ByteArrayInputStream.,ByteArrayInputStream,"public class ByteArrayInputStream extends InputStream { byte buffer[]; int limit; int pos; int mark; public ByteArrayInputStream(byte data[]) { this(data, 0, data length); } public ByteArrayInputStream(ByteSequence sequence) { this(sequence getData(), sequence getOffset(), sequence getLength()); } public ByteArrayInputStream(byte data[], int offset, int size) { this buffer = data; this mark = offset; this pos = offset; this limit = offset + size; } public int read() throws IOException { if (pos < limit) { return buffer[pos++] & 0xff; } else { return -1; } } public int read(byte[] b) throws IOException { return read(b, 0, b length); } public int read(byte b[], int off, int len) { if (pos < limit) { len = Math min(len, limit - pos); if (len > 0) { System arraycopy(buffer, pos, b, off, len); pos += len; } return len; } else { return -1; } } public long skip(long len) throws IOException { if (pos < limit) { len = Math min(len, limit - pos); if (len > 0) { pos += len; } return len; } else { return -1; } } public int available() { return limit - pos; } public boolean markSupported() { return true; } public void mark(int markpos) { mark = pos; } public void reset() { pos = mark; } }",1.0,
1042,1042,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\ClassLoadingAwareObjectInputStream.,ClassLoadingAwareObjectInputStream,"public class ClassLoadingAwareObjectInputStream extends ObjectInputStream { private static final ClassLoader FALLBACK CLASS LOADER = ClassLoadingAwareObjectInputStream class getClassLoader(); private static final HashMap<String, Class> primClasses = new HashMap<String, Class>(8, 1 0F); private final ClassLoader inLoader; public ClassLoadingAwareObjectInputStream(InputStream in) throws IOException { super(in); inLoader = in getClass() getClassLoader(); } protected Class< > resolveClass(ObjectStreamClass classDesc) throws IOException, ClassNotFoundException { ClassLoader cl = Thread currentThread() getContextClassLoader(); return load(classDesc getName(), cl, inLoader); } protected Class< > resolveProxyClass(String[] interfaces) throws IOException, ClassNotFoundException { ClassLoader cl = Thread currentThread() getContextClassLoader(); Class[] cinterfaces = new Class[interfaces length]; for (int i = 0; i < interfaces length; i++) { cinterfaces[i] = load(interfaces[i], cl); } try { return Proxy getProxyClass(cl, cinterfaces); } catch (IllegalArgumentException e) { try { return Proxy getProxyClass(inLoader, cinterfaces); } catch (IllegalArgumentException e1) { } try { return Proxy getProxyClass(FALLBACK CLASS LOADER, cinterfaces); } catch (IllegalArgumentException e2) { } throw new ClassNotFoundException(null, e); } } private Class< > load(String className, ClassLoader cl) throws ClassNotFoundException { for (ClassLoader loader cl) { try { return Class forName(className, false, loader); } catch (ClassNotFoundException e) { } } final Class< > clazz = (Class< >) primClasses get(className); if (clazz != null) { return clazz; } else { return Class forName(className, false, FALLBACK CLASS LOADER); } } static { primClasses put( boolean , boolean class); primClasses put( byte , byte class); primClasses put( char , char class); primClasses put( short , short class); primClasses put( int , int class); primClasses put( long , long class); primClasses put( float , float class); primClasses put( double , double class); primClasses put( void , void class); } }",1.0,
1043,1043,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\DataByteArrayInputStream.,DataByteArrayInputStream,"public final class DataByteArrayInputStream extends InputStream implements DataInput { private byte[] buf; private int pos; private int offset; public DataByteArrayInputStream(byte buf[]) { this buf = buf; this pos = 0; this offset = 0; } public DataByteArrayInputStream(ByteSequence sequence) { this buf = sequence getData(); this offset = sequence getOffset(); this pos = this offset; } public DataByteArrayInputStream() { this(new byte[0]); } public int size() { return pos - offset; } public byte[] getRawData() { return buf; } public void restart(byte[] newBuff) { buf = newBuff; pos = 0; } public void restart(ByteSequence sequence) { this buf = sequence getData(); this pos = sequence getOffset(); } public void restart(int size) { if (buf == null || buf length < size) { buf = new byte[size]; } restart(buf); } public int read() { return (pos < buf length) (buf[pos++] & 0xff) -1; } public int read(byte b[], int off, int len) { if (b == null) { throw new NullPointerException(); } if (pos >= buf length) { return -1; } if (pos + len > buf length) { len = buf length - pos; } if (len <= 0) { return 0; } System arraycopy(buf, pos, b, off, len); pos += len; return len; } public int available() { return buf length - pos; } public void readFully(byte[] b) { read(b, 0, b length); } public void readFully(byte[] b, int off, int len) { read(b, off, len); } public int skipBytes(int n) { if (pos + n > buf length) { n = buf length - pos; } if (n < 0) { return 0; } pos += n; return n; } public boolean readBoolean() { return read() != 0; } public byte readByte() { return (byte)read(); } public int readUnsignedByte() { return read(); } public short readShort() { int ch1 = read(); int ch2 = read(); return (short)((ch1 << 8) + (ch2 << 0)); } public int readUnsignedShort() { int ch1 = read(); int ch2 = read(); return (ch1 << 8) + (ch2 << 0); } public char readChar() { int ch1 = read(); int ch2 = read(); return (char)((ch1 << 8) + (ch2 << 0)); } public int readInt() { int ch1 = read(); int ch2 = read(); int ch3 = read(); int ch4 = read(); return (ch1 << 24) + (ch2 << 16) + (ch3 << 8) + (ch4 << 0); } public long readLong() { long rc = ((long)buf[pos++] << 56) + ((long)(buf[pos++] & 255) << 48) + ((long)(buf[pos++] & 255) << 40) + ((long)(buf[pos++] & 255) << 32); return rc + ((long)(buf[pos++] & 255) << 24) + ((buf[pos++] & 255) << 16) + ((buf[pos++] & 255) << 8) + ((buf[pos++] & 255) << 0); } public float readFloat() throws IOException { return Float intBitsToFloat(readInt()); } public double readDouble() throws IOException { return Double longBitsToDouble(readLong()); } public String readLine() { int start = pos; while (pos < buf length) { int c = read(); if (c == n ) { break; } if (c == r ) { c = read(); if (c != n && c != -1) { pos--; } break; } } return new String(buf, start, pos); } public String readUTF() throws IOException { int length = readUnsignedShort(); char[] characters = new char[length]; int c; int c2; int c3; int count = 0; int total = pos + length; while (pos < total) { c = (int)buf[pos] & 0xff; if (c > 127) { break; } pos++; characters[count++] = (char)c; } while (pos < total) { c = (int)buf[pos] & 0xff; switch (c >> 4) { case 0 case 1 case 2 case 3 case 4 case 5 case 6 case 7 pos++; characters[count++] = (char)c; break; case 12 case 13 pos += 2; if (pos > total) { throw new UTFDataFormatException( bad string ); } c2 = (int)buf[pos - 1]; if ((c2 & 0xC0) != 0x80) { throw new UTFDataFormatException( bad string ); } characters[count++] = (char)(((c & 0x1F) << 6) | (c2 & 0x3F)); break; case 14 pos += 3; if (pos > total) { throw new UTFDataFormatException( bad string ); } c2 = (int)buf[pos - 2]; c3 = (int)buf[pos - 1]; if (((c2 & 0xC0) != 0x80) || ((c3 & 0xC0) != 0x80)) { throw new UTFDataFormatException( bad string ); } characters[count++] = (char)(((c & 0x0F) << 12) | ((c2 & 0x3F) << 6) | ((c3 & 0x3F) << 0)); break; default throw new UTFDataFormatException( bad string ); } } return new String(characters, 0, count); } }",1.0,
1045,1045,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\FactoryFinder.,FactoryFinder,"public class FactoryFinder { public interface ObjectFactory { public Object create(String path) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException; } protected static class StandaloneObjectFactory implements ObjectFactory { final ConcurrentHashMap<String, Class> classMap = new ConcurrentHashMap<String, Class>(); public Object create(final String path) throws InstantiationException, IllegalAccessException, ClassNotFoundException, IOException { Class clazz = classMap get(path); if (clazz == null) { clazz = loadClass(loadProperties(path)); classMap put(path, clazz); } return clazz newInstance(); } static public Class loadClass(Properties properties) throws ClassNotFoundException, IOException { String className = properties getProperty( class ); if (className == null) { throw new IOException( Expected property is missing class ); } Class clazz = null; ClassLoader loader = Thread currentThread() getContextClassLoader(); if (loader != null) { try { clazz = loader loadClass(className); } catch (ClassNotFoundException e) { } } if (clazz == null) { clazz = FactoryFinder class getClassLoader() loadClass(className); } return clazz; } static public Properties loadProperties(String uri) throws IOException { ClassLoader classLoader = Thread currentThread() getContextClassLoader(); if (classLoader == null) { classLoader = StandaloneObjectFactory class getClassLoader(); } InputStream in = classLoader getResourceAsStream(uri); if (in == null) { in = FactoryFinder class getClassLoader() getResourceAsStream(uri); if (in == null) { throw new IOException( Could not find factory class for resource + uri); } } BufferedInputStream reader = null; try { reader = new BufferedInputStream(in); Properties properties = new Properties(); properties load(reader); return properties; } finally { try { reader close(); } catch (Exception e) { } } } } private static ObjectFactory objectFactory = new StandaloneObjectFactory(); public static ObjectFactory getObjectFactory() { return objectFactory; } public static void setObjectFactory(ObjectFactory objectFactory) { FactoryFinder objectFactory = objectFactory; } private final String path; public FactoryFinder(String path) { this path = path; } public Object newInstance(String key) throws IllegalAccessException, InstantiationException, IOException, ClassNotFoundException { return objectFactory create(path+key); } }",1.0,
1046,1046,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\FactoryFinder.,StandaloneObjectFactory,"protected static class StandaloneObjectFactory implements ObjectFactory { final ConcurrentHashMap<String, Class> classMap = new ConcurrentHashMap<String, Class>(); public Object create(final String path) throws InstantiationException, IllegalAccessException, ClassNotFoundException, IOException { Class clazz = classMap get(path); if (clazz == null) { clazz = loadClass(loadProperties(path)); classMap put(path, clazz); } return clazz newInstance(); } static public Class loadClass(Properties properties) throws ClassNotFoundException, IOException { String className = properties getProperty( class ); if (className == null) { throw new IOException( Expected property is missing class ); } Class clazz = null; ClassLoader loader = Thread currentThread() getContextClassLoader(); if (loader != null) { try { clazz = loader loadClass(className); } catch (ClassNotFoundException e) { } } if (clazz == null) { clazz = FactoryFinder class getClassLoader() loadClass(className); } return clazz; } static public Properties loadProperties(String uri) throws IOException { ClassLoader classLoader = Thread currentThread() getContextClassLoader(); if (classLoader == null) { classLoader = StandaloneObjectFactory class getClassLoader(); } InputStream in = classLoader getResourceAsStream(uri); if (in == null) { in = FactoryFinder class getClassLoader() getResourceAsStream(uri); if (in == null) { throw new IOException( Could not find factory class for resource + uri); } } BufferedInputStream reader = null; try { reader = new BufferedInputStream(in); Properties properties = new Properties(); properties load(reader); return properties; } finally { try { reader close(); } catch (Exception e) { } } } }",1.0,
1048,1048,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\IndentPrinter.,IndentPrinter,"public class IndentPrinter { private int indentLevel; private String indent; private PrintWriter out; public IndentPrinter() { this(new PrintWriter(System out), ); } public IndentPrinter(PrintWriter out) { this(out, ); } public IndentPrinter(PrintWriter out, String indent) { this out = out; this indent = indent; } public void println(Object value) { out print(value toString()); out println(); } public void println(String text) { out print(text); out println(); } public void print(String text) { out print(text); } public void printIndent() { for (int i = 0; i < indentLevel; i++) { out print(indent); } } public void println() { out println(); } public void incrementIndent() { ++indentLevel; } public void decrementIndent() { --indentLevel; } public int getIndentLevel() { return indentLevel; } public void setIndentLevel(int indentLevel) { this indentLevel = indentLevel; } public void flush() { out flush(); } }",1.0,
1049,1049,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\InetAddressUtil.,InetAddressUtil,"public class InetAddressUtil { public static String getLocalHostName() throws UnknownHostException { try { return (InetAddress getLocalHost()) getHostName(); } catch (UnknownHostException uhe) { String host = uhe getMessage(); if (host != null) { int colon = host indexOf( ); if (colon > 0) { return host substring(0, colon); } } throw uhe; } } }",1.0,
1050,1050,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\IntrospectionSupport.,IntrospectionSupport,"public final class IntrospectionSupport { private static final Logger LOG = LoggerFactory getLogger(IntrospectionSupport class); private IntrospectionSupport() { } public static boolean getProperties(Object target, Map props, String optionPrefix) { boolean rc = false; if (target == null) { throw new IllegalArgumentException( target was null ); } if (props == null) { throw new IllegalArgumentException( props was null ); } if (optionPrefix == null) { optionPrefix = ; } Class< > clazz = target getClass(); Method[] methods = clazz getMethods(); for (Method method methods) { String name = method getName(); Class< > type = method getReturnType(); Class< > params[] = method getParameterTypes(); if ((name startsWith( is ) || name startsWith( get )) && params length == 0 && type != null) { try { Object value = method invoke(target); if (value == null) { continue; } String strValue = convertToString(value, type); if (strValue == null) { continue; } if (name startsWith( get )) { name = name substring(3, 4) toLowerCase(Locale ENGLISH) + name substring(4); } else { name = name substring(2, 3) toLowerCase(Locale ENGLISH) + name substring(3); } props put(optionPrefix + name, strValue); rc = true; } catch (Throwable ignore) { } } } return rc; } public static boolean setProperties(Object target, Map<String, > props, String optionPrefix) { boolean rc = false; if (target == null) { throw new IllegalArgumentException( target was null ); } if (props == null) { throw new IllegalArgumentException( props was null ); } for (Iterator<String> iter = props keySet() iterator(); iter hasNext();) { String name = iter next(); if (name startsWith(optionPrefix)) { Object value = props get(name); name = name substring(optionPrefix length()); if (setProperty(target, name, value)) { iter remove(); rc = true; } } } return rc; } public static Map<String, Object> extractProperties(Map props, String optionPrefix) { if (props == null) { throw new IllegalArgumentException( props was null ); } HashMap<String, Object> rc = new HashMap<String, Object>(props size()); for (Iterator< > iter = props keySet() iterator(); iter hasNext();) { String name = (String)iter next(); if (name startsWith(optionPrefix)) { Object value = props get(name); name = name substring(optionPrefix length()); rc put(name, value); iter remove(); } } return rc; } public static boolean setProperties(Object target, Map props) { boolean rc = false; if (target == null) { throw new IllegalArgumentException( target was null ); } if (props == null) { throw new IllegalArgumentException( props was null ); } for (Iterator< > iter = props entrySet() iterator(); iter hasNext();) { Map Entry< , > entry = (Entry< , >)iter next(); if (setProperty(target, (String)entry getKey(), entry getValue())) { iter remove(); rc = true; } } return rc; } public static boolean setProperty(Object target, String name, Object value) { try { Class< > clazz = target getClass(); if (target instanceof SSLServerSocket) { clazz = SSLServerSocket class; } Method setter = findSetterMethod(clazz, name); if (setter == null) { return false; } if (value == null || value getClass() == setter getParameterTypes()[0]) { setter invoke(target, value); } else { setter invoke(target, convert(value, setter getParameterTypes()[0])); } return true; } catch (Throwable ignore) { return false; } } private static Object convert(Object value, Class to) { if (value == null) { if (boolean class isAssignableFrom(to)) { return Boolean FALSE; } return null; } if (to isAssignableFrom(value getClass())) { return to cast(value); } if (to isAssignableFrom(String[] class)) { return StringArrayConverter convertToStringArray(value); } if (value getClass() equals(String class) && to equals(List class)) { Object answer = StringToListOfActiveMQDestinationConverter convertToActiveMQDestination(value); if (answer != null) { return answer; } } TypeConversionSupport Converter converter = TypeConversionSupport lookupConverter(value getClass(), to); if (converter != null) { return converter convert(value); } else { throw new IllegalArgumentException( Cannot convert from + value getClass() + to + to + with value + value); } } public static String convertToString(Object value, Class to) { if (value == null) { return null; } if (value instanceof String) { return (String) value; } if (String[] class isInstance(value)) { String[] array = (String[]) value; return StringArrayConverter convertToString(array); } if (List class isInstance(value)) { String answer = StringToListOfActiveMQDestinationConverter convertFromActiveMQDestination(value); if (answer != null) { return answer; } } TypeConversionSupport Converter converter = TypeConversionSupport lookupConverter(value getClass(), String class); if (converter != null) { return (String) converter convert(value); } else { throw new IllegalArgumentException( Cannot convert from + value getClass() + to + to + with value + value); } } private static Method findSetterMethod(Class clazz, String name) { name = set + Character toUpperCase(name charAt(0)) + name substring(1); Method[] methods = clazz getMethods(); for (Method method methods) { Class< > params[] = method getParameterTypes(); if (method getName() equals(name) && params length == 1 ) { return method; } } return null; } public static String toString(Object target) { return toString(target, Object class, null); } public static String toString(Object target, Class stopClass) { return toString(target, stopClass, null); } public static String toString(Object target, Class stopClass, Map<String, Object> overrideFields) { LinkedHashMap<String, Object> map = new LinkedHashMap<String, Object>(); addFields(target, target getClass(), stopClass, map); if (overrideFields != null) { for(String key overrideFields keySet()) { Object value = overrideFields get(key); map put(key, value); } } StringBuffer buffer = new StringBuffer(simpleName(target getClass())); buffer append( { ); Set<Entry<String, Object>> entrySet = map entrySet(); boolean first = true; for (Map Entry<String,Object> entry entrySet) { Object value = entry getValue(); Object key = entry getKey(); if (first) { first = false; } else { buffer append( , ); } buffer append(key); buffer append( = ); appendToString(buffer, key, value); } buffer append( } ); return buffer toString(); } protected static void appendToString(StringBuffer buffer, Object key, Object value) { if (value instanceof ActiveMQDestination) { ActiveMQDestination destination = (ActiveMQDestination)value; buffer append(destination getQualifiedName()); } else if (key toString() toLowerCase(Locale ENGLISH) contains( password )){ buffer append( ***** ); } else { buffer append(value); } } public static String simpleName(Class clazz) { String name = clazz getName(); int p = name lastIndexOf( ); if (p >= 0) { name = name substring(p + 1); } return name; } private static void addFields(Object target, Class startClass, Class<Object> stopClass, LinkedHashMap<String, Object> map) { if (startClass != stopClass) { addFields(target, startClass getSuperclass(), stopClass, map); } Field[] fields = startClass getDeclaredFields(); for (Field field fields) { if (Modifier isStatic(field getModifiers()) || Modifier isTransient(field getModifiers()) || Modifier isPrivate(field getModifiers())) { continue; } try { field setAccessible(true); Object o = field get(target); if (o != null && o getClass() isArray()) { try { o = Arrays asList((Object[])o); } catch (Throwable e) { } } map put(field getName(), o); } catch (Throwable e) { LOG debug( Error getting field + field + on class + startClass + This exception is ignored , e); } } } }",1.0,
1051,1051,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\IntSequenceGenerator.,IntSequenceGenerator,public class IntSequenceGenerator { private int lastSequenceId; public synchronized int getNextSequenceId() { return ++lastSequenceId; } public synchronized int getLastSequenceId() { return lastSequenceId; } public synchronized void setLastSequenceId(int l) { lastSequenceId = l; } },1.0,
1052,1052,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\IOExceptionSupport.,IOExceptionSupport,"public final class IOExceptionSupport { private IOExceptionSupport() { } public static IOException create(String msg, Throwable cause) { IOException exception = new IOException(msg); exception initCause(cause); return exception; } public static IOException create(String msg, Exception cause) { IOException exception = new IOException(msg); exception initCause(cause); return exception; } public static IOException create(Throwable cause) { IOException exception = new IOException(cause getMessage()); exception initCause(cause); return exception; } public static IOException create(Exception cause) { IOException exception = new IOException(cause getMessage()); exception initCause(cause); return exception; } }",1.0,
1054,1054,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\LongSequenceGenerator.,LongSequenceGenerator,public class LongSequenceGenerator { private long lastSequenceId; public synchronized long getNextSequenceId() { return ++lastSequenceId; } public synchronized long getLastSequenceId() { return lastSequenceId; } public synchronized void setLastSequenceId(long l) { lastSequenceId = l; } },1.0,
1055,1055,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\LRUCache.,LRUCache,"public class LRUCache<K, V> extends LinkedHashMap<K, V> { private static final long serialVersionUID = -342098639681884413L; protected int maxCacheSize = 10000; public LRUCache() { this(0,10000, 0 75f, true); } public LRUCache(int maximumCacheSize) { this(0, maximumCacheSize, 0 75f, true); } public LRUCache(int initialCapacity, int maximumCacheSize, float loadFactor, boolean accessOrder) { super(initialCapacity, loadFactor, accessOrder); this maxCacheSize = maximumCacheSize; } public int getMaxCacheSize() { return maxCacheSize; } public void setMaxCacheSize(int maxCacheSize) { this maxCacheSize = maxCacheSize; } protected boolean removeEldestEntry(Map Entry<K,V> eldest) { if( size() > maxCacheSize ) { onCacheEviction(eldest); return true; } return false; } protected void onCacheEviction(Map Entry<K,V> eldest) { } }",1.0,
1056,1056,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\MapHelper.,MapHelper,"public final class MapHelper { private MapHelper() { } public static String getString(Map map, String key) { Object answer = map get(key); return (answer != null) answer toString() null; } public static int getInt(Map map, String key, int defaultValue) { Object value = map get(key); if (value instanceof Number) { return ((Number)value) intValue(); } else if (value instanceof String) { return Integer parseInt((String)value); } return defaultValue; } }",1.0,
1058,1058,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\ServiceStopper.,ServiceStopper,"public class ServiceStopper { private Throwable firstException; public void stop(Service service) { try { if (service != null) { service stop(); } } catch (Exception e) { onException(service, e); } } public void run(Callback stopClosure) { try { stopClosure execute(); } catch (Throwable e) { onException(stopClosure, e); } } public void stopServices(List services) { for (Iterator iter = services iterator(); iter hasNext();) { Service service = (Service)iter next(); stop(service); } } public void onException(Object owner, Throwable e) { logError(owner, e); if (firstException == null) { firstException = e; } } public void throwFirstException() throws Exception { if (firstException != null) { if (firstException instanceof Exception) { Exception e = (Exception)firstException; throw e; } else if (firstException instanceof RuntimeException) { RuntimeException e = (RuntimeException)firstException; throw e; } else { throw new RuntimeException( Unknown type of exception + firstException, firstException); } } } protected void logError(Object service, Throwable e) { Logger log = LoggerFactory getLogger(service getClass()); log error( Could not stop service + service + Reason + e, e); } }",1.0,
1059,1059,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\ServiceSupport.,ServiceSupport,"public abstract class ServiceSupport implements Service { private static final Logger LOG = LoggerFactory getLogger(ServiceSupport class); private AtomicBoolean started = new AtomicBoolean(false); private AtomicBoolean stopping = new AtomicBoolean(false); private AtomicBoolean stopped = new AtomicBoolean(false); private List<ServiceListener>serviceListeners = new CopyOnWriteArrayList<ServiceListener>(); public static void dispose(Service service) { try { service stop(); } catch (Exception e) { LOG debug( Could not stop service + service + Reason + e, e); } } public void start() throws Exception { if (started compareAndSet(false, true)) { boolean success = false; stopped set(false); try { preStart(); doStart(); success = true; } finally { started set(success); } for(ServiceListener l this serviceListeners) { l started(this); } } } public void stop() throws Exception { if (stopped compareAndSet(false, true)) { stopping set(true); ServiceStopper stopper = new ServiceStopper(); try { doStop(stopper); } catch (Exception e) { stopper onException(this, e); } finally { postStop(stopper); } stopped set(true); started set(false); stopping set(false); for(ServiceListener l this serviceListeners) { l stopped(this); } stopper throwFirstException(); } } public boolean isStarted() { return started get(); } public boolean isStopping() { return stopping get(); } public boolean isStopped() { return stopped get(); } public void addServiceListener(ServiceListener l) { this serviceListeners add(l); } public void removeServiceListener(ServiceListener l) { this serviceListeners remove(l); } protected void postStop(ServiceStopper stopper) throws Exception {} protected abstract void doStop(ServiceStopper stopper) throws Exception; protected void preStart() throws Exception {} protected abstract void doStart() throws Exception; }",1.0,
1060,1060,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\StopWatch.,StopWatch,public final class StopWatch { private long start; private long stop; public StopWatch() { this(true); } public StopWatch(boolean started) { if (started) { restart(); } } public void restart() { start = System currentTimeMillis(); stop = 0; } public long stop() { stop = System currentTimeMillis(); return taken(); } public long taken() { if (start > 0 && stop > 0) { return stop - start; } else if (start > 0) { return System currentTimeMillis() - start; } else { return 0; } } },1.0,
1061,1061,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\StringArrayConverter.,StringArrayConverter,"public class StringArrayConverter { public static String[] convertToStringArray(Object value) { if (value == null) { return null; } String text = value toString(); if (text == null || text length() == 0) { return null; } StringTokenizer stok = new StringTokenizer(text, , ); final List<String> list = new ArrayList<String>(); while (stok hasMoreTokens()) { list add(stok nextToken()); } String[] array = list toArray(new String[list size()]); return array; } public static String convertToString(String[] value) { if (value == null || value length == 0) { return null; } StringBuffer result = new StringBuffer(String valueOf(value[0])); for (int i = 1; i < value length; i++) { result append( , ) append(value[i]); } return result toString(); } }",1.0,
1063,1063,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\ThreadPoolUtils.,ThreadPoolUtils,"public final class ThreadPoolUtils { private static final Logger LOG = LoggerFactory getLogger(ThreadPoolUtils class); public static final long DEFAULT SHUTDOWN AWAIT TERMINATION = 10 * 1000L; public static void shutdown(ExecutorService executorService) { doShutdown(executorService, 0); } public static List<Runnable> shutdownNow(ExecutorService executorService) { List<Runnable> answer = null; if (!executorService isShutdown()) { LOG debug( Forcing shutdown of ExecutorService {} , executorService); answer = executorService shutdownNow(); if (LOG isTraceEnabled()) { LOG trace( Shutdown of ExecutorService {} is shutdown {} and terminated {} , new Object[]{executorService, executorService isShutdown(), executorService isTerminated()}); } } return answer; } public static void shutdownGraceful(ExecutorService executorService) { doShutdown(executorService, DEFAULT SHUTDOWN AWAIT TERMINATION); } public static void shutdownGraceful(ExecutorService executorService, long shutdownAwaitTermination) { doShutdown(executorService, shutdownAwaitTermination); } private static void doShutdown(ExecutorService executorService, long shutdownAwaitTermination) { if (executorService == null) { return; } if (!executorService isShutdown()) { boolean warned = false; StopWatch watch = new StopWatch(); LOG trace( Shutdown of ExecutorService {} with await termination {} millis , executorService, shutdownAwaitTermination); executorService shutdown(); if (shutdownAwaitTermination > 0) { try { if (!awaitTermination(executorService, shutdownAwaitTermination)) { warned = true; LOG warn( Forcing shutdown of ExecutorService {} due first await termination elapsed , executorService); executorService shutdownNow(); if (!awaitTermination(executorService, shutdownAwaitTermination)) { LOG warn( Cannot completely force shutdown of ExecutorService {} due second await termination elapsed , executorService); } } } catch (InterruptedException e) { warned = true; LOG warn( Forcing shutdown of ExecutorService {} due interrupted , executorService); executorService shutdownNow(); } } if (warned) { LOG info( Shutdown of ExecutorService {} is shutdown {} and terminated {} took {} , new Object[]{executorService, executorService isShutdown(), executorService isTerminated(), TimeUtils printDuration(watch taken())}); } else if (LOG isDebugEnabled()) { LOG debug( Shutdown of ExecutorService {} is shutdown {} and terminated {} took {} , new Object[]{executorService, executorService isShutdown(), executorService isTerminated(), TimeUtils printDuration(watch taken())}); } } } public static boolean awaitTermination(ExecutorService executorService, long shutdownAwaitTermination) throws InterruptedException { StopWatch watch = new StopWatch(); long interval = Math min(2000, shutdownAwaitTermination); boolean done = false; while (!done && interval > 0) { if (executorService awaitTermination(interval, TimeUnit MILLISECONDS)) { done = true; } else { LOG info( Waited {} for ExecutorService {} to terminate , TimeUtils printDuration(watch taken()), executorService); interval = Math min(2000, shutdownAwaitTermination - watch taken()); } } return done; } }",1.0,
1065,1065,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\TypeConversionSupport.,TypeConversionSupport,"public final class TypeConversionSupport { private static final Converter IDENTITY CONVERTER = new Converter() { Override public Object convert(Object value) { return value; } }; private static class ConversionKey { final Class< > from; final Class< > to; final int hashCode; public ConversionKey(Class< > from, Class< > to) { this from = from; this to = to; this hashCode = from hashCode() ^ (to hashCode() << 1); } Override public boolean equals(Object o) { ConversionKey x = (ConversionKey)o; return x from == from && x to == to; } Override public int hashCode() { return hashCode; } } public interface Converter { Object convert(Object value); } private static final Map<ConversionKey, Converter> CONVERSION MAP = new HashMap<ConversionKey, Converter>(); static { Converter toStringConverter = new Converter() { Override public Object convert(Object value) { return value toString(); } }; CONVERSION MAP put(new ConversionKey(Boolean class, String class), toStringConverter); CONVERSION MAP put(new ConversionKey(Byte class, String class), toStringConverter); CONVERSION MAP put(new ConversionKey(Short class, String class), toStringConverter); CONVERSION MAP put(new ConversionKey(Integer class, String class), toStringConverter); CONVERSION MAP put(new ConversionKey(Long class, String class), toStringConverter); CONVERSION MAP put(new ConversionKey(Float class, String class), toStringConverter); CONVERSION MAP put(new ConversionKey(Double class, String class), toStringConverter); CONVERSION MAP put(new ConversionKey(UTF8Buffer class, String class), toStringConverter); CONVERSION MAP put(new ConversionKey(String class, Boolean class), new Converter() { Override public Object convert(Object value) { return Boolean valueOf((String)value); } }); CONVERSION MAP put(new ConversionKey(String class, Byte class), new Converter() { Override public Object convert(Object value) { return Byte valueOf((String)value); } }); CONVERSION MAP put(new ConversionKey(String class, Short class), new Converter() { Override public Object convert(Object value) { return Short valueOf((String)value); } }); CONVERSION MAP put(new ConversionKey(String class, Integer class), new Converter() { Override public Object convert(Object value) { return Integer valueOf((String)value); } }); CONVERSION MAP put(new ConversionKey(String class, Long class), new Converter() { Override public Object convert(Object value) { return Long valueOf((String)value); } }); CONVERSION MAP put(new ConversionKey(String class, Float class), new Converter() { Override public Object convert(Object value) { return Float valueOf((String)value); } }); CONVERSION MAP put(new ConversionKey(String class, Double class), new Converter() { Override public Object convert(Object value) { return Double valueOf((String)value); } }); Converter longConverter = new Converter() { Override public Object convert(Object value) { return Long valueOf(((Number)value) longValue()); } }; CONVERSION MAP put(new ConversionKey(Byte class, Long class), longConverter); CONVERSION MAP put(new ConversionKey(Short class, Long class), longConverter); CONVERSION MAP put(new ConversionKey(Integer class, Long class), longConverter); CONVERSION MAP put(new ConversionKey(Date class, Long class), new Converter() { Override public Object convert(Object value) { return Long valueOf(((Date)value) getTime()); } }); Converter intConverter = new Converter() { Override public Object convert(Object value) { return Integer valueOf(((Number)value) intValue()); } }; CONVERSION MAP put(new ConversionKey(Byte class, Integer class), intConverter); CONVERSION MAP put(new ConversionKey(Short class, Integer class), intConverter); CONVERSION MAP put(new ConversionKey(Byte class, Short class), new Converter() { Override public Object convert(Object value) { return Short valueOf(((Number)value) shortValue()); } }); CONVERSION MAP put(new ConversionKey(Float class, Double class), new Converter() { Override public Object convert(Object value) { return new Double(((Number)value) doubleValue()); } }); CONVERSION MAP put(new ConversionKey(String class, ActiveMQDestination class), new Converter() { Override public Object convert(Object value) { return ActiveMQDestination createDestination((String)value, ActiveMQDestination QUEUE TYPE); } }); CONVERSION MAP put(new ConversionKey(String class, URI class), new Converter() { Override public Object convert(Object value) { String text = value toString(); try { return new URI(text); } catch (URISyntaxException e) { throw new RuntimeException(e); } } }); } private TypeConversionSupport() { } public static Object convert(Object value, Class< > to) { if (value == null) { if (boolean class isAssignableFrom(to)) { return Boolean FALSE; } return null; } if (to isInstance(value)) { return to cast(value); } Converter c = lookupConverter(value getClass(), to); if (c != null) { return c convert(value); } else { return null; } } public static Converter lookupConverter(Class< > from, Class< > to) { if (from isPrimitive()) { from = convertPrimitiveTypeToWrapperType(from); } if (to isPrimitive()) { to = convertPrimitiveTypeToWrapperType(to); } if (from equals(to)) { return IDENTITY CONVERTER; } return CONVERSION MAP get(new ConversionKey(from, to)); } private static Class< > convertPrimitiveTypeToWrapperType(Class< > type) { Class< > rc = type; if (type isPrimitive()) { if (type == int class) { rc = Integer class; } else if (type == long class) { rc = Long class; } else if (type == double class) { rc = Double class; } else if (type == float class) { rc = Float class; } else if (type == short class) { rc = Short class; } else if (type == byte class) { rc = Byte class; } else if (type == boolean class) { rc = Boolean class; } } return rc; } }",1.0,
1066,1066,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\TypeConversionSupport.,ConversionKey,"private static class ConversionKey { final Class< > from; final Class< > to; final int hashCode; public ConversionKey(Class< > from, Class< > to) { this from = from; this to = to; this hashCode = from hashCode() ^ (to hashCode() << 1); } Override public boolean equals(Object o) { ConversionKey x = (ConversionKey)o; return x from == from && x to == to; } Override public int hashCode() { return hashCode; } }",1.0,
1067,1067,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\URISupport.,URISupport,"public class URISupport { public static class CompositeData { private String host; private String scheme; private String path; private URI components[]; private Map<String, String> parameters; private String fragment; public URI[] getComponents() { return components; } public String getFragment() { return fragment; } public Map<String, String> getParameters() { return parameters; } public String getScheme() { return scheme; } public String getPath() { return path; } public String getHost() { return host; } public URI toURI() throws URISyntaxException { StringBuffer sb = new StringBuffer(); if (scheme != null) { sb append(scheme); sb append( ); } if (host != null && host length() != 0) { sb append(host); } else { sb append( ( ); for (int i = 0; i < components length; i++) { if (i != 0) { sb append( , ); } sb append(components[i] toString()); } sb append( ) ); } if (path != null) { sb append( / ); sb append(path); } if (!parameters isEmpty()) { sb append( ); sb append(createQueryString(parameters)); } if (fragment != null) { sb append( ); sb append(fragment); } return new URI(sb toString()); } } public static Map<String, String> parseQuery(String uri) throws URISyntaxException { try { uri = uri substring(uri lastIndexOf( ) + 1); Map<String, String> rc = new HashMap<String, String>(); if (uri != null && !uri isEmpty()) { String[] parameters = uri split( & ); for (int i = 0; i < parameters length; i++) { int p = parameters[i] indexOf( = ); if (p >= 0) { String name = URLDecoder decode(parameters[i] substring(0, p), UTF-8 ); String value = URLDecoder decode(parameters[i] substring(p + 1), UTF-8 ); rc put(name, value); } else { rc put(parameters[i], null); } } } return rc; } catch (UnsupportedEncodingException e) { throw (URISyntaxException)new URISyntaxException(e toString(), Invalid encoding ) initCause(e); } } public static Map<String, String> parseParameters(URI uri) throws URISyntaxException { if (!isCompositeURI(uri)) { return uri getQuery() == null emptyMap() parseQuery(stripPrefix(uri getQuery(), )); } else { CompositeData data = URISupport parseComposite(uri); Map<String, String> parameters = new HashMap<String, String>(); parameters putAll(data getParameters()); if (parameters isEmpty()) { parameters = emptyMap(); } return parameters; } } public static URI applyParameters(URI uri, Map<String, String> queryParameters) throws URISyntaxException { return applyParameters(uri, queryParameters, ); } public static URI applyParameters(URI uri, Map<String, String> queryParameters, String optionPrefix) throws URISyntaxException { if (queryParameters != null && !queryParameters isEmpty()) { StringBuffer newQuery = uri getRawQuery() != null new StringBuffer(uri getRawQuery()) new StringBuffer() ; for ( Map Entry<String, String> param queryParameters entrySet()) { if (param getKey() startsWith(optionPrefix)) { if (newQuery length()!=0) { newQuery append( & ); } final String key = param getKey() substring(optionPrefix length()); newQuery append(key) append( = ) append(param getValue()); } } uri = createURIWithQuery(uri, newQuery toString()); } return uri; } SuppressWarnings( unchecked ) private static Map<String, String> emptyMap() { return Collections EMPTY MAP; } public static URI removeQuery(URI uri) throws URISyntaxException { return createURIWithQuery(uri, null); } public static URI createURIWithQuery(URI uri, String query) throws URISyntaxException { String schemeSpecificPart = uri getRawSchemeSpecificPart(); int questionMark = schemeSpecificPart lastIndexOf( ); if (questionMark < schemeSpecificPart lastIndexOf( ) )) { questionMark = -1; } if (questionMark > 0) { schemeSpecificPart = schemeSpecificPart substring(0, questionMark); } if (query != null && query length() > 0) { schemeSpecificPart += + query; } return new URI(uri getScheme(), schemeSpecificPart, uri getFragment()); } public static CompositeData parseComposite(URI uri) throws URISyntaxException { CompositeData rc = new CompositeData(); rc scheme = uri getScheme(); String ssp = stripPrefix(uri getRawSchemeSpecificPart() trim(), parseComposite(uri, rc, ssp); rc fragment = uri getFragment(); return rc; } public static boolean isCompositeURI(URI uri) { String ssp = stripPrefix(uri getRawSchemeSpecificPart() trim(), if (ssp indexOf( ( ) == 0 && checkParenthesis(ssp)) { return true; } return false; } public static int indexOfParenthesisMatch(String str, int first) throws URISyntaxException { int index = -1; if (first < 0 || first > str length()) { throw new IllegalArgumentException( Invalid position for first parenthesis + first); } if (str charAt(first) != ( ) { throw new IllegalArgumentException( character at indicated position is not a parenthesis ); } int depth = 1; char[] array = str toCharArray(); for (index = first + 1; index < array length; ++index) { char current = array[index]; if (current == ( ) { depth++; } else if (current == ) ) { if (--depth == 0) { break; } } } if (depth != 0) { throw new URISyntaxException(str, URI did not contain a matching parenthesis ); } return index; } private static void parseComposite(URI uri, CompositeData rc, String ssp) throws URISyntaxException { String componentString; String params; if (!checkParenthesis(ssp)) { throw new URISyntaxException(uri toString(), Not a matching number of ( and ) parenthesis ); } int p; int initialParen = ssp indexOf( ( ); if (initialParen == 0) { rc host = ssp substring(0, initialParen); p = rc host indexOf( / ); if (p >= 0) { rc path = rc host substring(p); rc host = rc host substring(0, p); } p = indexOfParenthesisMatch(ssp, initialParen); componentString = ssp substring(initialParen + 1, p); params = ssp substring(p + 1) trim(); } else { componentString = ssp; params = ; } String components[] = splitComponents(componentString); rc components = new URI[components length]; for (int i = 0; i < components length; i++) { rc components[i] = new URI(components[i] trim()); } p = params indexOf( ); if (p >= 0) { if (p > 0) { rc path = stripPrefix(params substring(0, p), / ); } rc parameters = parseQuery(params substring(p + 1)); } else { if (params length() > 0) { rc path = stripPrefix(params, / ); } rc parameters = emptyMap(); } } private static String[] splitComponents(String str) { List<String> l = new ArrayList<String>(); int last = 0; int depth = 0; char chars[] = str toCharArray(); for (int i = 0; i < chars length; i++) { switch (chars[i]) { case ( depth++; break; case ) depth--; break; case , if (depth == 0) { String s = str substring(last, i); l add(s); last = i + 1; } break; default } } String s = str substring(last); if (s length() != 0) { l add(s); } String rc[] = new String[l size()]; l toArray(rc); return rc; } public static String stripPrefix(String value, String prefix) { if (value startsWith(prefix)) { return value substring(prefix length()); } return value; } public static URI stripScheme(URI uri) throws URISyntaxException { return new URI(stripPrefix(uri getSchemeSpecificPart() trim(), } public static String createQueryString(Map<String, String> options) throws URISyntaxException { try { if (options size() > 0) { StringBuffer rc = new StringBuffer(); boolean first = true; for (String key options keySet()) { if (first) { first = false; } else { rc append( & ); } String value = (String)options get(key); rc append(URLEncoder encode(key, UTF-8 )); rc append( = ); rc append(URLEncoder encode(value, UTF-8 )); } return rc toString(); } else { return ; } } catch (UnsupportedEncodingException e) { throw (URISyntaxException)new URISyntaxException(e toString(), Invalid encoding ) initCause(e); } } public static URI createRemainingURI(URI originalURI, Map<String, String> params) throws URISyntaxException { String s = createQueryString(params); if (s length() == 0) { s = null; } return createURIWithQuery(originalURI, s); } public static URI changeScheme(URI bindAddr, String scheme) throws URISyntaxException { return new URI(scheme, bindAddr getUserInfo(), bindAddr getHost(), bindAddr getPort(), bindAddr getPath(), bindAddr getQuery(), bindAddr getFragment()); } public static boolean checkParenthesis(String str) { boolean result = true; if (str != null) { int open = 0; int closed = 0; int i = 0; while ((i = str indexOf( ( , i)) >= 0) { i++; open++; } i = 0; while ((i = str indexOf( ) , i)) >= 0) { i++; closed++; } result = open == closed; } return result; } }",1.0,
1068,1068,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\URISupport.,CompositeData,"public static class CompositeData { private String host; private String scheme; private String path; private URI components[]; private Map<String, String> parameters; private String fragment; public URI[] getComponents() { return components; } public String getFragment() { return fragment; } public Map<String, String> getParameters() { return parameters; } public String getScheme() { return scheme; } public String getPath() { return path; } public String getHost() { return host; } public URI toURI() throws URISyntaxException { StringBuffer sb = new StringBuffer(); if (scheme != null) { sb append(scheme); sb append( ); } if (host != null && host length() != 0) { sb append(host); } else { sb append( ( ); for (int i = 0; i < components length; i++) { if (i != 0) { sb append( , ); } sb append(components[i] toString()); } sb append( ) ); } if (path != null) { sb append( / ); sb append(path); } if (!parameters isEmpty()) { sb append( ); sb append(createQueryString(parameters)); } if (fragment != null) { sb append( ); sb append(fragment); } return new URI(sb toString()); } }",1.0,
1069,1069,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\wireformat\ObjectStreamWireFormat.,ObjectStreamWireFormat,"public class ObjectStreamWireFormat implements WireFormat { public ByteSequence marshal(Object command) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream ds = new DataOutputStream(baos); marshal(command, ds); ds close(); return baos toByteSequence(); } public Object unmarshal(ByteSequence packet) throws IOException { return unmarshal(new DataInputStream(new ByteArrayInputStream(packet))); } public void marshal(Object command, DataOutput ds) throws IOException { ObjectOutputStream out = new ObjectOutputStream((OutputStream)ds); out writeObject(command); out flush(); out reset(); } public Object unmarshal(DataInput ds) throws IOException { try { ClassLoadingAwareObjectInputStream in = new ClassLoadingAwareObjectInputStream((InputStream)ds); Object command; command = in readObject(); in close(); return command; } catch (ClassNotFoundException e) { throw (IOException)new IOException( unmarshal failed + e) initCause(e); } } public void setVersion(int version) { } public int getVersion() { return 0; } }",1.0,
1070,1070,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\ActiveMQSslConnectionFactoryTest.,ActiveMQSslConnectionFactoryTest,"public class ActiveMQSslConnectionFactoryTest { final String TRUST STORE FILE NAME = client keystore ; final String TRUST STORE DIRECTORY NAME = src/test/resources/ssl/ ; final String TRUST STORE RESOURCE PREFIX = ssl/ ; final String TRUST STORE PASSWORD = password ; final String SSL TRANSPORT = ssl final String FAILOVER SSL TRANSPORT = failover ( + SSL TRANSPORT + ) maxReconnectAttempts=1 ; Test(expected = ConnectException class) public void validTrustStoreFileTest() throws Throwable { executeTest(SSL TRANSPORT, TRUST STORE DIRECTORY NAME + TRUST STORE FILE NAME); } Test(expected = ConnectException class) public void validTrustStoreURLTest() throws Throwable { executeTest(SSL TRANSPORT, new File(TRUST STORE DIRECTORY NAME + TRUST STORE FILE NAME) toURI() toString()); } Test(expected = ConnectException class) public void validTrustStoreResourceTest() throws Throwable { executeTest(SSL TRANSPORT, TRUST STORE RESOURCE PREFIX + TRUST STORE FILE NAME); } Test(expected = IOException class) public void invalidTrustStoreFileTest() throws Throwable { executeTest(SSL TRANSPORT, TRUST STORE DIRECTORY NAME + TRUST STORE FILE NAME + dummy ); } Test(expected = IOException class) public void invalidTrustStoreURLTest() throws Throwable { executeTest(SSL TRANSPORT, new File(TRUST STORE DIRECTORY NAME + TRUST STORE FILE NAME + dummy ) toURI() toString()); } Test(expected = IOException class) public void invalidTrustStoreResourceTest() throws Throwable { executeTest(SSL TRANSPORT, TRUST STORE RESOURCE PREFIX + TRUST STORE FILE NAME + dummy ); } Test(expected = ConnectException class) public void validTrustStoreFileFailoverTest() throws Throwable { executeTest(FAILOVER SSL TRANSPORT, TRUST STORE DIRECTORY NAME + TRUST STORE FILE NAME); } Test(expected = ConnectException class) public void validTrustStoreURLFailoverTest() throws Throwable { executeTest(FAILOVER SSL TRANSPORT, new File(TRUST STORE DIRECTORY NAME + TRUST STORE FILE NAME) toURI() toString()); } Test(expected = ConnectException class) public void validTrustStoreResourceFailoverTest() throws Throwable { executeTest(FAILOVER SSL TRANSPORT, TRUST STORE RESOURCE PREFIX + TRUST STORE FILE NAME); } Test(expected = IOException class) public void invalidTrustStoreFileFailoverTest() throws Throwable { executeTest(FAILOVER SSL TRANSPORT, TRUST STORE DIRECTORY NAME + TRUST STORE FILE NAME + dummy ); } Test(expected = IOException class) public void invalidTrustStoreURLFailoverTest() throws Throwable { executeTest(FAILOVER SSL TRANSPORT, new File(TRUST STORE DIRECTORY NAME + TRUST STORE FILE NAME + dummy ) toURI() toString()); } Test(expected = IOException class) public void invalidTrustStoreResourceFailoverTest() throws Throwable { executeTest(FAILOVER SSL TRANSPORT, TRUST STORE RESOURCE PREFIX + TRUST STORE FILE NAME + dummy ); } protected void executeTest(String transport, String name) throws Throwable { try { ActiveMQSslConnectionFactory activeMQSslConnectionFactory = new ActiveMQSslConnectionFactory(transport); activeMQSslConnectionFactory setTrustStore(name); activeMQSslConnectionFactory setTrustStorePassword(TRUST STORE PASSWORD); javax jms Connection connection = activeMQSslConnectionFactory createConnection(); connection start(); connection stop(); } catch (javax jms JMSException e) { e getCause() printStackTrace(); throw e getCause(); } } }",1.0,
1073,1073,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\thread\PooledTaskRunnerTest.,IgnoreUncaughtExceptionThreadFactory,"class IgnoreUncaughtExceptionThreadFactory implements ThreadFactory, Thread UncaughtExceptionHandler { ThreadFactory threadFactory = Executors defaultThreadFactory(); public Thread newThread(Runnable r) { Thread thread = threadFactory newThread(r); thread setUncaughtExceptionHandler(this); return thread; } public void uncaughtException(Thread t, Throwable e) { } }",1.0,
1076,1076,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\BitArrayBinTest.,BitArrayBinTest,"public class BitArrayBinTest extends TestCase { public void testSetAroundWindow() throws Exception { doTestSetAroundWindow(500, 2000); doTestSetAroundWindow(512, 2000); doTestSetAroundWindow(128, 512); } public void testSetHiLo() throws Exception { BitArrayBin toTest = new BitArrayBin(50); toTest setBit(0, true); toTest setBit(100, true); toTest setBit(150, true); assertTrue( set , toTest getBit(0)); toTest setBit(0, true); assertTrue( set , toTest getBit(0)); } private void doTestSetAroundWindow(int window, int dataSize) throws Exception { BitArrayBin toTest = new BitArrayBin(window); for (int i=0; i <= dataSize; i++) { assertTrue( not already set , !toTest setBit(i, Boolean TRUE)); assertEquals( current is max , i, toTest getLastSetIndex()); } assertEquals( last is max , dataSize, toTest getLastSetIndex()); int windowOfValidData = roundWindow(dataSize, window); int i=dataSize; for (; i >= dataSize -windowOfValidData; i--) { assertTrue( was already set, id= + i, toTest setBit(i, Boolean TRUE)); } assertEquals( last is still max , dataSize, toTest getLastSetIndex()); for (; i >= 0; i--) { assertTrue( was not already set, id= + i, !toTest setBit(i, Boolean TRUE)); } for (int j= dataSize +1; j<=(2*dataSize); j++) { assertTrue( not already set id= + j, !toTest setBit(j, Boolean TRUE)); } assertEquals( last still max*2 , 2*dataSize, toTest getLastSetIndex()); } public void testSetUnsetAroundWindow() throws Exception { doTestSetUnSetAroundWindow(500, 2000); doTestSetUnSetAroundWindow(512, 2000); doTestSetUnSetAroundWindow(128, 512); } private void doTestSetUnSetAroundWindow(int dataSize, int window) throws Exception { BitArrayBin toTest = new BitArrayBin(window); for (int i=0; i <=dataSize; i++) { assertTrue( not already set , !toTest setBit(i, Boolean TRUE)); } int windowOfValidData = roundWindow(dataSize, window); for (int i=dataSize; i >= 0 && i >=dataSize -windowOfValidData; i--) { assertTrue( was already set, id= + i, toTest setBit(i, Boolean FALSE)); } for (int i=0; i <=dataSize; i++) { assertTrue( not already set, id + i, !toTest setBit(i, Boolean TRUE)); } for (int j= 2*dataSize; j< 4*dataSize; j++) { assertTrue( not already set id= + j, !toTest setBit(j, Boolean TRUE)); } } public void testSetAroundLongSizeMultiplier() throws Exception { int window = 512; int dataSize = 1000; for (int muliplier=1; muliplier <8; muliplier++) { for (int value=0; value <dataSize; value++) { BitArrayBin toTest = new BitArrayBin(window); int instance = value +muliplier*BitArray LONG SIZE; assertTrue( not already set id= + instance, !toTest setBit(instance, Boolean TRUE)); assertTrue( not already set id= + value, !toTest setBit(value, Boolean TRUE)); assertEquals( max set correct , instance, toTest getLastSetIndex()); } } } public void testLargeGapInData(int window) throws Exception { doTestLargeGapInData(128); doTestLargeGapInData(500); } public void doTestLargeGapInData(int window) throws Exception { BitArrayBin toTest = new BitArrayBin(window); int instance = BitArray LONG SIZE; assertTrue( not already set id= + instance, !toTest setBit(instance, Boolean TRUE)); instance = 12 *BitArray LONG SIZE; assertTrue( not already set id= + instance, !toTest setBit(instance, Boolean TRUE)); instance = 9 *BitArray LONG SIZE; assertTrue( not already set id= + instance, !toTest setBit(instance, Boolean TRUE)); } public void testLastSeq() throws Exception { BitArrayBin toTest = new BitArrayBin(512); assertEquals( last not set , -1, toTest getLastSetIndex()); toTest setBit(1, Boolean TRUE); assertEquals( last correct , 1, toTest getLastSetIndex()); toTest setBit(64, Boolean TRUE); assertEquals( last correct , 64, toTest getLastSetIndex()); toTest setBit(68, Boolean TRUE); assertEquals( last correct , 68, toTest getLastSetIndex()); } private int roundWindow(int dataSetEnd, int windowSize) { int validData = dataSetEnd - windowSize; int validDataBin = validData / BitArray LONG SIZE; validDataBin += (windowSize % BitArray LONG SIZE > 0 1 0); int startOfValid = validDataBin * BitArray LONG SIZE; return dataSetEnd - startOfValid; } }",1.0,
1077,1077,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\DataByteArrayInputStreamTest.,DataByteArrayInputStreamTest,"public class DataByteArrayInputStreamTest extends TestCase { public void testNonAscii() throws Exception { doMarshallUnMarshallValidation( mei u00DFen ); String accumulator = new String(); int test = 0; while(Character isDefined(test)) { String toTest = String valueOf((char)test); accumulator += toTest; doMarshallUnMarshallValidation(toTest); test++; } int massiveThreeByteCharValue = 0x0FFF; String toTest = String valueOf((char)massiveThreeByteCharValue); accumulator += toTest; doMarshallUnMarshallValidation(String valueOf((char)massiveThreeByteCharValue)); doMarshallUnMarshallValidation(accumulator); char t = u0800 ; final char max = uffff ; accumulator = String valueOf(t); while (t < max) { String val = String valueOf(t); accumulator += val; doMarshallUnMarshallValidation(val); t++; } while (accumulator length() > 20000) { accumulator = accumulator substring(20000); } doMarshallUnMarshallValidation(accumulator); } void doMarshallUnMarshallValidation(String value) throws Exception { DataByteArrayOutputStream out = new DataByteArrayOutputStream(); out writeBoolean(true); out writeUTF(value); out close(); DataByteArrayInputStream in = new DataByteArrayInputStream(out getData()); in readBoolean(); String readBack = in readUTF(); assertEquals(value, readBack); } }",1.0,
1078,1078,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\DataByteArrayOutputStreamTest.,DataByteArrayOutputStreamTest,"public class DataByteArrayOutputStreamTest extends TestCase { public void testResize() throws IOException { int initSize = 64; DataByteArrayOutputStream out = new DataByteArrayOutputStream(); fillOut(out, initSize); out writeBoolean(true); fillOut(out, initSize); out writeByte(1); fillOut(out, initSize); out writeBytes( test ); fillOut(out, initSize); out writeChar( C ); fillOut(out, initSize); out writeChars( test ); fillOut(out, initSize); out writeDouble(3 1416); fillOut(out, initSize); out writeFloat((float)3 1416); fillOut(out, initSize); out writeInt(12345); fillOut(out, initSize); out writeLong(12345); fillOut(out, initSize); out writeShort(1234); fillOut(out, initSize); out writeUTF( test ); fillOut(out, initSize); out write(1234); fillOut(out, initSize); out write(new byte[10], 5, 5); fillOut(out, initSize); out write(new byte[10]); } public void fillOut(DataByteArrayOutputStream out, int size) throws IOException { out restart(size); out write(new byte[size]); } }",1.0,
1079,1079,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\IntrospectionSupportTest.,IntrospectionSupportTest,"public class IntrospectionSupportTest extends TestCase { class DummyClass { private boolean trace; DummyClass(boolean trace) { this trace = trace; } public boolean isTrace() { return trace; } public void setTrace(boolean trace) { this trace = trace; } } public void testSetPropertyPrimitiveWithWrapperValue() { Boolean value = Boolean valueOf(true); DummyClass dummyClass = new DummyClass(false); IntrospectionSupport setProperty(dummyClass, trace , value); assertTrue(dummyClass isTrace()); } }",1.0,
1080,1080,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\IntrospectionSupportTest.,DummyClass,class DummyClass { private boolean trace; DummyClass(boolean trace) { this trace = trace; } public boolean isTrace() { return trace; } public void setTrace(boolean trace) { this trace = trace; } },1.0,
1081,1081,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\LRUCacheTest.,LRUCacheTest,"public class LRUCacheTest { protected static final Logger LOG = LoggerFactory getLogger(LRUCacheTest class); Test public void testResize() throws Exception { LRUCache<Long, Long> underTest = new LRUCache<Long, Long>(1000); Long count = new Long(0); long max = 0; for (; count < 27276827; count++) { long start = System currentTimeMillis(); if (!underTest containsKey(count)) { underTest put(count, count); } long duration = System currentTimeMillis() - start; if (duration > max) { LOG info( count + count + , new max= + duration); max = duration; } if (count % 100000000 == 0) { LOG info( count + count + , max= + max); } } assertEquals( size is still in order , 1000, underTest size()); } }",1.0,
1082,1082,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\MarshallingSupportTest.,MarshallingSupportTest,"public class MarshallingSupportTest extends TestCase { protected void setUp() throws Exception { super setUp(); } protected void tearDown() throws Exception { super tearDown(); } public void testPropertiesToString() throws Exception { Properties props = new Properties(); for (int i = 0; i < 10; i++) { String key = key + i; String value = value + i; props put(key, value); } String str = MarshallingSupport propertiesToString(props); Properties props2 = MarshallingSupport stringToProperties(str); assertEquals(props, props2); } }",1.0,
1084,1084,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\StringArrayConverterTest.,StringArrayConverterTest,"public class StringArrayConverterTest extends TestCase { public void testConvertToStringArray() throws Exception { assertEquals(null, StringArrayConverter convertToStringArray(null)); assertEquals(null, StringArrayConverter convertToStringArray( )); String[] array = StringArrayConverter convertToStringArray( foo ); assertEquals(1, array length); assertEquals( foo , array[0]); array = StringArrayConverter convertToStringArray( foo,bar ); assertEquals(2, array length); assertEquals( foo , array[0]); assertEquals( bar , array[1]); array = StringArrayConverter convertToStringArray( foo,bar,baz ); assertEquals(3, array length); assertEquals( foo , array[0]); assertEquals( bar , array[1]); assertEquals( baz , array[2]); } public void testConvertToString() throws Exception { assertEquals(null, StringArrayConverter convertToString(null)); assertEquals(null, StringArrayConverter convertToString(new String[]{})); assertEquals( , StringArrayConverter convertToString(new String[]{ })); assertEquals( foo , StringArrayConverter convertToString(new String[]{ foo })); assertEquals( foo,bar , StringArrayConverter convertToString(new String[]{ foo , bar })); assertEquals( foo,bar,baz , StringArrayConverter convertToString(new String[]{ foo , bar , baz })); } }",1.0,
1085,1085,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\URISupportTest.,URISupportTest,"public class URISupportTest extends TestCase { public void testEmptyCompositePath() throws Exception { CompositeData data = URISupport parseComposite(new URI( broker ()/localhost persistent=false )); assertEquals(0, data getComponents() length); } public void testCompositePath() throws Exception { CompositeData data = URISupport parseComposite(new URI( test (path)/path )); assertEquals( path , data getPath()); data = URISupport parseComposite(new URI( test path )); assertNull(data getPath()); } public void testSimpleComposite() throws Exception { CompositeData data = URISupport parseComposite(new URI( test part1 )); assertEquals(1, data getComponents() length); } public void testComposite() throws Exception { URI uri = new URI( test (part1 CompositeData data = URISupport parseComposite(uri); assertEquals(2, data getComponents() length); } public void testEmptyCompositeWithParenthesisInParam() throws Exception { URI uri = new URI( failover CompositeData data = URISupport parseComposite(uri); assertEquals(0, data getComponents() length); assertEquals(1, data getParameters() size()); assertTrue(data getParameters() containsKey( updateURIsURL )); assertEquals( file /C /Dir(1)/a csv , data getParameters() get( updateURIsURL )); } public void testCompositeWithParenthesisInParam() throws Exception { URI uri = new URI( failover CompositeData data = URISupport parseComposite(uri); assertEquals(1, data getComponents() length); assertEquals(1, data getParameters() size()); assertTrue(data getParameters() containsKey( updateURIsURL )); assertEquals( file /C /Dir(1)/a csv , data getParameters() get( updateURIsURL )); } public void testCompositeWithComponentParam() throws Exception { CompositeData data = URISupport parseComposite(new URI( test (part1 assertEquals(1, data getComponents() length); assertEquals(1, data getParameters() size()); Map<String, String> part1Params = URISupport parseParameters(data getComponents()[0]); assertEquals(1, part1Params size()); assertTrue(part1Params containsKey( part1 )); } public void testParsingURI() throws Exception { URI source = new URI( tcp Map<String, String> map = URISupport parseParameters(source); assertEquals( Size + map, 2, map size()); assertMapKey(map, cheese , Edam ); assertMapKey(map, x , 123 ); URI result = URISupport removeQuery(source); assertEquals( result , new URI( tcp } protected void assertMapKey(Map<String, String> map, String key, Object expected) { assertEquals( Map key + key, map get(key), expected); } public void testParsingCompositeURI() throws URISyntaxException { CompositeData data = URISupport parseComposite(new URI( broker assertEquals( one component , 1, data getComponents() length); assertEquals( Size + data getParameters(), 1, data getParameters() size()); } public void testCheckParenthesis() throws Exception { String str = fred (((ddd)) ; assertFalse(URISupport checkParenthesis(str)); str += ) ; assertTrue(URISupport checkParenthesis(str)); } public void testCreateWithQuery() throws Exception { URI source = new URI( vm URI dest = URISupport createURIWithQuery(source, network=true&one=two ); assertEquals( correct param count , 2, URISupport parseParameters(dest) size()); assertEquals( same uri, host , source getHost(), dest getHost()); assertEquals( same uri, scheme , source getScheme(), dest getScheme()); assertFalse( same uri, ssp , dest getQuery() equals(source getQuery())); } public void testParsingParams() throws Exception { URI uri = new URI( static (http Map<String,String>parameters = URISupport parseParameters(uri); verifyParams(parameters); uri = new URI( static parameters = URISupport parseParameters(uri); verifyParams(parameters); uri = new URI( http parameters = URISupport parseParameters(uri); } public void testCompositeCreateURIWithQuery() throws Exception { String queryString = query=value ; URI originalURI = new URI( outerscheme (innerscheme innerssp) ); URI querylessURI = originalURI; assertEquals(querylessURI, URISupport createURIWithQuery(originalURI, null)); assertEquals(querylessURI, URISupport createURIWithQuery(originalURI, )); assertEquals(new URI(querylessURI + + queryString), URISupport createURIWithQuery(originalURI, queryString)); originalURI = new URI( outerscheme (innerscheme innerssp) outerquery=0 ); assertEquals(querylessURI, URISupport createURIWithQuery(originalURI, null)); assertEquals(querylessURI, URISupport createURIWithQuery(originalURI, )); assertEquals(new URI(querylessURI + + queryString), URISupport createURIWithQuery(originalURI, queryString)); originalURI = new URI( outerscheme (innerscheme innerssp innerquery=0) ); querylessURI = originalURI; assertEquals(querylessURI, URISupport createURIWithQuery(originalURI, null)); assertEquals(querylessURI, URISupport createURIWithQuery(originalURI, )); assertEquals(new URI(querylessURI + + queryString), URISupport createURIWithQuery(originalURI, queryString)); originalURI = new URI( outerscheme (innerscheme innerssp innerquery=0) outerquery=0 ); assertEquals(querylessURI, URISupport createURIWithQuery(originalURI, null)); assertEquals(querylessURI, URISupport createURIWithQuery(originalURI, )); assertEquals(new URI(querylessURI + + queryString), URISupport createURIWithQuery(originalURI, queryString)); } public void testApplyParameters() throws Exception { URI uri = new URI( http Map<String,String> parameters = new HashMap<String, String>(); parameters put( t proxyHost , localhost ); parameters put( t proxyPort , 80 ); uri = URISupport applyParameters(uri, parameters); Map<String,String> appliedParameters = URISupport parseParameters(uri); assertEquals( all params applied with no prefix , 2, appliedParameters size()); uri = URISupport createURIWithQuery(uri, null); uri = URISupport applyParameters(uri, parameters, joe ); appliedParameters = URISupport parseParameters(uri); assertTrue( no params applied as none match joe , appliedParameters isEmpty()); uri = URISupport applyParameters(uri, parameters, t ); verifyParams(URISupport parseParameters(uri)); } private void verifyParams(Map<String,String> parameters) { assertEquals(parameters get( proxyHost ), localhost ); assertEquals(parameters get( proxyPort ), 80 ); } public void testIsCompositeURIWithQueryNoSlashes() throws URISyntaxException { URI[] compositeURIs = new URI[] { new URI( test (part1 for (URI uri compositeURIs) { assertTrue(uri + must be detected as composite URI , URISupport isCompositeURI(uri)); } } public void testIsCompositeURIWithQueryAndSlashes() throws URISyntaxException { URI[] compositeURIs = new URI[] { new URI( test for (URI uri compositeURIs) { assertTrue(uri + must be detected as composite URI , URISupport isCompositeURI(uri)); } } public void testIsCompositeURINoQueryNoSlashes() throws URISyntaxException { URI[] compositeURIs = new URI[] { new URI( test (part1 for (URI uri compositeURIs) { assertTrue(uri + must be detected as composite URI , URISupport isCompositeURI(uri)); } } public void testIsCompositeURINoQueryNoSlashesNoParentheses() throws URISyntaxException { assertFalse( test part1 + must be detected as non-composite URI , URISupport isCompositeURI(new URI( test part1 ))); } public void testIsCompositeURINoQueryWithSlashes() throws URISyntaxException { URI[] compositeURIs = new URI[] { new URI( failover new URI( failover for (URI uri compositeURIs) { assertTrue(uri + must be detected as composite URI , URISupport isCompositeURI(uri)); } } }",1.0,
1086,1086,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\ActiveMQLauncher.,ActiveMQLauncher,"public class ActiveMQLauncher implements Daemon { private List<String> args; public ActiveMQLauncher() { } public void destroy() { } public void init(DaemonContext arg0) throws Exception { args = Arrays asList(arg0 getArguments()); } public void start() throws Exception { CommandContext context = new CommandContext(); context setFormatter(new CommandShellOutputFormatter(System out)); Command command = new StartCommand(); command setCommandContext(context); command execute(args); } public void stop() throws Exception { CommandContext context = new CommandContext(); context setFormatter(new CommandShellOutputFormatter(System out)); Command command = new ShutdownCommand(); command setCommandContext(context); List<String> tokens = new ArrayList<String>(Arrays asList(new String[] { --jmxlocal , --all , })); command execute(tokens); } }",1.0,
1087,1087,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\CommandContext.,CommandContext,public final class CommandContext { private OutputFormatter formatter; public OutputStream getOutputStream() { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } return formatter getOutputStream(); } public void printMBean(ObjectInstance mbean) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printMBean(mbean); } public void printMBean(ObjectName mbean) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printMBean(mbean); } public void printMBean(AttributeList mbean) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printMBean(mbean); } SuppressWarnings( rawtypes ) public void printMBean(Map mbean) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printMBean(mbean); } SuppressWarnings( rawtypes ) public void printMBean(Collection mbean) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printMBean(mbean); } SuppressWarnings( rawtypes ) public void printMessage(Map msg) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printMessage(msg); } public void printMessage(Message msg) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printMessage(msg); } SuppressWarnings( rawtypes ) public void printMessage(Collection msg) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printMessage(msg); } public void printHelp(String[] helpMsgs) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printHelp(helpMsgs); } public void printInfo(String info) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printInfo(info); } public void printException(Exception e) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printException(e); } public void printVersion(String version) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter printVersion(version); } SuppressWarnings( rawtypes ) public void print(Map map) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter print(map); } public void print(String[] strings) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter print(strings); } SuppressWarnings( rawtypes ) public void print(Collection collection) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter print(collection); } public void print(String string) { if (formatter == null) { throw new IllegalStateException( No OutputFormatter specified Use GlobalWriter instantiate(OutputFormatter) ); } formatter print(string); } public OutputFormatter getFormatter() { return formatter; } public void setFormatter(OutputFormatter formatter) { this formatter = formatter; } },1.0,
1088,1088,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\ConsoleCommandHandler.,ConsoleCommandHandler,"public class ConsoleCommandHandler implements CommandHandler { private ShellCommand command = new ShellCommand(true); public void processCommand(TextMessage request, TextMessage response) throws Exception { ByteArrayOutputStream out = new ByteArrayOutputStream(); CommandContext ctx = new CommandContext(); ctx setFormatter(new CommandShellOutputFormatter(out)); String requestText = request getText(); List<String> tokens = tokenize(requestText); command setCommandContext(ctx); command execute(tokens); out flush(); byte[] bytes = out toByteArray(); String answer = new String(bytes); response setText(answer); } protected List<String> tokenize(String text) { List<String> answer = new ArrayList<String>(); StringTokenizer iter = new StringTokenizer(text); while (iter hasMoreTokens()) { answer add(iter nextToken()); } return answer; } }",1.0,
1090,1090,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\AbstractAmqCommand.,AbstractAmqCommand,"public abstract class AbstractAmqCommand extends AbstractCommand { private URI brokerUrl; private ConnectionFactory factory; private String factoryClassString; private String username; private String password; private PasswordFactory passwordFactory; private final List<Connection> connections = new ArrayList<Connection>(); private String passwordFactoryClassString; protected Connection createConnection() throws JMSException { return createConnection(getUsername(), getPassword()); } protected Connection createConnection(String username, String password) throws JMSException { if (getBrokerUrl() == null) { context printException(new IllegalStateException( You must specify a broker URL to connect to using the --amqurl option )); return null; } ConnectionFactory factory = getConnectionFactory(); Connection conn; if (null == username && null == password) conn = factory createConnection(); else conn = factory createConnection(username, password); connections add(conn); conn start(); return conn; } protected void closeAllConnections() { for (Iterator<Connection> i = connections iterator(); i hasNext();) { try { i next() close(); } catch (Exception e) { } } connections clear(); } protected void handleOption(String token, List tokens) throws Exception { if (token equals( --amqurl )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Broker URL not specified )); tokens clear(); return; } if (getBrokerUrl() != null) { context printException(new IllegalArgumentException( Multiple broker URL cannot be specified )); tokens clear(); return; } String strBrokerUrl = (String)tokens remove(0); try { setBrokerUrl(new URI(strBrokerUrl)); } catch (URISyntaxException e) { context printException(e); tokens clear(); return; } } else if (token equals( --factory )) { factoryClassString = (String) tokens remove(0); } else if (token equals( --passwordFactory )) { passwordFactoryClassString = (String) tokens remove(0); } else if (token equals( --password )) { password = (String) tokens remove(0); } else if (token equals( --user )) { username = (String) tokens remove(0); } else { super handleOption(token, tokens); } } protected void setBrokerUrl(URI brokerUrl) { this brokerUrl = brokerUrl; } protected void setBrokerUrl(String address) throws URISyntaxException { this brokerUrl = new URI(address); } protected URI getBrokerUrl() { return brokerUrl; } SuppressWarnings( unchecked ) public ConnectionFactory getConnectionFactory() { if (factory == null && factoryClassString != null) { try { Class klass = Class forName(factoryClassString); if (getUsername() != null || getPassword() != null) { factory = (ConnectionFactory) klass getConstructor( String class, String class, URI class) newInstance( getUsername(), getPassword(), getBrokerUrl()); } else { factory = (ConnectionFactory) klass getConstructor( URI class) newInstance(getBrokerUrl()); } } catch (Exception e) { throw new RuntimeException(e); } } if (factory == null) { if (getUsername() != null || getPassword() != null) { factory = new ActiveMQConnectionFactory(getUsername(), getPassword(), getBrokerUrl()); } else { factory = new ActiveMQConnectionFactory(getBrokerUrl()); } } return factory; } public String getUsername() { return username; } public void setFactory(ConnectionFactory factory) { this factory = factory; } public void setUsername(String username) { this username = username; } public String getPassword() { if (null == password) return null; return getPasswordFactory() getPassword(password); } public void setPassword(String password) { this password = password; } SuppressWarnings( unchecked ) public PasswordFactory getPasswordFactory() { if (passwordFactory == null && passwordFactoryClassString != null) { try { Class klass = Class forName(passwordFactoryClassString); passwordFactory = (PasswordFactory) klass newInstance(); } catch (Exception e) { throw new RuntimeException(e); } } if (passwordFactory == null) { passwordFactory = DefaultPasswordFactory factory; } return passwordFactory; } public void setPasswordFactory(PasswordFactory passwordFactory) { this passwordFactory = passwordFactory; } }",1.0,
1094,1094,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\BrowseCommand.,BrowseCommand,"public class BrowseCommand extends AbstractJmxCommand { public static final String QUEUE PREFIX = queue ; public static final String TOPIC PREFIX = topic ; public static final String VIEW GROUP HEADER = header ; public static final String VIEW GROUP CUSTOM = custom ; public static final String VIEW GROUP BODY = body ; protected String[] helpFile = new String[] { Task Usage Main browse [browse-options] <destinations> , Description Display selected destination s messages , , Browse Options , --msgsel <msgsel1,msglsel2> Add to the search list messages matched by the query similar to , the messages selector format , -V<header|custom|body> Predefined view that allows you to view the message header, custom , message header, or the message body , --view <attr1>,<attr2>, Select the specific attribute of the message to view , --jmxurl <url> Set the JMX URL to connect to , --pid <pid> Set the pid to connect to (only on Sun JVM) , --jmxuser <user> Set the JMX user used for authenticating , --jmxpassword <password> Set the JMX password used for authenticating , --jmxlocal Use the local JMX server instead of a remote one , --version Display the version information , -h,- ,--help Display the browse broker help information , , Examples , Main browse FOO BAR , - Print the message header, custom message header, and message body of all messages in the , queue FOO BAR , , Main browse -Vheader,body queue FOO BAR , - Print only the message header and message body of all messages in the queue FOO BAR , , Main browse -Vheader --view custom MyField queue FOO BAR , - Print the message header and the custom field MyField of all messages in the queue FOO BAR , , Main browse --msgsel JMSMessageID= * 10 ,JMSPriority>5 FOO BAR , - Print all the message fields that has a JMSMessageID in the header field that matches the , wildcard * 10, and has a JMSPriority field > 5 in the queue FOO BAR , SLQ92 syntax is also supported , * To use wildcard queries, the field must be a string and the query enclosed in , Use double quotes around the entire message selector string , }; private final List<String> queryAddObjects = new ArrayList<String>(10); private final List<String> querySubObjects = new ArrayList<String>(10); private final Set<String> groupViews = new HashSet<String>(10); private final Set queryViews = new HashSet(10); Override public String getName() { return browse ; } Override public String getOneLineDescription() { return Used to browse a destination ; } protected void runTask(List<String> tokens) throws Exception { try { if (tokens isEmpty()) { tokens add( * ); } for (Iterator<String> i = tokens iterator(); i hasNext();) { List queueList = JmxMBeansUtil queryMBeans(createJmxConnection(), Type=Queue,Destination= + i next() + ,* ); for (Iterator j = queueList iterator(); j hasNext();) { List messages = JmxMBeansUtil createMessageQueryFilter(createJmxConnection(), ((ObjectInstance)j next()) getObjectName()) query(queryAddObjects); context printMessage(JmxMBeansUtil filterMessagesView(messages, groupViews, queryViews)); } } } catch (Exception e) { context printException(new RuntimeException( Failed to execute browse task Reason + e)); throw new Exception(e); } } protected void handleOption(String token, List<String> tokens) throws Exception { if (token startsWith( --msgsel )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Message selector not specified )); return; } StringTokenizer queryTokens = new StringTokenizer((String)tokens remove(0), COMMAND OPTION DELIMETER); while (queryTokens hasMoreTokens()) { queryAddObjects add(queryTokens nextToken()); } } else if (token startsWith( --xmsgsel )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Message selector not specified )); return; } StringTokenizer queryTokens = new StringTokenizer((String)tokens remove(0), COMMAND OPTION DELIMETER); while (queryTokens hasMoreTokens()) { querySubObjects add(queryTokens nextToken()); } } else if (token startsWith( --view )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Attributes to view not specified )); return; } StringTokenizer viewTokens = new StringTokenizer((String)tokens remove(0), COMMAND OPTION DELIMETER); while (viewTokens hasMoreTokens()) { String viewToken = viewTokens nextToken(); if (viewToken equals(VIEW GROUP HEADER)) { queryViews add(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + viewToken substring(VIEW GROUP HEADER length())); } else if (viewToken equals(VIEW GROUP CUSTOM)) { queryViews add(AmqMessagesUtil JMS MESSAGE CUSTOM PREFIX + viewToken substring(VIEW GROUP CUSTOM length())); } else if (viewToken equals(VIEW GROUP BODY)) { queryViews add(AmqMessagesUtil JMS MESSAGE BODY PREFIX + viewToken substring(VIEW GROUP BODY length())); } else { queryViews add(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + viewToken); queryViews add(AmqMessagesUtil JMS MESSAGE CUSTOM PREFIX + viewToken); queryViews add(AmqMessagesUtil JMS MESSAGE BODY PREFIX + viewToken); } } } else if (token startsWith( -V )) { String viewGroup = token substring(2); if (viewGroup equals( header )) { groupViews add(AmqMessagesUtil JMS MESSAGE HEADER PREFIX); } else if (viewGroup equals( custom )) { groupViews add(AmqMessagesUtil JMS MESSAGE CUSTOM PREFIX); } else if (viewGroup equals( body )) { groupViews add(AmqMessagesUtil JMS MESSAGE BODY PREFIX); } else { context printInfo( Unknown group view + viewGroup + Ignoring group view option ); } } else { super handleOption(token, tokens); } } protected void printHelp() { context printHelp(helpFile); } }",1.0,
1095,1095,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\BstatCommand.,BstatCommand,"public class BstatCommand extends QueryCommand { protected String[] helpFile = new String[] { Task Usage activemq-admin bstat [bstat-options] [broker-name] , Description Performs a predefined query that displays useful statistics regarding the specified broker , If no broker name is specified, it will try and select from all registered brokers , , Bstat Options , --jmxurl <url> Set the JMX URL to connect to , --pid <pid> Set the pid to connect to (only on Sun JVM) , --jmxuser <user> Set the JMX user used for authenticating , --jmxpassword <password> Set the JMX password used for authenticating , --jmxlocal Use the local JMX server instead of a remote one , --version Display the version information , -h,- ,--help Display the query broker help information , , Examples , activemq-admin bstat localhost , - Display a summary of statistics for the broker localhost }; Override public String getName() { return bstat ; } Override public String getOneLineDescription() { return Performs a predefined query that displays useful statistics regarding the specified broker ; } protected void runTask(List<String> tokens) throws Exception { List<String> queryTokens = new ArrayList<String>(); String brokerName = * ; for (Iterator i = tokens iterator(); i hasNext();) { String token = (String)i next(); if (!token startsWith( - )) { brokerName = token; break; } else { queryTokens add(token); } } queryTokens add( --objname ); queryTokens add( type=*,brokerName= + brokerName + ,* ); queryTokens add( -xQTopic=ActiveMQ Advisory * ); queryTokens add( --view ); queryTokens add( BrokerName,Name,connectorName,networkConnectorName,destinationName,destinationType,EnqueueCount, + DequeueCount,TotalEnqueueCount,TotalDequeueCount,Messages, + TotalMessageCount,ConsumerCount,TotalConsumerCount,DispatchCount,Duplex,NetworkTTL ); super parseOptions(queryTokens); super runTask(queryTokens); } protected void printHelp() { context printHelp(helpFile); } }",1.0,
1097,1097,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\DecryptCommand.,DecryptCommand,"public class DecryptCommand extends EncryptCommand { protected String[] helpFile = new String[] { Task Usage Main decrypt --password <password> --input <input> , Description Decrypts given text , , Encrypt Options , --password <password> Password to be used by the encryptor , --input <input> Text to be encrypted , --version Display the version information , -h,- ,--help Display the stop broker help information , }; Override public String getName() { return decrypt ; } Override public String getOneLineDescription() { return Decrypts given text ; } Override protected void runTask(List<String> tokens) throws Exception { if (password == null || input == null) { context printException(new IllegalArgumentException( input and password parameters are mandatory )); return; } encryptor setPassword(password); try { context print( Decrypted text + encryptor decrypt(input)); } catch (EncryptionOperationNotPossibleException e) { context print( ERROR Text cannot be decrypted, check your input and password and try again! ); } } }",1.0,
1098,1098,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\DefaultPasswordFactory.,DefaultPasswordFactory,public class DefaultPasswordFactory implements PasswordFactory{ public static PasswordFactory factory = new DefaultPasswordFactory(); public String getPassword(String password) { return password; } },1.0,
1099,1099,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\EncryptCommand.,EncryptCommand,"public class EncryptCommand extends AbstractCommand { protected String[] helpFile = new String[] { Task Usage Main encrypt --password <password> --input <input> , Description Encrypts given text , , Encrypt Options , --password <password> Password to be used by the encryptor , --input <input> Text to be encrypted , --version Display the version information , -h,- ,--help Display the stop broker help information , }; StandardPBEStringEncryptor encryptor = new StandardPBEStringEncryptor(); String input; String password; Override public String getName() { return encrypt ; } Override public String getOneLineDescription() { return Encrypts given text ; } Override protected void printHelp() { context printHelp(helpFile); } Override protected void runTask(List<String> tokens) throws Exception { if (password == null || input == null) { context printException(new IllegalArgumentException( input and password parameters are mandatory )); return; } encryptor setPassword(password); context print( Encrypted text + encryptor encrypt(input)); } Override protected void handleOption(String token, List<String> tokens) throws Exception { if (token startsWith( --input )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( input not specified )); return; } input=(String)tokens remove(0); } else if (token startsWith( --password )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( password not specified )); return; } password=(String)tokens remove(0); } else { super handleOption(token, tokens); } } }",1.0,
1100,1100,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\ListCommand.,ListCommand,"public class ListCommand extends AbstractJmxCommand { protected String[] helpFile = new String[] { Task Usage Main list [list-options] , Description Lists all available broker in the specified JMX context , , List Options , --jmxurl <url> Set the JMX URL to connect to , --pid <pid> Set the pid to connect to (only on Sun JVM) , --jmxuser <user> Set the JMX user used for authenticating , --jmxpassword <password> Set the JMX password used for authenticating , --jmxlocal Use the local JMX server instead of a remote one , --version Display the version information , -h,- ,--help Display the stop broker help information , }; Override public String getName() { return list ; } Override public String getOneLineDescription() { return Lists all available brokers in the specified JMX context ; } protected void runTask(List tokens) throws Exception { try { Set<String> propsView = new HashSet<String>(); propsView add( brokerName ); context printMBean(JmxMBeansUtil filterMBeansView(JmxMBeansUtil getAllBrokers(createJmxConnection()), propsView)); } catch (Exception e) { context printException(new RuntimeException( Failed to execute list task Reason + e)); throw new Exception(e); } } protected void printHelp() { context printHelp(helpFile); } }",1.0,
1101,1101,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\PurgeCommand.,PurgeCommand,"public class PurgeCommand extends AbstractJmxCommand { protected String[] helpFile = new String[] { Task Usage Main purge [browse-options] <destinations> , Description Delete selected destination s messages that matches the message selector , , Purge Options , --msgsel <msgsel1,msglsel2> Add to the search list messages matched by the query similar to , the messages selector format , --jmxurl <url> Set the JMX URL to connect to , --pid <pid> Set the pid to connect to (only on Sun JVM) , --jmxuser <user> Set the JMX user used for authenticating , --jmxpassword <password> Set the JMX password used for authenticating , --jmxlocal Use the local JMX server instead of a remote one , --version Display the version information , -h,- ,--help Display the browse broker help information , , Examples , Main purge FOO BAR , - Delete all the messages in queue FOO BAR , Main purge --msgsel JMSMessageID= * 10 ,JMSPriority>5 FOO * , - Delete all the messages in the destinations that matches FOO * and has a JMSMessageID in , the header field that matches the wildcard * 10, and has a JMSPriority field > 5 in the , queue FOO BAR , SLQ92 syntax is also supported , * To use wildcard queries, the field must be a string and the query enclosed in , Use double quotes around the entire message selector string , }; private final List<String> queryAddObjects = new ArrayList<String>(10); private final List<String> querySubObjects = new ArrayList<String>(10); Override public String getName() { return purge ; } Override public String getOneLineDescription() { return Delete selected destination s messages that matches the message selector ; } protected void runTask(List<String> tokens) throws Exception { try { if (tokens isEmpty()) { tokens add( * ); } for (Iterator<String> i = tokens iterator(); i hasNext();) { List queueList = JmxMBeansUtil queryMBeans(createJmxConnection(), destinationType=Queue,destinationName= + i next() + ,* ); for (Iterator j = queueList iterator(); j hasNext();) { ObjectName queueName = ((ObjectInstance)j next()) getObjectName(); if (queryAddObjects isEmpty()) { purgeQueue(queueName); } else { QueueViewMBean proxy = (QueueViewMBean) MBeanServerInvocationHandler newProxyInstance(createJmxConnection(), queueName, QueueViewMBean class, true); int removed = 0; String sqlQuery = null; if (queryAddObjects size() > 1) { sqlQuery = convertToSQL92(queryAddObjects); } else { sqlQuery = queryAddObjects get(0); } removed = proxy removeMatchingMessages(sqlQuery); context printInfo( Removed + removed + messages for message selector + sqlQuery toString()); } } } } catch (Exception e) { context printException(new RuntimeException( Failed to execute purge task Reason + e)); throw new Exception(e); } } public void purgeQueue(ObjectName queue) throws Exception { context printInfo( Purging all messages in queue + queue getKeyProperty( destinationName )); createJmxConnection() invoke(queue, purge , new Object[] {}, new String[] {}); } protected void handleOption(String token, List<String> tokens) throws Exception { if (token startsWith( --msgsel )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Message selector not specified )); return; } StringTokenizer queryTokens = new StringTokenizer((String)tokens remove(0), COMMAND OPTION DELIMETER); while (queryTokens hasMoreTokens()) { queryAddObjects add(queryTokens nextToken()); } } else if (token startsWith( --xmsgsel )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Message selector not specified )); return; } StringTokenizer queryTokens = new StringTokenizer((String)tokens remove(0), COMMAND OPTION DELIMETER); while (queryTokens hasMoreTokens()) { querySubObjects add(queryTokens nextToken()); } } else { super handleOption(token, tokens); } } public String convertToSQL92(List<String> tokens) { String selector = ; for (Iterator i = tokens iterator(); i hasNext(); ) { selector = selector + ( + i next() toString() + ) AND ; } if (!selector equals( )) { selector = selector substring(0, selector length() - 5); selector = selector replace( * , % ); } return selector; } protected void printHelp() { context printHelp(helpFile); } }",1.0,
1102,1102,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\QueryCommand.,QueryCommand,"public class QueryCommand extends AbstractJmxCommand { private static final Properties PREDEFINED OBJNAME QUERY = new Properties(); static { PREDEFINED OBJNAME QUERY setProperty( Broker , type=Broker,brokerName=%1 ); PREDEFINED OBJNAME QUERY setProperty( Connection , type=Broker,connector=clientConnectors,connectionName=%1,* ); PREDEFINED OBJNAME QUERY setProperty( Connector , type=Broker,brokerName=*,connector=clientConnectors,connectorName=%1 ); PREDEFINED OBJNAME QUERY setProperty( NetworkConnector , type=Broker,brokerName=%1,connector=networkConnectors,networkConnectorName=* ); PREDEFINED OBJNAME QUERY setProperty( Queue , type=Broker,brokerName=*,destinationType=Queue,destinationName=%1 ); PREDEFINED OBJNAME QUERY setProperty( Topic , type=Broker,brokerName=*,destinationType=Topic,destinationName=%1,* ); }; protected String[] helpFile = new String[] { Task Usage Main query [query-options] , Description Display selected broker component s attributes and statistics , , Query Options , -Q<type>=<name> Add to the search list the specific object type matched , by the defined object identifier , -xQ<type>=<name> Remove from the search list the specific object type , matched by the object identifier , --objname <query> Add to the search list objects matched by the query similar , to the JMX object name format , --xobjname <query> Remove from the search list objects matched by the query , similar to the JMX object name format , --view <attr1>,<attr2>, Select the specific attribute of the object to view , By default all attributes will be displayed , --jmxurl <url> Set the JMX URL to connect to , --pid <pid> Set the pid to connect to (only on Sun JVM) , --jmxuser <user> Set the JMX user used for authenticating , --jmxpassword <password> Set the JMX password used for authenticating , --jmxlocal Use the local JMX server instead of a remote one , --version Display the version information , -h,- ,--help Display the query broker help information , , Examples , query , - Print all the attributes of all registered objects queues, topics, connections, etc) , , query -QQueue=TEST FOO , - Print all the attributes of the queue with destination name TEST FOO , , query -QTopic=* , - Print all the attributes of all registered topics , , query --view EnqueueCount,DequeueCount , - Print the attributes EnqueueCount and DequeueCount of all registered objects , , query -QTopic=* --view EnqueueCount,DequeueCount , - Print the attributes EnqueueCount and DequeueCount of all registered topics , , query -QTopic=* -QQueue=* --view EnqueueCount,DequeueCount , - Print the attributes EnqueueCount and DequeueCount of all registered topics and , queues , , query -QTopic=* -xQTopic=ActiveMQ Advisory * , - Print all attributes of all topics except those that has a name that begins , with ActiveMQ Advisory , , query --objname Type=*Connect*,BrokerName=local* -xQNetworkConnector=* , - Print all attributes of all connectors, connections excluding network connectors , that belongs to the broker that begins with local , , query -QQueue=* -xQQueue= , - Print all attributes of all queues except those that are 4 letters long , , }; private final List<String> queryAddObjects = new ArrayList<String>(10); private final List<String> querySubObjects = new ArrayList<String>(10); private final Set queryViews = new HashSet(10); Override public String getName() { return query ; } Override public String getOneLineDescription() { return Display selected broker component s attributes and statistics ; } protected void runTask(List<String> tokens) throws Exception { try { List addMBeans = JmxMBeansUtil queryMBeans(createJmxConnection(), queryAddObjects, queryViews); if (querySubObjects size() > 0) { List subMBeans = JmxMBeansUtil queryMBeans(createJmxConnection(), querySubObjects, queryViews); addMBeans removeAll(subMBeans); } context printMBean(JmxMBeansUtil filterMBeansView(addMBeans, queryViews)); } catch (Exception e) { context printException(new RuntimeException( Failed to execute query task Reason + e)); throw new Exception(e); } } protected void handleOption(String token, List<String> tokens) throws Exception { if (token startsWith( -Q )) { String key = token substring(2); String value = ; int pos = key indexOf( = ); if (pos >= 0) { value = key substring(pos + 1); key = key substring(0, pos); } String predefQuery = PREDEFINED OBJNAME QUERY getProperty(key); if (predefQuery == null) { context printException(new IllegalArgumentException( Unknown query object type + key)); return; } String queryStr = JmxMBeansUtil createQueryString(predefQuery, value); StringTokenizer queryTokens = new StringTokenizer(queryStr, COMMAND OPTION DELIMETER); while (queryTokens hasMoreTokens()) { queryAddObjects add(queryTokens nextToken()); } } else if (token startsWith( -xQ )) { String key = token substring(3); String value = ; int pos = key indexOf( = ); if (pos >= 0) { value = key substring(pos + 1); key = key substring(0, pos); } String predefQuery = PREDEFINED OBJNAME QUERY getProperty(key); if (predefQuery == null) { context printException(new IllegalArgumentException( Unknown query object type + key)); return; } String queryStr = JmxMBeansUtil createQueryString(predefQuery, value); StringTokenizer queryTokens = new StringTokenizer(queryStr, COMMAND OPTION DELIMETER); while (queryTokens hasMoreTokens()) { querySubObjects add(queryTokens nextToken()); } } else if (token startsWith( --objname )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Object name query not specified )); return; } StringTokenizer queryTokens = new StringTokenizer((String)tokens remove(0), COMMAND OPTION DELIMETER); while (queryTokens hasMoreTokens()) { queryAddObjects add(queryTokens nextToken()); } } else if (token startsWith( --xobjname )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Object name query not specified )); return; } StringTokenizer queryTokens = new StringTokenizer((String)tokens remove(0), COMMAND OPTION DELIMETER); while (queryTokens hasMoreTokens()) { querySubObjects add(queryTokens nextToken()); } } else if (token startsWith( --view )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( Attributes to view not specified )); return; } Enumeration viewTokens = new StringTokenizer((String)tokens remove(0), COMMAND OPTION DELIMETER); while (viewTokens hasMoreElements()) { queryViews add(viewTokens nextElement()); } } else { super handleOption(token, tokens); } } protected void printHelp() { context printHelp(helpFile); } }",1.0,
1104,1104,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\ShutdownCommand.,ShutdownCommand,"public class ShutdownCommand extends AbstractJmxCommand { protected String[] helpFile = new String[] { Task Usage Main stop [stop-options] [broker-name1] [broker-name2] , Description Stops a running broker , , Stop Options , --jmxurl <url> Set the JMX URL to connect to , --pid <pid> Set the pid to connect to (only on Sun JVM) , --jmxuser <user> Set the JMX user used for authenticating , --jmxpassword <password> Set the JMX password used for authenticating , --jmxlocal Use the local JMX server instead of a remote one , --all Stop all brokers , --version Display the version information , -h,- ,--help Display the stop broker help information , , Broker Names , Name of the brokers that will be stopped , If omitted, it is assumed that there is only one broker running, and it will be stopped , Use -all to stop all running brokers , }; private boolean isStopAllBrokers; Override public String getName() { return stop ; } Override public String getOneLineDescription() { return Stops a running broker specified by the broker name ; } protected void runTask(List brokerNames) throws Exception { try { Collection mbeans; if (isStopAllBrokers) { mbeans = JmxMBeansUtil getAllBrokers(createJmxConnection()); brokerNames clear(); } else if (brokerNames isEmpty()) { mbeans = JmxMBeansUtil getAllBrokers(createJmxConnection()); if (mbeans isEmpty()) { context printInfo( There are no brokers to stop ); return; } else if (mbeans size() > 1) { context printInfo( There are multiple brokers to stop Please select the broker(s) to stop or use --all to stop all brokers ); return; } else { Object firstBroker = mbeans iterator() next(); mbeans clear(); mbeans add(firstBroker); } } else { String brokerName; mbeans = new HashSet(); while (!brokerNames isEmpty()) { brokerName = (String)brokerNames remove(0); Collection matchedBrokers = JmxMBeansUtil getBrokersByName(createJmxConnection(), brokerName); if (matchedBrokers isEmpty()) { context printInfo(brokerName + did not match any running brokers ); } else { mbeans addAll(matchedBrokers); } } } stopBrokers(createJmxConnection(), mbeans); } catch (Exception e) { context printException(new RuntimeException( Failed to execute stop task Reason + e)); throw new Exception(e); } } protected void stopBrokers(MBeanServerConnection jmxConnection, Collection brokerBeans) throws Exception { ObjectName brokerObjName; for (Iterator i = brokerBeans iterator(); i hasNext();) { brokerObjName = ((ObjectInstance)i next()) getObjectName(); String brokerName = brokerObjName getKeyProperty( brokerName ); context print( Stopping broker + brokerName); try { jmxConnection invoke(brokerObjName, terminateJVM , new Object[] { Integer valueOf(0) }, new String[] { int }); context print( Succesfully stopped broker + brokerName); } catch (Exception e) { } } closeJmxConnection(); } protected void handleOption(String token, List<String> tokens) throws Exception { if (token equals( --all )) { isStopAllBrokers = true; } else { super handleOption(token, tokens); } } protected void printHelp() { context printHelp(helpFile); } }",1.0,
1106,1106,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\StopGracefullyCommand.,StopGracefullyCommand,"public class StopGracefullyCommand extends ShutdownCommand { Override public String getName() { return stop-gracefully ; } Override public String getOneLineDescription() { return Stops a running broker gracefully ; } protected String connectorName, queueName; protected long timeout; protected long pollInterval; public StopGracefullyCommand(){ super(); this helpFile = new String[] { Task Usage Main stopGracefully [stop-options] [broker-name1] [broker-name2] , Description Stops a running broker if there is no pending messages in the queues It first stops the connector for client connection, then check queuesize until it becomes 0 before stop the broker , , Stop Options , --connectorName <connectorName> connectorName to stop , --queueName <queueName> check the queuesize of the queueName for pending message , --timeout <timeout> periodically check the queuesize before the timeout expires , --pollInterval <pollInterval> the time interval it checks the queuesize , --jmxurl <url> Set the JMX URL to connect to , --jmxuser <user> Set the JMX user used for authenticating , --jmxpassword <password> Set the JMX password used for authenticating , --jmxlocal Use the local JMX server instead of a remote one , --localProcessId Use the local process id to connect( ignore jmxurl, jmxuser, jmxpassword), need to be root to use this option , --all Stop all brokers , --version Display the version information , -h,- ,--help Display the stop broker help information , , Broker Names , Name of the brokers that will be stopped , If omitted, it is assumed that there is only one broker running, and it will be stopped , Use -all to stop all running brokers , }; } protected void stopBrokers(MBeanServerConnection jmxConnection, Collection brokerBeans) throws Exception { ObjectName brokerObjName; for (Iterator i = brokerBeans iterator(); i hasNext();) { brokerObjName = ((ObjectInstance)i next()) getObjectName(); String brokerName = brokerObjName getKeyProperty( BrokerName ); context print( Stopping broker + brokerName); try { jmxConnection invoke(brokerObjName, stopGracefully , new Object[] { connectorName, queueName, timeout, pollInterval }, new String[] { java lang String , java lang String , long , long }); context print( Succesfully stopped broker + brokerName); } catch (Exception e) { if(!(e getMessage() startsWith( Error unmarshaling return header ))){ context print( Exception +e getMessage()); } } } closeJmxConnection(); } protected void handleOption(String token, List<String> tokens) throws Exception { if (token equals( --connectorName )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( connectorName not specified )); return; } connectorName=(String)tokens remove(0); } else if (token equals( --timeout )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( timeout not specified )); return; } timeout=Long parseLong(tokens remove(0)); } else if (token equals( --pollInterval )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( pollInterval not specified )); return; } pollInterval=Long parseLong(tokens remove(0)); }else if(token equals( --queueName )) { if (tokens isEmpty() || ((String)tokens get(0)) startsWith( - )) { context printException(new IllegalArgumentException( queueName not specified )); return; } queueName=(String)tokens remove(0); }else { super handleOption(token, tokens); } } }",1.0,
1107,1107,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\StoreExportCommand.,StoreExportCommand,"public class StoreExportCommand implements Command { private CommandContext context; Override public void setCommandContext(CommandContext context) { this context = context; } Override public String getName() { return export ; } Override public String getOneLineDescription() { return Exports a stopped brokers data files to an archive file ; } Override public void execute(List<String> tokens) throws Exception { StoreExporter exporter = new StoreExporter(); String[] remaining = CommandLineSupport setOptions(exporter, tokens toArray(new String[tokens size()])); if (remaining length > 0) { throw new Exception( Unexpected arguments + Arrays asList(remaining)); } exporter execute(); } }",1.0,
1108,1108,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\store\ExportStreamManager.,ExportStreamManager,"public class ExportStreamManager { private final OutputStream target; private final int version; TarOutputStream stream; ExportStreamManager(OutputStream target, int version) throws IOException { this target = target; this version = version; stream = new TarOutputStream(new GZIPOutputStream(target)); store( ver , new AsciiBuffer( +version)); } long seq = 0; public void finish() throws IOException { stream close(); } private void store(String ext, Buffer value) throws IOException { TarEntry entry = new TarEntry(seq + + ext); seq += 1; entry setSize(value length()); stream putNextEntry(entry); value writeTo(stream); stream closeEntry(); } private void store(String ext, MessageBuffer< , > value) throws IOException { TarEntry entry = new TarEntry(seq + + ext); seq += 1; entry setSize(value serializedSizeFramed()); stream putNextEntry(entry); value writeFramed(stream); stream closeEntry(); } public void store queue(QueuePB Getter value) throws IOException { store( que , value freeze()); } public void store queue entry(QueueEntryPB Getter value) throws IOException { store( qen , value freeze()); } public void store message(MessagePB Getter value) throws IOException { store( msg , value freeze()); } public void store map entry(MapEntryPB Getter value) throws IOException { store( map , value freeze()); } }",1.0,
1110,1110,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\store\amq\CommandLineSupport.,CommandLineSupport,"public final class CommandLineSupport { private CommandLineSupport() { } public static String[] setOptions(Object target, String[] args) { ArrayList<String> rc = new ArrayList<String>(); for (int i = 0; i < args length; i++) { if (args[i] == null) { continue; } if (args[i] startsWith( -- )) { String value = true ; String name = args[i] substring(2); int p = name indexOf( = ); if (p > 0) { value = name substring(p + 1); name = name substring(0, p); } if (name length() == 0) { rc add(args[i]); continue; } String propName = convertOptionToPropertyName(name); if (!IntrospectionSupport setProperty(target, propName, value)) { rc add(args[i]); continue; } } else { rc add(args[i]); } } String r[] = new String[rc size()]; rc toArray(r); return r; } private static String convertOptionToPropertyName(String name) { String rc = ; int p = name indexOf( - ); while (p > 0) { rc += name substring(0, p); name = name substring(p + 1); if (name length() > 0) { rc += name substring(0, 1) toUpperCase(); name = name substring(1); } p = name indexOf( - ); } return rc + name; } }",1.0,
1113,1113,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\store\tar\TarInputStream.,TarInputStream,"public class TarInputStream extends FilterInputStream { private static final int SMALL BUFFER SIZE = 256; private static final int BUFFER SIZE = 8 * 1024; private static final int LARGE BUFFER SIZE = 32 * 1024; private static final int BYTE MASK = 0xFF; protected boolean debug; protected boolean hasHitEOF; protected long entrySize; protected long entryOffset; protected byte[] readBuf; protected TarBuffer buffer; protected TarEntry currEntry; protected byte[] oneBuf; public TarInputStream(InputStream is) { this(is, TarBuffer DEFAULT BLKSIZE, TarBuffer DEFAULT RCDSIZE); } public TarInputStream(InputStream is, int blockSize) { this(is, blockSize, TarBuffer DEFAULT RCDSIZE); } public TarInputStream(InputStream is, int blockSize, int recordSize) { super(is); this buffer = new TarBuffer(is, blockSize, recordSize); this readBuf = null; this oneBuf = new byte[1]; this debug = false; this hasHitEOF = false; } public void setDebug(boolean debug) { this debug = debug; buffer setDebug(debug); } public void close() throws IOException { buffer close(); } public int getRecordSize() { return buffer getRecordSize(); } public int available() throws IOException { if (entrySize - entryOffset > Integer MAX VALUE) { return Integer MAX VALUE; } return (int) (entrySize - entryOffset); } public long skip(long numToSkip) throws IOException { byte[] skipBuf = new byte[BUFFER SIZE]; long skip = numToSkip; while (skip > 0) { int realSkip = (int) (skip > skipBuf length skipBuf length skip); int numRead = read(skipBuf, 0, realSkip); if (numRead == -1) { break; } skip -= numRead; } return (numToSkip - skip); } public boolean markSupported() { return false; } public void mark(int markLimit) { } public void reset() { } public TarEntry getNextEntry() throws IOException { if (hasHitEOF) { return null; } if (currEntry != null) { long numToSkip = entrySize - entryOffset; if (debug) { System err println( TarInputStream SKIP currENTRY + currEntry getName() + SZ + entrySize + OFF + entryOffset + skipping + numToSkip + bytes ); } while (numToSkip > 0) { long skipped = skip(numToSkip); if (skipped <= 0) { throw new RuntimeException( failed to skip current tar + entry ); } numToSkip -= skipped; } readBuf = null; } byte[] headerBuf = buffer readRecord(); if (headerBuf == null) { if (debug) { System err println( READ NULL RECORD ); } hasHitEOF = true; } else if (buffer isEOFRecord(headerBuf)) { if (debug) { System err println( READ EOF RECORD ); } hasHitEOF = true; } if (hasHitEOF) { currEntry = null; } else { currEntry = new TarEntry(headerBuf); if (debug) { System err println( TarInputStream SET CURRENTRY + currEntry getName() + size = + currEntry getSize()); } entryOffset = 0; entrySize = currEntry getSize(); } if (currEntry != null && currEntry isGNULongNameEntry()) { StringBuffer longName = new StringBuffer(); byte[] buf = new byte[SMALL BUFFER SIZE]; int length = 0; while ((length = read(buf)) >= 0) { longName append(new String(buf, 0, length)); } getNextEntry(); if (currEntry == null) { return null; } if (longName length() > 0 && longName charAt(longName length() - 1) == 0) { longName deleteCharAt(longName length() - 1); } currEntry setName(longName toString()); } return currEntry; } public int read() throws IOException { int num = read(oneBuf, 0, 1); return num == -1 -1 ((int) oneBuf[0]) & BYTE MASK; } public int read(byte[] buf, int offset, int numToRead) throws IOException { int totalRead = 0; if (entryOffset >= entrySize) { return -1; } if ((numToRead + entryOffset) > entrySize) { numToRead = (int) (entrySize - entryOffset); } if (readBuf != null) { int sz = (numToRead > readBuf length) readBuf length numToRead; System arraycopy(readBuf, 0, buf, offset, sz); if (sz >= readBuf length) { readBuf = null; } else { int newLen = readBuf length - sz; byte[] newBuf = new byte[newLen]; System arraycopy(readBuf, sz, newBuf, 0, newLen); readBuf = newBuf; } totalRead += sz; numToRead -= sz; offset += sz; } while (numToRead > 0) { byte[] rec = buffer readRecord(); if (rec == null) { throw new IOException( unexpected EOF with + numToRead + bytes unread ); } int sz = numToRead; int recLen = rec length; if (recLen > sz) { System arraycopy(rec, 0, buf, offset, sz); readBuf = new byte[recLen - sz]; System arraycopy(rec, sz, readBuf, 0, recLen - sz); } else { sz = recLen; System arraycopy(rec, 0, buf, offset, recLen); } totalRead += sz; numToRead -= sz; offset += sz; } entryOffset += totalRead; return totalRead; } public void copyEntryContents(OutputStream out) throws IOException { byte[] buf = new byte[LARGE BUFFER SIZE]; while (true) { int numRead = read(buf, 0, buf length); if (numRead == -1) { break; } out write(buf, 0, numRead); } } }",1.0,
1114,1114,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\store\tar\TarOutputStream.,TarOutputStream,"public class TarOutputStream extends FilterOutputStream { public static final int LONGFILE ERROR = 0; public static final int LONGFILE TRUNCATE = 1; public static final int LONGFILE GNU = 2; protected boolean debug; protected long currSize; protected String currName; protected long currBytes; protected byte[] oneBuf; protected byte[] recordBuf; protected int assemLen; protected byte[] assemBuf; protected TarBuffer buffer; protected int longFileMode = LONGFILE ERROR; private boolean closed = false; public TarOutputStream(OutputStream os) { this(os, TarBuffer DEFAULT BLKSIZE, TarBuffer DEFAULT RCDSIZE); } public TarOutputStream(OutputStream os, int blockSize) { this(os, blockSize, TarBuffer DEFAULT RCDSIZE); } public TarOutputStream(OutputStream os, int blockSize, int recordSize) { super(os); this buffer = new TarBuffer(os, blockSize, recordSize); this debug = false; this assemLen = 0; this assemBuf = new byte[recordSize]; this recordBuf = new byte[recordSize]; this oneBuf = new byte[1]; } public void setLongFileMode(int longFileMode) { this longFileMode = longFileMode; } public void setDebug(boolean debugF) { this debug = debugF; } public void setBufferDebug(boolean debug) { buffer setDebug(debug); } public void finish() throws IOException { writeEOFRecord(); writeEOFRecord(); buffer flushBlock(); } public void close() throws IOException { if (!closed) { finish(); buffer close(); out close(); closed = true; } } public int getRecordSize() { return buffer getRecordSize(); } public void putNextEntry(TarEntry entry) throws IOException { if (entry getName() length() >= TarConstants NAMELEN) { if (longFileMode == LONGFILE GNU) { TarEntry longLinkEntry = new TarEntry(TarConstants GNU LONGLINK, TarConstants LF GNUTYPE LONGNAME); longLinkEntry setSize(entry getName() length() + 1); putNextEntry(longLinkEntry); write(entry getName() getBytes()); write(0); closeEntry(); } else if (longFileMode != LONGFILE TRUNCATE) { throw new RuntimeException( file name + entry getName() + is too long ( > + TarConstants NAMELEN + bytes) ); } } entry writeEntryHeader(recordBuf); buffer writeRecord(recordBuf); currBytes = 0; if (entry isDirectory()) { currSize = 0; } else { currSize = entry getSize(); } currName = entry getName(); } public void closeEntry() throws IOException { if (assemLen > 0) { for (int i = assemLen; i < assemBuf length; ++i) { assemBuf[i] = 0; } buffer writeRecord(assemBuf); currBytes += assemLen; assemLen = 0; } if (currBytes < currSize) { throw new IOException( entry + currName + closed at + currBytes + before the + currSize + bytes specified in the header were written ); } } public void write(int b) throws IOException { oneBuf[0] = (byte) b; write(oneBuf, 0, 1); } public void write(byte[] wBuf) throws IOException { write(wBuf, 0, wBuf length); } public void write(byte[] wBuf, int wOffset, int numToWrite) throws IOException { if ((currBytes + numToWrite) > currSize) { throw new IOException( request to write + numToWrite + bytes exceeds size in header of + currSize + bytes for entry + currName + ); } if (assemLen > 0) { if ((assemLen + numToWrite) >= recordBuf length) { int aLen = recordBuf length - assemLen; System arraycopy(assemBuf, 0, recordBuf, 0, assemLen); System arraycopy(wBuf, wOffset, recordBuf, assemLen, aLen); buffer writeRecord(recordBuf); currBytes += recordBuf length; wOffset += aLen; numToWrite -= aLen; assemLen = 0; } else { System arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); wOffset += numToWrite; assemLen += numToWrite; numToWrite = 0; } } while (numToWrite > 0) { if (numToWrite < recordBuf length) { System arraycopy(wBuf, wOffset, assemBuf, assemLen, numToWrite); assemLen += numToWrite; break; } buffer writeRecord(wBuf, wOffset); int num = recordBuf length; currBytes += num; numToWrite -= num; wOffset += num; } } private void writeEOFRecord() throws IOException { for (int i = 0; i < recordBuf length; ++i) { recordBuf[i] = 0; } buffer writeRecord(recordBuf); } }",1.0,
1116,1116,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\AbstractQueryFilter.,AbstractQueryFilter,"public abstract class AbstractQueryFilter implements QueryFilter { protected QueryFilter next; protected AbstractQueryFilter(QueryFilter next) { this next = next; } public List query(String query) throws Exception { StringTokenizer tokens = new StringTokenizer(query, QUERY DELIMETER); return query(Collections list(tokens)); } }",1.0,
1118,1118,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\GroupPropertiesViewFilter.,GroupPropertiesViewFilter,"public class GroupPropertiesViewFilter extends PropertiesViewFilter { public GroupPropertiesViewFilter(QueryFilter next) { super(next); } public GroupPropertiesViewFilter(Set groupView, QueryFilter next) { super(groupView, next); } protected Map filterView(Map data) { if (viewFilter == null || viewFilter isEmpty()) { return data; } Map newData; try { newData = data getClass() newInstance(); } catch (Exception e) { newData = new HashMap(); } for (Iterator<String> i = data keySet() iterator(); i hasNext();) { String key = i next(); for (Iterator j = viewFilter iterator(); j hasNext();) { String group = (String)j next(); if (key startsWith(group)) { newData put(key, data get(key)); break; } } } return newData; } }",1.0,
1119,1119,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\MapTransformFilter.,MapTransformFilter,"public class MapTransformFilter extends ResultTransformFilter { public MapTransformFilter(QueryFilter next) { super(next); } protected Object transformElement(Object object) throws Exception { try { Method method = this getClass() getDeclaredMethod( transformToMap , new Class[] { object getClass() }); return (Map)method invoke(this, new Object[] { object }); } catch (NoSuchMethodException e) { return null; } } protected Map transformToMap(ObjectInstance obj) { return transformToMap(obj getObjectName()); } protected Map transformToMap(ObjectName objname) { Properties props = new Properties(); Map objProps = objname getKeyPropertyList(); for (Iterator i = objProps keySet() iterator(); i hasNext();) { Object key = i next(); Object val = objProps get(key); if (val != null) { props setProperty(key toString(), getDisplayString(val)); } } return props; } protected Map transformToMap(AttributeList list) { Properties props = new Properties(); for (Iterator i = list iterator(); i hasNext();) { Attribute attrib = (Attribute)i next(); if (attrib getName() equals(MBeansAttributeQueryFilter KEY OBJECT NAME ATTRIBUTE)) { props putAll(transformToMap((ObjectName)attrib getValue())); } else { if (attrib getValue() != null) { props setProperty(attrib getName(), getDisplayString(attrib getValue())); } } } return props; } protected Map transformToMap(ActiveMQTextMessage msg) throws JMSException { Properties props = new Properties(); props putAll(transformToMap((ActiveMQMessage)msg)); if (msg getText() != null) { props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + JMSText , msg getText()); } return props; } protected Map transformToMap(ActiveMQBytesMessage msg) throws JMSException { Properties props = new Properties(); props putAll(transformToMap((ActiveMQMessage)msg)); long bodyLength = msg getBodyLength(); byte[] msgBody; int i = 0; for (i = 0; i < (bodyLength / Integer MAX VALUE); i++) { msgBody = new byte[Integer MAX VALUE]; props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + JMSBytes + (i + 1), new String(msgBody)); } msgBody = new byte[(int)(bodyLength % Integer MAX VALUE)]; props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + JMSBytes + (i + 1), new String(msgBody)); return props; } protected Map transformToMap(ActiveMQObjectMessage msg) throws JMSException { Properties props = new Properties(); props putAll(transformToMap((ActiveMQMessage)msg)); if (msg getObject() != null) { props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + JMSObjectClass , msg getObject() getClass() getName()); props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + JMSObjectString , getDisplayString(msg getObject())); } return props; } protected Map transformToMap(ActiveMQMapMessage msg) throws JMSException { Properties props = new Properties(); props putAll(transformToMap((ActiveMQMessage)msg)); Enumeration e = msg getMapNames(); while (e hasMoreElements()) { String key = (String)e nextElement(); Object val = msg getObject(key); if (val != null) { props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + key, getDisplayString(val)); } } return props; } protected Map transformToMap(ActiveMQStreamMessage msg) throws JMSException { Properties props = new Properties(); props putAll(transformToMap((ActiveMQMessage)msg)); props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + JMSStreamMessage , getDisplayString(msg)); return props; } protected Map<String, String> transformToMap(ActiveMQMessage msg) throws JMSException { Map<String, String> props = new HashMap<String, String>(); if (msg getJMSCorrelationID() != null) { props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSCorrelationID , msg getJMSCorrelationID()); } props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSDeliveryMode , (msg getJMSDeliveryMode() == DeliveryMode PERSISTENT) persistent non-persistent ); if (msg getJMSDestination() != null) { props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSDestination , ((ActiveMQDestination)msg getJMSDestination()) getPhysicalName()); } props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSExpiration , Long toString(msg getJMSExpiration())); props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSMessageID , msg getJMSMessageID()); props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSPriority , Integer toString(msg getJMSPriority())); props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSRedelivered , Boolean toString(msg getJMSRedelivered())); if (msg getJMSReplyTo() != null) { props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSReplyTo , ((ActiveMQDestination)msg getJMSReplyTo()) getPhysicalName()); } props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSTimestamp , Long toString(msg getJMSTimestamp())); if (msg getJMSType() != null) { props put(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSType , msg getJMSType()); } Enumeration e = msg getPropertyNames(); while (e hasMoreElements()) { String name = (String)e nextElement(); if (msg getObjectProperty(name) != null) { props put(AmqMessagesUtil JMS MESSAGE CUSTOM PREFIX + name, getDisplayString(msg getObjectProperty(name))); } } return props; } protected Map transformToMap(CompositeDataSupport data) { Properties props = new Properties(); String typeName = data getCompositeType() getTypeName(); if (typeName equals(ActiveMQTextMessage class getName())) { props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + Text , data get( Text ) toString()); } else if (typeName equals(ActiveMQBytesMessage class getName())) { props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + BodyLength , data get( BodyLength ) toString()); props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + BodyPreview , new String((byte[])data get( BodyPreview ))); } else if (typeName equals(ActiveMQMapMessage class getName())) { Map contentMap = (Map)data get( ContentMap ); for (Iterator i = contentMap keySet() iterator(); i hasNext();) { String key = (String)i next(); props setProperty(AmqMessagesUtil JMS MESSAGE BODY PREFIX + key, contentMap get(key) toString()); } } else if (typeName equals(ActiveMQObjectMessage class getName()) || typeName equals(ActiveMQStreamMessage class getName()) || typeName equals(ActiveMQMessage class getName())) { } else { throw new IllegalArgumentException( Unrecognized composite data to transform composite type + typeName); } props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSCorrelationID , + data get( JMSCorrelationID )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSDestination , + data get( JMSDestination )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSMessageID , + data get( JMSMessageID )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSReplyTo , + data get( JMSReplyTo )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSType , + data get( JMSType )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSDeliveryMode , + data get( JMSDeliveryMode )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSExpiration , + data get( JMSExpiration )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSPriority , + data get( JMSPriority )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSRedelivered , + data get( JMSRedelivered )); props setProperty(AmqMessagesUtil JMS MESSAGE HEADER PREFIX + JMSTimestamp , + data get( JMSTimestamp )); props setProperty(AmqMessagesUtil JMS MESSAGE CUSTOM PREFIX + Properties , + data get( Properties )); return props; } SuppressWarnings( unchecked ) protected String getDisplayString(Object obj) { if (null == obj) return null ; if (obj != null && obj getClass() isArray()) { Class type = obj getClass() getComponentType(); if (!type isPrimitive()) { obj = Arrays asList((Object[]) obj); } else { int len = Array getLength(obj); if (0 == len) return [] ; StringBuilder bldr = new StringBuilder(); bldr append( [ ); for (int i = 0; i <= len; i++) { bldr append(Array get(obj, i)); if (i + 1 >= len) return bldr append( ] ) toString(); bldr append( , ); } } } return obj toString(); } }",1.0,
1120,1120,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\MBeansAttributeQueryFilter.,MBeansAttributeQueryFilter,"public class MBeansAttributeQueryFilter extends AbstractQueryFilter { public static final String KEY OBJECT NAME ATTRIBUTE = Attribute ObjectName ; private MBeanServerConnection jmxConnection; private Set attribView; public MBeansAttributeQueryFilter(MBeanServerConnection jmxConnection, Set attribView, MBeansObjectNameQueryFilter next) { super(next); this jmxConnection = jmxConnection; this attribView = attribView; } public List query(List queries) throws Exception { return getMBeanAttributesCollection(next query(queries)); } protected List getMBeanAttributesCollection(Collection result) throws IOException, ReflectionException, InstanceNotFoundException, NoSuchMethodException, IntrospectionException { List mbeansCollection = new ArrayList(); for (Iterator i = result iterator(); i hasNext();) { Object mbean = i next(); if (mbean instanceof ObjectInstance) { try { mbeansCollection add(getMBeanAttributes(((ObjectInstance)mbean) getObjectName(), attribView)); } catch (InstanceNotFoundException ignore) { } } else if (mbean instanceof ObjectName) { try { mbeansCollection add(getMBeanAttributes((ObjectName)mbean, attribView)); } catch (InstanceNotFoundException ignore) { } } else { throw new NoSuchMethodException( Cannot get the mbean attributes for class + mbean getClass() getName()); } } return mbeansCollection; } protected AttributeList getMBeanAttributes(ObjectInstance obj, Set attrView) throws ReflectionException, InstanceNotFoundException, IOException, IntrospectionException { return getMBeanAttributes(obj getObjectName(), attrView); } protected AttributeList getMBeanAttributes(ObjectName objName, Set attrView) throws IOException, ReflectionException, InstanceNotFoundException, IntrospectionException { String[] attribs; if (attrView == null || attrView isEmpty()) { MBeanAttributeInfo[] infos = jmxConnection getMBeanInfo(objName) getAttributes(); attribs = new String[infos length]; for (int i = 0; i < infos length; i++) { if (infos[i] isReadable()) { attribs[i] = infos[i] getName(); } } } else { attribs = new String[attrView size()]; int count = 0; for (Iterator i = attrView iterator(); i hasNext();) { attribs[count++] = (String)i next(); } } AttributeList attribList = jmxConnection getAttributes(objName, attribs); attribList add(0, new Attribute(KEY OBJECT NAME ATTRIBUTE, objName)); return attribList; } }",1.0,
1122,1122,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\MBeansRegExQueryFilter.,MBeansRegExQueryFilter,"public class MBeansRegExQueryFilter extends RegExQueryFilter { public MBeansRegExQueryFilter(QueryFilter next) { super(next); } protected boolean matches(Object data, Map regex) throws Exception { try { Method method = this getClass() getDeclaredMethod( matches , new Class[] { data getClass(), Map class }); return ((Boolean)method invoke(this, new Object[] { data, regex })) booleanValue(); } catch (NoSuchMethodException e) { return false; } } protected boolean matches(ObjectInstance data, Map regex) { return matches(data getObjectName(), regex); } protected boolean matches(ObjectName data, Map regex) { for (Iterator i = regex keySet() iterator(); i hasNext();) { String key = (String)i next(); String target = data getKeyProperty(key); if (target != null && !((Pattern)regex get(key)) matcher(target) matches()) { return false; } } return true; } protected boolean matches(AttributeList data, Map regex) { for (Iterator i = regex keySet() iterator(); i hasNext();) { String key = (String)i next(); for (Iterator j = data iterator(); j hasNext();) { Attribute attrib = (Attribute)j next(); if (attrib getName() equals(MBeansAttributeQueryFilter KEY OBJECT NAME ATTRIBUTE)) { String target = ((ObjectName)attrib getValue()) getKeyProperty(key); if (target == null || !((Pattern)regex get(key)) matcher(target) matches()) { return false; } else { break; } } else if (attrib getName() equals(key)) { if (!((Pattern)regex get(key)) matcher(attrib getValue() toString()) matches()) { return false; } else { break; } } else { return false; } } } return true; } }",1.0,
1123,1123,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\MessagesQueryFilter.,MessagesQueryFilter,"public class MessagesQueryFilter extends AbstractQueryFilter { private MBeanServerConnection jmxConnection; private ObjectName destName; public MessagesQueryFilter(MBeanServerConnection jmxConnection, ObjectName destName) { super(null); this jmxConnection = jmxConnection; this destName = destName; } public List query(List queries) throws Exception { String selector = ; for (Iterator i = queries iterator(); i hasNext();) { selector = selector + ( + i next() toString() + ) AND ; } if (!selector equals( )) { selector = selector substring(0, selector length() - 5); } return queryMessages(selector); } protected List queryMessages(String selector) throws Exception { CompositeData[] messages = (CompositeData[]) jmxConnection invoke(destName, browse , new Object[] {selector}, new String[] {}); return Arrays asList(messages); } }",1.0,
1124,1124,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\PropertiesViewFilter.,PropertiesViewFilter,"public class PropertiesViewFilter implements QueryFilter { protected QueryFilter next; protected Set viewFilter; public PropertiesViewFilter(QueryFilter next) { this(null, next); } public PropertiesViewFilter(Set viewFilter, QueryFilter next) { this next = next; this viewFilter = viewFilter; } public List<Map<Object, Object>> query(String query) throws Exception { return filterViewCollection(next query(query), viewFilter); } public List<Map<Object, Object>> query(List queries) throws Exception { return filterViewCollection(next query(queries), viewFilter); } protected List<Map<Object, Object>> filterViewCollection(Collection<Map<Object, Object>> result, Set viewFilter) { List<Map<Object, Object>> newCollection = new ArrayList<Map<Object, Object>>(); for (Iterator<Map<Object, Object>> i = result iterator(); i hasNext();) { newCollection add(filterView(i next())); } return newCollection; } protected Map<Object, Object> filterView(Map<Object, Object> data) { if (viewFilter == null || viewFilter isEmpty()) { return data; } Map<Object, Object> newData; try { newData = data getClass() newInstance(); } catch (Exception e) { newData = new HashMap<Object, Object>(); } for (Iterator i = viewFilter iterator(); i hasNext();) { Object key = i next(); Object val = data get(key); if (val != null) { newData put(key, val); } } return newData; } }",1.0,
1125,1125,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\RegExQueryFilter.,RegExQueryFilter,"public abstract class RegExQueryFilter extends AbstractQueryFilter { public static final String REGEX PREFIX = REGEX QUERY ; protected RegExQueryFilter(QueryFilter next) { super(next); } SuppressWarnings({ rawtypes , unchecked }) public List query(List queries) throws Exception { Map regex = new HashMap(); List newQueries = new ArrayList(); for (Iterator i = queries iterator(); i hasNext();) { String token = (String)i next(); String key = ; String val = ; int pos = token indexOf( = ); if (pos >= 0) { val = token substring(pos + 1); key = token substring(0, pos); } if (isRegularExpression(val)) { regex put(key, compileQuery(val)); } else { newQueries add(token); } } return filterCollectionUsingRegEx(regex, next query(newQueries)); } protected boolean isRegularExpression(String query) { return query startsWith(REGEX PREFIX); } protected Pattern compileQuery(String query) { return Pattern compile(query substring(REGEX PREFIX length())); } SuppressWarnings({ rawtypes , unchecked }) protected List filterCollectionUsingRegEx(Map regex, List data) throws Exception { if (regex == null || regex isEmpty()) { return data; } List filteredElems = new ArrayList(); for (Iterator i = data iterator(); i hasNext();) { Object dataElem = i next(); if (matches(dataElem, regex)) { filteredElems add(dataElem); } } return filteredElems; } SuppressWarnings( rawtypes ) protected abstract boolean matches(Object data, Map regex) throws Exception; }",1.0,
1126,1126,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\ResultTransformFilter.,ResultTransformFilter,public abstract class ResultTransformFilter implements QueryFilter { private QueryFilter next; protected ResultTransformFilter(QueryFilter next) { this next = next; } public List query(String query) throws Exception { return transformList(next query(query)); } public List<Object> query(List queries) throws Exception { return transformList(next query(queries)); } protected List<Object> transformList(List<Object> result) throws Exception { List<Object> props = new ArrayList<Object>(); for (Iterator<Object> i = result iterator(); i hasNext();) { props add(transformElement(i next())); } return props; } protected abstract Object transformElement(Object obj) throws Exception; },1.0,
1127,1127,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\StubQueryFilter.,StubQueryFilter,public class StubQueryFilter implements QueryFilter { private List data; public StubQueryFilter(List data) { this data = data; } public List query(String queryStr) throws Exception { return data; } public List query(List queries) throws Exception { return data; } },1.0,
1128,1128,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\WildcardToMsgSelectorTransformFilter.,WildcardToMsgSelectorTransformFilter,"public class WildcardToMsgSelectorTransformFilter extends WildcardTransformFilter { public WildcardToMsgSelectorTransformFilter(QueryFilter next) { super(next); } protected boolean isWildcardQuery(String query) { String key = query; String val = ; int pos = key indexOf( = ); if (pos >= 0) { val = key substring(pos + 1); } return val startsWith( ) && val endsWith( ) && ((val indexOf( * ) >= 0) || (val indexOf( ) >= 0)); } protected String transformWildcardQuery(String query) { String key = query; String val = ; int pos = key indexOf( = ); if (pos >= 0) { val = key substring(pos + 1); key = key substring(0, pos); } val = val replaceAll( [ ] , ); val = val replaceAll( [*] , % ); return key + LIKE + val; } }",1.0,
1129,1129,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\WildcardToRegExTransformFilter.,WildcardToRegExTransformFilter,"public class WildcardToRegExTransformFilter extends WildcardTransformFilter { public WildcardToRegExTransformFilter(RegExQueryFilter next) { super(next); } protected boolean isWildcardQuery(String query) { String key = query; String val = ; int pos = key indexOf( = ); if (pos >= 0) { val = key substring(pos + 1); } return (val indexOf( * ) >= 0) || (val indexOf( ) >= 0); } protected String transformWildcardQuery(String query) { String key = query; String val = ; int pos = key indexOf( = ); if (pos >= 0) { val = key substring(pos + 1); key = key substring(0, pos); } val = val replaceAll( [ ] , ); val = val replaceAll( [ ] , ); val = val replaceAll( [*] , * ); val = ( + val + ) ; val = RegExQueryFilter REGEX PREFIX + val; return key + = + val; } }",1.0,
1130,1130,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\WildcardTransformFilter.,WildcardTransformFilter,public abstract class WildcardTransformFilter extends AbstractQueryFilter { protected WildcardTransformFilter(QueryFilter next) { super(next); } public List query(List queries) throws Exception { List newQueries = new ArrayList(); for (Iterator i = queries iterator(); i hasNext();) { String queryToken = (String)i next(); if (isWildcardQuery(queryToken)) { newQueries add(transformWildcardQuery(queryToken)); } else { newQueries add(queryToken); } } return next query(newQueries); } protected abstract boolean isWildcardQuery(String query); protected abstract String transformWildcardQuery(String query); },1.0,
1131,1131,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\formatter\CommandShellOutputFormatter.,CommandShellOutputFormatter,public class CommandShellOutputFormatter implements OutputFormatter { private OutputStream outputStream; private PrintStream out; public CommandShellOutputFormatter(OutputStream out) { this outputStream = out; if (out instanceof PrintStream) { this out = (PrintStream)out; } else { this out = new PrintStream(out); } } public OutputStream getOutputStream() { return outputStream; } public void printMBean(ObjectInstance mbean) { printMBean(mbean getObjectName()); } public void printMBean(ObjectName mbean) { printMBean(mbean getKeyPropertyList()); } public void printMBean(AttributeList mbean) { for (Iterator i = mbean iterator(); i hasNext();) { Attribute attrib = (Attribute)i next(); if (attrib getValue() instanceof ObjectName) { printMBean((ObjectName)attrib getValue()); } else if (attrib getValue() instanceof ObjectInstance) { printMBean((ObjectInstance)attrib getValue()); } else { out println(attrib getName() + = + attrib getValue() toString()); out println(); } } } public void printMBean(Map mbean) { for (Iterator i = mbean keySet() iterator(); i hasNext();) { String key = (String)i next(); String val = mbean get(key) toString(); out println(key + = + val); } out println(); } public void printMBean(Collection mbean) { for (Iterator i = mbean iterator(); i hasNext();) { Object obj = i next(); if (obj instanceof ObjectInstance) { printMBean((ObjectInstance)obj); } else if (obj instanceof ObjectName) { printMBean((ObjectName)obj); } else if (obj instanceof Map) { printMBean((Map)obj); } else if (obj instanceof AttributeList) { printMBean((AttributeList)obj); } else if (obj instanceof Collection) { printMessage((Collection)obj); } else { printException(new UnsupportedOperationException( Unknown mbean type + obj getClass() getName())); } } } public void printMessage(Map msg) { for (Iterator i = msg keySet() iterator(); i hasNext();) { String key = (String)i next(); String val = msg get(key) toString(); out println(key + = + val); } out println(); } public void printMessage(Message msg) { } public void printMessage(Collection msg) { for (Iterator i = msg iterator(); i hasNext();) { Object obj = i next(); if (obj instanceof Message) { printMessage((Message)obj); } else if (obj instanceof Map) { printMessage((Map)obj); } else if (obj instanceof Collection) { printMessage((Collection)obj); } else { printException(new UnsupportedOperationException( Unknown message type + obj getClass() getName())); } } } public void printHelp(String[] helpMsgs) { for (int i = 0; i < helpMsgs length; i++) { out println(helpMsgs[i]); } out println(); } public void printInfo(String info) { out println( INFO + info); } public void printException(Exception e) { out println( ERROR + e); e printStackTrace(out); } public void printVersion(String version) { out println( ); out println( ActiveMQ + version); out println( For help or more information please see http out println( ); } public void print(Map map) { for (Iterator i = map keySet() iterator(); i hasNext();) { String key = (String)i next(); String val = map get(key) toString(); out println(key + = + val); } out println(); } public void print(String[] strings) { for (int i = 0; i < strings length; i++) { out println(strings[i]); } out println(); } public void print(Collection collection) { for (Iterator i = collection iterator(); i hasNext();) { out println(i next() toString()); } out println(); } public void print(String string) { out println(string); } },1.0,
1132,1132,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\util\AmqMessagesUtil.,AmqMessagesUtil,"public final class AmqMessagesUtil { public static final String JMS MESSAGE HEADER PREFIX = JMS HEADER FIELD ; public static final String JMS MESSAGE CUSTOM PREFIX = JMS CUSTOM FIELD ; public static final String JMS MESSAGE BODY PREFIX = JMS BODY FIELD ; private AmqMessagesUtil() { } public static List getAllMessages(URI brokerUrl, Destination dest) throws Exception { return getMessages(brokerUrl, dest, ); } public static List getMessages(URI brokerUrl, Destination dest, String selector) throws Exception { return createMessageQueryFilter(brokerUrl, dest) query(selector); } public static List getMessages(ConnectionFactory connectionFactory, Destination dest, String selector) throws Exception { return createMessageQueryFilter(connectionFactory, dest) query(selector); } public static List getMessages(URI brokerUrl, Destination dest, List selectors) throws Exception { return createMessageQueryFilter(brokerUrl, dest) query(selectors); } public static List getMessages(ConnectionFactory connectionFactory, Destination dest, List selectors) throws Exception { return createMessageQueryFilter(connectionFactory, dest) query(selectors); } public static List filterMessagesView(List messages, Set groupViews, Set attributeViews) throws Exception { return (new PropertiesViewFilter(attributeViews, new GroupPropertiesViewFilter(groupViews, new MapTransformFilter(new StubQueryFilter(messages))))) query( ); } public static QueryFilter createMessageQueryFilter(URI brokerUrl, Destination dest) { return new WildcardToMsgSelectorTransformFilter(new AmqMessagesQueryFilter(brokerUrl, dest)); } public static QueryFilter createMessageQueryFilter(ConnectionFactory connectionFactory, Destination dest) { return new WildcardToMsgSelectorTransformFilter(new AmqMessagesQueryFilter(connectionFactory, dest)); } }",1.0,
1133,1133,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\util\JmxMBeansUtil.,JmxMBeansUtil,"public final class JmxMBeansUtil { private JmxMBeansUtil() { } public static List getAllBrokers(MBeanServerConnection jmxConnection) throws Exception { return (new MBeansObjectNameQueryFilter(jmxConnection)) query( type=Broker,brokerName=* ); } public static List getBrokersByName(MBeanServerConnection jmxConnection, String brokerName) throws Exception { return (new MBeansObjectNameQueryFilter(jmxConnection)) query( type=Broker,brokerName= + brokerName); } public static List getAllBrokers(MBeanServerConnection jmxConnection, Set attributes) throws Exception { return (new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))) query( type=Broker ); } public static List getBrokersByName(MBeanServerConnection jmxConnection, String brokerName, Set attributes) throws Exception { return (new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection))) query( type=Broker,brokerName= + brokerName); } public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList) throws Exception { if (queryList == null || queryList size() == 0) { return createMBeansObjectNameQuery(jmxConnection) query( ); } else { return createMBeansObjectNameQuery(jmxConnection) query(queryList); } } public static List queryMBeans(MBeanServerConnection jmxConnection, List queryList, Set attributes) throws Exception { if (queryList == null || queryList size() == 0) { return createMBeansAttributeQuery(jmxConnection, attributes) query( ); } else { return createMBeansAttributeQuery(jmxConnection, attributes) query(queryList); } } public static List queryMBeans(MBeanServerConnection jmxConnection, String queryString) throws Exception { return createMBeansObjectNameQuery(jmxConnection) query(queryString); } public static List queryMBeans(MBeanServerConnection jmxConnection, String queryString, Set attributes) throws Exception { return createMBeansAttributeQuery(jmxConnection, attributes) query(queryString); } public static List filterMBeansView(List mbeans, Set viewFilter) throws Exception { return new PropertiesViewFilter(viewFilter, new MapTransformFilter(new StubQueryFilter(mbeans))) query( ); } public static String createQueryString(String query, String param) { return query replaceAll( %1 , param); } public static String createQueryString(String query, List params) { String output = query; int count = 1; for (Iterator i = params iterator(); i hasNext();) { output = output replaceAll( % + count++, i next() toString()); } return output; } public static QueryFilter createMBeansObjectNameQuery(MBeanServerConnection jmxConnection) { return new WildcardToRegExTransformFilter(new MBeansRegExQueryFilter(new MBeansObjectNameQueryFilter(jmxConnection))); } public static QueryFilter createMBeansAttributeQuery(MBeanServerConnection jmxConnection, Set attributes) { return new MBeansAttributeQueryFilter(jmxConnection, attributes, new MBeansObjectNameQueryFilter(jmxConnection)); } public static QueryFilter createMessageQueryFilter(MBeanServerConnection jmxConnection, ObjectName destName) { return new WildcardToMsgSelectorTransformFilter(new MessagesQueryFilter(jmxConnection, destName)); } public static List filterMessagesView(List messages, Set groupViews, Set attributeViews) throws Exception { return (new PropertiesViewFilter(attributeViews, new GroupPropertiesViewFilter(groupViews, new MapTransformFilter(new StubQueryFilter(messages))))) query( ); } }",1.0,
1134,1134,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\util\SimpleConsole.,SimpleConsole,public final class SimpleConsole { private SimpleConsole() { } public static void main(String[] args) { CommandMessageListener listener = new CommandMessageListener(null); try { BufferedReader reader = new BufferedReader(new InputStreamReader(System in)); while (true) { String line = reader readLine(); if (line == null || quit equalsIgnoreCase(line)) { break; } line = line trim(); if (line length() == 0) { continue; } System out println(listener processCommandText(line)); } } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } },1.0,
1136,1136,data,\smellybot\activemq\activemq-console\src\test\java\org\apache\activemq\simple\Consumer.,Consumer,"public final class Consumer { private Consumer() { } public static void main(String[] args) throws JMSException, InterruptedException { String url = tcp if (args length > 0) { url = args[0]; } ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url); Destination destination = new ActiveMQQueue( TEST QUEUE ); Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(destination); for (;;) { System out println( Waiting for message ); Message message = consumer receive(); if (message == null) { break; } System out println( Got message + message); } connection close(); } }",1.0,
1137,1137,data,\smellybot\activemq\activemq-console\src\test\java\org\apache\activemq\simple\Producer.,Producer,"public final class Producer { private static final Logger LOG = LoggerFactory getLogger(Producer class); private Producer() { } public static void main(String[] args) throws JMSException, InterruptedException { String url = peer if (args length > 0) { url = args[0]; } ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url); Destination destination = new ActiveMQQueue( TEST QUEUE ); Connection connection = connectionFactory createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); TextMessage message = session createTextMessage(); for (int i = 0; i < 1000; i++) { message setText( This is message + (i + 1)); LOG info( Sending message + message getText()); producer send(message); Thread sleep(1000); } connection close(); } }",1.0,
1138,1138,data,\smellybot\activemq\activemq-fileserver\src\main\java\org\apache\activemq\util\FilenameGuardFilter.,FilenameGuardFilter,"public class FilenameGuardFilter implements Filter { private static final Logger LOG = LoggerFactory getLogger(FilenameGuardFilter class); public void destroy() { } public void init(FilterConfig config) throws ServletException { } public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (request instanceof HttpServletRequest) { HttpServletRequest httpRequest = (HttpServletRequest)request; GuardedHttpServletRequest guardedRequest = new GuardedHttpServletRequest(httpRequest); chain doFilter(guardedRequest, response); } else { chain doFilter(request, response); } } private static class GuardedHttpServletRequest extends HttpServletRequestWrapper { public GuardedHttpServletRequest(HttpServletRequest httpRequest) { super(httpRequest); } private String guard(String filename) { String guarded = filename replace( , ); if (LOG isDebugEnabled()) { LOG debug( guarded + filename + to + guarded); } return guarded; } Override public String getParameter(String name) { if (name equals( Destination )) { return guard(super getParameter(name)); } else { return super getParameter(name); } } Override public String getPathInfo() { return guard(super getPathInfo()); } Override public String getPathTranslated() { return guard(super getPathTranslated()); } Override public String getRequestURI() { return guard(super getRequestURI()); } } }",1.0,
1139,1139,data,\smellybot\activemq\activemq-fileserver\src\main\java\org\apache\activemq\util\FilenameGuardFilter.,GuardedHttpServletRequest,"private static class GuardedHttpServletRequest extends HttpServletRequestWrapper { public GuardedHttpServletRequest(HttpServletRequest httpRequest) { super(httpRequest); } private String guard(String filename) { String guarded = filename replace( , ); if (LOG isDebugEnabled()) { LOG debug( guarded + filename + to + guarded); } return guarded; } Override public String getParameter(String name) { if (name equals( Destination )) { return guard(super getParameter(name)); } else { return super getParameter(name); } } Override public String getPathInfo() { return guard(super getPathInfo()); } Override public String getPathTranslated() { return guard(super getPathTranslated()); } Override public String getRequestURI() { return guard(super getRequestURI()); } }",1.0,
1141,1141,data,\smellybot\activemq\activemq-fileserver\src\main\java\org\apache\activemq\util\RestFilter.,RestFilter,"public class RestFilter implements Filter { private static final Logger LOG = LoggerFactory getLogger(RestFilter class); private static final String HTTP HEADER DESTINATION = Destination ; private static final String HTTP METHOD MOVE = MOVE ; private static final String HTTP METHOD PUT = PUT ; private static final String HTTP METHOD GET = GET ; private static final String HTTP METHOD DELETE = DELETE ; private String readPermissionRole; private String writePermissionRole; private FilterConfig filterConfig; public void init(FilterConfig filterConfig) throws UnavailableException { this filterConfig = filterConfig; readPermissionRole = filterConfig getInitParameter( read-permission-role ); writePermissionRole = filterConfig getInitParameter( write-permission-role ); } private File locateFile(HttpServletRequest request) { return new File(filterConfig getServletContext() getRealPath(request getServletPath()), request getPathInfo()); } public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { if (!(request instanceof HttpServletRequest && response instanceof HttpServletResponse)) { if (LOG isDebugEnabled()) { LOG debug( request not HTTP, can not understand + request toString()); } chain doFilter(request, response); return; } HttpServletRequest httpRequest = (HttpServletRequest)request; HttpServletResponse httpResponse = (HttpServletResponse)response; if (httpRequest getMethod() equals(HTTP METHOD MOVE)) { doMove(httpRequest, httpResponse); } else if (httpRequest getMethod() equals(HTTP METHOD PUT)) { doPut(httpRequest, httpResponse); } else if (httpRequest getMethod() equals(HTTP METHOD GET)) { if (checkGet(httpRequest, httpResponse)) { chain doFilter(httpRequest, httpResponse); } } else if (httpRequest getMethod() equals(HTTP METHOD DELETE)) { doDelete(httpRequest, httpResponse); } else { chain doFilter(httpRequest, httpResponse); } } protected void doMove(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { if (LOG isDebugEnabled()) { LOG debug( RESTful file access MOVE request for + request getRequestURI()); } if (writePermissionRole != null && !request isUserInRole(writePermissionRole)) { response sendError(HttpURLConnection HTTP FORBIDDEN); return; } File file = locateFile(request); String destination = request getHeader(HTTP HEADER DESTINATION); if (destination == null) { response sendError(HttpURLConnection HTTP BAD REQUEST, Destination header not found ); return; } try { URL destinationUrl = new URL(destination); IOHelper copyFile(file, new File(destinationUrl getFile())); IOHelper deleteFile(file); } catch (IOException e) { response sendError(HttpURLConnection HTTP INTERNAL ERROR); return; } response setStatus(HttpURLConnection HTTP NO CONTENT); } protected boolean checkGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { if (LOG isDebugEnabled()) { LOG debug( RESTful file access GET request for + request getRequestURI()); } if (readPermissionRole != null && !request isUserInRole(readPermissionRole)) { response sendError(HttpURLConnection HTTP FORBIDDEN); return false; } else { return true; } } protected void doPut(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { if (LOG isDebugEnabled()) { LOG debug( RESTful file access PUT request for + request getRequestURI()); } if (writePermissionRole != null && !request isUserInRole(writePermissionRole)) { response sendError(HttpURLConnection HTTP FORBIDDEN); return; } File file = locateFile(request); if (file exists()) { boolean success = file delete(); if (!success) { response sendError(HttpURLConnection HTTP INTERNAL ERROR); return; } } FileOutputStream out = new FileOutputStream(file); try { IOHelper copyInputStream(request getInputStream(), out); } catch (IOException e) { LOG warn( Exception occured , e); throw e; } finally { out close(); } response setStatus(HttpURLConnection HTTP NO CONTENT); } protected void doDelete(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { if (LOG isDebugEnabled()) { LOG debug( RESTful file access DELETE request for + request getRequestURI()); } if (writePermissionRole != null && !request isUserInRole(writePermissionRole)) { response sendError(HttpURLConnection HTTP FORBIDDEN); return; } File file = locateFile(request); if (!file exists()) { response sendError(HttpURLConnection HTTP NOT FOUND); return; } boolean success = IOHelper deleteFile(file); if (success) { response setStatus(HttpURLConnection HTTP NO CONTENT); } else { response sendError(HttpURLConnection HTTP INTERNAL ERROR); } } public void destroy() { } }",1.0,
1143,1143,data,\smellybot\activemq\activemq-fileserver\src\test\java\org\apache\activemq\util\HttpTestSupport.,HttpTestSupport,"public abstract class HttpTestSupport extends TestCase { private static final Logger LOG = LoggerFactory getLogger(HttpTestSupport class); BrokerService broker; Server server; ActiveMQConnectionFactory factory; Connection connection; Session session; MessageProducer producer; Destination destination; protected boolean createBroker = true; final File homeDir = new File( src/main/webapp/uploads/ ); Override protected void setUp() throws Exception { server = new Server(); SelectChannelConnector connector = new SelectChannelConnector(); connector setPort(0); connector setServer(server); WebAppContext context = new WebAppContext(); context setResourceBase( src/main/webapp ); context setContextPath( / ); context setServer(server); server setHandler(context); server setConnectors(new Connector[] { connector }); server start(); int port = connector getLocalPort(); waitForJettySocketToAccept( http if (createBroker) { broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(true); broker addConnector( vm broker start(); broker waitUntilStarted(); factory = new ActiveMQConnectionFactory( vm factory getBlobTransferPolicy() setDefaultUploadUrl( http connection = factory createConnection(); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); destination = session createQueue( test ); producer = session createProducer(destination); IOHelper deleteFile(homeDir); homeDir mkdir(); } } Override protected void tearDown() throws Exception { server stop(); if (createBroker) { session close(); connection close(); broker stop(); broker waitUntilStopped(); IOHelper deleteFile(homeDir); } } public void waitForJettySocketToAccept(String bindLocation) throws Exception { final URL url = new URL(bindLocation); assertTrue( Jetty endpoint is available , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { boolean canConnect = false; try { Socket socket = SocketFactory getDefault() createSocket(url getHost(), url getPort()); socket close(); canConnect = true; } catch (Exception e) { LOG warn( verify jetty available, failed to connect to + url + e); } return canConnect; }}, 60 * 1000)); } }",1.0,
1145,1145,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\SecureSocketConnectorFactory.,SecureSocketConnectorFactory,"public class SecureSocketConnectorFactory extends SocketConnectorFactory { private String keyPassword = System getProperty( javax net ssl keyPassword ); private String keyStorePassword = System getProperty( javax net ssl keyStorePassword ); private String keyStore = System getProperty( javax net ssl keyStore ); private String keyStoreType; private String secureRandomCertficateAlgorithm; private String trustCertificateAlgorithm; private String keyCertificateAlgorithm; private String protocol; private String auth; private SslContext context; public SecureSocketConnectorFactory(SslContext context) { this context = context; } Override public Connector createConnector() throws Exception { IntrospectionSupport setProperties(this, getTransportOptions()); SslConnector sslConnector; if (Krb5AndCertsSslSocketConnector isKrb(auth)) { sslConnector = new Krb5AndCertsSslSocketConnector(); ((Krb5AndCertsSslSocketConnector)sslConnector) setMode(auth); } else { sslConnector = new SslSelectChannelConnector(); } SSLContext sslContext = context == null null context getSSLContext(); SslContextFactory factory = sslConnector getSslContextFactory(); if (context != null) { factory setSslContext(sslContext); } else { if (keyStore != null) { factory setKeyStorePath(keyStore); } if (keyStorePassword != null) { factory setKeyStorePassword(keyStorePassword); } if (keyPassword == null && keyStorePassword != null) { factory setKeyStorePassword(keyStorePassword); } if (keyStoreType != null) { factory setKeyStoreType(keyStoreType); } if (secureRandomCertficateAlgorithm != null) { factory setSecureRandomAlgorithm(secureRandomCertficateAlgorithm); } if (keyCertificateAlgorithm != null) { factory setSslKeyManagerFactoryAlgorithm(keyCertificateAlgorithm); } if (trustCertificateAlgorithm != null) { factory setTrustManagerFactoryAlgorithm(trustCertificateAlgorithm); } if (protocol != null) { factory setProtocol(protocol); } } return sslConnector; } public String getKeyStore() { return keyStore; } public void setKeyStore(String keyStore) { this keyStore = keyStore; } public String getKeyPassword() { return keyPassword; } public void setKeyPassword(String keyPassword) { this keyPassword = keyPassword; } public String getKeyStoreType() { return keyStoreType; } public void setKeyStoreType(String keyStoreType) { this keyStoreType = keyStoreType; } public String getKeyStorePassword() { return keyStorePassword; } public void setKeyStorePassword(String keyStorePassword) { this keyStorePassword = keyStorePassword; } public String getProtocol() { return protocol; } public void setProtocol(String protocol) { this protocol = protocol; } public String getSecureRandomCertficateAlgorithm() { return secureRandomCertficateAlgorithm; } public void setSecureRandomCertficateAlgorithm(String secureRandomCertficateAlgorithm) { this secureRandomCertficateAlgorithm = secureRandomCertficateAlgorithm; } public String getKeyCertificateAlgorithm() { return keyCertificateAlgorithm; } public void setKeyCertificateAlgorithm(String keyCertificateAlgorithm) { this keyCertificateAlgorithm = keyCertificateAlgorithm; } public String getTrustCertificateAlgorithm() { return trustCertificateAlgorithm; } public void setTrustCertificateAlgorithm(String trustCertificateAlgorithm) { this trustCertificateAlgorithm = trustCertificateAlgorithm; } public String getAuth() { return auth; } public void setAuth(String auth) { this auth = auth; } }",1.0,
1146,1146,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\SocketConnectorFactory.,SocketConnectorFactory,"public class SocketConnectorFactory { private Map<String, Object> transportOptions; public Connector createConnector() throws Exception { SelectChannelConnector connector = new SelectChannelConnector(); IntrospectionSupport setProperties(connector, transportOptions, ); return connector; } public Map<String, Object> getTransportOptions() { return transportOptions; } public void setTransportOptions(Map<String, Object> transportOptions) { this transportOptions = transportOptions; } }",1.0,
1147,1147,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\WebTransportServerSupport.,WebTransportServerSupport,"abstract public class WebTransportServerSupport extends TransportServerSupport { protected URI bindAddress; protected Server server; protected Connector connector; protected SocketConnectorFactory socketConnectorFactory; protected String host; public WebTransportServerSupport(URI location) { super(location); } public void bind() throws Exception { URI bind = getBindLocation(); String bindHost = bind getHost(); bindHost = (bindHost == null || bindHost length() == 0) localhost bindHost; InetAddress addr = InetAddress getByName(bindHost); host = addr getCanonicalHostName(); connector setHost(host); connector setPort(bindAddress getPort()); connector setServer(server); server addConnector(connector); if (addr isAnyLocalAddress()) { host = InetAddressUtil getLocalHostName(); } setConnectURI(new URI(bind getScheme(), bind getUserInfo(), host, bindAddress getPort(), bind getPath(), bind getQuery(), bind getFragment())); } }",1.0,
1148,1148,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\discovery\http\DiscoveryRegistryServlet.,DiscoveryRegistryServlet,"public class DiscoveryRegistryServlet extends HttpServlet { private static final Logger LOG = LoggerFactory getLogger(HTTPDiscoveryAgent class); long maxKeepAge = 1000*60*60; ConcurrentHashMap<String, ConcurrentHashMap<String, Long>> serviceGroups = new ConcurrentHashMap<String, ConcurrentHashMap<String, Long>>(); Override protected void doPut(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String group = req getPathInfo(); String service = req getHeader( service ); LOG debug( Registering group= +group+ , service= +service); ConcurrentHashMap<String, Long> services = getServiceGroup(group); services put(service, System currentTimeMillis()); } private ConcurrentHashMap<String, Long> getServiceGroup(String group) { ConcurrentHashMap<String, Long> rc = serviceGroups get(group); if( rc == null ) { rc = new ConcurrentHashMap<String, Long>(); serviceGroups put(group, rc); } return rc; } Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { try { long freshness = 1000*30; String p = req getParameter( freshness ); if( p!=null ) { freshness = Long parseLong(p); } String group = req getPathInfo(); LOG debug( group= +group); ConcurrentHashMap<String, Long> services = getServiceGroup(group); PrintWriter writer = resp getWriter(); long now = System currentTimeMillis(); long dropTime = now-maxKeepAge; long minimumTime = now-freshness; ArrayList<String> dropList = new ArrayList<String>(); for (Map Entry<String, Long> entry services entrySet()) { if( entry getValue() > minimumTime ) { writer println(entry getKey()); } else if( entry getValue() < dropTime ) { dropList add(entry getKey()); } } for (String service dropList) { services remove(service); } } catch (Exception e) { resp sendError(HttpServletResponse SC INTERNAL SERVER ERROR, Error occured +e); } } Override protected void doDelete(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { String group = req getPathInfo(); String service = req getHeader( service ); LOG debug( Unregistering group= +group+ , service= +service); ConcurrentHashMap<String, Long> services = getServiceGroup(group); services remove(service); } }",1.0,
1150,1150,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\discovery\http\HTTPDiscoveryAgent.,HTTPDiscoveryAgent,"public class HTTPDiscoveryAgent implements DiscoveryAgent { private static final Logger LOG = LoggerFactory getLogger(HTTPDiscoveryAgent class); private String registryURL = http private HttpClient httpClient = new DefaultHttpClient(); private AtomicBoolean running = new AtomicBoolean(); private final AtomicReference<DiscoveryListener> discoveryListener = new AtomicReference<DiscoveryListener>(); private final HashSet<String> registeredServices = new HashSet<String>(); private final HashMap<String, SimpleDiscoveryEvent> discoveredServices = new HashMap<String, SimpleDiscoveryEvent>(); private Thread thread; private long updateInterval = 1000 * 10; SuppressWarnings( unused ) private String brokerName; private boolean startEmbeddRegistry = false; private Service jetty; private AtomicInteger startCounter = new AtomicInteger(0); private long initialReconnectDelay = 1000; private long maxReconnectDelay = 1000 * 30; private long backOffMultiplier = 2; private boolean useExponentialBackOff = true; private int maxReconnectAttempts; private final Object sleepMutex = new Object(); private long minConnectTime = 5000; class SimpleDiscoveryEvent extends DiscoveryEvent { private int connectFailures; private long reconnectDelay = initialReconnectDelay; private long connectTime = System currentTimeMillis(); private AtomicBoolean failed = new AtomicBoolean(false); private AtomicBoolean removed = new AtomicBoolean(false); public SimpleDiscoveryEvent(String service) { super(service); } } public String getGroup() { return null; } public void registerService(String service) throws IOException { synchronized (registeredServices) { registeredServices add(service); } doRegister(service); } synchronized private void doRegister(String service) { String url = registryURL; try { HttpPut method = new HttpPut(url); method addHeader( service , service); ResponseHandler<String> handler = new BasicResponseHandler(); String responseBody = httpClient execute(method, handler); LOG debug( PUT to + url + got a + responseBody); } catch (Exception e) { LOG debug( PUT to + url + failed with + e); } } SuppressWarnings( unused ) synchronized private void doUnRegister(String service) { String url = registryURL; try { HttpDelete method = new HttpDelete(url); method addHeader( service , service); ResponseHandler<String> handler = new BasicResponseHandler(); String responseBody = httpClient execute(method, handler); LOG debug( DELETE to + url + got a + responseBody); } catch (Exception e) { LOG debug( DELETE to + url + failed with + e); } } synchronized private Set<String> doLookup(long freshness) { String url = registryURL + freshness= + freshness; try { HttpGet method = new HttpGet(url); ResponseHandler<String> handler = new BasicResponseHandler(); String response = httpClient execute(method, handler); LOG debug( GET to + url + got a + response); Set<String> rc = new HashSet<String>(); Scanner scanner = new Scanner(response); while (scanner hasNextLine()) { String service = scanner nextLine(); if (service trim() length() != 0) { rc add(service); } } return rc; } catch (Exception e) { LOG debug( GET to + url + failed with + e); return null; } } public void serviceFailed(DiscoveryEvent devent) throws IOException { final SimpleDiscoveryEvent event = (SimpleDiscoveryEvent) devent; if (event failed compareAndSet(false, true)) { discoveryListener get() onServiceRemove(event); if (!event removed get()) { Thread thread = new Thread() { public void run() { if (event connectTime + minConnectTime > System currentTimeMillis()) { LOG debug( Failure occured soon after the discovery event was generated + It will be clasified as a connection failure + event); event connectFailures++; if (maxReconnectAttempts > 0 && event connectFailures >= maxReconnectAttempts) { LOG debug( Reconnect attempts exceeded + maxReconnectAttempts + tries Reconnecting has been disabled ); return; } synchronized (sleepMutex) { try { if (!running get() || event removed get()) { return; } LOG debug( Waiting + event reconnectDelay + ms before attepting to reconnect ); sleepMutex wait(event reconnectDelay); } catch (InterruptedException ie) { Thread currentThread() interrupt(); return; } } if (!useExponentialBackOff) { event reconnectDelay = initialReconnectDelay; } else { event reconnectDelay *= backOffMultiplier; if (event reconnectDelay > maxReconnectDelay) { event reconnectDelay = maxReconnectDelay; } } } else { event connectFailures = 0; event reconnectDelay = initialReconnectDelay; } if (!running get() || event removed get()) { return; } event connectTime = System currentTimeMillis(); event failed set(false); discoveryListener get() onServiceAdd(event); } }; thread setDaemon(true); thread start(); } } } public void setBrokerName(String brokerName) { this brokerName = brokerName; } public void setDiscoveryListener(DiscoveryListener discoveryListener) { this discoveryListener set(discoveryListener); } public void setGroup(String group) { } public void start() throws Exception { if (startCounter addAndGet(1) == 1) { if (startEmbeddRegistry) { jetty = createEmbeddedJettyServer(); Map<String, Object> props = new HashMap<String, Object>(); props put( agent , this); IntrospectionSupport setProperties(jetty, props); jetty start(); } running set(true); thread = new Thread( HTTPDiscovery Agent ) { Override public void run() { while (running get()) { try { update(); Thread sleep(updateInterval); } catch (InterruptedException e) { return; } } } }; thread setDaemon(true); thread start(); } } private Service createEmbeddedJettyServer() throws Exception { Class< > clazz = HTTPDiscoveryAgent class getClassLoader() loadClass( org apache activemq transport discovery http EmbeddedJettyServer ); return (Service) clazz newInstance(); } private void update() { synchronized (registeredServices) { for (String service registeredServices) { doRegister(service); } } DiscoveryListener discoveryListener = this discoveryListener get(); if (discoveryListener != null) { Set<String> activeServices = doLookup(updateInterval * 3); if (activeServices != null) { synchronized (discoveredServices) { HashSet<String> removedServices = new HashSet<String>(discoveredServices keySet()); removedServices removeAll(activeServices); HashSet<String> addedServices = new HashSet<String>(activeServices); addedServices removeAll(discoveredServices keySet()); addedServices removeAll(removedServices); for (String service addedServices) { SimpleDiscoveryEvent e = new SimpleDiscoveryEvent(service); discoveredServices put(service, e); discoveryListener onServiceAdd(e); } for (String service removedServices) { SimpleDiscoveryEvent e = discoveredServices remove(service); if (e != null) { e removed set(true); } discoveryListener onServiceRemove(e); } } } } } public void stop() throws Exception { if (startCounter decrementAndGet() == 0) { running set(false); if (thread != null) { thread join(updateInterval * 3); thread = null; } if (jetty != null) { jetty stop(); jetty = null; } } } public String getRegistryURL() { return registryURL; } public void setRegistryURL(String discoveryRegistryURL) { this registryURL = discoveryRegistryURL; } public long getUpdateInterval() { return updateInterval; } public void setUpdateInterval(long updateInterval) { this updateInterval = updateInterval; } public boolean isStartEmbeddRegistry() { return startEmbeddRegistry; } public void setStartEmbeddRegistry(boolean startEmbeddRegistry) { this startEmbeddRegistry = startEmbeddRegistry; } }",1.0,
1151,1151,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\discovery\http\HTTPDiscoveryAgent.,SimpleDiscoveryEvent,class SimpleDiscoveryEvent extends DiscoveryEvent { private int connectFailures; private long reconnectDelay = initialReconnectDelay; private long connectTime = System currentTimeMillis(); private AtomicBoolean failed = new AtomicBoolean(false); private AtomicBoolean removed = new AtomicBoolean(false); public SimpleDiscoveryEvent(String service) { super(service); } },1.0,
1152,1152,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\discovery\http\HTTPDiscoveryAgentFactory.,HTTPDiscoveryAgentFactory,"public class HTTPDiscoveryAgentFactory extends DiscoveryAgentFactory { protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException { try { Map options = URISupport parseParameters(uri); uri = URISupport removeQuery(uri); HTTPDiscoveryAgent rc = new HTTPDiscoveryAgent(); rc setRegistryURL(uri toString()); IntrospectionSupport setProperties(rc, options); return rc; } catch (Throwable e) { throw IOExceptionSupport create( Could not create discovery agent + uri, e); } } }",1.0,
1153,1153,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\http\BlockingQueueTransport.,BlockingQueueTransport,"public class BlockingQueueTransport extends TransportSupport { public static final long MAX TIMEOUT = 30000L; private BlockingQueue<Object> queue; public BlockingQueueTransport(BlockingQueue<Object> channel) { this queue = channel; } public BlockingQueue<Object> getQueue() { return queue; } public void oneway(Object command) throws IOException { try { boolean success = queue offer(command, MAX TIMEOUT, TimeUnit MILLISECONDS); if (!success) { throw new IOException( Fail to add to BlockingQueue Add timed out after + MAX TIMEOUT + ms size= + queue size()); } } catch (InterruptedException e) { throw new IOException( Fail to add to BlockingQueue Interrupted while waiting for space size= + queue size()); } } public String getRemoteAddress() { return blockingQueue + queue hashCode(); } protected void doStart() throws Exception { } protected void doStop(ServiceStopper stopper) throws Exception { } public int getReceiveCounter() { return 0; } }",1.0,
1154,1154,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\http\HttpClientTransport.,HttpClientTransport,"public class HttpClientTransport extends HttpTransportSupport { public static final int MAX CLIENT TIMEOUT = 30000; private static final Logger LOG = LoggerFactory getLogger(HttpClientTransport class); private static final IdGenerator CLIENT ID GENERATOR = new IdGenerator(); private HttpClient sendHttpClient; private HttpClient receiveHttpClient; private final String clientID = CLIENT ID GENERATOR generateId(); private boolean trace; private HttpGet httpMethod; private volatile int receiveCounter; private int soTimeout = MAX CLIENT TIMEOUT; private boolean useCompression = false; private boolean canSendCompressed = false; private int minSendAsCompressedSize = 0; public HttpClientTransport(TextWireFormat wireFormat, URI remoteUrl) { super(wireFormat, remoteUrl); } public FutureResponse asyncRequest(Object command) throws IOException { return null; } public void oneway(Object command) throws IOException { if (isStopped()) { throw new IOException( stopped ); } HttpPost httpMethod = new HttpPost(getRemoteUrl() toString()); configureMethod(httpMethod); String data = getTextWireFormat() marshalText(command); byte[] bytes = data getBytes( UTF-8 ); if (useCompression && canSendCompressed && bytes length > minSendAsCompressedSize) { ByteArrayOutputStream bytesOut = new ByteArrayOutputStream(); GZIPOutputStream stream = new GZIPOutputStream(bytesOut); stream write(bytes); stream close(); httpMethod addHeader( Content-Type , application/x-gzip ); if (LOG isTraceEnabled()) { LOG trace( Sending compressed, size = + bytes length + , compressed size = + bytesOut size()); } bytes = bytesOut toByteArray(); } ByteArrayEntity entity = new ByteArrayEntity(bytes); httpMethod setEntity(entity); HttpClient client = null; HttpResponse answer = null; try { client = getSendHttpClient(); HttpParams params = client getParams(); HttpConnectionParams setSoTimeout(params, soTimeout); answer = client execute(httpMethod); int status = answer getStatusLine() getStatusCode(); if (status != HttpStatus SC OK) { throw new IOException( Failed to post command + command + as response was + answer); } if (command instanceof ShutdownInfo) { try { stop(); } catch (Exception e) { LOG warn( Error trying to stop HTTP client + e, e); } } } catch (IOException e) { throw IOExceptionSupport create( Could not post command + command + due to + e, e); } finally { if (answer != null) { EntityUtils consume(answer getEntity()); } } } public Object request(Object command) throws IOException { return null; } private DataInputStream createDataInputStream(HttpResponse answer) throws IOException { Header encoding = answer getEntity() getContentEncoding(); if (encoding != null && gzip equalsIgnoreCase(encoding getValue())) { return new DataInputStream(new GZIPInputStream(answer getEntity() getContent())); } else { return new DataInputStream(answer getEntity() getContent()); } } public void run() { if (LOG isTraceEnabled()) { LOG trace( HTTP GET consumer thread starting + this); } HttpClient httpClient = getReceiveHttpClient(); URI remoteUrl = getRemoteUrl(); while (!isStopped() && !isStopping()) { httpMethod = new HttpGet(remoteUrl toString()); configureMethod(httpMethod); HttpResponse answer = null; try { answer = httpClient execute(httpMethod); int status = answer getStatusLine() getStatusCode(); if (status != HttpStatus SC OK) { if (status == HttpStatus SC REQUEST TIMEOUT) { LOG debug( GET timed out ); try { Thread sleep(1000); } catch (InterruptedException e) { onException(new InterruptedIOException()); break; } } else { onException(new IOException( Failed to perform GET on + remoteUrl + as response was + answer)); break; } } else { receiveCounter++; DataInputStream stream = createDataInputStream(answer); Object command = (Object)getTextWireFormat() unmarshal(stream); if (command == null) { LOG debug( Received null command from url + remoteUrl); } else { doConsume(command); } stream close(); } } catch (IOException e) { onException(IOExceptionSupport create( Failed to perform GET on + remoteUrl + Reason + e getMessage(), e)); break; } finally { if (answer != null) { try { EntityUtils consume(answer getEntity()); } catch (IOException e) { } } } } } public HttpClient getSendHttpClient() { if (sendHttpClient == null) { sendHttpClient = createHttpClient(); } return sendHttpClient; } public void setSendHttpClient(HttpClient sendHttpClient) { this sendHttpClient = sendHttpClient; } public HttpClient getReceiveHttpClient() { if (receiveHttpClient == null) { receiveHttpClient = createHttpClient(); } return receiveHttpClient; } public void setReceiveHttpClient(HttpClient receiveHttpClient) { this receiveHttpClient = receiveHttpClient; } protected void doStart() throws Exception { if (LOG isTraceEnabled()) { LOG trace( HTTP GET consumer thread starting + this); } HttpClient httpClient = getReceiveHttpClient(); URI remoteUrl = getRemoteUrl(); HttpHead httpMethod = new HttpHead(remoteUrl toString()); configureMethod(httpMethod); HttpOptions optionsMethod = new HttpOptions(remoteUrl toString()); ResponseHandler<String> handler = new BasicResponseHandler() { Override public String handleResponse(HttpResponse response) throws HttpResponseException, IOException { for(Header header response getAllHeaders()) { if (header getName() equals( Accepts-Encoding ) && header getValue() contains( gzip )) { LOG info( Broker Servlet supports GZip compression ); canSendCompressed = true; break; } } return super handleResponse(response); } }; try { httpClient execute(httpMethod, new BasicResponseHandler()); httpClient execute(optionsMethod, handler); } catch(Exception e) { throw new IOException( Failed to perform GET on + remoteUrl + as response was + e getMessage()); } super doStart(); } protected void doStop(ServiceStopper stopper) throws Exception { if (httpMethod != null) { httpMethod abort(); } } protected HttpClient createHttpClient() { DefaultHttpClient client = new DefaultHttpClient(new PoolingClientConnectionManager()); if (useCompression) { client addRequestInterceptor( new HttpRequestInterceptor() { Override public void process(HttpRequest request, HttpContext context) { request addHeader( Accept-Encoding , gzip ); } }); } if (getProxyHost() != null) { HttpHost proxy = new HttpHost(getProxyHost(), getProxyPort()); client getParams() setParameter(ConnRoutePNames DEFAULT PROXY, proxy); if(getProxyUser() != null && getProxyPassword() != null) { client getCredentialsProvider() setCredentials( new AuthScope(getProxyHost(), getProxyPort()), new UsernamePasswordCredentials(getProxyUser(), getProxyPassword())); } } return client; } protected void configureMethod(AbstractHttpMessage method) { method setHeader( clientID , clientID); } public boolean isTrace() { return trace; } public void setTrace(boolean trace) { this trace = trace; } public int getReceiveCounter() { return receiveCounter; } public int getSoTimeout() { return soTimeout; } public void setSoTimeout(int soTimeout) { this soTimeout = soTimeout; } public void setUseCompression(boolean useCompression) { this useCompression = useCompression; } public boolean isUseCompression() { return this useCompression; } public int getMinSendAsCompressedSize() { return minSendAsCompressedSize; } public void setMinSendAsCompressedSize(int minSendAsCompressedSize) { this minSendAsCompressedSize = minSendAsCompressedSize; } }",1.0,
1159,1159,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\http\HttpTransportSupport.,HttpTransportSupport,"public abstract class HttpTransportSupport extends TransportThreadSupport { private TextWireFormat textWireFormat; private URI remoteUrl; private String proxyHost; private int proxyPort = 8080; private String proxyUser; private String proxyPassword; public HttpTransportSupport(TextWireFormat textWireFormat, URI remoteUrl) { this textWireFormat = textWireFormat; this remoteUrl = remoteUrl; } public String toString() { return HTTP Reader + getRemoteUrl(); } public String getRemoteAddress() { return remoteUrl toString(); } public URI getRemoteUrl() { return remoteUrl; } public TextWireFormat getTextWireFormat() { return textWireFormat; } public void setTextWireFormat(TextWireFormat textWireFormat) { this textWireFormat = textWireFormat; } public String getProxyHost() { return proxyHost; } public void setProxyHost(String proxyHost) { this proxyHost = proxyHost; } public int getProxyPort() { return proxyPort; } public void setProxyPort(int proxyPort) { this proxyPort = proxyPort; } public String getProxyUser() { return proxyUser; } public void setProxyUser(String proxyUser) { this proxyUser = proxyUser; } public String getProxyPassword() { return proxyPassword; } public void setProxyPassword(String proxyPassword) { this proxyPassword = proxyPassword; } }",1.0,
1161,1161,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\https\HttpsClientTransport.,HttpsClientTransport,"public class HttpsClientTransport extends HttpClientTransport { public HttpsClientTransport(TextWireFormat wireFormat, URI remoteUrl) { super(wireFormat, remoteUrl); } }",1.0,
1162,1162,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\https\HttpsTransportFactory.,HttpsTransportFactory,"public class HttpsTransportFactory extends HttpTransportFactory { public TransportServer doBind(String brokerId, URI location) throws IOException { return doBind(location); } public TransportServer doBind(URI location) throws IOException { try { Map<String, String> options = new HashMap<String, String>(URISupport parseParameters(location)); HttpsTransportServer result = new HttpsTransportServer(location, this, SslContext getCurrentSslContext()); Map<String, Object> transportOptions = IntrospectionSupport extractProperties(options, transport ); result setTransportOption(transportOptions); return result; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } protected Transport createTransport(URI location, WireFormat wf) throws MalformedURLException { URI uri; try { uri = URISupport removeQuery(location); } catch (URISyntaxException e) { MalformedURLException cause = new MalformedURLException( Error removing query on + location); cause initCause(e); throw cause; } return new HttpsClientTransport(asTextWireFormat(wf), uri); } }",1.0,
1163,1163,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\https\HttpsTransportServer.,HttpsTransportServer,"public class HttpsTransportServer extends HttpTransportServer { private SslContext context; public HttpsTransportServer(URI uri, HttpsTransportFactory factory, SslContext context) { super(uri, factory); this context = context; this socketConnectorFactory = new SecureSocketConnectorFactory(context); } public void doStart() throws Exception { Connector sslConnector = socketConnectorFactory createConnector(); setConnector(sslConnector); super doStart(); } }",1.0,
1164,1164,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\https\Krb5AndCertsSslSocketConnector.,Krb5AndCertsSslSocketConnector,"public class Krb5AndCertsSslSocketConnector extends SslSocketConnector { public static final List<String> KRB5 CIPHER SUITES = Collections unmodifiableList(Collections singletonList( TLS KRB5 WITH 3DES EDE CBC SHA )); static { System setProperty( https cipherSuites , KRB5 CIPHER SUITES get(0)); } private static final Logger LOG = LoggerFactory getLogger(Krb5AndCertsSslSocketConnector class); private static final String REMOTE PRINCIPAL = remote principal ; public enum MODE { KRB, CERTS, BOTH } private boolean useKrb; private boolean useCerts; public Krb5AndCertsSslSocketConnector() { super(); useKrb = false; useCerts = true; setPasswords(); } public static boolean isKrb(String mode) { return mode == MODE KRB toString() || mode == MODE BOTH toString(); } public void setMode(String mode) { useKrb = mode == MODE KRB toString() || mode == MODE BOTH toString(); useCerts = mode == MODE CERTS toString() || mode == MODE BOTH toString(); logIfDebug( useKerb = + useKrb + , useCerts = + useCerts); } private void setPasswords() { if (!useCerts) { Random r = new Random(); System setProperty( jetty ssl password , String valueOf(r nextLong())); System setProperty( jetty ssl keypassword , String valueOf(r nextLong())); } } Override public SslContextFactory getSslContextFactory() { final SslContextFactory factory = super getSslContextFactory(); if (useCerts) { return factory; } try { SSLContext context = factory getProvider() == null SSLContext getInstance(factory getProtocol()) SSLContext getInstance(factory getProtocol(), factory getProvider()); context init(null, null, null); factory setSslContext(context); } catch (NoSuchAlgorithmException e) { } catch (NoSuchProviderException e) { } catch (KeyManagementException e) { } return factory; } Override protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException { logIfDebug( Creating new KrbServerSocket for + host); SSLServerSocket ss = null; if (useCerts) ss = (SSLServerSocket) super newServerSocket(host, port, backlog); else { try { ss = (SSLServerSocket) super newServerSocket(host, port, backlog); } catch (Exception e) { LOG warn( Could not create KRB5 Listener , e); throw new IOException( Could not create KRB5 Listener + e toString()); } } if (useKrb) { ss setNeedClientAuth(true); String[] combined; if (useCerts) { String[] certs = ss getEnabledCipherSuites(); combined = new String[certs length + KRB5 CIPHER SUITES size()]; System arraycopy(certs, 0, combined, 0, certs length); System arraycopy(KRB5 CIPHER SUITES toArray(new String[0]), 0, combined, certs length, KRB5 CIPHER SUITES size()); } else { combined = KRB5 CIPHER SUITES toArray(new String[0]); } ss setEnabledCipherSuites(combined); } return ss; }; Override public void customize(EndPoint endpoint, Request request) throws IOException { if (useKrb) { SSLSocket sslSocket = (SSLSocket) endpoint getTransport(); Principal remotePrincipal = sslSocket getSession() getPeerPrincipal(); logIfDebug( Remote principal = + remotePrincipal); request setScheme(HttpSchemes HTTPS); request setAttribute(REMOTE PRINCIPAL, remotePrincipal); if (!useCerts) { String cipherSuite = sslSocket getSession() getCipherSuite(); Integer keySize = Integer valueOf(ServletSSL deduceKeyLength(cipherSuite)); ; request setAttribute( javax servlet request cipher suite , cipherSuite); request setAttribute( javax servlet request key size , keySize); } } if (useCerts) super customize(endpoint, request); } private void logIfDebug(String s) { if (LOG isDebugEnabled()) LOG debug(s); } }",1.0,
1165,1165,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\util\TextWireFormat.,TextWireFormat,"public abstract class TextWireFormat implements WireFormat { public abstract Object unmarshalText(String text) throws IOException; public abstract Object unmarshalText(Reader reader) throws IOException; public abstract String marshalText(Object command) throws IOException; public void marshal(Object command, DataOutput out) throws IOException { String text = marshalText(command); byte[] utf8 = text getBytes( UTF-8 ); out writeInt(utf8 length); out write(utf8); } public Object unmarshal(DataInput in) throws IOException { int length = in readInt(); byte[] utf8 = new byte[length]; in readFully(utf8); String text = new String(utf8, UTF-8 ); return unmarshalText(text); } public ByteSequence marshal(Object command) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream dos = new DataOutputStream(baos); marshal(command, dos); dos close(); return baos toByteSequence(); } public Object unmarshal(ByteSequence packet) throws IOException { ByteArrayInputStream stream = new ByteArrayInputStream(packet); DataInputStream dis = new DataInputStream(stream); return unmarshal(dis); } public boolean inReceive() { return false; } }",1.0,
1166,1166,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\ws\StompServlet.,StompServlet,"public class StompServlet extends WebSocketServlet { private static final long serialVersionUID = -4716657876092884139L; private TransportAcceptListener listener; public void init() throws ServletException { super init(); listener = (TransportAcceptListener)getServletContext() getAttribute( acceptListener ); if (listener == null) { throw new ServletException( No such attribute acceptListener available in the ServletContext ); } } protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException ,IOException { getServletContext() getNamedDispatcher( default ) forward(request,response); } Override public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) { StompSocket socket = new StompSocket(); listener onAccept(socket); return socket; } }",1.0,
1168,1168,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\ws\WSTransportFactory.,WSTransportFactory,"public class WSTransportFactory extends TransportFactory { public TransportServer doBind(URI location) throws IOException { try { Map<String, String> options = new HashMap<String, String>(URISupport parseParameters(location)); WSTransportServer result = new WSTransportServer(location); Map<String, Object> transportOptions = IntrospectionSupport extractProperties(options, ); result setTransportOption(transportOptions); return result; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } }",1.0,
1169,1169,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\ws\WSTransportServer.,WSTransportServer,"public class WSTransportServer extends WebTransportServerSupport { public WSTransportServer(URI location) { super(location); this bindAddress = location; socketConnectorFactory = new SocketConnectorFactory(); } protected void doStart() throws Exception { server = new Server(); if (connector == null) { connector = socketConnectorFactory createConnector(); } URI bind = getBindLocation(); bind(); ServletContextHandler contextHandler = new ServletContextHandler(server, / , ServletContextHandler NO SECURITY); ServletHolder holder = new ServletHolder(); Map<String, Object> webSocketOptions = IntrospectionSupport extractProperties(transportOptions, websocket ); for(Map Entry<String,Object> webSocketEntry webSocketOptions entrySet()) { Object value = webSocketEntry getValue(); if (value != null) { holder setInitParameter(webSocketEntry getKey(), value toString()); } } holder setServlet(new StompServlet()); contextHandler addServlet(holder, / ); contextHandler setAttribute( acceptListener , getAcceptListener()); server start(); } protected void doStop(ServiceStopper stopper) throws Exception { Server temp = server; server = null; if (temp != null) { temp stop(); } } public InetSocketAddress getSocketAddress() { return null; } public void setBrokerInfo(BrokerInfo brokerInfo) { } protected void setConnector(Connector connector) { this connector = connector; } Override public void setTransportOption(Map<String, Object> transportOptions) { Map<String, Object> socketOptions = IntrospectionSupport extractProperties(transportOptions, transport ); socketConnectorFactory setTransportOptions(socketOptions); super setTransportOption(transportOptions); } Override public boolean isSslServer() { return false; } }",1.0,
1170,1170,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\wss\WSSTransportFactory.,WSSTransportFactory,"public class WSSTransportFactory extends TransportFactory { public TransportServer doBind(URI location) throws IOException { try { Map<String, String> options = new HashMap<String, String>(URISupport parseParameters(location)); WSSTransportServer result = new WSSTransportServer(location, SslContext getCurrentSslContext()); Map<String, Object> transportOptions = IntrospectionSupport extractProperties(options, ); result setTransportOption(transportOptions); return result; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } }",1.0,
1171,1171,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\wss\WSSTransportServer.,WSSTransportServer,"public class WSSTransportServer extends WSTransportServer { private SslContext context; public WSSTransportServer(URI location, SslContext context) { super(location); this context = context; this socketConnectorFactory = new SecureSocketConnectorFactory(context); } Override protected void doStart() throws Exception { Connector sslConnector = socketConnectorFactory createConnector(); setConnector(sslConnector); super doStart(); } }",1.0,
1172,1172,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\xstream\XStreamWireFormat.,XStreamWireFormat,public class XStreamWireFormat extends TextWireFormat { private XStream xStream; private int version; public int getVersion() { return version; } public void setVersion(int version) { this version = version; } public WireFormat copy() { return new XStreamWireFormat(); } public Object unmarshalText(String text) { return (Command)getXStream() fromXML(text); } public Object unmarshalText(Reader reader) { return (Command)getXStream() fromXML(reader); } public String marshalText(Object command) throws IOException { if (command instanceof MarshallAware) { ((MarshallAware)command) beforeMarshall(this); } else if(command instanceof MessageDispatch) { MessageDispatch dispatch = (MessageDispatch) command; if (dispatch != null && dispatch getMessage() != null) { dispatch getMessage() beforeMarshall(this); } } return getXStream() toXML(command); } public boolean canProcessWireFormatVersion(int version) { return true; } public int getCurrentWireFormatVersion() { return 1; } public XStream getXStream() { if (xStream == null) { xStream = createXStream(); xStream setClassLoader(getClass() getClassLoader()); } return xStream; } public void setXStream(XStream xStream) { this xStream = xStream; } protected XStream createXStream() { return new XStream(); } },1.0,
1173,1173,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\xstream\XStreamWireFormatFactory.,XStreamWireFormatFactory,public class XStreamWireFormatFactory implements WireFormatFactory { public WireFormat createWireFormat() { return new XStreamWireFormat(); } },1.0,
1174,1174,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\TwoBrokerTopicSendReceiveUsingHttpTest.,TwoBrokerTopicSendReceiveUsingHttpTest,"public class TwoBrokerTopicSendReceiveUsingHttpTest extends TwoBrokerTopicSendReceiveTest { protected ActiveMQConnectionFactory createReceiverConnectionFactory() throws JMSException { return createConnectionFactory( org/apache/activemq/usecases/receiver-http xml , receiver , vm } protected ActiveMQConnectionFactory createSenderConnectionFactory() throws JMSException { return createConnectionFactory( org/apache/activemq/usecases/sender-http xml , sender , vm } }",1.0,
1177,1177,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpJmsDurableTopicSendReceiveTest.,HttpJmsDurableTopicSendReceiveTest,public class HttpJmsDurableTopicSendReceiveTest extends JmsDurableTopicSendReceiveTest { protected BrokerService broker; protected void setUp() throws Exception { if (broker == null) { broker = createBroker(); broker start(); } super setUp(); WaitForJettyListener waitForJettySocketToAccept(getBrokerURL()); } protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } } protected ActiveMQConnectionFactory createConnectionFactory() { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(getBrokerURL()); return connectionFactory; } protected String getBrokerURL() { return http } protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setPersistent(false); answer addConnector(getBrokerURL()); return answer; } },1.0,
1179,1179,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpJMSMessagesWithCompressionTest.,MessageCommand,abstract class MessageCommand<M extends Message> { public final void assertMessage(M message) throws JMSException { Assert assertNotNull(message); completeCheck(message); } public abstract void completeCheck(M message) throws JMSException; public abstract M createMessage(Session session) throws JMSException; } SuppressWarnings( unchecked ),1.0,
1180,1180,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpJMSMessageTest.,HttpJMSMessageTest,"public class HttpJMSMessageTest extends JMSMessageTest { Before public void setUp() throws Exception { super setUp(); } After public void tearDown() throws Exception { super tearDown(); } public static Test suite() { return suite(HttpJMSMessageTest class); } Override protected ConnectionFactory createConnectionFactory() throws URISyntaxException { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(getBrokerURL()); return factory; } protected String getBrokerURL() { return http } Override protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setPersistent(false); answer setUseJmx(false); answer setManagementContext(null); answer addConnector(getBrokerURL()); return answer; } public void testEmptyMapMessage() throws Exception { connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); destination = createDestination(session, destinationType); MessageConsumer consumer = session createConsumer(destination); MessageProducer producer = session createProducer(destination); { MapMessage message = session createMapMessage(); producer send(message); } { MapMessage message = (MapMessage)consumer receive(1000); assertNotNull(message); assertFalse(message getMapNames() hasMoreElements()); } assertNull(consumer receiveNoWait()); } }",1.0,
1181,1181,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpJmsSendAndReceiveTest.,HttpJmsSendAndReceiveTest,public class HttpJmsSendAndReceiveTest extends JmsTopicSendReceiveWithTwoConnectionsTest { protected BrokerService broker; protected void setUp() throws Exception { if (broker == null) { broker = createBroker(); broker start(); } super setUp(); WaitForJettyListener waitForJettySocketToAccept(getBrokerURL()); } protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } } protected ActiveMQConnectionFactory createConnectionFactory() { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(getBrokerURL()); return connectionFactory; } protected String getBrokerURL() { return http } protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setPersistent(false); answer addConnector(getBrokerURL()); return answer; } },1.0,
1182,1182,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpJmsSendAndReceiveWithCompressionTest.,HttpJmsSendAndReceiveWithCompressionTest,"public class HttpJmsSendAndReceiveWithCompressionTest extends JmsTopicSendReceiveWithTwoConnectionsTest { private static final Logger logger = LoggerFactory getLogger(HttpJmsSendAndReceiveWithCompressionTest class); protected BrokerService broker; protected void setUp() throws Exception { if (broker == null) { broker = createBroker(); broker start(); } super setUp(); WaitForJettyListener waitForJettySocketToAccept(getBrokerURL()); } protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } } protected ActiveMQConnectionFactory createConnectionFactory() { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(getBrokerURL()); return connectionFactory; } protected String getBrokerURL() { return http } protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setPersistent(false); answer addConnector(getBrokerURL()); return answer; } protected void consumeMessage(Message message, List<Message> messageList) { super consumeMessage(message, messageList); if (message instanceof TextMessage) { TextMessage textMessage = TextMessage class cast(message); try { logger debug( Received text message with text {} , textMessage getText()); } catch( javax jms JMSException jmsE) { logger debug( Received an exception while trying to retrieve the text message , jmsE); throw new RuntimeException(jmsE); } } else { logger debug( Received a non text message {} , message); } } }",1.0,
1183,1183,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpPersistentSendAndReceiveTest.,HttpPersistentSendAndReceiveTest,public class HttpPersistentSendAndReceiveTest extends HttpJmsSendAndReceiveTest { protected BrokerService broker; protected void setUp() throws Exception { this topic = false; this deliveryMode = DeliveryMode PERSISTENT; super setUp(); } protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setPersistent(true); answer addConnector(getBrokerURL()); return answer; } },1.0,
1184,1184,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpSendCompressedMessagesTest.,HttpSendCompressedMessagesTest,"public class HttpSendCompressedMessagesTest { private static final Logger LOG = LoggerFactory getLogger(HttpSendCompressedMessagesTest class); private BrokerService broker; private static final String tcpBindAddress = tcp private static final String httpBindAddress = http private ActiveMQConnectionFactory tcpConnectionFactory; private ActiveMQConnectionFactory httpConnectionFactory; private ActiveMQConnection tcpConnection; private ActiveMQConnection httpConnection; private Session tcpSession; private Session httpSession; private Topic destination; private MessageConsumer tcpConsumer; private MessageConsumer httpConsumer; private static final String destinationName = HttpCompressionTopic ; Test public void testTextMessageCompressionFromTcp() throws Exception { sendTextMessage(true); doTestTextMessageCompression(); } Test public void testTextMessageCompressionFromHttp() throws Exception { sendTextMessage(httpConnectionFactory, true); doTestTextMessageCompression(); } private void doTestTextMessageCompression() throws Exception { ActiveMQTextMessage tcpMessage = (ActiveMQTextMessage) tcpConsumer receive(TimeUnit SECONDS toMillis(3)); ActiveMQTextMessage httpMessage = (ActiveMQTextMessage) httpConsumer receive(TimeUnit SECONDS toMillis(3)); assertNotNull(tcpMessage); assertNotNull(httpMessage); ByteSequence tcpContent = tcpMessage getContent(); ByteSequence httpContent = httpMessage getContent(); assertNotNull(tcpContent); assertNotNull(httpContent); assertTrue(tcpMessage isCompressed()); assertTrue(httpMessage isCompressed()); int tcpCompressedSize = tcpContent getLength(); int httpCompressedSize = httpContent getLength(); assertEquals(tcpContent getLength(), httpContent getLength()); assertEquals(tcpMessage getText(), httpMessage getText()); LOG info( Received Message on TCP + tcpMessage toString()); LOG info( Received Message on HTTP + httpMessage toString()); sendTextMessage(false); ActiveMQTextMessage uncompressedHttpMessage = (ActiveMQTextMessage) httpConsumer receive(TimeUnit SECONDS toMillis(3)); int httpUncompressedSize = uncompressedHttpMessage getContent() getLength(); assertTrue(httpUncompressedSize > httpCompressedSize); assertTrue(httpUncompressedSize > tcpCompressedSize); } Test public void testBytesMessageCompressionFromTcp() throws Exception { sendBytesMessage(true); doTestBytesMessageCompression(); } Test public void testBytesMessageCompressionFromHttp() throws Exception { sendBytesMessage(httpConnectionFactory, true); doTestBytesMessageCompression(); } private void doTestBytesMessageCompression() throws Exception { ActiveMQBytesMessage tcpMessage = (ActiveMQBytesMessage) tcpConsumer receive(TimeUnit SECONDS toMillis(3)); ActiveMQBytesMessage httpMessage = (ActiveMQBytesMessage) httpConsumer receive(TimeUnit SECONDS toMillis(3)); assertNotNull(tcpMessage); assertNotNull(httpMessage); ByteSequence tcpContent = tcpMessage getContent(); ByteSequence httpContent = httpMessage getContent(); assertNotNull(tcpContent); assertNotNull(httpContent); assertTrue(tcpMessage isCompressed()); assertTrue(httpMessage isCompressed()); int tcpCompressedSize = tcpContent getLength(); int httpCompressedSize = httpContent getLength(); assertEquals(tcpContent getLength(), httpContent getLength()); assertEquals(tcpMessage readUTF(), httpMessage readUTF()); LOG info( Received Message on TCP + tcpMessage toString()); LOG info( Received Message on HTTP + httpMessage toString()); sendBytesMessage(false); ActiveMQBytesMessage uncompressedHttpMessage = (ActiveMQBytesMessage) httpConsumer receive(TimeUnit SECONDS toMillis(3)); int httpUncompressedSize = uncompressedHttpMessage getContent() getLength(); assertTrue(httpUncompressedSize > httpCompressedSize); assertTrue(httpUncompressedSize > tcpCompressedSize); } Test public void testStreamMessageCompressionFromTcp() throws Exception { sendStreamMessage(true); doTestStreamMessageCompression(); } Test public void testStreamMessageCompressionFromHttp() throws Exception { sendStreamMessage(httpConnectionFactory, true); doTestStreamMessageCompression(); } private void doTestStreamMessageCompression() throws Exception { ActiveMQStreamMessage tcpMessage = (ActiveMQStreamMessage) tcpConsumer receive(TimeUnit SECONDS toMillis(3)); ActiveMQStreamMessage httpMessage = (ActiveMQStreamMessage) httpConsumer receive(TimeUnit SECONDS toMillis(3)); assertNotNull(tcpMessage); assertNotNull(httpMessage); ByteSequence tcpContent = tcpMessage getContent(); ByteSequence httpContent = httpMessage getContent(); assertNotNull(tcpContent); assertNotNull(httpContent); assertTrue(tcpMessage isCompressed()); assertTrue(httpMessage isCompressed()); int tcpCompressedSize = tcpContent getLength(); int httpCompressedSize = httpContent getLength(); assertEquals(tcpContent getLength(), httpContent getLength()); assertEquals(tcpMessage readString(), httpMessage readString()); LOG info( Received Message on TCP + tcpMessage toString()); LOG info( Received Message on HTTP + httpMessage toString()); sendStreamMessage(false); ActiveMQStreamMessage uncompressedHttpMessage = (ActiveMQStreamMessage) httpConsumer receive(TimeUnit SECONDS toMillis(3)); int httpUncompressedSize = uncompressedHttpMessage getContent() getLength(); assertTrue(httpUncompressedSize > httpCompressedSize); assertTrue(httpUncompressedSize > tcpCompressedSize); } Test public void testMapMessageCompressionFromTcp() throws Exception { sendMapMessage(true); doTestMapMessageCompression(); } Test public void testMapMessageCompressionFromHttp() throws Exception { sendMapMessage(httpConnectionFactory, true); doTestMapMessageCompression(); } private void doTestMapMessageCompression() throws Exception { ActiveMQMapMessage tcpMessage = (ActiveMQMapMessage) tcpConsumer receive(TimeUnit SECONDS toMillis(3)); ActiveMQMapMessage httpMessage = (ActiveMQMapMessage) httpConsumer receive(TimeUnit SECONDS toMillis(3)); assertNotNull(tcpMessage); assertNotNull(httpMessage); ByteSequence tcpContent = tcpMessage getContent(); ByteSequence httpContent = httpMessage getContent(); assertNotNull(tcpContent); assertNotNull(httpContent); assertTrue(tcpMessage isCompressed()); assertTrue(httpMessage isCompressed()); int tcpCompressedSize = tcpContent getLength(); int httpCompressedSize = httpContent getLength(); assertEquals(tcpContent getLength(), httpContent getLength()); assertEquals(tcpMessage getString( content ), httpMessage getString( content )); LOG info( Received Message on TCP + tcpMessage toString()); LOG info( Received Message on HTTP + httpMessage toString()); sendMapMessage(false); ActiveMQMapMessage uncompressedHttpMessage = (ActiveMQMapMessage) httpConsumer receive(TimeUnit SECONDS toMillis(3)); int httpUncompressedSize = uncompressedHttpMessage getContent() getLength(); assertTrue(httpUncompressedSize > httpCompressedSize); assertTrue(httpUncompressedSize > tcpCompressedSize); } Before public void setUp() throws Exception { broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(false); broker setAdvisorySupport(false); broker setDeleteAllMessagesOnStartup(true); TransportConnector tcpConnector = broker addConnector(tcpBindAddress); TransportConnector httpConnector = broker addConnector(httpBindAddress); broker start(); broker waitUntilStarted(); WaitForJettyListener waitForJettySocketToAccept(httpConnector getPublishableConnectString()); tcpConnectionFactory = new ActiveMQConnectionFactory(tcpConnector getPublishableConnectString()); tcpConnectionFactory setUseCompression(true); httpConnectionFactory = new ActiveMQConnectionFactory(httpConnector getPublishableConnectString()); httpConnectionFactory setUseCompression(true); tcpConnection = (ActiveMQConnection) tcpConnectionFactory createConnection(); httpConnection = (ActiveMQConnection) httpConnectionFactory createConnection(); tcpSession = tcpConnection createSession(false, Session AUTO ACKNOWLEDGE); httpSession = httpConnection createSession(false, Session AUTO ACKNOWLEDGE); destination = tcpSession createTopic(destinationName); tcpConsumer = tcpSession createConsumer(destination); httpConsumer = httpSession createConsumer(destination); tcpConnection start(); httpConnection start(); } After public void shutDown() throws Exception { if (broker != null) { broker stop(); broker waitUntilStopped(); } } private void sendTextMessage(boolean compressed) throws Exception { sendTextMessage(tcpConnectionFactory, compressed); } private void sendTextMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception { StringBuilder builder = new StringBuilder(); for(int i = 0; i < 10; ++i) { builder append(UUID randomUUID() toString()); } ActiveMQConnection connection = (ActiveMQConnection) factory createConnection(); connection setUseCompression(compressed); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Topic destination = session createTopic(destinationName); MessageProducer producer = session createProducer(destination); producer send(session createTextMessage(builder toString())); } private void sendBytesMessage(boolean compressed) throws Exception { sendBytesMessage(tcpConnectionFactory, compressed); } private void sendBytesMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception { StringBuilder builder = new StringBuilder(); for(int i = 0; i < 10; ++i) { builder append(UUID randomUUID() toString()); } ActiveMQConnection connection = (ActiveMQConnection) factory createConnection(); connection setUseCompression(compressed); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Topic destination = session createTopic(destinationName); MessageProducer producer = session createProducer(destination); BytesMessage message = session createBytesMessage(); message writeUTF(builder toString()); producer send(message); } private void sendStreamMessage(boolean compressed) throws Exception { sendStreamMessage(tcpConnectionFactory, compressed); } private void sendStreamMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception { StringBuilder builder = new StringBuilder(); for(int i = 0; i < 10; ++i) { builder append(UUID randomUUID() toString()); } ActiveMQConnection connection = (ActiveMQConnection) factory createConnection(); connection setUseCompression(compressed); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Topic destination = session createTopic(destinationName); MessageProducer producer = session createProducer(destination); StreamMessage message = session createStreamMessage(); message writeString(builder toString()); producer send(message); } private void sendMapMessage(boolean compressed) throws Exception { sendMapMessage(tcpConnectionFactory, compressed); } private void sendMapMessage(ActiveMQConnectionFactory factory, boolean compressed) throws Exception { StringBuilder builder = new StringBuilder(); for(int i = 0; i < 10; ++i) { builder append(UUID randomUUID() toString()); } ActiveMQConnection connection = (ActiveMQConnection) factory createConnection(); connection setUseCompression(compressed); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Topic destination = session createTopic(destinationName); MessageProducer producer = session createProducer(destination); MapMessage message = session createMapMessage(); message setString( content , builder toString()); producer send(message); } }",1.0,
1185,1185,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpSpringTest.,HttpSpringTest,public class HttpSpringTest extends SpringTestSupport { public void testHttpTransportWithSpring() throws Exception { String config = spring-http xml ; assertSenderConfig(config); } },1.0,
1186,1186,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\HttpTransportBrokerTest.,HttpTransportBrokerTest,public class HttpTransportBrokerTest extends TransportBrokerTestSupport { protected String getBindLocation() { return http } protected void setUp() throws Exception { maxWait = 2000; super setUp(); WaitForJettyListener waitForJettySocketToAccept(getBindLocation()); } protected BrokerService createBroker() throws Exception { BrokerService broker = BrokerFactory createBroker(new URI( broker ()/localhost persistent=false&useJmx=false )); connector = broker addConnector(getBindLocation()); return broker; } protected void tearDown() throws Exception { super tearDown(); Thread sleep(100); } public static Test suite() { return suite(HttpTransportBrokerTest class); } public static void main(String[] args) { TestRunner run(suite()); } },1.0,
1187,1187,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\http\WaitForJettyListener.,WaitForJettyListener,"public class WaitForJettyListener { private static final Logger LOG = LoggerFactory getLogger(WaitForJettyListener class); public static void waitForJettySocketToAccept(String bindLocation) throws Exception { final URL url = new URL(bindLocation); assertTrue( Jetty endpoint is available , Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { boolean canConnect = false; try { Socket socket = SocketFactory getDefault() createSocket(url getHost(), url getPort()); socket close(); canConnect = true; } catch (Exception e) { LOG warn( verify jetty available, failed to connect to + url + e); } return canConnect; }}, 60 * 1000)); } }",1.0,
1188,1188,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\https\HttpsJmsSendAndReceiveConfigurationSslConfigTest.,HttpsJmsSendAndReceiveConfigurationSslConfigTest,"public class HttpsJmsSendAndReceiveConfigurationSslConfigTest extends JmsTopicSendReceiveTest { public static final String KEYSTORE TYPE = jks ; public static final String PASSWORD = password ; public static final String TRUST KEYSTORE = src/test/resources/client keystore ; private BrokerService broker; Override protected void setUp() throws Exception { broker = BrokerFactory createBroker( xbean activemq-https xml ); broker setPersistent(false); broker start(); broker waitUntilStarted(); System setProperty( javax net ssl trustStore , TRUST KEYSTORE); System setProperty( javax net ssl trustStorePassword , PASSWORD); System setProperty( javax net ssl trustStoreType , KEYSTORE TYPE); System getProperties() remove( javax net ssl keyStore ); System getProperties() remove( javax net ssl keyStorePassword ); System getProperties() remove( javax net ssl keyStoreType ); super setUp(); } Override protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } } Override protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory( https } }",1.0,
1190,1190,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\https\HttpsJmsSendAndReceiveTest.,HttpsJmsSendAndReceiveTest,"public class HttpsJmsSendAndReceiveTest extends HttpJmsSendAndReceiveTest { protected void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } protected String getBrokerURL() { return https } }",1.0,
1192,1192,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\ws\WSTransportTest.,WSTransportTest,"public class WSTransportTest { private static final Logger LOG = LoggerFactory getLogger(WSTransportTest class); private static final int MESSAGE COUNT = 1000; private BrokerService broker; private Server server; private WebDriver driver; private File profileDir; private String stompUri; protected String wsUri; private StompConnection stompConnection = new StompConnection(); protected BrokerService createBroker(boolean deleteMessages) throws Exception { BrokerService broker = BrokerFactory createBroker( new URI( broker ()/localhost persistent=false&useJmx=false )); SpringSslContext context = new SpringSslContext(); context setKeyStore( src/test/resources/server keystore ); context setKeyStoreKeyPassword( password ); context setTrustStore( src/test/resources/client keystore ); context setTrustStorePassword( password ); context afterPropertiesSet(); broker setSslContext(context); stompUri = broker addConnector( stomp wsUri = broker addConnector(getWSConnectorURI()) getPublishableConnectString(); broker setDeleteAllMessagesOnStartup(deleteMessages); broker start(); broker waitUntilStarted(); return broker; } protected String getWSConnectorURI() { return ws } protected Server createWebServer() throws Exception { Server server = new Server(); Connector connector = createJettyConnector(); connector setServer(server); WebAppContext context = new WebAppContext(); context setResourceBase( src/test/webapp ); context setContextPath( / ); context setServer(server); server setHandler(context); server setConnectors(new Connector[] { connector }); server start(); return server; } protected Connector createJettyConnector() { SelectChannelConnector connector = new SelectChannelConnector(); connector setPort(8080); return connector; } protected void stopBroker() throws Exception { if (broker != null) { broker stop(); broker waitUntilStopped(); broker = null; } } Before public void setUp() throws Exception { profileDir = new File( activemq-data/profiles ); broker = createBroker(true); stompConnect(); server = createWebServer(); } After public void tearDown() throws Exception { try { stompDisconnect(); } catch(Exception e) { } finally { stopBroker(); if (driver != null) { driver quit(); driver = null; } if (server != null) { server stop(); } } } Test public void testBrokerStart() throws Exception { assertTrue(broker isStarted()); } Ignore Test public void testFireFoxWebSockets() throws Exception { driver = createFireFoxWebDriver(); doTestWebSockets(driver); } Ignore Test public void testChromeWebSockets() throws Exception { driver = createChromeWebDriver(); doTestWebSockets(driver); } protected WebDriver createChromeWebDriver() throws Exception { File profile = new File(profileDir, chrome ); profile mkdirs(); ChromeOptions options = new ChromeOptions(); options addArguments( --enable-udd-profiles , --user-data-dir= + profile, --allow-file-access-from-files ); return new ChromeDriver(options); } protected WebDriver createFireFoxWebDriver() throws Exception { File profile = new File(profileDir, firefox ); profile mkdirs(); return new FirefoxDriver(new FirefoxProfile(profile)); } private void stompConnect() throws IOException, URISyntaxException, UnknownHostException { URI connectUri = new URI(stompUri); stompConnection open(createSocket(connectUri)); } private Socket createSocket(URI connectUri) throws IOException { return new Socket( 127 0 0 1 , connectUri getPort()); } private void stompDisconnect() throws IOException { if (stompConnection != null) { stompConnection close(); stompConnection = null; } } protected String getTestURI() { return http } public void doTestWebSockets(WebDriver driver) throws Exception { driver get(getTestURI()); final WebElement webStatus = driver findElement(By id( status )); final WebElement webReceived = driver findElement(By id( received )); while ( Loading == webStatus getText()) { Thread sleep(100); } if (webStatus getText() != No WebSockets ) { assertTrue( Should have connected , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return webStatus getText() equals( Connected ); } })); stompConnection connect( system , manager ); stompConnection send( /queue/websocket , Hello ); assertTrue( Should have received message by now , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return webReceived getText() equals( Hello ); } })); for (int i = 1; i <= MESSAGE COUNT; ++i) { stompConnection send( /queue/websocket , messages + i); } assertTrue( Should have received messages by now , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return webReceived getText() equals( messages + MESSAGE COUNT); } })); Thread sleep(1000); assertTrue( Should have disconnected , Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { return webStatus getText() equals( Disconnected ); } })); } } }",1.0,
1193,1193,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\wss\WSSTransportTest.,WSSTransportTest,public class WSSTransportTest extends WSTransportTest { Override protected Connector createJettyConnector() { SslSocketConnector sslConnector = new SslSocketConnector(); SslContextFactory contextFactory = sslConnector getSslContextFactory(); contextFactory setKeyStorePath( src/test/resources/server keystore ); contextFactory setKeyStorePassword( password ); contextFactory setTrustStore( src/test/resources/client keystore ); contextFactory setTrustStorePassword( password ); sslConnector setPort(8080); return sslConnector; } Override protected String getWSConnectorURI() { return wss } Override protected String getTestURI() { return https } },1.0,
1194,1194,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\xstream\XStreamWireFormatTest.,XStreamWireFormatTest,public class XStreamWireFormatTest extends MessageTest { private static final Logger LOG = LoggerFactory getLogger(XStreamWireFormatTest class); public void assertBeanMarshalls(Object original) throws IOException { super assertBeanMarshalls(original); String xml = getXStreamWireFormat() marshalText((Command) original); LOG info(original getClass() getName() + as XML is ); LOG info(xml); } protected XStreamWireFormat getXStreamWireFormat() { return (XStreamWireFormat) wireFormat; } protected WireFormat createWireFormat() { return new XStreamWireFormat(); } },1.0,
1195,1195,data,\smellybot\activemq\activemq-itests-spring31\src\test\java\org\apache\activemq\itest\spring31\ActiveMQSpring31Test.,ActiveMQSpring31Test,"public class ActiveMQSpring31Test extends AbstractJUnit4SpringContextTests { Test public void testSpring31() throws Exception { assertNotNull( Should find broker , applicationContext getBean( myBroker )); } }",1.0,
1196,1196,data,\smellybot\activemq\activemq-itests-spring31\src\test\java\org\apache\activemq\itest\spring31\ActiveMQSpringProfile31Test.,ActiveMQSpringProfile31Test,"public class ActiveMQSpringProfile31Test extends AbstractJUnit4SpringContextTests { Test public void testSpringProfile31() throws Exception { assertNotNull( Should find broker , applicationContext getBean( myBroker )); } }",1.0,
1197,1197,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\CertificateCallback.,CertificateCallback,public class CertificateCallback implements Callback { X509Certificate certificates[]; public void setCertificates(X509Certificate certs[]) { certificates = certs; } public X509Certificate[] getCertificates() { return certificates; } },1.0,
1198,1198,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\CertificateLoginModule.,CertificateLoginModule,"public abstract class CertificateLoginModule implements LoginModule { private static final Logger LOG = LoggerFactory getLogger(CertificateLoginModule class); private CallbackHandler callbackHandler; private Subject subject; private X509Certificate certificates[]; private String username; private Set<String> groups; private Set<Principal> principals = new HashSet<Principal>(); private boolean debug; Override public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) { this subject = subject; this callbackHandler = callbackHandler; debug = true equalsIgnoreCase((String)options get( debug )); if (debug) { LOG debug( Initialized debug ); } } Override public boolean login() throws LoginException { Callback[] callbacks = new Callback[1]; callbacks[0] = new CertificateCallback(); try { callbackHandler handle(callbacks); } catch (IOException ioe) { throw new LoginException(ioe getMessage()); } catch (UnsupportedCallbackException uce) { throw new LoginException(uce getMessage() + Unable to obtain client certificates ); } certificates = ((CertificateCallback)callbacks[0]) getCertificates(); username = getUserNameForCertificates(certificates); if (username == null) { throw new FailedLoginException( No user for client certificate + getDistinguishedName(certificates)); } groups = getUserGroups(username); if (debug) { LOG debug( Certificate for user + username); } return true; } Override public boolean commit() throws LoginException { principals add(new UserPrincipal(username)); for (String group groups) { principals add(new GroupPrincipal(group)); } subject getPrincipals() addAll(principals); clear(); if (debug) { LOG debug( commit ); } return true; } Override public boolean abort() throws LoginException { clear(); if (debug) { LOG debug( abort ); } return true; } Override public boolean logout() { subject getPrincipals() removeAll(principals); principals clear(); if (debug) { LOG debug( logout ); } return true; } private void clear() { groups clear(); certificates = null; } protected abstract String getUserNameForCertificates(final X509Certificate[] certs) throws LoginException; protected abstract Set<String> getUserGroups(final String username) throws LoginException; protected String getDistinguishedName(final X509Certificate[] certs) { if (certs != null && certs length > 0 && certs[0] != null) { return certs[0] getSubjectDN() getName(); } else { return null; } } }",1.0,
1199,1199,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\GroupPrincipal.,GroupPrincipal,public class GroupPrincipal implements Principal { private final String name; private transient int hash; public GroupPrincipal(String name) { if (name == null) { throw new IllegalArgumentException( name cannot be null ); } this name = name; } Override public String getName() { return name; } Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o getClass()) { return false; } final GroupPrincipal that = (GroupPrincipal)o; if (!name equals(that name)) { return false; } return true; } Override public int hashCode() { if (hash == 0) { hash = name hashCode(); } return hash; } Override public String toString() { return name; } },1.0,
1201,1201,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\JaasCertificateCallbackHandler.,JaasCertificateCallbackHandler,"public class JaasCertificateCallbackHandler implements CallbackHandler { final X509Certificate certificates[]; public JaasCertificateCallbackHandler(X509Certificate certs[]) { certificates = certs; } Override public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { for (int i = 0; i < callbacks length; i++) { Callback callback = callbacks[i]; if (callback instanceof CertificateCallback) { CertificateCallback certCallback = (CertificateCallback)callback; certCallback setCertificates(certificates); } else { throw new UnsupportedCallbackException(callback); } } } }",1.0,
1202,1202,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\JassCredentialCallbackHandler.,JassCredentialCallbackHandler,"public class JassCredentialCallbackHandler implements CallbackHandler { private final String username; private final String password; public JassCredentialCallbackHandler(String username, String password) { this username = username; this password = password; } Override public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { for (int i = 0; i < callbacks length; i++) { Callback callback = callbacks[i]; if (callback instanceof PasswordCallback) { PasswordCallback passwordCallback = (PasswordCallback)callback; if (password == null) { passwordCallback setPassword(null); } else { passwordCallback setPassword(password toCharArray()); } } else if (callback instanceof NameCallback) { NameCallback nameCallback = (NameCallback)callback; if (username == null) { nameCallback setName(null); } else { nameCallback setName(username); } } } } }",1.0,
1203,1203,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\LDAPLoginModule.,LDAPLoginModule,"public class LDAPLoginModule implements LoginModule { private static final String INITIAL CONTEXT FACTORY = initialContextFactory ; private static final String CONNECTION URL = connectionURL ; private static final String CONNECTION USERNAME = connectionUsername ; private static final String CONNECTION PASSWORD = connectionPassword ; private static final String CONNECTION PROTOCOL = connectionProtocol ; private static final String AUTHENTICATION = authentication ; private static final String USER BASE = userBase ; private static final String USER SEARCH MATCHING = userSearchMatching ; private static final String USER SEARCH SUBTREE = userSearchSubtree ; private static final String ROLE BASE = roleBase ; private static final String ROLE NAME = roleName ; private static final String ROLE SEARCH MATCHING = roleSearchMatching ; private static final String ROLE SEARCH SUBTREE = roleSearchSubtree ; private static final String USER ROLE NAME = userRoleName ; private static final String EXPAND ROLES = expandRoles ; private static final String EXPAND ROLES MATCHING = expandRolesMatching ; private static Logger log = LoggerFactory getLogger(LDAPLoginModule class); protected DirContext context; private Subject subject; private CallbackHandler handler; private LDAPLoginProperty [] config; private String username; private Set<GroupPrincipal> groups = new HashSet<GroupPrincipal>(); Override public void initialize(Subject subject, CallbackHandler callbackHandler, Map sharedState, Map options) { this subject = subject; this handler = callbackHandler; config = new LDAPLoginProperty [] { new LDAPLoginProperty (INITIAL CONTEXT FACTORY, (String)options get(INITIAL CONTEXT FACTORY)), new LDAPLoginProperty (CONNECTION URL, (String)options get(CONNECTION URL)), new LDAPLoginProperty (CONNECTION USERNAME, (String)options get(CONNECTION USERNAME)), new LDAPLoginProperty (CONNECTION PASSWORD, (String)options get(CONNECTION PASSWORD)), new LDAPLoginProperty (CONNECTION PROTOCOL, (String)options get(CONNECTION PROTOCOL)), new LDAPLoginProperty (AUTHENTICATION, (String)options get(AUTHENTICATION)), new LDAPLoginProperty (USER BASE, (String)options get(USER BASE)), new LDAPLoginProperty (USER SEARCH MATCHING, (String)options get(USER SEARCH MATCHING)), new LDAPLoginProperty (USER SEARCH SUBTREE, (String)options get(USER SEARCH SUBTREE)), new LDAPLoginProperty (ROLE BASE, (String)options get(ROLE BASE)), new LDAPLoginProperty (ROLE NAME, (String)options get(ROLE NAME)), new LDAPLoginProperty (ROLE SEARCH MATCHING, (String)options get(ROLE SEARCH MATCHING)), new LDAPLoginProperty (ROLE SEARCH SUBTREE, (String)options get(ROLE SEARCH SUBTREE)), new LDAPLoginProperty (USER ROLE NAME, (String)options get(USER ROLE NAME)), new LDAPLoginProperty (EXPAND ROLES, (String) options get(EXPAND ROLES)), new LDAPLoginProperty (EXPAND ROLES MATCHING, (String) options get(EXPAND ROLES MATCHING)), }; } Override public boolean login() throws LoginException { Callback[] callbacks = new Callback[2]; callbacks[0] = new NameCallback( User name ); callbacks[1] = new PasswordCallback( Password , false); try { handler handle(callbacks); } catch (IOException ioe) { throw (LoginException)new LoginException() initCause(ioe); } catch (UnsupportedCallbackException uce) { throw (LoginException)new LoginException() initCause(uce); } String password; username = ((NameCallback)callbacks[0]) getName(); if (username == null) return false; if (((PasswordCallback)callbacks[1]) getPassword() != null) password = new String(((PasswordCallback)callbacks[1]) getPassword()); else password= ; authenticate(username, password); return true; } Override public boolean logout() throws LoginException { username = null; return true; } Override public boolean commit() throws LoginException { Set<Principal> principals = subject getPrincipals(); principals add(new UserPrincipal(username)); for (GroupPrincipal gp groups) { principals add(gp); } return true; } Override public boolean abort() throws LoginException { username = null; return true; } protected void close(DirContext context) { try { context close(); } catch (Exception e) { log error(e toString()); } } protected boolean authenticate(String username, String password) throws LoginException { MessageFormat userSearchMatchingFormat; boolean userSearchSubtreeBool; DirContext context = null; if (log isDebugEnabled()) { log debug( Create the LDAP initial context ); } try { context = open(); } catch (NamingException ne) { FailedLoginException ex = new FailedLoginException( Error opening LDAP connection ); ex initCause(ne); throw ex; } if (!isLoginPropertySet(USER SEARCH MATCHING)) return false; userSearchMatchingFormat = new MessageFormat(getLDAPPropertyValue(USER SEARCH MATCHING)); userSearchSubtreeBool = Boolean valueOf(getLDAPPropertyValue(USER SEARCH SUBTREE)) booleanValue(); try { String filter = userSearchMatchingFormat format(new String[] { username }); SearchControls constraints = new SearchControls(); if (userSearchSubtreeBool) { constraints setSearchScope(SearchControls SUBTREE SCOPE); } else { constraints setSearchScope(SearchControls ONELEVEL SCOPE); } List<String> list = new ArrayList<String>(); if (isLoginPropertySet(USER ROLE NAME)) { list add(getLDAPPropertyValue(USER ROLE NAME)); } String[] attribs = new String[list size()]; list toArray(attribs); constraints setReturningAttributes(attribs); if (log isDebugEnabled()) { log debug( Get the user DN ); log debug( Looking for the user in LDAP with ); log debug( base DN + getLDAPPropertyValue(USER BASE)); log debug( filter + filter); } NamingEnumeration<SearchResult> results = context search(getLDAPPropertyValue(USER BASE), filter, constraints); if (results == null || !results hasMore()) { log warn( User + username + not found in LDAP ); throw new FailedLoginException( User + username + not found in LDAP ); } SearchResult result = results next(); if (results hasMore()) { } NameParser parser = context getNameParser( ); Name contextName = parser parse(context getNameInNamespace()); Name baseName = parser parse(getLDAPPropertyValue(USER BASE)); Name entryName = parser parse(result getName()); Name name = contextName addAll(baseName); name = name addAll(entryName); String dn = name toString(); Attributes attrs = result getAttributes(); if (attrs == null) { throw new FailedLoginException( User found, but LDAP entry malformed + username); } List<String> roles = null; if (isLoginPropertySet(USER ROLE NAME)) { roles = addAttributeValues(getLDAPPropertyValue(USER ROLE NAME), attrs, roles); } if (bindUser(context, dn, password)) { roles = getRoles(context, dn, username, roles); if (log isDebugEnabled()) { log debug( Roles + roles + for user + username); } for (int i = 0; i < roles size(); i++) { groups add(new GroupPrincipal(roles get(i))); } } else { throw new FailedLoginException( Password does not match for user + username); } } catch (CommunicationException e) { FailedLoginException ex = new FailedLoginException( Error contacting LDAP ); ex initCause(e); throw ex; } catch (NamingException e) { if (context != null) { close(context); } FailedLoginException ex = new FailedLoginException( Error contacting LDAP ); ex initCause(e); throw ex; } return true; } protected List<String> getRoles(DirContext context, String dn, String username, List<String> currentRoles) throws NamingException { List<String> list = currentRoles; MessageFormat roleSearchMatchingFormat; boolean roleSearchSubtreeBool; boolean expandRolesBool; roleSearchMatchingFormat = new MessageFormat(getLDAPPropertyValue(ROLE SEARCH MATCHING)); roleSearchSubtreeBool = Boolean valueOf(getLDAPPropertyValue(ROLE SEARCH SUBTREE)) booleanValue(); expandRolesBool = Boolean valueOf(getLDAPPropertyValue(EXPAND ROLES)) booleanValue(); if (list == null) { list = new ArrayList<String>(); } if (!isLoginPropertySet(ROLE NAME)) { return list; } String filter = roleSearchMatchingFormat format(new String[] { doRFC2254Encoding(dn), username }); SearchControls constraints = new SearchControls(); if (roleSearchSubtreeBool) { constraints setSearchScope(SearchControls SUBTREE SCOPE); } else { constraints setSearchScope(SearchControls ONELEVEL SCOPE); } if (log isDebugEnabled()) { log debug( Get user roles ); log debug( Looking for the user roles in LDAP with ); log debug( base DN + getLDAPPropertyValue(ROLE BASE)); log debug( filter + filter); } HashSet<String> haveSeenNames = new HashSet<String>(); Queue<String> pendingNameExpansion = new LinkedList<String>(); NamingEnumeration<SearchResult> results = context search(getLDAPPropertyValue(ROLE BASE), filter, constraints); while (results hasMore()) { SearchResult result = results next(); Attributes attrs = result getAttributes(); if (expandRolesBool) { haveSeenNames add(result getNameInNamespace()); pendingNameExpansion add(result getNameInNamespace()); } if (attrs == null) { continue; } list = addAttributeValues(getLDAPPropertyValue(ROLE NAME), attrs, list); } if (expandRolesBool) { MessageFormat expandRolesMatchingFormat = new MessageFormat(getLDAPPropertyValue(EXPAND ROLES MATCHING)); while (!pendingNameExpansion isEmpty()) { String name = pendingNameExpansion remove(); filter = expandRolesMatchingFormat format(new String[]{name}); results = context search(getLDAPPropertyValue(ROLE BASE), filter, constraints); while (results hasMore()) { SearchResult result = results next(); name = result getNameInNamespace(); if (!haveSeenNames contains(name)) { Attributes attrs = result getAttributes(); list = addAttributeValues(getLDAPPropertyValue(ROLE NAME), attrs, list); haveSeenNames add(name); pendingNameExpansion add(name); } } } } return list; } protected String doRFC2254Encoding(String inputString) { StringBuffer buf = new StringBuffer(inputString length()); for (int i = 0; i < inputString length(); i++) { char c = inputString charAt(i); switch (c) { case buf append( 5c ); break; case * buf append( 2a ); break; case ( buf append( 28 ); break; case ) buf append( 29 ); break; case 0 buf append( 00 ); break; default buf append(c); break; } } return buf toString(); } protected boolean bindUser(DirContext context, String dn, String password) throws NamingException { boolean isValid = false; if (log isDebugEnabled()) { log debug( Binding the user ); } context addToEnvironment(Context SECURITY PRINCIPAL, dn); context addToEnvironment(Context SECURITY CREDENTIALS, password); try { context getAttributes( , null); isValid = true; if (log isDebugEnabled()) { log debug( User + dn + successfully bound ); } } catch (AuthenticationException e) { isValid = false; if (log isDebugEnabled()) { log debug( Authentication failed for dn= + dn); } } if (isLoginPropertySet(CONNECTION USERNAME)) { context addToEnvironment(Context SECURITY PRINCIPAL, getLDAPPropertyValue(CONNECTION USERNAME)); } else { context removeFromEnvironment(Context SECURITY PRINCIPAL); } if (isLoginPropertySet(CONNECTION PASSWORD)) { context addToEnvironment(Context SECURITY CREDENTIALS, getLDAPPropertyValue(CONNECTION PASSWORD)); } else { context removeFromEnvironment(Context SECURITY CREDENTIALS); } return isValid; } private List<String> addAttributeValues(String attrId, Attributes attrs, List<String> values) throws NamingException { if (attrId == null || attrs == null) { return values; } if (values == null) { values = new ArrayList<String>(); } Attribute attr = attrs get(attrId); if (attr == null) { return values; } NamingEnumeration< > e = attr getAll(); while (e hasMore()) { String value = (String)e next(); values add(value); } return values; } protected DirContext open() throws NamingException { try { Hashtable<String, String> env = new Hashtable<String, String>(); env put(Context INITIAL CONTEXT FACTORY, getLDAPPropertyValue(INITIAL CONTEXT FACTORY)); if (isLoginPropertySet(CONNECTION USERNAME)) { env put(Context SECURITY PRINCIPAL, getLDAPPropertyValue(CONNECTION USERNAME)); } if (isLoginPropertySet(CONNECTION PASSWORD)) { env put(Context SECURITY CREDENTIALS, getLDAPPropertyValue(CONNECTION PASSWORD)); } env put(Context SECURITY PROTOCOL, getLDAPPropertyValue(CONNECTION PROTOCOL)); env put(Context PROVIDER URL, getLDAPPropertyValue(CONNECTION URL)); env put(Context SECURITY AUTHENTICATION, getLDAPPropertyValue(AUTHENTICATION)); context = new InitialDirContext(env); } catch (NamingException e) { log error(e toString()); throw e; } return context; } private String getLDAPPropertyValue (String propertyName){ for (int i=0; i < config length; i++ ) if (config[i] getPropertyName() == propertyName) return config[i] getPropertyValue(); return null; } private boolean isLoginPropertySet(String propertyName) { for (int i=0; i < config length; i++ ) { if (config[i] getPropertyName() == propertyName && config[i] getPropertyValue() != null) return true; } return false; } }",1.0,
1204,1204,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\LDAPLoginProperty.,LDAPLoginProperty,"public class LDAPLoginProperty { private String name; private String value; public LDAPLoginProperty(String name) { this name = name; } public LDAPLoginProperty(String name, String value) { this name = name; this value = value; } public String getPropertyName() { return this name; } public String getPropertyValue() { return this value; } }",1.0,
1205,1205,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\PrincipalProperties.,PrincipalProperties,"class PrincipalProperties { private final Properties principals; private final long reloadTime; PrincipalProperties(final String type, final File source, final Logger log) { Properties props = new Properties(); long reloadTime = 0; try { load(source, props); reloadTime = System currentTimeMillis(); } catch (IOException ioe) { log warn( Unable to load + type + properties file + source); } this reloadTime = reloadTime; this principals = props; } SuppressWarnings({ unchecked , rawtypes }) Set<Map Entry<String, String>> entries() { return (Set) principals entrySet(); } String getProperty(String name) { return principals getProperty(name); } long getReloadTime() { return reloadTime; } private void load(final File source, Properties props) throws FileNotFoundException, IOException { FileInputStream in = new FileInputStream(source); try { props load(in); } finally { in close(); } } }",1.0,
1208,1208,data,\smellybot\activemq\activemq-jaas\src\main\java\org\apache\activemq\jaas\UserPrincipal.,UserPrincipal,public class UserPrincipal implements Principal { private final String name; private transient int hash; public UserPrincipal(String name) { if (name == null) { throw new IllegalArgumentException( name cannot be null ); } this name = name; } Override public String getName() { return name; } Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o getClass()) { return false; } final UserPrincipal that = (UserPrincipal)o; if (!name equals(that name)) { return false; } return true; } Override public int hashCode() { if (hash == 0) { hash = name hashCode(); } return hash; } Override public String toString() { return name; } },1.0,
1209,1209,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\CertificateLoginModuleTest.,CertificateLoginModuleTest,"public class CertificateLoginModuleTest extends TestCase { private static final String USER NAME = testUser ; private static final List<String> GROUP NAMES = new Vector<String>(); private StubCertificateLoginModule loginModule; private Subject subject; public CertificateLoginModuleTest() { GROUP NAMES add( testGroup1 ); GROUP NAMES add( testGroup2 ); GROUP NAMES add( testGroup3 ); GROUP NAMES add( testGroup4 ); } protected void setUp() throws Exception { subject = new Subject(); } protected void tearDown() throws Exception { } private void loginWithCredentials(String userName, Set<String> groupNames) throws LoginException { loginModule = new StubCertificateLoginModule(userName, new HashSet<String>(groupNames)); JaasCertificateCallbackHandler callbackHandler = new JaasCertificateCallbackHandler(null); loginModule initialize(subject, callbackHandler, null, new HashMap()); loginModule login(); loginModule commit(); } private void checkPrincipalsMatch(Subject subject) { boolean nameFound = false; boolean groupsFound[] = new boolean[GROUP NAMES size()]; for (int i = 0; i < groupsFound length; ++i) { groupsFound[i] = false; } for (Iterator iter = subject getPrincipals() iterator(); iter hasNext();) { Principal currentPrincipal = (Principal)iter next(); if (currentPrincipal instanceof UserPrincipal) { if (((UserPrincipal)currentPrincipal) getName() equals(USER NAME)) { if (!nameFound) { nameFound = true; } else { fail( UserPrincipal found twice ); } } else { fail( Unknown UserPrincipal found ); } } else if (currentPrincipal instanceof GroupPrincipal) { int principalIdx = GROUP NAMES indexOf(((GroupPrincipal)currentPrincipal) getName()); if (principalIdx < 0) { fail( Unknown GroupPrincipal found ); } if (!groupsFound[principalIdx]) { groupsFound[principalIdx] = true; } else { fail( GroupPrincipal found twice ); } } else { fail( Unknown Principal type found ); } } } public void testLoginSuccess() throws IOException { try { loginWithCredentials(USER NAME, new HashSet<String>(GROUP NAMES)); } catch (Exception e) { fail( Unable to login + e getMessage()); } checkPrincipalsMatch(subject); } public void testLoginFailure() throws IOException { boolean loginFailed = false; try { loginWithCredentials(null, new HashSet<String>()); } catch (LoginException e) { loginFailed = true; } if (!loginFailed) { fail( Logged in with unknown certificate ); } } public void testLogOut() throws IOException { try { loginWithCredentials(USER NAME, new HashSet<String>(GROUP NAMES)); } catch (Exception e) { fail( Unable to login + e getMessage()); } loginModule logout(); assertEquals( logout should have cleared Subject principals , 0, subject getPrincipals() size()); } }",1.0,
1210,1210,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\GroupPrincipalTest.,GroupPrincipalTest,"public class GroupPrincipalTest extends TestCase { public void testArguments() { GroupPrincipal principal = new GroupPrincipal( FOO ); assertEquals( FOO , principal getName()); try { new GroupPrincipal(null); fail( Should have thrown IllegalArgumentException ); } catch (IllegalArgumentException ingore) { } } public void testHash() { GroupPrincipal p1 = new GroupPrincipal( FOO ); GroupPrincipal p2 = new GroupPrincipal( FOO ); assertEquals(p1 hashCode(), p1 hashCode()); assertEquals(p1 hashCode(), p2 hashCode()); } public void testEquals() { GroupPrincipal p1 = new GroupPrincipal( FOO ); GroupPrincipal p2 = new GroupPrincipal( FOO ); GroupPrincipal p3 = new GroupPrincipal( BAR ); assertTrue(p1 equals(p1)); assertTrue(p1 equals(p2)); assertFalse(p1 equals(null)); assertFalse(p1 equals( FOO )); assertFalse(p1 equals(p3)); } }",1.0,
1211,1211,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\GuestLoginModuleTest.,GuestLoginModuleTest,"public class GuestLoginModuleTest extends TestCase { static { String path = System getProperty( java security auth login config ); if (path == null) { URL resource = GuestLoginModuleTest class getClassLoader() getResource( login config ); if (resource != null) { path = resource getFile(); System setProperty( java security auth login config , path); } } } public void testLogin() throws LoginException { LoginContext context = new LoginContext( GuestLogin , new CallbackHandler() { public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { assertEquals( Should have no Callbacks , 0, callbacks length); } }); context login(); Subject subject = context getSubject(); assertEquals( Should have two principals , 2, subject getPrincipals() size()); assertEquals( Should have one user principal , 1, subject getPrincipals(UserPrincipal class) size()); assertTrue( User principal is foo ,subject getPrincipals(UserPrincipal class) contains(new UserPrincipal( foo ))); assertEquals( Should have one group principal , 1, subject getPrincipals(GroupPrincipal class) size()); assertTrue( Group principal is bar , subject getPrincipals(GroupPrincipal class) contains(new GroupPrincipal( bar ))); context logout(); assertEquals( Should have zero principals , 0, subject getPrincipals() size()); } public void testLoginWithDefaults() throws LoginException { LoginContext context = new LoginContext( GuestLoginWithDefaults , new CallbackHandler() { public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { assertEquals( Should have no Callbacks , 0, callbacks length); } }); context login(); Subject subject = context getSubject(); assertEquals( Should have two principals , 2, subject getPrincipals() size()); assertEquals( Should have one user principal , 1, subject getPrincipals(UserPrincipal class) size()); assertTrue( User principal is guest ,subject getPrincipals(UserPrincipal class) contains(new UserPrincipal( guest ))); assertEquals( Should have one group principal , 1, subject getPrincipals(GroupPrincipal class) size()); assertTrue( Group principal is guests , subject getPrincipals(GroupPrincipal class) contains(new GroupPrincipal( guests ))); context logout(); assertEquals( Should have zero principals , 0, subject getPrincipals() size()); } }",1.0,
1215,1215,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\PropertiesLoginModuleRaceConditionTest.,LoginTester,"private static class LoginTester implements Runnable { private final CountDownLatch finished; private final BlockingQueue<Exception> errors; private final Map<String, String> options; private final CountDownLatch start; private final CallbackHandler callback; LoginTester(CountDownLatch start, CountDownLatch finished, BlockingQueue<Exception> errors, Map<String, String> options, CallbackHandler callbackHandler) { this finished = finished; this errors = errors; this options = options; this start = start; this callback = callbackHandler; } Override public void run() { try { start await(); Subject subject = new Subject(); PropertiesLoginModule module = new PropertiesLoginModule(); module initialize(subject, callback, new HashMap<Object, Object>(), options); module login(); module commit(); } catch (Exception e) { errors offer(e); } finally { finished countDown(); } } } Before",1.0,
1216,1216,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\PropertiesLoginModuleTest.,PropertiesLoginModuleTest,"public class PropertiesLoginModuleTest extends TestCase { static { String path = System getProperty( java security auth login config ); if (path == null) { URL resource = PropertiesLoginModuleTest class getClassLoader() getResource( login config ); if (resource != null) { path = resource getFile(); System setProperty( java security auth login config , path); } } } public void testLogin() throws LoginException { LoginContext context = new LoginContext( PropertiesLogin , new CallbackHandler() { public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { for (int i = 0; i < callbacks length; i++) { if (callbacks[i] instanceof NameCallback) { ((NameCallback) callbacks[i]) setName( first ); } else if (callbacks[i] instanceof PasswordCallback) { ((PasswordCallback) callbacks[i]) setPassword( secret toCharArray()); } else { throw new UnsupportedCallbackException(callbacks[i]); } } } }); context login(); Subject subject = context getSubject(); assertEquals( Should have three principals , 3, subject getPrincipals() size()); assertEquals( Should have one user principal , 1, subject getPrincipals(UserPrincipal class) size()); assertEquals( Should have two group principals , 2, subject getPrincipals(GroupPrincipal class) size()); context logout(); assertEquals( Should have zero principals , 0, subject getPrincipals() size()); } public void testBadUseridLogin() throws Exception { LoginContext context = new LoginContext( PropertiesLogin , new CallbackHandler() { public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { for (int i = 0; i < callbacks length; i++) { if (callbacks[i] instanceof NameCallback) { ((NameCallback) callbacks[i]) setName( BAD ); } else if (callbacks[i] instanceof PasswordCallback) { ((PasswordCallback) callbacks[i]) setPassword( secret toCharArray()); } else { throw new UnsupportedCallbackException(callbacks[i]); } } } }); try { context login(); fail( Should have thrown a FailedLoginException ); } catch (FailedLoginException doNothing) { } } public void testBadPWLogin() throws Exception { LoginContext context = new LoginContext( PropertiesLogin , new CallbackHandler() { public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { for (int i = 0; i < callbacks length; i++) { if (callbacks[i] instanceof NameCallback) { ((NameCallback) callbacks[i]) setName( first ); } else if (callbacks[i] instanceof PasswordCallback) { ((PasswordCallback) callbacks[i]) setPassword( BAD toCharArray()); } else { throw new UnsupportedCallbackException(callbacks[i]); } } } }); try { context login(); fail( Should have thrown a FailedLoginException ); } catch (FailedLoginException doNothing) { } } }",1.0,
1217,1217,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\StubCertificateLoginModule.,StubCertificateLoginModule,"public class StubCertificateLoginModule extends CertificateLoginModule { final String userName; final Set groupNames; String lastUserName; X509Certificate[] lastCertChain; public StubCertificateLoginModule(String userName, Set groupNames) { this userName = userName; this groupNames = groupNames; } protected String getUserNameForCertificates(X509Certificate[] certs) throws LoginException { lastCertChain = certs; return userName; } protected Set getUserGroups(String username) throws LoginException { lastUserName = username; return this groupNames; } }",1.0,
1218,1218,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\UserPrincipalTest.,UserPrincipalTest,"public class UserPrincipalTest extends TestCase { public void testArguments() { UserPrincipal principal = new UserPrincipal( FOO ); assertEquals( FOO , principal getName()); try { new UserPrincipal(null); fail( Should have thrown IllegalArgumentException ); } catch (IllegalArgumentException ingore) { } } public void testHash() { UserPrincipal p1 = new UserPrincipal( FOO ); UserPrincipal p2 = new UserPrincipal( FOO ); assertEquals(p1 hashCode(), p1 hashCode()); assertEquals(p1 hashCode(), p2 hashCode()); } public void testEquals() { UserPrincipal p1 = new UserPrincipal( FOO ); UserPrincipal p2 = new UserPrincipal( FOO ); UserPrincipal p3 = new UserPrincipal( BAR ); assertTrue(p1 equals(p1)); assertTrue(p1 equals(p2)); assertFalse(p1 equals(null)); assertFalse(p1 equals( FOO )); assertFalse(p1 equals(p3)); } }",1.0,
1220,1220,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\DefaultDatabaseLocker.,DefaultDatabaseLocker,"public class DefaultDatabaseLocker extends AbstractLocker { private static final Logger LOG = LoggerFactory getLogger(DefaultDatabaseLocker class); protected DataSource dataSource; protected Statements statements; protected volatile PreparedStatement lockCreateStatement; protected volatile PreparedStatement lockUpdateStatement; protected volatile Connection connection; protected volatile boolean stopping; protected Handler<Exception> exceptionHandler; protected int queryTimeout = 10; public void configure(PersistenceAdapter adapter) throws IOException { if (adapter instanceof JDBCPersistenceAdapter) { this dataSource = ((JDBCPersistenceAdapter) adapter) getLockDataSource(); this statements = ((JDBCPersistenceAdapter) adapter) getStatements(); } } public void doStart() throws Exception { stopping = false; LOG info( Attempting to acquire the exclusive lock to become the Master broker ); String sql = statements getLockCreateStatement(); LOG debug( Locking Query is +sql); while (true) { try { connection = dataSource getConnection(); connection setAutoCommit(false); lockCreateStatement = connection prepareStatement(sql); lockCreateStatement execute(); break; } catch (Exception e) { try { if (stopping) { throw new Exception( Cannot start broker as being asked to shut down + Interrupted attempt to acquire lock + e, e); } if (exceptionHandler != null) { try { exceptionHandler handle(e); } catch (Throwable handlerException) { LOG error( The exception handler + exceptionHandler getClass() getCanonicalName() + threw this exception + handlerException + while trying to handle this exception + e, handlerException); } } else { LOG debug( Lock failure + e, e); } } finally { if (null != connection) { try { connection rollback(); } catch (SQLException e1) { LOG error( Caught exception during rollback on connection + e1, e1); } try { connection close(); } catch (SQLException e1) { LOG error( Caught exception while closing connection + e1, e1); } connection = null; } } } finally { if (null != lockCreateStatement) { try { lockCreateStatement close(); } catch (SQLException e1) { LOG debug( Caught while closing statement + e1, e1); } lockCreateStatement = null; } } LOG info( Failed to acquire lock Sleeping for + lockAcquireSleepInterval + milli(s) before trying again ); try { Thread sleep(lockAcquireSleepInterval); } catch (InterruptedException ie) { LOG warn( Master lock retry sleep interrupted , ie); } } LOG info( Becoming the master on dataSource + dataSource); } public void doStop(ServiceStopper stopper) throws Exception { stopping = true; try { if (lockCreateStatement != null) { lockCreateStatement cancel(); } } catch (SQLFeatureNotSupportedException e) { LOG warn( Failed to cancel locking query on dataSource + dataSource, e); } try { if (lockUpdateStatement != null) { lockUpdateStatement cancel(); } } catch (SQLFeatureNotSupportedException e) { LOG warn( Failed to cancel locking query on dataSource + dataSource, e); } if (connection != null) { try { connection rollback(); } catch (SQLException sqle) { LOG warn( Exception while rollbacking the connection on shutdown This exception is ignored , sqle); } finally { try { connection close(); } catch (SQLException ignored) { LOG debug( Exception while closing connection on shutdown This exception is ignored , ignored); } lockCreateStatement = null; } } } public boolean keepAlive() throws IOException { boolean result = false; try { lockUpdateStatement = connection prepareStatement(statements getLockUpdateStatement()); lockUpdateStatement setLong(1, System currentTimeMillis()); if (queryTimeout > 0) { lockUpdateStatement setQueryTimeout(queryTimeout); } int rows = lockUpdateStatement executeUpdate(); if (rows == 1) { result=true; } } catch (Exception e) { LOG error( Failed to update database lock + e, e); } finally { if (lockUpdateStatement != null) { try { lockUpdateStatement close(); } catch (SQLException e) { LOG error( Failed to close statement ,e); } lockUpdateStatement = null; } } return result; } public long getLockAcquireSleepInterval() { return lockAcquireSleepInterval; } public void setLockAcquireSleepInterval(long lockAcquireSleepInterval) { this lockAcquireSleepInterval = lockAcquireSleepInterval; } public Handler getExceptionHandler() { return exceptionHandler; } public void setExceptionHandler(Handler exceptionHandler) { this exceptionHandler = exceptionHandler; } public int getQueryTimeout() { return queryTimeout; } public void setQueryTimeout(int queryTimeout) { this queryTimeout = queryTimeout; } }",1.0,
1221,1221,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\JDBCIOExceptionHandler.,JDBCIOExceptionHandler,public class JDBCIOExceptionHandler extends DefaultIOExceptionHandler { public JDBCIOExceptionHandler() { setIgnoreSQLExceptions(false); setStopStartConnectors(true); } Override protected boolean hasLockOwnership() throws IOException { boolean hasLock = true; if (broker getPersistenceAdapter() instanceof JDBCPersistenceAdapter) { JDBCPersistenceAdapter jdbcPersistenceAdapter = (JDBCPersistenceAdapter) broker getPersistenceAdapter(); Locker locker = jdbcPersistenceAdapter getLocker(); if (locker != null) { try { if (!locker keepAlive()) { hasLock = false; } } catch (IOException ignored) { } if (!hasLock) { throw new IOException( PersistenceAdapter lock no longer valid using + locker); } } } return hasLock; } },1.0,
1224,1224,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\JDBCMessageStore.,Duration,class Duration { static final int LIMIT = 100; final long start = System currentTimeMillis(); final String name; Duration(String name) { this name = name; } void end() { end(null); } void end(Object o) { long duration = System currentTimeMillis() - start; if (duration > LIMIT) { System err println(name + took a long time + duration + ms + o); } } },1.0,
1229,1229,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\JDBCTopicMessageStore.,LastRecoveredEntry,private class LastRecoveredEntry { final int priority; long recovered = 0; long stored = Integer MAX VALUE; public LastRecoveredEntry(int priority) { this priority = priority; } public String toString() { return priority + - + stored + + recovered; } public void exhausted() { stored = recovered; } public boolean hasMessages() { return stored > recovered; } },1.0,
1231,1231,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\LeaseDatabaseLocker.,LeaseDatabaseLocker,"public class LeaseDatabaseLocker extends AbstractLocker { private static final Logger LOG = LoggerFactory getLogger(LeaseDatabaseLocker class); protected DataSource dataSource; protected Statements statements; protected boolean stopping; protected int maxAllowableDiffFromDBTime = 0; protected long diffFromCurrentTime = Long MAX VALUE; protected String leaseHolderId; protected int queryTimeout = -1; JDBCPersistenceAdapter persistenceAdapter; public void configure(PersistenceAdapter adapter) throws IOException { if (adapter instanceof JDBCPersistenceAdapter) { this persistenceAdapter = (JDBCPersistenceAdapter)adapter; this dataSource = ((JDBCPersistenceAdapter) adapter) getLockDataSource(); this statements = ((JDBCPersistenceAdapter) adapter) getStatements(); } } public void doStart() throws Exception { stopping = false; LOG info(getLeaseHolderId() + attempting to acquire exclusive lease to become the Master broker ); String sql = statements getLeaseObtainStatement(); LOG debug(getLeaseHolderId() + locking Query is +sql); while (!stopping) { Connection connection = null; PreparedStatement statement = null; try { connection = getConnection(); initTimeDiff(connection); statement = connection prepareStatement(sql); setQueryTimeout(statement); final long now = System currentTimeMillis() + diffFromCurrentTime; statement setString(1, getLeaseHolderId()); statement setLong(2, now + lockAcquireSleepInterval); statement setLong(3, now); int result = statement executeUpdate(); if (result == 1) { if (keepAlive()) { break; } } reportLeasOwnerShipAndDuration(connection); } catch (Exception e) { LOG debug(getLeaseHolderId() + lease acquire failure + e, e); } finally { close(statement); close(connection); } LOG info(getLeaseHolderId() + failed to acquire lease Sleeping for + lockAcquireSleepInterval + milli(s) before trying again ); TimeUnit MILLISECONDS sleep(lockAcquireSleepInterval); } if (stopping) { throw new RuntimeException(getLeaseHolderId() + failing lease acquire due to stop ); } LOG info(getLeaseHolderId() + , becoming the master on dataSource + dataSource); } private void setQueryTimeout(PreparedStatement statement) throws SQLException { if (queryTimeout > 0) { statement setQueryTimeout(queryTimeout); } } private Connection getConnection() throws SQLException { return dataSource getConnection(); } private void close(Connection connection) { if (null != connection) { try { connection close(); } catch (SQLException e1) { LOG debug(getLeaseHolderId() + caught exception while closing connection + e1, e1); } } } private void close(PreparedStatement statement) { if (null != statement) { try { statement close(); } catch (SQLException e1) { LOG debug(getLeaseHolderId() + , caught while closing statement + e1, e1); } } } private void reportLeasOwnerShipAndDuration(Connection connection) throws SQLException { PreparedStatement statement = null; try { statement = connection prepareStatement(statements getLeaseOwnerStatement()); ResultSet resultSet = statement executeQuery(); while (resultSet next()) { LOG info(getLeaseHolderId() + Lease held by + resultSet getString(1) + till + new Date(resultSet getLong(2))); } } finally { close(statement); } } protected long initTimeDiff(Connection connection) throws SQLException { if (Long MAX VALUE == diffFromCurrentTime) { if (maxAllowableDiffFromDBTime > 0) { diffFromCurrentTime = determineTimeDifference(connection); } else { diffFromCurrentTime = 0l; } } return diffFromCurrentTime; } private long determineTimeDifference(Connection connection) throws SQLException { PreparedStatement statement = connection prepareStatement(statements getCurrentDateTime()); ResultSet resultSet = statement executeQuery(); long result = 0l; if (resultSet next()) { Timestamp timestamp = resultSet getTimestamp(1); long diff = System currentTimeMillis() - timestamp getTime(); LOG info(getLeaseHolderId() + diff from db + diff + , db time + timestamp); if (diff > maxAllowableDiffFromDBTime || diff < -maxAllowableDiffFromDBTime) { result = diff; } } return result; } public void doStop(ServiceStopper stopper) throws Exception { releaseLease(); stopping = true; } private void releaseLease() { Connection connection = null; PreparedStatement statement = null; try { connection = getConnection(); statement = connection prepareStatement(statements getLeaseUpdateStatement()); statement setString(1, null); statement setLong(2, 0l); statement setString(3, getLeaseHolderId()); if (statement executeUpdate() == 1) { LOG info(getLeaseHolderId() + , released lease ); } } catch (Exception e) { LOG error(getLeaseHolderId() + failed to release lease + e, e); } finally { close(statement); close(connection); } } Override public boolean keepAlive() throws IOException { boolean result = false; final String sql = statements getLeaseUpdateStatement(); LOG debug(getLeaseHolderId() + , lease keepAlive Query is + sql); Connection connection = null; PreparedStatement statement = null; try { connection = getConnection(); initTimeDiff(connection); statement = connection prepareStatement(sql); setQueryTimeout(statement); final long now = System currentTimeMillis() + diffFromCurrentTime; statement setString(1, getLeaseHolderId()); statement setLong(2, now + lockAcquireSleepInterval); statement setString(3, getLeaseHolderId()); result = (statement executeUpdate() == 1); } catch (Exception e) { LOG warn(getLeaseHolderId() + , failed to update lease + e, e); IOException ioe = IOExceptionSupport create(e); persistenceAdapter getBrokerService() handleIOException(ioe); throw ioe; } finally { close(statement); close(connection); } return result; } public long getLockAcquireSleepInterval() { return lockAcquireSleepInterval; } public void setLockAcquireSleepInterval(long lockAcquireSleepInterval) { this lockAcquireSleepInterval = lockAcquireSleepInterval; } public int getQueryTimeout() { return queryTimeout; } public void setQueryTimeout(int queryTimeout) { this queryTimeout = queryTimeout; } public String getLeaseHolderId() { if (leaseHolderId == null) { if (persistenceAdapter getBrokerService() != null) { leaseHolderId = persistenceAdapter getBrokerService() getBrokerName(); } } return leaseHolderId; } public void setLeaseHolderId(String leaseHolderId) { this leaseHolderId = leaseHolderId; } public int getMaxAllowableDiffFromDBTime() { return maxAllowableDiffFromDBTime; } public void setMaxAllowableDiffFromDBTime(int maxAllowableDiffFromDBTime) { this maxAllowableDiffFromDBTime = maxAllowableDiffFromDBTime; } }",1.0,
1233,1233,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\TransactionContext.,TransactionContext,"public class TransactionContext { private static final Logger LOG = LoggerFactory getLogger(TransactionContext class); private final DataSource dataSource; private final JDBCPersistenceAdapter persistenceAdapter; private Connection connection; private boolean inTx; private PreparedStatement addMessageStatement; private PreparedStatement removedMessageStatement; private PreparedStatement updateLastAckStatement; private int transactionIsolation = Connection TRANSACTION READ UNCOMMITTED; public TransactionContext(JDBCPersistenceAdapter persistenceAdapter) throws IOException { this persistenceAdapter = persistenceAdapter; this dataSource = persistenceAdapter getDataSource(); } public Connection getConnection() throws IOException { if (connection == null) { try { connection = dataSource getConnection(); if (persistenceAdapter isChangeAutoCommitAllowed()) { boolean autoCommit = !inTx; if (connection getAutoCommit() != autoCommit) { LOG trace( Setting auto commit to {} on connection {} , autoCommit, connection); connection setAutoCommit(autoCommit); } } } catch (SQLException e) { JDBCPersistenceAdapter log( Could not get JDBC connection , e); IOException ioe = IOExceptionSupport create(e); persistenceAdapter getBrokerService() handleIOException(ioe); throw ioe; } try { connection setTransactionIsolation(transactionIsolation); } catch (Throwable e) { } } return connection; } public void executeBatch() throws SQLException { try { executeBatch(addMessageStatement, Failed add a message ); } finally { addMessageStatement = null; try { executeBatch(removedMessageStatement, Failed to remove a message ); } finally { removedMessageStatement = null; try { executeBatch(updateLastAckStatement, Failed to ack a message ); } finally { updateLastAckStatement = null; } } } } private void executeBatch(PreparedStatement p, String message) throws SQLException { if (p == null) { return; } try { int[] rc = p executeBatch(); for (int i = 0; i < rc length; i++) { int code = rc[i]; if (code < 0 && code != Statement SUCCESS NO INFO) { throw new SQLException(message + Response code + code); } } } finally { try { p close(); } catch (Throwable e) { } } } public void close() throws IOException { if (!inTx) { try { try { executeBatch(); } finally { if (connection != null && !connection getAutoCommit()) { connection commit(); } } } catch (SQLException e) { JDBCPersistenceAdapter log( Error while closing connection , e); throw IOExceptionSupport create(e); } finally { try { if (connection != null) { connection close(); } } catch (Throwable e) { LOG warn( Close failed + e getMessage(), e); } finally { connection = null; } } } } public void begin() throws IOException { if (inTx) { throw new IOException( Already started ); } inTx = true; connection = getConnection(); } public void commit() throws IOException { if (!inTx) { throw new IOException( Not started ); } try { executeBatch(); if (!connection getAutoCommit()) { connection commit(); } } catch (SQLException e) { JDBCPersistenceAdapter log( Commit failed , e); this rollback(); throw IOExceptionSupport create(e); } finally { inTx = false; close(); } } public void rollback() throws IOException { if (!inTx) { throw new IOException( Not started ); } try { if (addMessageStatement != null) { addMessageStatement close(); addMessageStatement = null; } if (removedMessageStatement != null) { removedMessageStatement close(); removedMessageStatement = null; } if (updateLastAckStatement != null) { updateLastAckStatement close(); updateLastAckStatement = null; } connection rollback(); } catch (SQLException e) { JDBCPersistenceAdapter log( Rollback failed , e); throw IOExceptionSupport create(e); } finally { inTx = false; close(); } } public PreparedStatement getAddMessageStatement() { return addMessageStatement; } public void setAddMessageStatement(PreparedStatement addMessageStatement) { this addMessageStatement = addMessageStatement; } public PreparedStatement getUpdateLastAckStatement() { return updateLastAckStatement; } public void setUpdateLastAckStatement(PreparedStatement ackMessageStatement) { this updateLastAckStatement = ackMessageStatement; } public PreparedStatement getRemovedMessageStatement() { return removedMessageStatement; } public void setRemovedMessageStatement(PreparedStatement removedMessageStatement) { this removedMessageStatement = removedMessageStatement; } public void setTransactionIsolation(int transactionIsolation) { this transactionIsolation = transactionIsolation; } }",1.0,
1236,1236,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\BytesJDBCAdapter.,BytesJDBCAdapter,"public class BytesJDBCAdapter extends DefaultJDBCAdapter { Override protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException { return rs getBytes(index); } Override protected void setBinaryData(PreparedStatement s, int index, byte[] data) throws SQLException { s setBytes(index, data); } }",1.0,
1237,1237,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\DB2JDBCAdapter.,DB2JDBCAdapter,"public class DB2JDBCAdapter extends DefaultJDBCAdapter { Override public void setStatements(Statements statements) { String lockCreateStatement = LOCK TABLE + statements getFullLockTableName() + IN EXCLUSIVE MODE ; statements setLockCreateStatement(lockCreateStatement); super setStatements(statements); } Override protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException { Blob aBlob = rs getBlob(index); return aBlob getBytes(1, (int) aBlob length()); } }",1.0,
1239,1239,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\HsqldbJDBCAdapter.,HsqldbJDBCAdapter,public class HsqldbJDBCAdapter extends BytesJDBCAdapter { Override public void setStatements(Statements statements) { statements setBinaryDataType( OTHER ); super setStatements(statements); } },1.0,
1240,1240,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\ImageBasedJDBCAdaptor.,ImageBasedJDBCAdaptor,public class ImageBasedJDBCAdaptor extends DefaultJDBCAdapter { Override public void setStatements(Statements statements) { statements setBinaryDataType( IMAGE ); super setStatements(statements); } },1.0,
1241,1241,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\InformixJDBCAdapter.,InformixJDBCAdapter,public class InformixJDBCAdapter extends BlobJDBCAdapter { Override public void setStatements(Statements statements) { statements setContainerNameDataType( VARCHAR(150) ); statements setStringIdDataType( VARCHAR(150) ); statements setLongDataType( INT8 ); statements setSequenceDataType( INT8 ); statements setBinaryDataType( BYTE ); super setStatements(statements); } },1.0,
1242,1242,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\MaxDBJDBCAdapter.,MaxDBJDBCAdapter,public class MaxDBJDBCAdapter extends DefaultJDBCAdapter { Override public void setStatements(Statements statements) { statements setBinaryDataType( LONG BYTE ); statements setStringIdDataType( VARCHAR(250) ASCII ); statements setContainerNameDataType( VARCHAR(250) ASCII ); statements setLongDataType( INTEGER ); statements setSequenceDataType( INTEGER ); super setStatements(statements); } },1.0,
1244,1244,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\OracleBlobJDBCAdapter.,OracleBlobJDBCAdapter,"public class OracleBlobJDBCAdapter extends BlobJDBCAdapter { Override public void setStatements(Statements statements) { statements setLongDataType( NUMBER ); statements setSequenceDataType( NUMBER ); super setStatements(statements); } Override protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException { Blob aBlob = rs getBlob(index); if (aBlob == null) { return null; } return aBlob getBytes(1, (int) aBlob length()); } }",1.0,
1245,1245,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\OracleJDBCAdapter.,OracleJDBCAdapter,public class OracleJDBCAdapter extends DefaultJDBCAdapter { Override public void setStatements(Statements statements) { statements setLongDataType( NUMBER ); statements setSequenceDataType( NUMBER ); super setStatements(statements); } },1.0,
1247,1247,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\StreamJDBCAdapter.,StreamJDBCAdapter,"public class StreamJDBCAdapter extends DefaultJDBCAdapter { Override protected byte[] getBinaryData(ResultSet rs, int index) throws SQLException { try { InputStream is = rs getBinaryStream(index); ByteArrayOutputStream os = new ByteArrayOutputStream(1024 * 4); int ch; while ((ch = is read()) >= 0) { os write(ch); } is close(); os close(); return os toByteArray(); } catch (IOException e) { throw (SQLException)new SQLException( Error reading binary parameter + index) initCause(e); } } Override protected void setBinaryData(PreparedStatement s, int index, byte[] data) throws SQLException { s setBinaryStream(index, new ByteArrayInputStream(data), data length); } }",1.0,
1248,1248,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\SybaseJDBCAdapter.,SybaseJDBCAdapter,public class SybaseJDBCAdapter extends ImageBasedJDBCAdaptor { Override public void setStatements(Statements statements) { statements setLockCreateStatement( LOCK TABLE + statements getFullLockTableName() + IN EXCLUSIVE MODE ); statements setLongDataType( DECIMAL ); statements setSequenceDataType( DECIMAL ); super setStatements(statements); } },1.0,
1249,1249,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\TransactDatabaseLocker.,TransactDatabaseLocker,"public class TransactDatabaseLocker extends DefaultDatabaseLocker { private static final Logger LOG = LoggerFactory getLogger(TransactDatabaseLocker class); Override public void doStart() throws Exception { stopping = false; LOG info( Attempting to acquire the exclusive lock to become the Master broker ); PreparedStatement statement = null; while (true) { try { connection = dataSource getConnection(); connection setAutoCommit(false); String sql = statements getLockCreateStatement(); statement = connection prepareStatement(sql); if (statement getMetaData() != null) { ResultSet rs = statement executeQuery(); rs next(); } else { statement execute(); } break; } catch (Exception e) { if (stopping) { throw new Exception( Cannot start broker as being asked to shut down Interrupted attempt to acquire lock + e, e); } if (exceptionHandler != null) { try { exceptionHandler handle(e); } catch (Throwable handlerException) { LOG error( The exception handler + exceptionHandler getClass() getCanonicalName() + threw this exception + handlerException + while trying to handle this excpetion + e, handlerException); } } else { LOG error( Failed to acquire lock + e, e); } } finally { if (null != statement) { try { statement close(); } catch (SQLException e1) { LOG warn( Caught while closing statement + e1, e1); } statement = null; } } LOG debug( Sleeping for + lockAcquireSleepInterval + milli(s) before trying again to get the lock ); try { Thread sleep(lockAcquireSleepInterval); } catch (InterruptedException ie) { LOG warn( Master lock retry sleep interrupted , ie); } } LOG info( Becoming the master on dataSource + dataSource); } }",1.0,
1250,1250,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\adapter\TransactJDBCAdapter.,TransactJDBCAdapter,"public class TransactJDBCAdapter extends ImageBasedJDBCAdaptor { Override public void setStatements(Statements statements) { String lockCreateStatement = SELECT * FROM + statements getFullLockTableName() + WITH (UPDLOCK, ROWLOCK) ; if (statements isUseLockCreateWhereClause()) { lockCreateStatement += WHERE ID = 1 ; } statements setLockCreateStatement(lockCreateStatement); super setStatements(statements); } }",1.0,
1259,1259,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\FilteredKahaDBPersistenceAdapter.,FilteredKahaDBPersistenceAdapter,"public class FilteredKahaDBPersistenceAdapter extends DestinationMapEntry { private KahaDBPersistenceAdapter persistenceAdapter; private boolean perDestination; public FilteredKahaDBPersistenceAdapter() { super(); } public FilteredKahaDBPersistenceAdapter(ActiveMQDestination destination, KahaDBPersistenceAdapter adapter) { setDestination(destination); persistenceAdapter = adapter; } public KahaDBPersistenceAdapter getPersistenceAdapter() { return persistenceAdapter; } public void setPersistenceAdapter(KahaDBPersistenceAdapter persistenceAdapter) { this persistenceAdapter = persistenceAdapter; } public boolean isPerDestination() { return perDestination; } public void setPerDestination(boolean perDestination) { this perDestination = perDestination; } }",1.0,
1260,1260,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\KahaDBPersistenceAdapter.,KahaDBPersistenceAdapter,"public class KahaDBPersistenceAdapter extends LockableServiceSupport implements PersistenceAdapter, JournaledStore { private final KahaDBStore letter = new KahaDBStore(); Override public void beginTransaction(ConnectionContext context) throws IOException { this letter beginTransaction(context); } Override public void checkpoint(boolean sync) throws IOException { this letter checkpoint(sync); } Override public void commitTransaction(ConnectionContext context) throws IOException { this letter commitTransaction(context); } Override public MessageStore createQueueMessageStore(ActiveMQQueue destination) throws IOException { return this letter createQueueMessageStore(destination); } Override public TopicMessageStore createTopicMessageStore(ActiveMQTopic destination) throws IOException { return this letter createTopicMessageStore(destination); } Override public TransactionStore createTransactionStore() throws IOException { return this letter createTransactionStore(); } Override public void deleteAllMessages() throws IOException { this letter deleteAllMessages(); } Override public Set<ActiveMQDestination> getDestinations() { return this letter getDestinations(); } Override public long getLastMessageBrokerSequenceId() throws IOException { return this letter getLastMessageBrokerSequenceId(); } Override public long getLastProducerSequenceId(ProducerId id) throws IOException { return this letter getLastProducerSequenceId(id); } Override public void removeQueueMessageStore(ActiveMQQueue destination) { this letter removeQueueMessageStore(destination); } Override public void removeTopicMessageStore(ActiveMQTopic destination) { this letter removeTopicMessageStore(destination); } Override public void rollbackTransaction(ConnectionContext context) throws IOException { this letter rollbackTransaction(context); } Override public void setBrokerName(String brokerName) { this letter setBrokerName(brokerName); } Override public void setUsageManager(SystemUsage usageManager) { this letter setUsageManager(usageManager); } Override public long size() { return this letter size(); } Override public void doStart() throws Exception { this letter start(); if (brokerService != null && brokerService isUseJmx()) { PersistenceAdapterView view = new PersistenceAdapterView(this); view setInflightTransactionViewCallable(new Callable<String>() { Override public String call() throws Exception { return letter getTransactions(); } }); view setDataViewCallable(new Callable<String>() { Override public String call() throws Exception { return letter getJournal() getFileMap() keySet() toString(); } }); AnnotatedMBean registerMBean(brokerService getManagementContext(), view, createPersistenceAdapterName(brokerService getBrokerObjectName() toString(), toString())); } } Override public void doStop(ServiceStopper stopper) throws Exception { this letter stop(); if (brokerService != null && brokerService isUseJmx()) { ObjectName brokerObjectName = brokerService getBrokerObjectName(); brokerService getManagementContext() unregisterMBean(createPersistenceAdapterName(brokerObjectName toString(), toString())); } } Override public int getJournalMaxFileLength() { return this letter getJournalMaxFileLength(); } public void setJournalMaxFileLength(int journalMaxFileLength) { this letter setJournalMaxFileLength(journalMaxFileLength); } public void setMaxFailoverProducersToTrack(int maxFailoverProducersToTrack) { this letter setMaxFailoverProducersToTrack(maxFailoverProducersToTrack); } public int getMaxFailoverProducersToTrack() { return this letter getMaxFailoverProducersToTrack(); } public void setFailoverProducersAuditDepth(int failoverProducersAuditDepth) { this letter setFailoverProducersAuditDepth(failoverProducersAuditDepth); } public int getFailoverProducersAuditDepth() { return this letter getFailoverProducersAuditDepth(); } public long getCheckpointInterval() { return this letter getCheckpointInterval(); } public void setCheckpointInterval(long checkpointInterval) { this letter setCheckpointInterval(checkpointInterval); } public long getCleanupInterval() { return this letter getCleanupInterval(); } public void setCleanupInterval(long cleanupInterval) { this letter setCleanupInterval(cleanupInterval); } public int getIndexWriteBatchSize() { return this letter getIndexWriteBatchSize(); } public void setIndexWriteBatchSize(int indexWriteBatchSize) { this letter setIndexWriteBatchSize(indexWriteBatchSize); } public int getJournalMaxWriteBatchSize() { return this letter getJournalMaxWriteBatchSize(); } public void setJournalMaxWriteBatchSize(int journalMaxWriteBatchSize) { this letter setJournalMaxWriteBatchSize(journalMaxWriteBatchSize); } public boolean isEnableIndexWriteAsync() { return this letter isEnableIndexWriteAsync(); } public void setEnableIndexWriteAsync(boolean enableIndexWriteAsync) { this letter setEnableIndexWriteAsync(enableIndexWriteAsync); } Override public File getDirectory() { return this letter getDirectory(); } Override public void setDirectory(File dir) { this letter setDirectory(dir); } public boolean isEnableJournalDiskSyncs() { return this letter isEnableJournalDiskSyncs(); } public void setEnableJournalDiskSyncs(boolean enableJournalDiskSyncs) { this letter setEnableJournalDiskSyncs(enableJournalDiskSyncs); } public int getIndexCacheSize() { return this letter getIndexCacheSize(); } public void setIndexCacheSize(int indexCacheSize) { this letter setIndexCacheSize(indexCacheSize); } public boolean isIgnoreMissingJournalfiles() { return this letter isIgnoreMissingJournalfiles(); } public void setIgnoreMissingJournalfiles(boolean ignoreMissingJournalfiles) { this letter setIgnoreMissingJournalfiles(ignoreMissingJournalfiles); } public boolean isChecksumJournalFiles() { return letter isChecksumJournalFiles(); } public boolean isCheckForCorruptJournalFiles() { return letter isCheckForCorruptJournalFiles(); } public void setChecksumJournalFiles(boolean checksumJournalFiles) { letter setChecksumJournalFiles(checksumJournalFiles); } public void setCheckForCorruptJournalFiles(boolean checkForCorruptJournalFiles) { letter setCheckForCorruptJournalFiles(checkForCorruptJournalFiles); } Override public void setBrokerService(BrokerService brokerService) { super setBrokerService(brokerService); letter setBrokerService(brokerService); } public boolean isArchiveDataLogs() { return letter isArchiveDataLogs(); } public void setArchiveDataLogs(boolean archiveDataLogs) { letter setArchiveDataLogs(archiveDataLogs); } public File getDirectoryArchive() { return letter getDirectoryArchive(); } public void setDirectoryArchive(File directoryArchive) { letter setDirectoryArchive(directoryArchive); } public boolean isConcurrentStoreAndDispatchQueues() { return letter isConcurrentStoreAndDispatchQueues(); } public void setConcurrentStoreAndDispatchQueues(boolean concurrentStoreAndDispatch) { letter setConcurrentStoreAndDispatchQueues(concurrentStoreAndDispatch); } public boolean isConcurrentStoreAndDispatchTopics() { return letter isConcurrentStoreAndDispatchTopics(); } public void setConcurrentStoreAndDispatchTopics(boolean concurrentStoreAndDispatch) { letter setConcurrentStoreAndDispatchTopics(concurrentStoreAndDispatch); } public int getMaxAsyncJobs() { return letter getMaxAsyncJobs(); } public void setMaxAsyncJobs(int maxAsyncJobs) { letter setMaxAsyncJobs(maxAsyncJobs); } Deprecated public void setDatabaseLockedWaitDelay(int databaseLockedWaitDelay) throws IOException { getLocker() setLockAcquireSleepInterval(databaseLockedWaitDelay); } public boolean getForceRecoverIndex() { return letter getForceRecoverIndex(); } public void setForceRecoverIndex(boolean forceRecoverIndex) { letter setForceRecoverIndex(forceRecoverIndex); } public boolean isArchiveCorruptedIndex() { return letter isArchiveCorruptedIndex(); } public void setArchiveCorruptedIndex(boolean archiveCorruptedIndex) { letter setArchiveCorruptedIndex(archiveCorruptedIndex); } public void setRewriteOnRedelivery(boolean rewriteOnRedelivery) { letter setRewriteOnRedelivery(rewriteOnRedelivery); } public boolean isRewriteOnRedelivery() { return letter isRewriteOnRedelivery(); } public float getIndexLFUEvictionFactor() { return letter getIndexLFUEvictionFactor(); } public void setIndexLFUEvictionFactor(float indexLFUEvictionFactor) { letter setIndexLFUEvictionFactor(indexLFUEvictionFactor); } public boolean isUseIndexLFRUEviction() { return letter isUseIndexLFRUEviction(); } public void setUseIndexLFRUEviction(boolean useIndexLFRUEviction) { letter setUseIndexLFRUEviction(useIndexLFRUEviction); } public void setEnableIndexDiskSyncs(boolean diskSyncs) { letter setEnableIndexDiskSyncs(diskSyncs); } public boolean isEnableIndexDiskSyncs() { return letter isEnableIndexDiskSyncs(); } public void setEnableIndexRecoveryFile(boolean enable) { letter setEnableIndexRecoveryFile(enable); } public boolean isEnableIndexRecoveryFile() { return letter isEnableIndexRecoveryFile(); } public void setEnableIndexPageCaching(boolean enable) { letter setEnableIndexPageCaching(enable); } public boolean isEnableIndexPageCaching() { return letter isEnableIndexPageCaching(); } public KahaDBStore getStore() { return letter; } public KahaTransactionInfo createTransactionInfo(TransactionId txid) { if (txid == null) { return null; } KahaTransactionInfo rc = new KahaTransactionInfo(); if (txid isLocalTransaction()) { LocalTransactionId t = (LocalTransactionId) txid; KahaLocalTransactionId kahaTxId = new KahaLocalTransactionId(); kahaTxId setConnectionId(t getConnectionId() getValue()); kahaTxId setTransactionId(t getValue()); rc setLocalTransactionId(kahaTxId); } else { XATransactionId t = (XATransactionId) txid; KahaXATransactionId kahaTxId = new KahaXATransactionId(); kahaTxId setBranchQualifier(new Buffer(t getBranchQualifier())); kahaTxId setGlobalTransactionId(new Buffer(t getGlobalTransactionId())); kahaTxId setFormatId(t getFormatId()); rc setXaTransactionId(kahaTxId); } return rc; } Override public Locker createDefaultLocker() throws IOException { SharedFileLocker locker = new SharedFileLocker(); locker configure(this); return locker; } Override public void init() throws Exception {} Override public String toString() { String path = getDirectory() != null getDirectory() getAbsolutePath() DIRECTORY NOT SET ; return KahaDBPersistenceAdapter[ + path + ] ; } }",1.0,
1266,1266,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\KahaDBStore.,InnerFutureTask,"private class InnerFutureTask extends FutureTask<Object> { public InnerFutureTask(Runnable runnable) { super(runnable, null); } public void setException(final Exception e) { super setException(e); } public void complete() { super set(null); } } } class StoreTopicTask extends StoreQueueTask { private final int subscriptionCount; private final List<String> subscriptionKeys = new ArrayList<String>(1); private final KahaDBTopicMessageStore topicStore; public StoreTopicTask(KahaDBTopicMessageStore store, ConnectionContext context, Message message, int subscriptionCount) { super(store, context, message); this topicStore = store; this subscriptionCount = subscriptionCount; } Override public void aquireLocks() { if (this locked compareAndSet(false, true)) { try { globalTopicSemaphore acquire(); store acquireLocalAsyncLock(); message incrementReferenceCount(); } catch (InterruptedException e) { LOG warn( Failed to aquire lock , e); } } } Override public void releaseLocks() { if (this locked compareAndSet(true, false)) { message decrementReferenceCount(); store releaseLocalAsyncLock(); globalTopicSemaphore release(); } } public boolean addSubscriptionKey(String key) { synchronized (this subscriptionKeys) { this subscriptionKeys add(key); } return this subscriptionKeys size() >= this subscriptionCount; } Override public void run() { this store doneTasks++; try { if (this done compareAndSet(false, true)) { this topicStore addMessage(context, message); synchronized (this subscriptionKeys) { for (String key this subscriptionKeys) { this topicStore doAcknowledge(context, key, this message getMessageId(), null); } } removeTopicTask(this topicStore, this message getMessageId()); this future complete(); } else if (cancelledTaskModMetric > 0 && this store canceledTasks++ % cancelledTaskModMetric == 0) { System err println(this store dest getName() + cancelled + (this store canceledTasks / this store doneTasks) * 100); this store canceledTasks = this store doneTasks = 0; } } catch (Exception e) { this future setException(e); } } } public class StoreTaskExecutor extends ThreadPoolExecutor { public StoreTaskExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit timeUnit, BlockingQueue<Runnable> queue, ThreadFactory threadFactory) { super(corePoolSize, maximumPoolSize, keepAliveTime, timeUnit, queue, threadFactory); } protected void afterExecute(Runnable runnable, Throwable throwable) { super afterExecute(runnable, throwable); if (runnable instanceof StoreTask) { ((StoreTask)runnable) releaseLocks(); } } } }",1.0,
1268,1268,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\KahaDBStore.,StoreTaskExecutor,"public class StoreTaskExecutor extends ThreadPoolExecutor { public StoreTaskExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit timeUnit, BlockingQueue<Runnable> queue, ThreadFactory threadFactory) { super(corePoolSize, maximumPoolSize, keepAliveTime, timeUnit, queue, threadFactory); } protected void afterExecute(Runnable runnable, Throwable throwable) { super afterExecute(runnable, throwable); if (runnable instanceof StoreTask) { ((StoreTask)runnable) releaseLocks(); } } }",1.0,
1271,1271,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\KahaDBTransactionStore.,AddMessageCommand,public abstract class AddMessageCommand { private final ConnectionContext ctx; AddMessageCommand(ConnectionContext ctx) { this ctx = ctx; } abstract Message getMessage(); Future<Object> run() throws IOException { return run(this ctx); } abstract Future<Object> run(ConnectionContext ctx) throws IOException; },1.0,
1272,1272,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\KahaDBTransactionStore.,RemoveMessageCommand,public abstract class RemoveMessageCommand { private final ConnectionContext ctx; RemoveMessageCommand(ConnectionContext ctx) { this ctx = ctx; } abstract MessageAck getMessageAck(); Future<Object> run() throws IOException { return run(this ctx); } abstract Future<Object> run(ConnectionContext context) throws IOException; },1.0,
1274,1274,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,Metadata,"protected class Metadata { protected Page<Metadata> page; protected int state; protected BTreeIndex<String, StoredDestination> destinations; protected Location lastUpdate; protected Location firstInProgressTransactionLocation; protected Location producerSequenceIdTrackerLocation = null; protected transient ActiveMQMessageAuditNoSync producerSequenceIdTracker = new ActiveMQMessageAuditNoSync(); protected int version = VERSION; public void read(DataInput is) throws IOException { state = is readInt(); destinations = new BTreeIndex<String, StoredDestination>(pageFile, is readLong()); if (is readBoolean()) { lastUpdate = LocationMarshaller INSTANCE readPayload(is); } else { lastUpdate = null; } if (is readBoolean()) { firstInProgressTransactionLocation = LocationMarshaller INSTANCE readPayload(is); } else { firstInProgressTransactionLocation = null; } try { if (is readBoolean()) { producerSequenceIdTrackerLocation = LocationMarshaller INSTANCE readPayload(is); } else { producerSequenceIdTrackerLocation = null; } } catch (EOFException expectedOnUpgrade) { } try { version = is readInt(); } catch (EOFException expectedOnUpgrade) { version=1; } LOG info( KahaDB is version + version); } public void write(DataOutput os) throws IOException { os writeInt(state); os writeLong(destinations getPageId()); if (lastUpdate != null) { os writeBoolean(true); LocationMarshaller INSTANCE writePayload(lastUpdate, os); } else { os writeBoolean(false); } if (firstInProgressTransactionLocation != null) { os writeBoolean(true); LocationMarshaller INSTANCE writePayload(firstInProgressTransactionLocation, os); } else { os writeBoolean(false); } if (producerSequenceIdTrackerLocation != null) { os writeBoolean(true); LocationMarshaller INSTANCE writePayload(producerSequenceIdTrackerLocation, os); } else { os writeBoolean(false); } os writeInt(VERSION); } }",1.0,
1275,1275,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,MetadataMarshaller,"class MetadataMarshaller extends VariableMarshaller<Metadata> { Override public Metadata readPayload(DataInput dataIn) throws IOException { Metadata rc = new Metadata(); rc read(dataIn); return rc; } Override public void writePayload(Metadata object, DataOutput dataOut) throws IOException { object write(dataOut); } }",1.0,
1276,1276,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,TranInfo,"class TranInfo { TransactionId id; Location location; class opCount { int add; int remove; } HashMap<KahaDestination, opCount> destinationOpCount = new HashMap<KahaDestination, opCount>(); public void track(Operation operation) { if (location == null ) { location = operation getLocation(); } KahaDestination destination; boolean isAdd = false; if (operation instanceof AddOpperation) { AddOpperation add = (AddOpperation) operation; destination = add getCommand() getDestination(); isAdd = true; } else { RemoveOpperation removeOpperation = (RemoveOpperation) operation; destination = removeOpperation getCommand() getDestination(); } opCount opCount = destinationOpCount get(destination); if (opCount == null) { opCount = new opCount(); destinationOpCount put(destination, opCount); } if (isAdd) { opCount add++; } else { opCount remove++; } } Override public String toString() { StringBuffer buffer = new StringBuffer(); buffer append(location) append( ; ) append(id) append( ; n ); for (Entry<KahaDestination, opCount> op destinationOpCount entrySet()) { buffer append(op getKey()) append( + ) append(op getValue() add) append( , ) append( - ) append(op getValue() remove) append( ; ); } return buffer toString(); } } SuppressWarnings( rawtypes )",1.0,
1277,1277,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,opCount,class opCount { int add; int remove; },1.0,
1278,1278,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,StoredSubscription,class StoredSubscription { SubscriptionInfo subscriptionInfo; String lastAckId; Location lastAckLocation; Location cursor; },1.0,
1279,1279,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,MessageKeys,"static class MessageKeys { final String messageId; final Location location; public MessageKeys(String messageId, Location location) { this messageId=messageId; this location=location; } Override public String toString() { return [ +messageId+ , +location+ ] ; } }",1.0,
1281,1281,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,LastAck,"class LastAck { long lastAckedSequence; byte priority; public LastAck(LastAck source) { this lastAckedSequence = source lastAckedSequence; this priority = source priority; } public LastAck() { this priority = MessageOrderIndex HI; } public LastAck(long ackLocation) { this lastAckedSequence = ackLocation; this priority = MessageOrderIndex LO; } public LastAck(long ackLocation, byte priority) { this lastAckedSequence = ackLocation; this priority = priority; } Override public String toString() { return [ + lastAckedSequence + + priority + ] ; } }",1.0,
1282,1282,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,LastAckMarshaller,"protected class LastAckMarshaller implements Marshaller<LastAck> { Override public void writePayload(LastAck object, DataOutput dataOut) throws IOException { dataOut writeLong(object lastAckedSequence); dataOut writeByte(object priority); } Override public LastAck readPayload(DataInput dataIn) throws IOException { LastAck lastAcked = new LastAck(); lastAcked lastAckedSequence = dataIn readLong(); if (metadata version >= 3) { lastAcked priority = dataIn readByte(); } return lastAcked; } Override public int getFixedSize() { return 9; } Override public LastAck deepCopy(LastAck source) { return new LastAck(source); } Override public boolean isDeepCopySupported() { return true; } }",1.0,
1283,1283,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,StoredDestination,"class StoredDestination { MessageOrderIndex orderIndex = new MessageOrderIndex(); BTreeIndex<Location, Long> locationIndex; BTreeIndex<String, Long> messageIdIndex; BTreeIndex<String, KahaSubscriptionCommand> subscriptions; BTreeIndex<String, LastAck> subscriptionAcks; HashMap<String, MessageOrderCursor> subscriptionCursors; ListIndex<String, SequenceSet> ackPositions; final TreeMap<Long, Long> messageReferences = new TreeMap<Long, Long>(); final HashSet<String> subscriptionCache = new LinkedHashSet<String>(); }",1.0,
1285,1285,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,KahaSubscriptionCommandMarshaller,"static class KahaSubscriptionCommandMarshaller extends VariableMarshaller<KahaSubscriptionCommand> { final static KahaSubscriptionCommandMarshaller INSTANCE = new KahaSubscriptionCommandMarshaller(); Override public KahaSubscriptionCommand readPayload(DataInput dataIn) throws IOException { KahaSubscriptionCommand rc = new KahaSubscriptionCommand(); rc mergeFramed((InputStream)dataIn); return rc; } Override public void writePayload(KahaSubscriptionCommand object, DataOutput dataOut) throws IOException { object writeFramed((OutputStream)dataOut); } }",1.0,
1286,1286,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,Operation,"abstract class Operation <T extends JournalCommand<T>> { final T command; final Location location; public Operation(T command, Location location) { this command = command; this location = location; } public Location getLocation() { return location; } public T getCommand() { return command; } abstract public void execute(Transaction tx) throws IOException; }",1.0,
1287,1287,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,AddOpperation,"class AddOpperation extends Operation<KahaAddMessageCommand> { public AddOpperation(KahaAddMessageCommand command, Location location) { super(command, location); } Override public void execute(Transaction tx) throws IOException { upadateIndex(tx, command, location); } }",1.0,
1288,1288,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,RemoveOpperation,"class RemoveOpperation extends Operation<KahaRemoveMessageCommand> { public RemoveOpperation(KahaRemoveMessageCommand command, Location location) { super(command, location); } Override public void execute(Transaction tx) throws IOException { updateIndex(tx, command, location); } }",1.0,
1289,1289,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,MessageOrderCursor,"class MessageOrderCursor{ long defaultCursorPosition; long lowPriorityCursorPosition; long highPriorityCursorPosition; MessageOrderCursor(){ } MessageOrderCursor(long position){ this defaultCursorPosition=position; this lowPriorityCursorPosition=position; this highPriorityCursorPosition=position; } MessageOrderCursor(MessageOrderCursor other){ this defaultCursorPosition=other defaultCursorPosition; this lowPriorityCursorPosition=other lowPriorityCursorPosition; this highPriorityCursorPosition=other highPriorityCursorPosition; } MessageOrderCursor copy() { return new MessageOrderCursor(this); } void reset() { this defaultCursorPosition=0; this highPriorityCursorPosition=0; this lowPriorityCursorPosition=0; } void increment() { if (defaultCursorPosition!=0) { defaultCursorPosition++; } if (highPriorityCursorPosition!=0) { highPriorityCursorPosition++; } if (lowPriorityCursorPosition!=0) { lowPriorityCursorPosition++; } } Override public String toString() { return MessageOrderCursor [def + defaultCursorPosition + , low + lowPriorityCursorPosition + , high + highPriorityCursorPosition + ] ; } public void sync(MessageOrderCursor other) { this defaultCursorPosition=other defaultCursorPosition; this lowPriorityCursorPosition=other lowPriorityCursorPosition; this highPriorityCursorPosition=other highPriorityCursorPosition; } }",1.0,
1291,1291,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\MessageDatabase.,MessageOrderIterator,"class MessageOrderIterator implements Iterator<Entry<Long, MessageKeys>>{ Iterator<Entry<Long, MessageKeys>>currentIterator; final Iterator<Entry<Long, MessageKeys>>highIterator; final Iterator<Entry<Long, MessageKeys>>defaultIterator; final Iterator<Entry<Long, MessageKeys>>lowIterator; MessageOrderIterator(Transaction tx, MessageOrderCursor m) throws IOException { this defaultIterator = defaultPriorityIndex iterator(tx, m defaultCursorPosition); if (highPriorityIndex != null) { this highIterator = highPriorityIndex iterator(tx, m highPriorityCursorPosition); } else { this highIterator = null; } if (lowPriorityIndex != null) { this lowIterator = lowPriorityIndex iterator(tx, m lowPriorityCursorPosition); } else { this lowIterator = null; } } Override public boolean hasNext() { if (currentIterator == null) { if (highIterator != null) { if (highIterator hasNext()) { currentIterator = highIterator; return currentIterator hasNext(); } if (defaultIterator hasNext()) { currentIterator = defaultIterator; return currentIterator hasNext(); } if (lowIterator hasNext()) { currentIterator = lowIterator; return currentIterator hasNext(); } return false; } else { currentIterator = defaultIterator; return currentIterator hasNext(); } } if (highIterator != null) { if (currentIterator hasNext()) { return true; } if (currentIterator == highIterator) { if (defaultIterator hasNext()) { currentIterator = defaultIterator; return currentIterator hasNext(); } if (lowIterator hasNext()) { currentIterator = lowIterator; return currentIterator hasNext(); } return false; } if (currentIterator == defaultIterator) { if (lowIterator hasNext()) { currentIterator = lowIterator; return currentIterator hasNext(); } return false; } } return currentIterator hasNext(); } Override public Entry<Long, MessageKeys> next() { Entry<Long, MessageKeys> result = currentIterator next(); if (result != null) { Long key = result getKey(); if (highIterator != null) { if (currentIterator == defaultIterator) { lastDefaultKey = key; } else if (currentIterator == highIterator) { lastHighKey = key; } else { lastLowKey = key; } } else { lastDefaultKey = key; } } return result; } Override public void remove() { throw new UnsupportedOperationException(); } } }",1.0,
1300,1300,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,StoredSubscription,class StoredSubscription { SubscriptionInfo subscriptionInfo; String lastAckId; ByteSequence lastAckByteSequence; ByteSequence cursor; },1.0,
1302,1302,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,MessageKeysMarshaller,"static protected class MessageKeysMarshaller extends VariableMarshaller<MessageRecord> { static final MessageKeysMarshaller INSTANCE = new MessageKeysMarshaller(); public MessageRecord readPayload(DataInput dataIn) throws IOException { return new MessageRecord(dataIn readUTF(), ByteSequenceMarshaller INSTANCE readPayload(dataIn)); } public void writePayload(MessageRecord object, DataOutput dataOut) throws IOException { dataOut writeUTF(object messageId); ByteSequenceMarshaller INSTANCE writePayload(object data, dataOut); } }",1.0,
1303,1303,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,StoredDestination,"static class StoredDestination { long nextMessageId; BTreeIndex<Long, MessageRecord> orderIndex; BTreeIndex<String, Long> messageIdIndex; BTreeIndex<String, KahaSubscriptionCommand> subscriptions; BTreeIndex<String, Long> subscriptionAcks; HashMap<String, Long> subscriptionCursors; TreeMap<Long, HashSet<String>> ackPositions; }",1.0,
1305,1305,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,ByteSequenceMarshaller,"static class ByteSequenceMarshaller extends VariableMarshaller<ByteSequence> { final static ByteSequenceMarshaller INSTANCE = new ByteSequenceMarshaller(); public ByteSequence readPayload(DataInput dataIn) throws IOException { byte data[] = new byte[dataIn readInt()]; dataIn readFully(data); return new ByteSequence(data); } public void writePayload(ByteSequence object, DataOutput dataOut) throws IOException { dataOut writeInt(object getLength()); dataOut write(object getData(), object getOffset(), object getLength()); } }",1.0,
1306,1306,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,KahaSubscriptionCommandMarshaller,"static class KahaSubscriptionCommandMarshaller extends VariableMarshaller<KahaSubscriptionCommand> { final static KahaSubscriptionCommandMarshaller INSTANCE = new KahaSubscriptionCommandMarshaller(); public KahaSubscriptionCommand readPayload(DataInput dataIn) throws IOException { KahaSubscriptionCommand rc = new KahaSubscriptionCommand(); rc mergeFramed((InputStream)dataIn); return rc; } public void writePayload(KahaSubscriptionCommand object, DataOutput dataOut) throws IOException { object writeFramed((OutputStream)dataOut); } }",1.0,
1307,1307,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,Operation,abstract class Operation { abstract public void execute(Transaction tx) throws IOException; },1.0,
1308,1308,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,AddOpperation,"class AddOpperation extends Operation { final KahaAddMessageCommand command; private final ByteSequence data; public AddOpperation(KahaAddMessageCommand command, ByteSequence location) { this command = command; this data = location; } public void execute(Transaction tx) throws IOException { upadateIndex(tx, command, data); } public KahaAddMessageCommand getCommand() { return command; } }",1.0,
1309,1309,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,RemoveOpperation,"class RemoveOpperation extends Operation { final KahaRemoveMessageCommand command; public RemoveOpperation(KahaRemoveMessageCommand command) { this command = command; } public void execute(Transaction tx) throws IOException { updateIndex(tx, command); } public KahaRemoveMessageCommand getCommand() { return command; } }",1.0,
1310,1310,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TransactionIdConversion.,TransactionIdConversion,public class TransactionIdConversion { static KahaTransactionInfo convertToLocal(TransactionId tx) { KahaTransactionInfo rc = new KahaTransactionInfo(); LocalTransactionId t = (LocalTransactionId) tx; KahaLocalTransactionId kahaTxId = new KahaLocalTransactionId(); kahaTxId setConnectionId(t getConnectionId() getValue()); kahaTxId setTransactionId(t getValue()); rc setLocalTransactionId(kahaTxId); return rc; } static KahaTransactionInfo convert(TransactionId txid) { if (txid == null) { return null; } KahaTransactionInfo rc; if (txid isLocalTransaction()) { rc = convertToLocal(txid); } else { rc = new KahaTransactionInfo(); XATransactionId t = (XATransactionId) txid; KahaXATransactionId kahaTxId = new KahaXATransactionId(); kahaTxId setBranchQualifier(new Buffer(t getBranchQualifier())); kahaTxId setGlobalTransactionId(new Buffer(t getGlobalTransactionId())); kahaTxId setFormatId(t getFormatId()); rc setXaTransactionId(kahaTxId); } return rc; } static TransactionId convert(KahaTransactionInfo transactionInfo) { if (transactionInfo hasLocalTransactionId()) { KahaLocalTransactionId tx = transactionInfo getLocalTransactionId(); LocalTransactionId rc = new LocalTransactionId(); rc setConnectionId(new ConnectionId(tx getConnectionId())); rc setValue(tx getTransactionId()); return rc; } else { KahaXATransactionId tx = transactionInfo getXaTransactionId(); XATransactionId rc = new XATransactionId(); rc setBranchQualifier(tx getBranchQualifier() toByteArray()); rc setGlobalTransactionId(tx getGlobalTransactionId() toByteArray()); rc setFormatId(tx getFormatId()); return rc; } } },1.0,
1311,1311,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\Visitor.,Visitor,public class Visitor { public void visit(KahaTraceCommand command) { } public void visit(KahaRollbackCommand command) throws IOException { } public void visit(KahaRemoveMessageCommand command) throws IOException { } public void visit(KahaPrepareCommand command) throws IOException { } public void visit(KahaCommitCommand command) throws IOException { } public void visit(KahaAddMessageCommand command) throws IOException { } public void visit(KahaRemoveDestinationCommand command) throws IOException { } public void visit(KahaSubscriptionCommand kahaUpdateSubscriptionCommand) throws IOException { } public void visit(KahaProducerAuditCommand kahaProducerAuditCommand) throws IOException { } },1.0,
1313,1313,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeIndex.,StringPrefixer,"static public class StringPrefixer implements Prefixer<String> { public String getSimplePrefix(String value1, String value2) { char[] c1 = value1 toCharArray(); char[] c2 = value2 toCharArray(); int n = Math min(c1 length, c2 length); int i =0; while (i < n) { if (c1[i] != c2[i]) { return value2 substring(0,i+1); } i++; } if( n == c2 length ) { return value2; } return value2 substring(0,n); } }",1.0,
1314,1314,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeNode.,BTreeNode,"public final class BTreeNode<Key,Value> { private final BTreeIndex<Key,Value> index; private BTreeNode<Key,Value> parent; private Page<BTreeNode<Key,Value>> page; private Key[] keys; private Value[] values; private long[] children; private long next = -1; private final class KeyValueEntry implements Map Entry<Key, Value> { private final Key key; private final Value value; public KeyValueEntry(Key key, Value value) { this key = key; this value = value; } public Key getKey() { return key; } public Value getValue() { return value; } public Value setValue(Value value) { throw new UnsupportedOperationException(); } } private final class BTreeIterator implements Iterator<Map Entry<Key, Value>> { private final Transaction tx; BTreeNode<Key,Value> current; int nextIndex; Map Entry<Key,Value> nextEntry; private BTreeIterator(Transaction tx, BTreeNode<Key,Value> current, int nextIndex) { this tx = tx; this current = current; this nextIndex=nextIndex; } synchronized private void findNextPage() { if( nextEntry!=null ) { return; } try { while( current!=null ) { if( nextIndex >= current keys length ) { if( current next >= 0 ) { current = index loadNode(tx, current next, null); assert !current isBranch() Should have linked to the next leaf node ; nextIndex=0; } else { break; } } else { nextEntry = new KeyValueEntry(current keys[nextIndex], current values[nextIndex]); nextIndex++; break; } } } catch (IOException e) { } } public boolean hasNext() { findNextPage(); return nextEntry !=null; } public Entry<Key, Value> next() { findNextPage(); if( nextEntry !=null ) { Entry<Key, Value> lastEntry = nextEntry; nextEntry=null; return lastEntry; } else { throw new NoSuchElementException(); } } public void remove() { throw new UnsupportedOperationException(); } } static public class Marshaller<Key,Value> extends VariableMarshaller<BTreeNode<Key,Value>> { private final BTreeIndex<Key,Value> index; public Marshaller(BTreeIndex<Key,Value> index) { this index = index; } public void writePayload(BTreeNode<Key,Value> node, DataOutput os) throws IOException { short count = (short)node keys length; if( count != node keys length ) { throw new IOException( Too many keys ); } os writeShort(count); for (int i = 0; i < node keys length; i++) { index getKeyMarshaller() writePayload(node keys[i], os); } if( node isBranch() ) { os writeBoolean(true); for (int i = 0; i < count+1; i++) { os writeLong(node children[i]); } } else { os writeBoolean(false); for (int i = 0; i < count; i++) { index getValueMarshaller() writePayload(node values[i], os); } os writeLong(node next); } } SuppressWarnings( unchecked ) public BTreeNode<Key,Value> readPayload(DataInput is) throws IOException { BTreeNode<Key,Value> node = new BTreeNode<Key,Value>(index); int count = is readShort(); node keys = (Key[])new Object[count]; for (int i = 0; i < count; i++) { node keys[i] = index getKeyMarshaller() readPayload(is); } if( is readBoolean() ) { node children = new long[count+1]; for (int i = 0; i < count+1; i++) { node children[i] = is readLong(); } } else { node values = (Value[])new Object[count]; for (int i = 0; i < count; i++) { node values[i] = index getValueMarshaller() readPayload(is); } node next = is readLong(); } return node; } } public BTreeNode(BTreeIndex<Key,Value> index) { this index = index; } public void setEmpty() { setLeafData(createKeyArray(0), createValueArray(0)); } private BTreeNode<Key,Value> getChild(Transaction tx, int idx) throws IOException { if (isBranch() && idx >= 0 && idx < children length) { BTreeNode<Key, Value> result = this index loadNode(tx, children[idx], this); return result; } else { return null; } } private BTreeNode<Key,Value> getRightLeaf(Transaction tx) throws IOException { BTreeNode<Key,Value> cur = this; while(cur isBranch()) { cur = cur getChild(tx, cur keys length); } return cur; } private BTreeNode<Key,Value> getLeftLeaf(Transaction tx) throws IOException { BTreeNode<Key,Value> cur = this; while(cur isBranch()) { cur = cur getChild(tx, 0); } return cur; } private BTreeNode<Key,Value> getLeftPeer(Transaction tx, BTreeNode<Key,Value> x) throws IOException { BTreeNode<Key,Value> cur = x; while( cur parent !=null ) { if( cur parent children[0] == cur getPageId() ) { cur = cur parent; } else { for( int i=0; i < cur parent children length; i ++) { if( cur parent children[i]==cur getPageId() ) { return cur parent getChild(tx, i-1); } } throw new AssertionError( page +x+ was decendent of +cur getPageId()); } } return null; } public Value remove(Transaction tx, Key key) throws IOException { if(isBranch()) { int idx = Arrays binarySearch(keys, key); idx = idx < 0 -(idx + 1) idx + 1; BTreeNode<Key, Value> child = getChild(tx, idx); if( child getPageId() == index getPageId() ) { throw new IOException( BTree corrupted Cycle detected ); } Value rc = child remove(tx, key); if( child keys length == 0 ) { if( child isBranch() ) { children[idx] = child children[0]; tx free(child getPage()); } else { BTreeNode<Key, Value> previousLeaf = null; if( idx > 0 ) { previousLeaf = getChild(tx, idx-1) getRightLeaf(tx); } else { BTreeNode<Key, Value> lp = getLeftPeer(tx, this); if( lp!=null ) { previousLeaf = lp getRightLeaf(tx); } } if( previousLeaf !=null ) { previousLeaf next = child next; index storeNode(tx, previousLeaf, true); } if( idx < children length-1 ) { setBranchData(arrayDelete(keys, idx), arrayDelete(children, idx)); } else { setBranchData(arrayDelete(keys, idx-1), arrayDelete(children, idx)); } if( children length == 1 && parent==null ) { child = getChild(tx, 0); keys = child keys; children = child children; values = child values; tx free(child getPage()); } } index storeNode(tx, this, true); } return rc; } else { int idx = Arrays binarySearch(keys, key); if (idx < 0) { return null; } else { Value oldValue = values[idx]; setLeafData(arrayDelete(keys, idx), arrayDelete(values, idx)); if( keys length==0 && parent!=null) { tx free(getPage()); } else { index storeNode(tx, this, true); } return oldValue; } } } public Value put(Transaction tx, Key key, Value value) throws IOException { if (key == null) { throw new IllegalArgumentException( Key cannot be null ); } if( isBranch() ) { return getLeafNode(tx, this, key) put(tx, key, value); } else { int idx = Arrays binarySearch(keys, key); Value oldValue=null; if (idx >= 0) { oldValue = values[idx]; values[idx] = value; setLeafData(keys, values); } else { idx = -(idx + 1); setLeafData(arrayInsert(keys, key, idx), arrayInsert(values, value, idx)); } try { index storeNode(tx, this, allowOverflow()); } catch ( Transaction PageOverflowIOException e ) { split(tx); } return oldValue; } } private void promoteValue(Transaction tx, Key key, long nodeId) throws IOException { int idx = Arrays binarySearch(keys, key); idx = idx < 0 -(idx + 1) idx + 1; setBranchData(arrayInsert(keys, key, idx), arrayInsert(children, nodeId, idx + 1)); try { index storeNode(tx, this, allowOverflow()); } catch ( Transaction PageOverflowIOException e ) { split(tx); } } private void split(Transaction tx) throws IOException { Key[] leftKeys; Key[] rightKeys; Value[] leftValues=null; Value[] rightValues=null; long[] leftChildren=null; long[] rightChildren=null; Key separator; int vc = keys length; int pivot = vc / 2; if( isBranch() ) { leftKeys = createKeyArray(pivot); leftChildren = new long[leftKeys length + 1]; rightKeys = createKeyArray(vc - (pivot + 1)); rightChildren = new long[rightKeys length + 1]; System arraycopy(keys, 0, leftKeys, 0, leftKeys length); System arraycopy(children, 0, leftChildren, 0, leftChildren length); System arraycopy(keys, leftKeys length + 1, rightKeys, 0, rightKeys length); System arraycopy(children, leftChildren length, rightChildren, 0, rightChildren length); Prefixer<Key> prefixer = index getPrefixer(); if(prefixer!=null) { separator = prefixer getSimplePrefix(leftKeys[leftKeys length - 1], rightKeys[0]); } else { separator = keys[leftKeys length]; } } else { leftKeys = createKeyArray(pivot); leftValues = createValueArray(leftKeys length); rightKeys = createKeyArray(vc - pivot); rightValues = createValueArray(rightKeys length); System arraycopy(keys, 0, leftKeys, 0, leftKeys length); System arraycopy(values, 0, leftValues, 0, leftValues length); System arraycopy(keys, leftKeys length, rightKeys, 0, rightKeys length); System arraycopy(values, leftValues length, rightValues, 0, rightValues length); separator = rightKeys[0]; } if (parent == null) { BTreeNode<Key,Value> rNode = this index createNode(tx, this); BTreeNode<Key,Value> lNode = this index createNode(tx, this); if( isBranch() ) { rNode setBranchData(rightKeys, rightChildren); lNode setBranchData(leftKeys, leftChildren); } else { rNode setLeafData(rightKeys, rightValues); lNode setLeafData(leftKeys, leftValues); lNode setNext(rNode getPageId()); } Key[] v = createKeyArray(1); v[0]=separator; setBranchData(v, new long[] { lNode getPageId(), rNode getPageId() }); index storeNode(tx, this, true); index storeNode(tx, rNode, true); index storeNode(tx, lNode, true); } else { BTreeNode<Key,Value> rNode = this index createNode(tx, parent); if( isBranch() ) { setBranchData(leftKeys, leftChildren); rNode setBranchData(rightKeys, rightChildren); } else { rNode setNext(next); next = rNode getPageId(); setLeafData(leftKeys, leftValues); rNode setLeafData(rightKeys, rightValues); } index storeNode(tx, this, true); index storeNode(tx, rNode, true); parent promoteValue(tx, separator, rNode getPageId()); } } public void printStructure(Transaction tx, PrintWriter out, String prefix) throws IOException { if( prefix length()>0 && parent == null ) { throw new IllegalStateException( Cycle back to root node detected ); } if (parent == null) { prefix += | ; out println(prefix + getPageId()); } if( isBranch() ) { for(int i=0 ; i < children length; i++) { BTreeNode<Key, Value> child = getChild(tx, i); if( i == children length-1) { out println(prefix+ - +child getPageId()+(child isBranch() ( +child children length+ ) )); child printStructure(tx, out, prefix+ ); } else { out println(prefix+ |- +child getPageId()+(child isBranch() ( +child children length+ ) )+ +keys[i]); child printStructure(tx, out, prefix+ ); } } } } public int getMinLeafDepth(Transaction tx, int depth) throws IOException { depth++; if( isBranch() ) { int min = Integer MAX VALUE; for(int i=0 ; i < children length; i++) { min = Math min(min, getChild(tx, i) getMinLeafDepth(tx, depth)); } return min; } else { return depth; } } public int getMaxLeafDepth(Transaction tx, int depth) throws IOException { depth++; if( isBranch() ) { int v = 0; for(int i=0 ; i < children length; i++) { v = Math max(v, getChild(tx, i) getMaxLeafDepth(tx, depth)); } depth = v; } return depth; } public Value get(Transaction tx, Key key) throws IOException { if (key == null) { throw new IllegalArgumentException( Key cannot be null ); } if( isBranch() ) { return getLeafNode(tx, this, key) get(tx, key); } else { int idx = Arrays binarySearch(keys, key); if (idx < 0) { return null; } else { return values[idx]; } } } public boolean isEmpty(final Transaction tx) throws IOException { return keys length==0; } public void visit(Transaction tx, BTreeVisitor<Key, Value> visitor) throws IOException { if (visitor == null) { throw new IllegalArgumentException( Visitor cannot be null ); } if( isBranch() ) { for(int i=0; i < this children length; i++) { Key key1 = null; if( i!=0 ) { key1 = keys[i-1]; } Key key2 = null; if( i!=this children length-1 ) { key2 = keys[i]; } if( visitor isInterestedInKeysBetween(key1, key2) ) { BTreeNode<Key, Value> child = getChild(tx, i); child visit(tx, visitor); } } } else { visitor visit(Arrays asList(keys), Arrays asList(values)); } } public Map Entry<Key,Value> getFirst(Transaction tx) throws IOException { BTreeNode<Key, Value> node = this; while( node isBranch() ) { node = node getChild(tx, 0); } if( node values length>0 ) { return new KeyValueEntry(node keys[0], node values[0]); } else { return null; } } public Map Entry<Key,Value> getLast(Transaction tx) throws IOException { BTreeNode<Key, Value> node = this; while( node isBranch() ) { node = node getChild(tx, node children length-1); } if( node values length>0 ) { int idx = node values length-1; return new KeyValueEntry(node keys[idx], node values[idx]); } else { return null; } } public BTreeNode<Key,Value> getFirstLeafNode(Transaction tx) throws IOException { BTreeNode<Key, Value> node = this; while( node isBranch() ) { node = node getChild(tx, 0); } return node; } public Iterator<Map Entry<Key,Value>> iterator(final Transaction tx, Key startKey) throws IOException { if (startKey == null) { return iterator(tx); } if( isBranch() ) { return getLeafNode(tx, this, startKey) iterator(tx, startKey); } else { int idx = Arrays binarySearch(keys, startKey); if (idx < 0) { idx = -(idx + 1); } return new BTreeIterator(tx, this, idx); } } public Iterator<Map Entry<Key,Value>> iterator(final Transaction tx) throws IOException { return new BTreeIterator(tx, getFirstLeafNode(tx), 0); } public void clear(Transaction tx) throws IOException { if( isBranch() ) { for (int i = 0; i < children length; i++) { BTreeNode<Key, Value> node = index loadNode(tx, children[i], this); node clear(tx); tx free(node getPage()); } } if( parent == null ) { setLeafData(createKeyArray(0), createValueArray(0)); next=-1; index storeNode(tx, this, true); } } private static <Key,Value> BTreeNode<Key, Value> getLeafNode(Transaction tx, final BTreeNode<Key, Value> node, Key key) throws IOException { BTreeNode<Key, Value> current = node; while( true ) { if( current isBranch() ) { int idx = Arrays binarySearch(current keys, key); idx = idx < 0 -(idx + 1) idx + 1; BTreeNode<Key, Value> child = current getChild(tx, idx); if( child == node ) { throw new IOException( BTree corrupted Cylce detected ); } current = child; } else { break; } } return current; } public boolean contains(Transaction tx, Key key) throws IOException { if (key == null) { throw new IllegalArgumentException( Key cannot be null ); } if( isBranch() ) { return getLeafNode(tx, this, key) contains(tx, key); } else { int idx = Arrays binarySearch(keys, key); if (idx < 0) { return false; } else { return true; } } } private boolean allowOverflow() { return this keys length<=3; } private void setLeafData(Key[] keys, Value[] values) { this keys = keys; this values = values; this children = null; } private void setBranchData(Key[] keys, long[] nodeIds) { this keys = keys; this children = nodeIds; this values = null; } SuppressWarnings( unchecked ) private Key[] createKeyArray(int size) { return (Key[])new Object[size]; } SuppressWarnings( unchecked ) private Value[] createValueArray(int size) { return (Value[])new Object[size]; } SuppressWarnings( unchecked ) static private <T> T[] arrayDelete(T[] vals, int idx) { T[] newVals = (T[])new Object[vals length - 1]; if (idx > 0) { System arraycopy(vals, 0, newVals, 0, idx); } if (idx < newVals length) { System arraycopy(vals, idx + 1, newVals, idx, newVals length - idx); } return newVals; } static private long[] arrayDelete(long[] vals, int idx) { long[] newVals = new long[vals length - 1]; if (idx > 0) { System arraycopy(vals, 0, newVals, 0, idx); } if (idx < newVals length) { System arraycopy(vals, idx + 1, newVals, idx, newVals length - idx); } return newVals; } SuppressWarnings( unchecked ) static private <T> T[] arrayInsert(T[] vals, T val, int idx) { T[] newVals = (T[])new Object[vals length + 1]; if (idx > 0) { System arraycopy(vals, 0, newVals, 0, idx); } newVals[idx] = val; if (idx < vals length) { System arraycopy(vals, idx, newVals, idx + 1, vals length - idx); } return newVals; } static private long[] arrayInsert(long[] vals, long val, int idx) { long[] newVals = new long[vals length + 1]; if (idx > 0) { System arraycopy(vals, 0, newVals, 0, idx); } newVals[idx] = val; if (idx < vals length) { System arraycopy(vals, idx, newVals, idx + 1, vals length - idx); } return newVals; } private boolean isBranch() { return children!=null; } public long getPageId() { return page getPageId(); } public BTreeNode<Key, Value> getParent() { return parent; } public void setParent(BTreeNode<Key, Value> parent) { this parent = parent; } public Page<BTreeNode<Key, Value>> getPage() { return page; } public void setPage(Page<BTreeNode<Key, Value>> page) { this page = page; } public long getNext() { return next; } public void setNext(long next) { this next = next; } Override public String toString() { return [BTreeNode +(isBranch() branch leaf )+ +Arrays asList(keys)+ ] ; } }",1.0,
1315,1315,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeNode.,KeyValueEntry,"private final class KeyValueEntry implements Map Entry<Key, Value> { private final Key key; private final Value value; public KeyValueEntry(Key key, Value value) { this key = key; this value = value; } public Key getKey() { return key; } public Value getValue() { return value; } public Value setValue(Value value) { throw new UnsupportedOperationException(); } }",1.0,
1316,1316,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeNode.,BTreeIterator,"private final class BTreeIterator implements Iterator<Map Entry<Key, Value>> { private final Transaction tx; BTreeNode<Key,Value> current; int nextIndex; Map Entry<Key,Value> nextEntry; private BTreeIterator(Transaction tx, BTreeNode<Key,Value> current, int nextIndex) { this tx = tx; this current = current; this nextIndex=nextIndex; } synchronized private void findNextPage() { if( nextEntry!=null ) { return; } try { while( current!=null ) { if( nextIndex >= current keys length ) { if( current next >= 0 ) { current = index loadNode(tx, current next, null); assert !current isBranch() Should have linked to the next leaf node ; nextIndex=0; } else { break; } } else { nextEntry = new KeyValueEntry(current keys[nextIndex], current values[nextIndex]); nextIndex++; break; } } } catch (IOException e) { } } public boolean hasNext() { findNextPage(); return nextEntry !=null; } public Entry<Key, Value> next() { findNextPage(); if( nextEntry !=null ) { Entry<Key, Value> lastEntry = nextEntry; nextEntry=null; return lastEntry; } else { throw new NoSuchElementException(); } } public void remove() { throw new UnsupportedOperationException(); } }",1.0,
1317,1317,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeNode.,Marshaller,"static public class Marshaller<Key,Value> extends VariableMarshaller<BTreeNode<Key,Value>> { private final BTreeIndex<Key,Value> index; public Marshaller(BTreeIndex<Key,Value> index) { this index = index; } public void writePayload(BTreeNode<Key,Value> node, DataOutput os) throws IOException { short count = (short)node keys length; if( count != node keys length ) { throw new IOException( Too many keys ); } os writeShort(count); for (int i = 0; i < node keys length; i++) { index getKeyMarshaller() writePayload(node keys[i], os); } if( node isBranch() ) { os writeBoolean(true); for (int i = 0; i < count+1; i++) { os writeLong(node children[i]); } } else { os writeBoolean(false); for (int i = 0; i < count; i++) { index getValueMarshaller() writePayload(node values[i], os); } os writeLong(node next); } } SuppressWarnings( unchecked ) public BTreeNode<Key,Value> readPayload(DataInput is) throws IOException { BTreeNode<Key,Value> node = new BTreeNode<Key,Value>(index); int count = is readShort(); node keys = (Key[])new Object[count]; for (int i = 0; i < count; i++) { node keys[i] = index getKeyMarshaller() readPayload(is); } if( is readBoolean() ) { node children = new long[count+1]; for (int i = 0; i < count+1; i++) { node children[i] = is readLong(); } } else { node values = (Value[])new Object[count]; for (int i = 0; i < count; i++) { node values[i] = index getValueMarshaller() readPayload(is); } node next = is readLong(); } return node; } }",1.0,
1318,1318,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeVisitor.,PredicateVisitor,"abstract class PredicateVisitor<Key, Value> implements BTreeVisitor<Key, Value>, Predicate<Key> { public void visit(List<Key> keys, List<Value> values) { for( int i=0; i < keys size(); i++) { Key key = keys get(i); if( isInterestedInKey(key) ) { matched(key, values get(i)); } } } protected void matched(Key key, Value value) { } }",1.0,
1319,1319,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeVisitor.,OrVisitor,"class OrVisitor<Key, Value> extends PredicateVisitor<Key, Value> { private final List<Predicate<Key>> conditions; public OrVisitor(List<Predicate<Key>> conditions) { this conditions = conditions; } public boolean isInterestedInKeysBetween(Key first, Key second) { for (Predicate<Key> condition conditions) { if( condition isInterestedInKeysBetween(first, second) ) { return true; } } return false; } public boolean isInterestedInKey(Key key) { for (Predicate<Key> condition conditions) { if( condition isInterestedInKey(key) ) { return true; } } return false; } Override public String toString() { StringBuilder sb = new StringBuilder(); boolean first=true; for (Predicate<Key> condition conditions) { if( !first ) { sb append( OR ); } first=false; sb append( ( ); sb append(condition); sb append( ) ); } return sb toString(); } }",1.0,
1320,1320,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeVisitor.,AndVisitor,"class AndVisitor<Key, Value> extends PredicateVisitor<Key, Value> { private final List<Predicate<Key>> conditions; public AndVisitor(List<Predicate<Key>> conditions) { this conditions = conditions; } public boolean isInterestedInKeysBetween(Key first, Key second) { for (Predicate<Key> condition conditions) { if( !condition isInterestedInKeysBetween(first, second) ) { return false; } } return true; } public boolean isInterestedInKey(Key key) { for (Predicate<Key> condition conditions) { if( !condition isInterestedInKey(key) ) { return false; } } return true; } Override public String toString() { StringBuilder sb = new StringBuilder(); boolean first=true; for (Predicate<Key> condition conditions) { if( !first ) { sb append( AND ); } first=false; sb append( ( ); sb append(condition); sb append( ) ); } return sb toString(); } }",1.0,
1321,1321,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeVisitor.,BetweenVisitor,"class BetweenVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> { private final Key first; private final Key last; public BetweenVisitor(Key first, Key last) { this first = first; this last = last; } public boolean isInterestedInKeysBetween(Key first, Key second) { return (second==null || second compareTo(this first)>=0) && (first==null || first compareTo(last)<0); } public boolean isInterestedInKey(Key key) { return key compareTo(first) >=0 && key compareTo(last) <0; } Override public String toString() { return first+ <= key < +last; } }",1.0,
1322,1322,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeVisitor.,GTVisitor,"class GTVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> { final private Key value; public GTVisitor(Key value) { this value = value; } public boolean isInterestedInKeysBetween(Key first, Key second) { return second==null || second compareTo(value)>0; } public boolean isInterestedInKey(Key key) { return key compareTo(value)>0; } Override public String toString() { return key > + value; } }",1.0,
1323,1323,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeVisitor.,GTEVisitor,"class GTEVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> { final private Key value; public GTEVisitor(Key value) { this value = value; } public boolean isInterestedInKeysBetween(Key first, Key second) { return second==null || second compareTo(value)>=0; } public boolean isInterestedInKey(Key key) { return key compareTo(value)>=0; } Override public String toString() { return key >= + value; } }",1.0,
1324,1324,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeVisitor.,LTVisitor,"class LTVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> { final private Key value; public LTVisitor(Key value) { this value = value; } public boolean isInterestedInKeysBetween(Key first, Key second) { return first==null || first compareTo(value)<0; } public boolean isInterestedInKey(Key key) { return key compareTo(value)<0; } Override public String toString() { return key < + value; } }",1.0,
1325,1325,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\BTreeVisitor.,LTEVisitor,"class LTEVisitor<Key extends Comparable<Key>, Value> extends PredicateVisitor<Key, Value> { final private Key value; public LTEVisitor(Key value) { this value = value; } public boolean isInterestedInKeysBetween(Key first, Key second) { return first==null || first compareTo(value)<=0; } public boolean isInterestedInKey(Key key) { return key compareTo(value)<=0; } Override public String toString() { return key <= + value; } }",1.0,
1326,1326,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\HashBin.,HashBin,"class HashBin<Key, Value> { static public class Marshaller<Key, Value> extends VariableMarshaller<HashBin<Key, Value>> { private final HashIndex<Key, Value> hashIndex; public Marshaller(HashIndex<Key, Value> index) { this hashIndex = index; } public HashBin<Key, Value> readPayload(DataInput is) throws IOException { HashBin<Key, Value> bin = new HashBin<Key, Value>(); int size = is readInt(); for(int i=0; i < size; i++) { Key key = hashIndex getKeyMarshaller() readPayload(is); Value value = hashIndex getValueMarshaller() readPayload(is); bin data put(key, value); } return bin; } public void writePayload(HashBin<Key, Value> bin, DataOutput os) throws IOException { os writeInt(bin data size()); for (Map Entry<Key, Value> entry bin data entrySet()) { hashIndex getKeyMarshaller() writePayload(entry getKey(), os); hashIndex getValueMarshaller() writePayload(entry getValue(), os); } } } private Page<HashBin<Key, Value>> page; private TreeMap<Key, Value> data = new TreeMap<Key, Value>(); public int size() { return data size(); } public Value put(Key key, Value value) throws IOException { return data put(key, value); } public Value get(Key key) throws IOException { return data get(key); } public boolean containsKey(Key key) throws IOException { return data containsKey(key); } public Map<Key, Value> getAll(Transaction tx) throws IOException { return data; } public Value remove(Key key) throws IOException { return data remove(key); } public Page<HashBin<Key, Value>> getPage() { return page; } public void setPage(Page<HashBin<Key, Value>> page) { this page = page; this page set(this); } }",1.0,
1327,1327,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\HashBin.,Marshaller,"static public class Marshaller<Key, Value> extends VariableMarshaller<HashBin<Key, Value>> { private final HashIndex<Key, Value> hashIndex; public Marshaller(HashIndex<Key, Value> index) { this hashIndex = index; } public HashBin<Key, Value> readPayload(DataInput is) throws IOException { HashBin<Key, Value> bin = new HashBin<Key, Value>(); int size = is readInt(); for(int i=0; i < size; i++) { Key key = hashIndex getKeyMarshaller() readPayload(is); Value value = hashIndex getValueMarshaller() readPayload(is); bin data put(key, value); } return bin; } public void writePayload(HashBin<Key, Value> bin, DataOutput os) throws IOException { os writeInt(bin data size()); for (Map Entry<Key, Value> entry bin data entrySet()) { hashIndex getKeyMarshaller() writePayload(entry getKey(), os); hashIndex getValueMarshaller() writePayload(entry getValue(), os); } } }",1.0,
1329,1329,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\HashIndex.,Metadata,"static class Metadata { private Page<Metadata> page; private int state; private long binPageId; private int binCapacity = DEFAULT BIN CAPACITY; private int binsActive; private int size; public void read(DataInput is) throws IOException { state = is readInt(); binPageId = is readLong(); binCapacity = is readInt(); size = is readInt(); binsActive = is readInt(); } public void write(DataOutput os) throws IOException { os writeInt(state); os writeLong(binPageId); os writeInt(binCapacity); os writeInt(size); os writeInt(binsActive); } static class Marshaller extends VariableMarshaller<Metadata> { public Metadata readPayload(DataInput dataIn) throws IOException { Metadata rc = new Metadata(); rc read(dataIn); return rc; } public void writePayload(Metadata object, DataOutput dataOut) throws IOException { object write(dataOut); } } }",1.0,
1330,1330,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\HashIndex.,Marshaller,"static class Marshaller extends VariableMarshaller<Metadata> { public Metadata readPayload(DataInput dataIn) throws IOException { Metadata rc = new Metadata(); rc read(dataIn); return rc; } public void writePayload(Metadata object, DataOutput dataOut) throws IOException { object write(dataOut); } } }",1.0,
1331,1331,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\ListIndex.,ListIndex,"public class ListIndex<Key,Value> implements Index<Key,Value> { private static final Logger LOG = LoggerFactory getLogger(ListIndex class); public final static long NOT SET = -1; protected PageFile pageFile; protected long headPageId; protected long tailPageId; private AtomicLong size = new AtomicLong(0); protected AtomicBoolean loaded = new AtomicBoolean(); private ListNode NodeMarshaller<Key, Value> marshaller; private Marshaller<Key> keyMarshaller; private Marshaller<Value> valueMarshaller; public ListIndex() { } public ListIndex(PageFile pageFile, long headPageId) { this pageFile = pageFile; setHeadPageId(headPageId); } SuppressWarnings( rawtypes ) public ListIndex(PageFile pageFile, Page page) { this(pageFile, page getPageId()); } synchronized public void load(Transaction tx) throws IOException { if (loaded compareAndSet(false, true)) { LOG debug( loading ); if( keyMarshaller == null ) { throw new IllegalArgumentException( The key marshaller must be set before loading the ListIndex ); } if( valueMarshaller == null ) { throw new IllegalArgumentException( The value marshaller must be set before loading the ListIndex ); } marshaller = new ListNode NodeMarshaller<Key, Value>(keyMarshaller, valueMarshaller); final Page<ListNode<Key,Value>> p = tx load(getHeadPageId(), null); if( p getType() == Page PAGE FREE TYPE ) { ListNode<Key, Value> root = createNode(p); storeNode(tx, root, true); setHeadPageId(p getPageId()); setTailPageId(getHeadPageId()); } else { ListNode<Key, Value> node = loadNode(tx, getHeadPageId()); setTailPageId(getHeadPageId()); size addAndGet(node size(tx)); while (node getNext() != NOT SET ) { node = loadNode(tx, node getNext()); size addAndGet(node size(tx)); setTailPageId(node getPageId()); } } } } synchronized public void unload(Transaction tx) { if (loaded compareAndSet(true, false)) { } } protected ListNode<Key,Value> getHead(Transaction tx) throws IOException { return loadNode(tx, getHeadPageId()); } protected ListNode<Key,Value> getTail(Transaction tx) throws IOException { return loadNode(tx, getTailPageId()); } synchronized public boolean containsKey(Transaction tx, Key key) throws IOException { assertLoaded(); if (size get() == 0) { return false; } for (Iterator<Map Entry<Key,Value>> iterator = iterator(tx); iterator hasNext(); ) { Map Entry<Key,Value> candidate = iterator next(); if (key equals(candidate getKey())) { return true; } } return false; } private ListNode<Key, Value> lastGetNodeCache = null; private Map Entry<Key, Value> lastGetEntryCache = null; private WeakReference<Transaction> lastCacheTxSrc = new WeakReference<Transaction>(null); SuppressWarnings({ rawtypes , unchecked }) synchronized public Value get(Transaction tx, Key key) throws IOException { assertLoaded(); for (Iterator<Map Entry<Key,Value>> iterator = iterator(tx); iterator hasNext(); ) { Map Entry<Key,Value> candidate = iterator next(); if (key equals(candidate getKey())) { this lastGetNodeCache = ((ListIterator) iterator) getCurrent(); this lastGetEntryCache = candidate; this lastCacheTxSrc = new WeakReference<Transaction>(tx); return candidate getValue(); } } return null; } SuppressWarnings({ rawtypes }) synchronized public Value put(Transaction tx, Key key, Value value) throws IOException { Value oldValue = null; if (lastGetNodeCache != null && tx equals(lastCacheTxSrc get())) { if(lastGetEntryCache getKey() equals(key)) { oldValue = lastGetEntryCache setValue(value); lastGetEntryCache setValue(value); lastGetNodeCache storeUpdate(tx); flushCache(); return oldValue; } Iterator<Map Entry<Key, Value>> iterator = lastGetNodeCache iterator(tx); while (iterator hasNext()) { Map Entry<Key, Value> entry = iterator next(); if (entry getKey() equals(key)) { oldValue = entry setValue(value); ((ListIterator) iterator) getCurrent() storeUpdate(tx); flushCache(); return oldValue; } } } else { flushCache(); } Iterator<Map Entry<Key, Value>> iterator = iterator(tx); while (iterator hasNext() && ((ListIterator) iterator) getCurrent() != lastGetNodeCache) { Map Entry<Key, Value> entry = iterator next(); if (entry getKey() equals(key)) { oldValue = entry setValue(value); ((ListIterator) iterator) getCurrent() storeUpdate(tx); flushCache(); return oldValue; } } flushCache(); return add(tx, key, value); } synchronized public Value add(Transaction tx, Key key, Value value) throws IOException { assertLoaded(); getTail(tx) put(tx, key, value); size incrementAndGet(); flushCache(); return null; } synchronized public Value addFirst(Transaction tx, Key key, Value value) throws IOException { assertLoaded(); getHead(tx) addFirst(tx, key, value); size incrementAndGet(); flushCache(); return null; } SuppressWarnings( rawtypes ) synchronized public Value remove(Transaction tx, Key key) throws IOException { assertLoaded(); if (size get() == 0) { return null; } if (lastGetNodeCache != null && tx equals(lastCacheTxSrc get())) { Iterator<Map Entry<Key, Value>> iterator = lastGetNodeCache iterator(tx); while (iterator hasNext()) { Map Entry<Key, Value> entry = iterator next(); if (entry getKey() equals(key)) { iterator remove(); flushCache(); return entry getValue(); } } } else { flushCache(); } Iterator<Map Entry<Key, Value>> iterator = iterator(tx); while (iterator hasNext() && ((ListIterator) iterator) getCurrent() != lastGetNodeCache) { Map Entry<Key, Value> entry = iterator next(); if (entry getKey() equals(key)) { iterator remove(); flushCache(); return entry getValue(); } } return null; } public void onRemove() { size decrementAndGet(); flushCache(); } public boolean isTransient() { return false; } synchronized public void clear(Transaction tx) throws IOException { for (Iterator<ListNode<Key,Value>> iterator = listNodeIterator(tx); iterator hasNext(); ) { ListNode<Key,Value>candidate = iterator next(); candidate clear(tx); tx commit(); } flushCache(); size set(0); } synchronized public Iterator<ListNode<Key, Value>> listNodeIterator(Transaction tx) throws IOException { return getHead(tx) listNodeIterator(tx); } synchronized public boolean isEmpty(final Transaction tx) throws IOException { return getHead(tx) isEmpty(tx); } synchronized public Iterator<Map Entry<Key,Value>> iterator(final Transaction tx) throws IOException { return getHead(tx) iterator(tx); } synchronized public Iterator<Map Entry<Key,Value>> iterator(final Transaction tx, long initialPosition) throws IOException { return getHead(tx) iterator(tx, initialPosition); } synchronized public Map Entry<Key,Value> getFirst(Transaction tx) throws IOException { return getHead(tx) getFirst(tx); } synchronized public Map Entry<Key,Value> getLast(Transaction tx) throws IOException { return getTail(tx) getLast(tx); } private void assertLoaded() throws IllegalStateException { if( !loaded get() ) { throw new IllegalStateException( TheListIndex is not loaded ); } } ListNode<Key,Value> loadNode(Transaction tx, long pageId) throws IOException { Page<ListNode<Key,Value>> page = tx load(pageId, marshaller); ListNode<Key, Value> node = page get(); node setPage(page); node setContainingList(this); return node; } ListNode<Key,Value> createNode(Page<ListNode<Key,Value>> page) throws IOException { ListNode<Key,Value> node = new ListNode<Key,Value>(); node setPage(page); page set(node); node setContainingList(this); return node; } public ListNode<Key,Value> createNode(Transaction tx) throws IOException { return createNode(tx <ListNode<Key,Value>>load(tx <ListNode<Key,Value>>allocate() getPageId(), null)); } public void storeNode(Transaction tx, ListNode<Key,Value> node, boolean overflow) throws IOException { tx store(node getPage(), marshaller, overflow); flushCache(); } public PageFile getPageFile() { return pageFile; } public void setPageFile(PageFile pageFile) { this pageFile = pageFile; } public long getHeadPageId() { return headPageId; } public void setHeadPageId(long headPageId) { this headPageId = headPageId; } public Marshaller<Key> getKeyMarshaller() { return keyMarshaller; } public void setKeyMarshaller(Marshaller<Key> keyMarshaller) { this keyMarshaller = keyMarshaller; } public Marshaller<Value> getValueMarshaller() { return valueMarshaller; } public void setValueMarshaller(Marshaller<Value> valueMarshaller) { this valueMarshaller = valueMarshaller; } public void setTailPageId(long tailPageId) { this tailPageId = tailPageId; } public long getTailPageId() { return tailPageId; } public long size() { return size get(); } private void flushCache() { this lastGetEntryCache = null; this lastGetNodeCache = null; this lastCacheTxSrc clear(); } }",1.0,
1332,1332,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\ListNode.,ListNode,"public final class ListNode<Key, Value> { private final static boolean ADD FIRST = true; private final static boolean ADD LAST = false; private ListIndex<Key, Value> containingList; private Page<ListNode<Key, Value>> page; private LinkedNodeList<KeyValueEntry<Key, Value>> entries = new LinkedNodeList<KeyValueEntry<Key, Value>>() { Override public String toString() { return PageId + page getPageId() + , index + containingList + super toString(); } }; private long next = ListIndex NOT SET; static final class KeyValueEntry<Key, Value> extends LinkedNode<KeyValueEntry<Key, Value>> implements Entry<Key, Value> { private final Key key; private Value value; public KeyValueEntry(Key key, Value value) { this key = key; this value = value; } public Key getKey() { return key; } public Value getValue() { return value; } public Value setValue(Value value) { Value oldValue = this value; this value = value; return oldValue; } Override public String toString() { return { + key + + value + } ; } } private final class ListNodeIterator implements Iterator<ListNode<Key, Value>> { private final Transaction tx; private final ListIndex<Key, Value> index; ListNode<Key, Value> nextEntry; private ListNodeIterator(Transaction tx, ListNode<Key, Value> current) { this tx = tx; nextEntry = current; index = current getContainingList(); } public boolean hasNext() { return nextEntry != null; } public ListNode<Key, Value> next() { ListNode<Key, Value> current = nextEntry; if (current != null) { if (current next != ListIndex NOT SET) { try { nextEntry = index loadNode(tx, current next); } catch (IOException unexpected) { IllegalStateException e = new IllegalStateException( failed to load next + current next + , reason + unexpected getLocalizedMessage()); e initCause(unexpected); throw e; } } else { nextEntry = null; } } return current; } public void remove() { throw new UnsupportedOperationException(); } } final class ListIterator implements Iterator<Entry<Key, Value>> { private final Transaction tx; private final ListIndex<Key, Value> targetList; ListNode<Key, Value> currentNode, previousNode; KeyValueEntry<Key, Value> nextEntry; KeyValueEntry<Key, Value> entryToRemove; private ListIterator(Transaction tx, ListNode<Key, Value> current, long start) { this tx = tx; this currentNode = current; this targetList = current getContainingList(); nextEntry = current entries getHead(); if (start > 0) { moveToRequestedStart(start); } } private void moveToRequestedStart(final long start) { long count = 0; while (hasNext() && count < start) { next(); count++; } if (!hasNext()) { throw new NoSuchElementException( Index + start + out of current range + count); } } private KeyValueEntry<Key, Value> getFromNextNode() { KeyValueEntry<Key, Value> result = null; if (currentNode getNext() != ListIndex NOT SET) { try { previousNode = currentNode; currentNode = targetList loadNode(tx, currentNode getNext()); } catch (IOException unexpected) { NoSuchElementException e = new NoSuchElementException(unexpected getLocalizedMessage()); e initCause(unexpected); throw e; } result = currentNode entries getHead(); } return result; } public boolean hasNext() { if (nextEntry == null) { nextEntry = getFromNextNode(); } return nextEntry != null; } public Entry<Key, Value> next() { if (nextEntry != null) { entryToRemove = nextEntry; nextEntry = entryToRemove getNext(); return entryToRemove; } else { throw new NoSuchElementException(); } } public void remove() { if (entryToRemove == null) { throw new IllegalStateException( can only remove once, call hasNext();next() again ); } try { entryToRemove unlink(); entryToRemove = null; ListNode<Key, Value> toRemoveNode = null; if (currentNode entries isEmpty()) { if (currentNode isHead() && currentNode isTail()) { } else if (currentNode isHead()) { ListNode<Key, Value> headNode = currentNode; nextEntry = getFromNextNode(); if (currentNode isTail()) { targetList setTailPageId(headNode getPageId()); } headNode setEntries(currentNode entries); headNode setNext(currentNode getNext()); headNode store(tx); toRemoveNode = currentNode; currentNode = headNode; } else if (currentNode isTail()) { toRemoveNode = currentNode; previousNode setNext(ListIndex NOT SET); previousNode store(tx); targetList setTailPageId(previousNode getPageId()); } else { toRemoveNode = currentNode; previousNode setNext(toRemoveNode getNext()); previousNode store(tx); currentNode = previousNode; } } targetList onRemove(); if (toRemoveNode != null) { tx free(toRemoveNode getPage()); } else { currentNode store(tx); } } catch (IOException unexpected) { IllegalStateException e = new IllegalStateException(unexpected getLocalizedMessage()); e initCause(unexpected); throw e; } } ListNode<Key, Value> getCurrent() { return this currentNode; } } static public final class NodeMarshaller<Key, Value> extends VariableMarshaller<ListNode<Key, Value>> { private final Marshaller<Key> keyMarshaller; private final Marshaller<Value> valueMarshaller; public NodeMarshaller(Marshaller<Key> keyMarshaller, Marshaller<Value> valueMarshaller) { this keyMarshaller = keyMarshaller; this valueMarshaller = valueMarshaller; } public void writePayload(ListNode<Key, Value> node, DataOutput os) throws IOException { os writeLong(node next); short count = (short) node entries size(); if (count != node entries size()) { throw new IOException( short over flow, too many entries in list + node entries size()); } os writeShort(count); KeyValueEntry<Key, Value> entry = node entries getHead(); while (entry != null) { keyMarshaller writePayload((Key) entry getKey(), os); valueMarshaller writePayload((Value) entry getValue(), os); entry = entry getNext(); } } SuppressWarnings({ unchecked , rawtypes }) public ListNode<Key, Value> readPayload(DataInput is) throws IOException { ListNode<Key, Value> node = new ListNode<Key, Value>(); node setNext(is readLong()); final short size = is readShort(); for (short i = 0; i < size; i++) { node entries addLast(new KeyValueEntry(keyMarshaller readPayload(is), valueMarshaller readPayload(is))); } return node; } } public Value put(Transaction tx, Key key, Value value) throws IOException { if (key == null) { throw new IllegalArgumentException( Key cannot be null ); } entries addLast(new KeyValueEntry<Key, Value>(key, value)); store(tx, ADD LAST); return null; } public Value addFirst(Transaction tx, Key key, Value value) throws IOException { if (key == null) { throw new IllegalArgumentException( Key cannot be null ); } entries addFirst(new KeyValueEntry<Key, Value>(key, value)); store(tx, ADD FIRST); return null; } public void storeUpdate(Transaction tx) throws IOException { store(tx, ADD LAST); } private void store(Transaction tx, boolean addFirst) throws IOException { try { getContainingList() storeNode(tx, this, entries size() == 1); if (this next == -1) { getContainingList() setTailPageId(getPageId()); } } catch (Transaction PageOverflowIOException e) { split(tx, addFirst); } } private void store(Transaction tx) throws IOException { getContainingList() storeNode(tx, this, true); } private void split(Transaction tx, boolean isAddFirst) throws IOException { ListNode<Key, Value> extension = getContainingList() createNode(tx); if (isAddFirst) { extension setEntries(entries getHead() splitAfter()); extension setNext(this getNext()); extension store(tx, isAddFirst); this setNext(extension getPageId()); } else { extension setEntries(entries getTail() getPrevious() splitAfter()); extension setNext(this getNext()); extension store(tx, isAddFirst); getContainingList() setTailPageId(extension getPageId()); this setNext(extension getPageId()); } store(tx, true); } private void setEntries(LinkedNodeList<KeyValueEntry<Key, Value>> list) { this entries = list; } public Value get(Transaction tx, Key key) { if (key == null) { throw new IllegalArgumentException( Key cannot be null ); } Value result = null; KeyValueEntry<Key, Value> nextEntry = entries getTail(); while (nextEntry != null) { if (nextEntry getKey() equals(key)) { result = nextEntry getValue(); break; } nextEntry = nextEntry getPrevious(); } return result; } public boolean isEmpty(final Transaction tx) { return entries isEmpty(); } public Entry<Key, Value> getFirst(Transaction tx) { return entries getHead(); } public Entry<Key, Value> getLast(Transaction tx) { return entries getTail(); } public Iterator<Entry<Key, Value>> iterator(final Transaction tx, long pos) throws IOException { return new ListIterator(tx, this, pos); } public Iterator<Entry<Key, Value>> iterator(final Transaction tx) throws IOException { return new ListIterator(tx, this, 0); } Iterator<ListNode<Key, Value>> listNodeIterator(final Transaction tx) throws IOException { return new ListNodeIterator(tx, this); } public void clear(Transaction tx) throws IOException { entries clear(); tx free(this getPageId()); } public boolean contains(Transaction tx, Key key) { if (key == null) { throw new IllegalArgumentException( Key cannot be null ); } boolean found = false; KeyValueEntry<Key, Value> nextEntry = entries getTail(); while (nextEntry != null) { if (nextEntry getKey() equals(key)) { found = true; break; } nextEntry = nextEntry getPrevious(); } return found; } public long getPageId() { return page getPageId(); } public Page<ListNode<Key, Value>> getPage() { return page; } public void setPage(Page<ListNode<Key, Value>> page) { this page = page; } public long getNext() { return next; } public void setNext(long next) { this next = next; } public void setContainingList(ListIndex<Key, Value> list) { this containingList = list; } public ListIndex<Key, Value> getContainingList() { return containingList; } public boolean isHead() { return getPageId() == containingList getHeadPageId(); } public boolean isTail() { return getPageId() == containingList getTailPageId(); } public int size(Transaction tx) { return entries size(); } Override public String toString() { return [ListNode( + (page != null page getPageId() + -> + next null ) + )[ + entries size() + ]] ; } }",1.0,
1333,1333,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\ListNode.,KeyValueEntry,"static final class KeyValueEntry<Key, Value> extends LinkedNode<KeyValueEntry<Key, Value>> implements Entry<Key, Value> { private final Key key; private Value value; public KeyValueEntry(Key key, Value value) { this key = key; this value = value; } public Key getKey() { return key; } public Value getValue() { return value; } public Value setValue(Value value) { Value oldValue = this value; this value = value; return oldValue; } Override public String toString() { return { + key + + value + } ; } }",1.0,
1334,1334,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\ListNode.,ListNodeIterator,"private final class ListNodeIterator implements Iterator<ListNode<Key, Value>> { private final Transaction tx; private final ListIndex<Key, Value> index; ListNode<Key, Value> nextEntry; private ListNodeIterator(Transaction tx, ListNode<Key, Value> current) { this tx = tx; nextEntry = current; index = current getContainingList(); } public boolean hasNext() { return nextEntry != null; } public ListNode<Key, Value> next() { ListNode<Key, Value> current = nextEntry; if (current != null) { if (current next != ListIndex NOT SET) { try { nextEntry = index loadNode(tx, current next); } catch (IOException unexpected) { IllegalStateException e = new IllegalStateException( failed to load next + current next + , reason + unexpected getLocalizedMessage()); e initCause(unexpected); throw e; } } else { nextEntry = null; } } return current; } public void remove() { throw new UnsupportedOperationException(); } }",1.0,
1335,1335,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\ListNode.,ListIterator,"final class ListIterator implements Iterator<Entry<Key, Value>> { private final Transaction tx; private final ListIndex<Key, Value> targetList; ListNode<Key, Value> currentNode, previousNode; KeyValueEntry<Key, Value> nextEntry; KeyValueEntry<Key, Value> entryToRemove; private ListIterator(Transaction tx, ListNode<Key, Value> current, long start) { this tx = tx; this currentNode = current; this targetList = current getContainingList(); nextEntry = current entries getHead(); if (start > 0) { moveToRequestedStart(start); } } private void moveToRequestedStart(final long start) { long count = 0; while (hasNext() && count < start) { next(); count++; } if (!hasNext()) { throw new NoSuchElementException( Index + start + out of current range + count); } } private KeyValueEntry<Key, Value> getFromNextNode() { KeyValueEntry<Key, Value> result = null; if (currentNode getNext() != ListIndex NOT SET) { try { previousNode = currentNode; currentNode = targetList loadNode(tx, currentNode getNext()); } catch (IOException unexpected) { NoSuchElementException e = new NoSuchElementException(unexpected getLocalizedMessage()); e initCause(unexpected); throw e; } result = currentNode entries getHead(); } return result; } public boolean hasNext() { if (nextEntry == null) { nextEntry = getFromNextNode(); } return nextEntry != null; } public Entry<Key, Value> next() { if (nextEntry != null) { entryToRemove = nextEntry; nextEntry = entryToRemove getNext(); return entryToRemove; } else { throw new NoSuchElementException(); } } public void remove() { if (entryToRemove == null) { throw new IllegalStateException( can only remove once, call hasNext();next() again ); } try { entryToRemove unlink(); entryToRemove = null; ListNode<Key, Value> toRemoveNode = null; if (currentNode entries isEmpty()) { if (currentNode isHead() && currentNode isTail()) { } else if (currentNode isHead()) { ListNode<Key, Value> headNode = currentNode; nextEntry = getFromNextNode(); if (currentNode isTail()) { targetList setTailPageId(headNode getPageId()); } headNode setEntries(currentNode entries); headNode setNext(currentNode getNext()); headNode store(tx); toRemoveNode = currentNode; currentNode = headNode; } else if (currentNode isTail()) { toRemoveNode = currentNode; previousNode setNext(ListIndex NOT SET); previousNode store(tx); targetList setTailPageId(previousNode getPageId()); } else { toRemoveNode = currentNode; previousNode setNext(toRemoveNode getNext()); previousNode store(tx); currentNode = previousNode; } } targetList onRemove(); if (toRemoveNode != null) { tx free(toRemoveNode getPage()); } else { currentNode store(tx); } } catch (IOException unexpected) { IllegalStateException e = new IllegalStateException(unexpected getLocalizedMessage()); e initCause(unexpected); throw e; } } ListNode<Key, Value> getCurrent() { return this currentNode; } }",1.0,
1336,1336,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\ListNode.,NodeMarshaller,"static public final class NodeMarshaller<Key, Value> extends VariableMarshaller<ListNode<Key, Value>> { private final Marshaller<Key> keyMarshaller; private final Marshaller<Value> valueMarshaller; public NodeMarshaller(Marshaller<Key> keyMarshaller, Marshaller<Value> valueMarshaller) { this keyMarshaller = keyMarshaller; this valueMarshaller = valueMarshaller; } public void writePayload(ListNode<Key, Value> node, DataOutput os) throws IOException { os writeLong(node next); short count = (short) node entries size(); if (count != node entries size()) { throw new IOException( short over flow, too many entries in list + node entries size()); } os writeShort(count); KeyValueEntry<Key, Value> entry = node entries getHead(); while (entry != null) { keyMarshaller writePayload((Key) entry getKey(), os); valueMarshaller writePayload((Value) entry getValue(), os); entry = entry getNext(); } } SuppressWarnings({ unchecked , rawtypes }) public ListNode<Key, Value> readPayload(DataInput is) throws IOException { ListNode<Key, Value> node = new ListNode<Key, Value>(); node setNext(is readLong()); final short size = is readShort(); for (short i = 0; i < size; i++) { node entries addLast(new KeyValueEntry(keyMarshaller readPayload(is), valueMarshaller readPayload(is))); } return node; } }",1.0,
1337,1337,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\CallerBufferingDataFileAppender.,CallerBufferingDataFileAppender,"class CallerBufferingDataFileAppender extends DataFileAppender { final DataByteArrayOutputStream cachedBuffers[] = new DataByteArrayOutputStream[] { new DataByteArrayOutputStream(maxWriteBatchSize), new DataByteArrayOutputStream(maxWriteBatchSize) }; volatile byte flip = 0x1; public class WriteBatch extends DataFileAppender WriteBatch { DataByteArrayOutputStream buff = cachedBuffers[flip ^= 1]; private boolean forceToDisk; public WriteBatch(DataFile dataFile, int offset, Journal WriteCommand write) throws IOException { super(dataFile, offset); initBuffer(buff); append(write); } public void append(Journal WriteCommand write) throws IOException { super append(write); forceToDisk |= appendToBuffer(write, buff); } } Override protected DataFileAppender WriteBatch newWriteBatch(Journal WriteCommand write, DataFile file) throws IOException { return new WriteBatch(file, file getLength(), write); } private void initBuffer(DataByteArrayOutputStream buff) throws IOException { buff reset(); buff write(Journal BATCH CONTROL RECORD HEADER); buff writeInt(0); buff writeLong(0); } public CallerBufferingDataFileAppender(Journal dataManager) { super(dataManager); } Override protected void processQueue() { DataFile dataFile = null; RandomAccessFile file = null; WriteBatch wb = null; try { while (true) { Object o = null; synchronized (enqueueMutex) { while (true) { if (nextWriteBatch != null) { o = nextWriteBatch; nextWriteBatch = null; break; } if (shutdown) { return; } enqueueMutex wait(); } enqueueMutex notifyAll(); } wb = (WriteBatch)o; if (dataFile != wb dataFile) { if (file != null) { file setLength(dataFile getLength()); dataFile closeRandomAccessFile(file); } dataFile = wb dataFile; file = dataFile openRandomAccessFile(); if( file length() < journal preferedFileLength ) { file setLength(journal preferedFileLength); } } final DataByteArrayOutputStream buff = wb buff; final boolean forceToDisk = wb forceToDisk; ByteSequence sequence = buff toByteSequence(); buff reset(); buff skip(5+Journal BATCH CONTROL RECORD MAGIC length); buff writeInt(sequence getLength()-Journal BATCH CONTROL RECORD SIZE); if( journal isChecksum() ) { Checksum checksum = new Adler32(); checksum update(sequence getData(), sequence getOffset()+Journal BATCH CONTROL RECORD SIZE, sequence getLength()-Journal BATCH CONTROL RECORD SIZE); buff writeLong(checksum getValue()); } file seek(wb offset); if (maxStat > 0) { if (statIdx < maxStat) { stats[statIdx++] = sequence getLength(); } else { long all = 0; for (;statIdx > 0;) { all+= stats[--statIdx]; } System err println( Ave writeSize + all/maxStat); } } file write(sequence getData(), sequence getOffset(), sequence getLength()); ReplicationTarget replicationTarget = journal getReplicationTarget(); if( replicationTarget!=null ) { replicationTarget replicate(wb writes getHead() location, sequence, forceToDisk); } if (forceToDisk) { file getFD() sync(); } Journal WriteCommand lastWrite = wb writes getTail(); journal setLastAppendLocation(lastWrite location); signalDone(wb); } } catch (IOException e) { synchronized (enqueueMutex) { firstAsyncException = e; if (wb != null) { wb exception set(e); wb latch countDown(); } if (nextWriteBatch != null) { nextWriteBatch exception set(e); nextWriteBatch latch countDown(); } } } catch (InterruptedException e) { } finally { try { if (file != null) { dataFile closeRandomAccessFile(file); } } catch (Throwable ignore) { } shutdownDone countDown(); running = false; } } private boolean appendToBuffer(Journal WriteCommand write, DataByteArrayOutputStream buff) throws IOException { buff writeInt(write location getSize()); buff writeByte(write location getType()); buff write(write data getData(), write data getOffset(), write data getLength()); return write sync | (syncOnComplete && write onComplete != null); } }",1.0,
1338,1338,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\CallerBufferingDataFileAppender.,WriteBatch,"public class WriteBatch extends DataFileAppender WriteBatch { DataByteArrayOutputStream buff = cachedBuffers[flip ^= 1]; private boolean forceToDisk; public WriteBatch(DataFile dataFile, int offset, Journal WriteCommand write) throws IOException { super(dataFile, offset); initBuffer(buff); append(write); } public void append(Journal WriteCommand write) throws IOException { super append(write); forceToDisk |= appendToBuffer(write, buff); } } Override",1.0,
1339,1339,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\DataFile.,DataFile,"public class DataFile extends LinkedNode<DataFile> implements Comparable<DataFile> { protected final File file; protected final Integer dataFileId; protected volatile int length; protected final SequenceSet corruptedBlocks = new SequenceSet(); DataFile(File file, int number, int preferedSize) { this file = file; this dataFileId = Integer valueOf(number); length = (int)(file exists() file length() 0); } public File getFile() { return file; } public Integer getDataFileId() { return dataFileId; } public synchronized int getLength() { return length; } public void setLength(int length) { this length = length; } public synchronized void incrementLength(int size) { length += size; } Override public synchronized String toString() { return file getName() + number = + dataFileId + , length = + length; } public synchronized RandomAccessFile openRandomAccessFile() throws IOException { return new RandomAccessFile(file getCanonicalPath(), rw ); } public synchronized void closeRandomAccessFile(RandomAccessFile file) throws IOException { file close(); } public synchronized boolean delete() throws IOException { return file delete(); } public synchronized void move(File targetDirectory) throws IOException{ IOHelper moveFile(file,targetDirectory); } public SequenceSet getCorruptedBlocks() { return corruptedBlocks; } Override public int compareTo(DataFile df) { return dataFileId - df dataFileId; } Override public boolean equals(Object o) { boolean result = false; if (o instanceof DataFile) { result = compareTo((DataFile)o) == 0; } return result; } Override public int hashCode() { return dataFileId; } }",1.0,
1340,1340,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\DataFileAccessor.,DataFileAccessor,"final class DataFileAccessor { private final DataFile dataFile; private final Map<Journal WriteKey, Journal WriteCommand> inflightWrites; private final RandomAccessFile file; private boolean disposed; public DataFileAccessor(Journal dataManager, DataFile dataFile) throws IOException { this dataFile = dataFile; this inflightWrites = dataManager getInflightWrites(); this file = dataFile openRandomAccessFile(); } public DataFile getDataFile() { return dataFile; } public void dispose() { if (disposed) { return; } disposed = true; try { dataFile closeRandomAccessFile(file); } catch (IOException e) { e printStackTrace(); } } public ByteSequence readRecord(Location location) throws IOException { if (!location isValid()) { throw new IOException( Invalid location + location); } Journal WriteCommand asyncWrite = (Journal WriteCommand)inflightWrites get(new Journal WriteKey(location)); if (asyncWrite != null) { return asyncWrite data; } try { if (location getSize() == Location NOT SET) { file seek(location getOffset()); location setSize(file readInt()); location setType(file readByte()); } else { file seek(location getOffset() + Journal RECORD HEAD SPACE); } byte[] data = new byte[location getSize() - Journal RECORD HEAD SPACE]; file readFully(data); return new ByteSequence(data, 0, data length); } catch (RuntimeException e) { throw new IOException( Invalid location + location + , + e); } } public void readFully(long offset, byte data[]) throws IOException { file seek(offset); file readFully(data); } public int read(long offset, byte data[]) throws IOException { file seek(offset); return file read(data); } public void readLocationDetails(Location location) throws IOException { Journal WriteCommand asyncWrite = (Journal WriteCommand)inflightWrites get(new Journal WriteKey(location)); if (asyncWrite != null) { location setSize(asyncWrite location getSize()); location setType(asyncWrite location getType()); } else { file seek(location getOffset()); location setSize(file readInt()); location setType(file readByte()); } } public void updateRecord(Location location, ByteSequence data, boolean sync) throws IOException { file seek(location getOffset() + Journal RECORD HEAD SPACE); int size = Math min(data getLength(), location getSize()); file write(data getData(), data getOffset(), size); if (sync) { file getFD() sync(); } } }",1.0,
1341,1341,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\DataFileAccessorPool.,DataFileAccessorPool,"public class DataFileAccessorPool { private final Journal journal; private final Map<Integer, Pool> pools = new HashMap<Integer, Pool>(); private boolean closed; private int maxOpenReadersPerFile = 5; class Pool { private final DataFile file; private final List<DataFileAccessor> pool = new ArrayList<DataFileAccessor>(); private boolean used; private int openCounter; private boolean disposed; public Pool(DataFile file) { this file = file; } public DataFileAccessor openDataFileReader() throws IOException { DataFileAccessor rc = null; if (pool isEmpty()) { rc = new DataFileAccessor(journal, file); } else { rc = pool remove(pool size() - 1); } used = true; openCounter++; return rc; } public synchronized void closeDataFileReader(DataFileAccessor reader) { openCounter--; if (pool size() >= maxOpenReadersPerFile || disposed) { reader dispose(); } else { pool add(reader); } } public synchronized void clearUsedMark() { used = false; } public synchronized boolean isUsed() { return used; } public synchronized void dispose() { for (DataFileAccessor reader pool) { reader dispose(); } pool clear(); disposed = true; } public synchronized int getOpenCounter() { return openCounter; } } public DataFileAccessorPool(Journal dataManager) { this journal = dataManager; } synchronized void clearUsedMark() { for (Pool pool pools values()) { pool clearUsedMark(); } } synchronized void disposeUnused() { for (Iterator<Pool> iter = pools values() iterator(); iter hasNext();) { Pool pool = iter next(); if (!pool isUsed()) { pool dispose(); iter remove(); } } } synchronized void disposeDataFileAccessors(DataFile dataFile) { if (closed) { throw new IllegalStateException( Closed ); } Pool pool = pools get(dataFile getDataFileId()); if (pool != null) { if (pool getOpenCounter() == 0) { pool dispose(); pools remove(dataFile getDataFileId()); } else { throw new IllegalStateException( The data file is still in use + dataFile + , use count + pool getOpenCounter()); } } } synchronized DataFileAccessor openDataFileAccessor(DataFile dataFile) throws IOException { if (closed) { throw new IOException( Closed ); } Pool pool = pools get(dataFile getDataFileId()); if (pool == null) { pool = new Pool(dataFile); pools put(dataFile getDataFileId(), pool); } return pool openDataFileReader(); } synchronized void closeDataFileAccessor(DataFileAccessor reader) { Pool pool = pools get(reader getDataFile() getDataFileId()); if (pool == null || closed) { reader dispose(); } else { pool closeDataFileReader(reader); } } public synchronized void close() { if (closed) { return; } closed = true; for (Pool pool pools values()) { pool dispose(); } pools clear(); } }",1.0,
1342,1342,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\DataFileAccessorPool.,Pool,"class Pool { private final DataFile file; private final List<DataFileAccessor> pool = new ArrayList<DataFileAccessor>(); private boolean used; private int openCounter; private boolean disposed; public Pool(DataFile file) { this file = file; } public DataFileAccessor openDataFileReader() throws IOException { DataFileAccessor rc = null; if (pool isEmpty()) { rc = new DataFileAccessor(journal, file); } else { rc = pool remove(pool size() - 1); } used = true; openCounter++; return rc; } public synchronized void closeDataFileReader(DataFileAccessor reader) { openCounter--; if (pool size() >= maxOpenReadersPerFile || disposed) { reader dispose(); } else { pool add(reader); } } public synchronized void clearUsedMark() { used = false; } public synchronized boolean isUsed() { return used; } public synchronized void dispose() { for (DataFileAccessor reader pool) { reader dispose(); } pool clear(); disposed = true; } public synchronized int getOpenCounter() { return openCounter; } }",1.0,
1344,1344,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\DataFileAppender.,WriteKey,public static class WriteKey { private final int file; private final long offset; private final int hash; public WriteKey(Location item) { file = item getDataFileId(); offset = item getOffset(); hash = (int)(file ^ offset); } public int hashCode() { return hash; } public boolean equals(Object obj) { if (obj instanceof WriteKey) { WriteKey di = (WriteKey)obj; return di file == file && di offset == offset; } return false; } },1.0,
1345,1345,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\DataFileAppender.,WriteBatch,"public class WriteBatch { public final DataFile dataFile; public final LinkedNodeList<Journal WriteCommand> writes = new LinkedNodeList<Journal WriteCommand>(); public final CountDownLatch latch = new CountDownLatch(1); protected final int offset; public int size = Journal BATCH CONTROL RECORD SIZE; public AtomicReference<IOException> exception = new AtomicReference<IOException>(); public WriteBatch(DataFile dataFile,int offset) { this dataFile = dataFile; this offset = offset; this dataFile incrementLength(Journal BATCH CONTROL RECORD SIZE); this size=Journal BATCH CONTROL RECORD SIZE; journal addToTotalLength(Journal BATCH CONTROL RECORD SIZE); } public WriteBatch(DataFile dataFile, int offset, Journal WriteCommand write) throws IOException { this(dataFile, offset); append(write); } public boolean canAppend(Journal WriteCommand write) { int newSize = size + write location getSize(); if (newSize >= maxWriteBatchSize || offset+newSize > journal getMaxFileLength() ) { return false; } return true; } public void append(Journal WriteCommand write) throws IOException { this writes addLast(write); write location setDataFileId(dataFile getDataFileId()); write location setOffset(offset+size); int s = write location getSize(); size += s; dataFile incrementLength(s); journal addToTotalLength(s); } }",1.0,
1347,1347,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\Journal.,WriteCommand,"public static class WriteCommand extends LinkedNode<WriteCommand> { public final Location location; public final ByteSequence data; final boolean sync; public final Runnable onComplete; public WriteCommand(Location location, ByteSequence data, boolean sync) { this location = location; this data = data; this sync = sync; this onComplete = null; } public WriteCommand(Location location, ByteSequence data, Runnable onComplete) { this location = location; this data = data; this onComplete = onComplete; this sync = false; } }",1.0,
1348,1348,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\Journal.,WriteKey,public static class WriteKey { private final int file; private final long offset; private final int hash; public WriteKey(Location item) { file = item getDataFileId(); offset = item getOffset(); hash = (int)(file ^ offset); } public int hashCode() { return hash; } public boolean equals(Object obj) { if (obj instanceof WriteKey) { WriteKey di = (WriteKey)obj; return di file == file && di offset == offset; } return false; } },1.0,
1350,1350,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\ReadOnlyDataFile.,ReadOnlyDataFile,"public class ReadOnlyDataFile extends DataFile { ReadOnlyDataFile(File file, int number, int preferedSize) { super(file, number, preferedSize); } public RandomAccessFile openRandomAccessFile(boolean appender) throws IOException { return new RandomAccessFile(file, r ); } public void closeRandomAccessFile(RandomAccessFile file) throws IOException { file close(); } public synchronized boolean delete() throws IOException { throw new RuntimeException( Not valid on a read only file ); } public synchronized void move(File targetDirectory) throws IOException{ throw new RuntimeException( Not valid on a read only file ); } }",1.0,
1351,1351,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\ReadOnlyJournal.,ReadOnlyJournal,"public class ReadOnlyJournal extends Journal { private final ArrayList<File> dirs; public ReadOnlyJournal(final ArrayList<File> dirs) { this dirs = dirs; } public synchronized void start() throws IOException { if (started) { return; } started = true; ArrayList<File> files = new ArrayList<File>(); for (File directory dirs) { final File d = directory; File[] f = d listFiles(new FilenameFilter() { public boolean accept(File dir, String n) { return dir equals(d) && n startsWith(filePrefix); } }); for (int i = 0; i < f length; i++) { files add(f[i]); } } for (File file files) { try { String n = file getName(); String numStr = n substring(filePrefix length(), n length()); int num = Integer parseInt(numStr); DataFile dataFile = new ReadOnlyDataFile(file, num, preferedFileLength); fileMap put(dataFile getDataFileId(), dataFile); totalLength addAndGet(dataFile getLength()); } catch (NumberFormatException e) { } } List<DataFile> list = new ArrayList<DataFile>(fileMap values()); Collections sort(list); for (DataFile df list) { dataFiles addLast(df); fileByFileMap put(df getFile(), df); } } public synchronized void close() throws IOException { if (!started) { return; } accessorPool close(); fileMap clear(); fileByFileMap clear(); started = false; } public Location getFirstLocation() throws IllegalStateException, IOException { if( dataFiles isEmpty() ) { return null; } DataFile first = dataFiles getHead(); Location cur = new Location(); cur setDataFileId(first getDataFileId()); cur setOffset(0); cur setSize(0); return getNextLocation(cur); } Override public synchronized boolean delete() throws IOException { throw new RuntimeException( Cannot delete a ReadOnlyAsyncDataManager ); } }",1.0,
1353,1353,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\page\PageFile.,PageFile,"public class PageFile { private static final String PAGEFILE SUFFIX = data ; private static final String RECOVERY FILE SUFFIX = redo ; private static final String FREE FILE SUFFIX = free ; public static final int DEFAULT PAGE SIZE = Integer getInteger( defaultPageSize , 1024*4); public static final int DEFAULT WRITE BATCH SIZE = Integer getInteger( defaultWriteBatchSize , 1000); public static final int DEFAULT PAGE CACHE SIZE = Integer getInteger( defaultPageCacheSize , 100);; private static final int RECOVERY FILE HEADER SIZE = 1024 * 4; private static final int PAGE FILE HEADER SIZE = 1024 * 4; private static final Logger LOG = LoggerFactory getLogger(PageFile class); private File directory; private final String name; private RandomAccessFile readFile; private RandomAccessFile writeFile; private RandomAccessFile recoveryFile; private int pageSize = DEFAULT PAGE SIZE; private int recoveryFileMinPageCount = 1000; private int recoveryFileMaxPageCount = 10000; private int recoveryPageCount; private AtomicBoolean loaded = new AtomicBoolean(); int writeBatchSize = DEFAULT WRITE BATCH SIZE; private Map<Long, Page> pageCache; private boolean enablePageCaching = true; private int pageCacheSize = DEFAULT PAGE CACHE SIZE; private boolean enableRecoveryFile = true; private boolean enableDiskSyncs = true; private boolean enabledWriteThread = false; private AtomicBoolean stopWriter = new AtomicBoolean(); private Thread writerThread; private CountDownLatch checkpointLatch; private TreeMap<Long, PageWrite> writes = new TreeMap<Long, PageWrite>(); private final AtomicLong nextFreePageId = new AtomicLong(); private SequenceSet freeList = new SequenceSet(); private AtomicLong nextTxid = new AtomicLong(); private MetaData metaData; private ArrayList<File> tmpFilesForRemoval = new ArrayList<File>(); private boolean useLFRUEviction = false; private float LFUEvictionFactor = 0 2f; static class PageWrite { Page page; byte[] current; byte[] diskBound; long currentLocation = -1; long diskBoundLocation = -1; File tmpFile; int length; public PageWrite(Page page, byte[] data) { this page = page; current = data; } public PageWrite(Page page, long currentLocation, int length, File tmpFile) { this page = page; this currentLocation = currentLocation; this tmpFile = tmpFile; this length = length; } public void setCurrent(Page page, byte[] data) { this page = page; current = data; currentLocation = -1; diskBoundLocation = -1; } public void setCurrentLocation(Page page, long location, int length) { this page = page; this currentLocation = location; this length = length; this current = null; } Override public String toString() { return [PageWrite + page getPageId() + - + page getType() + ] ; } SuppressWarnings( unchecked ) public Page getPage() { return page; } public byte[] getDiskBound() throws IOException { if (diskBound == null && diskBoundLocation != -1) { diskBound = new byte[length]; RandomAccessFile file = new RandomAccessFile(tmpFile, r ); file seek(diskBoundLocation); file read(diskBound); file close(); diskBoundLocation = -1; } return diskBound; } void begin() { if (currentLocation != -1) { diskBoundLocation = currentLocation; } else { diskBound = current; } current = null; currentLocation = -1; } boolean done() { diskBoundLocation = -1; diskBound = null; return current == null || currentLocation == -1; } boolean isDone() { return diskBound == null && diskBoundLocation == -1 && current == null && currentLocation == -1; } } public static class MetaData { String fileType; String fileTypeVersion; long metaDataTxId = -1; int pageSize; boolean cleanShutdown; long lastTxId; long freePages; public String getFileType() { return fileType; } public void setFileType(String fileType) { this fileType = fileType; } public String getFileTypeVersion() { return fileTypeVersion; } public void setFileTypeVersion(String version) { this fileTypeVersion = version; } public long getMetaDataTxId() { return metaDataTxId; } public void setMetaDataTxId(long metaDataTxId) { this metaDataTxId = metaDataTxId; } public int getPageSize() { return pageSize; } public void setPageSize(int pageSize) { this pageSize = pageSize; } public boolean isCleanShutdown() { return cleanShutdown; } public void setCleanShutdown(boolean cleanShutdown) { this cleanShutdown = cleanShutdown; } public long getLastTxId() { return lastTxId; } public void setLastTxId(long lastTxId) { this lastTxId = lastTxId; } public long getFreePages() { return freePages; } public void setFreePages(long value) { this freePages = value; } } public Transaction tx() { assertLoaded(); return new Transaction(this); } public PageFile(File directory, String name) { this directory = directory; this name = name; } public void delete() throws IOException { if (loaded get()) { throw new IllegalStateException( Cannot delete page file data when the page file is loaded ); } delete(getMainPageFile()); delete(getFreeFile()); delete(getRecoveryFile()); } public void archive() throws IOException { if (loaded get()) { throw new IllegalStateException( Cannot delete page file data when the page file is loaded ); } long timestamp = System currentTimeMillis(); archive(getMainPageFile(), String valueOf(timestamp)); archive(getFreeFile(), String valueOf(timestamp)); archive(getRecoveryFile(), String valueOf(timestamp)); } private void delete(File file) throws IOException { if (file exists() && !file delete()) { throw new IOException( Could not delete + file getPath()); } } private void archive(File file, String suffix) throws IOException { if (file exists()) { File archive = new File(file getPath() + - + suffix); if (!file renameTo(archive)) { throw new IOException( Could not archive + file getPath() + to + file getPath()); } } } public void load() throws IOException, IllegalStateException { if (loaded compareAndSet(false, true)) { if (enablePageCaching) { if (isUseLFRUEviction()) { pageCache = Collections synchronizedMap(new LFUCache<Long, Page>(pageCacheSize, getLFUEvictionFactor())); } else { pageCache = Collections synchronizedMap(new LRUCache<Long, Page>(pageCacheSize, pageCacheSize, 0 75f, true)); } } File file = getMainPageFile(); IOHelper mkdirs(file getParentFile()); writeFile = new RandomAccessFile(file, rw ); readFile = new RandomAccessFile(file, r ); if (readFile length() > 0) { loadMetaData(); pageSize = metaData getPageSize(); } else { metaData = new MetaData(); metaData setFileType(PageFile class getName()); metaData setFileTypeVersion( 1 ); metaData setPageSize(getPageSize()); metaData setCleanShutdown(true); metaData setFreePages(-1); metaData setLastTxId(0); storeMetaData(); } if (enableRecoveryFile) { recoveryFile = new RandomAccessFile(getRecoveryFile(), rw ); } if (metaData isCleanShutdown()) { nextTxid set(metaData getLastTxId() + 1); if (metaData getFreePages() > 0) { loadFreeList(); } } else { LOG debug(toString() + , Recovering page file ); nextTxid set(redoRecoveryUpdates()); freeList = new SequenceSet(); for (Iterator<Page> i = tx() iterator(true); i hasNext(); ) { Page page = i next(); if (page getType() == Page PAGE FREE TYPE) { freeList add(page getPageId()); } } } metaData setCleanShutdown(false); storeMetaData(); getFreeFile() delete(); if (writeFile length() < PAGE FILE HEADER SIZE) { writeFile setLength(PAGE FILE HEADER SIZE); } nextFreePageId set((writeFile length() - PAGE FILE HEADER SIZE) / pageSize); startWriter(); } else { throw new IllegalStateException( Cannot load the page file when it is already loaded ); } } public void unload() throws IOException { if (loaded compareAndSet(true, false)) { flush(); try { stopWriter(); } catch (InterruptedException e) { throw new InterruptedIOException(); } if (freeList isEmpty()) { metaData setFreePages(0); } else { storeFreeList(); metaData setFreePages(freeList size()); } metaData setLastTxId(nextTxid get() - 1); metaData setCleanShutdown(true); storeMetaData(); if (readFile != null) { readFile close(); readFile = null; writeFile close(); writeFile = null; if (enableRecoveryFile) { recoveryFile close(); recoveryFile = null; } freeList clear(); if (pageCache != null) { pageCache = null; } synchronized (writes) { writes clear(); } } } else { throw new IllegalStateException( Cannot unload the page file when it is not loaded ); } } public boolean isLoaded() { return loaded get(); } public void flush() throws IOException { if (enabledWriteThread && stopWriter get()) { throw new IOException( Page file already stopped checkpointing is not allowed ); } CountDownLatch checkpointLatch; synchronized (writes) { if (writes isEmpty()) { return; } if (enabledWriteThread) { if (this checkpointLatch == null) { this checkpointLatch = new CountDownLatch(1); } checkpointLatch = this checkpointLatch; writes notify(); } else { writeBatch(); return; } } try { checkpointLatch await(); } catch (InterruptedException e) { InterruptedIOException ioe = new InterruptedIOException(); ioe initCause(e); throw ioe; } } public String toString() { return Page File + getMainPageFile(); } private File getMainPageFile() { return new File(directory, IOHelper toFileSystemSafeName(name) + PAGEFILE SUFFIX); } public File getFreeFile() { return new File(directory, IOHelper toFileSystemSafeName(name) + FREE FILE SUFFIX); } public File getRecoveryFile() { return new File(directory, IOHelper toFileSystemSafeName(name) + RECOVERY FILE SUFFIX); } public long toOffset(long pageId) { return PAGE FILE HEADER SIZE + (pageId * pageSize); } private void loadMetaData() throws IOException { ByteArrayInputStream is; MetaData v1 = new MetaData(); MetaData v2 = new MetaData(); try { Properties p = new Properties(); byte[] d = new byte[PAGE FILE HEADER SIZE / 2]; readFile seek(0); readFile readFully(d); is = new ByteArrayInputStream(d); p load(is); IntrospectionSupport setProperties(v1, p); } catch (IOException e) { v1 = null; } try { Properties p = new Properties(); byte[] d = new byte[PAGE FILE HEADER SIZE / 2]; readFile seek(PAGE FILE HEADER SIZE / 2); readFile readFully(d); is = new ByteArrayInputStream(d); p load(is); IntrospectionSupport setProperties(v2, p); } catch (IOException e) { v2 = null; } if (v1 == null && v2 == null) { throw new IOException( Could not load page file meta data ); } if (v1 == null || v1 metaDataTxId < 0) { metaData = v2; } else if (v2 == null || v1 metaDataTxId < 0) { metaData = v1; } else if (v1 metaDataTxId == v2 metaDataTxId) { metaData = v1; } else { metaData = v2; } } private void storeMetaData() throws IOException { metaData metaDataTxId++; Properties p = new Properties(); IntrospectionSupport getProperties(metaData, p, null); ByteArrayOutputStream os = new ByteArrayOutputStream(PAGE FILE HEADER SIZE); p store(os, ); if (os size() > PAGE FILE HEADER SIZE / 2) { throw new IOException( Configuation is larger than + PAGE FILE HEADER SIZE / 2); } byte[] filler = new byte[(PAGE FILE HEADER SIZE / 2) - os size()]; Arrays fill(filler, (byte) ); os write(filler); os flush(); byte[] d = os toByteArray(); writeFile seek(0); writeFile write(d); writeFile getFD() sync(); writeFile seek(PAGE FILE HEADER SIZE / 2); writeFile write(d); writeFile getFD() sync(); } private void storeFreeList() throws IOException { FileOutputStream os = new FileOutputStream(getFreeFile()); DataOutputStream dos = new DataOutputStream(os); SequenceSet Marshaller INSTANCE writePayload(freeList, dos); dos close(); } private void loadFreeList() throws IOException { freeList clear(); FileInputStream is = new FileInputStream(getFreeFile()); DataInputStream dis = new DataInputStream(is); freeList = SequenceSet Marshaller INSTANCE readPayload(dis); dis close(); } public boolean isEnableRecoveryFile() { return enableRecoveryFile; } public void setEnableRecoveryFile(boolean doubleBuffer) { assertNotLoaded(); this enableRecoveryFile = doubleBuffer; } public boolean isEnableDiskSyncs() { return enableDiskSyncs; } public void setEnableDiskSyncs(boolean syncWrites) { assertNotLoaded(); this enableDiskSyncs = syncWrites; } public int getPageSize() { return this pageSize; } public int getPageContentSize() { return this pageSize - Page PAGE HEADER SIZE; } public void setPageSize(int pageSize) throws IllegalStateException { assertNotLoaded(); this pageSize = pageSize; } public boolean isEnablePageCaching() { return this enablePageCaching; } public void setEnablePageCaching(boolean enablePageCaching) { assertNotLoaded(); this enablePageCaching = enablePageCaching; } public int getPageCacheSize() { return this pageCacheSize; } public void setPageCacheSize(int pageCacheSize) { assertNotLoaded(); this pageCacheSize = pageCacheSize; } public boolean isEnabledWriteThread() { return enabledWriteThread; } public void setEnableWriteThread(boolean enableAsyncWrites) { assertNotLoaded(); this enabledWriteThread = enableAsyncWrites; } public long getDiskSize() throws IOException { return toOffset(nextFreePageId get()); } public long getPageCount() { return nextFreePageId get(); } public int getRecoveryFileMinPageCount() { return recoveryFileMinPageCount; } public long getFreePageCount() { assertLoaded(); return freeList rangeSize(); } public void setRecoveryFileMinPageCount(int recoveryFileMinPageCount) { assertNotLoaded(); this recoveryFileMinPageCount = recoveryFileMinPageCount; } public int getRecoveryFileMaxPageCount() { return recoveryFileMaxPageCount; } public void setRecoveryFileMaxPageCount(int recoveryFileMaxPageCount) { assertNotLoaded(); this recoveryFileMaxPageCount = recoveryFileMaxPageCount; } public int getWriteBatchSize() { return writeBatchSize; } public void setWriteBatchSize(int writeBatchSize) { this writeBatchSize = writeBatchSize; } public float getLFUEvictionFactor() { return LFUEvictionFactor; } public void setLFUEvictionFactor(float LFUEvictionFactor) { this LFUEvictionFactor = LFUEvictionFactor; } public boolean isUseLFRUEviction() { return useLFRUEviction; } public void setUseLFRUEviction(boolean useLFRUEviction) { this useLFRUEviction = useLFRUEviction; } void assertLoaded() throws IllegalStateException { if (!loaded get()) { throw new IllegalStateException( PageFile is not loaded ); } } void assertNotLoaded() throws IllegalStateException { if (loaded get()) { throw new IllegalStateException( PageFile is loaded ); } } <T> Page<T> allocate(int count) throws IOException { assertLoaded(); if (count <= 0) { throw new IllegalArgumentException( The allocation count must be larger than zero ); } Sequence seq = freeList removeFirstSequence(count); if (seq == null) { Page<T> first = null; int c = count; long pageId = nextFreePageId getAndAdd(count); long writeTxnId = nextTxid getAndAdd(count); while (c-- > 0) { Page<T> page = new Page<T>(pageId++); page makeFree(writeTxnId++); if (first == null) { first = page; } addToCache(page); DataByteArrayOutputStream out = new DataByteArrayOutputStream(pageSize); page write(out); write(page, out getData()); } return first; } Page<T> page = new Page<T>(seq getFirst()); page makeFree(0); return page; } long getNextWriteTransactionId() { return nextTxid incrementAndGet(); } synchronized void readPage(long pageId, byte[] data) throws IOException { readFile seek(toOffset(pageId)); readFile readFully(data); } public void freePage(long pageId) { freeList add(pageId); removeFromCache(pageId); } SuppressWarnings( unchecked ) private <T> void write(Page<T> page, byte[] data) throws IOException { final PageWrite write = new PageWrite(page, data); Entry<Long, PageWrite> entry = new Entry<Long, PageWrite>() { public Long getKey() { return write getPage() getPageId(); } public PageWrite getValue() { return write; } public PageWrite setValue(PageWrite value) { return null; } }; Entry<Long, PageWrite>[] entries = new Map Entry[]{entry}; write(Arrays asList(entries)); } void write(Collection<Map Entry<Long, PageWrite>> updates) throws IOException { synchronized (writes) { if (enabledWriteThread) { while (writes size() >= writeBatchSize && !stopWriter get()) { try { writes wait(); } catch (InterruptedException e) { Thread currentThread() interrupt(); throw new InterruptedIOException(); } } } boolean longTx = false; for (Map Entry<Long, PageWrite> entry updates) { Long key = entry getKey(); PageWrite value = entry getValue(); PageWrite write = writes get(key); if (write == null) { writes put(key, value); } else { if (value currentLocation != -1) { write setCurrentLocation(value page, value currentLocation, value length); write tmpFile = value tmpFile; longTx = true; } else { write setCurrent(value page, value current); } } } if (longTx || canStartWriteBatch()) { if (enabledWriteThread) { writes notify(); } else { writeBatch(); } } } } private boolean canStartWriteBatch() { int capacityUsed = ((writes size() * 100) / writeBatchSize); if (enabledWriteThread) { return capacityUsed >= 10 || checkpointLatch != null; } else { return capacityUsed >= 80 || checkpointLatch != null; } } SuppressWarnings( unchecked ) <T> Page<T> getFromCache(long pageId) { synchronized (writes) { PageWrite pageWrite = writes get(pageId); if (pageWrite != null) { return pageWrite page; } } Page<T> result = null; if (enablePageCaching) { result = pageCache get(pageId); } return result; } void addToCache(Page page) { if (enablePageCaching) { pageCache put(page getPageId(), page); } } void removeFromCache(long pageId) { if (enablePageCaching) { pageCache remove(pageId); } } private void pollWrites() { try { while (!stopWriter get()) { synchronized (writes) { writes notifyAll(); while (writes isEmpty() && checkpointLatch == null && !stopWriter get()) { writes wait(100); } if (writes isEmpty()) { releaseCheckpointWaiter(); } } writeBatch(); } } catch (Throwable e) { LOG info( An exception was raised while performing poll writes , e); } finally { releaseCheckpointWaiter(); } } private void writeBatch() throws IOException { CountDownLatch checkpointLatch; ArrayList<PageWrite> batch; synchronized (writes) { batch = new ArrayList<PageWrite>(writes size()); for (PageWrite write writes values()) { batch add(write); write begin(); if (write diskBound == null && write diskBoundLocation == -1) { batch remove(write); } } checkpointLatch = this checkpointLatch; this checkpointLatch = null; } Checksum checksum = new Adler32(); if (enableRecoveryFile) { recoveryFile seek(RECOVERY FILE HEADER SIZE); } for (PageWrite w batch) { if (enableRecoveryFile) { try { checksum update(w getDiskBound(), 0, pageSize); } catch (Throwable t) { throw IOExceptionSupport create( Cannot create recovery file Reason + t, t); } recoveryFile writeLong(w page getPageId()); recoveryFile write(w getDiskBound(), 0, pageSize); } writeFile seek(toOffset(w page getPageId())); writeFile write(w getDiskBound(), 0, pageSize); w done(); } try { if (enableRecoveryFile) { if (recoveryPageCount > recoveryFileMaxPageCount) { int t = Math max(recoveryFileMinPageCount, batch size()); recoveryFile setLength(recoveryFileSizeForPages(t)); } recoveryFile seek(0); recoveryFile writeLong(nextTxid get()); recoveryFile writeLong(checksum getValue()); recoveryFile writeInt(batch size()); } if (enableDiskSyncs) { if (enableRecoveryFile) { recoveryFile getFD() sync(); } writeFile getFD() sync(); } } finally { synchronized (writes) { for (PageWrite w batch) { if (w isDone()) { writes remove(w page getPageId()); if (w tmpFile != null && tmpFilesForRemoval contains(w tmpFile)) { if (!w tmpFile delete()) { throw new IOException( Can t delete temporary KahaDB transaction file + w tmpFile); } tmpFilesForRemoval remove(w tmpFile); } } } } if (checkpointLatch != null) { checkpointLatch countDown(); } } } public void removeTmpFile(File file) { tmpFilesForRemoval add(file); } private long recoveryFileSizeForPages(int pageCount) { return RECOVERY FILE HEADER SIZE + ((pageSize + 8) * pageCount); } private void releaseCheckpointWaiter() { if (checkpointLatch != null) { checkpointLatch countDown(); checkpointLatch = null; } } private long redoRecoveryUpdates() throws IOException { if (!enableRecoveryFile) { return 0; } recoveryPageCount = 0; if (recoveryFile length() == 0) { recoveryFile write(new byte[RECOVERY FILE HEADER SIZE]); recoveryFile setLength(recoveryFileSizeForPages(recoveryFileMinPageCount)); return 0; } recoveryFile seek(0); long nextTxId = recoveryFile readLong(); long expectedChecksum = recoveryFile readLong(); int pageCounter = recoveryFile readInt(); recoveryFile seek(RECOVERY FILE HEADER SIZE); Checksum checksum = new Adler32(); LinkedHashMap<Long, byte[]> batch = new LinkedHashMap<Long, byte[]>(); try { for (int i = 0; i < pageCounter; i++) { long offset = recoveryFile readLong(); byte[] data = new byte[pageSize]; if (recoveryFile read(data, 0, pageSize) != pageSize) { return nextTxId; } checksum update(data, 0, pageSize); batch put(offset, data); } } catch (Exception e) { LOG debug( Redo buffer was not fully intact , e); return nextTxId; } recoveryPageCount = pageCounter; if (checksum getValue() != expectedChecksum) { return nextTxId; } for (Map Entry<Long, byte[]> e batch entrySet()) { writeFile seek(toOffset(e getKey())); writeFile write(e getValue()); } writeFile getFD() sync(); return nextTxId; } private void startWriter() { synchronized (writes) { if (enabledWriteThread) { stopWriter set(false); writerThread = new Thread( KahaDB Page Writer ) { Override public void run() { pollWrites(); } }; writerThread setPriority(Thread MAX PRIORITY); writerThread setDaemon(true); writerThread start(); } } } private void stopWriter() throws InterruptedException { if (enabledWriteThread) { stopWriter set(true); writerThread join(); } } public File getFile() { return getMainPageFile(); } public File getDirectory() { return directory; } }",1.0,
1354,1354,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\page\PageFile.,PageWrite,"static class PageWrite { Page page; byte[] current; byte[] diskBound; long currentLocation = -1; long diskBoundLocation = -1; File tmpFile; int length; public PageWrite(Page page, byte[] data) { this page = page; current = data; } public PageWrite(Page page, long currentLocation, int length, File tmpFile) { this page = page; this currentLocation = currentLocation; this tmpFile = tmpFile; this length = length; } public void setCurrent(Page page, byte[] data) { this page = page; current = data; currentLocation = -1; diskBoundLocation = -1; } public void setCurrentLocation(Page page, long location, int length) { this page = page; this currentLocation = location; this length = length; this current = null; } Override public String toString() { return [PageWrite + page getPageId() + - + page getType() + ] ; } SuppressWarnings( unchecked ) public Page getPage() { return page; } public byte[] getDiskBound() throws IOException { if (diskBound == null && diskBoundLocation != -1) { diskBound = new byte[length]; RandomAccessFile file = new RandomAccessFile(tmpFile, r ); file seek(diskBoundLocation); file read(diskBound); file close(); diskBoundLocation = -1; } return diskBound; } void begin() { if (currentLocation != -1) { diskBoundLocation = currentLocation; } else { diskBound = current; } current = null; currentLocation = -1; } boolean done() { diskBoundLocation = -1; diskBound = null; return current == null || currentLocation == -1; } boolean isDone() { return diskBound == null && diskBoundLocation == -1 && current == null && currentLocation == -1; } }",1.0,
1356,1356,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\page\Transaction.,Transaction,"public class Transaction implements Iterable<Page> { private RandomAccessFile tmpFile; private File txFile; private long nextLocation = 0; public class PageOverflowIOException extends IOException { private static final long serialVersionUID = 1L; public PageOverflowIOException(String message) { super(message); } } public class InvalidPageIOException extends IOException { private static final long serialVersionUID = 1L; private final long page; public InvalidPageIOException(String message, long page) { super(message); this page = page; } public long getPage() { return page; } } public interface Closure <T extends Throwable> { public void execute(Transaction tx) throws T; } public interface CallableClosure<R, T extends Throwable> { public R execute(Transaction tx) throws T; } private final PageFile pageFile; private long writeTransactionId=-1; private TreeMap<Long, PageWrite> writes=new TreeMap<Long, PageWrite>(); private final SequenceSet allocateList = new SequenceSet(); private final SequenceSet freeList = new SequenceSet(); private long maxTransactionSize = Long getLong( maxKahaDBTxSize , 10485760L); private long size = 0; Transaction(PageFile pageFile) { this pageFile = pageFile; } public PageFile getPageFile() { return this pageFile; } public <T> Page<T> allocate() throws IOException { return allocate(1); } public <T> Page<T> allocate(int count) throws IOException { Page<T> rc = pageFile allocate(count); allocateList add(new Sequence(rc getPageId(), rc getPageId()+count-1)); return rc; } public void free(long pageId) throws IOException { free(load(pageId, null)); } public void free(long pageId, int count) throws IOException { free(load(pageId, null), count); } public <T> void free(Page<T> page, int count) throws IOException { pageFile assertLoaded(); long offsetPage = page getPageId(); while (count-- > 0) { if (page == null) { page = load(offsetPage, null); } free(page); page = null; offsetPage++; } } public <T> void free(Page<T> page) throws IOException { pageFile assertLoaded(); while (page != null) { if (page getType() == Page PAGE FREE TYPE) { return; } Page<T> next = null; if (page getType() == Page PAGE PART TYPE) { next = load(page getNext(), null); } page makeFree(getWriteTransactionId()); pageFile addToCache(page copy()); DataByteArrayOutputStream out = new DataByteArrayOutputStream(pageFile getPageSize()); page write(out); write(page, out getData()); freeList add(page getPageId()); page = next; } } public <T> void store(Page<T> page, Marshaller<T> marshaller, final boolean overflow) throws IOException { DataByteArrayOutputStream out = (DataByteArrayOutputStream)openOutputStream(page, overflow); if (marshaller != null) { marshaller writePayload(page get(), out); } out close(); } public OutputStream openOutputStream(Page page, final boolean overflow) throws IOException { pageFile assertLoaded(); final Page copy = page copy(); pageFile addToCache(copy); DataByteArrayOutputStream out = new DataByteArrayOutputStream(pageFile getPageSize() * 2) { Page current = copy; SuppressWarnings( unchecked ) Override protected void onWrite() throws IOException { final int pageSize = pageFile getPageSize(); if (pos >= pageSize) { if (overflow) { do { Page next; if (current getType() == Page PAGE PART TYPE) { next = load(current getNext(), null); } else { next = allocate(); } next txId = current txId; int oldPos = pos; pos = 0; current makePagePart(next getPageId(), getWriteTransactionId()); current write(this); byte[] data = new byte[pageSize]; System arraycopy(buf, 0, data, 0, pageSize); Transaction this write(current, data); pageFile addToCache(current); pos = 0; skip(Page PAGE HEADER SIZE); System arraycopy(buf, pageSize, buf, pos, oldPos - pageSize); pos += oldPos - pageSize; current = next; } while (pos > pageSize); } else { throw new PageOverflowIOException( Page overflow ); } } } Override public void close() throws IOException { super close(); if (current getType() == Page PAGE PART TYPE) { free(current getNext()); } current makePageEnd(pos, getWriteTransactionId()); pageFile addToCache(current); pos = 0; current write(this); Transaction this write(current, buf); } }; out skip(Page PAGE HEADER SIZE); return out; } public <T> Page<T> load(long pageId, Marshaller<T> marshaller) throws IOException { pageFile assertLoaded(); Page<T> page = new Page<T>(pageId); load(page, marshaller); return page; } SuppressWarnings( unchecked ) public <T> void load(Page<T> page, Marshaller<T> marshaller) throws IOException { pageFile assertLoaded(); long pageId = page getPageId(); if (pageId < 0) { throw new InvalidPageIOException( Page id is not valid , pageId); } PageWrite update = writes get(pageId); if (update != null) { page copy(update getPage()); return; } Page<T> t = pageFile getFromCache(pageId); if (t != null) { page copy(t); return; } if (marshaller != null) { InputStream is = openInputStream(page); DataInputStream dataIn = new DataInputStream(is); page set(marshaller readPayload(dataIn)); is close(); } else { DataByteArrayInputStream in = new DataByteArrayInputStream(new byte[Page PAGE HEADER SIZE]); pageFile readPage(pageId, in getRawData()); page read(in); page set(null); } if (marshaller != null) { pageFile addToCache(page); } } public InputStream openInputStream(final Page p) throws IOException { return new InputStream() { private ByteSequence chunk = new ByteSequence(new byte[pageFile getPageSize()]); private Page page = readPage(p); private int pageCount = 1; private Page markPage; private ByteSequence markChunk; private Page readPage(Page page) throws IOException { pageFile readPage(page getPageId(), chunk getData()); chunk setOffset(0); chunk setLength(pageFile getPageSize()); DataByteArrayInputStream in = new DataByteArrayInputStream(chunk); page read(in); chunk setOffset(Page PAGE HEADER SIZE); if (page getType() == Page PAGE END TYPE) { chunk setLength((int)(page getNext())); } if (page getType() == Page PAGE FREE TYPE) { throw new EOFException( Chunk stream does not exist, page + page getPageId() + is marked free ); } return page; } public int read() throws IOException { if (!atEOF()) { return chunk data[chunk offset++] & 0xff; } else { return -1; } } private boolean atEOF() throws IOException { if (chunk offset < chunk length) { return false; } if (page getType() == Page PAGE END TYPE) { return true; } fill(); return chunk offset >= chunk length; } private void fill() throws IOException { page = readPage(new Page(page getNext())); pageCount++; } public int read(byte[] b) throws IOException { return read(b, 0, b length); } public int read(byte b[], int off, int len) throws IOException { if (!atEOF()) { int rc = 0; while (!atEOF() && rc < len) { len = Math min(len, chunk length - chunk offset); if (len > 0) { System arraycopy(chunk data, chunk offset, b, off, len); chunk offset += len; } rc += len; } return rc; } else { return -1; } } public long skip(long len) throws IOException { if (atEOF()) { int rc = 0; while (!atEOF() && rc < len) { len = Math min(len, chunk length - chunk offset); if (len > 0) { chunk offset += len; } rc += len; } return rc; } else { return -1; } } public int available() { return chunk length - chunk offset; } public boolean markSupported() { return true; } public void mark(int markpos) { markPage = page; byte data[] = new byte[pageFile getPageSize()]; System arraycopy(chunk getData(), 0, data, 0, pageFile getPageSize()); markChunk = new ByteSequence(data, chunk getOffset(), chunk getLength()); } public void reset() { page = markPage; chunk = markChunk; } }; } public Iterator<Page> iterator() { return (Iterator<Page>)iterator(false); } public Iterator<Page> iterator(final boolean includeFreePages) { pageFile assertLoaded(); return new Iterator<Page>() { long nextId; Page nextPage; Page lastPage; private void findNextPage() { if (!pageFile isLoaded()) { throw new IllegalStateException( Cannot iterate the pages when the page file is not loaded ); } if (nextPage != null) { return; } try { while (nextId < pageFile getPageCount()) { Page page = load(nextId, null); if (includeFreePages || page getType() != Page PAGE FREE TYPE) { nextPage = page; return; } else { nextId++; } } } catch (IOException e) { } } public boolean hasNext() { findNextPage(); return nextPage != null; } public Page next() { findNextPage(); if (nextPage != null) { lastPage = nextPage; nextPage = null; nextId++; return lastPage; } else { throw new NoSuchElementException(); } } SuppressWarnings( unchecked ) public void remove() { if (lastPage == null) { throw new IllegalStateException(); } try { free(lastPage); lastPage = null; } catch (IOException e) { throw new RuntimeException(e); } } }; } public void commit() throws IOException { if( writeTransactionId!=-1 ) { if (tmpFile != null) { tmpFile close(); pageFile removeTmpFile(getTempFile()); tmpFile = null; txFile = null; } pageFile write(writes entrySet()); freePages(freeList); freeList clear(); allocateList clear(); writes clear(); writeTransactionId = -1; } size = 0; } public void rollback() throws IOException { if( writeTransactionId!=-1 ) { if (tmpFile != null) { tmpFile close(); pageFile removeTmpFile(getTempFile()); tmpFile = null; txFile = null; } freePages(allocateList); freeList clear(); allocateList clear(); writes clear(); writeTransactionId = -1; } size = 0; } private long getWriteTransactionId() { if( writeTransactionId==-1 ) { writeTransactionId = pageFile getNextWriteTransactionId(); } return writeTransactionId; } protected File getTempFile() { if (txFile == null) { txFile = new File(getPageFile() getDirectory(), IOHelper toFileSystemSafeName( tx- + Long toString(getWriteTransactionId()) + - + Long toString(System currentTimeMillis()) + tmp )); } return txFile; } private void write(final Page page, byte[] data) throws IOException { Long key = page getPageId(); size = writes size() * pageFile getPageSize(); PageWrite write; if (size > maxTransactionSize) { if (tmpFile == null) { tmpFile = new RandomAccessFile(getTempFile(), rw ); } long location = nextLocation; tmpFile seek(nextLocation); tmpFile write(data); nextLocation = location + data length; write = new PageWrite(page, location, data length, getTempFile()); } else { write = new PageWrite(page, data); } writes put(key, write); } private void freePages(SequenceSet list) throws RuntimeException { Sequence seq = list getHead(); while( seq!=null ) { seq each(new Sequence Closure<RuntimeException>(){ public void execute(long value) { pageFile freePage(value); } }); seq = seq getNext(); } } public boolean isReadOnly() { return writeTransactionId==-1; } public <T extends Throwable> void execute(Closure<T> closure) throws T, IOException { boolean success = false; try { closure execute(this); success = true; } finally { if (success) { commit(); } else { rollback(); } } } public <R, T extends Throwable> R execute(CallableClosure<R, T> closure) throws T, IOException { boolean success = false; try { R rc = closure execute(this); success = true; return rc; } finally { if (success) { commit(); } else { rollback(); } } } }",1.0,
1357,1357,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\page\Transaction.,PageOverflowIOException,public class PageOverflowIOException extends IOException { private static final long serialVersionUID = 1L; public PageOverflowIOException(String message) { super(message); } },1.0,
1358,1358,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\page\Transaction.,InvalidPageIOException,"public class InvalidPageIOException extends IOException { private static final long serialVersionUID = 1L; private final long page; public InvalidPageIOException(String message, long page) { super(message); this page = page; } public long getPage() { return page; } }",1.0,
1360,1360,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\CommandLineSupport.,CommandLineSupport,"public class CommandLineSupport { static public String[] setOptions(Object target, String []args) { ArrayList rc = new ArrayList(); for (int i = 0; i < args length; i++) { if( args[i] == null ) continue; if( args[i] startsWith( -- ) ) { String value= true ; String name = args[i] substring(2); int p = name indexOf( = ); if( p > 0 ) { value = name substring(p+1); name = name substring(0,p); } if( name length()==0 ) { rc add(args[i]); continue; } String propName = convertOptionToPropertyName(name); if( !IntrospectionSupport setProperty(target, propName, value) ) { rc add(args[i]); continue; } } else { rc add(args[i]); } } String r[] = new String[rc size()]; rc toArray(r); return r; } private static String convertOptionToPropertyName(String name) { String rc= ; int p = name indexOf( - ); while( p > 0 ) { rc += name substring(0, p); name = name substring(p+1); if( name length() >0 ) { rc += name substring(0,1) toUpperCase(); name = name substring(1); } p = name indexOf( - ); } return rc+name; } }",1.0,
1363,1363,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\DiskBenchmark.,DiskBenchmark,"public class DiskBenchmark { boolean verbose; int bs=1024*4; long size=1024*1024*500; long sampleInterval = 10*1000; public static void main(String[] args) { DiskBenchmark benchmark = new DiskBenchmark(); args = CommandLineSupport setOptions(benchmark, args); ArrayList<String> files = new ArrayList<String>(); if (args length == 0) { files add( disk-benchmark dat ); } else { files addAll(Arrays asList(args)); } for (String f files) { try { File file = new File(f); if (file exists()) { System out println( File + file + allready exists, will not benchmark ); } else { System out println( Benchmarking + file getCanonicalPath()); Report report = benchmark benchmark(file); file delete(); System out println(report toString()); } } catch (Throwable e) { if (benchmark verbose) { System out println( ERROR ); e printStackTrace(System out); } else { System out println( ERROR + e); } } } } public static class Report { public int size; public int writes; public long writeDuration; public int syncWrites; public long syncWriteDuration; public int reads; public long readDuration; Override public String toString() { return Writes n + +writes+ writes of size +size+ written in +(writeDuration/1000 0)+ seconds n + +getWriteRate()+ writes/second n + +getWriteSizeRate()+ megs/second n + n + Sync Writes n + +syncWrites+ writes of size +size+ written in +(syncWriteDuration/1000 0)+ seconds n + +getSyncWriteRate()+ writes/second n + +getSyncWriteSizeRate()+ megs/second n + n + Reads n + +reads+ reads of size +size+ read in +(readDuration/1000 0)+ seconds n + +getReadRate()+ writes/second n + +getReadSizeRate()+ megs/second n + n + ; } private float getWriteSizeRate() { float rc = writes; rc *= size; rc /= (1024*1024); rc /= (writeDuration/1000 0); return rc; } private float getWriteRate() { float rc = writes; rc /= (writeDuration/1000 0); return rc; } private float getSyncWriteSizeRate() { float rc = syncWrites; rc *= size; rc /= (1024*1024); rc /= (syncWriteDuration/1000 0); return rc; } private float getSyncWriteRate() { float rc = syncWrites; rc /= (syncWriteDuration/1000 0); return rc; } private float getReadSizeRate() { float rc = reads; rc *= size; rc /= (1024*1024); rc /= (readDuration/1000 0); return rc; } private float getReadRate() { float rc = reads; rc /= (readDuration/1000 0); return rc; } public int getSize() { return size; } public void setSize(int size) { this size = size; } public int getWrites() { return writes; } public void setWrites(int writes) { this writes = writes; } public long getWriteDuration() { return writeDuration; } public void setWriteDuration(long writeDuration) { this writeDuration = writeDuration; } public int getSyncWrites() { return syncWrites; } public void setSyncWrites(int syncWrites) { this syncWrites = syncWrites; } public long getSyncWriteDuration() { return syncWriteDuration; } public void setSyncWriteDuration(long syncWriteDuration) { this syncWriteDuration = syncWriteDuration; } public int getReads() { return reads; } public void setReads(int reads) { this reads = reads; } public long getReadDuration() { return readDuration; } public void setReadDuration(long readDuration) { this readDuration = readDuration; } } public Report benchmark(File file) throws IOException { Report rc = new Report(); byte []data = new byte[bs]; for (int i = 0; i < data length; i++) { data[i] = (byte)( a +(i%26)); } rc size = data length; RandomAccessFile raf = new RandomAccessFile(file, rw ); raf setLength(size); long start = System currentTimeMillis(); long now = System currentTimeMillis(); int ioCount=0; while( true ) { if( (now-start)>sampleInterval ) { break; } raf seek(0); for( long i=0; i+data length < size; i+=data length) { raf write(data); ioCount++; now = System currentTimeMillis(); if( (now-start)>sampleInterval ) { break; } } raf getFD() sync(); } raf getFD() sync(); raf close(); now = System currentTimeMillis(); rc size = data length; rc writes = ioCount; rc writeDuration = (now-start); raf = new RandomAccessFile(file, rw ); start = System currentTimeMillis(); now = System currentTimeMillis(); ioCount=0; while( true ) { if( (now-start)>sampleInterval ) { break; } for( long i=0; i+data length < size; i+=data length) { raf seek(i); raf write(data); raf getFD() sync(); ioCount++; now = System currentTimeMillis(); if( (now-start)>sampleInterval ) { break; } } } raf close(); now = System currentTimeMillis(); rc syncWrites = ioCount; rc syncWriteDuration = (now-start); raf = new RandomAccessFile(file, rw ); start = System currentTimeMillis(); now = System currentTimeMillis(); ioCount=0; while( true ) { if( (now-start)>sampleInterval ) { break; } raf seek(0); for( long i=0; i+data length < size; i+=data length) { raf seek(i); raf readFully(data); ioCount++; now = System currentTimeMillis(); if( (now-start)>sampleInterval ) { break; } } } raf close(); rc reads = ioCount; rc readDuration = (now-start); return rc; } public boolean isVerbose() { return verbose; } public void setVerbose(boolean verbose) { this verbose = verbose; } public int getBs() { return bs; } public void setBs(int bs) { this bs = bs; } public long getSize() { return size; } public void setSize(long size) { this size = size; } public long getSampleInterval() { return sampleInterval; } public void setSampleInterval(long sampleInterval) { this sampleInterval = sampleInterval; } }",1.0,
1364,1364,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\DiskBenchmark.,Report,public static class Report { public int size; public int writes; public long writeDuration; public int syncWrites; public long syncWriteDuration; public int reads; public long readDuration; Override public String toString() { return Writes n + +writes+ writes of size +size+ written in +(writeDuration/1000 0)+ seconds n + +getWriteRate()+ writes/second n + +getWriteSizeRate()+ megs/second n + n + Sync Writes n + +syncWrites+ writes of size +size+ written in +(syncWriteDuration/1000 0)+ seconds n + +getSyncWriteRate()+ writes/second n + +getSyncWriteSizeRate()+ megs/second n + n + Reads n + +reads+ reads of size +size+ read in +(readDuration/1000 0)+ seconds n + +getReadRate()+ writes/second n + +getReadSizeRate()+ megs/second n + n + ; } private float getWriteSizeRate() { float rc = writes; rc *= size; rc /= (1024*1024); rc /= (writeDuration/1000 0); return rc; } private float getWriteRate() { float rc = writes; rc /= (writeDuration/1000 0); return rc; } private float getSyncWriteSizeRate() { float rc = syncWrites; rc *= size; rc /= (1024*1024); rc /= (syncWriteDuration/1000 0); return rc; } private float getSyncWriteRate() { float rc = syncWrites; rc /= (syncWriteDuration/1000 0); return rc; } private float getReadSizeRate() { float rc = reads; rc *= size; rc /= (1024*1024); rc /= (readDuration/1000 0); return rc; } private float getReadRate() { float rc = reads; rc /= (readDuration/1000 0); return rc; } public int getSize() { return size; } public void setSize(int size) { this size = size; } public int getWrites() { return writes; } public void setWrites(int writes) { this writes = writes; } public long getWriteDuration() { return writeDuration; } public void setWriteDuration(long writeDuration) { this writeDuration = writeDuration; } public int getSyncWrites() { return syncWrites; } public void setSyncWrites(int syncWrites) { this syncWrites = syncWrites; } public long getSyncWriteDuration() { return syncWriteDuration; } public void setSyncWriteDuration(long syncWriteDuration) { this syncWriteDuration = syncWriteDuration; } public int getReads() { return reads; } public void setReads(int reads) { this reads = reads; } public long getReadDuration() { return readDuration; } public void setReadDuration(long readDuration) { this readDuration = readDuration; } },1.0,
1365,1365,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\IntegerMarshaller.,IntegerMarshaller,"public class IntegerMarshaller implements Marshaller<Integer> { public static final IntegerMarshaller INSTANCE = new IntegerMarshaller(); public void writePayload(Integer object, DataOutput dataOut) throws IOException { dataOut writeInt(object); } public Integer readPayload(DataInput dataIn) throws IOException { return dataIn readInt(); } public int getFixedSize() { return 4; } public Integer deepCopy(Integer source) { return source; } public boolean isDeepCopySupported() { return true; } }",1.0,
1366,1366,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\LinkedNode.,LinkedNode,public class LinkedNode<T extends LinkedNode<T>> { protected LinkedNodeList<T> list; protected T next; protected T prev; public LinkedNode() { } SuppressWarnings( unchecked ) private T getThis() { return (T) this; } public T getHeadNode() { return list head; } public T getTailNode() { return list head prev; } public T getNext() { return isTailNode() null next; } public T getPrevious() { return isHeadNode() null prev; } public T getNextCircular() { return next; } public T getPreviousCircular() { return prev; } public boolean isHeadNode() { return list head == this; } public boolean isTailNode() { return list head prev == this; } public void linkAfter(T node) { if (node == this) { throw new IllegalArgumentException( You cannot link to yourself ); } if (node list != null) { throw new IllegalArgumentException( You only insert nodes that are not in a list ); } if (list == null) { throw new IllegalArgumentException( This node is not yet in a list ); } node list = list; node prev = getThis(); node next = next; next prev = node; next = node; list size++; } public void linkAfter(LinkedNodeList<T> rightList) { if (rightList == list) { throw new IllegalArgumentException( You cannot link to yourself ); } if (list == null) { throw new IllegalArgumentException( This node is not yet in a list ); } T rightHead = rightList head; T rightTail = rightList head prev; list reparent(rightList); rightHead prev = getThis(); rightTail next = next; next prev = rightTail; next = rightHead; } public void linkBefore(T node) { if (node == this) { throw new IllegalArgumentException( You cannot link to yourself ); } if (node list != null) { throw new IllegalArgumentException( You only insert nodes that are not in a list ); } if (list == null) { throw new IllegalArgumentException( This node is not yet in a list ); } node list = list; node next = getThis(); node prev = prev; prev next = node; prev = node; if (this == list head) { list head = node; } list size++; } public void linkBefore(LinkedNodeList<T> leftList) { if (leftList == list) { throw new IllegalArgumentException( You cannot link to yourself ); } if (list == null) { throw new IllegalArgumentException( This node is not yet in a list ); } T leftHead = leftList head; T leftTail = leftList head prev; list reparent(leftList); leftTail next = getThis(); leftHead prev = prev; prev next = leftHead; prev = leftTail; if (isHeadNode()) { list head = leftHead; } } public void linkToTail(LinkedNodeList<T> target) { if (list != null) { throw new IllegalArgumentException( This node is already linked to a node ); } if (target head == null) { next = prev = target head = getThis(); list = target; list size++; } else { target head prev linkAfter(getThis()); } } public void linkToHead(LinkedNodeList<T> target) { if (list != null) { throw new IllegalArgumentException( This node is already linked to a list ); } if (target head == null) { next = prev = target head = getThis(); list = target; list size++; } else { target head linkBefore(getThis()); } } public boolean unlink() { if (list == null) { return false; } if (getThis() == prev) { list head = null; } else { next prev = prev; prev next = next; if (isHeadNode()) { list head = next; } } list size--; list = null; return true; } public LinkedNodeList<T> splitAfter() { if (isTailNode()) { return new LinkedNodeList<T>(); } LinkedNodeList<T> newList = new LinkedNodeList<T>(); newList head = next; newList head prev = list head prev; newList head prev next = newList head; next = list head; list head prev = getThis(); T n = newList head; do { n list = newList; n = n next; newList size++; list size--; } while (n != newList head); return newList; } public LinkedNodeList<T> splitBefore() { if (isHeadNode()) { return new LinkedNodeList<T>(); } LinkedNodeList<T> newList = new LinkedNodeList<T>(); newList head = list head; list head = getThis(); T newListTail = prev; prev = newList head prev; prev next = getThis(); newList head prev = newListTail; newListTail next = newList head; T n = newList head; do { n list = newList; n = n next; newList size++; list size--; } while (n != newList head); return newList; } public boolean isLinked() { return list != null; } public LinkedNodeList<T> getList() { return list; } },1.0,
1367,1367,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\LinkedNodeList.,LinkedNodeList,"public class LinkedNodeList<T extends LinkedNode<T>> { T head; int size; public LinkedNodeList() { } public boolean isEmpty() { return head == null; } public void addLast(T node) { node linkToTail(this); } public void addFirst(T node) { node linkToHead(this); } public T getHead() { return head; } public T getTail() { return head != null head prev null; } public void clear() { while (head != null) { head unlink(); } } public void addLast(LinkedNodeList<T> list) { if (list isEmpty()) { return; } if (head == null) { head = list head; reparent(list); } else { getTail() linkAfter(list); } } public void addFirst(LinkedNodeList<T> list) { if (list isEmpty()) { return; } if (head == null) { reparent(list); head = list head; list head = null; } else { getHead() linkBefore(list); } } public T reparent(LinkedNodeList<T> list) { size += list size; T n = list head; do { n list = this; n = n next; } while (n != list head); list head = null; list size = 0; return n; } public T rotate() { if( head ==null ) return null; return head = head getNextCircular(); } public void rotateTo(T head) { assert head!=null Cannot rotate to a null head ; assert head list == this Cannot rotate to a node not linked to this list ; this head = head; } public int size() { return size; } Override public String toString() { StringBuilder sb = new StringBuilder(); sb append( [ ); boolean first=true; T cur = getHead(); while( cur!=null ) { if( !first ) { sb append( , ); } sb append(cur); first=false; cur = cur getNext(); } sb append( ] ); return sb toString(); } public ArrayList<T> toArrayList() { ArrayList<T> rc = new ArrayList<T>(size); T cur = head; while( cur!=null ) { rc add(cur); cur = cur getNext(); } return rc; } }",1.0,
1369,1369,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\LongMarshaller.,LongMarshaller,"public class LongMarshaller implements Marshaller<Long> { public static final LongMarshaller INSTANCE = new LongMarshaller(); public void writePayload(Long object, DataOutput dataOut) throws IOException { dataOut writeLong(object); } public Long readPayload(DataInput dataIn) throws IOException { return dataIn readLong(); } public int getFixedSize() { return 8; } public Long deepCopy(Long source) { return source; } public boolean isDeepCopySupported() { return true; } }",1.0,
1370,1370,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\ObjectMarshaller.,ObjectMarshaller,"public class ObjectMarshaller extends VariableMarshaller<Object> { public void writePayload(Object object, DataOutput dataOut) throws IOException { ByteArrayOutputStream bytesOut = new ByteArrayOutputStream(); ObjectOutputStream objectOut = new ObjectOutputStream(bytesOut); objectOut writeObject(object); objectOut close(); byte[] data = bytesOut toByteArray(); dataOut writeInt(data length); dataOut write(data); } public Object readPayload(DataInput dataIn) throws IOException { int size = dataIn readInt(); byte[] data = new byte[size]; dataIn readFully(data); ByteArrayInputStream bytesIn = new ByteArrayInputStream(data); ObjectInputStream objectIn = new ObjectInputStream(bytesIn); try { return objectIn readObject(); } catch (ClassNotFoundException e) { throw new IOException(e getMessage()); } } }",1.0,
1371,1371,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\Scheduler.,Scheduler,"public final class Scheduler { public static final Timer CLOCK DAEMON = new Timer( KahaDB Scheduler , true); private static final HashMap<Runnable, TimerTask> TIMER TASKS = new HashMap<Runnable, TimerTask>(); private Scheduler() { } public static synchronized void executePeriodically(final Runnable task, long period) { TimerTask timerTask = new SchedulerTimerTask(task); CLOCK DAEMON schedule(timerTask, period, period); TIMER TASKS put(task, timerTask); } public static synchronized void cancel(Runnable task) { TimerTask ticket = TIMER TASKS remove(task); if (ticket != null) { ticket cancel(); CLOCK DAEMON purge(); } } public static void executeAfterDelay(final Runnable task, long redeliveryDelay) { TimerTask timerTask = new SchedulerTimerTask(task); CLOCK DAEMON schedule(timerTask, redeliveryDelay); } public static void shutdown() { CLOCK DAEMON cancel(); } }",1.0,
1372,1372,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\SchedulerTimerTask.,SchedulerTimerTask,public class SchedulerTimerTask extends TimerTask { private final Runnable task; public SchedulerTimerTask(Runnable task) { this task = task; } public void run() { this task run(); } },1.0,
1376,1376,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\SequenceSet.,SequenceIterator,private class SequenceIterator implements Iterator<Long> { private Sequence currentEntry; private long lastReturned = -1; public SequenceIterator() { currentEntry = getHead(); if (currentEntry != null) { lastReturned = currentEntry first - 1; } } public boolean hasNext() { return currentEntry != null; } public Long next() { if (currentEntry == null) { throw new NoSuchElementException(); } if(lastReturned < currentEntry first) { lastReturned = currentEntry first; if (currentEntry range() == 1) { currentEntry = currentEntry getNext(); } } else { lastReturned++; if (lastReturned == currentEntry last) { currentEntry = currentEntry getNext(); } } return lastReturned; } public void remove() { throw new UnsupportedOperationException(); } },1.0,
1377,1377,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\StringMarshaller.,StringMarshaller,"public class StringMarshaller implements Marshaller<String> { public static final StringMarshaller INSTANCE = new StringMarshaller(); public void writePayload(String object, DataOutput dataOut) throws IOException { dataOut writeUTF(object); } public String readPayload(DataInput dataIn) throws IOException { return dataIn readUTF(); } public int getFixedSize() { return -1; } public String deepCopy(String source) { return source; } public boolean isDeepCopySupported() { return true; } }",1.0,
1378,1378,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\util\VariableMarshaller.,VariableMarshaller,abstract public class VariableMarshaller<T> implements Marshaller<T> { public int getFixedSize() { return -1; } public boolean isDeepCopySupported() { return false; } public T deepCopy(T source) { throw new UnsupportedOperationException(); } },1.0,
1380,1380,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\plist\PListImpl.,Locator,class Locator { final String id; Locator(String id) { this id = id; } PListImpl plist() { return PListImpl this; } } Override,1.0,
1381,1381,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\plist\PListImpl.,PListIteratorImpl,"final class PListIteratorImpl implements PListIterator { final Iterator<Map Entry<String, Location>> iterator; final Transaction tx; PListIteratorImpl() throws IOException { tx = store pageFile tx(); synchronized (indexLock) { this iterator = iterator(tx); } } Override public boolean hasNext() { return iterator hasNext(); } Override public PListEntry next() { Map Entry<String, Location> entry = iterator next(); ByteSequence bs = null; try { bs = store getPayload(entry getValue()); } catch (IOException unexpected) { NoSuchElementException e = new NoSuchElementException(unexpected getLocalizedMessage()); e initCause(unexpected); throw e; } return new PListEntry(entry getKey(), bs, new Locator(entry getKey())); } Override public void remove() { try { synchronized (indexLock) { tx execute(new Transaction Closure<IOException>() { Override public void execute(Transaction tx) throws IOException { iterator remove(); } }); } } catch (IOException unexpected) { IllegalStateException e = new IllegalStateException(unexpected); e initCause(unexpected); throw e; } } public void release() { try { tx rollback(); } catch (IOException unexpected) { IllegalStateException e = new IllegalStateException(unexpected); e initCause(unexpected); throw e; } } }",1.0,
1382,1382,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\plist\PListStoreImpl.,PListStoreImpl,"public class PListStoreImpl extends ServiceSupport implements BrokerServiceAware, Runnable, PListStore, JournaledStore { static final Logger LOG = LoggerFactory getLogger(PListStoreImpl class); private static final int DATABASE LOCKED WAIT DELAY = 10 * 1000; static final int CLOSED STATE = 1; static final int OPEN STATE = 2; private File directory; PageFile pageFile; private Journal journal; private LockFile lockFile; private boolean failIfDatabaseIsLocked; private int journalMaxFileLength = Journal DEFAULT MAX FILE LENGTH; private int journalMaxWriteBatchSize = Journal DEFAULT MAX WRITE BATCH SIZE; private boolean enableIndexWriteAsync = false; private boolean initialized = false; private boolean lazyInit = true; MetaData metaData = new MetaData(this); final MetaDataMarshaller metaDataMarshaller = new MetaDataMarshaller(this); Map<String, PListImpl> persistentLists = new HashMap<String, PListImpl>(); final Object indexLock = new Object(); private Scheduler scheduler; private long cleanupInterval = 30000; private int indexPageSize = PageFile DEFAULT PAGE SIZE; private int indexCacheSize = PageFile DEFAULT PAGE CACHE SIZE; private int indexWriteBatchSize = PageFile DEFAULT WRITE BATCH SIZE; private boolean indexEnablePageCaching = true; public Object getIndexLock() { return indexLock; } Override public void setBrokerService(BrokerService brokerService) { this scheduler = brokerService getScheduler(); } public int getIndexPageSize() { return indexPageSize; } public int getIndexCacheSize() { return indexCacheSize; } public int getIndexWriteBatchSize() { return indexWriteBatchSize; } public void setIndexPageSize(int indexPageSize) { this indexPageSize = indexPageSize; } public void setIndexCacheSize(int indexCacheSize) { this indexCacheSize = indexCacheSize; } public void setIndexWriteBatchSize(int indexWriteBatchSize) { this indexWriteBatchSize = indexWriteBatchSize; } public boolean getIndexEnablePageCaching() { return indexEnablePageCaching; } public void setIndexEnablePageCaching(boolean indexEnablePageCaching) { this indexEnablePageCaching = indexEnablePageCaching; } protected class MetaData { protected MetaData(PListStoreImpl store) { this store = store; } private final PListStoreImpl store; Page<MetaData> page; BTreeIndex<String, PListImpl> lists; void createIndexes(Transaction tx) throws IOException { this lists = new BTreeIndex<String, PListImpl>(pageFile, tx allocate() getPageId()); } void load(Transaction tx) throws IOException { this lists setKeyMarshaller(StringMarshaller INSTANCE); this lists setValueMarshaller(new PListMarshaller(this store)); this lists load(tx); } void loadLists(Transaction tx, Map<String, PListImpl> lists) throws IOException { for (Iterator<Entry<String, PListImpl>> i = this lists iterator(tx); i hasNext();) { Entry<String, PListImpl> entry = i next(); entry getValue() load(tx); lists put(entry getKey(), entry getValue()); } } public void read(DataInput is) throws IOException { this lists = new BTreeIndex<String, PListImpl>(pageFile, is readLong()); this lists setKeyMarshaller(StringMarshaller INSTANCE); this lists setValueMarshaller(new PListMarshaller(this store)); } public void write(DataOutput os) throws IOException { os writeLong(this lists getPageId()); } } class MetaDataMarshaller extends VariableMarshaller<MetaData> { private final PListStoreImpl store; MetaDataMarshaller(PListStoreImpl store) { this store = store; } public MetaData readPayload(DataInput dataIn) throws IOException { MetaData rc = new MetaData(this store); rc read(dataIn); return rc; } public void writePayload(MetaData object, DataOutput dataOut) throws IOException { object write(dataOut); } } class PListMarshaller extends VariableMarshaller<PListImpl> { private final PListStoreImpl store; PListMarshaller(PListStoreImpl store) { this store = store; } public PListImpl readPayload(DataInput dataIn) throws IOException { PListImpl result = new PListImpl(this store); result read(dataIn); return result; } public void writePayload(PListImpl list, DataOutput dataOut) throws IOException { list write(dataOut); } } public Journal getJournal() { return this journal; } Override public File getDirectory() { return directory; } Override public void setDirectory(File directory) { this directory = directory; } public long size() { synchronized (this) { if (!initialized) { return 0; } } try { return journal getDiskSize() + pageFile getDiskSize(); } catch (IOException e) { throw new RuntimeException(e); } } Override public PListImpl getPList(final String name) throws Exception { if (!isStarted()) { throw new IllegalStateException( Not started ); } intialize(); synchronized (indexLock) { synchronized (this) { PListImpl result = this persistentLists get(name); if (result == null) { final PListImpl pl = new PListImpl(this); pl setName(name); getPageFile() tx() execute(new Transaction Closure<IOException>() { public void execute(Transaction tx) throws IOException { pl setHeadPageId(tx allocate() getPageId()); pl load(tx); metaData lists put(tx, name, pl); } }); result = pl; this persistentLists put(name, pl); } final PListImpl toLoad = result; getPageFile() tx() execute(new Transaction Closure<IOException>() { public void execute(Transaction tx) throws IOException { toLoad load(tx); } }); return result; } } } Override public boolean removePList(final String name) throws Exception { boolean result = false; synchronized (indexLock) { synchronized (this) { final PList pl = this persistentLists remove(name); result = pl != null; if (result) { getPageFile() tx() execute(new Transaction Closure<IOException>() { public void execute(Transaction tx) throws IOException { metaData lists remove(tx, name); pl destroy(); } }); } } } return result; } protected synchronized void intialize() throws Exception { if (isStarted()) { if (this initialized == false) { if (this directory == null) { this directory = new File(IOHelper getDefaultDataDirectory() + File pathSeparator + delayedDB ); } IOHelper mkdirs(this directory); lock(); this journal = new Journal(); this journal setDirectory(directory); this journal setMaxFileLength(getJournalMaxFileLength()); this journal setWriteBatchSize(getJournalMaxWriteBatchSize()); this journal start(); this pageFile = new PageFile(directory, tmpDB ); this pageFile setEnablePageCaching(getIndexEnablePageCaching()); this pageFile setPageSize(getIndexPageSize()); this pageFile setWriteBatchSize(getIndexWriteBatchSize()); this pageFile setPageCacheSize(getIndexCacheSize()); this pageFile load(); this pageFile tx() execute(new Transaction Closure<IOException>() { public void execute(Transaction tx) throws IOException { if (pageFile getPageCount() == 0) { Page<MetaData> page = tx allocate(); assert page getPageId() == 0; page set(metaData); metaData page = page; metaData createIndexes(tx); tx store(metaData page, metaDataMarshaller, true); } else { Page<MetaData> page = tx load(0, metaDataMarshaller); metaData = page get(); metaData page = page; } metaData load(tx); metaData loadLists(tx, persistentLists); } }); this pageFile flush(); if (cleanupInterval > 0) { if (scheduler == null) { scheduler = new Scheduler(PListStoreImpl class getSimpleName()); scheduler start(); } scheduler executePeriodically(this, cleanupInterval); } this initialized = true; LOG info(this + initialized ); } } } Override protected synchronized void doStart() throws Exception { if (!lazyInit) { intialize(); } LOG info(this + started ); } Override protected synchronized void doStop(ServiceStopper stopper) throws Exception { if (scheduler != null) { if (PListStoreImpl class getSimpleName() equals(scheduler getName())) { scheduler stop(); scheduler = null; } } for (PListImpl pl this persistentLists values()) { pl unload(null); } if (this pageFile != null) { this pageFile unload(); } if (this journal != null) { journal close(); } if (this lockFile != null) { this lockFile unlock(); } this lockFile = null; this initialized = false; LOG info(this + stopped ); } public void run() { try { if (isStopping()) { return; } final int lastJournalFileId = journal getLastAppendLocation() getDataFileId(); final Set<Integer> candidates = journal getFileMap() keySet(); LOG trace( Full gc candidate set + candidates); if (candidates size() > 1) { for (Iterator<Integer> iterator = candidates iterator(); iterator hasNext();) { if (iterator next() >= lastJournalFileId) { iterator remove(); } } List<PListImpl> plists = null; synchronized (indexLock) { synchronized (this) { plists = new ArrayList<PListImpl>(persistentLists values()); } } for (PListImpl list plists) { list claimFileLocations(candidates); if (isStopping()) { return; } LOG trace( Remaining gc candidate set after refs from + list getName() + + candidates); } LOG trace( GC Candidate set + candidates); this journal removeDataFiles(candidates); } } catch (IOException e) { LOG error( Exception on periodic cleanup + e, e); } } ByteSequence getPayload(Location location) throws IllegalStateException, IOException { ByteSequence result = null; result = this journal read(location); return result; } Location write(ByteSequence payload, boolean sync) throws IllegalStateException, IOException { return this journal write(payload, sync); } private void lock() throws IOException { if (lockFile == null) { File lockFileName = new File(directory, lock ); lockFile = new LockFile(lockFileName, true); if (failIfDatabaseIsLocked) { lockFile lock(); } else { while (true) { try { lockFile lock(); break; } catch (IOException e) { LOG info( Database + lockFileName + is locked waiting + (DATABASE LOCKED WAIT DELAY / 1000) + seconds for the database to be unlocked Reason + e); try { Thread sleep(DATABASE LOCKED WAIT DELAY); } catch (InterruptedException e1) { } } } } } } PageFile getPageFile() { this pageFile isLoaded(); return this pageFile; } public boolean isFailIfDatabaseIsLocked() { return failIfDatabaseIsLocked; } public void setFailIfDatabaseIsLocked(boolean failIfDatabaseIsLocked) { this failIfDatabaseIsLocked = failIfDatabaseIsLocked; } public int getJournalMaxFileLength() { return journalMaxFileLength; } public void setJournalMaxFileLength(int journalMaxFileLength) { this journalMaxFileLength = journalMaxFileLength; } public int getJournalMaxWriteBatchSize() { return journalMaxWriteBatchSize; } public void setJournalMaxWriteBatchSize(int journalMaxWriteBatchSize) { this journalMaxWriteBatchSize = journalMaxWriteBatchSize; } public boolean isEnableIndexWriteAsync() { return enableIndexWriteAsync; } public void setEnableIndexWriteAsync(boolean enableIndexWriteAsync) { this enableIndexWriteAsync = enableIndexWriteAsync; } public long getCleanupInterval() { return cleanupInterval; } public void setCleanupInterval(long cleanupInterval) { this cleanupInterval = cleanupInterval; } public boolean isLazyInit() { return lazyInit; } public void setLazyInit(boolean lazyInit) { this lazyInit = lazyInit; } Override public String toString() { String path = getDirectory() != null getDirectory() getAbsolutePath() DIRECTORY NOT SET ; return PListStore [ + path + ] ; } }",1.0,
1383,1383,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\plist\PListStoreImpl.,MetaData,"protected class MetaData { protected MetaData(PListStoreImpl store) { this store = store; } private final PListStoreImpl store; Page<MetaData> page; BTreeIndex<String, PListImpl> lists; void createIndexes(Transaction tx) throws IOException { this lists = new BTreeIndex<String, PListImpl>(pageFile, tx allocate() getPageId()); } void load(Transaction tx) throws IOException { this lists setKeyMarshaller(StringMarshaller INSTANCE); this lists setValueMarshaller(new PListMarshaller(this store)); this lists load(tx); } void loadLists(Transaction tx, Map<String, PListImpl> lists) throws IOException { for (Iterator<Entry<String, PListImpl>> i = this lists iterator(tx); i hasNext();) { Entry<String, PListImpl> entry = i next(); entry getValue() load(tx); lists put(entry getKey(), entry getValue()); } } public void read(DataInput is) throws IOException { this lists = new BTreeIndex<String, PListImpl>(pageFile, is readLong()); this lists setKeyMarshaller(StringMarshaller INSTANCE); this lists setValueMarshaller(new PListMarshaller(this store)); } public void write(DataOutput os) throws IOException { os writeLong(this lists getPageId()); } }",1.0,
1384,1384,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\plist\PListStoreImpl.,MetaDataMarshaller,"class MetaDataMarshaller extends VariableMarshaller<MetaData> { private final PListStoreImpl store; MetaDataMarshaller(PListStoreImpl store) { this store = store; } public MetaData readPayload(DataInput dataIn) throws IOException { MetaData rc = new MetaData(this store); rc read(dataIn); return rc; } public void writePayload(MetaData object, DataOutput dataOut) throws IOException { object write(dataOut); } }",1.0,
1385,1385,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\plist\PListStoreImpl.,PListMarshaller,"class PListMarshaller extends VariableMarshaller<PListImpl> { private final PListStoreImpl store; PListMarshaller(PListStoreImpl store) { this store = store; } public PListImpl readPayload(DataInput dataIn) throws IOException { PListImpl result = new PListImpl(this store); result read(dataIn); return result; } public void writePayload(PListImpl list, DataOutput dataOut) throws IOException { list write(dataOut); } }",1.0,
1386,1386,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\scheduler\JobImpl.,JobImpl,"public class JobImpl implements Job { private final JobLocation jobLocation; private final byte[] payload; protected JobImpl(JobLocation location,ByteSequence bs) { this jobLocation=location; this payload = new byte[bs getLength()]; System arraycopy(bs getData(), bs getOffset(), this payload, 0, bs getLength()); } public String getJobId() { return this jobLocation getJobId(); } public byte[] getPayload() { return this payload; } public long getPeriod() { return this jobLocation getPeriod(); } public int getRepeat() { return this jobLocation getRepeat(); } public long getStart() { return this jobLocation getStartTime(); } public long getDelay() { return this jobLocation getDelay(); } public String getCronEntry() { return this jobLocation getCronEntry(); } public String getNextExecutionTime() { return JobSupport getDateTime(this jobLocation getNextTime()); } public String getStartTime() { return JobSupport getDateTime(getStart()); } }",1.0,
1388,1388,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\scheduler\JobLocation.,JobLocationMarshaller,"static class JobLocationMarshaller extends VariableMarshaller<List<JobLocation>> { static final JobLocationMarshaller INSTANCE = new JobLocationMarshaller(); public List<JobLocation> readPayload(DataInput dataIn) throws IOException { List<JobLocation> result = new ArrayList<JobLocation>(); int size = dataIn readInt(); for (int i = 0; i < size; i++) { JobLocation jobLocation = new JobLocation(); jobLocation readExternal(dataIn); result add(jobLocation); } return result; } public void writePayload(List<JobLocation> value, DataOutput dataOut) throws IOException { dataOut writeInt(value size()); for (JobLocation jobLocation value) { jobLocation writeExternal(dataOut); } } }",1.0,
1391,1391,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\scheduler\JobSchedulerImpl.,ScheduleTime,static class ScheduleTime { private final int DEFAULT WAIT = 500; private final int DEFAULT NEW JOB WAIT = 100; private boolean newJob; private long waitTime = DEFAULT WAIT; private final Object mutex = new Object(); long getWaitTime() { return this waitTime; } void setWaitTime(long waitTime) { if (!this newJob) { this waitTime = waitTime > 0 waitTime DEFAULT WAIT; } } void pause() { synchronized (mutex) { try { mutex wait(this waitTime); } catch (InterruptedException e) { } } } void newJob() { this newJob = true; this waitTime = DEFAULT NEW JOB WAIT; wakeup(); } void clearNewJob() { this newJob = false; } void wakeup() { synchronized (this mutex) { mutex notifyAll(); } } },1.0,
1392,1392,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\scheduler\JobSchedulerStoreImpl.,JobSchedulerStoreImpl,"public class JobSchedulerStoreImpl extends ServiceSupport implements JobSchedulerStore { static final Logger LOG = LoggerFactory getLogger(JobSchedulerStoreImpl class); private static final int DATABASE LOCKED WAIT DELAY = 10 * 1000; public static final int CLOSED STATE = 1; public static final int OPEN STATE = 2; private File directory; PageFile pageFile; private Journal journal; protected AtomicLong journalSize = new AtomicLong(0); private LockFile lockFile; private boolean failIfDatabaseIsLocked; private int journalMaxFileLength = Journal DEFAULT MAX FILE LENGTH; private int journalMaxWriteBatchSize = Journal DEFAULT MAX WRITE BATCH SIZE; private boolean enableIndexWriteAsync = false; MetaData metaData = new MetaData(this); final MetaDataMarshaller metaDataMarshaller = new MetaDataMarshaller(this); Map<String, JobSchedulerImpl> schedulers = new HashMap<String, JobSchedulerImpl>(); protected class MetaData { protected MetaData(JobSchedulerStoreImpl store) { this store = store; } private final JobSchedulerStoreImpl store; Page<MetaData> page; BTreeIndex<Integer, Integer> journalRC; BTreeIndex<String, JobSchedulerImpl> storedSchedulers; void createIndexes(Transaction tx) throws IOException { this storedSchedulers = new BTreeIndex<String, JobSchedulerImpl>(pageFile, tx allocate() getPageId()); this journalRC = new BTreeIndex<Integer, Integer>(pageFile, tx allocate() getPageId()); } void load(Transaction tx) throws IOException { this storedSchedulers setKeyMarshaller(StringMarshaller INSTANCE); this storedSchedulers setValueMarshaller(new JobSchedulerMarshaller(this store)); this storedSchedulers load(tx); this journalRC setKeyMarshaller(IntegerMarshaller INSTANCE); this journalRC setValueMarshaller(IntegerMarshaller INSTANCE); this journalRC load(tx); } void loadScheduler(Transaction tx, Map<String, JobSchedulerImpl> schedulers) throws IOException { for (Iterator<Entry<String, JobSchedulerImpl>> i = this storedSchedulers iterator(tx); i hasNext();) { Entry<String, JobSchedulerImpl> entry = i next(); entry getValue() load(tx); schedulers put(entry getKey(), entry getValue()); } } public void read(DataInput is) throws IOException { this storedSchedulers = new BTreeIndex<String, JobSchedulerImpl>(pageFile, is readLong()); this storedSchedulers setKeyMarshaller(StringMarshaller INSTANCE); this storedSchedulers setValueMarshaller(new JobSchedulerMarshaller(this store)); this journalRC = new BTreeIndex<Integer, Integer>(pageFile, is readLong()); this journalRC setKeyMarshaller(IntegerMarshaller INSTANCE); this journalRC setValueMarshaller(IntegerMarshaller INSTANCE); } public void write(DataOutput os) throws IOException { os writeLong(this storedSchedulers getPageId()); os writeLong(this journalRC getPageId()); } } class MetaDataMarshaller extends VariableMarshaller<MetaData> { private final JobSchedulerStoreImpl store; MetaDataMarshaller(JobSchedulerStoreImpl store) { this store = store; } Override public MetaData readPayload(DataInput dataIn) throws IOException { MetaData rc = new MetaData(this store); rc read(dataIn); return rc; } Override public void writePayload(MetaData object, DataOutput dataOut) throws IOException { object write(dataOut); } } class ValueMarshaller extends VariableMarshaller<List<JobLocation>> { Override public List<JobLocation> readPayload(DataInput dataIn) throws IOException { List<JobLocation> result = new ArrayList<JobLocation>(); int size = dataIn readInt(); for (int i = 0; i < size; i++) { JobLocation jobLocation = new JobLocation(); jobLocation readExternal(dataIn); result add(jobLocation); } return result; } Override public void writePayload(List<JobLocation> value, DataOutput dataOut) throws IOException { dataOut writeInt(value size()); for (JobLocation jobLocation value) { jobLocation writeExternal(dataOut); } } } class JobSchedulerMarshaller extends VariableMarshaller<JobSchedulerImpl> { private final JobSchedulerStoreImpl store; JobSchedulerMarshaller(JobSchedulerStoreImpl store) { this store = store; } Override public JobSchedulerImpl readPayload(DataInput dataIn) throws IOException { JobSchedulerImpl result = new JobSchedulerImpl(this store); result read(dataIn); return result; } Override public void writePayload(JobSchedulerImpl js, DataOutput dataOut) throws IOException { js write(dataOut); } } Override public File getDirectory() { return directory; } Override public void setDirectory(File directory) { this directory = directory; } Override public long size() { if (!isStarted()) { return 0; } try { return journalSize get() + pageFile getDiskSize(); } catch (IOException e) { throw new RuntimeException(e); } } Override public JobScheduler getJobScheduler(final String name) throws Exception { JobSchedulerImpl result = this schedulers get(name); if (result == null) { final JobSchedulerImpl js = new JobSchedulerImpl(this); js setName(name); getPageFile() tx() execute(new Transaction Closure<IOException>() { Override public void execute(Transaction tx) throws IOException { js createIndexes(tx); js load(tx); metaData storedSchedulers put(tx, name, js); } }); result = js; this schedulers put(name, js); if (isStarted()) { result start(); } this pageFile flush(); } return result; } Override synchronized public boolean removeJobScheduler(final String name) throws Exception { boolean result = false; final JobSchedulerImpl js = this schedulers remove(name); result = js != null; if (result) { js stop(); getPageFile() tx() execute(new Transaction Closure<IOException>() { Override public void execute(Transaction tx) throws IOException { metaData storedSchedulers remove(tx, name); js destroy(tx); } }); } return result; } Override protected synchronized void doStart() throws Exception { if (this directory == null) { this directory = new File(IOHelper getDefaultDataDirectory() + File pathSeparator + delayedDB ); } IOHelper mkdirs(this directory); lock(); this journal = new Journal(); this journal setDirectory(directory); this journal setMaxFileLength(getJournalMaxFileLength()); this journal setWriteBatchSize(getJournalMaxWriteBatchSize()); this journal setSizeAccumulator(this journalSize); this journal start(); this pageFile = new PageFile(directory, scheduleDB ); this pageFile setWriteBatchSize(1); this pageFile load(); this pageFile tx() execute(new Transaction Closure<IOException>() { Override public void execute(Transaction tx) throws IOException { if (pageFile getPageCount() == 0) { Page<MetaData> page = tx allocate(); assert page getPageId() == 0; page set(metaData); metaData page = page; metaData createIndexes(tx); tx store(metaData page, metaDataMarshaller, true); } else { Page<MetaData> page = tx load(0, metaDataMarshaller); metaData = page get(); metaData page = page; } metaData load(tx); metaData loadScheduler(tx, schedulers); for (JobSchedulerImpl js schedulers values()) { try { js start(); } catch (Exception e) { JobSchedulerStoreImpl LOG error( Failed to load + js getName(), e); } } } }); this pageFile flush(); LOG info(this + started ); } Override protected synchronized void doStop(ServiceStopper stopper) throws Exception { for (JobSchedulerImpl js this schedulers values()) { js stop(); } if (this pageFile != null) { this pageFile unload(); } if (this journal != null) { journal close(); } if (this lockFile != null) { this lockFile unlock(); } this lockFile = null; LOG info(this + stopped ); } synchronized void incrementJournalCount(Transaction tx, Location location) throws IOException { int logId = location getDataFileId(); Integer val = this metaData journalRC get(tx, logId); int refCount = val != null val intValue() + 1 1; this metaData journalRC put(tx, logId, refCount); } synchronized void decrementJournalCount(Transaction tx, Location location) throws IOException { int logId = location getDataFileId(); int refCount = this metaData journalRC get(tx, logId); refCount--; if (refCount <= 0) { this metaData journalRC remove(tx, logId); Set<Integer> set = new HashSet<Integer>(); set add(logId); this journal removeDataFiles(set); } else { this metaData journalRC put(tx, logId, refCount); } } synchronized ByteSequence getPayload(Location location) throws IllegalStateException, IOException { ByteSequence result = null; result = this journal read(location); return result; } synchronized Location write(ByteSequence payload, boolean sync) throws IllegalStateException, IOException { return this journal write(payload, sync); } private void lock() throws IOException { if (lockFile == null) { File lockFileName = new File(directory, lock ); lockFile = new LockFile(lockFileName, true); if (failIfDatabaseIsLocked) { lockFile lock(); } else { while (true) { try { lockFile lock(); break; } catch (IOException e) { LOG info( Database + lockFileName + is locked waiting + (DATABASE LOCKED WAIT DELAY / 1000) + seconds for the database to be unlocked Reason + e); try { Thread sleep(DATABASE LOCKED WAIT DELAY); } catch (InterruptedException e1) { } } } } } } PageFile getPageFile() { this pageFile isLoaded(); return this pageFile; } public boolean isFailIfDatabaseIsLocked() { return failIfDatabaseIsLocked; } public void setFailIfDatabaseIsLocked(boolean failIfDatabaseIsLocked) { this failIfDatabaseIsLocked = failIfDatabaseIsLocked; } public int getJournalMaxFileLength() { return journalMaxFileLength; } public void setJournalMaxFileLength(int journalMaxFileLength) { this journalMaxFileLength = journalMaxFileLength; } public int getJournalMaxWriteBatchSize() { return journalMaxWriteBatchSize; } public void setJournalMaxWriteBatchSize(int journalMaxWriteBatchSize) { this journalMaxWriteBatchSize = journalMaxWriteBatchSize; } public boolean isEnableIndexWriteAsync() { return enableIndexWriteAsync; } public void setEnableIndexWriteAsync(boolean enableIndexWriteAsync) { this enableIndexWriteAsync = enableIndexWriteAsync; } Override public String toString() { return JobSchedulerStore + this directory; } }",1.0,
1394,1394,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\scheduler\JobSchedulerStoreImpl.,MetaDataMarshaller,"class MetaDataMarshaller extends VariableMarshaller<MetaData> { private final JobSchedulerStoreImpl store; MetaDataMarshaller(JobSchedulerStoreImpl store) { this store = store; } Override public MetaData readPayload(DataInput dataIn) throws IOException { MetaData rc = new MetaData(this store); rc read(dataIn); return rc; } Override public void writePayload(MetaData object, DataOutput dataOut) throws IOException { object write(dataOut); } }",1.0,
1395,1395,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\scheduler\JobSchedulerStoreImpl.,ValueMarshaller,"class ValueMarshaller extends VariableMarshaller<List<JobLocation>> { Override public List<JobLocation> readPayload(DataInput dataIn) throws IOException { List<JobLocation> result = new ArrayList<JobLocation>(); int size = dataIn readInt(); for (int i = 0; i < size; i++) { JobLocation jobLocation = new JobLocation(); jobLocation readExternal(dataIn); result add(jobLocation); } return result; } Override public void writePayload(List<JobLocation> value, DataOutput dataOut) throws IOException { dataOut writeInt(value size()); for (JobLocation jobLocation value) { jobLocation writeExternal(dataOut); } } }",1.0,
1396,1396,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\scheduler\JobSchedulerStoreImpl.,JobSchedulerMarshaller,"class JobSchedulerMarshaller extends VariableMarshaller<JobSchedulerImpl> { private final JobSchedulerStoreImpl store; JobSchedulerMarshaller(JobSchedulerStoreImpl store) { this store = store; } Override public JobSchedulerImpl readPayload(DataInput dataIn) throws IOException { JobSchedulerImpl result = new JobSchedulerImpl(this store); result read(dataIn); return result; } Override public void writePayload(JobSchedulerImpl js, DataOutput dataOut) throws IOException { js write(dataOut); } } Override",1.0,
1398,1398,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\util\LFUCache.,CacheNode,"private static class CacheNode<Key, Value> { public final Key k; public Value v; public int frequency; public CacheNode(Key k, Value v, int frequency) { this k = k; this v = v; this frequency = frequency; } }",1.0,
1399,1399,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\disk\index\BTreeIndexBenchMark.,BTreeIndexBenchMark,"public class BTreeIndexBenchMark extends IndexBenchmark { private NumberFormat nf; Override public void setUp() throws Exception { super setUp(); nf = NumberFormat getIntegerInstance(); nf setMinimumIntegerDigits(10); nf setGroupingUsed(false); } Override protected Index<String, Long> createIndex() throws Exception { Transaction tx = pf tx(); long id = tx allocate() getPageId(); tx commit(); BTreeIndex<String, Long> index = new BTreeIndex<String, Long>(pf, id); index setKeyMarshaller(StringMarshaller INSTANCE); index setValueMarshaller(LongMarshaller INSTANCE); return index; } Override protected void dumpIndex(Index<String, Long> index) throws IOException { Transaction tx = pf tx(); ((BTreeIndex)index) printStructure(tx, System out); } Override protected String key(long i) { return a-long-message-id-like-key +nf format(i); } }",1.0,
1402,1402,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\disk\index\HashIndexBenchMark.,HashIndexBenchMark,"public class HashIndexBenchMark extends IndexBenchmark { Override protected Index<String, Long> createIndex() throws Exception { Transaction tx = pf tx(); long id = tx allocate() getPageId(); tx commit(); HashIndex<String, Long> index = new HashIndex<String, Long>(pf, id); index setKeyMarshaller(StringMarshaller INSTANCE); index setValueMarshaller(LongMarshaller INSTANCE); return index; } }",1.0,
1403,1403,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\disk\index\HashIndexTest.,HashIndexTest,"public class HashIndexTest extends IndexTestSupport { Override protected Index<String, Long> createIndex() throws Exception { long id = tx allocate() getPageId(); tx commit(); HashIndex<String, Long> index = new HashIndex<String,Long>(pf, id); index setBinCapacity(12); index setKeyMarshaller(StringMarshaller INSTANCE); index setValueMarshaller(LongMarshaller INSTANCE); return index; } }",1.0,
1405,1405,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\disk\index\IndexBenchmark.,Producer,"class Producer extends Thread { private final String name; AtomicBoolean shutdown = new AtomicBoolean(); public Producer(String name) { super( Producer + name); this name = name; } public void shutdown() { shutdown set(true); } Override public void run() { try { Transaction tx = pf tx(); Index<String,Long> index = openIndex(name); long counter = 0; while (!shutdown get()) { long c = counter; String key = key(c); index put(tx, key, c); tx commit(); Thread yield(); onProduced(counter++); } } catch (Throwable e) { e printStackTrace(); } } public void onProduced(long counter) { } }",1.0,
1406,1406,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\disk\index\IndexBenchmark.,Consumer,"class Consumer extends Thread { private final String name; AtomicBoolean shutdown = new AtomicBoolean(); public Consumer(String name) { super( Consumer + name); this name = name; } public void shutdown() { shutdown set(true); } Override public void run() { try { Transaction tx = pf tx(); Index<String,Long> index = openIndex(name); long counter = 0; while (!shutdown get()) { long c = counter; String key = key(c); Long record = index get(tx, key); if (record != null) { if( index remove(tx, key) == null ) { System out print( Remove failed ); } tx commit(); onConsumed(counter++); } } } catch (Throwable e) { e printStackTrace(); } } public void onConsumed(long counter) { } }",1.0,
1407,1407,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\disk\index\IndexTestSupport.,IndexTestSupport,"public abstract class IndexTestSupport extends TestCase { private static final int COUNT = 10000; protected Index<String,Long> index; protected File directory; protected PageFile pf; protected Transaction tx; Override After public void tearDown() throws Exception { if( pf!=null ) { pf unload(); pf delete(); } } public File getDirectory() { if (directory != null) { IOHelper delete(directory); } directory = new File(IOHelper getDefaultDataDirectory() + System currentTimeMillis()); IOHelper delete(directory); return directory; } protected void createPageFileAndIndex(int pageSize) throws Exception { pf = new PageFile(getDirectory(), getClass() getName()); pf setPageSize(pageSize); pf load(); tx = pf tx(); this index = createIndex(); } abstract protected Index<String, Long> createIndex() throws Exception; Test(timeout=60000) public void testIndex() throws Exception { createPageFileAndIndex(500); this index load(tx); tx commit(); doInsert(COUNT); this index unload(tx); tx commit(); this index load(tx); tx commit(); checkRetrieve(COUNT); doRemove(COUNT); this index unload(tx); tx commit(); this index load(tx); tx commit(); doInsert(COUNT); doRemoveHalf(COUNT); doInsertHalf(COUNT); this index unload(tx); tx commit(); this index load(tx); tx commit(); checkRetrieve(COUNT); this index unload(tx); tx commit(); } void doInsert(int count) throws Exception { for (int i = 0; i < count; i++) { index put(tx, key(i), (long)i); tx commit(); } } protected String key(int i) { return key +i; } void checkRetrieve(int count) throws IOException { for (int i = 0; i < count; i++) { Long item = index get(tx, key(i)); assertNotNull( Key missing +key(i), item); } } void doRemoveHalf(int count) throws Exception { for (int i = 0; i < count; i++) { if (i % 2 == 0) { assertNotNull( Expected remove to return value for index +i, index remove(tx, key(i))); tx commit(); } } } void doInsertHalf(int count) throws Exception { for (int i = 0; i < count; i++) { if (i % 2 == 0) { index put(tx, key(i), (long)i); tx commit(); } } } void doRemove(int count) throws Exception { for (int i = 0; i < count; i++) { assertNotNull( Expected remove to return value for index +i, index remove(tx, key(i))); tx commit(); } for (int i = 0; i < count; i++) { Long item = index get(tx, key(i)); assertNull(item); } } void doRemoveBackwards(int count) throws Exception { for (int i = count - 1; i >= 0; i--) { index remove(tx, key(i)); tx commit(); } for (int i = 0; i < count; i++) { Long item = index get(tx, key(i)); assertNull(item); } } }",1.0,
1410,1410,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\disk\journal\JournalTest.,JournalTest,"public class JournalTest extends TestCase { protected static final int DEFAULT MAX BATCH SIZE = 1024 * 1024 * 4; Journal dataManager; File dir; Override public void setUp() throws Exception { dir = new File( target/tests/DataFileAppenderTest ); dir mkdirs(); dataManager = new Journal(); dataManager setDirectory(dir); configure(dataManager); dataManager start(); } protected void configure(Journal dataManager) { } Override public void tearDown() throws Exception { dataManager close(); IOHelper delete(dir); } public void testBatchWriteCallbackCompleteAfterTimeout() throws Exception { final int iterations = 10; final CountDownLatch latch = new CountDownLatch(iterations); ByteSequence data = new ByteSequence( DATA getBytes()); for (int i=0; i < iterations; i++) { dataManager write(data, new Runnable() { public void run() { latch countDown(); } }); } assertTrue( queued data is written , latch await(5, TimeUnit SECONDS)); } public void testBatchWriteCallbackCompleteAfterClose() throws Exception { final int iterations = 10; final CountDownLatch latch = new CountDownLatch(iterations); ByteSequence data = new ByteSequence( DATA getBytes()); for (int i=0; i<iterations; i++) { dataManager write(data, new Runnable() { public void run() { latch countDown(); } }); } dataManager close(); assertTrue( queued data is written , dataManager getInflightWrites() isEmpty()); assertEquals( none written , 0, latch getCount()); } public void testBatchWriteCompleteAfterClose() throws Exception { ByteSequence data = new ByteSequence( DATA getBytes()); final int iterations = 10; for (int i=0; i<iterations; i++) { dataManager write(data, false); } dataManager close(); assertTrue( queued data is written + dataManager getInflightWrites() size(), dataManager getInflightWrites() isEmpty()); } public void testBatchWriteToMaxMessageSize() throws Exception { final int iterations = 4; final CountDownLatch latch = new CountDownLatch(iterations); Runnable done = new Runnable() { public void run() { latch countDown(); } }; int messageSize = DEFAULT MAX BATCH SIZE / iterations; byte[] message = new byte[messageSize]; ByteSequence data = new ByteSequence(message); for (int i=0; i< iterations; i++) { dataManager write(data, done); } assertTrue( all callbacks complete , latch await(10, TimeUnit SECONDS)); } public void testNoBatchWriteWithSync() throws Exception { ByteSequence data = new ByteSequence( DATA getBytes()); final int iterations = 10; for (int i=0; i<iterations; i++) { dataManager write(data, true); assertTrue( queued data is written , dataManager getInflightWrites() isEmpty()); } } }",1.0,
1411,1411,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\disk\page\PageFileTest.,PageFileTest,"public class PageFileTest extends TestCase { public void testCRUD() throws IOException { PageFile pf = new PageFile(new File( target/test-data ), getName()); pf delete(); pf load(); HashSet<String> expected = new HashSet<String>(); Transaction tx = pf tx(); for (int i = 0; i < 100; i++) { Page<String> page = tx allocate(); assertEquals(Page PAGE FREE TYPE, page getType()); String t = page + i; expected add(t); page set(t); tx store(page, StringMarshaller INSTANCE, false); tx commit(); } pf unload(); pf load(); tx = pf tx(); HashSet<String> actual = new HashSet<String>(); for (Page<String> page tx) { tx load(page, StringMarshaller INSTANCE); actual add(page get()); } assertEquals(expected, actual); for (int i = 0; i < 100; i++) { if (i % 2 == 0) { break; } String t = page + i; expected remove(t); } for (Page<String> page tx) { tx load(page, StringMarshaller INSTANCE); if (!expected contains(page get())) { tx free(page); } } tx commit(); pf unload(); pf load(); tx = pf tx(); actual clear(); for (Page<String> page tx) { tx load(page, StringMarshaller INSTANCE); actual add((String)page get()); } assertEquals(expected, actual); HashSet<String> t = expected; expected = new HashSet<String>(); for (String s t) { expected add(s + updated ); } for (Page<String> page tx) { tx load(page, StringMarshaller INSTANCE); page set(page get() + updated ); tx store(page, StringMarshaller INSTANCE, false); } tx commit(); pf unload(); pf load(); tx = pf tx(); actual clear(); for (Page<String> page tx) { tx load(page, StringMarshaller INSTANCE); actual add(page get()); } assertEquals(expected, actual); pf unload(); } public void testStreams() throws IOException { PageFile pf = new PageFile(new File( target/test-data ), getName()); pf delete(); pf load(); Transaction tx = pf tx(); Page page = tx allocate(); tx commit(); OutputStream pos = tx openOutputStream(page, true); DataOutputStream os = new DataOutputStream(pos); for (int i = 0; i < 10000; i++) { os writeUTF( Test string + i); } os close(); tx commit(); pf unload(); pf load(); tx = pf tx(); InputStream pis = tx openInputStream(page); DataInputStream is = new DataInputStream(pis); for (int i = 0; i < 10000; i++) { assertEquals( Test string + i, is readUTF()); } assertEquals(-1, is read()); is close(); pf unload(); } public void testAddRollback() throws IOException { PageFile pf = new PageFile(new File( target/test-data ), getName()); pf delete(); pf load(); HashSet<String> expected = new HashSet<String>(); Transaction tx = pf tx(); for (int i = 0; i < 100; i++) { Page<String> page = tx allocate(); assertEquals(Page PAGE FREE TYPE, page getType()); String t = page + i; page set(t); tx store(page, StringMarshaller INSTANCE, false); if (i % 2 == 0) { expected add(t); tx commit(); } else { tx rollback(); } } pf unload(); pf load(); tx = pf tx(); HashSet<String> actual = new HashSet<String>(); for (Page<String> page tx) { tx load(page, StringMarshaller INSTANCE); actual add(page get()); } assertEquals(expected, actual); } }",1.0,
1413,1413,data,\smellybot\activemq\activemq-kahadb-store\src\test\java\org\apache\activemq\store\kahadb\plist\PListImplTest.,PListImplTest,public class PListImplTest extends PListTestSupport { Override protected PListStoreImpl createPListStore() { return new PListStoreImpl(); } protected PListStore createConcurrentAddIteratePListStore() { PListStoreImpl store = createPListStore(); store setIndexPageSize(2 * 1024); store setJournalMaxFileLength(1024 * 1024); store setCleanupInterval(-1); store setIndexEnablePageCaching(false); store setIndexWriteBatchSize(100); return store; } Override protected PListStore createConcurrentAddRemovePListStore() { PListStoreImpl store = createPListStore(); store setCleanupInterval(400); store setJournalMaxFileLength(1024*5); store setLazyInit(false); return store; } Override protected PListStore createConcurrentAddRemoveWithPreloadPListStore() { PListStoreImpl store = createPListStore(); store setJournalMaxFileLength(1024*5); store setCleanupInterval(5000); store setIndexWriteBatchSize(500); return store; } Override protected PListStore createConcurrentAddIterateRemovePListStore(boolean enablePageCache) { PListStoreImpl store = createPListStore(); store setIndexEnablePageCaching(enablePageCache); store setIndexPageSize(2*1024); return store; } },1.0,
1415,1415,data,\smellybot\activemq\activemq-karaf\src\main\java\org\apache\activemq\karaf\commands\ActiveMQCommand.,ActiveMQActionPreparator,"class ActiveMQActionPreparator extends DefaultActionPreparator { Override public boolean prepare(Action action, CommandSession session, List<Object> params) throws Exception { Map<Argument, Field> arguments = new HashMap<Argument, Field>(); List<Argument> orderedArguments = new ArrayList<Argument>(); for (Class type = action getClass(); type != null; type = type getSuperclass()) { for (Field field type getDeclaredFields()) { Argument argument = field getAnnotation(Argument class); if (argument != null) { arguments put(argument, field); int index = argument index(); while (orderedArguments size() <= index) { orderedArguments add(null); } if (orderedArguments get(index) != null) { throw new IllegalArgumentException( Duplicate argument index + index); } orderedArguments set(index, argument); } } } for (int i = 0; i < orderedArguments size(); i++) { if (orderedArguments get(i) == null) { throw new IllegalArgumentException( Missing argument for index + i); } } Map<Argument, Object> argumentValues = new HashMap<Argument, Object>(); int argIndex = 0; for (Iterator<Object> it = params iterator(); it hasNext();) { Object param = it next(); if (argIndex >= orderedArguments size()) { throw new IllegalArgumentException( Too many arguments specified ); } Argument argument = orderedArguments get(argIndex); if (!argument multiValued()) { argIndex++; } if (argument multiValued()) { List<Object> l = (List<Object>) argumentValues get(argument); if (l == null) { l = new ArrayList<Object>(); argumentValues put(argument, l); } l add(param); } else { argumentValues put(argument, param); } } for (Map Entry<Argument, Object> entry argumentValues entrySet()) { Field field = arguments get(entry getKey()); Object value = convert(action, session, entry getValue(), field getGenericType()); field setAccessible(true); field set(action, value); } return true; } Override protected Object convert(Action action, CommandSession commandSession, Object o, Type type) throws Exception { return blueprintConverter convert(o, new GenericType(type)); } } Override",1.0,
1416,1416,data,\smellybot\activemq\activemq-karaf\src\main\java\org\apache\activemq\karaf\commands\ActiveMQCommandSupport.,ActiveMQCommandSupport,"public class ActiveMQCommandSupport extends OsgiCommandSupport { private Command command; Argument(index=0, multiValued=true, required=true) private ArrayList<String> arguments = new ArrayList<String>(); protected Object doExecute() throws Exception { CommandContext context2 = new CommandContext(); context2 setFormatter(new CommandShellOutputFormatter(System out)); Command currentCommand = command getClass() newInstance(); try { currentCommand setCommandContext(context2); arguments add( --jmxlocal ); currentCommand execute(arguments); return null; } catch (Throwable e) { Throwable cur = e; while (cur getCause() != null) { cur = cur getCause(); } if (cur instanceof java net ConnectException) { context2 print( n + Could not connect to JMX server This command requires that the remote JMX server be enabled n + This is typically done by adding the following JVM arguments n + -Dcom sun management jmxremote port=1099 -Dcom sun management jmxremote authenticate=false n + -Dcom sun management jmxremote ssl=false n + n + The connection error was + cur + n ); } else { if (e instanceof Exception) { throw (Exception)e; } else { throw new RuntimeException(e); } } } return null; } public Command getCommand() { return command; } public void setCommand(Command command) { this command = command; } public static String[] toStringArray(Object args[]) { String strings[] = new String[args length]; for(int i = 0; i < args length; i++) { strings[i] = String valueOf(args[i]); } return strings; } }",1.0,
1417,1417,data,\smellybot\activemq\activemq-karaf-itest\src\test\java\org\apache\activemq\karaf\itest\AbstractFeatureTest.,AbstractFeatureTest,"public abstract class AbstractFeatureTest { private static final Logger LOG = LoggerFactory getLogger(AbstractFeatureTest class); private static final long ASSERTION TIMEOUT = 20000L; private static final long COMMAND TIMEOUT = 10000L; public static final String USER = karaf ; public static final String PASSWORD = karaf ; static String basedir; static { try { File location = new File(AbstractFeatureTest class getProtectionDomain() getCodeSource() getLocation() getFile()); basedir = new File(location, / ) getCanonicalPath(); } catch (IOException e) { throw new RuntimeException(e); } } Inject protected BundleContext bundleContext; Before public void setUp() throws Exception { } After public void tearDown() throws Exception { } ProbeBuilder public TestProbeBuilder probeConfiguration(TestProbeBuilder probe) { probe setHeader(Constants DYNAMICIMPORT PACKAGE, *,org ops4j pax exam options *,org apache felix service *;status=provisional ); return probe; } Inject CommandProcessor commandProcessor; ExecutorService executor = Executors newCachedThreadPool(); protected String executeCommand(final String command, final Long timeout, final Boolean silent) { String response; final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream(); final PrintStream printStream = new PrintStream(byteArrayOutputStream); final CommandSession commandSession = commandProcessor createSession(System in, printStream, printStream); commandSession put( APPLICATION , System getProperty( karaf name , root )); commandSession put( USER , USER); FutureTask<String> commandFuture = new FutureTask<String>( new Callable<String>() { public String call() { try { if (!silent) { System out println(command); System out flush(); } commandSession execute(command); } catch (Exception e) { e printStackTrace(System err); } printStream flush(); return byteArrayOutputStream toString(); } }); try { executor submit(commandFuture); response = commandFuture get(timeout, TimeUnit MILLISECONDS); } catch (Exception e) { e printStackTrace(System err); response = SHELL COMMAND TIMED OUT ; } return response; } protected String executeCommand(final String command) { return executeCommand(command, COMMAND TIMEOUT, false); } public static String karafVersion() { return System getProperty( karafVersion , 2 3 0 ); } public static String activemqVersion() { Package p = Package getPackage( org apache activemq ); String version=null; if (p != null) { version = p getImplementationVersion(); } return System getProperty( activemqVersion , version); } public static UrlReference getActiveMQKarafFeatureUrl() { String type = xml/features ; return mavenBundle() groupId( org apache activemq ) artifactId( activemq-karaf ) versionAsInProject() type(type); } public static UrlReference getKarafFeatureUrl() { LOG info( *** The karaf version is + karafVersion() + *** ); String type = xml/features ; return mavenBundle() groupId( org apache karaf assemblies features ) artifactId( standard ) version(karafVersion()) type(type); } public static Option[] configureBrokerStart(Option[] existingOptions) { existingOptions = append( replaceConfigurationFile( etc/org apache activemq server-default cfg , new File(basedir + /src/test/resources/org/apache/activemq/karaf/itest/org apache activemq server-default cfg )), existingOptions); return append( replaceConfigurationFile( etc/activemq xml , new File(basedir + /src/test/resources/org/apache/activemq/karaf/itest/activemq xml )), existingOptions); } public static Option[] append(Option toAdd, Option[] existingOptions) { ArrayList<Option> newOptions = new ArrayList<Option>(); newOptions addAll(Arrays asList(existingOptions)); newOptions add(toAdd); return newOptions toArray(new Option[]{}); } public static Option[] configure(String features) { ArrayList<String> f = new ArrayList<String>(); f addAll(Arrays asList(features)); Option[] options = new Option[]{ karafDistributionConfiguration() frameworkUrl( maven() groupId( org apache karaf ) artifactId( apache-karaf ) type( tar gz ) version(karafVersion())) karafVersion(karafVersion()) name( Apache Karaf ) unpackDirectory(new File( target/paxexam/unpack/ )), KarafDistributionOption keepRuntimeFolder(), replaceConfigurationFile( etc/config properties , new File(basedir+ /src/test/resources/org/apache/activemq/karaf/itest/config properties )), replaceConfigurationFile( etc/custom properties , new File(basedir+ /src/test/resources/org/apache/activemq/karaf/itest/custom properties )), scanFeatures(getActiveMQKarafFeatureUrl(), f toArray(new String[f size()]))}; return options; } protected boolean withinReason(Callable<Boolean> callable) throws Throwable { long max = System currentTimeMillis() + ASSERTION TIMEOUT; while (true) { try { return callable call(); } catch (Throwable t) { if (System currentTimeMillis() < max) { TimeUnit SECONDS sleep(1); continue; } else { throw t; } } } } }",1.0,
1420,1420,data,\smellybot\activemq\activemq-karaf-itest\src\test\java\org\apache\activemq\karaf\itest\ActiveMQClientBundleTest.,ActiveMQClientBundleTest,public class ActiveMQClientBundleTest extends AbstractFeatureTest { Configuration public static Option[] configure() { return configure( activemq-client ); } Test public void test() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(); factory getBrokerURL(); } },1.0,
1421,1421,data,\smellybot\activemq\activemq-leveldb-store\src\main\java\org\apache\activemq\store\leveldb\LevelDBPersistenceAdapter.,LevelDBPersistenceAdapter,public class LevelDBPersistenceAdapter extends LevelDBStore { },1.0,
1422,1422,data,\smellybot\activemq\activemq-leveldb-store\src\main\scala\org\apache\activemq\leveldb\IndexManifestDTO.,IndexManifestDTO,public class IndexManifestDTO { XmlAttribute(name = snapshot id ) public long snapshot id; XmlAttribute(name = current manifest ) public String current manifest; XmlAttribute(name = file ) public Set<String> files = new HashSet<String>(); },1.0,
1423,1423,data,\smellybot\activemq\activemq-leveldb-store\src\test\scala\org\apache\activemq\leveldb\LevelDBPlistTest.,LevelDBPlistTest,public class LevelDBPlistTest extends PListTestSupport { Override protected LevelDBStore createPListStore() { return new LevelDBStore(); } protected LevelDBStore createConcurrentAddIteratePListStore() { return new LevelDBStore(); } Override protected LevelDBStore createConcurrentAddRemovePListStore() { return new LevelDBStore(); } Override protected LevelDBStore createConcurrentAddRemoveWithPreloadPListStore() { return new LevelDBStore(); } Override protected LevelDBStore createConcurrentAddIterateRemovePListStore(boolean enablePageCache) { return new LevelDBStore(); } },1.0,
1424,1424,data,\smellybot\activemq\activemq-log4j-appender\src\main\java\org\apache\activemq\util\JmsLogAppender.,JmsLogAppender,"public class JmsLogAppender extends JmsLogAppenderSupport { private String uri = tcp private String userName; private String password; public JmsLogAppender() { } public String getUri() { return uri; } public void setUri(String uri) { this uri = uri; } public String getUserName() { return userName; } public void setUserName(String userName) { this userName = userName; } public String getPassword() { return password; } public void setPassword(String password) { this password = password; } protected Connection createConnection() throws JMSException { if (userName != null) { try { return ActiveMQConnection makeConnection(userName, password, uri); } catch (URISyntaxException e) { throw new JMSException( Unable to connect to a broker using + userName + userName + password + password + uri + uri + error - + e getMessage()); } } else { try { return ActiveMQConnection makeConnection(uri); } catch (URISyntaxException e) { throw new JMSException( Unable to connect to a broker using + uri + uri + error - + e getMessage()); } } } }",1.0,
1425,1425,data,\smellybot\activemq\activemq-log4j-appender\src\main\java\org\apache\activemq\util\JmsLogAppenderSupport.,JmsLogAppenderSupport,"public abstract class JmsLogAppenderSupport extends AppenderSkeleton { public static final int JMS PUBLISH ERROR CODE = 61616; private Connection connection; private Session session; private MessageProducer producer; private boolean allowTextMessages = true; private String subjectPrefix = log4j ; public JmsLogAppenderSupport() { } public Connection getConnection() throws JMSException, NamingException { if (connection == null) { connection = createConnection(); } return connection; } public void setConnection(Connection connection) { this connection = connection; } public Session getSession() throws JMSException, NamingException { if (session == null) { session = createSession(); } return session; } public void setSession(Session session) { this session = session; } public MessageProducer getProducer() throws JMSException, NamingException { if (producer == null) { producer = createProducer(); } return producer; } public void setProducer(MessageProducer producer) { this producer = producer; } public void close() { List<JMSException> errors = new ArrayList<JMSException>(); if (producer != null) { try { producer close(); } catch (JMSException e) { errors add(e); } } if (session != null) { try { session close(); } catch (JMSException e) { errors add(e); } } if (connection != null) { try { connection close(); } catch (JMSException e) { errors add(e); } } for (Iterator<JMSException> iter = errors iterator(); iter hasNext();) { JMSException e = iter next(); getErrorHandler() error( Error closing JMS resources + e, e, JMS PUBLISH ERROR CODE); } } public boolean requiresLayout() { return false; } public void activateOptions() { try { getProducer(); } catch (Exception e) { getErrorHandler() error( Could not create JMS resources + e, e, JMS PUBLISH ERROR CODE); } } protected abstract Connection createConnection() throws JMSException, NamingException; protected Session createSession() throws JMSException, NamingException { return getConnection() createSession(false, Session AUTO ACKNOWLEDGE); } protected MessageProducer createProducer() throws JMSException, NamingException { return getSession() createProducer(null); } private static final ThreadLocal<Object> APPENDING = new ThreadLocal<Object>(); protected void append(LoggingEvent event) { if( APPENDING get()==null ) { APPENDING set(true); try { Message message = createMessage(event); Destination destination = getDestination(event); getProducer() send(destination, message); } catch (Exception e) { getErrorHandler() error( Could not send message due to + e, e, JMS PUBLISH ERROR CODE, event); } finally { APPENDING remove(); } } } protected Message createMessage(LoggingEvent event) throws JMSException, NamingException { Message answer = null; Object value = event getMessage(); if (allowTextMessages && value instanceof String) { answer = getSession() createTextMessage((String)value); } else { answer = getSession() createObjectMessage((Serializable)value); } answer setStringProperty( level , event getLevel() toString()); answer setIntProperty( levelInt , event getLevel() toInt()); answer setStringProperty( threadName , event getThreadName()); return answer; } protected Destination getDestination(LoggingEvent event) throws JMSException, NamingException { String name = subjectPrefix + event getLoggerName(); return getSession() createTopic(name); } }",1.0,
1426,1426,data,\smellybot\activemq\activemq-log4j-appender\src\main\java\org\apache\activemq\util\JndiJmsLogAppender.,JndiJmsLogAppender,"public class JndiJmsLogAppender extends JmsLogAppenderSupport { private String jndiName; private String userName; private String password; private String initialContextFactoryName; private String providerURL; private String urlPkgPrefixes; private String securityPrincipalName; private String securityCredentials; public JndiJmsLogAppender() { } public String getJndiName() { return jndiName; } public void setJndiName(String jndiName) { this jndiName = jndiName; } public String getUserName() { return userName; } public void setUserName(String userName) { this userName = userName; } public String getPassword() { return password; } public void setPassword(String password) { this password = password; } public String getInitialContextFactoryName() { return initialContextFactoryName; } public void setInitialContextFactoryName(String initialContextFactoryName) { this initialContextFactoryName = initialContextFactoryName; } public String getProviderURL() { return providerURL; } public void setProviderURL(String providerURL) { this providerURL = providerURL; } public String getUrlPkgPrefixes() { return urlPkgPrefixes; } public void setUrlPkgPrefixes(String urlPkgPrefixes) { this urlPkgPrefixes = urlPkgPrefixes; } public String getSecurityPrincipalName() { return securityPrincipalName; } public void setSecurityPrincipalName(String securityPrincipalName) { this securityPrincipalName = securityPrincipalName; } public String getSecurityCredentials() { return securityCredentials; } public void setSecurityCredentials(String securityCredentials) { this securityCredentials = securityCredentials; } protected Connection createConnection() throws JMSException, NamingException { InitialContext context = createInitialContext(); LogLog debug( Looking up ConnectionFactory with jndiName + jndiName); ConnectionFactory factory = (ConnectionFactory)context lookup(jndiName); if (factory == null) { throw new JMSException( No such ConnectionFactory for name + jndiName); } if (userName != null) { return factory createConnection(userName, password); } else { return factory createConnection(); } } protected InitialContext createInitialContext() throws NamingException { if (initialContextFactoryName == null) { return new InitialContext(); } else { Hashtable<String, String> env = new Hashtable<String, String>(); env put(Context INITIAL CONTEXT FACTORY, initialContextFactoryName); if (providerURL != null) { env put(Context PROVIDER URL, providerURL); } else { LogLog warn( You have set InitialContextFactoryName option but not the + ProviderURL This is likely to cause problems ); } if (urlPkgPrefixes != null) { env put(Context URL PKG PREFIXES, urlPkgPrefixes); } if (securityPrincipalName != null) { env put(Context SECURITY PRINCIPAL, securityPrincipalName); if (securityCredentials != null) { env put(Context SECURITY CREDENTIALS, securityCredentials); } else { LogLog warn( You have set SecurityPrincipalName option but not the + SecurityCredentials This is likely to cause problems ); } } LogLog debug( Looking up JNDI context with environment + env); return new InitialContext(env); } } }",1.0,
1428,1428,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTCodec.,MQTTCodec,"public class MQTTCodec { TcpTransport transport; DataByteArrayOutputStream currentCommand = new DataByteArrayOutputStream(); boolean processedHeader = false; String action; byte header; int contentLength = -1; int previousByte = -1; int payLoadRead = 0; public MQTTCodec(TcpTransport transport) { this transport = transport; } public void parse(DataByteArrayInputStream input, int readSize) throws Exception { int i = 0; byte b; while (i++ < readSize) { b = input readByte(); if (!processedHeader && b == 0) { previousByte = 0; continue; } if (!processedHeader) { i += processHeader(b, input); if (contentLength == 0) { processCommand(); } } else { if (contentLength == -1) { if (b == 0) { processCommand(); } else { currentCommand write(b); } } else { if (payLoadRead == contentLength) { processCommand(); i += processHeader(b, input); } else { currentCommand write(b); payLoadRead++; } } } previousByte = b; } if (processedHeader && payLoadRead == contentLength) { processCommand(); } } private int processHeader(byte header, DataByteArrayInputStream input) { this header = header; byte digit; int multiplier = 1; int read = 0; int length = 0; do { digit = input readByte(); length += (digit & 0x7F) * multiplier; multiplier <<= 7; read++; } while ((digit & 0x80) != 0); contentLength = length; processedHeader = true; return read; } private void processCommand() throws Exception { MQTTFrame frame = new MQTTFrame(currentCommand toBuffer() deepCopy()) header(header); transport doConsume(frame); processedHeader = false; currentCommand reset(); contentLength = -1; payLoadRead = 0; } public static String commandType(byte header) throws IOException, JMSException { byte messageType = (byte) ((header & 0xF0) >>> 4); switch (messageType) { case PINGREQ TYPE { return PINGREQ ; } case CONNECT TYPE { return CONNECT ; } case DISCONNECT TYPE { return DISCONNECT ; } case SUBSCRIBE TYPE { return SUBSCRIBE ; } case UNSUBSCRIBE TYPE { return UNSUBSCRIBE ; } case PUBLISH TYPE { return PUBLISH ; } case PUBACK TYPE { return PUBACK ; } case PUBREC TYPE { return PUBREC ; } case PUBREL TYPE { return PUBREL ; } case PUBCOMP TYPE { return PUBCOMP ; } default return UNKNOWN ; } } }",1.0,
1429,1429,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTInactivityMonitor.,MQTTInactivityMonitor,"public class MQTTInactivityMonitor extends TransportFilter { private static final Logger LOG = LoggerFactory getLogger(MQTTInactivityMonitor class); private static final long DEFAULT CHECK TIME MILLS = 30000; private static ThreadPoolExecutor ASYNC TASKS; private static int CHECKER COUNTER; private static Timer READ CHECK TIMER; private final AtomicBoolean monitorStarted = new AtomicBoolean(false); private final AtomicBoolean failed = new AtomicBoolean(false); private final AtomicBoolean commandReceived = new AtomicBoolean(true); private final AtomicBoolean inReceive = new AtomicBoolean(false); private final AtomicInteger lastReceiveCounter = new AtomicInteger(0); private final ReentrantLock sendLock = new ReentrantLock(); private SchedulerTimerTask readCheckerTask; private long readCheckTime = DEFAULT CHECK TIME MILLS; private long initialDelayTime = DEFAULT CHECK TIME MILLS; private boolean keepAliveResponseRequired; private MQTTProtocolConverter protocolConverter; private final Runnable readChecker = new Runnable() { long lastRunTime; public void run() { long now = System currentTimeMillis(); long elapsed = (now - lastRunTime); if (lastRunTime != 0 && LOG isDebugEnabled()) { LOG debug( + elapsed + ms elapsed since last read check ); } if (!allowReadCheck(elapsed)) { LOG debug( Aborting read check Not enough time elapsed since last read check ); return; } lastRunTime = now; readCheck(); } }; private boolean allowReadCheck(long elapsed) { return elapsed > (readCheckTime * 9 / 10); } public MQTTInactivityMonitor(Transport next, WireFormat wireFormat) { super(next); } public void start() throws Exception { next start(); startMonitorThread(); } public void stop() throws Exception { stopMonitorThread(); next stop(); } final void readCheck() { int currentCounter = next getReceiveCounter(); int previousCounter = lastReceiveCounter getAndSet(currentCounter); if (inReceive get() || currentCounter != previousCounter) { if (LOG isTraceEnabled()) { LOG trace( A receive is in progress ); } return; } if (!commandReceived get() && monitorStarted get() && !ASYNC TASKS isTerminating()) { if (LOG isDebugEnabled()) { LOG debug( No message received since last read check for + toString() + ! Throwing InactivityIOException ); } ASYNC TASKS execute(new Runnable() { public void run() { if (protocolConverter != null) { protocolConverter onTransportError(); } onException(new InactivityIOException( Channel was inactive for too (> + readCheckTime + ) long + next getRemoteAddress())); } }); } else { if (LOG isTraceEnabled()) { LOG trace( Message received since last read check, resetting flag ); } } commandReceived set(false); } public void onCommand(Object command) { commandReceived set(true); inReceive set(true); try { transportListener onCommand(command); } finally { inReceive set(false); } } public void oneway(Object o) throws IOException { this sendLock lock(); try { doOnewaySend(o); } finally { this sendLock unlock(); } } private void doOnewaySend(Object command) throws IOException { if (failed get()) { throw new InactivityIOException( Cannot send, channel has already failed + next getRemoteAddress()); } next oneway(command); } public void onException(IOException error) { if (failed compareAndSet(false, true)) { stopMonitorThread(); transportListener onException(error); } } public long getReadCheckTime() { return readCheckTime; } public void setReadCheckTime(long readCheckTime) { this readCheckTime = readCheckTime; } public long getInitialDelayTime() { return initialDelayTime; } public void setInitialDelayTime(long initialDelayTime) { this initialDelayTime = initialDelayTime; } public boolean isKeepAliveResponseRequired() { return this keepAliveResponseRequired; } public void setKeepAliveResponseRequired(boolean value) { this keepAliveResponseRequired = value; } public boolean isMonitorStarted() { return this monitorStarted get(); } public void setProtocolConverter(MQTTProtocolConverter protocolConverter) { this protocolConverter = protocolConverter; } public MQTTProtocolConverter getProtocolConverter() { return protocolConverter; } synchronized void startMonitorThread() { if (protocolConverter == null) { return; } if (monitorStarted get()) { return; } if (readCheckTime > 0) { readCheckerTask = new SchedulerTimerTask(readChecker); } if (readCheckTime > 0) { monitorStarted set(true); synchronized (AbstractInactivityMonitor class) { if (CHECKER COUNTER == 0) { ASYNC TASKS = createExecutor(); READ CHECK TIMER = new Timer( InactivityMonitor ReadCheck , true); } CHECKER COUNTER++; if (readCheckTime > 0) { READ CHECK TIMER schedule(readCheckerTask, initialDelayTime, readCheckTime); } } } } synchronized void stopMonitorThread() { if (monitorStarted compareAndSet(true, false)) { if (readCheckerTask != null) { readCheckerTask cancel(); } synchronized (AbstractInactivityMonitor class) { READ CHECK TIMER purge(); CHECKER COUNTER--; if (CHECKER COUNTER == 0) { READ CHECK TIMER cancel(); READ CHECK TIMER = null; ThreadPoolUtils shutdown(ASYNC TASKS); ASYNC TASKS = null; } } } } private ThreadFactory factory = new ThreadFactory() { public Thread newThread(Runnable runnable) { Thread thread = new Thread(runnable, MQTTInactivityMonitor Async Task + runnable); thread setDaemon(true); return thread; } }; private ThreadPoolExecutor createExecutor() { ThreadPoolExecutor exec = new ThreadPoolExecutor(0, Integer MAX VALUE, 60, TimeUnit SECONDS, new SynchronousQueue<Runnable>(), factory); exec allowCoreThreadTimeOut(true); return exec; } }",1.0,
1430,1430,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTNIOSSLTransport.,MQTTNIOSSLTransport,"public class MQTTNIOSSLTransport extends NIOSSLTransport { MQTTCodec codec; public MQTTNIOSSLTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException { super(wireFormat, socketFactory, remoteLocation, localLocation); } public MQTTNIOSSLTransport(WireFormat wireFormat, Socket socket) throws IOException { super(wireFormat, socket); } Override protected void initializeStreams() throws IOException { codec = new MQTTCodec(this); super initializeStreams(); if (inputBuffer position() != 0 && inputBuffer hasRemaining()) { serviceRead(); } } Override protected void processCommand(ByteBuffer plain) throws Exception { byte[] fill = new byte[plain remaining()]; plain get(fill); DataByteArrayInputStream dis = new DataByteArrayInputStream(fill); codec parse(dis, fill length); } }",1.0,
1431,1431,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTNIOSSLTransportFactory.,MQTTNIOSSLTransportFactory,"public class MQTTNIOSSLTransportFactory extends MQTTNIOTransportFactory { SSLContext context; Override protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpTransportServer(this, location, serverSocketFactory) { protected Transport createTransport(Socket socket, WireFormat format) throws IOException { MQTTNIOSSLTransport transport = new MQTTNIOSSLTransport(format, socket); if (context != null) { transport setSslContext(context); } return transport; } }; } Override protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new MQTTNIOSSLTransport(wf, socketFactory, location, localLocation); } Override public TransportServer doBind(URI location) throws IOException { if (SslContext getCurrentSslContext() != null) { try { context = SslContext getCurrentSslContext() getSSLContext(); } catch (Exception e) { throw new IOException(e); } } return super doBind(location); } }",1.0,
1433,1433,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTNIOTransportFactory.,MQTTNIOTransportFactory,"public class MQTTNIOTransportFactory extends NIOTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return mqtt ; } protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpTransportServer(this, location, serverSocketFactory) { protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new MQTTNIOTransport(format, socket); } }; } protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new MQTTNIOTransport(wf, socketFactory, location, localLocation); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); MutexTransport mutex = transport narrow(MutexTransport class); if (mutex != null) { mutex setSyncOnCommand(true); } return transport; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new MQTTTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } protected Transport createInactivityMonitor(Transport transport, WireFormat format) { MQTTInactivityMonitor monitor = new MQTTInactivityMonitor(transport, format); MQTTTransportFilter filter = transport narrow(MQTTTransportFilter class); filter setInactivityMonitor(monitor); return monitor; } }",1.0,
1435,1435,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTProtocolException.,MQTTProtocolException,"public class MQTTProtocolException extends IOException { private static final long serialVersionUID = -2869735532997332242L; private final boolean fatal; public MQTTProtocolException() { this(null); } public MQTTProtocolException(String s) { this(s, false); } public MQTTProtocolException(String s, boolean fatal) { this(s, fatal, null); } public MQTTProtocolException(String s, boolean fatal, Throwable cause) { super(s); this fatal = fatal; initCause(cause); } public boolean isFatal() { return fatal; } }",1.0,
1436,1436,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTSslTransportFactory.,MQTTSslTransportFactory,"public class MQTTSslTransportFactory extends SslTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return mqtt ; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new MQTTTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); MutexTransport mutex = transport narrow(MutexTransport class); if (mutex != null) { mutex setSyncOnCommand(true); } return transport; } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } protected Transport createInactivityMonitor(Transport transport, WireFormat format) { MQTTInactivityMonitor monitor = new MQTTInactivityMonitor(transport, format); MQTTTransportFilter filter = transport narrow(MQTTTransportFilter class); filter setInactivityMonitor(monitor); return monitor; } }",1.0,
1438,1438,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTTransportFactory.,MQTTTransportFactory,"public class MQTTTransportFactory extends TcpTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return mqtt ; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new MQTTTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); MutexTransport mutex = transport narrow(MutexTransport class); if (mutex != null) { mutex setSyncOnCommand(true); } return transport; } Override protected Transport createInactivityMonitor(Transport transport, WireFormat format) { MQTTInactivityMonitor monitor = new MQTTInactivityMonitor(transport, format); MQTTTransportFilter filter = transport narrow(MQTTTransportFilter class); filter setInactivityMonitor(monitor); return monitor; } }",1.0,
1441,1441,data,\smellybot\activemq\activemq-mqtt\src\main\java\org\apache\activemq\transport\mqtt\MQTTWireFormatFactory.,MQTTWireFormatFactory,public class MQTTWireFormatFactory implements WireFormatFactory { public WireFormat createWireFormat() { return new MQTTWireFormat(); } },1.0,
1442,1442,data,\smellybot\activemq\activemq-mqtt\src\test\java\org\apache\activemq\transport\mqtt\AbstractMQTTTest.,AbstractMQTTTest,"public abstract class AbstractMQTTTest { protected TransportConnector mqttConnector; public static final int AT MOST ONCE =0; public static final int AT LEAST ONCE = 1; public static final int EXACTLY ONCE =2; public File basedir() throws IOException { ProtectionDomain protectionDomain = getClass() getProtectionDomain(); return new File(new File(protectionDomain getCodeSource() getLocation() getPath()), / ) getCanonicalFile(); } protected BrokerService brokerService; protected LinkedList<Throwable> exceptions = new LinkedList<Throwable>(); protected int numberOfMessages; AutoFailTestSupport autoFailTestSupport = new AutoFailTestSupport() {}; Before public void startBroker() throws Exception { autoFailTestSupport startAutoFailThread(); exceptions clear(); brokerService = new BrokerService(); brokerService setPersistent(false); brokerService setAdvisorySupport(false); brokerService setUseJmx(false); this numberOfMessages = 3000; } After public void stopBroker() throws Exception { if (brokerService != null) { brokerService stop(); } autoFailTestSupport stopAutoFailThread(); } Test public void testSendAndReceiveMQTT() throws Exception { addMQTTConnector(); brokerService start(); final MQTTClientProvider subscriptionProvider = getMQTTClientProvider(); initializeConnection(subscriptionProvider); subscriptionProvider subscribe( foo/bah ,AT MOST ONCE); final CountDownLatch latch = new CountDownLatch(numberOfMessages); Thread thread = new Thread(new Runnable() { public void run() { for (int i = 0; i < numberOfMessages; i++){ try { byte[] payload = subscriptionProvider receive(10000); assertNotNull( Should get a message , payload); latch countDown(); } catch (Exception e) { e printStackTrace(); break; } } } }); thread start(); final MQTTClientProvider publishProvider = getMQTTClientProvider(); initializeConnection(publishProvider); for (int i = 0; i < numberOfMessages; i++){ String payload = Message + i; publishProvider publish( foo/bah ,payload getBytes(),AT LEAST ONCE); } latch await(10, TimeUnit SECONDS); assertEquals(0, latch getCount()); subscriptionProvider disconnect(); publishProvider disconnect(); } Test public void testSendAtMostOnceReceiveExactlyOnce() throws Exception { addMQTTConnector(); brokerService start(); final MQTTClientProvider provider = getMQTTClientProvider(); initializeConnection(provider); provider subscribe( foo ,EXACTLY ONCE); for (int i = 0; i < numberOfMessages; i++) { String payload = Test Message + i; provider publish( foo , payload getBytes(), AT MOST ONCE); byte[] message = provider receive(5000); assertNotNull( Should get a message , message); assertEquals(payload, new String(message)); } provider disconnect(); } Test public void testSendAtLeastOnceReceiveExactlyOnce() throws Exception { addMQTTConnector(); brokerService start(); final MQTTClientProvider provider = getMQTTClientProvider(); initializeConnection(provider); provider subscribe( foo ,EXACTLY ONCE); for (int i = 0; i < numberOfMessages; i++) { String payload = Test Message + i; provider publish( foo , payload getBytes(), AT LEAST ONCE); byte[] message = provider receive(5000); assertNotNull( Should get a message , message); assertEquals(payload, new String(message)); } provider disconnect(); } Test public void testSendAtLeastOnceReceiveAtMostOnce() throws Exception { addMQTTConnector(); brokerService start(); final MQTTClientProvider provider = getMQTTClientProvider(); initializeConnection(provider); provider subscribe( foo ,AT MOST ONCE); for (int i = 0; i < numberOfMessages; i++) { String payload = Test Message + i; provider publish( foo , payload getBytes(), AT LEAST ONCE); byte[] message = provider receive(5000); assertNotNull( Should get a message , message); assertEquals(payload, new String(message)); } provider disconnect(); } Test public void testSendAndReceiveAtMostOnce() throws Exception { addMQTTConnector(); brokerService start(); final MQTTClientProvider provider = getMQTTClientProvider(); initializeConnection(provider); provider subscribe( foo ,AT MOST ONCE); for (int i = 0; i < numberOfMessages; i++) { String payload = Test Message + i; provider publish( foo , payload getBytes(), AT MOST ONCE); byte[] message = provider receive(5000); assertNotNull( Should get a message , message); assertEquals(payload, new String(message)); } provider disconnect(); } Test public void testSendAndReceiveAtLeastOnce() throws Exception { addMQTTConnector(); brokerService start(); final MQTTClientProvider provider = getMQTTClientProvider(); initializeConnection(provider); provider subscribe( foo ,AT LEAST ONCE); for (int i = 0; i < numberOfMessages; i++) { String payload = Test Message + i; provider publish( foo , payload getBytes(), AT LEAST ONCE); byte[] message = provider receive(5000); assertNotNull( Should get a message , message); assertEquals(payload, new String(message)); } provider disconnect(); } Test public void testSendAndReceiveExactlyOnce() throws Exception { addMQTTConnector(); brokerService start(); final MQTTClientProvider publisher = getMQTTClientProvider(); initializeConnection(publisher); final MQTTClientProvider subscriber = getMQTTClientProvider(); initializeConnection(subscriber); subscriber subscribe( foo ,EXACTLY ONCE); for (int i = 0; i < numberOfMessages; i++) { String payload = Test Message + i; publisher publish( foo , payload getBytes(), EXACTLY ONCE); byte[] message = subscriber receive(5000); assertNotNull( Should get a message , message); assertEquals(payload, new String(message)); } subscriber disconnect(); publisher disconnect(); } Test public void testSendAndReceiveLargeMessages() throws Exception { byte[] payload = new byte[1024 * 32]; for (int i = 0; i < payload length; i++){ payload[i] = 2 ; } addMQTTConnector(); brokerService start(); final MQTTClientProvider publisher = getMQTTClientProvider(); initializeConnection(publisher); final MQTTClientProvider subscriber = getMQTTClientProvider(); initializeConnection(subscriber); subscriber subscribe( foo ,AT LEAST ONCE); for (int i = 0; i < 10; i++) { publisher publish( foo , payload, AT LEAST ONCE); byte[] message = subscriber receive(5000); assertNotNull( Should get a message , message); assertArrayEquals(payload, message); } subscriber disconnect(); publisher disconnect(); } Test public void testSendMQTTReceiveJMS() throws Exception { addMQTTConnector(); TransportConnector openwireTransport = brokerService addConnector( tcp brokerService start(); final MQTTClientProvider provider = getMQTTClientProvider(); initializeConnection(provider); final String DESTINATION NAME = foo * ; ActiveMQConnection activeMQConnection = (ActiveMQConnection) new ActiveMQConnectionFactory(openwireTransport getConnectUri()) createConnection(); activeMQConnection start(); Session s = activeMQConnection createSession(false, Session AUTO ACKNOWLEDGE); javax jms Topic jmsTopic = s createTopic(DESTINATION NAME); MessageConsumer consumer = s createConsumer(jmsTopic); for (int i = 0; i < numberOfMessages; i++) { String payload = Test Message + i; provider publish( foo/bah , payload getBytes(), AT LEAST ONCE); ActiveMQMessage message = (ActiveMQMessage) consumer receive(5000); assertNotNull( Should get a message , message); ByteSequence bs = message getContent(); assertEquals(payload, new String(bs data, bs offset, bs length)); } activeMQConnection close(); provider disconnect(); } Test public void testSendJMSReceiveMQTT() throws Exception { addMQTTConnector(); TransportConnector openwireTransport = brokerService addConnector( tcp brokerService start(); final MQTTClientProvider provider = getMQTTClientProvider(); initializeConnection(provider); ActiveMQConnection activeMQConnection = (ActiveMQConnection) new ActiveMQConnectionFactory(openwireTransport getConnectUri()) createConnection(); activeMQConnection start(); Session s = activeMQConnection createSession(false, Session AUTO ACKNOWLEDGE); javax jms Topic jmsTopic = s createTopic( foo far ); MessageProducer producer = s createProducer(jmsTopic); provider subscribe( foo/+ ,AT MOST ONCE); for (int i = 0; i < numberOfMessages; i++) { String payload = This is Test Message + i; TextMessage sendMessage = s createTextMessage(payload); producer send(sendMessage); byte[] message = provider receive(5000); assertNotNull( Should get a message , message); assertEquals(payload, new String(message)); } provider disconnect(); activeMQConnection close(); } protected String getProtocolScheme() { return mqtt ; } protected void addMQTTConnector() throws Exception { addMQTTConnector( ); } protected void addMQTTConnector(String config) throws Exception { mqttConnector= brokerService addConnector(getProtocolScheme()+ } protected void initializeConnection(MQTTClientProvider provider) throws Exception { provider connect( tcp } protected abstract MQTTClientProvider getMQTTClientProvider(); }",1.0,
1445,1445,data,\smellybot\activemq\activemq-mqtt\src\test\java\org\apache\activemq\transport\mqtt\MQTTSSLTest.,DefaultTrustManager,"static class DefaultTrustManager implements X509TrustManager { public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { } public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { } public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; } }",1.0,
1446,1446,data,\smellybot\activemq\activemq-mqtt\src\test\java\org\apache\activemq\transport\mqtt\MQTTTest.,MQTTTest,"public class MQTTTest extends AbstractMQTTTest { Test public void testPingKeepsInactivityMonitorAlive() throws Exception { addMQTTConnector(); brokerService start(); MQTT mqtt = createMQTTConnection(); mqtt setKeepAlive((short)2); final BlockingConnection connection = mqtt blockingConnection(); connection connect(); assertTrue( KeepAlive didn t work properly , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return connection isConnected(); } })); connection disconnect(); } Test public void testTurnOffInactivityMonitor()throws Exception{ addMQTTConnector( transport useInactivityMonitor=false ); brokerService start(); MQTT mqtt = createMQTTConnection(); mqtt setKeepAlive((short)2); final BlockingConnection connection = mqtt blockingConnection(); connection connect(); assertTrue( KeepAlive didn t work properly , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return connection isConnected(); } })); connection disconnect(); } Test public void testDefaultKeepAliveWhenClientSpecifiesZero() throws Exception { addMQTTConnector( transport defaultKeepAlive=2000 ); brokerService start(); MQTT mqtt = createMQTTConnection(); mqtt setKeepAlive((short)0); final BlockingConnection connection = mqtt blockingConnection(); connection connect(); assertTrue( KeepAlive didn t work properly , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return connection isConnected(); } })); } protected String getProtocolScheme() { return mqtt ; } protected void addMQTTConnector() throws Exception { addMQTTConnector( ); } protected void addMQTTConnector(String config) throws Exception { mqttConnector= brokerService addConnector(getProtocolScheme()+ } Override protected MQTTClientProvider getMQTTClientProvider() { return new FuseMQQTTClientProvider(); } protected MQTT createMQTTConnection() throws Exception { MQTT mqtt = new MQTT(); mqtt setHost( localhost , mqttConnector getConnectUri() getPort()); mqtt setConnectAttemptsMax(0); mqtt setReconnectAttemptsMax(0); return mqtt; } }",1.0,
1447,1447,data,\smellybot\activemq\activemq-mqtt\src\test\java\org\apache\activemq\transport\mqtt\MTQQNioTest.,MTQQNioTest,"public class MTQQNioTest extends MQTTTest { Override protected String getProtocolScheme() { return mqtt+nio ; } Test public void testPingOnMQTTNIO() throws Exception { addMQTTConnector( maxInactivityDuration=-1 ); brokerService start(); MQTT mqtt = createMQTTConnection(); mqtt setKeepAlive((short)2); final BlockingConnection connection = mqtt blockingConnection(); connection connect(); assertTrue( KeepAlive didn t work properly , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return connection isConnected(); } })); connection disconnect(); } }",1.0,
1448,1448,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\CGeneratorTask.,CGeneratorTask,"public class CGeneratorTask extends Task { int version = 2; File source = new File( ); File target = new File( ); public static void main(String[] args) { Project project = new Project(); project init(); CGeneratorTask generator = new CGeneratorTask(); generator setProject(project); if (args length > 0) { generator version = Integer parseInt(args[0]); } if (args length > 1) { generator source = new File(args[1]); } if (args length > 2) { generator target = new File(args[2]); } generator execute(); } public void execute() throws BuildException { try { String sourceDir = source + /src/main/java ; System out println( Parsing source files in + sourceDir); JamServiceFactory jamServiceFactory = JamServiceFactory getInstance(); JamServiceParams params = jamServiceFactory createServiceParams(); File[] dirs = new File[] { new File(sourceDir) }; params includeSourcePattern(dirs, **/* java ); JamService jam = jamServiceFactory createService(params); { CHeadersGenerator script = new CHeadersGenerator(); script setJam(jam); script setTargetDir(target + /src/libopenwire ); script setOpenwireVersion(version); script run(); } { CSourcesGenerator script = new CSourcesGenerator(); script setJam(jam); script setTargetDir(target + /src/libopenwire ); script setOpenwireVersion(version); script run(); } } catch (Exception e) { throw new BuildException(e); } } public int getVersion() { return version; } public void setVersion(int version) { this version = version; } public File getSource() { return source; } public void setSource(File basedir) { this source = basedir; } public File getTarget() { return target; } public void setTarget(File target) { this target = target; } }",1.0,
1449,1449,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\CHeadersGenerator.,CHeadersGenerator,"public class CHeadersGenerator extends SingleSourceGenerator { protected String targetDir = /src/lib/openwire ; public Object run() { filePostFix = h ; if (destFile == null) { destFile = new File(targetDir + /ow commands v + getOpenwireVersion() + h ); } return super run(); } public String getTargetDir() { return targetDir; } public void setTargetDir(String targetDir) { this targetDir = targetDir; } protected void generateLicence(PrintWriter out) { out println( ); } String changeCase(String value) { StringBuffer b = new StringBuffer(); char[] cs = value toCharArray(); for (int i = 0; i < cs length; i++) { char c = cs[i]; if (Character isUpperCase((char)c)) { b append( ); b append(Character toLowerCase((char)c)); } else { b append(c); } } return b toString(); } String toPropertyCase(String value) { return value substring(0, 1) toLowerCase() + value substring(1); } protected List<JClass> sort(List source) { LinkedHashMap<JClass, JClass> rc = new LinkedHashMap<JClass, JClass>(); ArrayList classes = new ArrayList(source); Collections sort(classes, new Comparator() { public int compare(Object o1, Object o2) { JClass c1 = (JClass)o1; JClass c2 = (JClass)o2; return c1 getSimpleName() compareTo(c2 getSimpleName()); } }); HashMap<JClass, JClass> classNames = new HashMap<JClass, JClass>(); for (Iterator iter = classes iterator(); iter hasNext();) { JClass c = (JClass)iter next(); classNames put(c, c); } for (Iterator iter = classes iterator(); iter hasNext();) { JClass c = (JClass)iter next(); if (!classNames containsKey(c getSuperclass())) { rc put(c, c); } } for (Iterator iter = classes iterator(); iter hasNext();) { JClass c = (JClass)iter next(); if (!rc containsKey(c)) { rc put(c, c); } } return new ArrayList<JClass>(rc keySet()); } void generateFields(PrintWriter out, JClass jclass) { if (jclass getSuperclass() == null || jclass getSuperclass() getSimpleName() equals( Object )) { out println( ); out println( ow byte structType; ); } else { generateFields(out, jclass getSuperclass()); } ArrayList<JProperty> properties = new ArrayList<JProperty>(); jclass getDeclaredProperties(); for (int i = 0; i < jclass getDeclaredProperties() length; i++) { JProperty p = jclass getDeclaredProperties()[i]; if (isValidProperty(p)) { properties add(p); } } for (Iterator<JProperty> iter = properties iterator(); iter hasNext();) { JProperty property = iter next(); JAnnotation annotation = property getGetter() getAnnotation( openwire property ); String name = toPropertyCase(property getSimpleName()); String type = property getType() getQualifiedName(); if (type equals( boolean )) { out println( ow + type + + name + ; ); } else if (type equals( byte )) { out println( ow + type + + name + ; ); } else if (type equals( char )) { out println( ow + type + + name + ; ); } else if (type equals( short )) { out println( ow + type + + name + ; ); } else if (type equals( int )) { out println( ow + type + + name + ; ); } else if (type equals( long )) { out println( ow + type + + name + ; ); } else if (type equals( byte[] )) { out println( ow byte array * + name + ; ); } else if (type equals( org apache activeio packet ByteSequence )) { out println( ow byte array * + name + ; ); } else if (type equals( org apache activeio packet ByteSequence )) { out println( ow byte array * + name + ; ); } else if (type equals( java lang String )) { out println( ow string * + name + ; ); } else { if (property getType() isArrayType()) { out println( ow DataStructure array * + name + ; ); } else if (isThrowable(property getType())) { out println( ow throwable * + name + ; ); } else { out println( struct ow + property getType() getSimpleName() + * + name + ; ); } } } } protected void generateSetup(PrintWriter out) { generateLicence(out); out println( ); out println( ); out println( ); out println( ifndef OW COMMANDS V + openwireVersion + H ); out println( define OW COMMANDS V + openwireVersion + H ); out println( ); out println( include ow h ); out println( ); out println( ifdef cplusplus ); out println( extern C { ); out println( endif ); out println( ); out println( define OW WIREFORMAT VERSION + openwireVersion + ); out println( define OW WIREFORMAT STACK TRACE MASK 0x00000001; ); out println( define OW WIREFORMAT TCP NO DELAY MASK 0x00000002; ); out println( define OW WIREFORMAT CACHE MASK 0x00000004; ); out println( define OW WIREFORMAT COMPRESSION MASK 0x00000008; ); for (Iterator iterator = sortedClasses iterator(); iterator hasNext();) { JClass jclass = (JClass)iterator next(); String name = jclass getSimpleName(); String type = ( ow + name) toUpperCase() + TYPE ; if (!isAbstract(jclass)) { out println( define + type + + getOpenWireOpCode(jclass)); } } out println( ); out println( apr status t ow bitmarshall(ow bit buffer *buffer, ow DataStructure *object); ); out println( apr status t ow marshall(ow byte buffer *buffer, ow DataStructure *object); ); } protected void generateFile(PrintWriter out) throws Exception { String structName = jclass getSimpleName(); out println( ); out println( typedef struct ow + structName + { ); generateFields(out, jclass); out println( ); out println( } ow + structName + ; ); out println( ow + structName + *ow + structName + create(apr pool t *pool); ); out println( ow boolean ow is a + structName + (ow DataStructure *object); ); } protected void generateTearDown(PrintWriter out) { out println( ); out println( ifdef cplusplus ); out println( } ); out println( endif ); out println( ); out println( endif ); } }",1.0,
1451,1451,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\CppGeneratorTask.,CppGeneratorTask,"public class CppGeneratorTask extends Task { int version = 2; File source = new File( ); File target = new File( ); public static void main(String[] args) { Project project = new Project(); project init(); CppGeneratorTask generator = new CppGeneratorTask(); generator setProject(project); if (args length > 0) { generator version = Integer parseInt(args[0]); } if (args length > 1) { generator source = new File(args[1]); } if (args length > 2) { generator target = new File(args[2]); } generator execute(); } public void execute() throws BuildException { try { String sourceDir = source + /src/main/java ; System out println( Parsing source files in + sourceDir); JamServiceFactory jamServiceFactory = JamServiceFactory getInstance(); JamServiceParams params = jamServiceFactory createServiceParams(); File[] dirs = new File[] { new File(sourceDir) }; params includeSourcePattern(dirs, **/* java ); JamService jam = jamServiceFactory createService(params); { CppClassesGenerator script = new CppClassesGenerator(); script setJam(jam); script setTargetDir(target + /src/main/cpp ); script setOpenwireVersion(version); script run(); } { CppHeadersGenerator script = new CppHeadersGenerator(); script setJam(jam); script setTargetDir(target + /src/main/cpp ); script setOpenwireVersion(version); script run(); } { CppMarshallingHeadersGenerator script = new CppMarshallingHeadersGenerator(); script setJam(jam); script setTargetDir(target + /src ); script setOpenwireVersion(version); script run(); } { CppMarshallingClassesGenerator script = new CppMarshallingClassesGenerator(); script setJam(jam); script setTargetDir(target + /src ); script setOpenwireVersion(version); script run(); } } catch (Exception e) { throw new BuildException(e); } } public int getVersion() { return version; } public void setVersion(int version) { this version = version; } public File getSource() { return source; } public void setSource(File basedir) { this source = basedir; } public File getTarget() { return target; } public void setTarget(File target) { this target = target; } }",1.0,
1453,1453,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\CppMarshallingClassesGenerator.,CppMarshallingClassesGenerator,"public class CppMarshallingClassesGenerator extends CppMarshallingHeadersGenerator { protected String getFilePostFix() { return cpp ; } protected void generateUnmarshalBodyForProperty(PrintWriter out, JProperty property, JAnnotationValue size) { out print( ); String setter = property getSetter() getSimpleName(); String type = property getType() getSimpleName(); if (type equals( boolean )) { out println( info + setter + ( bs readBoolean() ); ); } else if (type equals( byte )) { out println( info + setter + ( DataStreamMarshaller readByte(dataIn) ); ); } else if (type equals( char )) { out println( info + setter + ( DataStreamMarshaller readChar(dataIn) ); ); } else if (type equals( short )) { out println( info + setter + ( DataStreamMarshaller readShort(dataIn) ); ); } else if (type equals( int )) { out println( info + setter + ( DataStreamMarshaller readInt(dataIn) ); ); } else if (type equals( long )) { out println( info + setter + ( UnmarshalLong(wireFormat, dataIn, bs) ); ); } else if (type equals( String )) { out println( info + setter + ( readString(dataIn, bs) ); ); } else if (type equals( byte[] ) || type equals( ByteSequence )) { if (size != null) { out println( info + setter + ( readBytes(dataIn, + size asInt() + ) ); ); } else { out println( info + setter + ( readBytes(dataIn, bs readBoolean()) ); ); } } else if (isThrowable(property getType())) { out println( info + setter + ( unmarshalBrokerError(wireFormat, dataIn, bs) ); ); } else if (isCachedProperty(property)) { out println( info + setter + ( ( + type + ) unmarshalCachedObject(wireFormat, dataIn, bs) ); ); } else { out println( info + setter + ( ( + type + ) unmarshalNestedObject(wireFormat, dataIn, bs) ); ); } } protected void generateUnmarshalBodyForArrayProperty(PrintWriter out, JProperty property, JAnnotationValue size) { JClass propertyType = property getType(); String arrayType = propertyType getArrayComponentType() getSimpleName(); String setter = property getGetter() getSimpleName(); out println(); if (size != null) { out println( { ); out println( + arrayType + [] value = new + arrayType + [ + size asInt() + ]; ); out println( + for( int i=0; i < + size asInt() + ; i++ ) { ); out println( value[i] = ( + arrayType + ) unmarshalNestedObject(wireFormat,dataIn, bs); ); out println( } ); out println( info + setter + ( value ); ); out println( } ); } else { out println( if (bs readBoolean()) { ); out println( short size = DataStreamMarshaller readShort(dataIn); ); out println( + arrayType + [] value = new + arrayType + [size]; ); out println( for( int i=0; i < size; i++ ) { ); out println( value[i] = ( + arrayType + ) unmarshalNestedObject(wireFormat,dataIn, bs); ); out println( } ); out println( info + setter + ( value ); ); out println( } ); out println( else { ); out println( info + setter + ( null ); ); out println( } ); } } protected int generateMarshal1Body(PrintWriter out) { List properties = getProperties(); int baseSize = 0; for (Iterator iter = properties iterator(); iter hasNext();) { JProperty property = (JProperty)iter next(); JAnnotation annotation = property getAnnotation( openwire property ); JAnnotationValue size = annotation getValue( size ); JClass propertyType = property getType(); String type = propertyType getSimpleName(); String getter = info + property getGetter() getSimpleName() + () ; out print(indent); if (type equals( boolean )) { out println( bs writeBoolean( + getter + ); ); } else if (type equals( byte )) { baseSize += 1; } else if (type equals( char )) { baseSize += 1; } else if (type equals( short )) { baseSize += 1; } else if (type equals( int )) { baseSize += 1; } else if (type equals( long )) { out println( rc += marshal1Long(wireFormat, + getter + , bs); ); } else if (type equals( String )) { out println( rc += writeString( + getter + , bs); ); } else if (type equals( byte[] ) || type equals( ByteSequence )) { if (size == null) { out println( bs writeBoolean( + getter + !=null); ); out println( rc += + getter + ==null 0 + getter + Length+4; ); } else { baseSize += size asInt(); } } else if (propertyType isArrayType()) { if (size != null) { out println( rc += marshalObjectArrayConstSize(wireFormat, + getter + , bs, + size asInt() + ); ); } else { out println( rc += marshalObjectArray(wireFormat, + getter + , bs); ); } } else if (isThrowable(propertyType)) { out println( rc += marshalBrokerError(wireFormat, + getter + , bs); ); } else { if (isCachedProperty(property)) { out println( rc += marshal1CachedObject(wireFormat, + getter + , bs); ); } else { out println( rc += marshal1NestedObject(wireFormat, + getter + , bs); ); } } } return baseSize; } protected void generateMarshal2Body(PrintWriter out) { List properties = getProperties(); for (Iterator iter = properties iterator(); iter hasNext();) { JProperty property = (JProperty)iter next(); JAnnotation annotation = property getAnnotation( openwire property ); JAnnotationValue size = annotation getValue( size ); JClass propertyType = property getType(); String type = propertyType getSimpleName(); String getter = info + property getGetter() getSimpleName() + () ; out print(indent); if (type equals( boolean )) { out println( bs readBoolean(); ); } else if (type equals( byte )) { out println( DataStreamMarshaller writeByte( + getter + , dataOut); ); } else if (type equals( char )) { out println( DataStreamMarshaller writeChar( + getter + , dataOut); ); } else if (type equals( short )) { out println( DataStreamMarshaller writeShort( + getter + , dataOut); ); } else if (type equals( int )) { out println( DataStreamMarshaller writeInt( + getter + , dataOut); ); } else if (type equals( long )) { out println( marshal2Long(wireFormat, + getter + , dataOut, bs); ); } else if (type equals( String )) { out println( writeString( + getter + , dataOut, bs); ); } else if (type equals( byte[] ) || type equals( ByteSequence )) { if (size != null) { out println( dataOut write( + getter + , 0, + size asInt() + ); ); } else { out println( if(bs readBoolean()) { ); out println( DataStreamMarshaller writeInt( + getter + Length, dataOut); ); out println( dataOut write( + getter + ); ); out println( } ); } } else if (propertyType isArrayType()) { if (size != null) { out println( marshalObjectArrayConstSize(wireFormat, + getter + , dataOut, bs, + size asInt() + ); ); } else { out println( marshalObjectArray(wireFormat, + getter + , dataOut, bs); ); } } else if (isThrowable(propertyType)) { out println( marshalBrokerError(wireFormat, + getter + , dataOut, bs); ); } else { if (isCachedProperty(property)) { out println( marshal2CachedObject(wireFormat, + getter + , dataOut, bs); ); } else { out println( marshal2NestedObject(wireFormat, + getter + , dataOut, bs); ); } } } } protected void generateFile(PrintWriter out) throws Exception { generateLicence(out); out println( include marshal/ + className + hpp ); out println( ); out println( using namespace apache activemq client marshal; ); out println( ); out println( ); out println( ); out println( + className + + className + () ); out println( { ); out println( out println( } ); out println( ); out println( + className + ~ + className + () ); out println( { ); out println( out println( } ); out println( ); if (!isAbstractClass()) { out println( ); out println( ); out println( IDataStructure* + className + createObject() ); out println( { ); out println( return new + jclass getSimpleName() + (); ); out println( } ); out println( ); out println( char + className + getDataStructureType() ); out println( { ); out println( return + jclass getSimpleName() + ID + jclass getSimpleName() + ; ); out println( } ); } out println( ); out println( ); out println( void + className + unmarshal(ProtocolFormat& wireFormat, Object o, BinaryReader& dataIn, BooleanStream& bs) ); out println( { ); out println( base unmarshal(wireFormat, o, dataIn, bs); ); List properties = getProperties(); boolean marshallerAware = isMarshallerAware(); if (!properties isEmpty() || marshallerAware) { out println( ); out println( + jclass getSimpleName() + & info = ( + jclass getSimpleName() + &) o; ); } if (marshallerAware) { out println( ); out println( info beforeUnmarshall(wireFormat); ); out println( ); } generateTightUnmarshalBody(out); if (marshallerAware) { out println( ); out println( info afterUnmarshall(wireFormat); ); } out println( ); out println( } ); out println( ); out println( ); out println( ); out println( int + className + marshal1(ProtocolFormat& wireFormat, Object& o, BooleanStream& bs) { ); out println( + jclass getSimpleName() + & info = ( + jclass getSimpleName() + &) o; ); if (marshallerAware) { out println( ); out println( info beforeMarshall(wireFormat); ); } out println( ); out println( int rc = base marshal1(wireFormat, info, bs); ); int baseSize = generateMarshal1Body(out); out println( ); out println( return rc + + baseSize + ; ); out println( } ); out println( ); out println( ); out println( void + className + marshal2(ProtocolFormat& wireFormat, Object& o, BinaryWriter& dataOut, BooleanStream& bs) { ); out println( base marshal2(wireFormat, o, dataOut, bs); ); if (!properties isEmpty() || marshallerAware) { out println( ); out println( + jclass getSimpleName() + & info = ( + jclass getSimpleName() + &) o; ); } generateMarshal2Body(out); if (marshallerAware) { out println( ); out println( info afterMarshall(wireFormat); ); } out println( ); out println( } ); } SuppressWarnings( unchecked ) public void generateFactory(PrintWriter out) { generateLicence(out); out println( ); out println( out println( out println( out println( out println( out println( out println( out println( ); out println( include marshal/ + className + hpp ); out println( ); List list = new ArrayList(getConcreteClasses()); Collections sort(list, new Comparator() { public int compare(Object o1, Object o2) { JClass c1 = (JClass)o1; JClass c2 = (JClass)o2; return c1 getSimpleName() compareTo(c2 getSimpleName()); } }); for (Iterator iter = list iterator(); iter hasNext();) { JClass jclass = (JClass)iter next(); out println( include marshal/ + jclass getSimpleName() + Marshaller hpp ); } out println( ); out println( ); out println( using namespace apache activemq client marshal; ); out println( ); out println( ); out println( void MarshallerFactory configure(ProtocolFormat& format) ); out println( { ); for (Iterator iter = list iterator(); iter hasNext();) { JClass jclass = (JClass)iter next(); out println( format addMarshaller(new + jclass getSimpleName() + Marshaller()); ); } out println( ); out println( } ); } }",1.0,
1455,1455,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\CSharpClassesGenerator.,CSharpClassesGenerator,"public class CSharpClassesGenerator extends MultiSourceGenerator { protected String targetDir = /src/main/csharp ; public Object run() { filePostFix = cs ; if (destDir == null) { destDir = new File(targetDir + /ActiveMQ/Commands ); } return super run(); } public String makeHashCodeBody() throws Exception { if (simpleName endsWith( Id )) { StringWriter buffer = new StringWriter(); PrintWriter out = new PrintWriter(buffer); out println( int answer = 0; ); Iterator iter = getProperties() iterator(); while (iter hasNext()) { JProperty property = (JProperty)iter next(); out println( answer = (answer * 37) + HashCode( + property getSimpleName() + ); ); } out println( return answer; ); return buffer toString(); } return null; } public String makeEqualsBody() throws Exception { if (simpleName endsWith( Id )) { StringWriter buffer = new StringWriter(); PrintWriter out = new PrintWriter(buffer); Iterator iter = getProperties() iterator(); while (iter hasNext()) { JProperty property = (JProperty)iter next(); String name = property getSimpleName(); out println( if (! Equals(this + name + , that + name + )) return false; ); } out println( return true; ); return buffer toString(); } return null; } public String makeToStringBody() throws Exception { StringWriter buffer = new StringWriter(); PrintWriter out = new PrintWriter(buffer); out println( return GetType() Name + [ ); Iterator iter = getProperties() iterator(); while (iter hasNext()) { JProperty property = (JProperty)iter next(); String name = property getSimpleName(); out println( + + name + = + + name); } out println( + ] ; ); return buffer toString(); } private void generateLicence(PrintWriter out) { out println( ); } protected void generateFile(PrintWriter out) throws Exception { generateLicence(out); out println( out println( out println( out println( out println( out println( ); out println( using System; ); out println( using System Collections; ); out println( ); out println( using ActiveMQ OpenWire; ); out println( using ActiveMQ Commands; ); out println( ); out println( namespace ActiveMQ Commands ); out println( { ); out println( out println( out println( out print( public class + jclass getSimpleName() + + baseClass); for (int i = 0; i < jclass getInterfaces() length; i++) { JClass intf = jclass getInterfaces()[i]; out print( , + intf getSimpleName()); } out println( ); out println( { ); out println( public const byte ID + jclass getSimpleName() + = + getOpenWireOpCode(jclass) + ; ); out println( ); List properties = getProperties(); String type; Object name; for (Iterator iter = properties iterator(); iter hasNext();) { JProperty property = (JProperty)iter next(); type = toCSharpType(property getType()); name = decapitalize(property getSimpleName()); out println( + type + + name + ; ); } String text = makeHashCodeBody(); if (text != null) { out println( ); out println( public override int GetHashCode() { ); out println( + text + ); out println( } ); } text = makeEqualsBody(); if (text != null) { out println( ); out println( public override bool Equals(object that) { ); out println( if (that is + className + ) { ); out println( return Equals(( + className + ) that); ); out println( } ); out println( return false; ); out println( } ); out println( ); out println( public virtual bool Equals( + className + that) { ); out println( + text + ); out println( } ); } text = makeToStringBody(); if (text != null) { out println( ); out println( public override string ToString() { ); out println( + text + ); out println( } ); } out println( ); out println( public override byte GetDataStructureType() { ); out println( return ID + jclass getSimpleName() + ; ); out println( } ); out println( ); out println( ); out println( for (Iterator iter = properties iterator(); iter hasNext();) { JProperty property = (JProperty)iter next(); type = toCSharpType(property getType()); name = decapitalize(property getSimpleName()); String propertyName = property getSimpleName(); out println( ); out println( public + type + + propertyName + ); out println( { ); out println( get { return + name + ; } ); out println( set { this + name + = value; } ); out println( } ); } out println( ); out println( } ); out println( } ); } public String getTargetDir() { return targetDir; } public void setTargetDir(String targetDir) { this targetDir = targetDir; } }",1.0,
1456,1456,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\CSharpGeneratorTask.,CSharpGeneratorTask,"public class CSharpGeneratorTask extends Task { int version = 2; File source = new File( ); File target = new File( ); public static void main(String[] args) { Project project = new Project(); project init(); CSharpGeneratorTask generator = new CSharpGeneratorTask(); generator setProject(project); if (args length > 0) { generator version = Integer parseInt(args[0]); } if (args length > 1) { generator source = new File(args[1]); } if (args length > 2) { generator target = new File(args[2]); } generator execute(); } public void execute() throws BuildException { try { String sourceDir = source + /src/main/java ; System out println( Parsing source files in + sourceDir); JamServiceFactory jamServiceFactory = JamServiceFactory getInstance(); JamServiceParams params = jamServiceFactory createServiceParams(); File[] dirs = new File[] { new File(sourceDir) }; params includeSourcePattern(dirs, **/* java ); JamService jam = jamServiceFactory createService(params); { CSharpClassesGenerator script = new CSharpClassesGenerator(); script setJam(jam); script setTargetDir(target + /src/main/csharp ); script setOpenwireVersion(version); script run(); } { CSharpMarshallingGenerator script = new CSharpMarshallingGenerator(); script setJam(jam); script setTargetDir(target + /src/main/csharp ); script setOpenwireVersion(version); script run(); } } catch (Exception e) { throw new BuildException(e); } } public int getVersion() { return version; } public void setVersion(int version) { this version = version; } public File getSource() { return source; } public void setSource(File basedir) { this source = basedir; } public File getTarget() { return target; } public void setTarget(File target) { this target = target; } }",1.0,
1459,1459,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\JavaGeneratorTask.,JavaGeneratorTask,"public class JavaGeneratorTask extends Task { int version = 2; File basedir = new File( ); File outputdir = null; boolean generateMarshalers = true; boolean generateTests = true; public static void main(String[] args) { Project project = new Project(); project init(); JavaGeneratorTask generator = new JavaGeneratorTask(); generator setProject(project); if (args length > 0) { generator version = Integer parseInt(args[0]); } if (args length > 1) { generator basedir = new File(args[1]); } generator execute(); } Override public void execute() throws BuildException { try { String sourceDir = basedir + /src/main/java ; System out println( Parsing source files in + sourceDir); JamServiceFactory jamServiceFactory = JamServiceFactory getInstance(); JamServiceParams params = jamServiceFactory createServiceParams(); File[] dirs = new File[] { new File(sourceDir) }; params includeSourcePattern(dirs, **/* java ); JamService jam = jamServiceFactory createService(params); File outputBase = outputdir != null outputdir basedir; if (generateMarshalers) { JavaMarshallingGenerator script = new JavaMarshallingGenerator(); script setJam(jam); script setTargetDir(outputBase + /src/main/java ); script setOpenwireVersion(version); script run(); } if (generateTests) { JavaTestsGenerator script = new JavaTestsGenerator(); script setJam(jam); script setTargetDir(outputBase + /src/test/java ); script setOpenwireVersion(version); script run(); } } catch (Exception e) { throw new BuildException(e); } } public int getVersion() { return version; } public void setVersion(int version) { this version = version; } public File getBasedir() { return basedir; } public void setBasedir(File basedir) { this basedir = basedir; } public File getOutputdir() { return outputdir; } public void setOutputdir(File outputdir) { this outputdir = outputdir; } public boolean isGenerateMarshalers() { return generateMarshalers; } public void setGenerateMarshalers(boolean generateMarshalers) { this generateMarshalers = generateMarshalers; } public boolean isGenerateTests() { return generateTests; } public void setGenerateTests(boolean generateTests) { this generateTests = generateTests; } }",1.0,
1462,1462,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\MultiSourceGenerator.,MultiSourceGenerator,"public abstract class MultiSourceGenerator extends OpenWireGenerator { protected Set<String> manuallyMaintainedClasses = new HashSet<String>(); protected File destDir; protected File destFile; protected JClass jclass; protected JClass superclass; protected String simpleName; protected String className; protected String baseClass; protected StringBuffer buffer; public MultiSourceGenerator() { initialiseManuallyMaintainedClasses(); } public Object run() { if (destDir == null) { throw new IllegalArgumentException( No destDir defined! ); } System out println(getClass() getName() + generating files in + destDir); destDir mkdirs(); buffer = new StringBuffer(); JamClassIterator iter = getClasses(); while (iter hasNext()) { try { jclass = iter nextClass(); if (isValidClass(jclass)) { processClass(jclass); } } catch (Exception e) { System err println( Unable to process + jclass); e printStackTrace(); } } return null; } public List<JProperty> getProperties() { List<JProperty> answer = new ArrayList<JProperty>(); JProperty[] properties = jclass getDeclaredProperties(); for (int i = 0; i < properties length; i++) { JProperty property = properties[i]; if (isValidProperty(property)) { answer add(property); } } return answer; } protected boolean isValidClass(JClass jclass) { if (jclass getAnnotation( openwire marshaller ) == null) { return false; } return !manuallyMaintainedClasses contains(jclass getSimpleName()); } protected void processClass(JClass jclass) { simpleName = jclass getSimpleName(); superclass = jclass getSuperclass(); System out println(getClass() getName() + processing class + simpleName); className = getClassName(jclass); destFile = new File(destDir, className + filePostFix); baseClass = getBaseClassName(jclass); PrintWriter out = null; try { out = new PrintWriter(new FileWriter(destFile)); generateFile(out); } catch (Exception e) { throw new RuntimeException(e); } finally { if (out != null) { out close(); } } Project project = new Project(); project init(); FixCRLF fixCRLF = new FixCRLF(); fixCRLF setProject(project); fixCRLF setSrcdir(destFile getParentFile()); fixCRLF setIncludes(destFile getName()); fixCRLF execute(); } protected abstract void generateFile(PrintWriter out) throws Exception; protected String getBaseClassName(JClass jclass) { String answer = BaseDataStructure ; if (superclass != null) { String name = superclass getSimpleName(); if (name != null && !name equals( Object )) { answer = name; } } return answer; } protected String getClassName(JClass jclass) { return jclass getSimpleName(); } public boolean isAbstractClass() { return jclass != null && jclass isAbstract(); } public String getAbstractClassText() { return isAbstractClass() abstract ; } public boolean isMarshallerAware() { return isMarshallAware(jclass); } protected void initialiseManuallyMaintainedClasses() { String[] names = { ActiveMQDestination , ActiveMQTempDestination , ActiveMQQueue , ActiveMQTopic , ActiveMQTempQueue , ActiveMQTempTopic , BaseCommand , ActiveMQMessage , ActiveMQTextMessage , ActiveMQMapMessage , ActiveMQBytesMessage , ActiveMQStreamMessage , ActiveMQBlobMessage , DataStructureSupport , WireFormatInfo , ActiveMQObjectMessage }; for (int i = 0; i < names length; i++) { manuallyMaintainedClasses add(names[i]); } } public String getBaseClass() { return baseClass; } public void setBaseClass(String baseClass) { this baseClass = baseClass; } public String getClassName() { return className; } public void setClassName(String className) { this className = className; } public File getDestDir() { return destDir; } public void setDestDir(File destDir) { this destDir = destDir; } public File getDestFile() { return destFile; } public void setDestFile(File destFile) { this destFile = destFile; } public JClass getJclass() { return jclass; } public void setJclass(JClass jclass) { this jclass = jclass; } public Set<String> getManuallyMaintainedClasses() { return manuallyMaintainedClasses; } public void setManuallyMaintainedClasses(Set<String> manuallyMaintainedClasses) { this manuallyMaintainedClasses = manuallyMaintainedClasses; } public String getSimpleName() { return simpleName; } public void setSimpleName(String simpleName) { this simpleName = simpleName; } public JClass getSuperclass() { return superclass; } public void setSuperclass(JClass superclass) { this superclass = superclass; } }",1.0,
1464,1464,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\SingleSourceGenerator.,SingleSourceGenerator,"public abstract class SingleSourceGenerator extends OpenWireGenerator { protected Set<String> manuallyMaintainedClasses = new HashSet<String>(); protected File destFile; protected JClass jclass; protected JClass superclass; protected String simpleName; protected String className; protected String baseClass; protected List<JClass> sortedClasses; public SingleSourceGenerator() { initialiseManuallyMaintainedClasses(); } public Object run() { if (destFile == null) { throw new IllegalArgumentException( No destFile defined! ); } destFile getParentFile() mkdirs(); PrintWriter out = null; try { out = new PrintWriter(new FileWriter(destFile)); ArrayList<JClass> classes = new ArrayList<JClass>(); JamClassIterator iter = getClasses(); while (iter hasNext()) { jclass = iter nextClass(); if (isValidClass(jclass)) { classes add(jclass); } } sortedClasses = sort(classes); generateSetup(out); for (Iterator<JClass> iterator = sortedClasses iterator(); iterator hasNext();) { jclass = iterator next(); simpleName = jclass getSimpleName(); superclass = jclass getSuperclass(); className = getClassName(jclass); baseClass = getBaseClassName(jclass); System out println(getClass() getName() + processing class + simpleName); generateFile(out); } generateTearDown(out); } catch (Exception e) { throw new RuntimeException(e); } finally { if (out != null) { out close(); } } Project project = new Project(); project init(); FixCRLF fixCRLF = new FixCRLF(); fixCRLF setProject(project); fixCRLF setSrcdir(destFile getParentFile()); fixCRLF setIncludes(destFile getName()); fixCRLF execute(); return null; } protected List<JClass> sort(List<JClass> classes) { return classes; } protected void generateTearDown(PrintWriter out) { } protected void generateSetup(PrintWriter out) { } public List<JProperty> getProperties() { List<JProperty> answer = new ArrayList<JProperty>(); JProperty[] properties = jclass getDeclaredProperties(); for (int i = 0; i < properties length; i++) { JProperty property = properties[i]; if (isValidProperty(property)) { answer add(property); } } return answer; } protected boolean isValidClass(JClass jclass) { if (jclass == null || jclass getAnnotation( openwire marshaller ) == null) { return false; } return true; } protected abstract void generateFile(PrintWriter out) throws Exception; protected String getBaseClassName(JClass jclass) { String answer = BaseDataStructure ; if (superclass != null) { String name = superclass getSimpleName(); if (name != null && !name equals( Object )) { answer = name; } } return answer; } protected String getClassName(JClass jclass) { return jclass getSimpleName(); } public boolean isAbstractClass() { return jclass != null && jclass isAbstract(); } public String getAbstractClassText() { return isAbstractClass() abstract ; } public boolean isMarshallerAware() { return isMarshallAware(jclass); } protected void initialiseManuallyMaintainedClasses() { String[] names = { ActiveMQDestination , ActiveMQTempDestination , ActiveMQQueue , ActiveMQTopic , ActiveMQTempQueue , ActiveMQTempTopic , BaseCommand , ActiveMQMessage , ActiveMQTextMessage , ActiveMQMapMessage , ActiveMQBytesMessage , ActiveMQStreamMessage , ActiveMQStreamMessage , DataStructureSupport , WireFormatInfo , ActiveMQObjectMessage }; for (int i = 0; i < names length; i++) { manuallyMaintainedClasses add(names[i]); } } public String getBaseClass() { return baseClass; } public void setBaseClass(String baseClass) { this baseClass = baseClass; } public String getClassName() { return className; } public void setClassName(String className) { this className = className; } public File getDestFile() { return destFile; } public void setDestFile(File destFile) { this destFile = destFile; } public JClass getJclass() { return jclass; } public void setJclass(JClass jclass) { this jclass = jclass; } public Set<String> getManuallyMaintainedClasses() { return manuallyMaintainedClasses; } public void setManuallyMaintainedClasses(Set<String> manuallyMaintainedClasses) { this manuallyMaintainedClasses = manuallyMaintainedClasses; } public String getSimpleName() { return simpleName; } public void setSimpleName(String simpleName) { this simpleName = simpleName; } public JClass getSuperclass() { return superclass; } public void setSuperclass(JClass superclass) { this superclass = superclass; } }",1.0,
1465,1465,data,\smellybot\activemq\activemq-openwire-generator\src\main\java\org\apache\activemq\openwire\tool\TestDataGenerator.,TestDataGenerator,public class TestDataGenerator { private int stringCounter; private boolean boolCounter; private byte byteCounter; private char charCounter = a ; private short shortCounter; private int intCounter; private long longCounter; public String createByte() { return (byte) + (++byteCounter); } public String createChar() { return + (charCounter++) + ; } public String createShort() { return (short) + (++shortCounter); } public int createInt() { return ++intCounter; } public long createLong() { return ++longCounter; } public String createString(String property) { return property + + (++stringCounter); } public boolean createBool() { boolCounter = !boolCounter; return boolCounter; } public String createByteArray(String property) { return + createString(property) + getBytes() ; } },1.0,
1466,1466,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1468,1468,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1469,1469,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1470,1470,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1471,1471,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1472,1472,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1473,1473,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1474,1474,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1475,1475,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1476,1476,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1477,1477,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1482,1482,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ConnectionControlMarshaller.,ConnectionControlMarshaller,"public class ConnectionControlMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ConnectionControl DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionControl(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionControl info = (ConnectionControl)o; info setClose(bs readBoolean()); info setExit(bs readBoolean()); info setFaultTolerant(bs readBoolean()); info setResume(bs readBoolean()); info setSuspend(bs readBoolean()); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionControl info = (ConnectionControl)o; int rc = super tightMarshal1(wireFormat, o, bs); bs writeBoolean(info isClose()); bs writeBoolean(info isExit()); bs writeBoolean(info isFaultTolerant()); bs writeBoolean(info isResume()); bs writeBoolean(info isSuspend()); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionControl info = (ConnectionControl)o; bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionControl info = (ConnectionControl)o; info setClose(dataIn readBoolean()); info setExit(dataIn readBoolean()); info setFaultTolerant(dataIn readBoolean()); info setResume(dataIn readBoolean()); info setSuspend(dataIn readBoolean()); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionControl info = (ConnectionControl)o; super looseMarshal(wireFormat, o, dataOut); dataOut writeBoolean(info isClose()); dataOut writeBoolean(info isExit()); dataOut writeBoolean(info isFaultTolerant()); dataOut writeBoolean(info isResume()); dataOut writeBoolean(info isSuspend()); } }",1.0,
1484,1484,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
1489,1489,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
1493,1493,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
1494,1494,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
1495,1495,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1499,1499,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
1501,1501,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1502,1502,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1513,1513,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ProducerIdMarshaller.,ProducerIdMarshaller,"public class ProducerIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ProducerId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ProducerId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ProducerId info = (ProducerId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); info setSessionId(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ProducerId info = (ProducerId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc += tightMarshalLong1(wireFormat, info getValue(), bs); rc += tightMarshalLong1(wireFormat, info getSessionId(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ProducerId info = (ProducerId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); tightMarshalLong2(wireFormat, info getSessionId(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ProducerId info = (ProducerId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); info setSessionId(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ProducerId info = (ProducerId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); looseMarshalLong(wireFormat, info getSessionId(), dataOut); } }",1.0,
1519,1519,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc += tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
1521,1521,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1523,1523,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v2\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1528,1528,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1530,1530,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1531,1531,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1532,1532,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1533,1533,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1534,1534,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1535,1535,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1536,1536,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1537,1537,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1538,1538,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1539,1539,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1544,1544,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ConnectionControlMarshaller.,ConnectionControlMarshaller,"public class ConnectionControlMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ConnectionControl DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionControl(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionControl info = (ConnectionControl)o; info setClose(bs readBoolean()); info setExit(bs readBoolean()); info setFaultTolerant(bs readBoolean()); info setResume(bs readBoolean()); info setSuspend(bs readBoolean()); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionControl info = (ConnectionControl)o; int rc = super tightMarshal1(wireFormat, o, bs); bs writeBoolean(info isClose()); bs writeBoolean(info isExit()); bs writeBoolean(info isFaultTolerant()); bs writeBoolean(info isResume()); bs writeBoolean(info isSuspend()); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionControl info = (ConnectionControl)o; bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionControl info = (ConnectionControl)o; info setClose(dataIn readBoolean()); info setExit(dataIn readBoolean()); info setFaultTolerant(dataIn readBoolean()); info setResume(dataIn readBoolean()); info setSuspend(dataIn readBoolean()); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionControl info = (ConnectionControl)o; super looseMarshal(wireFormat, o, dataOut); dataOut writeBoolean(info isClose()); dataOut writeBoolean(info isExit()); dataOut writeBoolean(info isFaultTolerant()); dataOut writeBoolean(info isResume()); dataOut writeBoolean(info isSuspend()); } }",1.0,
1546,1546,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
1551,1551,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
1555,1555,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
1556,1556,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
1557,1557,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1561,1561,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
1563,1563,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1564,1564,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1576,1576,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ProducerIdMarshaller.,ProducerIdMarshaller,"public class ProducerIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ProducerId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ProducerId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ProducerId info = (ProducerId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); info setSessionId(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ProducerId info = (ProducerId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc += tightMarshalLong1(wireFormat, info getValue(), bs); rc += tightMarshalLong1(wireFormat, info getSessionId(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ProducerId info = (ProducerId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); tightMarshalLong2(wireFormat, info getSessionId(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ProducerId info = (ProducerId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); info setSessionId(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ProducerId info = (ProducerId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); looseMarshalLong(wireFormat, info getSessionId(), dataOut); } }",1.0,
1582,1582,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc += tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
1584,1584,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1586,1586,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v3\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1591,1591,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1593,1593,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1594,1594,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1595,1595,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1596,1596,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1597,1597,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1598,1598,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1599,1599,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1600,1600,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1601,1601,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1602,1602,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1607,1607,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ConnectionControlMarshaller.,ConnectionControlMarshaller,"public class ConnectionControlMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ConnectionControl DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionControl(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionControl info = (ConnectionControl)o; info setClose(bs readBoolean()); info setExit(bs readBoolean()); info setFaultTolerant(bs readBoolean()); info setResume(bs readBoolean()); info setSuspend(bs readBoolean()); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionControl info = (ConnectionControl)o; int rc = super tightMarshal1(wireFormat, o, bs); bs writeBoolean(info isClose()); bs writeBoolean(info isExit()); bs writeBoolean(info isFaultTolerant()); bs writeBoolean(info isResume()); bs writeBoolean(info isSuspend()); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionControl info = (ConnectionControl)o; bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionControl info = (ConnectionControl)o; info setClose(dataIn readBoolean()); info setExit(dataIn readBoolean()); info setFaultTolerant(dataIn readBoolean()); info setResume(dataIn readBoolean()); info setSuspend(dataIn readBoolean()); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionControl info = (ConnectionControl)o; super looseMarshal(wireFormat, o, dataOut); dataOut writeBoolean(info isClose()); dataOut writeBoolean(info isExit()); dataOut writeBoolean(info isFaultTolerant()); dataOut writeBoolean(info isResume()); dataOut writeBoolean(info isSuspend()); } }",1.0,
1609,1609,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
1614,1614,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
1618,1618,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
1619,1619,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
1620,1620,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1624,1624,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
1626,1626,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1627,1627,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1645,1645,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc+=tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
1647,1647,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1649,1649,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v4\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1654,1654,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1656,1656,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1657,1657,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1658,1658,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1659,1659,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1660,1660,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1661,1661,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1662,1662,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1663,1663,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1664,1664,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1665,1665,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1670,1670,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ConnectionControlMarshaller.,ConnectionControlMarshaller,"public class ConnectionControlMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ConnectionControl DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionControl(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionControl info = (ConnectionControl)o; info setClose(bs readBoolean()); info setExit(bs readBoolean()); info setFaultTolerant(bs readBoolean()); info setResume(bs readBoolean()); info setSuspend(bs readBoolean()); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionControl info = (ConnectionControl)o; int rc = super tightMarshal1(wireFormat, o, bs); bs writeBoolean(info isClose()); bs writeBoolean(info isExit()); bs writeBoolean(info isFaultTolerant()); bs writeBoolean(info isResume()); bs writeBoolean(info isSuspend()); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionControl info = (ConnectionControl)o; bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); bs readBoolean(); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionControl info = (ConnectionControl)o; info setClose(dataIn readBoolean()); info setExit(dataIn readBoolean()); info setFaultTolerant(dataIn readBoolean()); info setResume(dataIn readBoolean()); info setSuspend(dataIn readBoolean()); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionControl info = (ConnectionControl)o; super looseMarshal(wireFormat, o, dataOut); dataOut writeBoolean(info isClose()); dataOut writeBoolean(info isExit()); dataOut writeBoolean(info isFaultTolerant()); dataOut writeBoolean(info isResume()); dataOut writeBoolean(info isSuspend()); } }",1.0,
1672,1672,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
1677,1677,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
1681,1681,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
1682,1682,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
1683,1683,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1687,1687,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
1689,1689,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1690,1690,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1708,1708,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc+=tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
1710,1710,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1712,1712,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v5\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1717,1717,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1719,1719,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1720,1720,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1721,1721,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1722,1722,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1723,1723,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1724,1724,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1725,1725,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1726,1726,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1727,1727,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1728,1728,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1735,1735,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
1740,1740,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
1744,1744,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
1745,1745,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
1746,1746,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1750,1750,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
1752,1752,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1753,1753,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1771,1771,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc+=tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
1773,1773,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1775,1775,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v6\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1780,1780,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQBytesMessageMarshaller.,ActiveMQBytesMessageMarshaller,"public class ActiveMQBytesMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQBytesMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQBytesMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1782,1782,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQMapMessageMarshaller.,ActiveMQMapMessageMarshaller,"public class ActiveMQMapMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQMapMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMapMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1783,1783,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQMessageMarshaller.,ActiveMQMessageMarshaller,"public class ActiveMQMessageMarshaller extends MessageMarshaller { public byte getDataStructureType() { return ActiveMQMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1784,1784,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQObjectMessageMarshaller.,ActiveMQObjectMessageMarshaller,"public class ActiveMQObjectMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQObjectMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQObjectMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1785,1785,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQQueueMarshaller.,ActiveMQQueueMarshaller,"public class ActiveMQQueueMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1786,1786,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQStreamMessageMarshaller.,ActiveMQStreamMessageMarshaller,"public class ActiveMQStreamMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQStreamMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQStreamMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1787,1787,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQTempDestinationMarshaller.,ActiveMQTempDestinationMarshaller,"public abstract class ActiveMQTempDestinationMarshaller extends ActiveMQDestinationMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1788,1788,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQTempQueueMarshaller.,ActiveMQTempQueueMarshaller,"public class ActiveMQTempQueueMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempQueue DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempQueue(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1789,1789,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQTempTopicMarshaller.,ActiveMQTempTopicMarshaller,"public class ActiveMQTempTopicMarshaller extends ActiveMQTempDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTempTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTempTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1790,1790,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQTextMessageMarshaller.,ActiveMQTextMessageMarshaller,"public class ActiveMQTextMessageMarshaller extends ActiveMQMessageMarshaller { public byte getDataStructureType() { return ActiveMQTextMessage DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTextMessage(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1791,1791,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ActiveMQTopicMarshaller.,ActiveMQTopicMarshaller,"public class ActiveMQTopicMarshaller extends ActiveMQDestinationMarshaller { public byte getDataStructureType() { return ActiveMQTopic DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ActiveMQTopic(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1798,1798,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ConnectionIdMarshaller.,ConnectionIdMarshaller,"public class ConnectionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return ConnectionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ConnectionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ConnectionId info = (ConnectionId)o; info setValue(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ConnectionId info = (ConnectionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ConnectionId info = (ConnectionId)o; tightMarshalString2(info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ConnectionId info = (ConnectionId)o; info setValue(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ConnectionId info = (ConnectionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getValue(), dataOut); } }",1.0,
1803,1803,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ControlCommandMarshaller.,ControlCommandMarshaller,"public class ControlCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ControlCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ControlCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ControlCommand info = (ControlCommand)o; info setCommand(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ControlCommand info = (ControlCommand)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getCommand(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ControlCommand info = (ControlCommand)o; tightMarshalString2(info getCommand(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ControlCommand info = (ControlCommand)o; info setCommand(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ControlCommand info = (ControlCommand)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getCommand(), dataOut); } }",1.0,
1807,1807,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\DiscoveryEventMarshaller.,DiscoveryEventMarshaller,"public class DiscoveryEventMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return DiscoveryEvent DATA STRUCTURE TYPE; } public DataStructure createObject() { return new DiscoveryEvent(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(tightUnmarshalString(dataIn, bs)); info setBrokerName(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getServiceName(), bs); rc += tightMarshalString1(info getBrokerName(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); DiscoveryEvent info = (DiscoveryEvent)o; tightMarshalString2(info getServiceName(), dataOut, bs); tightMarshalString2(info getBrokerName(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); DiscoveryEvent info = (DiscoveryEvent)o; info setServiceName(looseUnmarshalString(dataIn)); info setBrokerName(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { DiscoveryEvent info = (DiscoveryEvent)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getServiceName(), dataOut); looseMarshalString(info getBrokerName(), dataOut); } }",1.0,
1808,1808,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ExceptionResponseMarshaller.,ExceptionResponseMarshaller,"public class ExceptionResponseMarshaller extends ResponseMarshaller { public byte getDataStructureType() { return ExceptionResponse DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ExceptionResponse(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) tightUnmarsalThrowable(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { ExceptionResponse info = (ExceptionResponse)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalThrowable1(wireFormat, info getException(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); ExceptionResponse info = (ExceptionResponse)o; tightMarshalThrowable2(wireFormat, info getException(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); ExceptionResponse info = (ExceptionResponse)o; info setException((java lang Throwable) looseUnmarsalThrowable(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { ExceptionResponse info = (ExceptionResponse)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalThrowable(wireFormat, info getException(), dataOut); } }",1.0,
1809,1809,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\FlushCommandMarshaller.,FlushCommandMarshaller,"public class FlushCommandMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return FlushCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new FlushCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1813,1813,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\JournalTraceMarshaller.,JournalTraceMarshaller,"public class JournalTraceMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return JournalTrace DATA STRUCTURE TYPE; } public DataStructure createObject() { return new JournalTrace(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); JournalTrace info = (JournalTrace)o; info setMessage(tightUnmarshalString(dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { JournalTrace info = (JournalTrace)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getMessage(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); JournalTrace info = (JournalTrace)o; tightMarshalString2(info getMessage(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); JournalTrace info = (JournalTrace)o; info setMessage(looseUnmarshalString(dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { JournalTrace info = (JournalTrace)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getMessage(), dataOut); } }",1.0,
1815,1815,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\KeepAliveInfoMarshaller.,KeepAliveInfoMarshaller,"public class KeepAliveInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return KeepAliveInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new KeepAliveInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1816,1816,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\LastPartialCommandMarshaller.,LastPartialCommandMarshaller,"public class LastPartialCommandMarshaller extends PartialCommandMarshaller { public byte getDataStructureType() { return LastPartialCommand DATA STRUCTURE TYPE; } public DataStructure createObject() { return new LastPartialCommand(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1834,1834,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\SessionIdMarshaller.,SessionIdMarshaller,"public class SessionIdMarshaller extends BaseDataStreamMarshaller { public byte getDataStructureType() { return SessionId DATA STRUCTURE TYPE; } public DataStructure createObject() { return new SessionId(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); SessionId info = (SessionId)o; info setConnectionId(tightUnmarshalString(dataIn, bs)); info setValue(tightUnmarshalLong(wireFormat, dataIn, bs)); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { SessionId info = (SessionId)o; int rc = super tightMarshal1(wireFormat, o, bs); rc += tightMarshalString1(info getConnectionId(), bs); rc+=tightMarshalLong1(wireFormat, info getValue(), bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); SessionId info = (SessionId)o; tightMarshalString2(info getConnectionId(), dataOut, bs); tightMarshalLong2(wireFormat, info getValue(), dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); SessionId info = (SessionId)o; info setConnectionId(looseUnmarshalString(dataIn)); info setValue(looseUnmarshalLong(wireFormat, dataIn)); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { SessionId info = (SessionId)o; super looseMarshal(wireFormat, o, dataOut); looseMarshalString(info getConnectionId(), dataOut); looseMarshalLong(wireFormat, info getValue(), dataOut); } }",1.0,
1836,1836,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\ShutdownInfoMarshaller.,ShutdownInfoMarshaller,"public class ShutdownInfoMarshaller extends BaseCommandMarshaller { public byte getDataStructureType() { return ShutdownInfo DATA STRUCTURE TYPE; } public DataStructure createObject() { return new ShutdownInfo(); } public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1838,1838,data,\smellybot\activemq\activemq-openwire-legacy\src\main\java\org\apache\activemq\openwire\v7\TransactionIdMarshaller.,TransactionIdMarshaller,"public abstract class TransactionIdMarshaller extends BaseDataStreamMarshaller { public void tightUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn, BooleanStream bs) throws IOException { super tightUnmarshal(wireFormat, o, dataIn, bs); } public int tightMarshal1(OpenWireFormat wireFormat, Object o, BooleanStream bs) throws IOException { int rc = super tightMarshal1(wireFormat, o, bs); return rc + 0; } public void tightMarshal2(OpenWireFormat wireFormat, Object o, DataOutput dataOut, BooleanStream bs) throws IOException { super tightMarshal2(wireFormat, o, dataOut, bs); } public void looseUnmarshal(OpenWireFormat wireFormat, Object o, DataInput dataIn) throws IOException { super looseUnmarshal(wireFormat, o, dataIn); } public void looseMarshal(OpenWireFormat wireFormat, Object o, DataOutput dataOut) throws IOException { super looseMarshal(wireFormat, o, dataOut); } }",1.0,
1842,1842,data,\smellybot\activemq\activemq-osgi\src\main\java\org\apache\activemq\osgi\ActiveMQServiceFactory.,ActiveMQServiceFactory,"public class ActiveMQServiceFactory implements ManagedServiceFactory { private static final Logger LOG = LoggerFactory getLogger(ActiveMQServiceFactory class); BundleContext bundleContext; HashMap<String, BrokerService> brokers = new HashMap<String, BrokerService>(); Override public String getName() { return ActiveMQ Server Controller ; } Override synchronized public void updated(String pid, Dictionary properties) throws ConfigurationException { deleted(pid); String config = (String)properties get( config ); if (config == null) { throw new ConfigurationException( config , Property must be set ); } String name = (String)properties get( broker-name ); if (name == null) { throw new ConfigurationException( broker-name , Property must be set ); } LOG info( Starting broker + name); try { Thread currentThread() setContextClassLoader(BrokerService class getClassLoader()); Resource resource = Utils resourceFromString(config); ResourceXmlApplicationContext ctx = new ResourceXmlApplicationContext(resource, Collections EMPTY LIST, null, Collections EMPTY LIST, false) { protected void initBeanDefinitionReader(XmlBeanDefinitionReader reader) { reader setValidating(false); } }; PropertySourcesPlaceholderConfigurer configurator = new PropertySourcesPlaceholderConfigurer(); Properties props = new Properties(); Enumeration elements = properties keys(); while (elements hasMoreElements()) { Object key = elements nextElement(); props put(key, properties get(key)); } configurator setProperties(props); configurator setIgnoreUnresolvablePlaceholders(true); ctx addBeanFactoryPostProcessor(configurator); ctx refresh(); BrokerService broker = ctx getBean(BrokerService class); if (broker == null) { throw new ConfigurationException(null, Broker not defined ); } broker start(); broker waitUntilStarted(); brokers put(pid, broker); } catch (Exception e) { throw new ConfigurationException(null, Cannot start the broker , e); } } Override synchronized public void deleted(String pid) { BrokerService broker = brokers get(pid); if (broker == null) { return; } try { LOG info( Stopping broker + pid); broker stop(); broker waitUntilStopped(); } catch (Exception e) { LOG error( Exception on stopping broker , e); } } synchronized public void destroy() { for (String broker brokers keySet()) { deleted(broker); } } public BundleContext getBundleContext() { return bundleContext; } public void setBundleContext(BundleContext bundleContext) { this bundleContext = bundleContext; } }",1.0,
1845,1845,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\ActiveMQResourceManager.,ConnectionAndWrapperNamedXAResource,"public static class ConnectionAndWrapperNamedXAResource extends WrapperNamedXAResource { final ActiveMQConnection connection; public ConnectionAndWrapperNamedXAResource(XAResource xaResource, String name, ActiveMQConnection connection) { super(xaResource, name); this connection = connection; } }",1.0,
1846,1846,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\AmqJNDIPooledConnectionFactory.,AmqJNDIPooledConnectionFactory,"public class AmqJNDIPooledConnectionFactory extends PooledConnectionFactory implements JNDIStorableInterface { private Properties properties; public AmqJNDIPooledConnectionFactory() { super(); } public AmqJNDIPooledConnectionFactory(String brokerURL) { super(brokerURL); } public AmqJNDIPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) { super(connectionFactory); } public synchronized void setProperties(Properties props) { this properties = props; buildFromProperties(props); } public synchronized Properties getProperties() { if (this properties == null) { this properties = new Properties(); } populateProperties(this properties); return this properties; } public Reference getReference() throws NamingException { return JNDIReferenceFactory createReference(this getClass() getName(), this); } public void buildFromProperties(Properties properties) { if (properties == null) { properties = new Properties(); } ((ActiveMQConnectionFactory) getConnectionFactory()) buildFromProperties(properties); String temp = properties getProperty( maximumActive ); if (temp != null && temp length() > 0) { setMaximumActiveSessionPerConnection(Integer parseInt(temp)); } temp = properties getProperty( maximumActiveSessionPerConnection ); if (temp != null && temp length() > 0) { setMaximumActiveSessionPerConnection(Integer parseInt(temp)); } temp = properties getProperty( maxConnections ); if (temp != null && temp length() > 0) { setMaxConnections(Integer parseInt(temp)); } } public void populateProperties(Properties props) { ((ActiveMQConnectionFactory) getConnectionFactory()) populateProperties(props); props setProperty( maximumActive , Integer toString(getMaximumActiveSessionPerConnection())); props setProperty( maximumActiveSessionPerConnection , Integer toString(getMaximumActiveSessionPerConnection())); props setProperty( maxConnections , Integer toString(getMaxConnections())); } }",1.0,
1849,1849,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\JcaConnectionPool.,JcaConnectionPool,"public class JcaConnectionPool extends XaConnectionPool { private String name; public JcaConnectionPool(ActiveMQConnection connection, TransactionManager transactionManager, String name) { super(connection, transactionManager); this name = name; } public JcaConnectionPool(ActiveMQConnection connection, ObjectPoolFactory poolFactory, TransactionManager transactionManager, String name) { this(connection, transactionManager, name); } protected XAResource createXaResource(PooledSession session) throws JMSException { XAResource xares = new LocalAndXATransaction(session getInternalSession() getTransactionContext()); if (name != null) { xares = new WrapperNamedXAResource(xares, name); } return xares; } }",1.0,
1850,1850,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\JcaPooledConnectionFactory.,JcaPooledConnectionFactory,"public class JcaPooledConnectionFactory extends XaPooledConnectionFactory { private String name; public JcaPooledConnectionFactory() { super(); } public JcaPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) { super(connectionFactory); } public JcaPooledConnectionFactory(String brokerURL) { super(brokerURL); } public String getName() { return name; } public void setName(String name) { this name = name; } protected ConnectionPool createConnectionPool(ActiveMQConnection connection) { return new JcaConnectionPool(connection, getTransactionManager(), getName()); } }",1.0,
1851,1851,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\PooledConnection.,PooledConnection,"public class PooledConnection implements TopicConnection, QueueConnection, EnhancedConnection, PooledSessionEventListener { private static final transient Logger LOG = LoggerFactory getLogger(PooledConnection class); private ConnectionPool pool; private volatile boolean stopped; private final List<TemporaryQueue> connTempQueues = new CopyOnWriteArrayList<TemporaryQueue>(); private final List<TemporaryTopic> connTempTopics = new CopyOnWriteArrayList<TemporaryTopic>(); private final List<PooledSession> loanedSessions = new CopyOnWriteArrayList<PooledSession>(); public PooledConnection(ConnectionPool pool) { this pool = pool; this pool incrementReferenceCount(); } public PooledConnection newInstance() { return new PooledConnection(pool); } Override public void close() throws JMSException { this cleanupConnectionTemporaryDestinations(); this cleanupAllLoanedSessions(); if (this pool != null) { this pool decrementReferenceCount(); this pool = null; } } Override public void start() throws JMSException { assertNotClosed(); pool start(); } Override public void stop() throws JMSException { stopped = true; } Override public ConnectionConsumer createConnectionConsumer(Destination destination, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException { return getConnection() createConnectionConsumer(destination, selector, serverSessionPool, maxMessages); } Override public ConnectionConsumer createConnectionConsumer(Topic topic, String s, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException { return getConnection() createConnectionConsumer(topic, s, serverSessionPool, maxMessages); } Override public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String selector, String s1, ServerSessionPool serverSessionPool, int i) throws JMSException { return getConnection() createDurableConnectionConsumer(topic, selector, s1, serverSessionPool, i); } Override public String getClientID() throws JMSException { return getConnection() getClientID(); } Override public ExceptionListener getExceptionListener() throws JMSException { return getConnection() getExceptionListener(); } Override public ConnectionMetaData getMetaData() throws JMSException { return getConnection() getMetaData(); } Override public void setExceptionListener(ExceptionListener exceptionListener) throws JMSException { getConnection() setExceptionListener(exceptionListener); } Override public void setClientID(String clientID) throws JMSException { if (this getConnection() getClientID() == null || !this getClientID() equals(clientID)) { getConnection() setClientID(clientID); } } Override public ConnectionConsumer createConnectionConsumer(Queue queue, String selector, ServerSessionPool serverSessionPool, int maxMessages) throws JMSException { return getConnection() createConnectionConsumer(queue, selector, serverSessionPool, maxMessages); } Override public QueueSession createQueueSession(boolean transacted, int ackMode) throws JMSException { return (QueueSession) createSession(transacted, ackMode); } Override public TopicSession createTopicSession(boolean transacted, int ackMode) throws JMSException { return (TopicSession) createSession(transacted, ackMode); } Override public Session createSession(boolean transacted, int ackMode) throws JMSException { PooledSession result; result = (PooledSession) pool createSession(transacted, ackMode); loanedSessions add(result); result addSessionEventListener(this); return result; } Override public DestinationSource getDestinationSource() throws JMSException { return getConnection() getDestinationSource(); } Override public void onTemporaryQueueCreate(TemporaryQueue tempQueue) { connTempQueues add(tempQueue); } Override public void onTemporaryTopicCreate(TemporaryTopic tempTopic) { connTempTopics add(tempTopic); } Override public void onSessionClosed(PooledSession session) { if (session != null) { this loanedSessions remove(session); } } public ActiveMQConnection getConnection() throws JMSException { assertNotClosed(); return pool getConnection(); } protected void assertNotClosed() throws AlreadyClosedException { if (stopped || pool == null) { throw new AlreadyClosedException(); } } protected ActiveMQSession createSession(SessionKey key) throws JMSException { return (ActiveMQSession) getConnection() createSession(key isTransacted(), key getAckMode()); } Override public String toString() { return PooledConnection { + pool + } ; } protected void cleanupConnectionTemporaryDestinations() { for (TemporaryQueue tempQueue connTempQueues) { try { tempQueue delete(); } catch (JMSException ex) { LOG info( failed to delete Temporary Queue + tempQueue toString() + on closing pooled connection + ex getMessage()); } } connTempQueues clear(); for (TemporaryTopic tempTopic connTempTopics) { try { tempTopic delete(); } catch (JMSException ex) { LOG info( failed to delete Temporary Topic + tempTopic toString() + on closing pooled connection + ex getMessage()); } } connTempTopics clear(); } protected void cleanupAllLoanedSessions() { for (PooledSession session loanedSessions) { try { session close(); } catch (JMSException ex) { LOG info( failed to close laoned Session + session + on closing pooled connection + ex getMessage()); } } loanedSessions clear(); } public int getNumSessions() { return this pool getNumSessions(); } public int getNumActiveSessions() { return this pool getNumActiveSessions(); } public int getNumtIdleSessions() { return this pool getNumIdleSessions(); } }",1.0,
1852,1852,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\PooledConnectionFactory.,PooledConnectionFactory,"public class PooledConnectionFactory implements ConnectionFactory, Service { private static final transient Logger LOG = LoggerFactory getLogger(PooledConnectionFactory class); private final AtomicBoolean stopped = new AtomicBoolean(false); private final GenericKeyedObjectPool<ConnectionKey, ConnectionPool> connectionsPool; private ConnectionFactory connectionFactory; private int maximumActiveSessionPerConnection = 500; private int idleTimeout = 30 * 1000; private boolean blockIfSessionPoolIsFull = true; private long expiryTimeout = 0l; private boolean createConnectionOnStartup = true; public PooledConnectionFactory() { this(new ActiveMQConnectionFactory()); } public PooledConnectionFactory(String brokerURL) { this(new ActiveMQConnectionFactory(brokerURL)); } public PooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) { this connectionFactory = connectionFactory; this connectionsPool = new GenericKeyedObjectPool<ConnectionKey, ConnectionPool>( new KeyedPoolableObjectFactory<ConnectionKey, ConnectionPool>() { Override public void activateObject(ConnectionKey key, ConnectionPool connection) throws Exception { } Override public void destroyObject(ConnectionKey key, ConnectionPool connection) throws Exception { try { if (LOG isTraceEnabled()) { LOG trace( Destroying connection {} , connection); } connection close(); } catch (Exception e) { LOG warn( Close connection failed for connection + connection + This exception will be ignored ,e); } } Override public ConnectionPool makeObject(ConnectionKey key) throws Exception { ActiveMQConnection delegate = createConnection(key); ConnectionPool connection = createConnectionPool(delegate); connection setIdleTimeout(getIdleTimeout()); connection setExpiryTimeout(getExpiryTimeout()); connection setMaximumActiveSessionPerConnection(getMaximumActiveSessionPerConnection()); connection setBlockIfSessionPoolIsFull(isBlockIfSessionPoolIsFull()); if (LOG isTraceEnabled()) { LOG trace( Created new connection {} , connection); } return connection; } Override public void passivateObject(ConnectionKey key, ConnectionPool connection) throws Exception { } Override public boolean validateObject(ConnectionKey key, ConnectionPool connection) { if (connection != null && connection expiredCheck()) { if (LOG isTraceEnabled()) { LOG trace( Connection has expired {} and will be destroyed , connection); } return false; } return true; } }); this connectionsPool setMaxIdle(1); this connectionsPool setTestOnBorrow(true); this connectionsPool setTestWhileIdle(true); } public ConnectionFactory getConnectionFactory() { return connectionFactory; } public void setConnectionFactory(ConnectionFactory connectionFactory) { this connectionFactory = connectionFactory; } Override public Connection createConnection() throws JMSException { return createConnection(null, null); } Override public synchronized Connection createConnection(String userName, String password) throws JMSException { if (stopped get()) { LOG debug( PooledConnectionFactory is stopped, skip create new connection ); return null; } ConnectionPool connection = null; ConnectionKey key = new ConnectionKey(userName, password); if (connectionsPool getNumIdle(key) < getMaxConnections()) { try { connectionsPool setLifo(true); connectionsPool addObject(key); } catch (Exception e) { throw JMSExceptionSupport create( Error while attempting to add new Connection to the pool , e); } } else { connectionsPool setLifo(false); } try { connection = connectionsPool borrowObject(key); } catch (Exception e) { throw JMSExceptionSupport create( Error while attempting to retrieve a connection from the pool , e); } try { connectionsPool returnObject(key, connection); } catch (Exception e) { throw JMSExceptionSupport create( Error when returning connection to the pool , e); } return new PooledConnection(connection); } public ObjectPoolFactory< > getPoolFactory() { return null; } protected ActiveMQConnection createConnection(ConnectionKey key) throws JMSException { if (key getUserName() == null && key getPassword() == null) { return (ActiveMQConnection)connectionFactory createConnection(); } else { return (ActiveMQConnection)connectionFactory createConnection(key getUserName(), key getPassword()); } } Override public void start() { LOG debug( Staring the PooledConnectionFactory create on start = {} , isCreateConnectionOnStartup()); stopped set(false); if (isCreateConnectionOnStartup()) { try { createConnection(); } catch (JMSException e) { LOG warn( Create pooled connection during start failed This exception will be ignored , e); } } } Override public void stop() { LOG debug( Stopping the PooledConnectionFactory, number of connections in cache {} , connectionsPool getNumActive()); if (stopped compareAndSet(false, true)) { try { connectionsPool close(); } catch (Exception e) { } } } public void clear() { if (stopped get()) { return; } this connectionsPool clear(); } Deprecated public int getMaximumActive() { return getMaximumActiveSessionPerConnection(); } Deprecated public void setMaximumActive(int maximumActive) { setMaximumActiveSessionPerConnection(maximumActive); } public int getMaximumActiveSessionPerConnection() { return maximumActiveSessionPerConnection; } public void setMaximumActiveSessionPerConnection(int maximumActiveSessionPerConnection) { this maximumActiveSessionPerConnection = maximumActiveSessionPerConnection; } public void setBlockIfSessionPoolIsFull(boolean block) { this blockIfSessionPoolIsFull = block; } public boolean isBlockIfSessionPoolIsFull() { return this blockIfSessionPoolIsFull; } public int getMaxConnections() { return connectionsPool getMaxIdle(); } public void setMaxConnections(int maxConnections) { this connectionsPool setMaxIdle(maxConnections); } public int getIdleTimeout() { return idleTimeout; } public void setIdleTimeout(int idleTimeout) { this idleTimeout = idleTimeout; } public void setExpiryTimeout(long expiryTimeout) { this expiryTimeout = expiryTimeout; } public long getExpiryTimeout() { return expiryTimeout; } public boolean isCreateConnectionOnStartup() { return createConnectionOnStartup; } public void setCreateConnectionOnStartup(boolean createConnectionOnStartup) { this createConnectionOnStartup = createConnectionOnStartup; } KeyedObjectPool<ConnectionKey, ConnectionPool> getConnectionsPool() { return this connectionsPool; } public void setTimeBetweenExpirationCheckMillis(long timeBetweenExpirationCheckMillis) { this connectionsPool setTimeBetweenEvictionRunsMillis(timeBetweenExpirationCheckMillis); } public long setTimeBetweenExpirationCheckMillis() { return this connectionsPool getTimeBetweenEvictionRunsMillis(); } public int getNumConnections() { return this connectionsPool getNumIdle(); } public void setPoolFactory(ObjectPoolFactory< > factory) { } protected ConnectionPool createConnectionPool(ActiveMQConnection connection) { return new ConnectionPool(connection); } }",1.0,
1853,1853,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\PooledMessageConsumer.,PooledMessageConsumer,"public class PooledMessageConsumer implements MessageConsumer { private final PooledSession session; private final MessageConsumer delegate; public PooledMessageConsumer(PooledSession session, MessageConsumer delegate) { this session = session; this delegate = delegate; } Override public void close() throws JMSException { session onConsumerClose(delegate); delegate close(); } Override public MessageListener getMessageListener() throws JMSException { return delegate getMessageListener(); } Override public String getMessageSelector() throws JMSException { return delegate getMessageSelector(); } Override public Message receive() throws JMSException { return delegate receive(); } Override public Message receive(long timeout) throws JMSException { return delegate receive(timeout); } Override public Message receiveNoWait() throws JMSException { return delegate receiveNoWait(); } Override public void setMessageListener(MessageListener listener) throws JMSException { delegate setMessageListener(listener); } Override public String toString() { return PooledMessageConsumer { + delegate + } ; } }",1.0,
1855,1855,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\PooledQueueSender.,PooledQueueSender,"public class PooledQueueSender extends PooledProducer implements QueueSender { public PooledQueueSender(ActiveMQQueueSender messageProducer, Destination destination) throws JMSException { super(messageProducer, destination); } Override public void send(Queue queue, Message message, int i, int i1, long l) throws JMSException { getQueueSender() send(queue, message, i, i1, l); } Override public void send(Queue queue, Message message) throws JMSException { getQueueSender() send(queue, message); } Override public Queue getQueue() throws JMSException { return getQueueSender() getQueue(); } protected ActiveMQQueueSender getQueueSender() { return (ActiveMQQueueSender) getMessageProducer(); } }",1.0,
1857,1857,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\PooledTopicPublisher.,PooledTopicPublisher,"public class PooledTopicPublisher extends PooledProducer implements TopicPublisher { public PooledTopicPublisher(ActiveMQTopicPublisher messageProducer, Destination destination) throws JMSException { super(messageProducer, destination); } Override public Topic getTopic() throws JMSException { return getTopicPublisher() getTopic(); } Override public void publish(Message message) throws JMSException { getTopicPublisher() publish((Topic) getDestination(), message); } Override public void publish(Message message, int i, int i1, long l) throws JMSException { getTopicPublisher() publish((Topic) getDestination(), message, i, i1, l); } Override public void publish(Topic topic, Message message) throws JMSException { getTopicPublisher() publish(topic, message); } Override public void publish(Topic topic, Message message, int i, int i1, long l) throws JMSException { getTopicPublisher() publish(topic, message, i, i1, l); } protected ActiveMQTopicPublisher getTopicPublisher() { return (ActiveMQTopicPublisher) getMessageProducer(); } }",1.0,
1858,1858,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\SessionKey.,SessionKey,"public class SessionKey { private final boolean transacted; private final int ackMode; private int hash; public SessionKey(boolean transacted, int ackMode) { this transacted = transacted; this ackMode = ackMode; hash = ackMode; if (transacted) { hash = 31 * hash + 1; } } public int hashCode() { return hash; } public boolean equals(Object that) { if (this == that) { return true; } if (that instanceof SessionKey) { return equals((SessionKey) that); } return false; } public boolean equals(SessionKey that) { return this transacted == that transacted && this ackMode == that ackMode; } public boolean isTransacted() { return transacted; } public int getAckMode() { return ackMode; } }",1.0,
1859,1859,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\XaConnectionPool.,XaConnectionPool,"public class XaConnectionPool extends ConnectionPool { private TransactionManager transactionManager; public XaConnectionPool(ActiveMQConnection connection, TransactionManager transactionManager) { super(connection); this transactionManager = transactionManager; } public XaConnectionPool(ActiveMQConnection connection, ObjectPoolFactory poolFactory, TransactionManager transactionManager) { this(connection, transactionManager); } Override public Session createSession(boolean transacted, int ackMode) throws JMSException { try { boolean isXa = (transactionManager != null && transactionManager getStatus() != Status STATUS NO TRANSACTION); if (isXa) { transacted = true; ackMode = Session SESSION TRANSACTED; } PooledSession session = (PooledSession) super createSession(transacted, ackMode); if (isXa) { session setIgnoreClose(true); session setIsXa(true); transactionManager getTransaction() registerSynchronization(new Synchronization(session)); incrementReferenceCount(); transactionManager getTransaction() enlistResource(createXaResource(session)); } else { session setIgnoreClose(false); } return session; } catch (RollbackException e) { final JMSException jmsException = new JMSException( Rollback Exception ); jmsException initCause(e); throw jmsException; } catch (SystemException e) { final JMSException jmsException = new JMSException( System Exception ); jmsException initCause(e); throw jmsException; } } protected XAResource createXaResource(PooledSession session) throws JMSException { return session getXAResource(); } protected class Synchronization implements javax transaction Synchronization { private final PooledSession session; private Synchronization(PooledSession session) { this session = session; } public void beforeCompletion() { } public void afterCompletion(int status) { try { session setIgnoreClose(false); session close(); session setIgnoreClose(true); session setIsXa(false); decrementReferenceCount(); } catch (JMSException e) { throw new RuntimeException(e); } } } }",1.0,
1860,1860,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\XaConnectionPool.,Synchronization,protected class Synchronization implements javax transaction Synchronization { private final PooledSession session; private Synchronization(PooledSession session) { this session = session; } public void beforeCompletion() { } public void afterCompletion(int status) { try { session setIgnoreClose(false); session close(); session setIgnoreClose(true); session setIsXa(false); decrementReferenceCount(); } catch (JMSException e) { throw new RuntimeException(e); } } },1.0,
1861,1861,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\XaPooledConnectionFactory.,XaPooledConnectionFactory,"public class XaPooledConnectionFactory extends PooledConnectionFactory { private TransactionManager transactionManager; public XaPooledConnectionFactory() { super(); } public XaPooledConnectionFactory(ActiveMQConnectionFactory connectionFactory) { super(connectionFactory); } public XaPooledConnectionFactory(String brokerURL) { super(brokerURL); } public TransactionManager getTransactionManager() { return transactionManager; } public void setTransactionManager(TransactionManager transactionManager) { this transactionManager = transactionManager; } Override protected ConnectionPool createConnectionPool(ActiveMQConnection connection) { return new XaConnectionPool(connection, getTransactionManager()); } }",1.0,
1863,1863,data,\smellybot\activemq\activemq-pool\src\test\java\org\apache\activemq\pool\ConnectionFailureEvictsFromPoolTest.,ConnectionFailureEvictsFromPoolTest,"public class ConnectionFailureEvictsFromPoolTest extends TestSupport { private static final Logger LOG = LoggerFactory getLogger(ConnectionFailureEvictsFromPoolTest class); private BrokerService broker; private ActiveMQConnectionFactory factory; private PooledConnectionFactory pooledFactory; protected void setUp() throws Exception { broker = new BrokerService(); broker setUseJmx(false); broker setPersistent(false); TransportConnector connector = broker addConnector( tcp broker start(); factory = new ActiveMQConnectionFactory( mock + connector getConnectUri() + closeAsync=false ); pooledFactory = new PooledConnectionFactory(factory); } public void testEviction() throws Exception { PooledConnection connection = (PooledConnection) pooledFactory createConnection(); ActiveMQConnection amqC = connection getConnection(); final CountDownLatch gotExceptionEvent = new CountDownLatch(1); amqC addTransportListener(new TransportListener() { public void onCommand(Object command) { } public void onException(IOException error) { gotExceptionEvent countDown(); } public void transportInterupted() { } public void transportResumed() { } }); sendMessage(connection); LOG info( sent one message worked fine ); createConnectionFailure(connection); try { sendMessage(connection); fail( Expected Error ); } catch (JMSException e) { } finally { connection close(); } assertTrue( exception event propagated ok , gotExceptionEvent await(5, TimeUnit SECONDS)); LOG info( expect new connection after failure ); Connection connection2 = pooledFactory createConnection(); sendMessage(connection2); } private void createConnectionFailure(Connection connection) throws Exception { ActiveMQConnection c = ((PooledConnection)connection) getConnection(); MockTransport t = (MockTransport)c getTransportChannel() narrow(MockTransport class); t onException(new IOException( forcing exception for + getName() + to force pool eviction )); LOG info( arranged for failure, chucked exception ); } private void sendMessage(Connection connection) throws JMSException { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(new ActiveMQQueue( FOO )); producer send(session createTextMessage( Test )); session close(); } protected void tearDown() throws Exception { broker stop(); } }",1.0,
1864,1864,data,\smellybot\activemq\activemq-pool\src\test\java\org\apache\activemq\pool\PooledConnectionFactoryMaximumActiveTest.,PooledConnectionFactoryMaximumActiveTest,"public class PooledConnectionFactoryMaximumActiveTest extends TestCase { public final static Logger LOG = Logger getLogger(PooledConnectionFactoryMaximumActiveTest class); public static Connection conn = null; public static int sleepTimeout = 5000; private static ConcurrentHashMap<Integer, Session> sessions = new ConcurrentHashMap<Integer,Session>(); public PooledConnectionFactoryMaximumActiveTest( String testName ) { super( testName ); } public static void addSession(Session s) { sessions put(s hashCode(), s); } public static Test suite() { return new TestSuite( PooledConnectionFactoryMaximumActiveTest class ); } public void testApp() throws Exception { ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory( vm PooledConnectionFactory cf = new PooledConnectionFactory(amq); cf setMaxConnections(3); cf setMaximumActiveSessionPerConnection(1); cf setBlockIfSessionPoolIsFull(true); conn = cf createConnection(); ExecutorService executor = Executors newFixedThreadPool(2); executor submit(new TestRunner2()); Future<Boolean> result2 = (Future<Boolean>) executor submit(new TestRunner2()); Thread sleep(sleepTimeout); Assert assertEquals(false, result2 isDone()); Assert assertEquals(1, sessions size()); executor shutdownNow(); } }",1.0,
1865,1865,data,\smellybot\activemq\activemq-pool\src\test\java\org\apache\activemq\pool\PooledConnectionFactoryMaximumActiveTest.,TestRunner2,"class TestRunner2 implements Callable<Boolean> { public final static Logger LOG = Logger getLogger(TestRunner2 class); public Boolean call() { Session one = null; try { if (PooledConnectionFactoryMaximumActiveTest conn == null) { LOG error( Connection not yet initialized Aborting test ); return new Boolean(false); } one = PooledConnectionFactoryMaximumActiveTest conn createSession(false, Session AUTO ACKNOWLEDGE); LOG info( Created new Session with id + one); PooledConnectionFactoryMaximumActiveTest addSession(one); Thread sleep(2 * PooledConnectionFactoryMaximumActiveTest sleepTimeout); } catch (Exception ex) { LOG error(ex getMessage()); return new Boolean(false); } finally { if (one != null) try { one close(); } catch (JMSException e) { LOG error(e getMessage()); } } return new Boolean(true); } }",1.0,
1867,1867,data,\smellybot\activemq\activemq-pool\src\test\java\org\apache\activemq\pool\PooledConnectionFactoryTest.,TestRunner,"static class TestRunner implements Callable<Boolean> { public final static Logger LOG = Logger getLogger(TestRunner class); public Boolean call() { Connection conn = null; Session one = null; try { ActiveMQConnectionFactory amq = new ActiveMQConnectionFactory( vm PooledConnectionFactory cf = new PooledConnectionFactory(amq); cf setMaxConnections(3); cf setMaximumActiveSessionPerConnection(1); cf setBlockIfSessionPoolIsFull(false); conn = cf createConnection(); one = conn createSession(false, Session AUTO ACKNOWLEDGE); Session two = null; try { two = conn createSession(false, Session AUTO ACKNOWLEDGE); two close(); LOG error( Expected JMSException wasn t thrown ); Assert fail( seconds call to Connection createSession() was supposed + to raise an JMSException as internal session pool + is exhausted This did not happen and indiates a problem ); return new Boolean(false); } catch (JMSException ex) { if (ex getCause() getClass() == java util NoSuchElementException class) { LOG info( Caught expected + ex); } else { LOG error(ex); return new Boolean(false); } } finally { if (one != null) one close(); if (conn != null) conn close(); } } catch (Exception ex) { LOG error(ex getMessage()); return new Boolean(false); } return new Boolean(true); } }",1.0,
1871,1871,data,\smellybot\activemq\activemq-pool\src\test\java\org\apache\activemq\pool\PooledConnectionTest.,PooledConnectionTest,public class PooledConnectionTest extends TestCase { private Logger log = LoggerFactory getLogger(PooledConnectionTest class); Override public void setUp() throws Exception { log debug( setUp() called ); } Override public void tearDown() throws Exception { log debug( tearDown() called ); } public void testRepeatedSetClientIDCalls() throws Exception { log debug( running testRepeatedSetClientIDCalls() ); ConnectionFactory cf = createPooledConnectionFactory(); Connection conn = cf createConnection(); conn setClientID( newID ); try { conn setClientID( newID ); conn start(); conn close(); cf = null; } catch (IllegalStateException ise) { log error( Repeated calls to ActiveMQConnection setClientID( newID ) caused + ise getMessage()); Assert fail( Repeated calls to ActiveMQConnection setClientID( newID ) caused + ise getMessage()); } cf = createPooledConnectionFactory(); conn = cf createConnection(); conn setClientID( newID1 ); try { conn setClientID( newID2 ); Assert fail( calling ActiveMQConnection setClientID() twice with different clientID must raise an IllegalStateException ); } catch (IllegalStateException ise) { log debug( Correctly received + ise); } finally { conn close(); } cf = createPooledConnectionFactory(); conn = cf createConnection(); try { conn start(); conn setClientID( newID3 ); Assert fail( Calling setClientID() after start() mut raise a JMSException ); } catch (IllegalStateException ise) { log debug( Correctly received + ise); } finally { conn close(); } log debug( Test finished ); } protected ConnectionFactory createPooledConnectionFactory() { ConnectionFactory cf = new PooledConnectionFactory( vm ((PooledConnectionFactory)cf) setMaxConnections(1); log debug( ConnectionFactory initialized ); return cf; } },1.0,
1872,1872,data,\smellybot\activemq\activemq-pool\src\test\java\org\apache\activemq\pool\PooledSessionExhaustionTest.,PooledSessionExhaustionTest,"public class PooledSessionExhaustionTest extends TestCase { private static final String QUEUE = FOO ; private static final int NUM MESSAGES = 700; private Logger logger = Logger getLogger(getClass()); private BrokerService broker; private ActiveMQConnectionFactory factory; private PooledConnectionFactory pooledFactory; private String connectionUri; private int numReceived = 0; Override protected void setUp() throws Exception { broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(false); TransportConnector connector = broker addConnector( tcp broker start(); connectionUri = connector getPublishableConnectString(); factory = new ActiveMQConnectionFactory(connectionUri); pooledFactory = new PooledConnectionFactory(factory); pooledFactory setMaxConnections(1); pooledFactory setBlockIfSessionPoolIsFull(false); } Override protected void tearDown() throws Exception { broker stop(); broker waitUntilStopped(); broker = null; } public void sendMessages(ConnectionFactory connectionFactory) throws Exception { for (int i = 0; i < NUM MESSAGES; i++) { Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(QUEUE); MessageProducer producer = session createProducer(destination); String msgTo = hello ; TextMessage message = session createTextMessage(msgTo); producer send(message); connection close(); logger debug( sent + i + messages using + connectionFactory getClass()); } } public void testCanExhaustSessions() throws Exception { Thread thread = new Thread(new Runnable() { public void run() { try { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(connectionUri); Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(QUEUE); MessageConsumer consumer = session createConsumer(destination); for (int i = 0; i < NUM MESSAGES; ++i) { Message msg = consumer receive(5000); if (msg == null) { return; } numReceived++; if (numReceived % 20 == 0) { logger debug( received + numReceived + messages ); System runFinalization(); } } } catch (Exception e) { throw new RuntimeException(e); } } }); thread start(); sendMessages(pooledFactory); thread join(); assertEquals(NUM MESSAGES, numReceived); } }",1.0,
1874,1874,data,\smellybot\activemq\activemq-pool\src\test\java\org\apache\activemq\pool\PooledTopicPublisherTest.,PooledTopicPublisherTest,"public class PooledTopicPublisherTest extends TestSupport { private TopicConnection connection; public void testPooledConnectionFactory() throws Exception { ActiveMQTopic topic = new ActiveMQTopic( test ); PooledConnectionFactory pcf = new PooledConnectionFactory(); pcf setConnectionFactory(new ActiveMQConnectionFactory( vm connection = (TopicConnection) pcf createConnection(); TopicSession session = connection createTopicSession(false, Session AUTO ACKNOWLEDGE); TopicPublisher publisher = session createPublisher(topic); publisher publish(session createMessage()); } public void testSetGetExceptionListener() throws Exception { PooledConnectionFactory pcf = new PooledConnectionFactory(); pcf setConnectionFactory(new ActiveMQConnectionFactory( vm connection = (TopicConnection) pcf createConnection(); ExceptionListener listener = new ExceptionListener() { public void onException(JMSException exception) { } }; connection setExceptionListener(listener); assertEquals(listener, connection getExceptionListener()); } public void testPooledConnectionAfterInactivity() throws Exception { BrokerService broker = new BrokerService(); TransportConnector networkConnector = broker addConnector( tcp broker setPersistent(false); broker setUseJmx(false); broker start(); SocketProxy proxy = new SocketProxy(networkConnector getConnectUri()); PooledConnectionFactory pcf = new PooledConnectionFactory(); String uri = proxy getUrl() toString() + trace=true&wireFormat maxInactivityDuration=500&wireFormat maxInactivityDurationInitalDelay=500 ; pcf setConnectionFactory(new ActiveMQConnectionFactory(uri)); PooledConnection conn = (PooledConnection) pcf createConnection(); ActiveMQConnection amq = conn getConnection(); assertNotNull(amq); final CountDownLatch gotException = new CountDownLatch(1); conn setExceptionListener(new ExceptionListener() { public void onException(JMSException exception) { gotException countDown(); }}); conn setClientID(getName()); proxy pause(); TimeUnit SECONDS sleep(2); conn close(); } Override protected void tearDown() throws Exception { if (connection != null) { connection close(); connection = null; } } }",1.0,
1875,1875,data,\smellybot\activemq\activemq-pool\src\test\java\org\apache\activemq\pool\XAConnectionPoolTest.,XAConnectionPoolTest,"public class XAConnectionPoolTest extends TestSupport { public void testAfterCompletionCanClose() throws Exception { final Vector<Synchronization> syncs = new Vector<Synchronization>(); ActiveMQTopic topic = new ActiveMQTopic( test ); XaPooledConnectionFactory pcf = new XaPooledConnectionFactory(); pcf setConnectionFactory(new ActiveMQXAConnectionFactory( vm pcf setTransactionManager(new TransactionManager(){ Override public void begin() throws NotSupportedException, SystemException { } Override public void commit() throws HeuristicMixedException, HeuristicRollbackException, IllegalStateException, RollbackException, SecurityException, SystemException { } Override public int getStatus() throws SystemException { return Status STATUS ACTIVE; } Override public Transaction getTransaction() throws SystemException { return new Transaction() { Override public void commit() throws HeuristicMixedException, HeuristicRollbackException, RollbackException, SecurityException, SystemException { } Override public boolean delistResource(XAResource xaRes, int flag) throws IllegalStateException, SystemException { return false; } Override public boolean enlistResource(XAResource xaRes) throws IllegalStateException, RollbackException, SystemException { return false; } Override public int getStatus() throws SystemException { return 0; } Override public void registerSynchronization(Synchronization synch) throws IllegalStateException, RollbackException, SystemException { syncs add(synch); } Override public void rollback() throws IllegalStateException, SystemException { } Override public void setRollbackOnly() throws IllegalStateException, SystemException { } }; } Override public void resume(Transaction tobj) throws IllegalStateException, InvalidTransactionException, SystemException { } Override public void rollback() throws IllegalStateException, SecurityException, SystemException { } Override public void setRollbackOnly() throws IllegalStateException, SystemException { } Override public void setTransactionTimeout(int seconds) throws SystemException { } Override public Transaction suspend() throws SystemException { return null; } }); TopicConnection connection = (TopicConnection) pcf createConnection(); TopicSession session = connection createTopicSession(false, Session AUTO ACKNOWLEDGE); assertTrue(session instanceof PooledSession); PooledSession pooledSession = (PooledSession) session; assertTrue(pooledSession getInternalSession() instanceof ActiveMQXASession); TopicPublisher publisher = session createPublisher(topic); publisher publish(session createMessage()); for (Synchronization sync syncs) { sync beforeCompletion(); } for (Synchronization sync syncs) { sync afterCompletion(1); } connection close(); } }",1.0,
1878,1878,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\ActiveMQConnectionRequestInfo.,ActiveMQConnectionRequestInfo,"public class ActiveMQConnectionRequestInfo implements ConnectionRequestInfo, Serializable, Cloneable { private static final long serialVersionUID = -5754338187296859149L; private String userName; private String password; private String serverUrl; private String clientid; private Boolean useInboundSession; private RedeliveryPolicy redeliveryPolicy; private ActiveMQPrefetchPolicy prefetchPolicy; public ActiveMQConnectionRequestInfo copy() { try { ActiveMQConnectionRequestInfo answer = (ActiveMQConnectionRequestInfo)clone(); if (redeliveryPolicy != null) { answer redeliveryPolicy = redeliveryPolicy copy(); } return answer; } catch (CloneNotSupportedException e) { throw new RuntimeException( Could not clone + e, e); } } public boolean isConnectionFactoryConfigured() { return serverUrl != null || clientid != null || redeliveryPolicy != null || prefetchPolicy != null; } public void configure(ActiveMQConnectionFactory factory) { if (serverUrl != null) { factory setBrokerURL(serverUrl); } if (clientid != null) { factory setClientID(clientid); } if (redeliveryPolicy != null) { factory setRedeliveryPolicy(redeliveryPolicy); } if (prefetchPolicy != null) { factory setPrefetchPolicy(prefetchPolicy); } } public int hashCode() { int rc = 0; if (useInboundSession != null) { rc ^= useInboundSession hashCode(); } if (serverUrl != null) { rc ^= serverUrl hashCode(); } return rc; } public boolean equals(Object o) { if (o == null) { return false; } if (!getClass() equals(o getClass())) { return false; } ActiveMQConnectionRequestInfo i = (ActiveMQConnectionRequestInfo)o; if (notEqual(serverUrl, i serverUrl)) { return false; } if (notEqual(useInboundSession, i useInboundSession)) { return false; } return true; } private boolean notEqual(Object o1, Object o2) { return (o1 == null ^ o2 == null) || (o1 != null && !o1 equals(o2)); } public String getServerUrl() { return serverUrl; } public void setServerUrl(String url) { this serverUrl = url; } public String getPassword() { return password; } public void setPassword(String password) { this password = password; } public String getUserName() { return userName; } public void setUserName(String userid) { this userName = userid; } public String getClientid() { return clientid; } public void setClientid(String clientid) { this clientid = clientid; } Override public String toString() { return new StringBuffer( ActiveMQConnectionRequestInfo{ userName = ) append(userName) append( ) append( , serverUrl = ) append(serverUrl) append( ) append( , clientid = ) append(clientid) append( ) append( , userName = ) append(userName) append( ) append( , useInboundSession = ) append(useInboundSession) append( } ) toString(); } public Boolean getUseInboundSession() { return useInboundSession; } public void setUseInboundSession(Boolean useInboundSession) { this useInboundSession = useInboundSession; } public boolean isUseInboundSessionEnabled() { return useInboundSession != null && useInboundSession booleanValue(); } public Double getRedeliveryBackOffMultiplier() { return Double valueOf(redeliveryPolicy() getBackOffMultiplier()); } public Long getInitialRedeliveryDelay() { return Long valueOf(redeliveryPolicy() getInitialRedeliveryDelay()); } public Long getMaximumRedeliveryDelay() { return Long valueOf(redeliveryPolicy() getMaximumRedeliveryDelay()); } public Integer getMaximumRedeliveries() { return Integer valueOf(redeliveryPolicy() getMaximumRedeliveries()); } public Boolean getRedeliveryUseExponentialBackOff() { return Boolean valueOf(redeliveryPolicy() isUseExponentialBackOff()); } public void setRedeliveryBackOffMultiplier(Double value) { if (value != null) { redeliveryPolicy() setBackOffMultiplier(value); } } public void setInitialRedeliveryDelay(Long value) { if (value != null) { redeliveryPolicy() setInitialRedeliveryDelay(value longValue()); } } public void setMaximumRedeliveryDelay(Long value) { if (value != null) { redeliveryPolicy() setMaximumRedeliveryDelay(value longValue()); } } public void setMaximumRedeliveries(Integer value) { if (value != null) { redeliveryPolicy() setMaximumRedeliveries(value intValue()); } } public void setRedeliveryUseExponentialBackOff(Boolean value) { if (value != null) { redeliveryPolicy() setUseExponentialBackOff(value booleanValue()); } } public Integer getDurableTopicPrefetch() { return Integer valueOf(prefetchPolicy() getDurableTopicPrefetch()); } public Integer getOptimizeDurableTopicPrefetch() { return Integer valueOf(prefetchPolicy() getOptimizeDurableTopicPrefetch()); } public Integer getInputStreamPrefetch() { return Integer valueOf(prefetchPolicy() getInputStreamPrefetch()); } public Integer getQueueBrowserPrefetch() { return Integer valueOf(prefetchPolicy() getQueueBrowserPrefetch()); } public Integer getQueuePrefetch() { return Integer valueOf(prefetchPolicy() getQueuePrefetch()); } public Integer getTopicPrefetch() { return Integer valueOf(prefetchPolicy() getTopicPrefetch()); } public void setAllPrefetchValues(Integer i) { if (i != null) { prefetchPolicy() setAll(i intValue()); } } public void setDurableTopicPrefetch(Integer durableTopicPrefetch) { if (durableTopicPrefetch != null) { prefetchPolicy() setDurableTopicPrefetch(durableTopicPrefetch intValue()); } } public void setOptimizeDurableTopicPrefetch(Integer optimizeDurableTopicPrefetch) { if (optimizeDurableTopicPrefetch != null) { prefetchPolicy() setOptimizeDurableTopicPrefetch(optimizeDurableTopicPrefetch intValue()); } } public void setInputStreamPrefetch(Integer inputStreamPrefetch) { if (inputStreamPrefetch != null) { prefetchPolicy() setInputStreamPrefetch(inputStreamPrefetch intValue()); } } public void setQueueBrowserPrefetch(Integer queueBrowserPrefetch) { if (queueBrowserPrefetch != null) { prefetchPolicy() setQueueBrowserPrefetch(queueBrowserPrefetch intValue()); } } public void setQueuePrefetch(Integer queuePrefetch) { if (queuePrefetch != null) { prefetchPolicy() setQueuePrefetch(queuePrefetch intValue()); } } public void setTopicPrefetch(Integer topicPrefetch) { if (topicPrefetch != null) { prefetchPolicy() setTopicPrefetch(topicPrefetch intValue()); } } public RedeliveryPolicy redeliveryPolicy() { if (redeliveryPolicy == null) { redeliveryPolicy = new RedeliveryPolicy(); } return redeliveryPolicy; } public ActiveMQPrefetchPolicy prefetchPolicy() { if (prefetchPolicy == null) { prefetchPolicy = new ActiveMQPrefetchPolicy(); } return prefetchPolicy; } }",1.0,
1880,1880,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\ActiveMQEndpointActivationKey.,ActiveMQEndpointActivationKey,"public class ActiveMQEndpointActivationKey { private final MessageEndpointFactory messageEndpointFactory; private final MessageActivationSpec activationSpec; protected ActiveMQEndpointActivationKey() { this(null, null); } public ActiveMQEndpointActivationKey(MessageEndpointFactory messageEndpointFactory, MessageActivationSpec activationSpec) { this messageEndpointFactory = messageEndpointFactory; this activationSpec = activationSpec; } public MessageActivationSpec getActivationSpec() { return activationSpec; } public MessageEndpointFactory getMessageEndpointFactory() { return messageEndpointFactory; } public int hashCode() { return messageEndpointFactory hashCode() ^ activationSpec hashCode(); } public boolean equals(Object obj) { if (this == obj) { return true; } if (obj == null || !(obj instanceof ActiveMQEndpointActivationKey)) { return false; } ActiveMQEndpointActivationKey o = (ActiveMQEndpointActivationKey) obj; return o activationSpec == activationSpec && o messageEndpointFactory == messageEndpointFactory; } }",1.0,
1882,1882,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\ActiveMQManagedConnection.,ActiveMQManagedConnection,"public class ActiveMQManagedConnection implements ManagedConnection, ExceptionListener { private static final Logger LOG = LoggerFactory getLogger(ActiveMQManagedConnection class); private PrintWriter logWriter; private final ActiveMQConnection physicalConnection; private final TransactionContext transactionContext; private final List<ManagedConnectionProxy> proxyConnections = new CopyOnWriteArrayList<ManagedConnectionProxy>(); private final List<ConnectionEventListener> listeners = new CopyOnWriteArrayList<ConnectionEventListener>(); private final LocalAndXATransaction localAndXATransaction; private Subject subject; private ActiveMQConnectionRequestInfo info; private boolean destroyed; public ActiveMQManagedConnection(Subject subject, ActiveMQConnection physicalConnection, ActiveMQConnectionRequestInfo info) throws ResourceException { try { this subject = subject; this info = info; this physicalConnection = physicalConnection; this transactionContext = new TransactionContext(physicalConnection); this localAndXATransaction = new LocalAndXATransaction(transactionContext) { public void setInManagedTx(boolean inManagedTx) throws JMSException { super setInManagedTx(inManagedTx); for (ManagedConnectionProxy proxy proxyConnections) { proxy setUseSharedTxContext(inManagedTx); } } }; this transactionContext setLocalTransactionEventListener(new LocalTransactionEventListener() { public void beginEvent() { fireBeginEvent(); } public void commitEvent() { fireCommitEvent(); } public void rollbackEvent() { fireRollbackEvent(); } }); physicalConnection setExceptionListener(this); } catch (JMSException e) { throw new ResourceException( Could not create a new connection + e getMessage(), e); } } public boolean isInManagedTx() { return localAndXATransaction isInManagedTx(); } public static boolean matches(Object x, Object y) { if (x == null ^ y == null) { return false; } if (x != null && !x equals(y)) { return false; } return true; } public void associate(Subject subject, ActiveMQConnectionRequestInfo info) throws JMSException { if (!matches(info getUserName(), this info getUserName()) || !matches(info getPassword(), this info getPassword())) { physicalConnection changeUserInfo(info getUserName(), info getPassword()); } if (info getClientid() != null && info getClientid() length() > 0) { physicalConnection setClientID(info getClientid()); } this subject = subject; this info = info; } public Connection getPhysicalConnection() { return physicalConnection; } private void fireBeginEvent() { ConnectionEvent event = new ConnectionEvent(ActiveMQManagedConnection this, ConnectionEvent LOCAL TRANSACTION STARTED); for(ConnectionEventListener l listeners) { l localTransactionStarted(event); } } private void fireCommitEvent() { ConnectionEvent event = new ConnectionEvent(ActiveMQManagedConnection this, ConnectionEvent LOCAL TRANSACTION COMMITTED); for(ConnectionEventListener l listeners) { l localTransactionCommitted(event); } } private void fireRollbackEvent() { ConnectionEvent event = new ConnectionEvent(ActiveMQManagedConnection this, ConnectionEvent LOCAL TRANSACTION ROLLEDBACK); for(ConnectionEventListener l listeners) { l localTransactionRolledback(event); } } private void fireCloseEvent(ManagedConnectionProxy proxy) { ConnectionEvent event = new ConnectionEvent(ActiveMQManagedConnection this, ConnectionEvent CONNECTION CLOSED); event setConnectionHandle(proxy); for(ConnectionEventListener l listeners) { l connectionClosed(event); } } private void fireErrorOccurredEvent(Exception error) { ConnectionEvent event = new ConnectionEvent(ActiveMQManagedConnection this, ConnectionEvent CONNECTION ERROR OCCURRED, error); for(ConnectionEventListener l listeners) { l connectionErrorOccurred(event); } } public Object getConnection(Subject subject, ConnectionRequestInfo info) throws ResourceException { ManagedConnectionProxy proxy = new ManagedConnectionProxy(this); proxyConnections add(proxy); return proxy; } private boolean isDestroyed() { return destroyed; } public void destroy() throws ResourceException { if (isDestroyed()) { return; } cleanup(); try { physicalConnection close(); destroyed = true; } catch (JMSException e) { LOG info( Error occured during close of a JMS connection , e); } } public void cleanup() throws ResourceException { if (isDestroyed()) { return; } for (ManagedConnectionProxy proxy proxyConnections) { proxy cleanup(); } proxyConnections clear(); try { physicalConnection cleanup(); } catch (JMSException e) { throw new ResourceException( Could cleanup the ActiveMQ connection + e, e); } localAndXATransaction cleanup(); } public void associateConnection(Object connection) throws ResourceException { if (connection instanceof ManagedConnectionProxy) { ManagedConnectionProxy proxy = (ManagedConnectionProxy)connection; proxyConnections add(proxy); } else { throw new ResourceException( Not supported associating connection instance of + connection getClass() getName()); } } public void addConnectionEventListener(ConnectionEventListener listener) { listeners add(listener); } public void removeConnectionEventListener(ConnectionEventListener listener) { listeners remove(listener); } public XAResource getXAResource() throws ResourceException { return localAndXATransaction; } public LocalTransaction getLocalTransaction() throws ResourceException { return localAndXATransaction; } public ManagedConnectionMetaData getMetaData() throws ResourceException { return new ManagedConnectionMetaData() { public String getEISProductName() throws ResourceException { if (physicalConnection == null) { throw new ResourceException( Not connected ); } try { return physicalConnection getMetaData() getJMSProviderName(); } catch (JMSException e) { throw new ResourceException( Error accessing provider , e); } } public String getEISProductVersion() throws ResourceException { if (physicalConnection == null) { throw new ResourceException( Not connected ); } try { return physicalConnection getMetaData() getProviderVersion(); } catch (JMSException e) { throw new ResourceException( Error accessing provider , e); } } public int getMaxConnections() throws ResourceException { if (physicalConnection == null) { throw new ResourceException( Not connected ); } return Integer MAX VALUE; } public String getUserName() throws ResourceException { if (physicalConnection == null) { throw new ResourceException( Not connected ); } try { return physicalConnection getClientID(); } catch (JMSException e) { throw new ResourceException( Error accessing provider , e); } } }; } public void setLogWriter(PrintWriter logWriter) throws ResourceException { this logWriter = logWriter; } public PrintWriter getLogWriter() throws ResourceException { return logWriter; } public boolean matches(Subject subject, ConnectionRequestInfo info) { if (info == null) { return false; } if (info getClass() != ActiveMQConnectionRequestInfo class) { return false; } if (subject == null ^ this subject == null) { return false; } if (subject != null && !subject equals(this subject)) { return false; } return info equals(this info); } public void proxyClosedEvent(ManagedConnectionProxy proxy) { proxyConnections remove(proxy); proxy cleanup(); fireCloseEvent(proxy); } public void onException(JMSException e) { LOG warn( Connection failed + e); LOG debug( Cause , e); for (ManagedConnectionProxy proxy proxyConnections) { proxy onException(e); } fireErrorOccurredEvent(e); } public TransactionContext getTransactionContext() { return transactionContext; } }",1.0,
1883,1883,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\ActiveMQManagedConnectionFactory.,ActiveMQManagedConnectionFactory,"public class ActiveMQManagedConnectionFactory extends ActiveMQConnectionSupport implements ManagedConnectionFactory, ResourceAdapterAssociation { private static final long serialVersionUID = 6196921962230582875L; private PrintWriter logWriter; public void setResourceAdapter(ResourceAdapter adapter) throws ResourceException { if (!(adapter instanceof MessageResourceAdapter)) { throw new ResourceException( ResourceAdapter is not of type + MessageResourceAdapter class getName()); } else { if ( log isDebugEnabled() ) { log debug( copying standard ResourceAdapter configuration properties ); } ActiveMQConnectionRequestInfo baseInfo = ((MessageResourceAdapter) adapter) getInfo() copy(); if (getClientid() == null) { setClientid(baseInfo getClientid()); } if (getPassword() == null) { setPassword(baseInfo getPassword()); } if (getServerUrl() == null) { setServerUrl(baseInfo getServerUrl()); } if (getUseInboundSession() == null) { setUseInboundSession(baseInfo getUseInboundSession()); } if (getUserName() == null) { setUserName(baseInfo getUserName()); } if (getDurableTopicPrefetch() != null) { setDurableTopicPrefetch(baseInfo getDurableTopicPrefetch()); } if (getOptimizeDurableTopicPrefetch() != null) { setOptimizeDurableTopicPrefetch(baseInfo getOptimizeDurableTopicPrefetch()); } if (getQueuePrefetch() != null) { setQueuePrefetch(baseInfo getQueuePrefetch()); } if (getQueueBrowserPrefetch() != null) { setQueueBrowserPrefetch(baseInfo getQueueBrowserPrefetch()); } if (getTopicPrefetch() != null) { setTopicPrefetch(baseInfo getTopicPrefetch()); } if (getInputStreamPrefetch() != null) { setInputStreamPrefetch(baseInfo getInputStreamPrefetch()); } } } public ResourceAdapter getResourceAdapter() { return null; } Override public boolean equals(Object object) { if (object == null || object getClass() != ActiveMQManagedConnectionFactory class) { return false; } return ((ActiveMQManagedConnectionFactory)object) getInfo() equals(getInfo()); } Override public int hashCode() { return getInfo() hashCode(); } private void writeObject(ObjectOutputStream out) throws IOException { if ( logWriter != null && !(logWriter instanceof Serializable) ) { logWriter = null; } out defaultWriteObject(); out writeObject(getInfo()); } private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException { in defaultReadObject(); setInfo((ActiveMQConnectionRequestInfo) in readObject()); log = LoggerFactory getLogger(getClass()); } public Object createConnectionFactory(ConnectionManager manager) throws ResourceException { return new ActiveMQConnectionFactory(this, manager, getInfo()); } public Object createConnectionFactory() throws ResourceException { return new ActiveMQConnectionFactory(this, new SimpleConnectionManager(), getInfo()); } public ManagedConnection createManagedConnection( Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException { ActiveMQConnectionRequestInfo amqInfo = getInfo(); if ( connectionRequestInfo instanceof ActiveMQConnectionRequestInfo ) { amqInfo = (ActiveMQConnectionRequestInfo) connectionRequestInfo; } try { return new ActiveMQManagedConnection(subject, makeConnection(amqInfo), amqInfo); } catch (JMSException e) { throw new ResourceException( Could not create connection , e); } } public ManagedConnection matchManagedConnections( Set connections, Subject subject, ConnectionRequestInfo connectionRequestInfo) throws ResourceException { Iterator iterator = connections iterator(); while (iterator hasNext()) { ActiveMQManagedConnection c = (ActiveMQManagedConnection)iterator next(); if (c matches(subject, connectionRequestInfo)) { try { c associate(subject, (ActiveMQConnectionRequestInfo) connectionRequestInfo); return c; } catch (JMSException e) { throw new ResourceException(e); } } } return null; } public void setLogWriter(PrintWriter aLogWriter) throws ResourceException { if ( log isTraceEnabled() ) { log trace( setting log writer [ + aLogWriter + ] ); } this logWriter = aLogWriter; } public PrintWriter getLogWriter() throws ResourceException { if ( log isTraceEnabled() ) { log trace( getting log writer [ + logWriter + ] ); } return logWriter; } }",1.0,
1885,1885,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\InboundConnectionProxy.,InboundConnectionProxy,"public class InboundConnectionProxy implements Connection, QueueConnection, TopicConnection { public Session createSession(boolean transacted, int ackMode) throws JMSException { return new InboundSessionProxy(); } public QueueSession createQueueSession(boolean transacted, int ackMode) throws JMSException { return new InboundSessionProxy(); } public TopicSession createTopicSession(boolean transacted, int ackMode) throws JMSException { return new InboundSessionProxy(); } public void start() throws JMSException { } public void stop() throws JMSException { } public void close() throws JMSException { } public ConnectionMetaData getMetaData() throws JMSException { return ActiveMQConnectionMetaData INSTANCE; } public String getClientID() throws JMSException { throw createNotSupported( getClientID() ); } public void setClientID(String s) throws JMSException { throw createNotSupported( setClient() ); } public ExceptionListener getExceptionListener() throws JMSException { throw createNotSupported( getExceptionListener() ); } public void setExceptionListener(ExceptionListener exceptionListener) throws JMSException { throw createNotSupported( setExceptionListener() ); } public ConnectionConsumer createConnectionConsumer(Destination destination, String s, ServerSessionPool serverSessionPool, int i) throws JMSException { throw createNotSupported( createConnectionConsumer() ); } public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String s, String s1, ServerSessionPool serverSessionPool, int i) throws JMSException { throw createNotSupported( createDurableConnectionConsumer() ); } public ConnectionConsumer createConnectionConsumer(Queue queue, String s, ServerSessionPool serverSessionPool, int i) throws JMSException { throw createNotSupported( createConnectionConsumer() ); } public ConnectionConsumer createConnectionConsumer(Topic topic, String s, ServerSessionPool serverSessionPool, int i) throws JMSException { throw createNotSupported( createConnectionConsumer() ); } protected JMSException createNotSupported(String text) { return new JMSException( Operation + text + is not supported for this proxy JCA ResourceAdapter provider ); } }",1.0,
1886,1886,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\InboundConnectionProxyFactory.,InboundConnectionProxyFactory,"public class InboundConnectionProxyFactory implements ConnectionFactory, QueueConnectionFactory, TopicConnectionFactory { public Connection createConnection() throws JMSException { return new InboundConnectionProxy(); } public Connection createConnection(String userName, String password) throws JMSException { return createConnection(); } public QueueConnection createQueueConnection() throws JMSException { return new InboundConnectionProxy(); } public QueueConnection createQueueConnection(String userName, String password) throws JMSException { return createQueueConnection(); } public TopicConnection createTopicConnection() throws JMSException { return new InboundConnectionProxy(); } public TopicConnection createTopicConnection(String userName, String password) throws JMSException { return createTopicConnection(); } }",1.0,
1887,1887,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\InboundContextSupport.,InboundContextSupport,public final class InboundContextSupport { private static final ThreadLocal<InboundContext> THREAD LOCAL = new ThreadLocal<InboundContext>(); private InboundContextSupport() { } public static InboundContext getActiveSessionAndProducer() { return THREAD LOCAL get(); } public static void register(InboundContext sessionAndProducer) { THREAD LOCAL set(sessionAndProducer); } public static void unregister(InboundContext sessionAndProducer) { THREAD LOCAL set(null); } },1.0,
1888,1888,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\InboundMessageProducerProxy.,InboundMessageProducerProxy,"public class InboundMessageProducerProxy implements MessageProducer, QueueSender, TopicPublisher { private MessageProducer messageProducer; private Destination destination; private int deliveryMode; private boolean disableMessageID; private boolean disableMessageTimestamp; private int priority; private long timeToLive; public InboundMessageProducerProxy(MessageProducer messageProducer, Destination destination) throws JMSException { this messageProducer = messageProducer; this destination = destination; this deliveryMode = messageProducer getDeliveryMode(); this disableMessageID = messageProducer getDisableMessageID(); this disableMessageTimestamp = messageProducer getDisableMessageTimestamp(); this priority = messageProducer getPriority(); this timeToLive = messageProducer getTimeToLive(); } public void close() throws JMSException { messageProducer setDeliveryMode(deliveryMode); messageProducer setDisableMessageID(disableMessageID); messageProducer setDisableMessageTimestamp(disableMessageTimestamp); messageProducer setPriority(priority); messageProducer setTimeToLive(timeToLive); } public Destination getDestination() throws JMSException { return destination; } public int getDeliveryMode() throws JMSException { return messageProducer getDeliveryMode(); } public boolean getDisableMessageID() throws JMSException { return messageProducer getDisableMessageID(); } public boolean getDisableMessageTimestamp() throws JMSException { return messageProducer getDisableMessageTimestamp(); } public int getPriority() throws JMSException { return messageProducer getPriority(); } public long getTimeToLive() throws JMSException { return messageProducer getTimeToLive(); } public void send(Destination destination, Message message) throws JMSException { if (destination == null) { destination = this destination; } messageProducer send(destination, message); } public void send(Destination destination, Message message, int deliveryMode, int priority, long timeToLive) throws JMSException { if (destination == null) { destination = this destination; } messageProducer send(destination, message, deliveryMode, priority, timeToLive); } public void send(Message message) throws JMSException { messageProducer send(destination, message); } public void send(Message message, int deliveryMode, int priority, long timeToLive) throws JMSException { messageProducer send(destination, message, deliveryMode, priority, timeToLive); } public void setDeliveryMode(int i) throws JMSException { messageProducer setDeliveryMode(i); } public void setDisableMessageID(boolean b) throws JMSException { messageProducer setDisableMessageID(b); } public void setDisableMessageTimestamp(boolean b) throws JMSException { messageProducer setDisableMessageTimestamp(b); } public void setPriority(int i) throws JMSException { messageProducer setPriority(i); } public void setTimeToLive(long l) throws JMSException { messageProducer setTimeToLive(l); } public Queue getQueue() throws JMSException { return (Queue) messageProducer getDestination(); } public void send(Queue arg0, Message arg1) throws JMSException { messageProducer send(arg0, arg1); } public void send(Queue arg0, Message arg1, int arg2, int arg3, long arg4) throws JMSException { messageProducer send(arg0, arg1, arg2, arg3, arg4); } public Topic getTopic() throws JMSException { return (Topic) messageProducer getDestination(); } public void publish(Message arg0) throws JMSException { messageProducer send(arg0); } public void publish(Message arg0, int arg1, int arg2, long arg3) throws JMSException { messageProducer send(arg0, arg1, arg2, arg3); } public void publish(Topic arg0, Message arg1) throws JMSException { messageProducer send(arg0, arg1); } public void publish(Topic arg0, Message arg1, int arg2, int arg3, long arg4) throws JMSException { messageProducer send(arg0, arg1, arg2, arg3, arg4); } }",1.0,
1889,1889,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\InboundSessionProxy.,InboundSessionProxy,"public class InboundSessionProxy implements Session, QueueSession, TopicSession { private InboundContext sessionAndProducer; public Session getSession() throws JMSException { return getSessionAndProducer() getSession(); } public QueueSession getQueueSession() throws JMSException { Session session = getSession(); if (session instanceof QueueSession) { return (QueueSession)session; } else { throw new JMSException( The underlying JMS Session does not support QueueSession semantics + session); } } public TopicSession getTopicSession() throws JMSException { Session session = getSession(); if (session instanceof TopicSession) { return (TopicSession)session; } else { throw new JMSException( The underlying JMS Session does not support TopicSession semantics + session); } } public InboundContext getSessionAndProducer() throws JMSException { if (sessionAndProducer == null) { sessionAndProducer = InboundContextSupport getActiveSessionAndProducer(); if (sessionAndProducer == null) { throw new JMSException( No currently active Session This JMS provider cannot be used outside a MessageListener onMessage() invocation ); } } return sessionAndProducer; } public MessageProducer createProducer(Destination destination) throws JMSException { return new InboundMessageProducerProxy(getSessionAndProducer() getMessageProducer(), destination); } public void close() throws JMSException { } public void commit() throws JMSException { } public void rollback() throws JMSException { } public void recover() throws JMSException { } public void run() { try { getSession() run(); } catch (JMSException e) { throw new RuntimeException( Failed to run() on session due to + e, e); } } public QueueBrowser createBrowser(Queue queue) throws JMSException { return getSession() createBrowser(queue); } public QueueBrowser createBrowser(Queue queue, String s) throws JMSException { return getSession() createBrowser(queue, s); } public BytesMessage createBytesMessage() throws JMSException { return getSession() createBytesMessage(); } public MessageConsumer createConsumer(Destination destination) throws JMSException { return getSession() createConsumer(destination); } public MessageConsumer createConsumer(Destination destination, String s) throws JMSException { return getSession() createConsumer(destination, s); } public MessageConsumer createConsumer(Destination destination, String s, boolean b) throws JMSException { return getSession() createConsumer(destination, s, b); } public TopicSubscriber createDurableSubscriber(Topic topic, String s) throws JMSException { return getSession() createDurableSubscriber(topic, s); } public TopicSubscriber createDurableSubscriber(Topic topic, String s, String s1, boolean b) throws JMSException { return getSession() createDurableSubscriber(topic, s, s1, b); } public MapMessage createMapMessage() throws JMSException { return getSession() createMapMessage(); } public Message createMessage() throws JMSException { return getSession() createMessage(); } public ObjectMessage createObjectMessage() throws JMSException { return getSession() createObjectMessage(); } public ObjectMessage createObjectMessage(Serializable serializable) throws JMSException { return getSession() createObjectMessage(serializable); } public Queue createQueue(String s) throws JMSException { return getSession() createQueue(s); } public StreamMessage createStreamMessage() throws JMSException { return getSession() createStreamMessage(); } public TemporaryQueue createTemporaryQueue() throws JMSException { return getSession() createTemporaryQueue(); } public TemporaryTopic createTemporaryTopic() throws JMSException { return getSession() createTemporaryTopic(); } public TextMessage createTextMessage() throws JMSException { return getSession() createTextMessage(); } public TextMessage createTextMessage(String s) throws JMSException { return getSession() createTextMessage(s); } public Topic createTopic(String s) throws JMSException { return getSession() createTopic(s); } public int getAcknowledgeMode() throws JMSException { return getSession() getAcknowledgeMode(); } public MessageListener getMessageListener() throws JMSException { return getSession() getMessageListener(); } public boolean getTransacted() throws JMSException { return getSession() getTransacted(); } public void setMessageListener(MessageListener messageListener) throws JMSException { getSession() setMessageListener(messageListener); } public void unsubscribe(String s) throws JMSException { getSession() unsubscribe(s); } public QueueReceiver createReceiver(Queue queue) throws JMSException { return getQueueSession() createReceiver(queue); } public QueueReceiver createReceiver(Queue queue, String s) throws JMSException { return getQueueSession() createReceiver(queue, s); } public QueueSender createSender(Queue queue) throws JMSException { return new InboundMessageProducerProxy(getSessionAndProducer() getMessageProducer(), queue); } public TopicSubscriber createSubscriber(Topic topic) throws JMSException { return getTopicSession() createSubscriber(topic); } public TopicSubscriber createSubscriber(Topic topic, String s, boolean b) throws JMSException { return getTopicSession() createSubscriber(topic, s, b); } public TopicPublisher createPublisher(Topic topic) throws JMSException { return getTopicSession() createPublisher(topic); } public String toString() { try { return InboundSessionProxy { + getSession() + } ; } catch (JMSException e) { return InboundSessionProxy { null } ; } } }",1.0,
1890,1890,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\InvalidMessageEndpointException.,InvalidMessageEndpointException,"public class InvalidMessageEndpointException extends RuntimeException { private static final long serialVersionUID = -9007051892399939057L; public InvalidMessageEndpointException() { super(); } public InvalidMessageEndpointException(final String message) { super(message); } public InvalidMessageEndpointException(final String message, final Throwable cause) { super(message, cause); } public InvalidMessageEndpointException(final Throwable cause) { super(cause); } }",1.0,
1892,1892,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\ManagedConnectionProxy.,ManagedConnectionProxy,"public class ManagedConnectionProxy implements Connection, QueueConnection, TopicConnection, ExceptionListener { private ActiveMQManagedConnection managedConnection; private final List<ManagedSessionProxy> sessions = new ArrayList<ManagedSessionProxy>(); private ExceptionListener exceptionListener; public ManagedConnectionProxy(ActiveMQManagedConnection managedConnection) { this managedConnection = managedConnection; } public void close() throws JMSException { if (managedConnection != null) { managedConnection proxyClosedEvent(this); } } public void cleanup() { exceptionListener = null; managedConnection = null; synchronized (sessions) { for (ManagedSessionProxy p sessions) { try { p cleanup(); } catch (JMSException ignore) { } } sessions clear(); } } private Connection getConnection() throws JMSException { if (managedConnection == null) { throw new IllegalStateException( The Connection is closed ); } return managedConnection getPhysicalConnection(); } public Session createSession(boolean transacted, int acknowledgeMode) throws JMSException { return createSessionProxy(transacted, acknowledgeMode); } private ManagedSessionProxy createSessionProxy(boolean transacted, int acknowledgeMode) throws JMSException { if (!transacted && acknowledgeMode == Session SESSION TRANSACTED) { acknowledgeMode = Session AUTO ACKNOWLEDGE; } ActiveMQSession session = (ActiveMQSession) getConnection() createSession(transacted, acknowledgeMode); ManagedTransactionContext txContext = new ManagedTransactionContext(managedConnection getTransactionContext()); session setTransactionContext(txContext); ManagedSessionProxy p = new ManagedSessionProxy(session, this); p setUseSharedTxContext(managedConnection isInManagedTx()); synchronized (sessions) { sessions add(p); } return p; } protected void sessionClosed(ManagedSessionProxy session) { synchronized (sessions) { sessions remove(session); } } public void setUseSharedTxContext(boolean enable) throws JMSException { synchronized (sessions) { for (ManagedSessionProxy p sessions) { p setUseSharedTxContext(enable); } } } public QueueSession createQueueSession(boolean transacted, int acknowledgeMode) throws JMSException { return new ActiveMQQueueSession(createSessionProxy(transacted, acknowledgeMode)); } public TopicSession createTopicSession(boolean transacted, int acknowledgeMode) throws JMSException { return new ActiveMQTopicSession(createSessionProxy(transacted, acknowledgeMode)); } public String getClientID() throws JMSException { return getConnection() getClientID(); } public ExceptionListener getExceptionListener() throws JMSException { return getConnection() getExceptionListener(); } public ConnectionMetaData getMetaData() throws JMSException { return getConnection() getMetaData(); } public void setClientID(String clientID) throws JMSException { getConnection() setClientID(clientID); } public void setExceptionListener(ExceptionListener listener) throws JMSException { getConnection(); exceptionListener = listener; } public void start() throws JMSException { getConnection() start(); } public void stop() throws JMSException { getConnection() stop(); } public ConnectionConsumer createConnectionConsumer(Queue queue, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException { throw new JMSException( Not Supported ); } public ConnectionConsumer createConnectionConsumer(Topic topic, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException { throw new JMSException( Not Supported ); } public ConnectionConsumer createConnectionConsumer(Destination destination, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException { throw new JMSException( Not Supported ); } public ConnectionConsumer createDurableConnectionConsumer(Topic topic, String subscriptionName, String messageSelector, ServerSessionPool sessionPool, int maxMessages) throws JMSException { throw new JMSException( Not Supported ); } public ActiveMQManagedConnection getManagedConnection() { return managedConnection; } public void onException(JMSException e) { if (exceptionListener != null && managedConnection != null) { try { exceptionListener onException(e); } catch (Throwable ignore) { } } } }",1.0,
1893,1893,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\ManagedSessionProxy.,ManagedSessionProxy,"public class ManagedSessionProxy implements Session, QueueSession, TopicSession { private final ActiveMQSession session; private boolean closed; private ManagedConnectionProxy connectionProxy; public ManagedSessionProxy(ActiveMQSession session, ManagedConnectionProxy connectionProxy) { this session = session; this connectionProxy = connectionProxy; } public void setUseSharedTxContext(boolean enable) throws JMSException { if (session getTransactionContext() != null) { ((ManagedTransactionContext)session getTransactionContext()) setUseSharedTxContext(enable); } } public void close() throws JMSException { if (closed) { return; } cleanup(); connectionProxy sessionClosed(this); } public void cleanup() throws JMSException { closed = true; session close(); } private Session getSession() throws JMSException { if (closed) { throw new IllegalStateException( The Session is closed ); } return session; } public void commit() throws JMSException { getSession() commit(); } public QueueBrowser createBrowser(Queue queue) throws JMSException { return getSession() createBrowser(queue); } public QueueBrowser createBrowser(Queue queue, String messageSelector) throws JMSException { return getSession() createBrowser(queue, messageSelector); } public BytesMessage createBytesMessage() throws JMSException { return getSession() createBytesMessage(); } public MessageConsumer createConsumer(Destination destination) throws JMSException { return getSession() createConsumer(destination); } public MessageConsumer createConsumer(Destination destination, String messageSelector) throws JMSException { return getSession() createConsumer(destination, messageSelector); } public MessageConsumer createConsumer(Destination destination, String messageSelector, boolean noLocal) throws JMSException { return getSession() createConsumer(destination, messageSelector, noLocal); } public TopicSubscriber createDurableSubscriber(Topic topic, String name) throws JMSException { return getSession() createDurableSubscriber(topic, name); } public TopicSubscriber createDurableSubscriber(Topic topic, String name, String messageSelector, boolean noLocal) throws JMSException { return getSession() createDurableSubscriber(topic, name, messageSelector, noLocal); } public MapMessage createMapMessage() throws JMSException { return getSession() createMapMessage(); } public Message createMessage() throws JMSException { return getSession() createMessage(); } public ObjectMessage createObjectMessage() throws JMSException { return getSession() createObjectMessage(); } public ObjectMessage createObjectMessage(Serializable object) throws JMSException { return getSession() createObjectMessage(object); } public MessageProducer createProducer(Destination destination) throws JMSException { return getSession() createProducer(destination); } public Queue createQueue(String queueName) throws JMSException { return getSession() createQueue(queueName); } public StreamMessage createStreamMessage() throws JMSException { return getSession() createStreamMessage(); } public TemporaryQueue createTemporaryQueue() throws JMSException { return getSession() createTemporaryQueue(); } public TemporaryTopic createTemporaryTopic() throws JMSException { return getSession() createTemporaryTopic(); } public TextMessage createTextMessage() throws JMSException { return getSession() createTextMessage(); } public TextMessage createTextMessage(String text) throws JMSException { return getSession() createTextMessage(text); } public Topic createTopic(String topicName) throws JMSException { return getSession() createTopic(topicName); } public int getAcknowledgeMode() throws JMSException { return getSession() getAcknowledgeMode(); } public MessageListener getMessageListener() throws JMSException { return getSession() getMessageListener(); } public boolean getTransacted() throws JMSException { return getSession() getTransacted(); } public void recover() throws JMSException { getSession() recover(); } public void rollback() throws JMSException { getSession() rollback(); } public void setMessageListener(MessageListener listener) throws JMSException { getSession() setMessageListener(listener); } public void unsubscribe(String name) throws JMSException { getSession() unsubscribe(name); } public QueueReceiver createReceiver(Queue queue) throws JMSException { return ((QueueSession)getSession()) createReceiver(queue); } public QueueReceiver createReceiver(Queue queue, String messageSelector) throws JMSException { return ((QueueSession)getSession()) createReceiver(queue, messageSelector); } public QueueSender createSender(Queue queue) throws JMSException { return ((QueueSession)getSession()) createSender(queue); } public TopicPublisher createPublisher(Topic topic) throws JMSException { return ((TopicSession)getSession()) createPublisher(topic); } public TopicSubscriber createSubscriber(Topic topic) throws JMSException { return ((TopicSession)getSession()) createSubscriber(topic); } public TopicSubscriber createSubscriber(Topic topic, String messageSelector, boolean noLocal) throws JMSException { return ((TopicSession)getSession()) createSubscriber(topic, messageSelector, noLocal); } public void run() { throw new RuntimeException( Operation not supported ); } public String toString() { return ManagedSessionProxy { + session + } ; } }",1.0,
1894,1894,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\ManagedTransactionContext.,ManagedTransactionContext,"public class ManagedTransactionContext extends TransactionContext { private final TransactionContext sharedContext; private boolean useSharedTxContext; public ManagedTransactionContext(TransactionContext sharedContext) { super(sharedContext getConnection()); this sharedContext = sharedContext; setLocalTransactionEventListener(sharedContext getLocalTransactionEventListener()); } public void setUseSharedTxContext(boolean enable) throws JMSException { if (isInLocalTransaction() || isInXATransaction()) { throw new JMSException( The resource is already being used in transaction context ); } useSharedTxContext = enable; } public void begin() throws JMSException { if (useSharedTxContext) { sharedContext begin(); } else { super begin(); } } public void commit() throws JMSException { if (useSharedTxContext) { sharedContext commit(); } else { super commit(); } } public void commit(Xid xid, boolean onePhase) throws XAException { if (useSharedTxContext) { sharedContext commit(xid, onePhase); } else { super commit(xid, onePhase); } } public void end(Xid xid, int flags) throws XAException { if (useSharedTxContext) { sharedContext end(xid, flags); } else { super end(xid, flags); } } public void forget(Xid xid) throws XAException { if (useSharedTxContext) { sharedContext forget(xid); } else { super forget(xid); } } public TransactionId getTransactionId() { if (useSharedTxContext) { return sharedContext getTransactionId(); } else { return super getTransactionId(); } } public int getTransactionTimeout() throws XAException { if (useSharedTxContext) { return sharedContext getTransactionTimeout(); } else { return super getTransactionTimeout(); } } public boolean isInLocalTransaction() { if (useSharedTxContext) { return sharedContext isInLocalTransaction(); } else { return super isInLocalTransaction(); } } public boolean isInXATransaction() { if (useSharedTxContext) { return sharedContext isInTransaction(); } else { return super isInXATransaction(); } } Override public boolean isInTransaction() { return isInXATransaction() || isInLocalTransaction(); } public boolean isSameRM(XAResource xaResource) throws XAException { if (useSharedTxContext) { return sharedContext isSameRM(xaResource); } else { return super isSameRM(xaResource); } } public int prepare(Xid xid) throws XAException { if (useSharedTxContext) { return sharedContext prepare(xid); } else { return super prepare(xid); } } public Xid[] recover(int flag) throws XAException { if (useSharedTxContext) { return sharedContext recover(flag); } else { return super recover(flag); } } public void rollback() throws JMSException { if (useSharedTxContext) { sharedContext rollback(); } else { super rollback(); } } public void rollback(Xid xid) throws XAException { if (useSharedTxContext) { sharedContext rollback(xid); } else { super rollback(xid); } } public boolean setTransactionTimeout(int seconds) throws XAException { if (useSharedTxContext) { return sharedContext setTransactionTimeout(seconds); } else { return super setTransactionTimeout(seconds); } } public void start(Xid xid, int flags) throws XAException { if (useSharedTxContext) { sharedContext start(xid, flags); } else { super start(xid, flags); } } public void addSynchronization(Synchronization s) { if (useSharedTxContext) { sharedContext addSynchronization(s); } else { super addSynchronization(s); } } }",1.0,
1895,1895,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\MessageEndpointProxy.,MessageEndpointProxy,"public class MessageEndpointProxy implements MessageListener, MessageEndpoint { private static final MessageEndpointState ALIVE = new MessageEndpointAlive(); private static final MessageEndpointState DEAD = new MessageEndpointDead(); private static final Logger LOG = LoggerFactory getLogger(MessageEndpointProxy class); private static int proxyCount; private final int proxyID; private final MessageEndpoint endpoint; private final MessageListener messageListener; private MessageEndpointState state = ALIVE; public MessageEndpointProxy(MessageEndpoint endpoint) { if (!(endpoint instanceof MessageListener)) { throw new IllegalArgumentException( MessageEndpoint is not a MessageListener ); } messageListener = (MessageListener)endpoint; proxyID = getID(); this endpoint = endpoint; } private static int getID() { return ++proxyCount; } public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException { LOG trace( Invoking MessageEndpoint beforeDelivery() ); state beforeDelivery(this, method); } public void onMessage(Message message) { LOG trace( Invoking MessageEndpoint onMethod() ); state onMessage(this, message); } public void afterDelivery() throws ResourceException { LOG trace( Invoking MessageEndpoint afterDelivery() ); state afterDelivery(this); } public void release() { LOG trace( Invoking MessageEndpoint release() ); state release(this); } public String toString() { return MessageEndpointProxy{ + proxyID + proxyID + , endpoint + endpoint + } ; } private abstract static class MessageEndpointState { public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException { throw new IllegalStateException(); } public void onMessage(MessageEndpointProxy proxy, Message message) { throw new IllegalStateException(); } public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException { throw new IllegalStateException(); } public void release(MessageEndpointProxy proxy) { throw new IllegalStateException(); } protected final void transition(MessageEndpointProxy proxy, MessageEndpointState nextState) { proxy state = nextState; nextState enter(proxy); } protected void enter(MessageEndpointProxy proxy) { } } private static class MessageEndpointAlive extends MessageEndpointState { public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException { try { proxy endpoint beforeDelivery(method); } catch (NoSuchMethodException e) { transition(proxy, DEAD); throw e; } catch (ResourceException e) { transition(proxy, DEAD); throw e; } } public void onMessage(MessageEndpointProxy proxy, Message message) { proxy messageListener onMessage(message); } public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException { try { proxy endpoint afterDelivery(); } catch (ResourceException e) { transition(proxy, DEAD); throw e; } } public void release(MessageEndpointProxy proxy) { transition(proxy, DEAD); } } private static class MessageEndpointDead extends MessageEndpointState { protected void enter(MessageEndpointProxy proxy) { proxy endpoint release(); } public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException { throw new InvalidMessageEndpointException(); } public void onMessage(MessageEndpointProxy proxy, Message message) { throw new InvalidMessageEndpointException(); } public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException { throw new InvalidMessageEndpointException(); } public void release(MessageEndpointProxy proxy) { throw new InvalidMessageEndpointException(); } } }",1.0,
1896,1896,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\MessageEndpointProxy.,MessageEndpointState,"private abstract static class MessageEndpointState { public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException { throw new IllegalStateException(); } public void onMessage(MessageEndpointProxy proxy, Message message) { throw new IllegalStateException(); } public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException { throw new IllegalStateException(); } public void release(MessageEndpointProxy proxy) { throw new IllegalStateException(); } protected final void transition(MessageEndpointProxy proxy, MessageEndpointState nextState) { proxy state = nextState; nextState enter(proxy); } protected void enter(MessageEndpointProxy proxy) { } }",1.0,
1897,1897,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\MessageEndpointProxy.,MessageEndpointAlive,"private static class MessageEndpointAlive extends MessageEndpointState { public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException { try { proxy endpoint beforeDelivery(method); } catch (NoSuchMethodException e) { transition(proxy, DEAD); throw e; } catch (ResourceException e) { transition(proxy, DEAD); throw e; } } public void onMessage(MessageEndpointProxy proxy, Message message) { proxy messageListener onMessage(message); } public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException { try { proxy endpoint afterDelivery(); } catch (ResourceException e) { transition(proxy, DEAD); throw e; } } public void release(MessageEndpointProxy proxy) { transition(proxy, DEAD); } }",1.0,
1898,1898,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\MessageEndpointProxy.,MessageEndpointDead,"private static class MessageEndpointDead extends MessageEndpointState { protected void enter(MessageEndpointProxy proxy) { proxy endpoint release(); } public void beforeDelivery(MessageEndpointProxy proxy, Method method) throws NoSuchMethodException, ResourceException { throw new InvalidMessageEndpointException(); } public void onMessage(MessageEndpointProxy proxy, Message message) { throw new InvalidMessageEndpointException(); } public void afterDelivery(MessageEndpointProxy proxy) throws ResourceException { throw new InvalidMessageEndpointException(); } public void release(MessageEndpointProxy proxy) { throw new InvalidMessageEndpointException(); } }",1.0,
1899,1899,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\ServerSessionImpl.,ServerSessionImpl,"public class ServerSessionImpl implements ServerSession, InboundContext, Work, DeliveryListener { public static final Method ON MESSAGE METHOD; private static int nextLogId; static { try { ON MESSAGE METHOD = MessageListener class getMethod( onMessage , new Class[] { Message class }); } catch (Exception e) { throw new ExceptionInInitializerError(e); } } private int serverSessionId = getNextLogId(); private final Logger log = LoggerFactory getLogger(ServerSessionImpl class getName() + + serverSessionId); private ActiveMQSession session; private WorkManager workManager; private MessageEndpoint endpoint; private MessageProducer messageProducer; private final ServerSessionPoolImpl pool; private Object runControlMutex = new Object(); private boolean runningFlag; private boolean stale; private final boolean useRAManagedTx; private final int batchSize; private int currentBatchSize; public ServerSessionImpl(ServerSessionPoolImpl pool, ActiveMQSession session, WorkManager workManager, MessageEndpoint endpoint, boolean useRAManagedTx, int batchSize) throws JMSException { this pool = pool; this session = session; this workManager = workManager; this endpoint = endpoint; this useRAManagedTx = useRAManagedTx; this session setMessageListener((MessageListener)endpoint); this session setDeliveryListener(this); this batchSize = batchSize; } private static synchronized int getNextLogId() { return nextLogId++; } public Session getSession() throws JMSException { return session; } protected boolean isStale() { return stale || !session isRunning(); } public MessageProducer getMessageProducer() throws JMSException { if (messageProducer == null) { messageProducer = getSession() createProducer(null); } return messageProducer; } public void start() throws JMSException { synchronized (runControlMutex) { if (runningFlag) { log debug( Start request ignored, already running ); return; } runningFlag = true; } log debug( Starting run ); try { workManager scheduleWork(this, WorkManager INDEFINITE, null, new WorkListener() { public void workAccepted(WorkEvent event) { log debug( Work accepted + event); } public void workRejected(WorkEvent event) { log debug( Work rejected + event); } public void workStarted(WorkEvent event) { log debug( Work started + event); } public void workCompleted(WorkEvent event) { log debug( Work completed + event); } }); } catch (WorkException e) { throw (JMSException)new JMSException( Start failed + e) initCause(e); } } public void run() { log debug( Running ); currentBatchSize = 0; while (true) { log debug( run loop start ); try { InboundContextSupport register(this); if ( session isRunning() ) { session run(); } else { log debug( JMS Session is no longer running (maybe due to loss of connection ), marking ServerSesison as stale ); stale = true; } } catch (Throwable e) { stale = true; if ( log isDebugEnabled() ) { log debug( Endpoint failed to process message , e); } else if ( log isInfoEnabled() ) { log info( Endpoint failed to process message Reason + e getMessage()); } } finally { InboundContextSupport unregister(this); log debug( run loop end ); synchronized (runControlMutex) { if (stale) { runningFlag = false; pool removeFromPool(this); break; } if (!session hasUncomsumedMessages()) { runningFlag = false; pool returnToPool(this); break; } } } } log debug( Run finished ); } public void beforeDelivery(ActiveMQSession session, Message msg) { if (currentBatchSize == 0) { try { endpoint beforeDelivery(ON MESSAGE METHOD); } catch (Throwable e) { throw new RuntimeException( Endpoint before delivery notification failure , e); } } } public void afterDelivery(ActiveMQSession session, Message msg) { if (++currentBatchSize >= batchSize || !session hasUncomsumedMessages()) { currentBatchSize = 0; try { endpoint afterDelivery(); } catch (Throwable e) { throw new RuntimeException( Endpoint after delivery notification failure , e); } finally { TransactionContext transactionContext = session getTransactionContext(); if (transactionContext != null && transactionContext isInLocalTransaction()) { if (!useRAManagedTx) { log warn( Local transaction had not been commited Commiting now ); } try { session commit(); } catch (JMSException e) { log info( Commit failed , e); } } } } } public void release() { log debug( release called ); } Override public String toString() { return ServerSessionImpl + serverSessionId; } public void close() { try { endpoint release(); } catch (Throwable e) { log debug( Endpoint did not release properly + e getMessage(), e); } try { session close(); } catch (Throwable e) { log debug( Session did not close properly + e getMessage(), e); } } }",1.0,
1901,1901,data,\smellybot\activemq\activemq-ra\src\main\java\org\apache\activemq\ra\SimpleConnectionManager.,SimpleConnectionManager,"public class SimpleConnectionManager implements ConnectionManager, ConnectionEventListener { private static final long serialVersionUID = -7662970495944876239L; private static final Logger LOG = LoggerFactory getLogger(SimpleConnectionManager class); public Object allocateConnection(ManagedConnectionFactory connectionFactory, ConnectionRequestInfo info) throws ResourceException { Subject subject = null; ManagedConnection connection = connectionFactory createManagedConnection(subject, info); connection addConnectionEventListener(this); return connection getConnection(subject, info); } public void connectionClosed(ConnectionEvent event) { try { ((ManagedConnection)event getSource()) cleanup(); } catch (ResourceException e) { LOG warn( Error occured during the cleanup of a managed connection , e); } try { ((ManagedConnection)event getSource()) destroy(); } catch (ResourceException e) { LOG warn( Error occured during the destruction of a managed connection , e); } } public void localTransactionStarted(ConnectionEvent event) { } public void localTransactionCommitted(ConnectionEvent event) { } public void localTransactionRolledback(ConnectionEvent event) { } public void connectionErrorOccurred(ConnectionEvent event) { LOG warn( Managed connection experiened an error , event getException()); try { ((ManagedConnection)event getSource()) cleanup(); } catch (ResourceException e) { LOG warn( Error occured during the cleanup of a managed connection , e); } try { ((ManagedConnection)event getSource()) destroy(); } catch (ResourceException e) { LOG warn( Error occured during the destruction of a managed connection , e); } } }",1.0,
1904,1904,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\ActiveMQResourceAdapterJavaBeanEqualityTest.,ActiveMQResourceAdapterJavaBeanEqualityTest,"public class ActiveMQResourceAdapterJavaBeanEqualityTest extends TestCase { private ActiveMQResourceAdapter raOne; private ActiveMQResourceAdapter raTwo; public ActiveMQResourceAdapterJavaBeanEqualityTest(String name) { super(name); } protected void setUp() throws Exception { super setUp(); raOne = new ActiveMQResourceAdapter(); raTwo = new ActiveMQResourceAdapter(); } public void testSelfEquality() { assertEquality(raOne, raOne); } public void testEmptyEquality() { assertEquality(raOne, raTwo); } public void testNullEqualityFailure() { assertFalse(raOne equals(null)); } public void testServerUrlEquality() { raOne setServerUrl( one ); raTwo setServerUrl( one ); assertEquality(raOne, raTwo); } public void testServerUrlInequality() { raOne setServerUrl( one ); raTwo setServerUrl( two ); assertNonEquality(raOne, raTwo); } public void testServerUrlInequalityDifferentCase() { raOne setServerUrl( one ); raTwo setServerUrl( ONE ); assertNonEquality(raOne, raTwo); } public void testNullServerUrlInequality() { raOne setServerUrl( one ); raTwo setServerUrl(null); assertNonEquality(raOne, raTwo); } public void testBrokerXMLConfigEquality() { raOne setBrokerXmlConfig( one ); raTwo setBrokerXmlConfig( one ); assertEquality(raOne, raTwo); } public void testBrokerXMLConfigInequality() { raOne setBrokerXmlConfig( one ); raTwo setBrokerXmlConfig( two ); assertNonEquality(raOne, raTwo); } public void testBrokerXMLConfigInequalityDifferentCase() { raOne setBrokerXmlConfig( one ); raTwo setBrokerXmlConfig( ONE ); assertNonEquality(raOne, raTwo); } public void testNullBrokerXMLConfigInequality() { raOne setBrokerXmlConfig( one ); raTwo setBrokerXmlConfig(null); assertNonEquality(raOne, raTwo); } public void testPasswordNotPartOfEquality() { raOne setClientid( one ); raTwo setClientid( one ); raOne setPassword( foo ); raTwo setPassword( bar ); assertEquality(raOne, raTwo); } private void assertEquality(ActiveMQResourceAdapter leftRa, ActiveMQResourceAdapter rightRa) { assertTrue( ActiveMQResourceAdapters are not equal , leftRa equals(rightRa)); assertTrue( ActiveMQResourceAdapters are not equal , rightRa equals(leftRa)); assertTrue( HashCodes are not equal , leftRa hashCode() == rightRa hashCode()); } private void assertNonEquality(ActiveMQResourceAdapter leftRa, ActiveMQResourceAdapter rightRa) { assertFalse( ActiveMQResourceAdapters are equal , leftRa equals(rightRa)); assertFalse( ActiveMQResourceAdapters are equal , rightRa equals(leftRa)); assertFalse( HashCodes are equal , leftRa hashCode() == rightRa hashCode()); } }",1.0,
1905,1905,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\ConnectionEventListenerAdapter.,ConnectionEventListenerAdapter,public class ConnectionEventListenerAdapter implements ConnectionEventListener { public void connectionClosed(ConnectionEvent arg0) { } public void localTransactionStarted(ConnectionEvent arg0) { } public void localTransactionCommitted(ConnectionEvent arg0) { } public void localTransactionRolledback(ConnectionEvent arg0) { } public void connectionErrorOccurred(ConnectionEvent arg0) { } },1.0,
1906,1906,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\ConnectionManagerAdapter.,ConnectionManagerAdapter,"public class ConnectionManagerAdapter implements ConnectionManager, ConnectionEventListener { private static final long serialVersionUID = 5205646563916645831L; private static final Logger LOG = LoggerFactory getLogger(ConnectionManagerAdapter class); ArrayList<ConnectionEventListener> listners = new ArrayList<ConnectionEventListener>(); ArrayList<ManagedConnection> connections = new ArrayList<ManagedConnection>(); public void addConnectionEventListener(ConnectionEventListener l) { for (Iterator<ManagedConnection> iter = connections iterator(); iter hasNext();) { ManagedConnection c = iter next(); c addConnectionEventListener(l); } listners add(l); } public Object allocateConnection(ManagedConnectionFactory connectionFactory, ConnectionRequestInfo info) throws ResourceException { Subject subject = null; ManagedConnection connection = connectionFactory createManagedConnection(subject, info); connection addConnectionEventListener(this); for (Iterator<ConnectionEventListener> iter = listners iterator(); iter hasNext();) { ConnectionEventListener l = iter next(); connection addConnectionEventListener(l); } connections add(connection); return connection getConnection(subject, info); } public void connectionClosed(ConnectionEvent event) { connections remove(event getSource()); try { ((ManagedConnection)event getSource()) cleanup(); } catch (ResourceException e) { LOG warn( Error occured during the cleanup of a managed connection , e); } try { ((ManagedConnection)event getSource()) destroy(); } catch (ResourceException e) { LOG warn( Error occured during the destruction of a managed connection , e); } } public void localTransactionStarted(ConnectionEvent event) { } public void localTransactionCommitted(ConnectionEvent event) { } public void localTransactionRolledback(ConnectionEvent event) { } public void connectionErrorOccurred(ConnectionEvent event) { LOG warn( Managed connection experiened an error , event getException()); try { ((ManagedConnection)event getSource()) cleanup(); } catch (ResourceException e) { LOG warn( Error occured during the cleanup of a managed connection , e); } try { ((ManagedConnection)event getSource()) destroy(); } catch (ResourceException e) { LOG warn( Error occured during the destruction of a managed connection , e); } } }",1.0,
1908,1908,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\FailoverManagedClusterTest.,StubBootstrapContext,"private static final class StubBootstrapContext implements BootstrapContext { Override public WorkManager getWorkManager() { return new WorkManager() { Override public void doWork(Work work) throws WorkException { new Thread(work) start(); } Override public void doWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException { new Thread(work) start(); } Override public long startWork(Work work) throws WorkException { new Thread(work) start(); return 0; } Override public long startWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException { new Thread(work) start(); return 0; } Override public void scheduleWork(Work work) throws WorkException { new Thread(work) start(); } Override public void scheduleWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException { new Thread(work) start(); } }; } Override public XATerminator getXATerminator() { return null; } Override public Timer createTimer() throws UnavailableException { return null; } }",1.0,
1909,1909,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\FailoverManagedClusterTest.,StubMessageEndpoint,"public class StubMessageEndpoint implements MessageEndpoint, MessageListener { public int messageCount; public XAResource xaresource; public Xid xid; Override public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException { try { if (xid == null) { xid = createXid(); } xaresource start(xid, 0); } catch (Throwable e) { throw new ResourceException(e); } } Override public void afterDelivery() throws ResourceException { try { xaresource end(xid, XAResource TMSUCCESS); xaresource prepare(xid); xaresource commit(xid, false); } catch (Throwable e) { e printStackTrace(); throw new ResourceException(e); } } Override public void release() { } Override public void onMessage(Message message) { messageCount++; } }",1.0,
1910,1910,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\FailoverManagedConnectionTest.,FailoverManagedConnectionTest,"public class FailoverManagedConnectionTest extends TestCase { private static final String BROKER TRANSPORT = tcp private static final String BROKER URL = failover private ActiveMQManagedConnectionFactory managedConnectionFactory; private ManagedConnection managedConnection; private ManagedConnectionProxy proxy; private BrokerService broker; private HashSet<ManagedConnection> connections; private ActiveMQConnectionRequestInfo connectionInfo; protected void setUp() throws Exception { createAndStartBroker(); connectionInfo = new ActiveMQConnectionRequestInfo(); connectionInfo setServerUrl(BROKER URL); connectionInfo setUserName(ActiveMQConnectionFactory DEFAULT USER); connectionInfo setPassword(ActiveMQConnectionFactory DEFAULT PASSWORD); managedConnectionFactory = new ActiveMQManagedConnectionFactory(); managedConnection = managedConnectionFactory createManagedConnection(null, connectionInfo); connections = new HashSet<ManagedConnection>(); connections add(managedConnection); } private void createAndStartBroker() throws Exception { broker = new BrokerService(); broker addConnector(BROKER TRANSPORT); broker start(); broker waitUntilStarted(); } public void testFailoverBeforeClose() throws Exception { createConnectionAndProxyAndSession(); stopBroker(); cleanupConnectionAndProxyAndSession(); createAndStartBroker(); for (int i=0; i<2; i++) { createConnectionAndProxyAndSession(); cleanupConnectionAndProxyAndSession(); } } private void cleanupConnectionAndProxyAndSession() throws Exception { proxy close(); managedConnection cleanup(); } private void createConnectionAndProxyAndSession() throws Exception { managedConnection = managedConnectionFactory matchManagedConnections(connections, null, connectionInfo); proxy = (ManagedConnectionProxy) managedConnection getConnection(null, null); proxy createSession(false, 0); } private void stopBroker() throws Exception { broker stop(); broker waitUntilStopped(); } }",1.0,
1912,1912,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\JmsXARollback2CxTransactionTest.,JmsXARollback2CxTransactionTest,"public class JmsXARollback2CxTransactionTest extends JmsQueueTransactionTest { private static final String DEFAULT HOST = vm private ConnectionManagerAdapter connectionManager = new ConnectionManagerAdapter(); private static long txGenerator; private Xid xid; private XAResource[] xares = new XAResource[2]; private int index = 0; Override protected void setSessionTransacted() { resourceProvider setTransacted(false); resourceProvider setAckMode(Session AUTO ACKNOWLEDGE); } Override protected ConnectionFactory newConnectionFactory() throws Exception { ActiveMQManagedConnectionFactory managedConnectionFactory = new ActiveMQManagedConnectionFactory(); managedConnectionFactory setServerUrl(DEFAULT HOST); managedConnectionFactory setUserName(ActiveMQConnectionFactory DEFAULT USER); managedConnectionFactory setPassword(ActiveMQConnectionFactory DEFAULT PASSWORD); return (ConnectionFactory) managedConnectionFactory createConnectionFactory(connectionManager); } public void testReconnectWithClientId() throws Exception { for (index = 0; index< 20; index ++) { reconnect(); } } public void testRepeatReceiveTwoThenRollback() throws Exception { for (index = 0; index< 2; index ++) { testReceiveTwoThenRollback(); } } Override protected void reconnect() throws Exception { super reconnect(); xares[0] = getXAResource(connection); ManagedConnectionProxy cx2 = (ManagedConnectionProxy) connectionFactory createConnection(); xares[1] = getXAResource(cx2); } private XAResource getXAResource(Connection connection) throws ResourceException { ManagedConnectionProxy proxy = (ManagedConnectionProxy) connection; ManagedConnection mc = proxy getManagedConnection(); return mc getXAResource(); } Override protected ActiveMQPrefetchPolicy getPrefetchPolicy() { ManagedConnectionProxy proxy = (ManagedConnectionProxy) connection; ActiveMQManagedConnection mc = proxy getManagedConnection(); ActiveMQConnection conn = (ActiveMQConnection) mc getPhysicalConnection(); return conn getPrefetchPolicy(); } Override protected void beginTx() throws Exception { xid = createXid(); xares[index%2] start(xid, XAResource TMNOFLAGS); xares[(index+ 1)%2] start(xid, XAResource TMJOIN); } Override protected void commitTx() throws Exception { xares[index%2] end(xid, XAResource TMSUCCESS); xares[(index+ 1)%2] end(xid, XAResource TMSUCCESS); int result = xares[index%2] prepare(xid); if (result == XAResource XA OK) { xares[index%2] commit(xid, false); } xid = null; } Override protected void rollbackTx() throws Exception { xares[index%2] end(xid, XAResource TMSUCCESS); xares[(index+ 1)%2] end(xid, XAResource TMSUCCESS); xares[index%2] rollback(xid); xid = null; } Override public void testMessageListener() throws Exception { } Override public void testSendSessionClose() throws Exception { } public Xid createXid() throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream os = new DataOutputStream(baos); os writeLong(++txGenerator); os close(); final byte[] bs = baos toByteArray(); return new Xid() { public int getFormatId() { return 86; } public byte[] getGlobalTransactionId() { return bs; } public byte[] getBranchQualifier() { return bs; } }; } }",1.0,
1916,1916,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\MDBTest.,StubBootstrapContext,"private static final class StubBootstrapContext implements BootstrapContext { public WorkManager getWorkManager() { return new WorkManager() { public void doWork(Work work) throws WorkException { new Thread(work) start(); } public void doWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException { new Thread(work) start(); } public long startWork(Work work) throws WorkException { new Thread(work) start(); return 0; } public long startWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException { new Thread(work) start(); return 0; } public void scheduleWork(Work work) throws WorkException { new Thread(work) start(); } public void scheduleWork(Work work, long arg1, ExecutionContext arg2, WorkListener arg3) throws WorkException { new Thread(work) start(); } }; } public XATerminator getXATerminator() { return null; } public Timer createTimer() throws UnavailableException { return null; } }",1.0,
1917,1917,data,\smellybot\activemq\activemq-ra\src\test\java\org\apache\activemq\ra\MDBTest.,StubMessageEndpoint,"public class StubMessageEndpoint implements MessageEndpoint, MessageListener { public int messageCount; public XAResource xaresource; public Xid xid; public void beforeDelivery(Method method) throws NoSuchMethodException, ResourceException { try { if (xid == null) { xid = createXid(); } xaresource start(xid, 0); } catch (Throwable e) { throw new ResourceException(e); } } public void afterDelivery() throws ResourceException { try { xaresource end(xid, 0); xaresource prepare(xid); xaresource commit(xid, false); } catch (Throwable e) { throw new ResourceException(e); } } public void release() { } public void onMessage(Message message) { messageCount++; } }",1.0,
1921,1921,data,\smellybot\activemq\activemq-rar\src\test\java\org\apache\activemq\BrokerConfigTest.,BrokerConfigTest,public class BrokerConfigTest { Test public void testEmbeddedxMLConfig() throws Exception { BrokerService broker = BrokerFactory createBroker( xbean broker-config xml ); broker stop(); } },1.0,
1922,1922,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\hooks\SpringContextHook.,SpringContextHook,"public class SpringContextHook implements Runnable, ApplicationContextAware { ApplicationContext applicationContext; public void run() { if (applicationContext instanceof ConfigurableApplicationContext) { ((ConfigurableApplicationContext) applicationContext) close(); } } public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { this applicationContext = applicationContext; } }",1.0,
1923,1923,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\hooks\osgi\SpringOsgiContextHook.,SpringOsgiContextHook,"public class SpringOsgiContextHook implements Runnable, ApplicationContextAware { private static final transient Logger LOG = LoggerFactory getLogger(SpringOsgiContextHook class); ApplicationContext applicationContext; public void run() { if (applicationContext instanceof ConfigurableApplicationContext) { ((ConfigurableApplicationContext) applicationContext) close(); } if (applicationContext instanceof OsgiBundleXmlApplicationContext){ try { ((OsgiBundleXmlApplicationContext)applicationContext) getBundle() stop(); } catch (BundleException e) { LOG info( Error stopping OSGi bundle + e, e); } } } public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { this applicationContext = applicationContext; } }",1.0,
1924,1924,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\network\jms\JmsQueueConnector.,JmsQueueConnector,public class JmsQueueConnector extends SimpleJmsQueueConnector { public void setJndiLocalTemplate(JndiTemplate template) { super setJndiLocalTemplate(new JndiTemplateLookupFactory(template)); } public void setJndiOutboundTemplate(JndiTemplate template) { super setJndiOutboundTemplate(new JndiTemplateLookupFactory(template)); } },1.0,
1925,1925,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\network\jms\JmsTopicConnector.,JmsTopicConnector,public class JmsTopicConnector extends SimpleJmsTopicConnector { public void setJndiLocalTemplate(JndiTemplate template) { super setJndiLocalTemplate(new JndiTemplateLookupFactory(template)); } public void setJndiOutboundTemplate(JndiTemplate template) { super setJndiOutboundTemplate(new JndiTemplateLookupFactory(template)); } },1.0,
1926,1926,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\network\jms\JndiTemplateLookupFactory.,JndiTemplateLookupFactory,"public class JndiTemplateLookupFactory extends JndiLookupFactory { private final JndiTemplate template; public JndiTemplateLookupFactory(JndiTemplate template) { this template = template; } Override public <T> T lookup(String name, Class<T> clazz) throws NamingException { return template lookup(name, clazz); } }",1.0,
1927,1927,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\pool\PooledConnectionFactoryBean.,PooledConnectionFactoryBean,"public class PooledConnectionFactoryBean implements FactoryBean { private static final Logger LOGGER = LoggerFactory getLogger(PooledConnectionFactoryBean class); private PooledConnectionFactory pooledConnectionFactory; private ConnectionFactory connectionFactory; private int maxConnections = 1; private int maximumActive = 500; private Object transactionManager; private String resourceName; private ObjectPoolFactory poolFactory; public int getMaxConnections() { return maxConnections; } public void setMaxConnections(int maxConnections) { this maxConnections = maxConnections; } public int getMaximumActive() { return maximumActive; } public void setMaximumActive(int maximumActive) { this maximumActive = maximumActive; } public Object getTransactionManager() { return transactionManager; } public void setTransactionManager(Object transactionManager) { this transactionManager = transactionManager; } public String getResourceName() { return resourceName; } public void setResourceName(String resourceName) { this resourceName = resourceName; } public ConnectionFactory getConnectionFactory() { return connectionFactory; } public void setConnectionFactory(ConnectionFactory connectionFactory) { this connectionFactory = connectionFactory; } public ObjectPoolFactory getPoolFactory() { return poolFactory; } public void setPoolFactory(ObjectPoolFactory poolFactory) { this poolFactory = poolFactory; } PostConstruct public void afterPropertiesSet() throws Exception { if (pooledConnectionFactory == null && transactionManager != null && resourceName != null) { try { LOGGER debug( Trying to build a JcaPooledConnectionFactory ); JcaPooledConnectionFactory f = new JcaPooledConnectionFactory(); f setName(resourceName); f setTransactionManager((TransactionManager) transactionManager); f setMaxConnections(maxConnections); f setMaximumActive(maximumActive); f setConnectionFactory(connectionFactory); f setPoolFactory(poolFactory); this pooledConnectionFactory = f; } catch (Throwable t) { LOGGER debug( Could not create JCA enabled connection factory + t, t); } } if (pooledConnectionFactory == null && transactionManager != null) { try { LOGGER debug( Trying to build a XaPooledConnectionFactory ); XaPooledConnectionFactory f = new XaPooledConnectionFactory(); f setTransactionManager((TransactionManager) transactionManager); f setMaxConnections(maxConnections); f setMaximumActive(maximumActive); f setConnectionFactory(connectionFactory); f setPoolFactory(poolFactory); this pooledConnectionFactory = f; } catch (Throwable t) { LOGGER debug( Could not create XA enabled connection factory + t, t); } } if (pooledConnectionFactory == null) { try { LOGGER debug( Trying to build a PooledConnectionFactory ); PooledConnectionFactory f = new PooledConnectionFactory(); f setMaxConnections(maxConnections); f setMaximumActive(maximumActive); f setConnectionFactory(connectionFactory); f setPoolFactory(poolFactory); this pooledConnectionFactory = f; } catch (Throwable t) { LOGGER debug( Could not create pooled connection factory + t, t); } } if (pooledConnectionFactory == null) { throw new IllegalStateException( Unable to create pooled connection factory Enable DEBUG log level for more informations ); } } PreDestroy public void destroy() throws Exception { if (pooledConnectionFactory != null) { pooledConnectionFactory stop(); pooledConnectionFactory = null; } } public Object getObject() throws Exception { return pooledConnectionFactory; } public Class getObjectType() { return ConnectionFactory class; } public boolean isSingleton() { return true; } }",1.0,
1928,1928,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\security\CachedLDAPAuthorizationMap.,CachedLDAPAuthorizationMap,"public class CachedLDAPAuthorizationMap extends SimpleCachedLDAPAuthorizationMap implements InitializingBean, DisposableBean { Override public void afterPropertiesSet() throws Exception { super afterPropertiesSet(); } Override public void destroy() throws Exception { super destroy(); } }",1.0,
1932,1932,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\spring\SpringBrokerContext.,SpringBrokerContext,"public class SpringBrokerContext implements BrokerContext, ApplicationContextAware { ApplicationContext applicationContext; public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { this applicationContext = applicationContext; } public Object getBean(String name) { try { return applicationContext getBean(name); } catch (BeansException ex) { return null; } } public Map getBeansOfType(Class type) { return applicationContext getBeansOfType(type); } }",1.0,
1933,1933,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\spring\SpringSslContext.,SpringSslContext,"public class SpringSslContext extends SslContext { private String keyStoreType= jks ; private String trustStoreType= jks ; private String secureRandomAlgorithm= SHA1PRNG ; private String keyStoreAlgorithm=KeyManagerFactory getDefaultAlgorithm(); private String trustStoreAlgorithm=TrustManagerFactory getDefaultAlgorithm(); private String keyStore; private String trustStore; private String keyStoreKeyPassword; private String keyStorePassword; private String trustStorePassword; PostConstruct public void afterPropertiesSet() throws Exception { keyManagers addAll(createKeyManagers()); trustManagers addAll(createTrustManagers()); if( secureRandom == null ) { secureRandom = createSecureRandom(); } } private SecureRandom createSecureRandom() throws NoSuchAlgorithmException { return SecureRandom getInstance(secureRandomAlgorithm); } private Collection<TrustManager> createTrustManagers() throws Exception { KeyStore ks = createTrustManagerKeyStore(); if( ks ==null ) { return new ArrayList<TrustManager>(0); } TrustManagerFactory tmf = TrustManagerFactory getInstance(trustStoreAlgorithm); tmf init(ks); return Arrays asList(tmf getTrustManagers()); } private Collection<KeyManager> createKeyManagers() throws Exception { KeyStore ks = createKeyManagerKeyStore(); if( ks ==null ) { return new ArrayList<KeyManager>(0); } KeyManagerFactory tmf = KeyManagerFactory getInstance(keyStoreAlgorithm); tmf init(ks, keyStoreKeyPassword == null (keyStorePassword==null null keyStorePassword toCharArray()) keyStoreKeyPassword toCharArray()); return Arrays asList(tmf getKeyManagers()); } private KeyStore createTrustManagerKeyStore() throws Exception { if( trustStore ==null ) { return null; } KeyStore ks = KeyStore getInstance(trustStoreType); InputStream is=Utils resourceFromString(trustStore) getInputStream(); try { ks load(is, trustStorePassword==null null trustStorePassword toCharArray()); } finally { is close(); } return ks; } private KeyStore createKeyManagerKeyStore() throws Exception { if( keyStore ==null ) { return null; } KeyStore ks = KeyStore getInstance(keyStoreType); InputStream is=Utils resourceFromString(keyStore) getInputStream(); try { ks load(is, keyStorePassword==null null keyStorePassword toCharArray()); } finally { is close(); } return ks; } public String getTrustStoreType() { return trustStoreType; } public String getKeyStoreType() { return keyStoreType; } public String getKeyStore() { return keyStore; } public void setKeyStore(String keyStore) throws MalformedURLException { this keyStore = keyStore; } public String getTrustStore() { return trustStore; } public void setTrustStore(String trustStore) throws MalformedURLException { this trustStore = trustStore; } public String getKeyStoreAlgorithm() { return keyStoreAlgorithm; } public void setKeyStoreAlgorithm(String keyAlgorithm) { this keyStoreAlgorithm = keyAlgorithm; } public String getTrustStoreAlgorithm() { return trustStoreAlgorithm; } public void setTrustStoreAlgorithm(String trustAlgorithm) { this trustStoreAlgorithm = trustAlgorithm; } public String getKeyStoreKeyPassword() { return keyStoreKeyPassword; } public void setKeyStoreKeyPassword(String keyPassword) { this keyStoreKeyPassword = keyPassword; } public String getKeyStorePassword() { return keyStorePassword; } public void setKeyStorePassword(String keyPassword) { this keyStorePassword = keyPassword; } public String getTrustStorePassword() { return trustStorePassword; } public void setTrustStorePassword(String trustPassword) { this trustStorePassword = trustPassword; } public void setKeyStoreType(String keyType) { this keyStoreType = keyType; } public void setTrustStoreType(String trustType) { this trustStoreType = trustType; } public String getSecureRandomAlgorithm() { return secureRandomAlgorithm; } public void setSecureRandomAlgorithm(String secureRandomAlgorithm) { this secureRandomAlgorithm = secureRandomAlgorithm; } }",1.0,
1934,1934,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\spring\Utils.,Utils,public class Utils { public static Resource resourceFromString(String uri) throws MalformedURLException { Resource resource; File file = new File(uri); if (file exists()) { resource = new FileSystemResource(uri); } else if (ResourceUtils isUrl(uri)) { resource = new UrlResource(uri); } else { resource = new ClassPathResource(uri); } return resource; } },1.0,
1935,1935,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\store\PersistenceAdapterFactoryBean.,PersistenceAdapterFactoryBean,public class PersistenceAdapterFactoryBean extends JournalPersistenceAdapterFactory implements FactoryBean { private PersistenceAdapter persistenceAdaptor; public Object getObject() throws Exception { if (persistenceAdaptor == null) { persistenceAdaptor = createPersistenceAdapter(); } return persistenceAdaptor; } public Class getObjectType() { return PersistenceAdapter class; } public boolean isSingleton() { return false; } },1.0,
1936,1936,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\xbean\BrokerFactoryBean.,BrokerFactoryBean,"public class BrokerFactoryBean implements FactoryBean, InitializingBean, DisposableBean, ApplicationContextAware { static { PropertyEditorManager registerEditor(URI class, URIEditor class); } private Resource config; private XBeanBrokerService broker; private boolean start; private ResourceXmlApplicationContext context; private ApplicationContext parentContext; private boolean systemExitOnShutdown; private int systemExitOnShutdownExitCode; public BrokerFactoryBean() { } public BrokerFactoryBean(Resource config) { this config = config; } public Object getObject() throws Exception { return broker; } public Class getObjectType() { return BrokerService class; } public boolean isSingleton() { return true; } public void setApplicationContext(ApplicationContext parentContext) throws BeansException { this parentContext = parentContext; } public void afterPropertiesSet() throws Exception { if (config == null) { throw new IllegalArgumentException( config property must be set ); } context = new ResourceXmlApplicationContext(config, parentContext); try { broker = (XBeanBrokerService)context getBean( broker ); } catch (BeansException e) { } if (broker == null) { String[] names = context getBeanNamesForType(BrokerService class); for (int i = 0; i < names length; i++) { String name = names[i]; broker = (XBeanBrokerService)context getBean(name); if (broker != null) { break; } } } if (broker == null) { throw new IllegalArgumentException( The configuration has no BrokerService instance for resource + config); } if( systemExitOnShutdown ) { broker addShutdownHook(new Runnable(){ public void run() { System exit(systemExitOnShutdownExitCode); } }); } if (start) { broker start(); } } public void destroy() throws Exception { if (context != null) { context close(); } if (broker != null) { broker stop(); } } public Resource getConfig() { return config; } public void setConfig(Resource config) { this config = config; } public BrokerService getBroker() { return broker; } public boolean isStart() { return start; } public void setStart(boolean start) { this start = start; } public boolean isSystemExitOnStop() { return systemExitOnShutdown; } public void setSystemExitOnStop(boolean systemExitOnStop) { this systemExitOnShutdown = systemExitOnStop; } public boolean isSystemExitOnShutdown() { return systemExitOnShutdown; } public void setSystemExitOnShutdown(boolean systemExitOnShutdown) { this systemExitOnShutdown = systemExitOnShutdown; } public int getSystemExitOnShutdownExitCode() { return systemExitOnShutdownExitCode; } public void setSystemExitOnShutdownExitCode(int systemExitOnShutdownExitCode) { this systemExitOnShutdownExitCode = systemExitOnShutdownExitCode; } }",1.0,
1937,1937,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\xbean\PooledBrokerFactoryBean.,PooledBrokerFactoryBean,"public class PooledBrokerFactoryBean implements FactoryBean, InitializingBean, DisposableBean { static final HashMap<String, SharedBroker> SHARED BROKER MAP = new HashMap<String, SharedBroker>(); private boolean start; private Resource config; static class SharedBroker { BrokerFactoryBean factory; int refCount; } public void afterPropertiesSet() throws Exception { synchronized (SHARED BROKER MAP) { SharedBroker sharedBroker = SHARED BROKER MAP get(config getFilename()); if (sharedBroker == null) { sharedBroker = new SharedBroker(); sharedBroker factory = new BrokerFactoryBean(); sharedBroker factory setConfig(config); sharedBroker factory setStart(start); sharedBroker factory afterPropertiesSet(); SHARED BROKER MAP put(config getFilename(), sharedBroker); } sharedBroker refCount++; } } public void destroy() throws Exception { synchronized (SHARED BROKER MAP) { SharedBroker sharedBroker = SHARED BROKER MAP get(config getFilename()); if (sharedBroker != null) { sharedBroker refCount--; if (sharedBroker refCount == 0) { sharedBroker factory destroy(); SHARED BROKER MAP remove(config getFilename()); } } } } public Resource getConfig() { return config; } public Object getObject() throws Exception { synchronized (SHARED BROKER MAP) { SharedBroker sharedBroker = SHARED BROKER MAP get(config getFilename()); if (sharedBroker != null) { return sharedBroker factory getObject(); } } return null; } public Class getObjectType() { return BrokerService class; } public boolean isSingleton() { return true; } public boolean isStart() { return start; } public void setConfig(Resource config) { this config = config; } public void setStart(boolean start) { this start = start; } }",1.0,
1938,1938,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\xbean\PooledBrokerFactoryBean.,SharedBroker,static class SharedBroker { BrokerFactoryBean factory; int refCount; },1.0,
1939,1939,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\xbean\XBeanBrokerFactory.,XBeanBrokerFactory,"public class XBeanBrokerFactory implements BrokerFactoryHandler { private static final transient Logger LOG = LoggerFactory getLogger(XBeanBrokerFactory class); static { PropertyEditorManager registerEditor(URI class, URIEditor class); } private boolean validate = true; public boolean isValidate() { return validate; } public void setValidate(boolean validate) { this validate = validate; } public BrokerService createBroker(URI config) throws Exception { String uri = config getSchemeSpecificPart(); if (uri lastIndexOf( ) != -1) { IntrospectionSupport setProperties(this, URISupport parseQuery(uri)); uri = uri substring(0, uri lastIndexOf( )); } ApplicationContext context = createApplicationContext(uri); BrokerService broker = null; try { broker = (BrokerService)context getBean( broker ); } catch (BeansException e) { } if (broker == null) { String[] names = context getBeanNamesForType(BrokerService class); for (int i = 0; i < names length; i++) { String name = names[i]; broker = (BrokerService)context getBean(name); if (broker != null) { break; } } } if (broker == null) { throw new IllegalArgumentException( The configuration has no BrokerService instance for resource + config); } if (broker instanceof ApplicationContextAware) { ((ApplicationContextAware)broker) setApplicationContext(context); } return broker; } protected ApplicationContext createApplicationContext(String uri) throws MalformedURLException { Resource resource = Utils resourceFromString(uri); LOG debug( Using + resource + from + uri); try { return new ResourceXmlApplicationContext(resource) { Override protected void initBeanDefinitionReader(XmlBeanDefinitionReader reader) { reader setValidating(isValidate()); } }; } catch (FatalBeanException errorToLog) { LOG error( Failed to load + resource + , reason + errorToLog getLocalizedMessage(), errorToLog); throw errorToLog; } } }",1.0,
1940,1940,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\xbean\XBeanBrokerService.,XBeanBrokerService,public class XBeanBrokerService extends BrokerService { private boolean start; public XBeanBrokerService() { start = BrokerFactory getStartDefault(); } PostConstruct public void afterPropertiesSet() throws Exception { ensureSystemUsageHasStore(); if (shouldAutostart()) { start(); } } Override protected boolean shouldAutostart() { return start; } private void ensureSystemUsageHasStore() throws IOException { SystemUsage usage = getSystemUsage(); if (usage getStoreUsage() getStore() == null) { usage getStoreUsage() setStore(getPersistenceAdapter()); } if (usage getTempUsage() getStore() == null) { usage getTempUsage() setStore(getTempDataStore()); } if (usage getJobSchedulerUsage() getStore() == null) { usage getJobSchedulerUsage() setStore(getJobSchedulerStore()); } } PreDestroy public void destroy() throws Exception { stop(); } Override public void stop() throws Exception { CachedIntrospectionResults clearClassLoader(getClass() getClassLoader()); super stop(); } public void setStart(boolean start) { this start = start; } },1.0,
1941,1941,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\spring\Listener.,Listener,public class Listener implements MessageListener { private static final Logger LOG = LoggerFactory getLogger(Listener class); List<Message> messages = new ArrayList<Message>(); long lastReceived = 0L; public void onMessage(Message message) { try { LOG info( LISTENER received + message getJMSDestination() + + ((ActiveMQTextMessage)message) getText()); lastReceived = System currentTimeMillis(); synchronized (messages) { messages add(message); } } catch (JMSException e) { e printStackTrace(); } } },1.0,
1944,1944,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\spring\ParallelXATransactionTest.,ProducerThread,"class ProducerThread extends Thread { PlatformTransactionManager txManager; JmsTemplate jmsTemplate; Exception lastException; public ProducerThread(JmsTemplate jmsTemplate, PlatformTransactionManager txManager) { this jmsTemplate = jmsTemplate; this txManager = txManager; } public void run() { int i = 0; while (i++ < 10) { try { Thread sleep((long) (Math random() * SLEEP)); } catch (InterruptedException e) { e printStackTrace(); } TransactionTemplate tt = new TransactionTemplate(this txManager); try { tt execute(new TransactionCallbackWithoutResult() { Override protected void doInTransactionWithoutResult(TransactionStatus status) { try { for (final String queue QUEUES) { jmsTemplate send(queue + , + AUDIT, new MessageCreator() { public Message createMessage(Session session) throws JMSException { return session createTextMessage( P1 + queue + - + BODY); } }); Thread sleep((long) (Math random() * SLEEP)); LOG info( P1 Send msg to + queue + , + AUDIT); } } catch (Exception e) { Assert fail( Exception occurred + e); } } }); } catch (TransactionException e) { lastException = e; break; } } } public Exception getLastException() { return lastException; } }",1.0,
1945,1945,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\spring\SpringTest.,SpringTest,"public class SpringTest extends TestCase { public void testSenderWithSpringXmlEmbeddedPooledBrokerConfiguredViaXml() throws Exception { String config = spring-embedded-pooled xml ; Thread currentThread() setContextClassLoader(SpringTest class getClassLoader()); ClassPathXmlApplicationContext context1 = new ClassPathXmlApplicationContext(config); BrokerService bs1 = (BrokerService) context1 getBean( broker1 ); assertNotNull(bs1); BrokerService bs2 = (BrokerService) context1 getBean( broker2 ); assertNotNull(bs1); assertEquals(bs1, bs2); ClassPathXmlApplicationContext context2 = new ClassPathXmlApplicationContext(config); BrokerService bs3 = (BrokerService) context2 getBean( broker1 ); assertNotNull(bs3); BrokerService bs4 = (BrokerService) context2 getBean( broker2 ); assertNotNull(bs4); assertEquals(bs1, bs3); assertEquals(bs1, bs4); assertTrue(bs1 isStarted()); context2 close(); assertTrue(bs1 isStarted()); context1 close(); assertFalse(bs1 isStarted()); } }",1.0,
1946,1946,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\store\leveldb\LevelDBConfigTest.,LevelDBConfigTest,"public class LevelDBConfigTest extends TestCase { protected static final String CONF ROOT = src/test/resources/org/apache/activemq/store/leveldb/ ; private static final Logger LOG = LoggerFactory getLogger(LevelDBConfigTest class); public void testBrokerConfig() throws Exception { ActiveMQTopic dest; BrokerService broker; broker = createBroker( org/apache/activemq/store/leveldb/leveldb xml ); LOG info( Success ); try { assertEquals( Broker Config Error (brokerName) , brokerConfigTest , broker getBrokerName()); assertEquals( Broker Config Error (populateJMSXUserID) , false, broker isPopulateJMSXUserID()); assertEquals( Broker Config Error (useLoggingForShutdownErrors) , true, broker isUseLoggingForShutdownErrors()); assertEquals( Broker Config Error (useJmx) , true, broker isUseJmx()); assertEquals( Broker Config Error (persistent) , true, broker isPersistent()); assertEquals( Broker Config Error (useShutdownHook) , false, broker isUseShutdownHook()); assertEquals( Broker Config Error (deleteAllMessagesOnStartup) , true, broker isDeleteAllMessagesOnStartup()); LOG info( Success ); assertEquals( Should have a specific VM Connector , vm LOG info( Success ); SystemUsage systemUsage = broker getSystemUsage(); assertTrue( Should have a SystemUsage , systemUsage != null); assertEquals( SystemUsage Config Error (MemoryUsage limit) , 1024 * 1024 * 10, systemUsage getMemoryUsage() getLimit()); assertEquals( SystemUsage Config Error (MemoryUsage percentUsageMinDelta) , 20, systemUsage getMemoryUsage() getPercentUsageMinDelta()); assertEquals( SystemUsage Config Error (TempUsage limit) , 1024 * 1024 * 100, systemUsage getTempUsage() getLimit()); assertEquals( SystemUsage Config Error (StoreUsage limit) , 1024 * 1024 * 1024, systemUsage getStoreUsage() getLimit()); assertEquals( SystemUsage Config Error (StoreUsage name) , foo , systemUsage getStoreUsage() getName()); assertNotNull(systemUsage getStoreUsage() getStore()); assertTrue(systemUsage getStoreUsage() getStore() instanceof LevelDBPersistenceAdapter); LOG info( Success ); } finally { if (broker != null) { broker stop(); } } } protected static void recursiveDelete(File file) { if (file isDirectory()) { File[] files = file listFiles(); for (int i = 0; i < files length; i++) { recursiveDelete(files[i]); } } file delete(); } protected BrokerService createBroker(String resource) throws Exception { return createBroker(new ClassPathResource(resource)); } protected BrokerService createBroker(Resource resource) throws Exception { BrokerFactoryBean factory = new BrokerFactoryBean(resource); factory afterPropertiesSet(); BrokerService broker = factory getBroker(); assertTrue( Should have a broker! , broker != null); return broker; } }",1.0,
1948,1948,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\usecases\AMQDeadlockTest3.,TestMessageListener1,private class TestMessageListener1 implements MessageListener { private final long waitTime; public TestMessageListener1(long waitTime) { this waitTime = waitTime; } public void onMessage(Message msg) { try { LOG info( Listener1 Consumed message + msg getIntProperty( count )); messageCount incrementAndGet(); doneLatch countDown(); Thread sleep(waitTime); } catch (JMSException e) { e printStackTrace(); } catch (InterruptedException e) { e printStackTrace(); } } },1.0,
1949,1949,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\usecases\AMQDeadlockTest3.,PooledProducerTask,"private static class PooledProducerTask implements Runnable { private final String queueName; private final PooledConnectionFactory pcf; public PooledProducerTask(final PooledConnectionFactory pcf, final String queueName) { this pcf = pcf; this queueName = queueName; } public void run() { try { final JmsTemplate jmsTemplate = new JmsTemplate(pcf); jmsTemplate setDeliveryMode(DeliveryMode NON PERSISTENT); jmsTemplate setExplicitQosEnabled(true); jmsTemplate setMessageIdEnabled(false); jmsTemplate setMessageTimestampEnabled(false); jmsTemplate afterPropertiesSet(); final byte[] bytes = new byte[2048]; final Random r = new Random(); r nextBytes(bytes); Thread sleep(2000); final AtomicInteger count = new AtomicInteger(); for (int i = 0; i < NUM MESSAGE TO SEND; i++) { jmsTemplate send(queueName, new MessageCreator() { public Message createMessage(Session session) throws JMSException { final BytesMessage message = session createBytesMessage(); message writeBytes(bytes); message setIntProperty( count , count incrementAndGet()); message setStringProperty( producer , pooled ); return message; } }); LOG info( PooledProducer sent message + count get()); } } catch (final Throwable e) { LOG error( Producer 1 is exiting , e); } } }",1.0,
1950,1950,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\usecases\AMQDeadlockTest3.,NonPooledProducerTask,"private static class NonPooledProducerTask implements Runnable { private final String queueName; private final ConnectionFactory cf; public NonPooledProducerTask(final ConnectionFactory cf, final String queueName) { this cf = cf; this queueName = queueName; } public void run() { try { final JmsTemplate jmsTemplate = new JmsTemplate(cf); jmsTemplate setDeliveryMode(DeliveryMode NON PERSISTENT); jmsTemplate setExplicitQosEnabled(true); jmsTemplate setMessageIdEnabled(false); jmsTemplate setMessageTimestampEnabled(false); jmsTemplate afterPropertiesSet(); final byte[] bytes = new byte[2048]; final Random r = new Random(); r nextBytes(bytes); Thread sleep(2000); final AtomicInteger count = new AtomicInteger(); for (int i = 0; i < NUM MESSAGE TO SEND; i++) { jmsTemplate send(queueName, new MessageCreator() { public Message createMessage(Session session) throws JMSException { final BytesMessage message = session createBytesMessage(); message writeBytes(bytes); message setIntProperty( count , count incrementAndGet()); message setStringProperty( producer , non-pooled ); return message; } }); LOG info( Non-PooledProducer sent message + count get()); } } catch (final Throwable e) { LOG error( Producer 1 is exiting , e); } } }",1.0,
1952,1952,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\usecases\AMQDeadlockTestW4Brokers.,TestMessageListener1,private static class TestMessageListener1 implements MessageListener { final AtomicInteger count = new AtomicInteger(0); private final long waitTime; public TestMessageListener1(long waitTime) { this waitTime = waitTime; } public void onMessage(Message msg) { try { int value = count incrementAndGet(); if (value % 1000 == 0) { LOG info( Consumed message + value); } Thread sleep(waitTime); LATCH countDown(); } catch (InterruptedException e) { e printStackTrace(); } } },1.0,
1953,1953,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\usecases\AMQDeadlockTestW4Brokers.,PooledProducerTask,"private class PooledProducerTask implements Runnable { private final String queueName; private final PooledConnectionFactory pcf; private final String producerName; public PooledProducerTask(final PooledConnectionFactory pcf, final String queueName, final String producerName) { this pcf = pcf; this queueName = queueName; this producerName = producerName; } public void run() { try { final JmsTemplate jmsTemplate = new JmsTemplate(pcf); jmsTemplate setDeliveryMode(DeliveryMode NON PERSISTENT); jmsTemplate setExplicitQosEnabled(true); jmsTemplate setMessageIdEnabled(false); jmsTemplate setMessageTimestampEnabled(false); jmsTemplate afterPropertiesSet(); final byte[] bytes = new byte[2048]; final Random r = new Random(); r nextBytes(bytes); for (int i = 0; i < NUM MESSAGE TO SEND; i++) { final int count = i; jmsTemplate send(queueName, new MessageCreator() { public Message createMessage(Session session) throws JMSException { final BytesMessage message = session createBytesMessage(); message writeBytes(bytes); message setIntProperty( count , count); message setStringProperty( producerName , producerName); return message; } }); } } catch (final Throwable e) { LOG error( Producer 1 is exiting , e); } } }",1.0,
1955,1955,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\usecases\AMQFailoverIssue.,TestMessageListener1,private class TestMessageListener1 implements MessageListener { private final long waitTime; public TestMessageListener1(long waitTime) { this waitTime = waitTime; } public void onMessage(Message msg) { try { messageCount incrementAndGet(); doneLatch countDown(); Thread sleep(waitTime); } catch (InterruptedException e) { e printStackTrace(); } } },1.0,
1956,1956,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\usecases\AMQFailoverIssue.,PooledProducerTask,"private static class PooledProducerTask implements Runnable { private final String queueName; private final PooledConnectionFactory pcf; public PooledProducerTask(final PooledConnectionFactory pcf, final String queueName) { this pcf = pcf; this queueName = queueName; } public void run() { try { final JmsTemplate jmsTemplate = new JmsTemplate(pcf); jmsTemplate setDeliveryMode(DeliveryMode NON PERSISTENT); jmsTemplate setExplicitQosEnabled(true); jmsTemplate setMessageIdEnabled(false); jmsTemplate setMessageTimestampEnabled(false); jmsTemplate afterPropertiesSet(); final byte[] bytes = new byte[2048]; final Random r = new Random(); r nextBytes(bytes); Thread sleep(2000); final AtomicInteger count = new AtomicInteger(); for (int i = 0; i < NUM MESSAGE TO SEND; i++) { jmsTemplate send(queueName, new MessageCreator() { public Message createMessage(Session session) throws JMSException { final BytesMessage message = session createBytesMessage(); message writeBytes(bytes); message setIntProperty( count , count incrementAndGet()); message setStringProperty( producer , pooled ); return message; } }); } } catch (final Throwable e) { e printStackTrace(); } } }",1.0,
1958,1958,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\bugs\AMQ1730Test.,ValueHolder,private class ValueHolder<T> { private T value; public ValueHolder(T value) { super(); this value = value; } void set(T value) { this value = value; } T get() { return value; } },1.0,
1966,1966,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\ProtocolException.,ProtocolException,"public class ProtocolException extends IOException { private static final long serialVersionUID = -2869735532997332242L; private final boolean fatal; public ProtocolException() { this(null); } public ProtocolException(String s) { this(s, false); } public ProtocolException(String s, boolean fatal) { this(s, fatal, null); } public ProtocolException(String s, boolean fatal, Throwable cause) { super(s); this fatal = fatal; initCause(cause); } public boolean isFatal() { return fatal; } }",1.0,
1970,1970,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\StompFrameError.,StompFrameError,public class StompFrameError extends StompFrame { private final ProtocolException exception; public StompFrameError(ProtocolException exception) { this exception = exception; } public ProtocolException getException() { return exception; } },1.0,
1973,1973,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\StompNIOSSLTransportFactory.,StompNIOSSLTransportFactory,"public class StompNIOSSLTransportFactory extends StompNIOTransportFactory { protected SSLContext context; Override protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new NIOSSLTransportServer(context, this, location, serverSocketFactory) { Override protected Transport createTransport(Socket socket, WireFormat format) throws IOException { StompNIOSSLTransport transport = new StompNIOSSLTransport(format, socket); if (context != null) { transport setSslContext(context); } transport setNeedClientAuth(isNeedClientAuth()); transport setWantClientAuth(isWantClientAuth()); return transport; } }; } Override protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new StompNIOSSLTransport(wf, socketFactory, location, localLocation); } Override public TransportServer doBind(URI location) throws IOException { if (SslContext getCurrentSslContext() != null) { try { context = SslContext getCurrentSslContext() getSSLContext(); } catch (Exception e) { throw new IOException(e); } } return super doBind(location); } }",1.0,
1975,1975,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\StompNIOTransportFactory.,StompNIOTransportFactory,"public class StompNIOTransportFactory extends NIOTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return stomp ; } protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpTransportServer(this, location, serverSocketFactory) { protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new StompNIOTransport(format, socket); } }; } protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new StompNIOTransport(wf, socketFactory, location, localLocation); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); MutexTransport mutex = transport narrow(MutexTransport class); if (mutex != null) { mutex setSyncOnCommand(true); } return transport; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new StompTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } Override protected Transport createInactivityMonitor(Transport transport, WireFormat format) { StompInactivityMonitor monitor = new StompInactivityMonitor(transport, format); StompTransportFilter filter = (StompTransportFilter) transport narrow(StompTransportFilter class); filter setInactivityMonitor(monitor); return monitor; } }",1.0,
1976,1976,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\StompQueueBrowserSubscription.,StompQueueBrowserSubscription,"public class StompQueueBrowserSubscription extends StompSubscription { public StompQueueBrowserSubscription(ProtocolConverter stompTransport, String subscriptionId, ConsumerInfo consumerInfo, String transformation) { super(stompTransport, subscriptionId, consumerInfo, transformation); } Override void onMessageDispatch(MessageDispatch md, String ackId) throws IOException, JMSException { if (md getMessage() != null) { super onMessageDispatch(md, ackId); } else { StompFrame browseDone = new StompFrame(Stomp Responses MESSAGE); browseDone getHeaders() put(Stomp Headers Message SUBSCRIPTION, this getSubscriptionId()); browseDone getHeaders() put(Stomp Headers Message BROWSER, end ); browseDone getHeaders() put(Stomp Headers Message DESTINATION, protocolConverter findTranslator(null) convertDestination(protocolConverter, this destination)); browseDone getHeaders() put(Stomp Headers Message MESSAGE ID, 0 ); protocolConverter sendToStomp(browseDone); } } Override public MessageAck onStompMessageNack(String messageId, TransactionId transactionId) throws ProtocolException { throw new ProtocolException( Cannot Nack a message on a Queue Browser Subscription ); } }",1.0,
1977,1977,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\StompSslTransportFactory.,StompSslTransportFactory,"public class StompSslTransportFactory extends SslTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return stomp ; } protected SslTransportServer createSslTransportServer(final URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new SslTransportServer(this, location, serverSocketFactory) { Override protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new SslTransport(format, (SSLSocket)socket) { private X509Certificate[] cachedPeerCerts; Override public void doConsume(Object command) { StompFrame frame = (StompFrame) command; if (cachedPeerCerts == null) { cachedPeerCerts = getPeerCertificates(); } frame setTransportContext(cachedPeerCerts); super doConsume(command); } }; } }; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new StompTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); MutexTransport mutex = transport narrow(MutexTransport class); if (mutex != null) { mutex setSyncOnCommand(true); } return transport; } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } Override protected Transport createInactivityMonitor(Transport transport, WireFormat format) { StompInactivityMonitor monitor = new StompInactivityMonitor(transport, format); StompTransportFilter filter = (StompTransportFilter) transport narrow(StompTransportFilter class); filter setInactivityMonitor(monitor); return monitor; } }",1.0,
1979,1979,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\StompTransportFactory.,StompTransportFactory,"public class StompTransportFactory extends TcpTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return stomp ; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new StompTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); MutexTransport mutex = transport narrow(MutexTransport class); if (mutex != null) { mutex setSyncOnCommand(true); } return transport; } Override protected Transport createInactivityMonitor(Transport transport, WireFormat format) { StompInactivityMonitor monitor = new StompInactivityMonitor(transport, format); StompTransportFilter filter = (StompTransportFilter) transport narrow(StompTransportFilter class); filter setInactivityMonitor(monitor); return monitor; } }",1.0,
1982,1982,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\StompWireFormatFactory.,StompWireFormatFactory,public class StompWireFormatFactory implements WireFormatFactory { public WireFormat createWireFormat() { return new StompWireFormat(); } },1.0,
1983,1983,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\ConnectTest.,ConnectTest,"public class ConnectTest { private static final Logger LOG = LoggerFactory getLogger(ConnectTest class); BrokerService brokerService; Vector<Throwable> exceptions = new Vector<Throwable>(); Before public void startBroker() throws Exception { exceptions clear(); brokerService = new BrokerService(); brokerService setPersistent(false); brokerService setAdvisorySupport(false); } After public void stopBroker() throws Exception { if (brokerService != null) { brokerService stop(); } } Test public void testStompConnectLeak() throws Exception { brokerService addConnector( stomp brokerService start(); Thread t1 = new Thread() { StompConnection connection = new StompConnection(); public void run() { try { connection open( localhost , brokerService getTransportConnectors() get(0) getConnectUri() getPort()); connection connect( system , manager ); connection disconnect(); } catch (Exception ex) { LOG error( unexpected exception on connect/disconnect , ex); exceptions add(ex); } } }; int i = 0; long done = System currentTimeMillis() + (15 * 1000); while (System currentTimeMillis() < done) { t1 run(); if (++i % 5000 == 0) { LOG info( connection count on stomp connector + brokerService getTransportConnectors() get(0) connectionCount()); } } assertTrue( no dangling connections , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 0 == brokerService getTransportConnectors() get(0) connectionCount(); } })); assertTrue( no exceptions , exceptions isEmpty()); } Test public void testJaasDualStopWithOpenConnection() throws Exception { brokerService setPlugins(new BrokerPlugin[]{new JaasDualAuthenticationPlugin()}); brokerService addConnector( stomp brokerService start(); final int listenPort = brokerService getTransportConnectors() get(0) getConnectUri() getPort(); Thread t1 = new Thread() { StompConnection connection = new StompConnection(); public void run() { try { connection open( localhost , listenPort); connection connect( system , manager ); } catch (Exception ex) { LOG error( unexpected exception on connect/disconnect , ex); exceptions add(ex); } } }; t1 run(); assertTrue( one connection , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 1 == brokerService getTransportConnectors() get(0) connectionCount(); } })); brokerService stop(); ServerSocket socket = ServerSocketFactory getDefault() createServerSocket(); socket setReuseAddress(true); InetAddress address = InetAddress getLocalHost(); socket bind(new InetSocketAddress(address, listenPort)); LOG info( bound address + socket); socket close(); assertTrue( no exceptions , exceptions isEmpty()); } Test public void testInactivityMonitor() throws Exception { brokerService addConnector( stomp brokerService start(); Thread t1 = new Thread() { StompConnection connection = new StompConnection(); public void run() { try { connection open( localhost , brokerService getTransportConnectors() get(0) getConnectUri() getPort()); connection connect( system , manager ); } catch (Exception ex) { LOG error( unexpected exception on connect/disconnect , ex); exceptions add(ex); } } }; t1 run(); assertTrue( one connection , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 1 == brokerService getTransportConnectors() get(0) connectionCount(); } })); assertTrue( no dangling connections , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 0 == brokerService getTransportConnectors() get(0) connectionCount(); } })); assertTrue( no exceptions , exceptions isEmpty()); } }",1.0,
1984,1984,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\SamplePojo.,SamplePojo,"public class SamplePojo implements Serializable { private static final long serialVersionUID = 9118938642100015088L; XStreamAlias( name ) private String name; XStreamAlias( city ) private String city; public SamplePojo() { } public SamplePojo(String name, String city) { this name = name; this city = city; } public String getCity() { return city; } public void setCity(String city) { this city = city; } public String getName() { return name; } public void setName(String name) { this name = name; } }",1.0,
1985,1985,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\Stomp11NIOSSLTest.,Stomp11NIOSSLTest,"public class Stomp11NIOSSLTest extends Stomp11Test { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+nio+ssl nioSslPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this nioSslPort); } }",1.0,
1986,1986,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\Stomp11NIOTest.,Stomp11NIOTest,"public class Stomp11NIOTest extends Stomp11Test { Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+nio nioPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { return new Socket( 127 0 0 1 , this nioPort); } }",1.0,
1987,1987,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\Stomp11SslAuthTest.,Stomp11SslAuthTest,"public class Stomp11SslAuthTest extends Stomp11Test { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected void addOpenWireConnector() throws Exception { TransportConnector connector = brokerService addConnector( ssl jmsUri = connector getPublishableConnectString(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+ssl sslPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this sslPort); } }",1.0,
1989,1989,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\Stomp12NIOSSLTest.,Stomp12NIOSSLTest,"public class Stomp12NIOSSLTest extends Stomp12Test { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+nio+ssl nioSslPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this nioSslPort); } }",1.0,
1990,1990,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\Stomp12NIOTest.,Stomp12NIOTest,"public class Stomp12NIOTest extends Stomp12Test { Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+nio nioPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { return new Socket( 127 0 0 1 , this nioPort); } }",1.0,
1991,1991,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\Stomp12SslAuthTest.,Stomp12SslAuthTest,"public class Stomp12SslAuthTest extends Stomp12Test { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected void addOpenWireConnector() throws Exception { TransportConnector connector = brokerService addConnector( ssl jmsUri = connector getPublishableConnectString(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+ssl sslPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this sslPort); } }",1.0,
1997,1997,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\StompNIOLoadTest.,StompNIOLoadTest,"public class StompNIOLoadTest extends StompLoadTest { Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+nio nioPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { return new Socket( 127 0 0 1 , this nioPort); } }",1.0,
1998,1998,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\StompNIOSSLLoadTest.,StompNIOSSLLoadTest,"public class StompNIOSSLLoadTest extends StompLoadTest { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+nio+ssl nioSslPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this nioSslPort); } }",1.0,
1999,1999,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\StompNIOSSLTest.,StompNIOSSLTest,"public class StompNIOSSLTest extends StompTest { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+nio+ssl nioSslPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this nioSslPort); } }",1.0,
2000,2000,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\StompNIOTest.,StompNIOTest,"public class StompNIOTest extends StompTest { Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+nio nioPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { return new Socket( 127 0 0 1 , this nioPort); } }",1.0,
2002,2002,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\StompSslAuthTest.,StompSslAuthTest,"public class StompSslAuthTest extends StompTest { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected BrokerPlugin configureAuthentication() throws Exception { JaasCertificateAuthenticationPlugin plugin = new JaasCertificateAuthenticationPlugin(); plugin setConfiguration( cert-login ); return plugin; } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this sslPort); } Override protected void addOpenWireConnector() throws Exception { TransportConnector connector = brokerService addConnector( ssl jmsUri = connector getPublishableConnectString(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+ssl sslPort = connector getConnectUri() getPort(); } Override public void testSubscribeWithReceiptNotAuthorized() throws Exception { } Override public void testConnectNotAuthenticatedWrongUser() throws Exception { } Override public void testConnectNotAuthenticatedWrongPassword() throws Exception { } Override public void testSendNotAuthorized() throws Exception { } Override public void testSubscribeNotAuthorized() throws Exception { } Override public void testJMSXUserIDIsSetInMessage() throws Exception { } Override public void testJMSXUserIDIsSetInStompMessage() throws Exception { } Override public void testClientSetMessageIdIsIgnored() throws Exception { } }",1.0,
2003,2003,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\StompSSLLoadTest.,StompSSLLoadTest,"public class StompSSLLoadTest extends StompLoadTest { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+ssl sslPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this sslPort); } }",1.0,
2004,2004,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\StompSslTest.,StompSslTest,"public class StompSslTest extends StompTest { Override public void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } Override protected void addStompConnector() throws Exception { TransportConnector connector = brokerService addConnector( stomp+ssl sslPort = connector getConnectUri() getPort(); } Override protected Socket createSocket() throws IOException { SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket( 127 0 0 1 , this sslPort); } }",1.0,
2011,2011,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\util\ResourceLoadingSslContext.,ResourceLoadingSslContext,"public class ResourceLoadingSslContext extends SslContext { private String keyStoreType= jks ; private String trustStoreType= jks ; private String secureRandomAlgorithm= SHA1PRNG ; private String keyStoreAlgorithm=KeyManagerFactory getDefaultAlgorithm(); private String trustStoreAlgorithm=TrustManagerFactory getDefaultAlgorithm(); private String keyStore; private String trustStore; private String keyStoreKeyPassword; private String keyStorePassword; private String trustStorePassword; PostConstruct public void afterPropertiesSet() throws Exception { keyManagers addAll(createKeyManagers()); trustManagers addAll(createTrustManagers()); if( secureRandom == null ) { secureRandom = createSecureRandom(); } } private SecureRandom createSecureRandom() throws NoSuchAlgorithmException { return SecureRandom getInstance(secureRandomAlgorithm); } private Collection<TrustManager> createTrustManagers() throws Exception { KeyStore ks = createTrustManagerKeyStore(); if( ks ==null ) { return new ArrayList<TrustManager>(0); } TrustManagerFactory tmf = TrustManagerFactory getInstance(trustStoreAlgorithm); tmf init(ks); return Arrays asList(tmf getTrustManagers()); } private Collection<KeyManager> createKeyManagers() throws Exception { KeyStore ks = createKeyManagerKeyStore(); if( ks ==null ) { return new ArrayList<KeyManager>(0); } KeyManagerFactory tmf = KeyManagerFactory getInstance(keyStoreAlgorithm); tmf init(ks, keyStoreKeyPassword == null (keyStorePassword==null null keyStorePassword toCharArray()) keyStoreKeyPassword toCharArray()); return Arrays asList(tmf getKeyManagers()); } private KeyStore createTrustManagerKeyStore() throws Exception { if( trustStore ==null ) { return null; } KeyStore ks = KeyStore getInstance(trustStoreType); InputStream is=resourceFromString(trustStore) getInputStream(); try { ks load(is, trustStorePassword==null null trustStorePassword toCharArray()); } finally { is close(); } return ks; } private KeyStore createKeyManagerKeyStore() throws Exception { if( keyStore ==null ) { return null; } KeyStore ks = KeyStore getInstance(keyStoreType); InputStream is=resourceFromString(keyStore) getInputStream(); try { ks load(is, keyStorePassword==null null keyStorePassword toCharArray()); } finally { is close(); } return ks; } public String getTrustStoreType() { return trustStoreType; } public String getKeyStoreType() { return keyStoreType; } public String getKeyStore() { return keyStore; } public void setKeyStore(String keyStore) throws MalformedURLException { this keyStore = keyStore; } public String getTrustStore() { return trustStore; } public void setTrustStore(String trustStore) throws MalformedURLException { this trustStore = trustStore; } public String getKeyStoreAlgorithm() { return keyStoreAlgorithm; } public void setKeyStoreAlgorithm(String keyAlgorithm) { this keyStoreAlgorithm = keyAlgorithm; } public String getTrustStoreAlgorithm() { return trustStoreAlgorithm; } public void setTrustStoreAlgorithm(String trustAlgorithm) { this trustStoreAlgorithm = trustAlgorithm; } public String getKeyStoreKeyPassword() { return keyStoreKeyPassword; } public void setKeyStoreKeyPassword(String keyPassword) { this keyStoreKeyPassword = keyPassword; } public String getKeyStorePassword() { return keyStorePassword; } public void setKeyStorePassword(String keyPassword) { this keyStorePassword = keyPassword; } public String getTrustStorePassword() { return trustStorePassword; } public void setTrustStorePassword(String trustPassword) { this trustStorePassword = trustPassword; } public void setKeyStoreType(String keyType) { this keyStoreType = keyType; } public void setTrustStoreType(String trustType) { this trustStoreType = trustType; } public String getSecureRandomAlgorithm() { return secureRandomAlgorithm; } public void setSecureRandomAlgorithm(String secureRandomAlgorithm) { this secureRandomAlgorithm = secureRandomAlgorithm; } public static Resource resourceFromString(String uri) throws MalformedURLException { Resource resource; File file = new File(uri); if (file exists()) { resource = new FileSystemResource(uri); } else if (ResourceUtils isUrl(uri)) { resource = new UrlResource(uri); } else { resource = new ClassPathResource(uri); } return resource; } }",1.0,
2012,2012,data,\smellybot\activemq\activemq-stomp\src\test\java\org\apache\activemq\transport\stomp\util\XStreamBrokerContext.,XStreamBrokerContext,"public class XStreamBrokerContext implements BrokerContext { private final Map<String, XStream> beansMap = new HashMap<String, XStream>(); public XStreamBrokerContext() { XStream stream = new XStream(); stream processAnnotations(SamplePojo class); beansMap put( xstream , stream); } Override public Object getBean(String name) { return this beansMap get(name); } SuppressWarnings( rawtypes ) Override public Map getBeansOfType(Class type) { if (type equals(XStream class)) { return this beansMap; } return null; } }",1.0,
2014,2014,data,\smellybot\activemq\activemq-tooling\activemq-maven-plugin\src\main\java\org\apache\activemq\maven\XBeanFileResolver.,XBeanFileResolver,"public class XBeanFileResolver { private static final String XBEAN FILE = xbean file ; private XBeanFileResolver() { } public static boolean isXBeanFile(final String configUri) { return configUri startsWith(XBEAN FILE); } public static String toUrlCompliantAbsolutePath(final String configUri) { if (!isXBeanFile(configUri)) return configUri; String filePath = extractFilePath(configUri); return XBEAN FILE + toAbsolutePath(filePath); } private static String extractFilePath(final String configUri) { return configUri substring(getIndexFilePath(configUri), configUri length()); } private static int getIndexFilePath(final String configUri) { return configUri indexOf(XBEAN FILE) + XBEAN FILE length(); } private static String toAbsolutePath(final String path) { try { final URL url = new File(path) toURI() toURL(); return toFilePath(url); } catch (MalformedURLException e) { throw new RuntimeException( Failed to resolve relative path for + path, e); } } private static String toFilePath(final URL url) { String filePath = url getFile(); return underWindows() removePrependingSlash(filePath) filePath; } private static String removePrependingSlash(String filePath) { return filePath substring(1, filePath length()); } private static boolean underWindows() { String os = System getProperty( os name ) toLowerCase(); return (os indexOf( win ) >= 0); } }",1.0,
2015,2015,data,\smellybot\activemq\activemq-tooling\activemq-maven-plugin\src\test\java\org\apache\activemq\maven\XBeanFileResolverTest.,XBeanFileResolverTest,"public class XBeanFileResolverTest { private static final String XBEAN FILE = xbean file ; Test public void urlToXBeanFileShouldBeResolvedToAbsolutePath() throws IOException { String currentDirectory = getCurrentDirectoryLinuxStyle(); String relativeXBeanFilePath = src/main/resources/activemq xml ; String expectedUrl = XBEAN FILE + currentDirectory + / + relativeXBeanFilePath; String actualUrl = XBeanFileResolver toUrlCompliantAbsolutePath(XBEAN FILE + relativeXBeanFilePath); assertEquals(expectedUrl, actualUrl); } private String getCurrentDirectoryLinuxStyle() throws IOException { String currentDirectory = new File( ) getCanonicalPath(); return currentDirectory replace( , / ); } }",1.0,
2016,2016,data,\smellybot\activemq\activemq-tooling\activemq-memtest-maven-plugin\src\main\java\org\apache\activemq\maven\MemtestMojo.,MemtestMojo,"public class MemtestMojo extends AbstractMojo { private String url; private String topic; private String connectionCheckpointSize; private String durable; private String producerCount; private String prefetchSize; private String consumerCount; private String messageCount; private String messageSize; private String checkpointInterval; private String destinationName; private String reportName; private String reportDirectory; Override public void execute() throws MojoExecutionException { JMSMemtest main(createArgument()); } public String[] createArgument() { String[] options = { url= + url, topic= + topic, durable= + durable, connectionCheckpointSize= + connectionCheckpointSize, producerCount= + producerCount, consumerCount= + consumerCount, messageCount= + messageCount, messageSize= + messageSize, checkpointInterval= + checkpointInterval, destinationName= + destinationName, reportName= + reportName, prefetchSize= + prefetchSize, reportDirectory= + reportDirectory, }; return options; } }",1.0,
2018,2018,data,\smellybot\activemq\activemq-tooling\activemq-memtest-maven-plugin\src\main\java\org\apache\activemq\tool\MemConsumer.,MemConsumer,"public class MemConsumer extends MemMessageIdList implements MessageListener { static long ctr; protected Connection connection; protected MessageConsumer consumer; protected long counter; protected boolean isParent; protected boolean inOrder = true; public MemConsumer() { super(); } public MemConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException { connection = fac createConnection(); Session s = connection createSession(false, Session AUTO ACKNOWLEDGE); if (dest instanceof Topic && consumerName != null && consumerName length() > 0) { consumer = s createDurableSubscriber((Topic) dest, consumerName); } else { consumer = s createConsumer(dest); } consumer setMessageListener(this); } public MemConsumer(ConnectionFactory fac, Destination dest) throws JMSException { this(fac, dest, null); } public void start() throws JMSException { connection start(); } public void stop() throws JMSException { connection stop(); } public void shutDown() throws JMSException { connection close(); } public Message receive() throws JMSException { return consumer receive(); } public Message receive(long wait) throws JMSException { return consumer receive(wait); } public void onMessage(Message msg) { super onMessage(msg); if (isParent) { try { long ctr = msg getLongProperty( counter ); if (counter != ctr) { inOrder = false; } counter++; } catch (Exception e) { e printStackTrace(); } } } public boolean isInOrder() { return inOrder; } public void setAsParent(boolean isParent) { this isParent = isParent; } public boolean isParent() { return this isParent; } }",1.0,
2020,2020,data,\smellybot\activemq\activemq-tooling\activemq-memtest-maven-plugin\src\main\java\org\apache\activemq\tool\MemoryMonitoringTool.,MemoryMonitoringTool,"public class MemoryMonitoringTool implements Runnable { protected Properties testSettings = new Properties(); protected ReportGenerator reportGenerator = new ReportGenerator(); private long checkpointInterval = 5000; private long resultIndex; private AtomicBoolean isRunning = new AtomicBoolean(false); private DataOutputStream dataDoutputStream; private MemoryMXBean memoryBean; public Properties getTestSettings() { return testSettings; } public void setTestSettings(Properties sysTestSettings) { this testSettings = sysTestSettings; } public DataOutputStream getDataOutputStream() { return dataDoutputStream; } public void setDataOutputStream(DataOutputStream dataDoutputStream) { this dataDoutputStream = dataDoutputStream; } public void stopMonitor() { isRunning set(false); } public long getCheckpointInterval() { return checkpointInterval; } public void setCheckpointInterval(long checkpointInterval) { this checkpointInterval = checkpointInterval; } public Thread startMonitor() { String intervalStr = this getTestSettings() getProperty( checkpoint interval ); checkpointInterval = new Integer(intervalStr) intValue(); this getTestSettings() remove( checkpoint interval ); memoryBean = ManagementFactory getMemoryMXBean(); reportGenerator setTestSettings(getTestSettings()); addTestInformation(); Thread t = new Thread(this); t setName( Memory monitoring tool ); isRunning set(true); t start(); return t; } public void addTestInformation() { reportGenerator setReportName(this getTestSettings() getProperty( report name )); reportGenerator setReportDirectory(this getTestSettings() getProperty( report directory )); reportGenerator startGenerateReport(); reportGenerator addTestInformation(); reportGenerator writeWithIndent(4, <jvm memory settings> ); reportGenerator writeWithIndent(6, <heap memory> ); reportGenerator writeWithIndent(8, <committed> + memoryBean getHeapMemoryUsage() getCommitted() + </committed> ); reportGenerator writeWithIndent(8, <max> + memoryBean getHeapMemoryUsage() getMax() + </max> ); reportGenerator writeWithIndent(6, </heap memory> ); reportGenerator writeWithIndent(6, <non heap memory> ); reportGenerator writeWithIndent(8, <committed> + memoryBean getNonHeapMemoryUsage() getCommitted() + </committed> ); reportGenerator writeWithIndent(8, <max> + memoryBean getNonHeapMemoryUsage() getMax() + </max> ); reportGenerator writeWithIndent(6, </non heap memory> ); reportGenerator writeWithIndent(4, </jvm memory settings> ); reportGenerator addClientSettings(); reportGenerator endTestInformation(); } public void run() { long nonHeapMB = 0; long heapMB = 0; long oneMB = 1024 * 1024; reportGenerator startTestResult(getCheckpointInterval()); while (isRunning get()) { try { Thread sleep(checkpointInterval); nonHeapMB = memoryBean getNonHeapMemoryUsage() getUsed() / oneMB; heapMB = memoryBean getHeapMemoryUsage() getUsed() / oneMB; reportGenerator writeWithIndent(6, <memory usage index= + resultIndex + non heap mb= + nonHeapMB + non heap bytes= + memoryBean getNonHeapMemoryUsage() getUsed() + heap mb= + heapMB + heap bytes= + memoryBean getHeapMemoryUsage() getUsed() + /> ); resultIndex++; } catch (Exception e) { e printStackTrace(); } } reportGenerator endTestResult(); reportGenerator stopGenerateReport(); } }",1.0,
2021,2021,data,\smellybot\activemq\activemq-tooling\activemq-memtest-maven-plugin\src\main\java\org\apache\activemq\tool\MemProducer.,MemProducer,"public class MemProducer { protected Connection connection; protected MessageProducer producer; public MemProducer(ConnectionFactory fac, Destination dest) throws JMSException { connection = fac createConnection(); Session s = connection createSession(false, Session AUTO ACKNOWLEDGE); producer = s createProducer(dest); } public void setDeliveryMode(int mode) throws JMSException { producer setDeliveryMode(mode); } public void start() throws JMSException { connection start(); } public void stop() throws JMSException { connection stop(); } public void shutDown() throws JMSException { connection close(); } public void sendMessage(Message msg) throws JMSException { sendMessage(msg, null, 0); } public void sendMessage(Message msg, String headerName, long headerValue) throws JMSException { if (headerName != null) { msg setLongProperty(headerName, headerValue); } producer send(msg); } }",1.0,
2022,2022,data,\smellybot\activemq\activemq-tooling\activemq-memtest-maven-plugin\src\main\java\org\apache\activemq\tool\ReportGenerator.,ReportGenerator,"public class ReportGenerator { private static final Logger LOG = LoggerFactory getLogger(ReportGenerator class); private String reportDirectory; private String reportName; private PrintWriter writer; private File reportFile; private Properties testSettings; public ReportGenerator() { } public ReportGenerator(String reportDirectory, String reportName) { this setReportDirectory(reportDirectory); this setReportName(reportName); } public void startGenerateReport() { File reportDir = new File(getReportDirectory()); if (!reportDir exists()) { reportDir mkdirs(); } if (reportDir != null) { reportFile = new File(this getReportDirectory() + File separator + this getReportName() + xml ); } try { this writer = new PrintWriter(new FileOutputStream(reportFile)); } catch (IOException e1) { e1 printStackTrace(); } } public void stopGenerateReport() { writeWithIndent(0, </test-report> ); this getWriter() flush(); this getWriter() close(); LOG info( TEST REPORT OUTPUT + reportFile getAbsolutePath()); } protected void addTestInformation() { writeWithIndent(0, <test-report> ); writeWithIndent(2, <test-information> ); writeWithIndent(4, <os-name> + System getProperty( os name ) + </os-name> ); writeWithIndent(4, <java-version> + System getProperty( java version ) + </java-version> ); } protected void addClientSettings() { if (this getTestSettings() != null) { Enumeration keys = getTestSettings() propertyNames(); writeWithIndent(4, <test-settings> ); String key; while (keys hasMoreElements()) { key = (String)keys nextElement(); writeWithIndent(6, < + key + > + getTestSettings() get(key) + </ + key + > ); } writeWithIndent(4, </test-settings> ); } } protected void endTestInformation() { writeWithIndent(2, </test-information> ); } protected void startTestResult(long checkpointInterval) { long intervalInSec = checkpointInterval / 1000; writeWithIndent(2, <test-result checkpoint interval in sec= + intervalInSec + > ); } protected void endTestResult() { writeWithIndent(2, </test-result> ); } protected void writeWithIndent(int indent, String result) { StringBuffer buffer = new StringBuffer(); for (int i = 0; i < indent; ++i) { buffer append( ); } buffer append(result); writer println(buffer toString()); } public PrintWriter getWriter() { return this writer; } public String getReportDirectory() { return reportDirectory; } public void setReportDirectory(String reportDirectory) { this reportDirectory = reportDirectory; } public String getReportName() { return reportName; } public void setReportName(String reportName) { this reportName = reportName; } public Properties getTestSettings() { return testSettings; } public void setTestSettings(Properties testSettings) { this testSettings = testSettings; } }",1.0,
2023,2023,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\maven\ConsumerMojo.,ConsumerMojo,"public class ConsumerMojo extends AbstractMojo { private String[] validPrefix = { sysTest , factory , consumer , tpSampler , cpuSampler }; public void execute() throws MojoExecutionException { JmsConsumerSystem main(createArgument()); } protected String[] createArgument() { List args = new ArrayList(); Properties sysProps = System getProperties(); Set keys = new HashSet(sysProps keySet()); for (Iterator i = keys iterator(); i hasNext();) { String key = (String)i next(); if (isRecognizedProperty(key)) { args add(key + = + sysProps remove(key)); } } return (String[])args toArray(new String[0]); } protected boolean isRecognizedProperty(String key) { for (int j = 0; j < validPrefix length; j++) { if (key startsWith(validPrefix[j])) { return true; } } return false; } }",1.0,
2024,2024,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\maven\ProducerMojo.,ProducerMojo,"public class ProducerMojo extends AbstractMojo { private String[] validPrefix = { sysTest , factory , producer , tpSampler , cpuSampler }; public void execute() throws MojoExecutionException { JmsProducerSystem main(createArgument()); } protected String[] createArgument() { List args = new ArrayList(); Properties sysProps = System getProperties(); Set keys = new HashSet(sysProps keySet()); for (Iterator i = keys iterator(); i hasNext();) { String key = (String)i next(); if (isRecognizedProperty(key)) { args add(key + = + sysProps remove(key)); } } return (String[])args toArray(new String[0]); } protected boolean isRecognizedProperty(String key) { for (int j = 0; j < validPrefix length; j++) { if (key startsWith(validPrefix[j])) { return true; } } return false; } }",1.0,
2026,2026,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\AbstractJmsClient.,AbstractJmsClient,"public abstract class AbstractJmsClient { private static final Logger LOG = LoggerFactory getLogger(AbstractJmsClient class); protected ConnectionFactory factory; protected Connection jmsConnection; protected Session jmsSession; protected int destCount = 1; protected int destIndex; protected String clientName = ; private int internalTxCounter = 0; public AbstractJmsClient(ConnectionFactory factory) { this factory = factory; } public abstract JmsClientProperties getClient(); public abstract void setClient(JmsClientProperties client); public ConnectionFactory getFactory() { return factory; } public void setFactory(ConnectionFactory factory) { this factory = factory; } public int getDestCount() { return destCount; } public void setDestCount(int destCount) { this destCount = destCount; } public int getDestIndex() { return destIndex; } public void setDestIndex(int destIndex) { this destIndex = destIndex; } public String getClientName() { return clientName; } public void setClientName(String clientName) { this clientName = clientName; } public Connection getConnection() throws JMSException { if (jmsConnection == null) { jmsConnection = factory createConnection(); jmsConnection setClientID(getClientName()); LOG info( Creating JMS Connection Provider= + getClient() getJmsProvider() + , JMS Spec= + getClient() getJmsVersion()); } return jmsConnection; } public Session getSession() throws JMSException { if (jmsSession == null) { int ackMode; if (getClient() getSessAckMode() equalsIgnoreCase(JmsClientProperties SESSION AUTO ACKNOWLEDGE)) { ackMode = Session AUTO ACKNOWLEDGE; } else if (getClient() getSessAckMode() equalsIgnoreCase(JmsClientProperties SESSION CLIENT ACKNOWLEDGE)) { ackMode = Session CLIENT ACKNOWLEDGE; } else if (getClient() getSessAckMode() equalsIgnoreCase(JmsClientProperties SESSION DUPS OK ACKNOWLEDGE)) { ackMode = Session DUPS OK ACKNOWLEDGE; } else if (getClient() getSessAckMode() equalsIgnoreCase(JmsClientProperties SESSION TRANSACTED)) { ackMode = Session SESSION TRANSACTED; } else { ackMode = Session AUTO ACKNOWLEDGE; } jmsSession = getConnection() createSession(getClient() isSessTransacted(), ackMode); } return jmsSession; } public Destination[] createDestination(int destIndex, int destCount) throws JMSException { if (getClient() isDestComposite()) { return new Destination[] { createCompositeDestination(getClient() getDestName(), destIndex, destCount) }; } else { Destination[] dest = new Destination[destCount]; for (int i = 0; i < destCount; i++) { dest[i] = createDestination(getClient() getDestName() + + (destIndex + i)); } return dest; } } public Destination createCompositeDestination(int destIndex, int destCount) throws JMSException { return createCompositeDestination(getClient() getDestName(), destIndex, destCount); } protected Destination createCompositeDestination(String name, int destIndex, int destCount) throws JMSException { String compDestName; String simpleName; if (name startsWith( queue simpleName = name substring( queue } else if (name startsWith( topic simpleName = name substring( topic } else { simpleName = name; } int i; compDestName = name + + destIndex + , ; for (i = 1; i < destCount - 1; i++) { compDestName += simpleName + + (destIndex + i) + , ; } compDestName += simpleName + + (destIndex + i); return createDestination(compDestName); } protected Destination createDestination(String name) throws JMSException { if (name startsWith( queue return getSession() createQueue(name substring( queue } else if (name startsWith( topic return getSession() createTopic(name substring( topic } else { return getSession() createTopic(name); } } public boolean commitTxIfNecessary() throws JMSException { internalTxCounter++; if (getClient() isSessTransacted()) { if ((internalTxCounter % getClient() getCommitAfterXMsgs()) == 0) { LOG debug( Committing transaction ); internalTxCounter = 0; getSession() commit(); return true; } } return false; } }",1.0,
2027,2027,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\AbstractJmsClientSystem.,AbstractJmsClientSystem,"public abstract class AbstractJmsClientSystem extends AbstractObjectProperties { private static final Logger LOG = LoggerFactory getLogger(AbstractJmsClientSystem class); protected ThreadGroup clientThreadGroup; protected ConnectionFactory jmsConnFactory; protected JmsFactoryProperties factory = new JmsFactoryProperties(); protected ThroughputSamplerTask tpSampler = new ThroughputSamplerTask(); protected CpuSamplerTask cpuSampler = new CpuSamplerTask(); private int clientDestIndex; private int clientDestCount; public void runSystemTest() throws JMSException { jmsConnFactory = loadJmsFactory(getSysTest() getSpiClass(), factory getFactorySettings()); setProviderMetaData(jmsConnFactory createConnection() getMetaData(), getJmsClientProperties()); PerformanceReportWriter writer = createPerfWriter(); tpSampler setPerfReportWriter(writer); cpuSampler setPerfReportWriter(writer); writer openReportWriter(); writer writeProperties( jvmSettings , System getProperties()); writer writeProperties( testSystemSettings , ReflectionUtil retrieveObjectProperties(getSysTest())); writer writeProperties( jmsFactorySettings , ReflectionUtil retrieveObjectProperties(jmsConnFactory)); writer writeProperties( jmsClientSettings , ReflectionUtil retrieveObjectProperties(getJmsClientProperties())); writer writeProperties( tpSamplerSettings , ReflectionUtil retrieveObjectProperties(tpSampler)); writer writeProperties( cpuSamplerSettings , ReflectionUtil retrieveObjectProperties(cpuSampler)); clientThreadGroup = new ThreadGroup(getSysTest() getClientPrefix() + Thread Group ); for (int i = 0; i < getSysTest() getNumClients(); i++) { distributeDestinations(getSysTest() getDestDistro(), i, getSysTest() getNumClients(), getSysTest() getTotalDests()); final String clientName = getSysTest() getClientPrefix() + i; final int clientDestIndex = this clientDestIndex; final int clientDestCount = this clientDestCount; Thread t = new Thread(clientThreadGroup, new Runnable() { public void run() { runJmsClient(clientName, clientDestIndex, clientDestCount); } }); t setName(getSysTest() getClientPrefix() + i + Thread ); t start(); } if (getSysTest() getSamplers() indexOf(JmsClientSystemProperties SAMPLER TP) > -1) { tpSampler startSampler(); } if (getSysTest() getSamplers() indexOf(JmsClientSystemProperties SAMPLER CPU) > -1) { try { cpuSampler createPlugin(); cpuSampler startSampler(); } catch (IOException e) { LOG warn( Unable to start CPU sampler plugin Reason + e getMessage()); } } tpSampler waitUntilDone(); cpuSampler waitUntilDone(); writer closeReportWriter(); } public ThroughputSamplerTask getTpSampler() { return tpSampler; } public void setTpSampler(ThroughputSamplerTask tpSampler) { this tpSampler = tpSampler; } public CpuSamplerTask getCpuSampler() { return cpuSampler; } public void setCpuSampler(CpuSamplerTask cpuSampler) { this cpuSampler = cpuSampler; } public JmsFactoryProperties getFactory() { return factory; } public void setFactory(JmsFactoryProperties factory) { this factory = factory; } public abstract JmsClientSystemProperties getSysTest(); public abstract void setSysTest(JmsClientSystemProperties sysTestProps); public abstract JmsClientProperties getJmsClientProperties(); protected PerformanceReportWriter createPerfWriter() { if (getSysTest() getReportType() equalsIgnoreCase(JmsClientSystemProperties REPORT XML FILE)) { String reportName; if ((reportName = getSysTest() getReportName()) == null) { reportName = getSysTest() getClientPrefix() + + numClients + getSysTest() getNumClients() + + numDests + getSysTest() getTotalDests() + + getSysTest() getDestDistro(); } return new XmlFilePerfReportWriter(getSysTest() getReportDir(), reportName); } else if (getSysTest() getReportType() equalsIgnoreCase(JmsClientSystemProperties REPORT VERBOSE)) { return new VerbosePerfReportWriter(); } else { return new VerbosePerfReportWriter(); } } protected void distributeDestinations(String distroType, int clientIndex, int numClients, int numDests) { if (distroType equalsIgnoreCase(JmsClientSystemProperties DEST DISTRO ALL)) { clientDestCount = numDests; clientDestIndex = 0; } else if (distroType equalsIgnoreCase(JmsClientSystemProperties DEST DISTRO EQUAL)) { int destPerClient = numDests / numClients; if (destPerClient > 0) { clientDestCount = destPerClient; clientDestIndex = destPerClient * clientIndex; } else { clientDestCount = 1; clientDestIndex = clientIndex % numDests; } } else if (distroType equalsIgnoreCase(JmsClientSystemProperties DEST DISTRO DIVIDE)) { int destPerClient = numDests / numClients; if (destPerClient > 0) { int remain = numDests % numClients; int nextIndex; if (clientIndex < remain) { destPerClient++; nextIndex = clientIndex * destPerClient; } else { nextIndex = (clientIndex * destPerClient) + remain; } clientDestCount = destPerClient; clientDestIndex = nextIndex; } else { clientDestCount = 1; clientDestIndex = clientIndex % numDests; } } else { LOG warn( Unknown destination distribution type + distroType); clientDestCount = numDests; clientDestIndex = 0; } } protected ConnectionFactory loadJmsFactory(String spiClass, Properties factorySettings) throws JMSException { try { Class spi = Class forName(spiClass); SPIConnectionFactory spiFactory = (SPIConnectionFactory)spi newInstance(); ConnectionFactory jmsFactory = spiFactory createConnectionFactory(factorySettings); LOG info( Created + jmsFactory getClass() getName() + using SPIConnectionFactory + spiFactory getClass() getName()); return jmsFactory; } catch (Exception e) { e printStackTrace(); throw new JMSException(e getMessage()); } } protected void setProviderMetaData(ConnectionMetaData metaData, JmsClientProperties props) throws JMSException { props setJmsProvider(metaData getJMSProviderName() + - + metaData getProviderVersion()); props setJmsVersion(metaData getJMSVersion()); String jmsProperties = ; Enumeration jmsProps = metaData getJMSXPropertyNames(); while (jmsProps hasMoreElements()) { jmsProperties += jmsProps nextElement() toString() + , ; } if (jmsProperties length() > 0) { jmsProperties = jmsProperties substring(0, jmsProperties length() - 1); } props setJmsProperties(jmsProperties); } protected abstract void runJmsClient(String clientName, int clientDestIndex, int clientDestCount); protected static Properties parseStringArgs(String[] args) { File configFile = null; Properties props = new Properties(); if (args == null || args length == 0) { return props; } for (int i = 0; i < args length; i++) { String arg = args[i]; if (arg startsWith( -D ) || arg startsWith( -d )) { arg = arg substring(2); } int index = arg indexOf( = ); String key = arg substring(0, index); String val = arg substring(index + 1); if (key equalsIgnoreCase( sysTest propsConfigFile )) { if (!val endsWith( properties )) { val += properties ; } configFile = new File(val); } props setProperty(key, val); } Properties fileProps = new Properties(); try { if (configFile != null) { LOG info( Loading properties file + configFile getAbsolutePath()); fileProps load(new FileInputStream(configFile)); } } catch (IOException e) { e printStackTrace(); } fileProps putAll(props); return fileProps; } }",1.0,
2028,2028,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\AbstractJmsMeasurableClient.,AbstractJmsMeasurableClient,public abstract class AbstractJmsMeasurableClient extends AbstractJmsClient implements MeasurableClient { protected AtomicLong throughput = new AtomicLong(0); public AbstractJmsMeasurableClient(ConnectionFactory factory) { super(factory); } public void reset() { setThroughput(0); } public long getThroughput() { return throughput get(); } public void setThroughput(long val) { throughput set(val); } public void incThroughput() { throughput incrementAndGet(); } public void incThroughput(long val) { throughput addAndGet(val); } },1.0,
2029,2029,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\JmsConsumerClient.,JmsConsumerClient,"public class JmsConsumerClient extends AbstractJmsMeasurableClient { private static final Logger LOG = LoggerFactory getLogger(JmsConsumerClient class); protected MessageConsumer jmsConsumer; protected JmsConsumerProperties client; public JmsConsumerClient(ConnectionFactory factory) { this(new JmsConsumerProperties(), factory); } public JmsConsumerClient(JmsConsumerProperties clientProps, ConnectionFactory factory) { super(factory); client = clientProps; } public void receiveMessages() throws JMSException { if (client isAsyncRecv()) { if (client getRecvType() equalsIgnoreCase(JmsConsumerProperties TIME BASED RECEIVING)) { receiveAsyncTimeBasedMessages(client getRecvDuration()); } else { receiveAsyncCountBasedMessages(client getRecvCount()); } } else { if (client getRecvType() equalsIgnoreCase(JmsConsumerProperties TIME BASED RECEIVING)) { receiveSyncTimeBasedMessages(client getRecvDuration()); } else { receiveSyncCountBasedMessages(client getRecvCount()); } } } public void receiveMessages(int destCount) throws JMSException { this destCount = destCount; receiveMessages(); } public void receiveMessages(int destIndex, int destCount) throws JMSException { this destIndex = destIndex; receiveMessages(destCount); } public void receiveSyncTimeBasedMessages(long duration) throws JMSException { if (getJmsConsumer() == null) { createJmsConsumer(); } try { getConnection() start(); LOG info( Starting to synchronously receive messages for + duration + ms ); long endTime = System currentTimeMillis() + duration; int counter = 0; while (System currentTimeMillis() < endTime) { getJmsConsumer() receive(); incThroughput(); counter++; sleep(); commitTxIfNecessary(); } } finally { if (client isDurable() && client isUnsubscribe()) { LOG info( Unsubscribing durable subscriber + getClientName()); getJmsConsumer() close(); getSession() unsubscribe(getClientName()); } getConnection() close(); } } public void receiveSyncCountBasedMessages(long count) throws JMSException { if (getJmsConsumer() == null) { createJmsConsumer(); } try { getConnection() start(); LOG info( Starting to synchronously receive + count + messages ); int recvCount = 0; while (recvCount < count) { getJmsConsumer() receive(); incThroughput(); recvCount++; sleep(); commitTxIfNecessary(); } } finally { if (client isDurable() && client isUnsubscribe()) { LOG info( Unsubscribing durable subscriber + getClientName()); getJmsConsumer() close(); getSession() unsubscribe(getClientName()); } getConnection() close(); } } public void receiveAsyncTimeBasedMessages(long duration) throws JMSException { if (getJmsConsumer() == null) { createJmsConsumer(); } getJmsConsumer() setMessageListener(new MessageListener() { public void onMessage(Message msg) { incThroughput(); sleep(); try { commitTxIfNecessary(); } catch (JMSException ex) { LOG error( Error committing transaction + ex getMessage()); } } }); try { getConnection() start(); LOG info( Starting to asynchronously receive messages for + duration + ms ); try { Thread sleep(duration); } catch (InterruptedException e) { throw new JMSException( JMS consumer thread sleep has been interrupted Message + e getMessage()); } } finally { if (client isDurable() && client isUnsubscribe()) { LOG info( Unsubscribing durable subscriber + getClientName()); getJmsConsumer() close(); getSession() unsubscribe(getClientName()); } getConnection() close(); } } public void receiveAsyncCountBasedMessages(long count) throws JMSException { if (getJmsConsumer() == null) { createJmsConsumer(); } final AtomicInteger recvCount = new AtomicInteger(0); getJmsConsumer() setMessageListener(new MessageListener() { public void onMessage(Message msg) { incThroughput(); recvCount incrementAndGet(); synchronized (recvCount) { recvCount notify(); } try { commitTxIfNecessary(); } catch (JMSException ex) { LOG error( Error committing transaction + ex getMessage()); } } }); try { getConnection() start(); LOG info( Starting to asynchronously receive + client getRecvCount() + messages ); try { while (recvCount get() < count) { synchronized (recvCount) { recvCount wait(); } } } catch (InterruptedException e) { throw new JMSException( JMS consumer thread wait has been interrupted Message + e getMessage()); } } finally { if (client isDurable() && client isUnsubscribe()) { LOG info( Unsubscribing durable subscriber + getClientName()); getJmsConsumer() close(); getSession() unsubscribe(getClientName()); } getConnection() close(); } } public MessageConsumer createJmsConsumer() throws JMSException { Destination[] dest = createDestination(destIndex, destCount); if (this client getMessageSelector() == null) return createJmsConsumer(dest[0]); else return createJmsConsumer(dest[0], this client getMessageSelector(), false); } public MessageConsumer createJmsConsumer(Destination dest) throws JMSException { if (client isDurable()) { String clientName = getClientName(); if (clientName == null) { clientName = JmsConsumer ; setClientName(clientName); } LOG info( Creating durable subscriber ( + clientName + ) to + dest toString()); jmsConsumer = getSession() createDurableSubscriber((Topic) dest, clientName); } else { LOG info( Creating non-durable consumer to + dest toString()); jmsConsumer = getSession() createConsumer(dest); } return jmsConsumer; } public MessageConsumer createJmsConsumer(Destination dest, String selector, boolean noLocal) throws JMSException { if (client isDurable()) { String clientName = getClientName(); if (clientName == null) { clientName = JmsConsumer ; setClientName(clientName); } LOG info( Creating durable subscriber ( + clientName + ) to + dest toString()); jmsConsumer = getSession() createDurableSubscriber((Topic) dest, clientName, selector, noLocal); } else { LOG info( Creating non-durable consumer to + dest toString()); jmsConsumer = getSession() createConsumer(dest, selector, noLocal); } return jmsConsumer; } public MessageConsumer getJmsConsumer() { return jmsConsumer; } public JmsClientProperties getClient() { return client; } public void setClient(JmsClientProperties clientProps) { client = (JmsConsumerProperties)clientProps; } protected void sleep() { if (client getRecvDelay() > 0) { try { LOG trace( Sleeping for + client getRecvDelay() + milliseconds ); Thread sleep(client getRecvDelay()); } catch (java lang InterruptedException ex) { LOG warn(ex getMessage()); } } } }",1.0,
2030,2030,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\JmsConsumerSystem.,JmsConsumerSystem,"public class JmsConsumerSystem extends AbstractJmsClientSystem { protected JmsConsumerSystemProperties sysTest = new JmsConsumerSystemProperties(); protected JmsConsumerProperties consumer = new JmsConsumerProperties(); public JmsClientSystemProperties getSysTest() { return sysTest; } public void setSysTest(JmsClientSystemProperties sysTestProps) { sysTest = (JmsConsumerSystemProperties)sysTestProps; } public JmsClientProperties getJmsClientProperties() { return getConsumer(); } public JmsConsumerProperties getConsumer() { return consumer; } public void setConsumer(JmsConsumerProperties consumer) { this consumer = consumer; } protected void runJmsClient(String clientName, int clientDestIndex, int clientDestCount) { ThroughputSamplerTask sampler = getTpSampler(); JmsConsumerClient consumerClient = new JmsConsumerClient(consumer, jmsConnFactory); consumerClient setClientName(clientName); if (sampler != null) { sampler registerClient(consumerClient); } try { consumerClient receiveMessages(clientDestIndex, clientDestCount); } catch (JMSException e) { e printStackTrace(); } } public static void main(String[] args) { JmsConsumerSystem sys = new JmsConsumerSystem(); sys configureProperties(AbstractJmsClientSystem parseStringArgs(args)); try { sys runSystemTest(); } catch (JMSException e) { e printStackTrace(); } } }",1.0,
2033,2033,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\properties\AbstractObjectProperties.,AbstractObjectProperties,"public abstract class AbstractObjectProperties implements ReflectionConfigurable { public void configureProperties(Properties props) { ReflectionUtil configureClass(this, props); } public Properties retrieveProperties(Properties props) { return null; } public boolean acceptConfig(String key, String val) { return true; } }",1.0,
2037,2037,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\properties\JmsConsumerSystemProperties.,JmsConsumerSystemProperties,public class JmsConsumerSystemProperties extends JmsClientSystemProperties { public JmsConsumerSystemProperties() { clientPrefix = JmsConsumer ; } },1.0,
2039,2039,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\properties\JmsProducerProperties.,JmsProducerProperties,"public class JmsProducerProperties extends JmsClientProperties { private static final Logger LOG = LoggerFactory getLogger(ReflectionUtil class); public static final String TIME BASED SENDING = time ; public static final String COUNT BASED SENDING = count ; public static final String DELIVERY MODE PERSISTENT = persistent ; public static final String DELIVERY MODE NON PERSISTENT = nonpersistent ; protected String deliveryMode = DELIVERY MODE NON PERSISTENT; protected int messageSize = 1024; protected long sendCount = 1000000; protected long sendDuration = 5 * 60 * 1000; protected String sendType = TIME BASED SENDING; protected long sendDelay = 0; protected String msgFileName = null; protected Map<String,Object> headerMap = null; protected boolean createNewMsg; public JmsProducerProperties() { this headerMap = new HashMap(); } public String getDeliveryMode() { return deliveryMode; } public void setDeliveryMode(String deliveryMode) { this deliveryMode = deliveryMode; } public int getMessageSize() { return messageSize; } public void setMessageSize(int messageSize) { this messageSize = messageSize; } public long getSendCount() { return sendCount; } public void setSendCount(long sendCount) { this sendCount = sendCount; } public long getSendDuration() { return sendDuration; } public void setSendDuration(long sendDuration) { this sendDuration = sendDuration; } public String getSendType() { return sendType; } public void setSendType(String sendType) { this sendType = sendType; } public boolean isCreateNewMsg() { return createNewMsg; } public void setCreateNewMsg(boolean createNewMsg) { this createNewMsg = createNewMsg; } public void setSendDelay(long delay) { this sendDelay = delay; } public long getSendDelay() { return this sendDelay; } public void setHeader(String encodedHeader) { if (encodedHeader endsWith( )) { encodedHeader = encodedHeader substring(0, encodedHeader length()-1); } String headers[] = encodedHeader split( ); for (String h headers) { String tokens[] = h split( = ); if (tokens length != 2 || tokens[0] equals( ) || tokens[1] equals( ) ) { LOG error( Error parsing message headers Header + h + This header will be ignored ); } else { this headerMap put(tokens[0], tokens[1]); } } } public Set<String> getHeaderKeys() { return this headerMap keySet(); } public Object getHeaderValue(String key) { return this headerMap get(key); } public void clearHeaders() { this headerMap clear(); } public void setMsgFileName(String file) { LOG info( producer msgFileName specified + Will ignore setting producer messageSize ); this msgFileName = file; } public String getMsgFileName() { return this msgFileName; } }",1.0,
2040,2040,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\properties\JmsProducerSystemProperties.,JmsProducerSystemProperties,public class JmsProducerSystemProperties extends JmsClientSystemProperties { public JmsProducerSystemProperties() { clientPrefix = JmsProducer ; } },1.0,
2041,2041,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\properties\ReflectionUtil.,ReflectionUtil,"public final class ReflectionUtil { private static final Logger LOG = LoggerFactory getLogger(ReflectionUtil class); private ReflectionUtil() { } public static void configureClass(Object obj, String key, String val) { try { String debugInfo; Object target = obj; Class targetClass = obj getClass(); debugInfo = Invoking + targetClass getName(); StringTokenizer tokenizer = new StringTokenizer(key, ); String keySubString = key; int tokenCount = tokenizer countTokens(); for (int j = 0; j < tokenCount - 1; j++) { String name = tokenizer nextToken(); if (target instanceof ReflectionConfigurable && !((ReflectionConfigurable)target) acceptConfig(keySubString, val)) { return; } else { keySubString = keySubString substring(name length() + 1); } String getMethod = get + name substring(0, 1) toUpperCase() + name substring(1); Method method = targetClass getMethod(getMethod, new Class[] {}); target = method invoke(target, null); targetClass = target getClass(); debugInfo += + getMethod + () ; } String property = tokenizer nextToken(); if (target instanceof ReflectionConfigurable && !((ReflectionConfigurable)target) acceptConfig(property, val)) { return; } Method setterMethod = findSetterMethod(targetClass, property); if (setterMethod == null) { throw new IllegalAccessException( Unable to find appropriate setter method signature for property + property); } Class paramType = setterMethod getParameterTypes()[0]; debugInfo += + setterMethod + ( + paramType getName() + + val + ) ; if (paramType isPrimitive()) { if (paramType == Boolean TYPE) { setterMethod invoke(target, new Object[] { Boolean valueOf(val) }); } else if (paramType == Integer TYPE) { setterMethod invoke(target, new Object[] { Integer valueOf(val) }); } else if (paramType == Long TYPE) { setterMethod invoke(target, new Object[] { Long valueOf(val) }); } else if (paramType == Double TYPE) { setterMethod invoke(target, new Object[] { Double valueOf(val) }); } else if (paramType == Float TYPE) { setterMethod invoke(target, new Object[] { Float valueOf(val) }); } else if (paramType == Short TYPE) { setterMethod invoke(target, new Object[] { Short valueOf(val) }); } else if (paramType == Byte TYPE) { setterMethod invoke(target, new Object[] { Byte valueOf(val) }); } else if (paramType == Character TYPE) { setterMethod invoke(target, new Object[] { new Character(val charAt(0)) }); } } else { if (paramType == String class) { setterMethod invoke(target, new Object[] { val }); } else { Constructor c = paramType getConstructor(new Class[] { String class }); Object paramObject = c newInstance(new Object[] { val }); setterMethod invoke(target, new Object[] { paramObject }); } } LOG debug(debugInfo); } catch (Exception e) { LOG warn(e toString()); } } public static void configureClass(Object obj, Properties props) { for (Iterator i = props keySet() iterator(); i hasNext();) { try { String key = (String)i next(); String val = props getProperty(key); configureClass(obj, key, val); } catch (Throwable t) { t printStackTrace(); } } } public static Properties retrieveObjectProperties(Object obj) { Properties props = new Properties(); try { props putAll(retrieveClassProperties( , obj getClass(), obj)); } catch (Exception e) { LOG warn(e toString()); } return props; } protected static Properties retrieveClassProperties(String prefix, Class targetClass, Object targetObject) { if (targetClass == null || targetObject == null) { return new Properties(); } else { Properties props = new Properties(); Method[] getterMethods = findAllGetterMethods(targetClass); for (int i = 0; i < getterMethods length; i++) { try { String propertyName = getPropertyName(getterMethods[i] getName()); Class retType = getterMethods[i] getReturnType(); if (retType isPrimitive() || retType == String class) { if (findSetterMethod(targetClass, propertyName) != null) { Object val = null; try { val = getterMethods[i] invoke(targetObject, null); } catch (InvocationTargetException e) { e printStackTrace(); } catch (IllegalAccessException e) { e printStackTrace(); } props setProperty(prefix + propertyName, val + ); } } else { try { Object val = getterMethods[i] invoke(targetObject, null); if (val != null && val != targetObject) { props putAll(retrieveClassProperties(propertyName + , val getClass(), val)); } } catch (InvocationTargetException e) { e printStackTrace(); } catch (IllegalAccessException e) { e printStackTrace(); } } } catch (Throwable t) { t printStackTrace(); } } return props; } } private static Method findSetterMethod(Class targetClass, String propertyName) { String methodName = set + propertyName substring(0, 1) toUpperCase() + propertyName substring(1); Method[] methods = targetClass getMethods(); for (int i = 0; i < methods length; i++) { if (methods[i] getName() equals(methodName) && isSetterMethod(methods[i])) { return methods[i]; } } return null; } private static Method findGetterMethod(Class targetClass, String propertyName) { String methodName1 = get + propertyName substring(0, 1) toUpperCase() + propertyName substring(1); String methodName2 = is + propertyName substring(0, 1) toUpperCase() + propertyName substring(1); Method[] methods = targetClass getMethods(); for (int i = 0; i < methods length; i++) { if ((methods[i] getName() equals(methodName1) || methods[i] getName() equals(methodName2)) && isGetterMethod(methods[i])) { return methods[i]; } } return null; } private static Method[] findAllGetterMethods(Class targetClass) { List getterMethods = new ArrayList(); Method[] methods = targetClass getMethods(); for (int i = 0; i < methods length; i++) { if (isGetterMethod(methods[i])) { getterMethods add(methods[i]); } } return (Method[])getterMethods toArray(new Method[] {}); } private static boolean isGetterMethod(Method method) { return ((method getName() startsWith( is ) && method getReturnType() == Boolean TYPE) || (method getName() startsWith( get ) && method getReturnType() != Void TYPE)) && (method getParameterTypes() length == 0) && method getDeclaringClass() != Object class; } private static boolean isSetterMethod(Method method) { if (method getName() startsWith( set ) && method getReturnType() == Void TYPE) { Class[] paramType = method getParameterTypes(); if (paramType length == 1) { if (paramType[0] isPrimitive() || paramType[0] == String class) { return true; } else { try { if (paramType[0] getConstructor(new Class[] { String class }) != null) { return true; } } catch (NoSuchMethodException e) { } } } } return false; } private static String getPropertyName(String methodName) { String name; if (methodName startsWith( get )) { name = methodName substring(3); } else if (methodName startsWith( set )) { name = methodName substring(3); } else if (methodName startsWith( is )) { name = methodName substring(2); } else { name = ; } return name substring(0, 1) toLowerCase() + name substring(1); } }",1.0,
2042,2042,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\reports\AbstractPerfReportWriter.,AbstractPerfReportWriter,"public abstract class AbstractPerfReportWriter implements PerformanceReportWriter { public static final int REPORT PLUGIN THROUGHPUT = 0; public static final int REPORT PLUGIN CPU = 1; protected ReportPlugin[] plugins = new ReportPlugin[] { new ThroughputReportPlugin(), new CpuReportPlugin() }; protected void handleCsvData(int pluginType, String csvData) { plugins[pluginType] handleCsvData(csvData); } protected Map getSummary(int pluginType) { return plugins[pluginType] getSummary(); } }",1.0,
2043,2043,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\reports\PerformanceStatisticsUtil.,PerformanceStatisticsUtil,"public final class PerformanceStatisticsUtil { private PerformanceStatisticsUtil() { } public static long getSum(List numList) { long sum = 0; if (numList != null) { for (Iterator i = numList iterator(); i hasNext();) { sum += ((Long)i next()) longValue(); } } else { sum = -1; } return sum; } public static long getMin(List numList) { long min = Long MAX VALUE; if (numList != null) { for (Iterator i = numList iterator(); i hasNext();) { min = Math min(((Long)i next()) longValue(), min); } } else { min = -1; } return min; } public static long getMax(List numList) { long max = Long MIN VALUE; if (numList != null) { for (Iterator i = numList iterator(); i hasNext();) { max = Math max(((Long)i next()) longValue(), max); } } else { max = -1; } return max; } public static double getAve(List numList) { double ave; if (numList != null) { int sampleCount = 0; long totalTP = 0; for (Iterator i = numList iterator(); i hasNext();) { sampleCount++; totalTP += ((Long)i next()) longValue(); } return (double)totalTP / (double)sampleCount; } else { ave = -1; } return ave; } public static double getAveEx(List numList) { double ave; long minTP = getMin(numList); long maxTP = getMax(numList); if (numList != null) { int sampleCount = 0; long totalTP = 0; long sampleTP; for (Iterator i = numList iterator(); i hasNext();) { sampleCount++; sampleTP = ((Long)i next()) longValue(); if (sampleTP != minTP && sampleTP != maxTP) { totalTP += sampleTP; } } return (double)totalTP / (double)sampleCount; } else { ave = -1; } return ave; } }",1.0,
2044,2044,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\reports\VerbosePerfReportWriter.,VerbosePerfReportWriter,"public class VerbosePerfReportWriter extends AbstractPerfReportWriter { public void openReportWriter() { } public void closeReportWriter() { writeHeader( Performance Summary ); writePerfSummary(); } public void writeInfo(String info) { System out println( [PERF-INFO] + info); } public void writeCsvData(int csvType, String csvData) { if (csvType == REPORT PLUGIN THROUGHPUT) { System out println( [PERF-TP] + csvData); } else if (csvType == REPORT PLUGIN CPU) { System out println( [PERF-CPU] + csvData); } handleCsvData(csvType, csvData); } public void writeProperties(String header, Properties props) { writeHeader(header); writeProperties(props); } public void writeProperties(Properties props) { for (Iterator i = props keySet() iterator(); i hasNext();) { String key = (String)i next(); String val = props getProperty(key, ); System out println( [PERF-PROP] + key + = + val); } } public void writePerfSummary() { Map summary; summary = getSummary(REPORT PLUGIN THROUGHPUT); if (summary != null && summary size() > 0) { writeThroughputSummary(summary); } summary = getSummary(REPORT PLUGIN CPU); if (summary != null && summary size() > 0) { writeCpuSummary(summary); } } protected void writeThroughputSummary(Map summary) { writeHeader( SYSTEM THROUGHPUT SUMMARY ); System out println( [PERF-TP-SUMMARY] System Total Throughput + summary get(ThroughputReportPlugin KEY SYS TOTAL TP)); System out println( [PERF-TP-SUMMARY] System Total Clients + summary get(ThroughputReportPlugin KEY SYS TOTAL CLIENTS)); System out println( [PERF-TP-SUMMARY] System Average Throughput + summary get(ThroughputReportPlugin KEY SYS AVE TP)); System out println( [PERF-TP-SUMMARY] System Average Throughput Excluding Min/Max + summary get(ThroughputReportPlugin KEY SYS AVE EMM TP)); System out println( [PERF-TP-SUMMARY] System Average Client Throughput + summary get(ThroughputReportPlugin KEY SYS AVE CLIENT TP)); System out println( [PERF-TP-SUMMARY] System Average Client Throughput Excluding Min/Max + summary get(ThroughputReportPlugin KEY SYS AVE CLIENT EMM TP)); System out println( [PERF-TP-SUMMARY] Min Client Throughput Per Sample + summary get(ThroughputReportPlugin KEY MIN CLIENT TP)); System out println( [PERF-TP-SUMMARY] Max Client Throughput Per Sample + summary get(ThroughputReportPlugin KEY MAX CLIENT TP)); System out println( [PERF-TP-SUMMARY] Min Client Total Throughput + summary get(ThroughputReportPlugin KEY MIN CLIENT TOTAL TP)); System out println( [PERF-TP-SUMMARY] Max Client Total Throughput + summary get(ThroughputReportPlugin KEY MAX CLIENT TOTAL TP)); System out println( [PERF-TP-SUMMARY] Min Client Average Throughput + summary get(ThroughputReportPlugin KEY MIN CLIENT AVE TP)); System out println( [PERF-TP-SUMMARY] Max Client Average Throughput + summary get(ThroughputReportPlugin KEY MAX CLIENT AVE TP)); System out println( [PERF-TP-SUMMARY] Min Client Average Throughput Excluding Min/Max + summary get(ThroughputReportPlugin KEY MIN CLIENT AVE EMM TP)); System out println( [PERF-TP-SUMMARY] Max Client Average Throughput Excluding Min/Max + summary get(ThroughputReportPlugin KEY MAX CLIENT AVE EMM TP)); } protected void writeCpuSummary(Map summary) { writeHeader( SYSTEM CPU USAGE SUMMARY ); System out println( [PERF-CPU-SUMMARY] Total Blocks Received + summary get(CpuReportPlugin KEY BLOCK RECV)); System out println( [PERF-CPU-SUMMARY] Ave Blocks Received + summary get(CpuReportPlugin KEY AVE BLOCK RECV)); System out println( [PERF-CPU-SUMMARY] Total Blocks Sent + summary get(CpuReportPlugin KEY BLOCK SENT)); System out println( [PERF-CPU-SUMMARY] Ave Blocks Sent + summary get(CpuReportPlugin KEY AVE BLOCK SENT)); System out println( [PERF-CPU-SUMMARY] Total Context Switches + summary get(CpuReportPlugin KEY CTX SWITCH)); System out println( [PERF-CPU-SUMMARY] Ave Context Switches + summary get(CpuReportPlugin KEY AVE CTX SWITCH)); System out println( [PERF-CPU-SUMMARY] Total User Time + summary get(CpuReportPlugin KEY USER TIME)); System out println( [PERF-CPU-SUMMARY] Ave User Time + summary get(CpuReportPlugin KEY AVE USER TIME)); System out println( [PERF-CPU-SUMMARY] Total System Time + summary get(CpuReportPlugin KEY SYS TIME)); System out println( [PERF-CPU-SUMMARY] Ave System Time + summary get(CpuReportPlugin KEY AVE SYS TIME)); System out println( [PERF-CPU-SUMMARY] Total Idle Time + summary get(CpuReportPlugin KEY IDLE TIME)); System out println( [PERF-CPU-SUMMARY] Ave Idle Time + summary get(CpuReportPlugin KEY AVE IDLE TIME)); System out println( [PERF-CPU-SUMMARY] Total Wait Time + summary get(CpuReportPlugin KEY WAIT TIME)); System out println( [PERF-CPU-SUMMARY] Ave Wait Time + summary get(CpuReportPlugin KEY AVE WAIT TIME)); } protected void writeHeader(String header) { char[] border = new char[header length() + 8]; Arrays fill(border, ); String borderStr = new String(border); System out println(borderStr); System out println( + header + ); System out println(borderStr); } }",1.0,
2045,2045,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\reports\XmlFilePerfReportWriter.,XmlFilePerfReportWriter,"public class XmlFilePerfReportWriter extends AbstractPerfReportWriter { private static final Logger LOG = LoggerFactory getLogger(XmlFilePerfReportWriter class); private File tempLogFile; private PrintWriter tempLogFileWriter; private File xmlFile; private PrintWriter xmlFileWriter; private String reportDir; private String reportName; private Map<String, Properties> testPropsMap; private List<Properties> testPropsList; public XmlFilePerfReportWriter() { this( , PerformanceReport xml ); } public XmlFilePerfReportWriter(String reportDir, String reportName) { this testPropsMap = new HashMap<String, Properties>(); this testPropsList = new ArrayList<Properties>(); this reportDir = reportDir; this reportName = reportName; } public void openReportWriter() { if (tempLogFile == null) { tempLogFile = createTempLogFile(); } try { tempLogFileWriter = new PrintWriter(new BufferedOutputStream(new FileOutputStream(tempLogFile), 102400), false); } catch (FileNotFoundException e) { e printStackTrace(); } } public void closeReportWriter() { tempLogFileWriter flush(); tempLogFileWriter close(); writeToXml(); } public String getReportDir() { return reportDir; } public void setReportDir(String reportDir) { this reportDir = reportDir; } public String getReportName() { return reportName; } public void setReportName(String reportName) { this reportName = reportName; } public File getXmlFile() { return xmlFile; } public void setXmlFile(File xmlFile) { this xmlFile = xmlFile; } public void writeInfo(String info) { tempLogFileWriter println( [INFO] + info); } public void writeCsvData(int csvType, String csvData) { if (csvType == REPORT PLUGIN THROUGHPUT) { tempLogFileWriter println( [TP-DATA] + csvData); } else if (csvType == REPORT PLUGIN CPU) { tempLogFileWriter println( [CPU-DATA] + csvData); } } public void writeProperties(String header, Properties props) { testPropsMap put(header, props); } public void writeProperties(Properties props) { testPropsList add(props); } protected File createTempLogFile() { File f; try { f = File createTempFile( tmpPL , null); } catch (IOException e) { f = new File( tmpPL + System currentTimeMillis() + tmp ); } f deleteOnExit(); return f; } protected File createXmlFile() { String filename = getReportName() endsWith( xml ) getReportName() (getReportName() + xml ); String path = (getReportDir() == null) getReportDir(); return new File(path + filename); } protected void writeToXml() { try { xmlFile = createXmlFile(); xmlFileWriter = new PrintWriter(new FileOutputStream(xmlFile)); writeXmlHeader(); writeXmlTestSettings(); writeXmlLogFile(); writeXmlPerfSummary(); writeXmlFooter(); xmlFileWriter close(); LOG info( Created performance report + xmlFile getAbsolutePath()); } catch (Exception e) { e printStackTrace(); } } protected void writeXmlHeader() { xmlFileWriter println( <testResult> ); } protected void writeXmlFooter() { xmlFileWriter println( </testResult> ); } protected void writeXmlTestSettings() { Properties props; for (Iterator<String> i = testPropsMap keySet() iterator(); i hasNext();) { String key = i next(); props = testPropsMap get(key); writeMap(key, props); } int count = 1; for (Iterator<Properties> i = testPropsList iterator(); i hasNext();) { props = i next(); writeMap( settings + count++, props); } } protected void writeXmlLogFile() throws IOException { xmlFileWriter println( <property name= performanceData > ); xmlFileWriter println( <list> ); BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream(tempLogFile))); String line; while ((line = reader readLine()) != null) { if (line startsWith( [TP-DATA] )) { handleCsvData(REPORT PLUGIN THROUGHPUT, line substring( [TP-DATA] length())); parsePerfCsvData( tpdata , line substring( [TP-DATA] length())); } else if (line startsWith( [CPU-DATA] )) { handleCsvData(REPORT PLUGIN CPU, line substring( [CPU-DATA] length())); parsePerfCsvData( cpudata , line substring( [CPU-DATA] length())); } else if (line startsWith( [INFO] )) { xmlFileWriter println( <info> + line + </info> ); } else { xmlFileWriter println( <error> + line + </error> ); } } xmlFileWriter println( </list> ); xmlFileWriter println( </property> ); } protected void writeXmlPerfSummary() { Map summary; summary = getSummary(REPORT PLUGIN THROUGHPUT); if (summary != null && summary size() > 0) { writeThroughputSummary(summary); } summary = getSummary(REPORT PLUGIN CPU); if (summary != null && summary size() > 0) { writeCpuSummary(summary); } } protected void writeThroughputSummary(Map summary) { xmlFileWriter println( <property name= perfTpSummary > ); xmlFileWriter println( <props> ); String val; String clientName; String clientVal; System out println( ); System out println( SYSTEM THROUGHPUT SUMMARY ); System out println( ); val = (String)summary get(ThroughputReportPlugin KEY SYS TOTAL TP); System out println( System Total Throughput + val); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY SYS TOTAL TP + > + val + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY SYS TOTAL CLIENTS); System out println( System Total Clients + val); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY SYS TOTAL CLIENTS + > + val + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY SYS AVE TP); System out println( System Average Throughput + val); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY SYS AVE TP + > + val + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY SYS AVE EMM TP); System out println( System Average Throughput Excluding Min/Max + val); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY SYS AVE EMM TP + > + val + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY SYS AVE CLIENT TP); System out println( System Average Client Throughput + val); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY SYS AVE CLIENT TP + > + val + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY SYS AVE CLIENT EMM TP); System out println( System Average Client Throughput Excluding Min/Max + val); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY SYS AVE CLIENT EMM TP + > + val + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY MIN CLIENT TP); clientName = val substring(0, val indexOf( = )); clientVal = val substring(val indexOf( = ) + 1); System out println( Min Client Throughput Per Sample clientName= + clientName + , value= + clientVal); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY MIN CLIENT TP + >clientName= + clientName + ,value= + clientVal + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY MAX CLIENT TP); clientName = val substring(0, val indexOf( = )); clientVal = val substring(val indexOf( = ) + 1); System out println( Max Client Throughput Per Sample clientName= + clientName + , value= + clientVal); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY MAX CLIENT TP + >clientName= + clientName + ,value= + clientVal + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY MIN CLIENT TOTAL TP); clientName = val substring(0, val indexOf( = )); clientVal = val substring(val indexOf( = ) + 1); System out println( Min Client Total Throughput clientName= + clientName + , value= + clientVal); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY MIN CLIENT TOTAL TP + >clientName= + clientName + ,value= + clientVal + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY MAX CLIENT TOTAL TP); clientName = val substring(0, val indexOf( = )); clientVal = val substring(val indexOf( = ) + 1); System out println( Max Client Total Throughput clientName= + clientName + , value= + clientVal); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY MAX CLIENT TOTAL TP + >clientName= + clientName + ,value= + clientVal + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY MIN CLIENT AVE TP); clientName = val substring(0, val indexOf( = )); clientVal = val substring(val indexOf( = ) + 1); System out println( Min Average Client Throughput clientName= + clientName + , value= + clientVal); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY MIN CLIENT AVE TP + >clientName= + clientName + ,value= + clientVal + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY MAX CLIENT AVE TP); clientName = val substring(0, val indexOf( = )); clientVal = val substring(val indexOf( = ) + 1); System out println( Max Average Client Throughput clientName= + clientName + , value= + clientVal); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY MAX CLIENT AVE TP + >clientName= + clientName + ,value= + clientVal + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY MIN CLIENT AVE EMM TP); clientName = val substring(0, val indexOf( = )); clientVal = val substring(val indexOf( = ) + 1); System out println( Min Average Client Throughput Excluding Min/Max clientName= + clientName + , value= + clientVal); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY MIN CLIENT AVE EMM TP + >clientName= + clientName + ,value= + clientVal + </prop> ); val = (String)summary get(ThroughputReportPlugin KEY MAX CLIENT AVE EMM TP); clientName = val substring(0, val indexOf( = )); clientVal = val substring(val indexOf( = ) + 1); System out println( Max Average Client Throughput Excluding Min/Max clientName= + clientName + , value= + clientVal); xmlFileWriter println( <prop key= + ThroughputReportPlugin KEY MAX CLIENT AVE EMM TP + >clientName= + clientName + ,value= + clientVal + </prop> ); xmlFileWriter println( </props> ); xmlFileWriter println( </property> ); } protected void writeCpuSummary(Map summary) { xmlFileWriter println( <property name= perfTpSummary > ); xmlFileWriter println( <props> ); System out println( ); System out println( SYSTEM CPU USAGE SUMMARY ); System out println( ); xmlFileWriter println( <prop key= + CpuReportPlugin KEY BLOCK RECV + > + summary get(CpuReportPlugin KEY BLOCK RECV) + </prop> ); System out println( Total Blocks Received + summary get(CpuReportPlugin KEY BLOCK RECV)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY AVE BLOCK RECV + > + summary get(CpuReportPlugin KEY AVE BLOCK RECV) + </prop> ); System out println( Ave Blocks Received + summary get(CpuReportPlugin KEY AVE BLOCK RECV)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY BLOCK SENT + > + summary get(CpuReportPlugin KEY BLOCK SENT) + </prop> ); System out println( Total Blocks Sent + summary get(CpuReportPlugin KEY BLOCK SENT)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY AVE BLOCK SENT + > + summary get(CpuReportPlugin KEY AVE BLOCK SENT) + </prop> ); System out println( Ave Blocks Sent + summary get(CpuReportPlugin KEY AVE BLOCK SENT)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY CTX SWITCH + > + summary get(CpuReportPlugin KEY CTX SWITCH) + </prop> ); System out println( Total Context Switches + summary get(CpuReportPlugin KEY CTX SWITCH)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY AVE CTX SWITCH + > + summary get(CpuReportPlugin KEY AVE CTX SWITCH) + </prop> ); System out println( Ave Context Switches + summary get(CpuReportPlugin KEY AVE CTX SWITCH)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY USER TIME + > + summary get(CpuReportPlugin KEY USER TIME) + </prop> ); System out println( Total User Time + summary get(CpuReportPlugin KEY USER TIME)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY AVE USER TIME + > + summary get(CpuReportPlugin KEY AVE USER TIME) + </prop> ); System out println( Ave User Time + summary get(CpuReportPlugin KEY AVE USER TIME)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY SYS TIME + > + summary get(CpuReportPlugin KEY SYS TIME) + </prop> ); System out println( Total System Time + summary get(CpuReportPlugin KEY SYS TIME)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY AVE SYS TIME + > + summary get(CpuReportPlugin KEY AVE SYS TIME) + </prop> ); System out println( Ave System Time + summary get(CpuReportPlugin KEY AVE SYS TIME)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY IDLE TIME + > + summary get(CpuReportPlugin KEY IDLE TIME) + </prop> ); System out println( Total Idle Time + summary get(CpuReportPlugin KEY IDLE TIME)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY AVE IDLE TIME + > + summary get(CpuReportPlugin KEY AVE IDLE TIME) + </prop> ); System out println( Ave Idle Time + summary get(CpuReportPlugin KEY AVE IDLE TIME)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY WAIT TIME + > + summary get(CpuReportPlugin KEY WAIT TIME) + </prop> ); System out println( Total Wait Time + summary get(CpuReportPlugin KEY WAIT TIME)); xmlFileWriter println( <prop key= + CpuReportPlugin KEY AVE WAIT TIME + > + summary get(CpuReportPlugin KEY AVE WAIT TIME) + </prop> ); System out println( Ave Wait Time + summary get(CpuReportPlugin KEY AVE WAIT TIME)); xmlFileWriter println( </props> ); xmlFileWriter println( </property> ); } protected void writeMap(String name, Map map) { xmlFileWriter println( <property name= + name + > ); xmlFileWriter println( <props> ); for (Iterator i = map keySet() iterator(); i hasNext();) { String propKey = (String)i next(); Object propVal = map get(propKey); xmlFileWriter println( <prop key= + propKey + > + propVal toString() + </prop> ); } xmlFileWriter println( </props> ); xmlFileWriter println( </property> ); } protected void parsePerfCsvData(String elementName, String csvData) { StringTokenizer tokenizer = new StringTokenizer(csvData, ,; ); String xmlElement; xmlElement = < + elementName; String data; String key; String val; while (tokenizer hasMoreTokens()) { data = tokenizer nextToken(); key = data substring(0, data indexOf( = )); val = data substring(data indexOf( = ) + 1); xmlElement += + key + = + val + ; } xmlElement += /> ; xmlFileWriter println(xmlElement); } }",1.0,
2046,2046,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\reports\plugins\CpuReportPlugin.,CpuReportPlugin,"public class CpuReportPlugin implements ReportPlugin { public static final String NAME IGNORE LIST = index timeUnit r b w swpd inact active free buff cache si so in ; public static final String NAME BLOCK RECV = bi ; public static final String NAME BLOCK SENT = bo ; public static final String NAME CTX SWITCH = cs ; public static final String NAME USER TIME = us ; public static final String NAME SYS TIME = sy ; public static final String NAME IDLE TIME = id ; public static final String NAME WAIT TIME = wa ; public static final String KEY BLOCK RECV = BlocksReceived ; public static final String KEY BLOCK SENT = BlocksSent ; public static final String KEY CTX SWITCH = ContextSwitches ; public static final String KEY USER TIME = UserTime ; public static final String KEY SYS TIME = SystemTime ; public static final String KEY IDLE TIME = IdleTime ; public static final String KEY WAIT TIME = WaitingTime ; public static final String KEY AVE BLOCK RECV = AveBlocksReceived ; public static final String KEY AVE BLOCK SENT = AveBlocksSent ; public static final String KEY AVE CTX SWITCH = AveContextSwitches ; public static final String KEY AVE USER TIME = AveUserTime ; public static final String KEY AVE SYS TIME = AveSystemTime ; public static final String KEY AVE IDLE TIME = AveIdleTime ; public static final String KEY AVE WAIT TIME = AveWaitingTime ; private static final Logger LOG = LoggerFactory getLogger(CpuReportPlugin class); protected List<Long> blockRecv = new ArrayList<Long>(); protected List<Long> blockSent = new ArrayList<Long>(); protected List<Long> ctxSwitch = new ArrayList<Long>(); protected List<Long> userTime = new ArrayList<Long>(); protected List<Long> sysTime = new ArrayList<Long>(); protected List<Long> idleTime = new ArrayList<Long>(); protected List<Long> waitTime = new ArrayList<Long>(); public void handleCsvData(String csvData) { StringTokenizer tokenizer = new StringTokenizer(csvData, , ); String data; String key; String val; while (tokenizer hasMoreTokens()) { data = tokenizer nextToken(); key = data substring(0, data indexOf( = )); val = data substring(data indexOf( = ) + 1); addToCpuList(key, val); } } public Map<String, String> getSummary() { long val; Map<String, String> summary = new HashMap<String, String>(); if (blockRecv size() > 0) { val = PerformanceStatisticsUtil getSum(blockRecv); summary put(KEY BLOCK RECV, String valueOf(val)); summary put(KEY AVE BLOCK RECV, String valueOf((double)val / (double)blockRecv size())); } if (blockSent size() > 0) { val = PerformanceStatisticsUtil getSum(blockSent); summary put(KEY BLOCK SENT, String valueOf(val)); summary put(KEY AVE BLOCK SENT, String valueOf((double)val / (double)blockSent size())); } if (ctxSwitch size() > 0) { val = PerformanceStatisticsUtil getSum(ctxSwitch); summary put(KEY CTX SWITCH, String valueOf(val)); summary put(KEY AVE CTX SWITCH, String valueOf((double)val / (double)ctxSwitch size())); } if (userTime size() > 0) { val = PerformanceStatisticsUtil getSum(userTime); summary put(KEY USER TIME, String valueOf(val)); summary put(KEY AVE USER TIME, String valueOf((double)val / (double)userTime size())); } if (sysTime size() > 0) { val = PerformanceStatisticsUtil getSum(sysTime); summary put(KEY SYS TIME, String valueOf(val)); summary put(KEY AVE SYS TIME, String valueOf((double)val / (double)sysTime size())); } if (idleTime size() > 0) { val = PerformanceStatisticsUtil getSum(idleTime); summary put(KEY IDLE TIME, String valueOf(val)); summary put(KEY AVE IDLE TIME, String valueOf((double)val / (double)idleTime size())); } if (waitTime size() > 0) { val = PerformanceStatisticsUtil getSum(waitTime); summary put(KEY WAIT TIME, String valueOf(val)); summary put(KEY AVE WAIT TIME, String valueOf((double)val / (double)waitTime size())); } if (summary size() > 0) { return summary; } else { return null; } } protected void addToCpuList(String key, String val) { if (key equals(NAME BLOCK RECV)) { blockRecv add(Long valueOf(val)); } else if (key equals(NAME BLOCK SENT)) { blockSent add(Long valueOf(val)); } else if (key equals(NAME CTX SWITCH)) { ctxSwitch add(Long valueOf(val)); } else if (key equals(NAME USER TIME)) { userTime add(Long valueOf(val)); } else if (key equals(NAME SYS TIME)) { sysTime add(Long valueOf(val)); } else if (key equals(NAME IDLE TIME)) { idleTime add(Long valueOf(val)); } else if (key equals(NAME WAIT TIME)) { waitTime add(Long valueOf(val)); } else if (NAME IGNORE LIST indexOf( + key + ) != -1) { } else { LOG warn( Unrecognized CPU data + key + = + val); } } }",1.0,
2047,2047,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\reports\plugins\ThroughputReportPlugin.,ThroughputReportPlugin,"public class ThroughputReportPlugin implements ReportPlugin { public static final String KEY SYS TOTAL TP = SystemTotalTP ; public static final String KEY SYS TOTAL CLIENTS = SystemTotalClients ; public static final String KEY SYS AVE TP = SystemAveTP ; public static final String KEY SYS AVE EMM TP = SystemAveEMMTP ; public static final String KEY SYS AVE CLIENT TP = SystemAveClientTP ; public static final String KEY SYS AVE CLIENT EMM TP = SystemAveClientEMMTP ; public static final String KEY MIN CLIENT TP = MinClientTP ; public static final String KEY MAX CLIENT TP = MaxClientTP ; public static final String KEY MIN CLIENT TOTAL TP = MinClientTotalTP ; public static final String KEY MAX CLIENT TOTAL TP = MaxClientTotalTP ; public static final String KEY MIN CLIENT AVE TP = MinClientAveTP ; public static final String KEY MAX CLIENT AVE TP = MaxClientAveTP ; public static final String KEY MIN CLIENT AVE EMM TP = MinClientAveEMMTP ; public static final String KEY MAX CLIENT AVE EMM TP = MaxClientAveEMMTP ; protected Map<String, List> clientThroughputs = new HashMap<String, List>(); public void handleCsvData(String csvData) { StringTokenizer tokenizer = new StringTokenizer(csvData, , ); String data; String key; String val; String clientName = null; Long throughput = null; while (tokenizer hasMoreTokens()) { data = tokenizer nextToken(); key = data substring(0, data indexOf( = )); val = data substring(data indexOf( = ) + 1); if (key equalsIgnoreCase( clientName )) { clientName = val; } else if (key equalsIgnoreCase( throughput )) { throughput = Long valueOf(val); } else { } } addToClientTPList(clientName, throughput); } public Map<String, String> getSummary() { if (clientThroughputs size() == 0) { return new HashMap<String, String>(); } long minClientTP = Long MAX VALUE; long maxClientTP = Long MIN VALUE; long minClientTotalTP = Long MAX VALUE; long maxClientTotalTP = Long MIN VALUE; long systemTotalTP = 0; double minClientAveTP = Double MAX VALUE; double maxClientAveTP = Double MIN VALUE; double minClientAveEMMTP = Double MAX VALUE; double maxClientAveEMMTP = Double MIN VALUE; double systemAveTP = 0 0; double systemAveEMMTP = 0 0; String nameMinClientTP = ; String nameMaxClientTP = ; String nameMinClientTotalTP = ; String nameMaxClientTotalTP = ; String nameMinClientAveTP = ; String nameMaxClientAveTP = ; String nameMinClientAveEMMTP = ; String nameMaxClientAveEMMTP = ; Set<String> clientNames = clientThroughputs keySet(); String clientName; List clientTPList; long tempLong; double tempDouble; int clientCount = 0; for (Iterator<String> i = clientNames iterator(); i hasNext();) { clientName = i next(); clientTPList = clientThroughputs get(clientName); clientCount++; tempLong = PerformanceStatisticsUtil getMin(clientTPList); if (tempLong < minClientTP) { minClientTP = tempLong; nameMinClientTP = clientName; } tempLong = PerformanceStatisticsUtil getMax(clientTPList); if (tempLong > maxClientTP) { maxClientTP = tempLong; nameMaxClientTP = clientName; } tempLong = PerformanceStatisticsUtil getSum(clientTPList); systemTotalTP += tempLong; if (tempLong < minClientTotalTP) { minClientTotalTP = tempLong; nameMinClientTotalTP = clientName; } if (tempLong > maxClientTotalTP) { maxClientTotalTP = tempLong; nameMaxClientTotalTP = clientName; } tempDouble = PerformanceStatisticsUtil getAve(clientTPList); systemAveTP += tempDouble; if (tempDouble < minClientAveTP) { minClientAveTP = tempDouble; nameMinClientAveTP = clientName; } if (tempDouble > maxClientAveTP) { maxClientAveTP = tempDouble; nameMaxClientAveTP = clientName; } tempDouble = PerformanceStatisticsUtil getAveEx(clientTPList); systemAveEMMTP += tempDouble; if (tempDouble < minClientAveEMMTP) { minClientAveEMMTP = tempDouble; nameMinClientAveEMMTP = clientName; } if (tempDouble > maxClientAveEMMTP) { maxClientAveEMMTP = tempDouble; nameMaxClientAveEMMTP = clientName; } } Map<String, String> summary = new HashMap<String, String>(); summary put(KEY SYS TOTAL TP, String valueOf(systemTotalTP)); summary put(KEY SYS TOTAL CLIENTS, String valueOf(clientCount)); summary put(KEY SYS AVE TP, String valueOf(systemAveTP)); summary put(KEY SYS AVE EMM TP, String valueOf(systemAveEMMTP)); summary put(KEY SYS AVE CLIENT TP, String valueOf(systemAveTP / clientCount)); summary put(KEY SYS AVE CLIENT EMM TP, String valueOf(systemAveEMMTP / clientCount)); summary put(KEY MIN CLIENT TP, nameMinClientTP + = + minClientTP); summary put(KEY MAX CLIENT TP, nameMaxClientTP + = + maxClientTP); summary put(KEY MIN CLIENT TOTAL TP, nameMinClientTotalTP + = + minClientTotalTP); summary put(KEY MAX CLIENT TOTAL TP, nameMaxClientTotalTP + = + maxClientTotalTP); summary put(KEY MIN CLIENT AVE TP, nameMinClientAveTP + = + minClientAveTP); summary put(KEY MAX CLIENT AVE TP, nameMaxClientAveTP + = + maxClientAveTP); summary put(KEY MIN CLIENT AVE EMM TP, nameMinClientAveEMMTP + = + minClientAveEMMTP); summary put(KEY MAX CLIENT AVE EMM TP, nameMaxClientAveEMMTP + = + maxClientAveEMMTP); return summary; } protected void addToClientTPList(String clientName, Long throughput) { if (clientName == null || throughput == null) { throw new IllegalArgumentException( Invalid Throughput CSV Data clientName= + clientName + , throughput= + throughput); } List<Long> clientTPList = clientThroughputs get(clientName); if (clientTPList == null) { clientTPList = new ArrayList<Long>(); clientThroughputs put(clientName, clientTPList); } clientTPList add(throughput); } }",1.0,
2048,2048,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\sampler\AbstractPerformanceSampler.,AbstractPerformanceSampler,public abstract class AbstractPerformanceSampler extends AbstractObjectProperties implements PerformanceSampler { protected long rampUpTime = 30 * 1000; protected long rampDownTime = 30 * 1000; protected long duration = 5 * 60 * 1000; protected long interval = 1000; protected PerformanceReportWriter perfReportWriter; protected PerformanceEventListener perfEventListener; protected final AtomicBoolean isRunning = new AtomicBoolean(false); protected long sampleIndex; public long getRampUpTime() { return rampUpTime; } public void setRampUpTime(long rampUpTime) { this rampUpTime = rampUpTime; } public long getRampDownTime() { return rampDownTime; } public void setRampDownTime(long rampDownTime) { this rampDownTime = rampDownTime; } public long getDuration() { return duration; } public void setDuration(long duration) { this duration = duration; } public long getInterval() { return interval; } public void setInterval(long interval) { this interval = interval; } public PerformanceReportWriter getPerfReportWriter() { return perfReportWriter; } public void setPerfReportWriter(PerformanceReportWriter perfReportWriter) { this perfReportWriter = perfReportWriter; } public PerformanceEventListener getPerfEventListener() { return perfEventListener; } public void setPerfEventListener(PerformanceEventListener perfEventListener) { this perfEventListener = perfEventListener; } public void startSampler() { isRunning set(true); Thread t = new Thread(this); t start(); } public void run() { try { onRampUpStart(); if (perfEventListener != null) { perfEventListener onRampUpStart(this); } try { Thread sleep(rampUpTime); } catch (InterruptedException e) { e printStackTrace(); } onSamplerStart(); if (perfEventListener != null) { perfEventListener onSamplerStart(this); } sample(); onSamplerEnd(); if (perfEventListener != null) { perfEventListener onSamplerEnd(this); } try { Thread sleep(rampDownTime); } catch (InterruptedException e) { e printStackTrace(); } onRampDownEnd(); if (perfEventListener != null) { perfEventListener onRampDownEnd(this); } } finally { isRunning set(false); synchronized (isRunning) { isRunning notifyAll(); } } } protected void sample() { long endTime = System currentTimeMillis() + duration - rampDownTime - rampUpTime; while (System currentTimeMillis() < endTime) { try { Thread sleep(interval); } catch (InterruptedException e) { e printStackTrace(); } sampleData(); sampleIndex++; } } public abstract void sampleData(); public boolean isRunning() { return isRunning get(); } public void waitUntilDone() { while (isRunning()) { try { synchronized (isRunning) { isRunning wait(0); } } catch (InterruptedException e) { e printStackTrace(); } } } protected void onRampUpStart() { } protected void onSamplerStart() { } protected void onSamplerEnd() { } protected void onRampDownEnd() { } },1.0,
2049,2049,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\sampler\CpuSamplerTask.,CpuSamplerTask,"public class CpuSamplerTask extends AbstractPerformanceSampler { private CpuSamplerPlugin plugin; public void createPlugin() throws IOException { createPlugin(System getProperty( os name )); } public void createPlugin(String osName) throws IOException { if (osName == null) { throw new IOException( No defined OS name found Found + osName); } if (osName equalsIgnoreCase(CpuSamplerPlugin LINUX)) { plugin = new LinuxCpuSamplerPlugin(getInterval()); } else { throw new IOException( No CPU Sampler Plugin found for OS + osName + CPU Sampler will not be started ); } } public void sampleData() { if (plugin != null && perfReportWriter != null) { perfReportWriter writeCsvData(AbstractPerfReportWriter REPORT PLUGIN CPU, index= + sampleIndex + , + plugin getCpuUtilizationStats()); } } protected void onRampUpStart() { super onRampUpStart(); if (plugin != null) { plugin start(); } } protected void onRampDownEnd() { super onRampDownEnd(); if (plugin != null) { plugin stop(); } } }",1.0,
2050,2050,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\sampler\ThroughputSamplerTask.,ThroughputSamplerTask,"public class ThroughputSamplerTask extends AbstractPerformanceSampler { private final Object mutex = new Object(); private List<MeasurableClient> clients = new ArrayList<MeasurableClient>(); public void registerClient(MeasurableClient client) { synchronized (mutex) { clients add(client); } } public void sampleData() { for (Iterator<MeasurableClient> i = clients iterator(); i hasNext();) { MeasurableClient client = i next(); if (perfReportWriter != null) { perfReportWriter writeCsvData(AbstractPerfReportWriter REPORT PLUGIN THROUGHPUT, index= + sampleIndex + ,clientName= + client getClientName() + ,throughput= + client getThroughput()); } client reset(); } } protected void onSamplerStart() { for (Iterator<MeasurableClient> i = clients iterator(); i hasNext();) { MeasurableClient client = i next(); client reset(); } } }",1.0,
2051,2051,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\sampler\plugins\LinuxCpuSamplerPlugin.,LinuxCpuSamplerPlugin,"public class LinuxCpuSamplerPlugin implements CpuSamplerPlugin, Runnable { private Process vmstatProcess; private String vmstat; private String result = ; private final Object mutex = new Object(); private AtomicBoolean stop = new AtomicBoolean(false); public LinuxCpuSamplerPlugin(long intervalInMs) { vmstat = vmstat -n + (int)(intervalInMs / 1000); } public void start() { stop set(false); Thread t = new Thread(this); t start(); } public void stop() { stop set(true); try { vmstatProcess waitFor(); } catch (InterruptedException e) { e printStackTrace(); } } public void run() { try { vmstatProcess = Runtime getRuntime() exec(vmstat); BufferedReader br = new BufferedReader(new InputStreamReader(vmstatProcess getInputStream()), 1024); br readLine(); String header = br readLine(); String data; while (!stop get()) { data = br readLine(); if (data != null) { String csvData = convertToCSV(header, data); synchronized (mutex) { result = csvData; } } } br close(); vmstatProcess destroy(); } catch (IOException ioe) { ioe printStackTrace(); } } public String getCpuUtilizationStats() { String data; synchronized (mutex) { data = result; result = ; } return data; } public String getVmstat() { return vmstat; } public void setVmstat(String vmstat) { this vmstat = vmstat; } protected String convertToCSV(String header, String data) { StringTokenizer headerTokens = new StringTokenizer(header, ); StringTokenizer dataTokens = new StringTokenizer(data, ); String csv = ; while (headerTokens hasMoreTokens()) { csv += headerTokens nextToken() + = + dataTokens nextToken() + , ; } return csv; } }",1.0,
2054,2054,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\spi\ClassLoaderSPIConnectionFactory.,ClassLoaderSPIConnectionFactory,"public abstract class ClassLoaderSPIConnectionFactory implements SPIConnectionFactory { public static final String KEY EXT DIR = extDir ; private static final Logger LOG = LoggerFactory getLogger(ClassLoaderSPIConnectionFactory class); public final ConnectionFactory createConnectionFactory(Properties settings) throws Exception { ClassLoader newClassLoader = getContextClassLoader(settings); Thread currentThread() setContextClassLoader(newClassLoader); return instantiateConnectionFactory(settings); } protected ClassLoader getContextClassLoader(Properties settings) { String extDir = (String)settings remove(KEY EXT DIR); if (extDir != null) { StringTokenizer tokens = new StringTokenizer(extDir, ;, ); List<URL> urls = new ArrayList<URL>(); while (tokens hasMoreTokens()) { String dir = tokens nextToken(); try { File f = new File(dir); if (!f exists()) { LOG warn( Cannot find extension dir + f getAbsolutePath()); } else { LOG info( Adding extension dir + f getAbsolutePath()); urls add(f toURL()); File[] files = f listFiles(); if (files != null) { for (int j = 0; j < files length; j++) { if (files[j] getName() endsWith( zip ) || files[j] getName() endsWith( jar )) { LOG info( Adding extension dir + files[j] getAbsolutePath()); urls add(files[j] toURL()); } } } } } catch (Exception e) { LOG warn( Failed to load ext dir + dir + Reason + e); } } URL u[] = new URL[urls size()]; urls toArray(u); return new URLClassLoader(u, Thread currentThread() getContextClassLoader()); } return ClassLoaderSPIConnectionFactory class getClassLoader(); } protected abstract ConnectionFactory instantiateConnectionFactory(Properties settings) throws Exception; }",1.0,
2055,2055,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\spi\ReflectionSPIConnectionFactory.,ReflectionSPIConnectionFactory,"public abstract class ReflectionSPIConnectionFactory extends ClassLoaderSPIConnectionFactory { public ConnectionFactory instantiateConnectionFactory(Properties settings) throws Exception { Class factoryClass = Thread currentThread() getContextClassLoader() loadClass(getClassName()); ConnectionFactory factory = (ConnectionFactory)factoryClass newInstance(); configureConnectionFactory(factory, settings); return factory; } public void configureConnectionFactory(ConnectionFactory jmsFactory, Properties settings) throws Exception { ReflectionUtil configureClass(jmsFactory, settings); } public abstract String getClassName(); }",1.0,
2056,2056,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\ReflectionUtilTest.,ReflectionUtilTest,"public class ReflectionUtilTest extends TestCase { public void testConfigurableOption() { TestClass5 data = new TestClass5(); data willIntercept = true; ReflectionUtil configureClass(data, this-should-not-matter , this-should-not-matter ); assertTrue(data intercepted); data willIntercept = false; data nest = new TestClass5(); data nest willIntercept = true; ReflectionUtil configureClass(data, nest this-should-not-matter , this-should-not-matter ); assertTrue(data intercepted); assertTrue(data nest intercepted); data willIntercept = false; data nest = new TestClass5(); data nest willIntercept = false; data nest nest = new TestClass5(); data nest nest willIntercept = true; ReflectionUtil configureClass(data, nest nest this-should-not-matter , this-should-not-matter ); assertTrue(data intercepted); assertTrue(data nest intercepted); assertTrue(data nest nest intercepted); TestClass6 data2 = new TestClass6(); data2 nestConfig = new TestClass5(); data2 nestConfig willIntercept = true; ReflectionUtil configureClass(data2, nestConfig this-should-not-matter , this-should-not-matter ); assertTrue(data2 nestConfig intercepted); data2 nestNotConfig = new TestClass6(); data2 nestNotConfig nestConfig = new TestClass5(); data2 nestNotConfig nestConfig willIntercept = true; ReflectionUtil configureClass(data2, nestNotConfig nestConfig this-should-not-matter , this-should-not-matter ); assertTrue(data2 nestNotConfig nestConfig intercepted); } public void testDataTypeConfig() { TestClass3 targetObj = new TestClass3(); targetObj setBooleanData(false); targetObj setIntData(0); targetObj setLongData(0); targetObj setShortData((short)0); targetObj setDoubleData(0 0); targetObj setFloatData(0 0F); targetObj setByteData((byte)0); targetObj setCharData( 0 ); targetObj setStringData( false ); Properties props = new Properties(); props setProperty( booleanData , true ); props setProperty( intData , 1000 ); props setProperty( longData , 2000 ); props setProperty( shortData , 3000 ); props setProperty( doubleData , 1234 567 ); props setProperty( floatData , 9876 543 ); props setProperty( byteData , 127 ); props setProperty( charData , A ); props setProperty( stringData , true ); ReflectionUtil configureClass(targetObj, props); assertEquals(true, targetObj isBooleanData()); assertEquals(1000, targetObj getIntData()); assertEquals(2000, targetObj getLongData()); assertEquals(3000, targetObj getShortData()); assertEquals(1234 567, targetObj getDoubleData(), 0 0001); assertEquals(9876 543, targetObj getFloatData(), 0 0001); assertEquals(127, targetObj getByteData()); assertEquals( A , targetObj getCharData()); assertEquals( true , targetObj getStringData()); } public void testValueOfMethod() { TestClass4 targetObj = new TestClass4(); ReflectionUtil configureClass(targetObj, testFile , TEST FOO BAR ); assertEquals( TEST FOO BAR , targetObj testFile toString()); } public void testGetProperties() { TestClass3 testData = new TestClass3(); testData setBooleanData(false); testData setByteData((byte)15); testData setCharData( G ); testData setDoubleData(765 43); testData setFloatData(543 21F); testData setIntData(654321); testData setLongData(987654321); testData setShortData((short)4321); testData setStringData( BAR TEST FOO ); TestClass3 targetObj = new TestClass3(); targetObj setBooleanData(true); targetObj setByteData((byte)10); targetObj setCharData( D ); targetObj setDoubleData(1234 567); targetObj setFloatData(4567 89F); targetObj setIntData(123456); targetObj setLongData(1234567890); targetObj setShortData((short)1234); targetObj setStringData( Test FOO BAR ); targetObj setTestData(testData); Properties p = ReflectionUtil retrieveObjectProperties(targetObj); assertEquals( true , p getProperty( booleanData )); assertEquals( 10 , p getProperty( byteData )); assertEquals( D , p getProperty( charData )); assertEquals( 1234 567 , p getProperty( doubleData )); assertEquals( 4567 89 , p getProperty( floatData )); assertEquals( 123456 , p getProperty( intData )); assertEquals( 1234567890 , p getProperty( longData )); assertEquals( 1234 , p getProperty( shortData )); assertEquals( Test FOO BAR , p getProperty( stringData )); assertEquals( false , p getProperty( testData booleanData )); assertEquals( 15 , p getProperty( testData byteData )); assertEquals( G , p getProperty( testData charData )); assertEquals( 765 43 , p getProperty( testData doubleData )); assertEquals( 543 21 , p getProperty( testData floatData )); assertEquals( 654321 , p getProperty( testData intData )); assertEquals( 987654321 , p getProperty( testData longData )); assertEquals( 4321 , p getProperty( testData shortData )); assertEquals( BAR TEST FOO , p getProperty( testData stringData )); } public void testNestedConfig() { TestClass3 t1 = new TestClass3(); TestClass3 t2 = new TestClass3(); TestClass3 t3 = new TestClass3(); TestClass3 t4 = new TestClass3(); TestClass3 t5 = new TestClass3(); ReflectionUtil configureClass(t1, stringData , t1 ); assertEquals( t1 , t1 getStringData()); t1 setTestData(t2); ReflectionUtil configureClass(t1, testData stringData , t2 ); assertEquals( t2 , t2 getStringData()); t2 setTestData(t3); ReflectionUtil configureClass(t1, testData testData stringData , t3 ); assertEquals( t3 , t3 getStringData()); t3 setTestData(t4); ReflectionUtil configureClass(t1, testData testData testData stringData , t4 ); assertEquals( t4 , t4 getStringData()); t4 setTestData(t5); ReflectionUtil configureClass(t1, testData testData testData testData stringData , t5 ); assertEquals( t5 , t5 getStringData()); } public class TestClass1 { private boolean booleanData; private int intData; private long longData; public boolean isBooleanData() { return booleanData; } public void setBooleanData(boolean booleanData) { this booleanData = booleanData; } public int getIntData() { return intData; } public void setIntData(int intData) { this intData = intData; } public long getLongData() { return longData; } public void setLongData(long longData) { this longData = longData; } } public class TestClass2 extends TestClass1 { private float floatData; private byte byteData; private char charData; public float getFloatData() { return floatData; } public void setFloatData(float floatData) { this floatData = floatData; } public byte getByteData() { return byteData; } public void setByteData(byte byteData) { this byteData = byteData; } public char getCharData() { return charData; } public void setCharData(char charData) { this charData = charData; } } public class TestClass3 extends TestClass2 { private short shortData; private double doubleData; private String stringData; private TestClass3 testData; public short getShortData() { return shortData; } public void setShortData(short shortData) { this shortData = shortData; } public double getDoubleData() { return doubleData; } public void setDoubleData(double doubleData) { this doubleData = doubleData; } public String getStringData() { return stringData; } public void setStringData(String stringData) { this stringData = stringData; } public TestClass3 getTestData() { return testData; } public void setTestData(TestClass3 testData) { this testData = testData; } public TestClass3 getRecursiveData() { return this; } } public class TestClass4 { private File testFile; public String getTestFile() { return testFile toString(); } public void setTestFile(String testFile) { this testFile = new File(testFile); } } public class TestClass5 implements ReflectionConfigurable { public boolean intercepted; public boolean willIntercept = true; public TestClass5 nest; public void configureProperties(Properties props) { } public Properties retrieveProperties(Properties props) { return null; } public boolean acceptConfig(String key, String val) { intercepted = true; return !willIntercept; } public TestClass5 getNest() { return nest; } public void setNest(TestClass5 nest) { this nest = nest; } } public class TestClass6 { public TestClass6 nestNotConfig; public TestClass5 nestConfig; public TestClass6 getNestNotConfig() { return nestNotConfig; } public void setNestNotConfig(TestClass6 nestNotConfig) { this nestNotConfig = nestNotConfig; } public TestClass5 getNestConfig() { return nestConfig; } public void setNestConfig(TestClass5 nestConfig) { this nestConfig = nestConfig; } } }",1.0,
2057,2057,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\ReflectionUtilTest.,TestClass1,public class TestClass1 { private boolean booleanData; private int intData; private long longData; public boolean isBooleanData() { return booleanData; } public void setBooleanData(boolean booleanData) { this booleanData = booleanData; } public int getIntData() { return intData; } public void setIntData(int intData) { this intData = intData; } public long getLongData() { return longData; } public void setLongData(long longData) { this longData = longData; } },1.0,
2058,2058,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\ReflectionUtilTest.,TestClass2,public class TestClass2 extends TestClass1 { private float floatData; private byte byteData; private char charData; public float getFloatData() { return floatData; } public void setFloatData(float floatData) { this floatData = floatData; } public byte getByteData() { return byteData; } public void setByteData(byte byteData) { this byteData = byteData; } public char getCharData() { return charData; } public void setCharData(char charData) { this charData = charData; } },1.0,
2059,2059,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\ReflectionUtilTest.,TestClass3,public class TestClass3 extends TestClass2 { private short shortData; private double doubleData; private String stringData; private TestClass3 testData; public short getShortData() { return shortData; } public void setShortData(short shortData) { this shortData = shortData; } public double getDoubleData() { return doubleData; } public void setDoubleData(double doubleData) { this doubleData = doubleData; } public String getStringData() { return stringData; } public void setStringData(String stringData) { this stringData = stringData; } public TestClass3 getTestData() { return testData; } public void setTestData(TestClass3 testData) { this testData = testData; } public TestClass3 getRecursiveData() { return this; } },1.0,
2060,2060,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\ReflectionUtilTest.,TestClass4,public class TestClass4 { private File testFile; public String getTestFile() { return testFile toString(); } public void setTestFile(String testFile) { this testFile = new File(testFile); } },1.0,
2061,2061,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\ReflectionUtilTest.,TestClass5,"public class TestClass5 implements ReflectionConfigurable { public boolean intercepted; public boolean willIntercept = true; public TestClass5 nest; public void configureProperties(Properties props) { } public Properties retrieveProperties(Properties props) { return null; } public boolean acceptConfig(String key, String val) { intercepted = true; return !willIntercept; } public TestClass5 getNest() { return nest; } public void setNest(TestClass5 nest) { this nest = nest; } }",1.0,
2062,2062,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\ReflectionUtilTest.,TestClass6,public class TestClass6 { public TestClass6 nestNotConfig; public TestClass5 nestConfig; public TestClass6 getNestNotConfig() { return nestNotConfig; } public void setNestNotConfig(TestClass6 nestNotConfig) { this nestNotConfig = nestNotConfig; } public TestClass5 getNestConfig() { return nestConfig; } public void setNestConfig(TestClass5 nestConfig) { this nestConfig = nestConfig; } },1.0,
2063,2063,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\properties\JmsProducerPropertiesTest.,JmsProducerPropertiesTest,"public class JmsProducerPropertiesTest extends TestCase { public void testMessageHeaders() { String header = a=b ; JmsProducerProperties props = new JmsProducerProperties(); props setHeader(header); assertEquals(1, props headerMap size()); Set<String> keys = props getHeaderKeys(); assertEquals(1, keys size()); assertTrue(keys contains( a )); assertEquals( b , props getHeaderValue( a )); props clearHeaders(); header = a=b c=d ; props setHeader(header); assertEquals(2, props headerMap size()); keys = props getHeaderKeys(); assertEquals(2, keys size()); assertTrue(keys contains( a )); assertTrue(keys contains( c )); assertEquals( b , props getHeaderValue( a )); assertEquals( d , props getHeaderValue( c )); props clearHeaders(); header = a=b c=d e=f ; props setHeader(header); assertEquals(3, props headerMap size()); keys = props getHeaderKeys(); assertEquals(3, keys size()); assertTrue(keys contains( a )); assertTrue(keys contains( c )); assertTrue(keys contains( e )); assertEquals( b , props getHeaderValue( a )); assertEquals( d , props getHeaderValue( c )); assertEquals( f , props getHeaderValue( e )); props clearHeaders(); header = a=b c=d e=f ; props setHeader(header); assertEquals(3, props headerMap size()); keys = props getHeaderKeys(); assertEquals(3, keys size()); assertTrue(keys contains( a )); assertTrue(keys contains( c )); assertTrue(keys contains( e )); assertEquals( b , props getHeaderValue( a )); assertEquals( d , props getHeaderValue( c )); assertEquals( f , props getHeaderValue( e )); props clearHeaders(); header = a = ; props setHeader(header); assertEquals(0, props headerMap size()); props clearHeaders(); header = a =b ; props setHeader(header); assertEquals(0, props headerMap size()); props clearHeaders(); header = a= ; props setHeader(header); assertEquals(0, props headerMap size()); props clearHeaders(); header = a=b ; props setHeader(header); assertEquals(1, props headerMap size()); keys = props getHeaderKeys(); assertEquals(1, keys size()); assertTrue(keys contains( a )); assertEquals( b , props getHeaderValue( a )); props clearHeaders(); header = a=b ; props setHeader(header); assertEquals(1, props headerMap size()); keys = props getHeaderKeys(); assertEquals(1, keys size()); assertTrue(keys contains( a )); assertEquals( b , props getHeaderValue( a )); props clearHeaders(); header = ; props setHeader(header); assertEquals(0, props headerMap size()); props clearHeaders(); } }",1.0,
2066,2066,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\ActiveMQMessageAuditTest.,ActiveMQMessageAuditTest,"public class ActiveMQMessageAuditTest extends TestCase { static final Logger LOG = LoggerFactory getLogger(ActiveMQMessageAuditTest class); public ActiveMQMessageAuditTest(String name) { super(name); } public static void main(String[] args) { } protected void setUp() throws Exception { super setUp(); } protected void tearDown() throws Exception { super tearDown(); } public void testIsDuplicateString() { int count = 10000; ActiveMQMessageAudit audit = new ActiveMQMessageAudit(); IdGenerator idGen = new IdGenerator(); List<String> list = new ArrayList<String>(); for (int i = 0; i < count; i++) { String id = idGen generateId(); list add(id); assertFalse(audit isDuplicate(id)); } List<String> windowList = list subList(list size() -1 -audit getAuditDepth(), list size() -1); for (String id windowList) { assertTrue( duplicate, id + id, audit isDuplicate(id)); } } public void testIsDuplicateMessageReference() { int count = 10000; ActiveMQMessageAudit audit = new ActiveMQMessageAudit(); List<MessageReference> list = new ArrayList<MessageReference>(); for (int i = 0; i < count; i++) { ProducerId pid = new ProducerId(); pid setConnectionId( test ); pid setSessionId(0); pid setValue(1); MessageId id = new MessageId(); id setProducerId(pid); id setProducerSequenceId(i); ActiveMQMessage msg = new ActiveMQMessage(); msg setMessageId(id); list add(msg); assertFalse(audit isDuplicate(msg getMessageId())); } List<MessageReference> windowList = list subList(list size() -1 -audit getAuditDepth(), list size() -1); for (MessageReference msg windowList) { assertTrue( duplicate msg + msg, audit isDuplicate(msg)); } } public void testIsInOrderString() { int count = 10000; ActiveMQMessageAudit audit = new ActiveMQMessageAudit(); IdGenerator idGen = new IdGenerator(); List<String> list = new ArrayList<String>(); for (int i = 0; i < count; i++) { String id = idGen generateId(); if (i==0) { assertFalse(audit isDuplicate(id)); assertTrue(audit isInOrder(id)); } if (i > 1 && i%2 != 0) { list add(id); } } for (String id list) { assertFalse(audit isInOrder(id)); assertFalse(audit isDuplicate(id)); } } public void testSerialization() throws Exception { ActiveMQMessageAuditNoSync audit = new ActiveMQMessageAuditNoSync(); byte[] bytes = serialize(audit); LOG debug( Length + bytes length); audit = recover(bytes); List<MessageReference> list = new ArrayList<MessageReference>(); for (int j = 0; j < 1000; j++) { ProducerId pid = new ProducerId(); pid setConnectionId( test ); pid setSessionId(0); pid setValue(j); LOG debug( producer + j); for (int i = 0; i < 1000; i++) { MessageId id = new MessageId(); id setProducerId(pid); id setProducerSequenceId(i); ActiveMQMessage msg = new ActiveMQMessage(); msg setMessageId(id); list add(msg); assertFalse(audit isDuplicate(msg getMessageId() toString())); if (i % 100 == 0) { bytes = serialize(audit); LOG debug( Length + bytes length); audit = recover(bytes); } if (i % 250 == 0) { for (MessageReference message list) { audit rollback(message getMessageId() toString()); } list clear(); bytes = serialize(audit); LOG debug( Length + bytes length); audit = recover(bytes); } } } } protected byte[] serialize(ActiveMQMessageAuditNoSync audit) throws Exception { ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oout = new ObjectOutputStream(baos); oout writeObject(audit); oout flush(); return baos toByteArray(); } protected ActiveMQMessageAuditNoSync recover(byte[] bytes) throws Exception { ObjectInputStream objectIn = new ObjectInputStream(new ByteArrayInputStream(bytes)); return (ActiveMQMessageAuditNoSync)objectIn readObject(); } }",1.0,
2067,2067,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\ActiveMQSslConnectionFactoryTest.,ActiveMQSslConnectionFactoryTest,"public class ActiveMQSslConnectionFactoryTest extends CombinationTestSupport { private static final Log LOG = LogFactory getLog(ActiveMQSslConnectionFactoryTest class); public static final String KEYSTORE TYPE = jks ; public static final String PASSWORD = password ; public static final String SERVER KEYSTORE = src/test/resources/server keystore ; public static final String TRUST KEYSTORE = src/test/resources/client keystore ; private TransportConnector connector; private ActiveMQConnection connection; private BrokerService broker; protected void tearDown() throws Exception { try { connection close(); } catch (Throwable ignore) { } try { broker stop(); } catch (Throwable ignore) { } } public void testCreateTcpConnectionUsingKnownPort() throws Exception { broker = createBroker( tcp ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory( tcp connection = (ActiveMQConnection)cf createConnection(); assertNotNull(connection); connection start(); connection stop(); brokerStop(); } public void testCreateFailoverTcpConnectionUsingKnownPort() throws Exception { broker = createBroker( tcp ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory( failover (tcp connection = (ActiveMQConnection)cf createConnection(); assertNotNull(connection); connection start(); connection stop(); brokerStop(); } public void testCreateSslConnection() throws Exception { String sslUri = ssl broker = createSslBroker(sslUri); assertNotNull(broker); ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory(sslUri); cf setTrustStore( server keystore ); cf setTrustStorePassword( password ); connection = (ActiveMQConnection)cf createConnection(); LOG info( Created client connection ); assertNotNull(connection); connection start(); connection stop(); brokerStop(); } public void testFailoverSslConnection() throws Exception { String sslUri = ssl broker = createSslBroker(sslUri); assertNotNull(broker); ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory( failover ( + sslUri + ) maxReconnectAttempts=4 ); cf setTrustStore( server keystore ); cf setTrustStorePassword( password ); connection = (ActiveMQConnection)cf createConnection(); LOG info( Created client connection ); assertNotNull(connection); connection start(); connection stop(); brokerStop(); } public void testFailoverSslConnectionWithKeyAndTrustManagers() throws Exception { String sslUri = ssl broker = createSslBroker(sslUri); assertNotNull(broker); ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory( failover ( + sslUri + ) maxReconnectAttempts=4 ); cf setKeyAndTrustManagers(getKeyManager(), getTrustManager(), new SecureRandom()); connection = (ActiveMQConnection)cf createConnection(); LOG info( Created client connection ); assertNotNull(connection); connection start(); connection stop(); brokerStop(); } public void testNegativeCreateSslConnectionWithWrongPassword() throws Exception { String sslUri = ssl broker = createSslBroker(sslUri); assertNotNull(broker); ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory(sslUri); cf setTrustStore( server keystore ); cf setTrustStorePassword( wrongPassword ); try { connection = (ActiveMQConnection)cf createConnection(); } catch (javax jms JMSException ignore) { LOG info( Expected java io Exception [ + ignore + ] ); } assertNull(connection); brokerStop(); } public void testNegativeCreateSslConnectionWithWrongCert() throws Exception { String sslUri = ssl broker = createSslBroker(sslUri); assertNotNull(broker); ActiveMQSslConnectionFactory cf = new ActiveMQSslConnectionFactory(sslUri); cf setTrustStore( dummy keystore ); cf setTrustStorePassword( password ); try { connection = (ActiveMQConnection)cf createConnection(); } catch (javax jms JMSException ignore) { LOG info( Expected SSLHandshakeException [ + ignore + ] ); } assertNull(connection); brokerStop(); } protected BrokerService createBroker(String uri) throws Exception { BrokerService service = new BrokerService(); service setPersistent(false); service setUseJmx(false); connector = service addConnector(uri); service start(); return service; } protected BrokerService createSslBroker(String uri) throws Exception { SslBrokerService service = new SslBrokerService(); service setPersistent(false); KeyManager[] km = getKeyManager(); TrustManager[] tm = getTrustManager(); connector = service addSslConnector(uri, km, tm, null); service start(); return service; } protected void brokerStop() throws Exception { broker stop(); } public static TrustManager[] getTrustManager() throws Exception { TrustManager[] trustStoreManagers = null; KeyStore trustedCertStore = KeyStore getInstance(ActiveMQSslConnectionFactoryTest KEYSTORE TYPE); trustedCertStore load(new FileInputStream(ActiveMQSslConnectionFactoryTest TRUST KEYSTORE), null); TrustManagerFactory tmf = TrustManagerFactory getInstance(TrustManagerFactory getDefaultAlgorithm()); tmf init(trustedCertStore); trustStoreManagers = tmf getTrustManagers(); return trustStoreManagers; } public static KeyManager[] getKeyManager() throws Exception { KeyManagerFactory kmf = KeyManagerFactory getInstance(KeyManagerFactory getDefaultAlgorithm()); KeyStore ks = KeyStore getInstance(ActiveMQSslConnectionFactoryTest KEYSTORE TYPE); KeyManager[] keystoreManagers = null; byte[] sslCert = loadClientCredential(ActiveMQSslConnectionFactoryTest SERVER KEYSTORE); if (sslCert != null && sslCert length > 0) { ByteArrayInputStream bin = new ByteArrayInputStream(sslCert); ks load(bin, ActiveMQSslConnectionFactoryTest PASSWORD toCharArray()); kmf init(ks, ActiveMQSslConnectionFactoryTest PASSWORD toCharArray()); keystoreManagers = kmf getKeyManagers(); } return keystoreManagers; } private static byte[] loadClientCredential(String fileName) throws IOException { if (fileName == null) { return null; } FileInputStream in = new FileInputStream(fileName); ByteArrayOutputStream out = new ByteArrayOutputStream(); byte[] buf = new byte[512]; int i = in read(buf); while (i > 0) { out write(buf, 0, i); i = in read(buf); } in close(); return out toByteArray(); } }",1.0,
2070,2070,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\CombinationTestSupport.,CombinationTestSupport,"public abstract class CombinationTestSupport extends AutoFailTestSupport { private static final Logger LOG = LoggerFactory getLogger(CombinationTestSupport class); private HashMap<String, ComboOption> comboOptions = new HashMap<String, ComboOption>(); private boolean combosEvaluated; private Map<String, Object> options; protected File basedir; static protected File basedir(Class clazz) { try { ProtectionDomain protectionDomain = clazz getProtectionDomain(); return new File(new File(protectionDomain getCodeSource() getLocation() getPath()), / ) getCanonicalFile(); } catch (IOException e) { return new File( ); } } static class ComboOption { final String attribute; final LinkedHashSet<Object> values = new LinkedHashSet<Object>(); public ComboOption(String attribute, Collection<Object> options) { this attribute = attribute; this values addAll(options); } } public CombinationTestSupport() { basedir = basedir(getClass()); } public void addCombinationValues(String attribute, Object[] options) { ComboOption co = this comboOptions get(attribute); if (co == null) { this comboOptions put(attribute, new ComboOption(attribute, Arrays asList(options))); } else { co values addAll(Arrays asList(options)); } } public void runBare() throws Throwable { if (combosEvaluated) { super runBare(); } else { CombinationTestSupport[] combinations = getCombinations(); for (int i = 0; i < combinations length; i++) { CombinationTestSupport test = combinations[i]; if (getName() == null || getName() equals(test getName())) { test runBare(); } } } } private void setOptions(Map<String, Object> options) throws NoSuchFieldException, IllegalAccessException { this options = options; for (Iterator<String> iterator = options keySet() iterator(); iterator hasNext();) { String attribute = iterator next(); Object value = options get(attribute); try { Field field = getClass() getField(attribute); field set(this, value); } catch (Throwable e) { try { boolean found = false; String setterName = set + attribute substring(0, 1) toUpperCase() + attribute substring(1); for(Method method getClass() getMethods()) { if (method getName() equals(setterName)) { method invoke(this, value); found = true; break; } } if (!found) { throw new NoSuchMethodError( No setter found for field + attribute); } } catch(Throwable ex) { LOG info( Could not set field + attribute + to value + value + , make sure the field exists and is public or has a setter ); } } } } private CombinationTestSupport[] getCombinations() { try { Method method = getClass() getMethod( initCombos , (Class[])null); method invoke(this, (Object[])null); } catch (Throwable e) { } String name = getName() split( )[0]; String comboSetupMethodName = initCombosFor + Character toUpperCase(name charAt(0)) + name substring(1); try { Method method = getClass() getMethod(comboSetupMethodName, (Class[])null); method invoke(this, (Object[])null); } catch (Throwable e) { } try { ArrayList<HashMap<String, Object>> expandedOptions = new ArrayList<HashMap<String, Object>>(); expandCombinations(new ArrayList<ComboOption>(comboOptions values()), expandedOptions); if (expandedOptions isEmpty()) { combosEvaluated = true; return new CombinationTestSupport[] {this}; } else { ArrayList<CombinationTestSupport> result = new ArrayList<CombinationTestSupport>(); for (Iterator<HashMap<String, Object>> iter = expandedOptions iterator(); iter hasNext();) { CombinationTestSupport combo = (CombinationTestSupport)TestSuite createTest(getClass(), name); combo combosEvaluated = true; combo setOptions(iter next()); result add(combo); } CombinationTestSupport rc[] = new CombinationTestSupport[result size()]; result toArray(rc); return rc; } } catch (Throwable e) { combosEvaluated = true; return new CombinationTestSupport[] {this}; } } private void expandCombinations(List<ComboOption> optionsLeft, List<HashMap<String, Object>> expandedCombos) { if (!optionsLeft isEmpty()) { HashMap<String, Object> map; if (comboOptions size() == optionsLeft size()) { map = new HashMap<String, Object>(); expandedCombos add(map); } else { map = expandedCombos get(expandedCombos size() - 1); } LinkedList<ComboOption> l = new LinkedList<ComboOption>(optionsLeft); ComboOption comboOption = l removeLast(); int i = 0; for (Iterator<Object> iter = comboOption values iterator(); iter hasNext();) { Object value = iter next(); if (i != 0) { map = new HashMap<String, Object>(map); expandedCombos add(map); } map put(comboOption attribute, value); expandCombinations(l, expandedCombos); i++; } } } public static Test suite(Class< extends CombinationTestSupport> clazz) { TestSuite suite = new TestSuite(); ArrayList<String> names = new ArrayList<String>(); Method[] methods = clazz getMethods(); for (int i = 0; i < methods length; i++) { String name = methods[i] getName(); if (names contains(name) || !isPublicTestMethod(methods[i])) { continue; } names add(name); Test test = TestSuite createTest(clazz, name); if (test instanceof CombinationTestSupport) { CombinationTestSupport[] combinations = ((CombinationTestSupport)test) getCombinations(); for (int j = 0; j < combinations length; j++) { suite addTest(combinations[j]); } } else { suite addTest(test); } } return suite; } private static boolean isPublicTestMethod(Method m) { return isTestMethod(m) && Modifier isPublic(m getModifiers()); } private static boolean isTestMethod(Method m) { String name = m getName(); Class< >[] parameters = m getParameterTypes(); Class< > returnType = m getReturnType(); return parameters length == 0 && name startsWith( test ) && returnType equals(Void TYPE); } public String getName() { return getName(false); } public String getName(boolean original) { if (options != null && !original) { return super getName() + + options; } return super getName(); } }",1.0,
2071,2071,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\CombinationTestSupport.,ComboOption,"static class ComboOption { final String attribute; final LinkedHashSet<Object> values = new LinkedHashSet<Object>(); public ComboOption(String attribute, Collection<Object> options) { this attribute = attribute; this values addAll(options); } }",1.0,
2072,2072,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\ConnectionCleanupTest.,ConnectionCleanupTest,"public class ConnectionCleanupTest extends TestCase { private ActiveMQConnection connection; protected void setUp() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( vm connection = (ActiveMQConnection)factory createConnection(); } protected void tearDown() throws Exception { connection close(); } public void testChangeClientID() throws JMSException { connection setClientID( test ); connection createSession(false, Session AUTO ACKNOWLEDGE); try { connection setClientID( test ); } catch (JMSException e) { } connection cleanup(); connection setClientID( test ); connection createSession(false, Session AUTO ACKNOWLEDGE); try { connection setClientID( test ); } catch (JMSException e) { } } }",1.0,
2073,2073,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\ConsumerReceiveWithTimeoutTest.,ConsumerReceiveWithTimeoutTest,"public class ConsumerReceiveWithTimeoutTest extends TestSupport { private Connection connection; protected void setUp() throws Exception { super setUp(); connection = createConnection(); } protected void tearDown() throws Exception { if (connection != null) { connection close(); connection = null; } super tearDown(); } public void testConsumerReceiveBeforeMessageDispatched() throws JMSException { connection start(); final Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); final Queue queue = session createQueue( test ); Thread t = new Thread() { public void run() { try { Thread sleep(10000); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Hello )); } catch (Exception e) { e printStackTrace(); } } }; t start(); MessageConsumer consumer = session createConsumer(queue); Message msg = consumer receive(60000); assertNotNull(msg); session close(); } }",1.0,
2074,2074,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\CreateConsumerButDontStartConnectionWarningTest.,CreateConsumerButDontStartConnectionWarningTest,"public class CreateConsumerButDontStartConnectionWarningTest extends JmsQueueSendReceiveTest { private static final transient Logger LOG = LoggerFactory getLogger(CreateConsumerButDontStartConnectionWarningTest class); Override protected void startConnection() throws JMSException { } Override protected void assertMessagesAreReceived() throws JMSException { try { Thread sleep(1000); } catch (InterruptedException e) { LOG warn( Caught + e, e); } } }",1.0,
2075,2075,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\EmbeddedBrokerAndConnectionTestSupport.,EmbeddedBrokerAndConnectionTestSupport,public abstract class EmbeddedBrokerAndConnectionTestSupport extends EmbeddedBrokerTestSupport { protected Connection connection; Override protected void setUp() throws Exception { super setUp(); connection = createConnection(); connection start(); } Override protected void tearDown() throws Exception { if (connection != null) { connection close(); } super tearDown(); } },1.0,
2079,2079,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\ExpiryHogTest.,ExpiryHogTest,"public class ExpiryHogTest extends JmsMultipleClientsTestSupport { boolean sleep = false; int numMessages = 4; public void testImmediateDispatchWhenCacheDisabled() throws Exception { ConnectionFactory f = createConnectionFactory(); destination = createDestination(); startConsumers(f, destination); sleep = true; this startProducers(f, destination, numMessages); allMessagesList assertMessagesReceived(numMessages); } protected BrokerService createBroker() throws Exception { BrokerService bs = new BrokerService(); bs setDeleteAllMessagesOnStartup(true); PolicyMap policyMap = new PolicyMap(); PolicyEntry defaultEntry = new PolicyEntry(); defaultEntry setExpireMessagesPeriod(5000); defaultEntry setUseCache(false); policyMap setDefaultEntry(defaultEntry); bs setDestinationPolicy(policyMap); KahaDBPersistenceAdapter ad = (KahaDBPersistenceAdapter) bs getPersistenceAdapter(); ad setConcurrentStoreAndDispatchQueues(true); return bs; } protected TextMessage createTextMessage(Session session, String initText) throws Exception { if (sleep) { TimeUnit SECONDS sleep(10); } TextMessage msg = super createTextMessage(session, initText); msg setJMSExpiration(4000); return msg; } Override protected void setUp() throws Exception { autoFail = false; persistent = true; super setUp(); } }",1.0,
2081,2081,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsAutoAckTest.,JmsAutoAckTest,"public class JmsAutoAckTest extends TestSupport { private Connection connection; protected void setUp() throws Exception { super setUp(); connection = createConnection(); } protected void tearDown() throws Exception { if (connection != null) { connection close(); connection = null; } super tearDown(); } public void testAckedMessageAreConsumed() throws JMSException { connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Queue queue = session createQueue( test ); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Hello )); MessageConsumer consumer = session createConsumer(queue); Message msg = consumer receive(1000); assertNotNull(msg); session close(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); consumer = session createConsumer(queue); msg = consumer receive(1000); assertNull(msg); session close(); } }",1.0,
2083,2083,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsClientAckListenerTest.,JmsClientAckListenerTest,"public class JmsClientAckListenerTest extends TestSupport implements MessageListener { private Connection connection; private boolean dontAck; protected void setUp() throws Exception { super setUp(); connection = createConnection(); } protected void tearDown() throws Exception { if (connection != null) { connection close(); connection = null; } super tearDown(); } public void testAckedMessageAreConsumed() throws Exception { connection start(); Session session = connection createSession(false, Session CLIENT ACKNOWLEDGE); Queue queue = session createQueue( test ); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Hello )); MessageConsumer consumer = session createConsumer(queue); consumer setMessageListener(this); Thread sleep(10000); session close(); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createConsumer(queue); Message msg = consumer receive(1000); assertNull(msg); session close(); } public void testUnAckedMessageAreNotConsumedOnSessionClose() throws Exception { connection start(); dontAck = true; Session session = connection createSession(false, Session CLIENT ACKNOWLEDGE); Queue queue = session createQueue( test ); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Hello )); MessageConsumer consumer = session createConsumer(queue); consumer setMessageListener(this); session close(); Thread sleep(10000); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createConsumer(queue); Message msg = consumer receive(2000); assertNotNull(msg); msg acknowledge(); session close(); } public void onMessage(Message message) { assertNotNull(message); if (!dontAck) { try { message acknowledge(); } catch (Exception e) { e printStackTrace(); } } } }",1.0,
2084,2084,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsClientAckTest.,JmsClientAckTest,"public class JmsClientAckTest extends TestSupport { private Connection connection; protected void setUp() throws Exception { super setUp(); connection = createConnection(); } protected void tearDown() throws Exception { if (connection != null) { connection close(); connection = null; } super tearDown(); } public void testAckedMessageAreConsumed() throws JMSException { connection start(); Session session = connection createSession(false, Session CLIENT ACKNOWLEDGE); Queue queue = session createQueue(getQueueName()); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Hello )); MessageConsumer consumer = session createConsumer(queue); Message msg = consumer receive(1000); assertNotNull(msg); msg acknowledge(); session close(); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createConsumer(queue); msg = consumer receive(1000); assertNull(msg); session close(); } public void testLastMessageAcked() throws JMSException { connection start(); Session session = connection createSession(false, Session CLIENT ACKNOWLEDGE); Queue queue = session createQueue(getQueueName()); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Hello )); producer send(session createTextMessage( Hello2 )); producer send(session createTextMessage( Hello3 )); MessageConsumer consumer = session createConsumer(queue); Message msg = consumer receive(1000); assertNotNull(msg); msg = consumer receive(1000); assertNotNull(msg); msg = consumer receive(1000); assertNotNull(msg); msg acknowledge(); session close(); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createConsumer(queue); msg = consumer receive(1000); assertNull(msg); session close(); } public void testUnAckedMessageAreNotConsumedOnSessionClose() throws JMSException { connection start(); Session session = connection createSession(false, Session CLIENT ACKNOWLEDGE); Queue queue = session createQueue(getQueueName()); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Hello )); MessageConsumer consumer = session createConsumer(queue); Message msg = consumer receive(1000); assertNotNull(msg); session close(); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createConsumer(queue); msg = consumer receive(2000); assertNotNull(msg); msg acknowledge(); session close(); } protected String getQueueName() { return getClass() getName() + + getName(); } }",1.0,
2088,2088,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JMSConsumerTest.,AckAndClose,"final class AckAndClose implements Runnable { private Message message; public AckAndClose(Message m) { this message = m; } public void run() { try { int count = counter incrementAndGet(); if (count == 590) { consumer close(); closeDone countDown(); } if (count % 200 == 0) { message acknowledge(); } } catch (Exception e) { LOG error( Exception on close or ack , e); exceptions put(Thread currentThread(), e); } }",1.0,
2089,2089,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsCreateConsumerInOnMessageTest.,JmsCreateConsumerInOnMessageTest,"public class JmsCreateConsumerInOnMessageTest extends TestSupport implements MessageListener { private Connection connection; private Session publisherSession; private Session consumerSession; private MessageConsumer consumer; private MessageConsumer testConsumer; private MessageProducer producer; private Topic topic; private Object lock = new Object(); protected void setUp() throws Exception { super setUp(); super topic = true; connection = createConnection(); connection setClientID( connection + getSubject()); publisherSession = connection createSession(false, Session AUTO ACKNOWLEDGE); consumerSession = connection createSession(false, Session AUTO ACKNOWLEDGE); topic = (Topic)super createDestination( Test Topic ); consumer = consumerSession createConsumer(topic); consumer setMessageListener(this); producer = publisherSession createProducer(topic); connection start(); } protected void tearDown() throws Exception { super tearDown(); connection close(); } public void testCreateConsumer() throws Exception { Message msg = super createMessage(); producer send(msg); if (testConsumer == null) { synchronized (lock) { lock wait(3000); } } assertTrue(testConsumer != null); } public void onMessage(Message message) { try { testConsumer = consumerSession createConsumer(topic); consumerSession createProducer(topic); synchronized (lock) { lock notify(); } } catch (Exception ex) { ex printStackTrace(); assertTrue(false); } } }",1.0,
2090,2090,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsDurableQueueWildcardSendReceiveTest.,JmsDurableQueueWildcardSendReceiveTest,public class JmsDurableQueueWildcardSendReceiveTest extends JmsTopicSendReceiveTest { protected void setUp() throws Exception { topic = false; deliveryMode = DeliveryMode PERSISTENT; super setUp(); } protected String getConsumerSubject() { return FOO > ; } protected String getProducerSubject() { return FOO BAR HUMBUG ; } },1.0,
2091,2091,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JMSDurableTopicRedeliverTest.,JMSDurableTopicRedeliverTest,"public class JMSDurableTopicRedeliverTest extends JmsTopicRedeliverTest { private static final Logger LOG = LoggerFactory getLogger(JMSDurableTopicRedeliverTest class); protected void setUp() throws Exception { durable = true; super setUp(); } public void testRedeliverNewSession() throws Exception { String text = TEST + System currentTimeMillis(); Message sendMessage = session createTextMessage(text); if (verbose) { LOG info( About to send a message + sendMessage + with text + text); } producer send(producerDestination, sendMessage); Message unackMessage = consumer receive(1000); assertNotNull(unackMessage); String unackId = unackMessage getJMSMessageID(); assertEquals(((TextMessage)unackMessage) getText(), text); assertFalse(unackMessage getJMSRedelivered()); assertEquals(unackMessage getIntProperty( JMSXDeliveryCount ), 1); consumeSession close(); consumer close(); consumeSession = connection createSession(false, Session CLIENT ACKNOWLEDGE); consumer = createConsumer(); Message ackMessage = consumer receive(1000); assertNotNull(ackMessage); ackMessage acknowledge(); String ackId = ackMessage getJMSMessageID(); assertEquals(((TextMessage)ackMessage) getText(), text); assertTrue(ackMessage getJMSRedelivered()); assertEquals(ackMessage getIntProperty( JMSXDeliveryCount ), 2); assertEquals(unackId, ackId); consumeSession close(); consumer close(); consumeSession = connection createSession(false, Session CLIENT ACKNOWLEDGE); consumer = createConsumer(); assertNull(consumer receive(1000)); } }",1.0,
2092,2092,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsDurableTopicSelectorTest.,JmsDurableTopicSelectorTest,public class JmsDurableTopicSelectorTest extends JmsTopicSelectorTest { public void setUp() throws Exception { durable = true; super setUp(); } },1.0,
2093,2093,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsDurableTopicSendReceiveTest.,JmsDurableTopicSendReceiveTest,"public class JmsDurableTopicSendReceiveTest extends JmsTopicSendReceiveTest { private static final Logger LOG = LoggerFactory getLogger(JmsDurableTopicSendReceiveTest class); protected Connection connection2; protected Session session2; protected Session consumeSession2; protected MessageConsumer consumer2; protected MessageProducer producer2; protected Destination consumerDestination2; protected Destination producerDestination2; protected void setUp() throws Exception { this durable = true; super setUp(); } public void testSendWhileClosed() throws Exception { connection2 = createConnection(); connection2 setClientID( test ); connection2 start(); session2 = connection2 createSession(false, Session AUTO ACKNOWLEDGE); producer2 = session2 createProducer(null); producer2 setDeliveryMode(deliveryMode); producerDestination2 = session2 createTopic(getProducerSubject() + 2 ); Thread sleep(1000); consumeSession2 = connection2 createSession(false, Session AUTO ACKNOWLEDGE); consumerDestination2 = session2 createTopic(getConsumerSubject() + 2 ); consumer2 = consumeSession2 createDurableSubscriber((Topic)consumerDestination2, getName()); Thread sleep(1000); consumer2 close(); TextMessage message = session2 createTextMessage( test ); message setStringProperty( test , test ); message setJMSType( test ); producer2 send(producerDestination2, message); LOG info( Creating durable consumer ); consumer2 = consumeSession2 createDurableSubscriber((Topic)consumerDestination2, getName()); Message msg = consumer2 receive(1000); assertNotNull(msg); assertEquals(((TextMessage)msg) getText(), test ); assertEquals(msg getJMSType(), test ); assertEquals(msg getStringProperty( test ), test ); connection2 stop(); connection2 close(); } }",1.0,
2094,2094,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsDurableTopicTransactionTest.,JmsDurableTopicTransactionTest,public class JmsDurableTopicTransactionTest extends JmsTopicTransactionTest { protected JmsResourceProvider getJmsResourceProvider() { JmsResourceProvider provider = new JmsResourceProvider(); provider setTopic(true); provider setDeliveryMode(DeliveryMode PERSISTENT); provider setClientID(getClass() getName()); provider setDurableName(getName()); return provider; } },1.0,
2095,2095,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsDurableTopicWildcardSendReceiveTest.,JmsDurableTopicWildcardSendReceiveTest,public class JmsDurableTopicWildcardSendReceiveTest extends JmsTopicSendReceiveTest { protected void setUp() throws Exception { topic = true; durable = true; deliveryMode = DeliveryMode PERSISTENT; super setUp(); } protected String getConsumerSubject() { return FOO > ; } protected String getProducerSubject() { return FOO BAR HUMBUG ; } },1.0,
2101,2101,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsMultipleBrokersTestSupport.,BrokerItem,"public class BrokerItem { public BrokerService broker; public ActiveMQConnectionFactory factory; public List<Connection> connections; public Map<MessageConsumer, MessageIdList> consumers; public MessageIdList allMessages = new MessageIdList(); public boolean persistent; private IdGenerator id; public BrokerItem(BrokerService broker) throws Exception { this broker = broker; factory = new ActiveMQConnectionFactory(broker getVmConnectorURI()); consumers = Collections synchronizedMap(new HashMap<MessageConsumer, MessageIdList>()); connections = Collections synchronizedList(new ArrayList<Connection>()); allMessages setVerbose(verbose); id = new IdGenerator(broker getBrokerName() + ); } public Connection createConnection() throws Exception { Connection conn = factory createConnection(); conn setClientID(id generateId()); connections add(conn); return conn; } public MessageConsumer createConsumer(Destination dest) throws Exception { return createConsumer(dest, null, null); } public MessageConsumer createConsumer(Destination dest, String messageSelector) throws Exception { return createConsumer(dest, null, messageSelector); } public MessageConsumer createConsumer(Destination dest, CountDownLatch latch, String messageSelector) throws Exception { Connection c = createConnection(); c start(); Session s = c createSession(false, Session AUTO ACKNOWLEDGE); return createConsumerWithSession(dest, s, latch, messageSelector); } public MessageConsumer createConsumerWithSession(Destination dest, Session sess) throws Exception { return createConsumerWithSession(dest, sess, null, null); } public MessageConsumer createConsumerWithSession(Destination dest, Session sess, CountDownLatch latch, String messageSelector) throws Exception { MessageConsumer client = sess createConsumer(dest, messageSelector); MessageIdList messageIdList = new MessageIdList(); messageIdList setCountDownLatch(latch); messageIdList setParent(allMessages); client setMessageListener(messageIdList); consumers put(client, messageIdList); return client; } public QueueBrowser createBrowser(Destination dest) throws Exception { Connection c = createConnection(); c start(); Session s = c createSession(false, Session AUTO ACKNOWLEDGE); return s createBrowser((Queue)dest); } public MessageConsumer createDurableSubscriber(Topic dest, String name) throws Exception { Connection c = createConnection(); c start(); Session s = c createSession(false, Session AUTO ACKNOWLEDGE); return createDurableSubscriber(dest, s, name); } public MessageConsumer createDurableSubscriber(Topic dest, Session sess, String name) throws Exception { MessageConsumer client = sess createDurableSubscriber((Topic)dest, name); MessageIdList messageIdList = new MessageIdList(); messageIdList setParent(allMessages); client setMessageListener(messageIdList); consumers put(client, messageIdList); return client; } public MessageIdList getAllMessages() { return allMessages; } public MessageIdList getConsumerMessages(MessageConsumer consumer) { return consumers get(consumer); } public MessageProducer createProducer(Destination dest) throws Exception { Connection c = createConnection(); c start(); Session s = c createSession(false, Session AUTO ACKNOWLEDGE); return createProducer(dest, s); } public MessageProducer createProducer(Destination dest, Session sess) throws Exception { MessageProducer client = sess createProducer(dest); client setDeliveryMode(persistent DeliveryMode PERSISTENT DeliveryMode NON PERSISTENT); return client; } public void destroy() throws Exception { while (!connections isEmpty()) { Connection c = connections remove(0); try { c close(); } catch (ConnectionClosedException e) { } catch (JMSException e) { } } broker stop(); broker waitUntilStopped(); consumers clear(); broker = null; connections = null; consumers = null; factory = null; } }",1.0,
2105,2105,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JMSQueueRedeliverTest.,JMSQueueRedeliverTest,public class JMSQueueRedeliverTest extends JmsTopicRedeliverTest { protected void setUp() throws Exception { topic = false; super setUp(); } },1.0,
2106,2106,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsQueueRequestReplyTest.,JmsQueueRequestReplyTest,public class JmsQueueRequestReplyTest extends JmsTopicRequestReplyTest { protected void setUp() throws Exception { topic = false; super setUp(); } },1.0,
2107,2107,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsQueueSelectorTest.,JmsQueueSelectorTest,public class JmsQueueSelectorTest extends JmsTopicSelectorTest { public void setUp() throws Exception { topic = false; super setUp(); } },1.0,
2108,2108,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsQueueSendReceiveTest.,JmsQueueSendReceiveTest,public class JmsQueueSendReceiveTest extends JmsTopicSendReceiveTest { protected void setUp() throws Exception { topic = false; super setUp(); } },1.0,
2109,2109,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest.,JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest,public class JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest extends JmsQueueSendReceiveTwoConnectionsTest { private static final Logger LOG = LoggerFactory getLogger(JmsQueueSendReceiveTwoConnectionsStartBeforeBrokerTest class); private Queue<Exception> errors = new ConcurrentLinkedQueue<Exception>(); private int delayBeforeStartingBroker = 1000; private BrokerService broker; public void startBroker() { LOG info( Lets wait + delayBeforeStartingBroker + millis before creating the broker ); try { Thread sleep(delayBeforeStartingBroker); } catch (InterruptedException e) { e printStackTrace(); } LOG info( Now starting the broker ); try { broker = new BrokerService(); broker setPersistent(false); broker addConnector( tcp broker start(); } catch (Exception e) { LOG info( Caught + e); errors add(e); } } protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory( failover (tcp } protected void setUp() throws Exception { setAutoFail(true); Thread thread = new Thread() { public void run() { startBroker(); } }; thread start(); super setUp(); } protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } if (!errors isEmpty()) { Exception e = errors remove(); throw e; } } },1.0,
2110,2110,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsQueueSendReceiveTwoConnectionsTest.,JmsQueueSendReceiveTwoConnectionsTest,public class JmsQueueSendReceiveTwoConnectionsTest extends JmsTopicSendReceiveWithTwoConnectionsTest { protected void setUp() throws Exception { topic = false; super setUp(); } },1.0,
2111,2111,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsQueueSendReceiveUsingTwoSessionsTest.,JmsQueueSendReceiveUsingTwoSessionsTest,public class JmsQueueSendReceiveUsingTwoSessionsTest extends JmsQueueSendReceiveTest { protected void setUp() throws Exception { useSeparateSession = true; super setUp(); } },1.0,
2115,2115,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsRedeliveredTest.,PersistentCase,public static final class PersistentCase extends JmsRedeliveredTest { protected int getDeliveryMode() { return DeliveryMode PERSISTENT; } },1.0,
2116,2116,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsRedeliveredTest.,TransientCase,public static final class TransientCase extends JmsRedeliveredTest { protected int getDeliveryMode() { return DeliveryMode NON PERSISTENT; } },1.0,
2117,2117,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsRollbackRedeliveryTest.,JmsRollbackRedeliveryTest,"public class JmsRollbackRedeliveryTest extends AutoFailTestSupport { protected static final Logger LOG = LoggerFactory getLogger(JmsRollbackRedeliveryTest class); final int nbMessages = 10; final String destinationName = Destination ; final String brokerUrl = vm boolean consumerClose = true; boolean rollback = true; BrokerService broker; public void setUp() throws Exception { setAutoFail(true); super setUp(); broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(false); broker start(); } public void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } } public void testRedelivery() throws Exception { doTestRedelivery(brokerUrl, false); } public void testRedeliveryWithInterleavedProducer() throws Exception { doTestRedelivery(brokerUrl, true); } public void testRedeliveryWithPrefetch0() throws Exception { doTestRedelivery(brokerUrl + jms prefetchPolicy queuePrefetch=0 , true); } public void testRedeliveryWithPrefetch1() throws Exception { doTestRedelivery(brokerUrl + jms prefetchPolicy queuePrefetch=1 , true); } public void doTestRedelivery(String brokerUrl, boolean interleaveProducer) throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl); Connection connection = connectionFactory createConnection(); connection start(); if (interleaveProducer) { populateDestinationWithInterleavedProducer(nbMessages, destinationName, connection); } else { populateDestination(nbMessages, destinationName, connection); } { AtomicInteger received = new AtomicInteger(); Map<String, Boolean> rolledback = new ConcurrentHashMap<String, Boolean>(); while (received get() < nbMessages) { Session session = connection createSession(true, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(destinationName); MessageConsumer consumer = session createConsumer(destination); TextMessage msg = (TextMessage) consumer receive(6000000); if (msg != null) { if (msg != null && rolledback put(msg getText(), Boolean TRUE) != null) { LOG info( Received message + msg getText() + ( + received getAndIncrement() + ) + msg getJMSMessageID()); assertTrue(msg getJMSRedelivered()); assertEquals(2, msg getLongProperty( JMSXDeliveryCount )); session commit(); } else { LOG info( Rollback message + msg getText() + id + msg getJMSMessageID()); assertFalse( should not have redelivery flag set, id + msg getJMSMessageID(), msg getJMSRedelivered()); session rollback(); } } consumer close(); session close(); } } } public void testRedeliveryOnSingleConsumer() throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl); Connection connection = connectionFactory createConnection(); connection start(); populateDestinationWithInterleavedProducer(nbMessages, destinationName, connection); { AtomicInteger received = new AtomicInteger(); Map<String, Boolean> rolledback = new ConcurrentHashMap<String, Boolean>(); Session session = connection createSession(true, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(destinationName); MessageConsumer consumer = session createConsumer(destination); while (received get() < nbMessages) { TextMessage msg = (TextMessage) consumer receive(6000000); if (msg != null) { if (msg != null && rolledback put(msg getText(), Boolean TRUE) != null) { LOG info( Received message + msg getText() + ( + received getAndIncrement() + ) + msg getJMSMessageID()); assertTrue(msg getJMSRedelivered()); session commit(); } else { LOG info( Rollback message + msg getText() + id + msg getJMSMessageID()); session rollback(); } } } consumer close(); session close(); } } public void testRedeliveryOnSingleSession() throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl); Connection connection = connectionFactory createConnection(); connection start(); populateDestination(nbMessages, destinationName, connection); { AtomicInteger received = new AtomicInteger(); Map<String, Boolean> rolledback = new ConcurrentHashMap<String, Boolean>(); Session session = connection createSession(true, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(destinationName); while (received get() < nbMessages) { MessageConsumer consumer = session createConsumer(destination); TextMessage msg = (TextMessage) consumer receive(6000000); if (msg != null) { if (msg != null && rolledback put(msg getText(), Boolean TRUE) != null) { LOG info( Received message + msg getText() + ( + received getAndIncrement() + ) + msg getJMSMessageID()); assertTrue(msg getJMSRedelivered()); session commit(); } else { LOG info( Rollback message + msg getText() + id + msg getJMSMessageID()); session rollback(); } } consumer close(); } session close(); } } public void testValidateRedeliveryCountOnRollback() throws Exception { final int numMessages = 1; ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl); Connection connection = connectionFactory createConnection(); connection start(); populateDestination(numMessages, destinationName, connection); { AtomicInteger received = new AtomicInteger(); final int maxRetries = new RedeliveryPolicy() getMaximumRedeliveries(); while (received get() < maxRetries) { Session session = connection createSession(true, Session SESSION TRANSACTED); Destination destination = session createQueue(destinationName); MessageConsumer consumer = session createConsumer(destination); TextMessage msg = (TextMessage) consumer receive(1000); if (msg != null) { LOG info( Received message + msg getText() + ( + received getAndIncrement() + ) + msg getJMSMessageID()); assertEquals( redelivery property matches deliveries , received get(), msg getLongProperty( JMSXDeliveryCount )); session rollback(); } session close(); } consumeMessage(connection, maxRetries + 1); } } public void testValidateRedeliveryCountOnRollbackWithPrefetch0() throws Exception { final int numMessages = 1; ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl + jms prefetchPolicy queuePrefetch=0 ); Connection connection = connectionFactory createConnection(); connection start(); populateDestination(numMessages, destinationName, connection); { AtomicInteger received = new AtomicInteger(); final int maxRetries = new RedeliveryPolicy() getMaximumRedeliveries(); while (received get() < maxRetries) { Session session = connection createSession(true, Session SESSION TRANSACTED); Destination destination = session createQueue(destinationName); MessageConsumer consumer = session createConsumer(destination); TextMessage msg = (TextMessage) consumer receive(1000); if (msg != null) { LOG info( Received message + msg getText() + ( + received getAndIncrement() + ) + msg getJMSMessageID()); assertEquals( redelivery property matches deliveries , received get(), msg getLongProperty( JMSXDeliveryCount )); session rollback(); } session close(); } consumeMessage(connection, maxRetries + 1); } } private void consumeMessage(Connection connection, final int deliveryCount) throws JMSException { Session session = connection createSession(true, Session SESSION TRANSACTED); Destination destination = session createQueue(destinationName); MessageConsumer consumer = session createConsumer(destination); TextMessage msg = (TextMessage) consumer receive(1000); assertNotNull(msg); assertEquals( redelivery property matches deliveries , deliveryCount, msg getLongProperty( JMSXDeliveryCount )); session commit(); session close(); } public void testRedeliveryPropertyWithNoRollback() throws Exception { final int numMessages = 1; ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(brokerUrl); Connection connection = connectionFactory createConnection(); connection start(); populateDestination(numMessages, destinationName, connection); connection close(); { AtomicInteger received = new AtomicInteger(); final int maxRetries = new RedeliveryPolicy() getMaximumRedeliveries(); while (received get() < maxRetries) { connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(true, Session SESSION TRANSACTED); Destination destination = session createQueue(destinationName); MessageConsumer consumer = session createConsumer(destination); TextMessage msg = (TextMessage) consumer receive(2000); if (msg != null) { LOG info( Received message + msg getText() + ( + received getAndIncrement() + ) + msg getJMSMessageID()); assertEquals( redelivery property matches deliveries , received get(), msg getLongProperty( JMSXDeliveryCount )); } session close(); connection close(); } connection = connectionFactory createConnection(); connection start(); consumeMessage(connection, maxRetries + 1); } } private void populateDestination(final int nbMessages, final String destinationName, Connection connection) throws JMSException { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(destinationName); MessageProducer producer = session createProducer(destination); for (int i = 1; i <= nbMessages; i++) { producer send(session createTextMessage( <hello id= + i + /> )); } producer close(); session close(); } private void populateDestinationWithInterleavedProducer(final int nbMessages, final String destinationName, Connection connection) throws JMSException { Session session1 = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination1 = session1 createQueue(destinationName); MessageProducer producer1 = session1 createProducer(destination1); Session session2 = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination2 = session2 createQueue(destinationName); MessageProducer producer2 = session2 createProducer(destination2); for (int i = 1; i <= nbMessages; i++) { if (i%2 == 0) { producer1 send(session1 createTextMessage( <hello id= + i + /> )); } else { producer2 send(session2 createTextMessage( <hello id= + i + /> )); } } producer1 close(); session1 close(); producer2 close(); session2 close(); } }",1.0,
2124,2124,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsTopicCompositeSendReceiveTest.,JmsTopicCompositeSendReceiveTest,"public class JmsTopicCompositeSendReceiveTest extends JmsTopicSendReceiveTest { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(JmsTopicCompositeSendReceiveTest class); Destination consumerDestination2; MessageConsumer consumer2; protected void setUp() throws Exception { deliveryMode = DeliveryMode NON PERSISTENT; super setUp(); consumerDestination2 = consumeSession createTopic( FOO BAR HUMBUG2 ); LOG info( Created consumer destination + consumerDestination2 + of type + consumerDestination2 getClass()); if (durable) { LOG info( Creating durable consumer ); consumer2 = consumeSession createDurableSubscriber((Topic) consumerDestination2, getName()); } else { consumer2 = consumeSession createConsumer(consumerDestination2); } } protected String getConsumerSubject() { return FOO BAR HUMBUG ; } protected String getProducerSubject() { return FOO BAR HUMBUG,FOO BAR HUMBUG2 ; } public void testSendReceive() throws Exception { super testSendReceive(); messages clear(); consumer2 setMessageListener(this); assertMessagesAreReceived(); LOG info( + data length + messages(s) received, closing down connections ); } }",1.0,
2128,2128,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsTopicSendReceiveSubscriberTest.,JmsTopicSendReceiveSubscriberTest,"public class JmsTopicSendReceiveSubscriberTest extends JmsTopicSendReceiveTest { protected MessageConsumer createConsumer() throws JMSException { if (durable) { return super createConsumer(); } else { TopicSession topicSession = (TopicSession)session; return topicSession createSubscriber((Topic)consumerDestination, null, false); } } }",1.0,
2129,2129,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsTopicSendReceiveTest.,JmsTopicSendReceiveTest,"public class JmsTopicSendReceiveTest extends JmsSendReceiveTestSupport { private static final Logger LOG = LoggerFactory getLogger(JmsTopicSendReceiveTest class); protected Connection connection; protected void setUp() throws Exception { super setUp(); connectionFactory = createConnectionFactory(); connection = createConnection(); if (durable) { connection setClientID(getClass() getName()); } LOG info( Created connection + connection); session = connection createSession(false, Session AUTO ACKNOWLEDGE); LOG info( Created session + session); producer = session createProducer(null); producer setDeliveryMode(deliveryMode); LOG info( Created producer + producer + delivery mode = + (deliveryMode == DeliveryMode PERSISTENT PERSISTENT NON PERSISTENT )); if (topic) { consumerDestination = session createTopic(getConsumerSubject()); producerDestination = session createTopic(getProducerSubject()); } else { consumerDestination = session createQueue(getConsumerSubject()); producerDestination = session createQueue(getProducerSubject()); } LOG info( Created consumer destination + consumerDestination + of type + consumerDestination getClass()); LOG info( Created producer destination + producerDestination + of type + producerDestination getClass()); consumer = createConsumer(); consumer setMessageListener(this); connection start(); } protected MessageConsumer createConsumer() throws JMSException { if (durable) { LOG info( Creating durable consumer ); return session createDurableSubscriber((Topic)consumerDestination, getName()); } return session createConsumer(consumerDestination); } protected void tearDown() throws Exception { LOG info( Dumping stats ); LOG info( Closing down connection ); session close(); connection close(); } }",1.0,
2131,2131,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsTopicSendReceiveWithTwoConnectionsWithJMXTest.,JmsTopicSendReceiveWithTwoConnectionsWithJMXTest,public class JmsTopicSendReceiveWithTwoConnectionsWithJMXTest extends JmsTopicSendReceiveWithTwoConnectionsTest { protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory( vm } },1.0,
2132,2132,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsTopicSendSameMessageTest.,JmsTopicSendSameMessageTest,"public class JmsTopicSendSameMessageTest extends JmsTopicSendReceiveWithTwoConnectionsTest { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(JmsTopicSendSameMessageTest class); public void testSendReceive() throws Exception { messages clear(); TextMessage message = session createTextMessage(); for (int i = 0; i < data length; i++) { message setText(data[i]); message setStringProperty( stringProperty , data[i]); message setIntProperty( intProperty , i); if (verbose) { LOG info( About to send a message + message + with text + data[i]); } producer send(producerDestination, message); } assertMessagesAreReceived(); } }",1.0,
2133,2133,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsTopicTransactionTest.,JmsTopicTransactionTest,public class JmsTopicTransactionTest extends JmsTransactionTestSupport { protected JmsResourceProvider getJmsResourceProvider() { JmsResourceProvider p = new JmsResourceProvider(); p setTopic(true); p setDurableName( testsub ); p setClientID( testclient ); return p; } },1.0,
2136,2136,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JMSXAConsumerTest.,JMSXAConsumerTest,public class JMSXAConsumerTest extends JMSConsumerTest { public static Test suite() { return suite(JMSXAConsumerTest class); } Override protected ConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQXAConnectionFactory( vm } public void testPrefetch1MessageNotDispatched() throws Exception { } public void testRedispatchOfUncommittedTx() throws Exception { } public void testRedispatchOfRolledbackTx() throws Exception { } public void testMessageListenerOnMessageCloseUnackedWithPrefetch1StayInQueue() throws Exception { } },1.0,
2140,2140,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\MessageEvictionTest.,MessageEvictionTest,"public class MessageEvictionTest { static final Logger LOG = LoggerFactory getLogger(MessageEvictionTest class); private BrokerService broker; private ConnectionFactory connectionFactory; Connection connection; private Session session; private Topic destination; private final String destinationName = verifyEvection ; protected int numMessages = 2000; protected String payload = new String(new byte[1024*2]); public void setUp(PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy) throws Exception { broker = createBroker(pendingSubscriberPolicy); broker start(); connectionFactory = createConnectionFactory(); connection = connectionFactory createConnection(); connection start(); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); destination = session createTopic(destinationName); } After public void tearDown() throws Exception { connection stop(); broker stop(); } Test public void testMessageEvictionMemoryUsageFileCursor() throws Exception { setUp(new FilePendingSubscriberMessageStoragePolicy()); doTestMessageEvictionMemoryUsage(); } Test public void testMessageEvictionMemoryUsageVmCursor() throws Exception { setUp(new VMPendingSubscriberMessageStoragePolicy()); doTestMessageEvictionMemoryUsage(); } Test public void testMessageEvictionDiscardedAdvisory() throws Exception { setUp(new VMPendingSubscriberMessageStoragePolicy()); ExecutorService executor = Executors newSingleThreadExecutor(); final CountDownLatch consumerRegistered = new CountDownLatch(1); final CountDownLatch gotAdvisory = new CountDownLatch(1); final CountDownLatch advisoryIsGood = new CountDownLatch(1); executor execute(new Runnable() { public void run() { try { ActiveMQTopic discardedAdvisoryDestination = AdvisorySupport getMessageDiscardedAdvisoryTopic(destination); Session advisorySession = connection createSession(false, Session AUTO ACKNOWLEDGE); final MessageConsumer consumer = advisorySession createConsumer(discardedAdvisoryDestination); consumer setMessageListener(new MessageListener() { int advisoriesReceived = 0; public void onMessage(Message message) { try { LOG info( advisory + message); ActiveMQMessage activeMQMessage = (ActiveMQMessage) message; assertNotNull(activeMQMessage getStringProperty(AdvisorySupport MSG PROPERTY CONSUMER ID)); assertEquals(++advisoriesReceived, activeMQMessage getIntProperty(AdvisorySupport MSG PROPERTY DISCARDED COUNT)); message acknowledge(); advisoryIsGood countDown(); } catch (JMSException e) { e printStackTrace(); fail(e toString()); } finally { gotAdvisory countDown(); } } }); consumerRegistered countDown(); gotAdvisory await(120, TimeUnit SECONDS); consumer close(); advisorySession close(); } catch (Exception e) { e printStackTrace(); fail(e toString()); } } }); assertTrue( we have an advisory consumer , consumerRegistered await(60, TimeUnit SECONDS)); doTestMessageEvictionMemoryUsage(); assertTrue( got an advisory for discarded , gotAdvisory await(0, TimeUnit SECONDS)); assertTrue( advisory is good ,advisoryIsGood await(0, TimeUnit SECONDS)); } public void doTestMessageEvictionMemoryUsage() throws Exception { ExecutorService executor = Executors newCachedThreadPool(); final CountDownLatch doAck = new CountDownLatch(1); final CountDownLatch ackDone = new CountDownLatch(1); final CountDownLatch consumerRegistered = new CountDownLatch(1); executor execute(new Runnable() { public void run() { try { final MessageConsumer consumer = session createConsumer(destination); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { try { doAck await(60, TimeUnit SECONDS); LOG info( acking + message getJMSMessageID()); message acknowledge(); ackDone countDown(); } catch (Exception e) { e printStackTrace(); fail(e toString()); } finally { consumerRegistered countDown(); ackDone countDown(); } } }); consumerRegistered countDown(); ackDone await(60, TimeUnit SECONDS); consumer close(); } catch (Exception e) { e printStackTrace(); fail(e toString()); } } }); assertTrue( we have a consumer , consumerRegistered await(10, TimeUnit SECONDS)); final AtomicInteger sent = new AtomicInteger(0); final CountDownLatch sendDone = new CountDownLatch(1); executor execute(new Runnable() { public void run() { MessageProducer producer; try { producer = session createProducer(destination); for (int i=0; i< numMessages; i++) { producer send(session createTextMessage(payload)); sent incrementAndGet(); TimeUnit MILLISECONDS sleep(10); } producer close(); sendDone countDown(); } catch (Exception e) { sendDone countDown(); e printStackTrace(); fail(e toString()); } } }); assertTrue( messages sending done , sendDone await(180, TimeUnit SECONDS)); assertEquals( all message were sent , numMessages, sent get()); doAck countDown(); executor shutdown(); executor awaitTermination(30, TimeUnit SECONDS); assertTrue( usage goes to 0 once consumer goes away , Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { return 0 == TestSupport getDestination(broker, ActiveMQDestination transform(destination)) getMemoryUsage() getPercentUsage(); } })); } BrokerService createBroker(PendingSubscriberMessageStoragePolicy pendingSubscriberPolicy) throws Exception { BrokerService brokerService = new BrokerService(); brokerService addConnector( tcp brokerService setUseJmx(false); brokerService setDeleteAllMessagesOnStartup(true); brokerService getSystemUsage() getMemoryUsage() setLimit(500*1024); final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>(); final PolicyEntry entry = new PolicyEntry(); entry setTopic( > ); entry setAdvisoryForDiscardingMessages(true); entry setTopicPrefetch(50); entry setPendingSubscriberPolicy(pendingSubscriberPolicy); int pendingMessageLimit = 50; if (pendingSubscriberPolicy instanceof FilePendingSubscriberMessageStoragePolicy) { pendingMessageLimit = 500; } ConstantPendingMessageLimitStrategy pendingMessageLimitStrategy = new ConstantPendingMessageLimitStrategy(); pendingMessageLimitStrategy setLimit(pendingMessageLimit); entry setPendingMessageLimitStrategy(pendingMessageLimitStrategy); OldestMessageEvictionStrategy messageEvictionStrategy = new OldestMessageEvictionStrategy(); entry setMessageEvictionStrategy(messageEvictionStrategy); entry setDeadLetterStrategy(null); policyEntries add(entry); final PolicyMap policyMap = new PolicyMap(); policyMap setPolicyEntries(policyEntries); brokerService setDestinationPolicy(policyMap); return brokerService; } ConnectionFactory createConnectionFactory() throws Exception { String url = ((TransportConnector) broker getTransportConnectors() get(0)) getServer() getConnectURI() toString(); ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(url); factory setWatchTopicAdvisories(false); return factory; } }",1.0,
2142,2142,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\MessageListenerRedeliveryTest.,TestMessageListener,private class TestMessageListener implements MessageListener { public int counter; private Session session; public TestMessageListener(Session session) { this session = session; } public void onMessage(Message message) { try { LOG info( Message Received + message); counter++; if (counter <= 4) { LOG info( Message Rollback ); session rollback(); } else { LOG info( Message Commit ); message acknowledge(); session commit(); } } catch (JMSException e) { LOG error( Error when rolling back transaction ); } } },1.0,
2145,2145,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\OnePrefetchAsyncConsumerTest.,TestServerSessionPool,"private class TestServerSessionPool implements ServerSessionPool { Connection connection; TestServerSession serverSession; boolean serverSessionInUse = false; public TestServerSessionPool(Connection connection) throws JMSException { this connection = connection; this serverSession = new TestServerSession(this); } Override public ServerSession getServerSession() throws JMSException { synchronized (this) { if (serverSessionInUse) { LOG info( asked for session while in use, not serialised delivery ); success set(false); completed set(true); } serverSessionInUse = true; return serverSession; } } }",1.0,
2146,2146,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\OnePrefetchAsyncConsumerTest.,TestServerSession,"private class TestServerSession implements ServerSession { TestServerSessionPool pool; Session session; public TestServerSession(TestServerSessionPool pool) throws JMSException { this pool = pool; session = pool connection createSession(true, Session AUTO ACKNOWLEDGE); session setMessageListener(new TestMessageListener()); } Override public Session getSession() throws JMSException { return session; } Override public void start() throws JMSException { new Thread() { Override public void run() { session run(); synchronized (pool) { try { session commit(); } catch (JMSException e) { } pool serverSessionInUse = false; } } } start(); } }",1.0,
2147,2147,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\OnePrefetchAsyncConsumerTest.,TestMessageListener,private class TestMessageListener implements MessageListener { Override public void onMessage(Message message) { try { String text = ((TextMessage) message) getText(); LOG info( got message + text); if (text equals( Msg3 )) { success set(true); completed set(true); } else if (text equals( Msg2 )) { TimeUnit SECONDS sleep(4); } } catch (JMSException e) { } catch (InterruptedException e) { } } },1.0,
2156,2156,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\SpringTestSupport.,SpringTestSupport,"public abstract class SpringTestSupport extends TestCase { protected AbstractApplicationContext context; protected void setUp() throws Exception { context = createApplicationContext(); } protected abstract AbstractApplicationContext createApplicationContext();; protected void tearDown() throws Exception { if (context != null) { context destroy(); } } protected Object getBean(String name) { Object bean = context getBean(name); if (bean == null) { fail( Should have found bean named + name + in the Spring ApplicationContext ); } return bean; } protected void assertSetEquals(String description, Object[] expected, Set actual) { Set<Object> expectedSet = new HashSet<Object>(); expectedSet addAll(Arrays asList(expected)); assertEquals(description, expectedSet, actual); } }",1.0,
2158,2158,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\TimeStampTest.,TimeStampTest,"public class TimeStampTest extends TestCase { public void test() throws Exception { BrokerService broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(true); broker setPlugins(new BrokerPlugin[] {new ConnectionDotFilePlugin(), new UDPTraceBrokerPlugin()}); TransportConnector tcpConnector = broker addConnector( tcp broker addConnector( stomp broker start(); ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(tcpConnector getConnectUri()); Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue( TEST FOO ); MessageProducer producer = session createProducer(destination); producer setDeliveryMode(DeliveryMode NON PERSISTENT); Message sentMessage = session createMessage(); long beforeSend = System currentTimeMillis(); producer send(sentMessage); long afterSend = System currentTimeMillis(); assertTrue(beforeSend <= sentMessage getJMSTimestamp() && sentMessage getJMSTimestamp() <= afterSend); MessageConsumer consumer = session createConsumer(destination); Message receivedMessage = consumer receive(1000); assertEquals(sentMessage getJMSMessageID(), receivedMessage getJMSMessageID()); assertTrue( JMS Message Timestamp should be set during the send method n + beforeSend = + beforeSend + n + getJMSTimestamp = + receivedMessage getJMSTimestamp() + n + afterSend = + afterSend + n , beforeSend <= receivedMessage getJMSTimestamp() && receivedMessage getJMSTimestamp() <= afterSend); assertEquals( JMS Message Timestamp of recieved message should be the same as the sent message n , sentMessage getJMSTimestamp(), receivedMessage getJMSTimestamp()); producer close(); consumer close(); session close(); connection close(); broker stop(); } }",1.0,
2160,2160,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\ZeroPrefetchConsumerTest.,ZeroPrefetchConsumerTest,"public class ZeroPrefetchConsumerTest extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(ZeroPrefetchConsumerTest class); protected Connection connection; protected Queue queue; protected Queue brokerZeroQueue = new ActiveMQQueue( brokerZeroConfig ); public void testCannotUseMessageListener() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(queue); MessageListener listener = new SpringConsumer(); try { consumer setMessageListener(listener); fail( Should have thrown JMSException as we cannot use MessageListener with zero prefetch ); } catch (JMSException e) { LOG info( Received expected exception + e); } } public void testPullConsumerWorks() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Hello World! )); MessageConsumer consumer = session createConsumer(queue); Message answer = consumer receive(5000); assertNotNull( Should have received a message! , answer); answer = consumer receive(1); assertNull( Should have not received a message! , answer); answer = consumer receiveNoWait(); assertNull( Should have not received a message! , answer); } public void testIdleConsumer() throws Exception { doTestIdleConsumer(false); } public void testIdleConsumerTranscated() throws Exception { doTestIdleConsumer(true); } private void doTestIdleConsumer(boolean transacted) throws Exception { Session session = connection createSession(transacted, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Msg1 )); producer send(session createTextMessage( Msg2 )); if (transacted) { session commit(); } MessageConsumer consumer = session createConsumer(queue); session createConsumer(queue); TextMessage answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg1 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg2 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receiveNoWait(); assertNull( Should have not received a message! , answer); } public void testRecvRecvCommit() throws Exception { doTestRecvRecvCommit(false); } public void testRecvRecvCommitTranscated() throws Exception { doTestRecvRecvCommit(true); } private void doTestRecvRecvCommit(boolean transacted) throws Exception { Session session = connection createSession(transacted, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Msg1 )); producer send(session createTextMessage( Msg2 )); if (transacted) { session commit(); } MessageConsumer consumer = session createConsumer(queue); TextMessage answer = (TextMessage)consumer receiveNoWait(); assertEquals( Should have received a message! , answer getText(), Msg1 ); answer = (TextMessage)consumer receiveNoWait(); assertEquals( Should have received a message! , answer getText(), Msg2 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receiveNoWait(); assertNull( Should have not received a message! , answer); } public void testTwoConsumers() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Msg1 )); producer send(session createTextMessage( Msg2 )); MessageConsumer consumer1 = session createConsumer(queue); MessageConsumer consumer2 = session createConsumer(queue); TextMessage answer = (TextMessage)consumer1 receiveNoWait(); assertEquals( Should have received a message! , answer getText(), Msg1 ); answer = (TextMessage)consumer2 receiveNoWait(); assertEquals( Should have received a message! , answer getText(), Msg2 ); answer = (TextMessage)consumer2 receiveNoWait(); assertNull( Should have not received a message! , answer); } public void testManyMessageConsumer() throws Exception { doTestManyMessageConsumer(true); } public void testManyMessageConsumerNoTransaction() throws Exception { doTestManyMessageConsumer(false); } private void doTestManyMessageConsumer(boolean transacted) throws Exception { Session session = connection createSession(transacted, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Msg1 )); producer send(session createTextMessage( Msg2 )); producer send(session createTextMessage( Msg3 )); producer send(session createTextMessage( Msg4 )); producer send(session createTextMessage( Msg5 )); producer send(session createTextMessage( Msg6 )); producer send(session createTextMessage( Msg7 )); producer send(session createTextMessage( Msg8 )); if (transacted) { session commit(); } MessageConsumer consumer = session createConsumer(queue); MessageConsumer consumer2 = session createConsumer(queue); TextMessage answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg1 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg2 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg3 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg4 ); if (transacted) { session commit(); } answer = (TextMessage)consumer2 receive(5000); assertEquals( Should have received a message! , answer getText(), Msg5 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg6 ); answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg7 ); if (transacted) { session commit(); } answer = (TextMessage)consumer2 receive(5000); assertEquals( Should have received a message! , answer getText(), Msg8 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receiveNoWait(); assertNull( Should have not received a message! , answer); } public void testManyMessageConsumerWithSend() throws Exception { doTestManyMessageConsumerWithSend(true); } public void testManyMessageConsumerWithSendNoTransaction() throws Exception { doTestManyMessageConsumerWithSend(false); } private void doTestManyMessageConsumerWithSend(boolean transacted) throws Exception { Session session = connection createSession(transacted, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( Msg1 )); producer send(session createTextMessage( Msg2 )); producer send(session createTextMessage( Msg3 )); producer send(session createTextMessage( Msg4 )); producer send(session createTextMessage( Msg5 )); producer send(session createTextMessage( Msg6 )); producer send(session createTextMessage( Msg7 )); producer send(session createTextMessage( Msg8 )); if (transacted) { session commit(); } MessageConsumer consumer = session createConsumer(queue); MessageConsumer consumer2 = session createConsumer(queue); TextMessage answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg1 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg2 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg3 ); if (transacted) { session commit(); } answer = (TextMessage)consumer2 receive(5000); assertEquals( Should have received a message! , answer getText(), Msg4 ); answer = (TextMessage)consumer2 receive(5000); assertEquals( Should have received a message! , answer getText(), Msg5 ); producer send(session createTextMessage( Msg9 )); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg6 ); answer = (TextMessage)consumer2 receive(5000); assertEquals( Should have received a message! , answer getText(), Msg7 ); if (transacted) { session commit(); } answer = (TextMessage)consumer2 receive(5000); assertEquals( Should have received a message! , answer getText(), Msg8 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg9 ); if (transacted) { session commit(); } answer = (TextMessage)consumer receiveNoWait(); assertNull( Should have not received a message! , answer); } public void testBrokerZeroPrefetchConfig() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(brokerZeroQueue); producer send(session createTextMessage( Msg1 )); MessageConsumer consumer = session createConsumer(brokerZeroQueue); TextMessage answer = (TextMessage)consumer receive(5000); assertEquals( Should have received a message! , answer getText(), Msg1 ); } public void testBrokerZeroPrefetchConfigWithConsumerControl() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); ActiveMQMessageConsumer consumer = (ActiveMQMessageConsumer) session createConsumer(brokerZeroQueue); assertEquals( broker config prefetch in effect , 0, consumer info getCurrentPrefetchSize()); Subscription sub = broker getRegionBroker() getDestinationMap() get(ActiveMQDestination transform(brokerZeroQueue)) getConsumers() get(0); assertEquals( broker sub prefetch is correct , 0, sub getConsumerInfo() getCurrentPrefetchSize()); ConsumerControl consumerControl = new ConsumerControl(); consumerControl setConsumerId(consumer info getConsumerId()); consumerControl setDestination(ActiveMQDestination transform(brokerZeroQueue)); consumerControl setPrefetch(1000); Object reply = ((ActiveMQConnection) connection) getTransport() request(consumerControl); assertTrue( good request , !(reply instanceof ExceptionResponse)); assertEquals( broker config prefetch in effect , 0, consumer info getCurrentPrefetchSize()); assertEquals( broker sub prefetch is correct , 0, sub getConsumerInfo() getCurrentPrefetchSize()); } Override protected BrokerService createBroker() throws Exception { BrokerService brokerService = super createBroker(); PolicyMap policyMap = new PolicyMap(); PolicyEntry zeroPrefetchPolicy = new PolicyEntry(); zeroPrefetchPolicy setQueuePrefetch(0); policyMap put(ActiveMQDestination transform(brokerZeroQueue), zeroPrefetchPolicy); brokerService setDestinationPolicy(policyMap); return brokerService; } protected void setUp() throws Exception { bindAddress = tcp super setUp(); connection = createConnection(); connection start(); queue = createQueue(); } protected void startBroker() throws Exception { super startBroker(); bindAddress = broker getTransportConnectors() get(0) getConnectUri() toString(); } protected void tearDown() throws Exception { connection close(); super tearDown(); } protected Queue createQueue() { return new ActiveMQQueue(getDestinationString() + consumer prefetchSize=0 ); } }",1.0,
2163,2163,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\advisory\ConsumerListenerTest.,ConsumerListenerTest,"public class ConsumerListenerTest extends EmbeddedBrokerTestSupport implements ConsumerListener { private static final Logger LOG = LoggerFactory getLogger(ConsumerListenerTest class); protected Session consumerSession1; protected Session consumerSession2; protected int consumerCounter; protected ConsumerEventSource consumerEventSource; protected BlockingQueue<ConsumerEvent> eventQueue = new ArrayBlockingQueue<ConsumerEvent>(1000); private Connection connection; public void testConsumerEvents() throws Exception { consumerEventSource start(); consumerSession1 = createConsumer(); assertConsumerEvent(1, true); consumerSession2 = createConsumer(); assertConsumerEvent(2, true); consumerSession1 close(); consumerSession1 = null; assertConsumerEvent(1, false); consumerSession2 close(); consumerSession2 = null; assertConsumerEvent(0, false); } public void testListenWhileAlreadyConsumersActive() throws Exception { consumerSession1 = createConsumer(); consumerSession2 = createConsumer(); consumerEventSource start(); assertConsumerEvent(2, true); assertConsumerEvent(2, true); consumerSession1 close(); consumerSession1 = null; assertConsumerEvent(1, false); consumerSession2 close(); consumerSession2 = null; assertConsumerEvent(0, false); } public void onConsumerEvent(ConsumerEvent event) { eventQueue add(event); } protected void setUp() throws Exception { super setUp(); connection = createConnection(); connection start(); consumerEventSource = new ConsumerEventSource(connection, destination); consumerEventSource setConsumerListener(this); } protected void tearDown() throws Exception { if (consumerEventSource != null) { consumerEventSource stop(); } if (consumerSession2 != null) { consumerSession2 close(); } if (consumerSession1 != null) { consumerSession1 close(); } if (connection != null) { connection close(); } super tearDown(); } protected void assertConsumerEvent(int count, boolean started) throws InterruptedException { ConsumerEvent event = waitForConsumerEvent(); assertEquals( Consumer count , count, event getConsumerCount()); assertEquals( started , started, event isStarted()); } protected Session createConsumer() throws JMSException { final String consumerText = Consumer + (++consumerCounter); LOG info( Creating consumer + consumerText + on destination + destination); Session answer = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = answer createConsumer(destination); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { LOG info( Received message by + consumerText + message + message); } }); return answer; } protected ConsumerEvent waitForConsumerEvent() throws InterruptedException { ConsumerEvent answer = eventQueue poll(100000, TimeUnit MILLISECONDS); assertTrue( Should have received a consumer event! , answer != null); return answer; } }",1.0,
2166,2166,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\advisory\TempDestDeleteTest.,TempDestDeleteTest,"public class TempDestDeleteTest extends EmbeddedBrokerTestSupport implements ConsumerListener { private static final Logger LOG = LoggerFactory getLogger(TempDestDeleteTest class); protected int consumerCounter; protected ConsumerEventSource topicConsumerEventSource; protected BlockingQueue<ConsumerEvent> eventQueue = new ArrayBlockingQueue<ConsumerEvent>(1000); private ConsumerEventSource queueConsumerEventSource; private Connection connection; private Session session; private ActiveMQTempTopic tempTopic; private ActiveMQTempQueue tempQueue; public void testDeleteTempTopicDeletesAvisoryTopics() throws Exception { topicConsumerEventSource start(); MessageConsumer consumer = createConsumer(tempTopic); assertConsumerEvent(1, true); Topic advisoryTopic = AdvisorySupport getConsumerAdvisoryTopic(tempTopic); assertTrue(destinationExists(advisoryTopic)); consumer close(); tempTopic delete(); assertFalse(destinationExists(advisoryTopic)); } public void testDeleteTempQueueDeletesAvisoryTopics() throws Exception { queueConsumerEventSource start(); MessageConsumer consumer = createConsumer(tempQueue); assertConsumerEvent(1, true); Topic advisoryTopic = AdvisorySupport getConsumerAdvisoryTopic(tempQueue); assertTrue(destinationExists(advisoryTopic)); consumer close(); tempQueue delete(); assertFalse(destinationExists(advisoryTopic)); } private boolean destinationExists(Destination dest) throws Exception { RegionBroker rb = (RegionBroker)broker getBroker() getAdaptor(RegionBroker class); return rb getTopicRegion() getDestinationMap() containsKey(dest) || rb getQueueRegion() getDestinationMap() containsKey(dest) || rb getTempTopicRegion() getDestinationMap() containsKey(dest) || rb getTempQueueRegion() getDestinationMap() containsKey(dest); } public void onConsumerEvent(ConsumerEvent event) { eventQueue add(event); } protected void setUp() throws Exception { super setUp(); connection = createConnection(); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); tempTopic = (ActiveMQTempTopic)session createTemporaryTopic(); topicConsumerEventSource = new ConsumerEventSource(connection, tempTopic); topicConsumerEventSource setConsumerListener(this); tempQueue = (ActiveMQTempQueue)session createTemporaryQueue(); queueConsumerEventSource = new ConsumerEventSource(connection, tempQueue); queueConsumerEventSource setConsumerListener(this); } protected void tearDown() throws Exception { if (connection != null) { connection close(); } super tearDown(); } protected void assertConsumerEvent(int count, boolean started) throws InterruptedException { ConsumerEvent event = waitForConsumerEvent(); assertEquals( Consumer count , count, event getConsumerCount()); assertEquals( started , started, event isStarted()); } protected MessageConsumer createConsumer(Destination dest) throws JMSException { final String consumerText = Consumer + (++consumerCounter); LOG info( Creating consumer + consumerText + on destination + dest); MessageConsumer consumer = session createConsumer(dest); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { LOG info( Received message by + consumerText + message + message); } }); return consumer; } protected ConsumerEvent waitForConsumerEvent() throws InterruptedException { ConsumerEvent answer = eventQueue poll(1000, TimeUnit MILLISECONDS); assertTrue( Should have received a consumer event! , answer != null); return answer; } }",1.0,
2167,2167,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\advisory\TempDestLoadTest.,TempDestLoadTest,"public class TempDestLoadTest extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(TempDestLoadTest class); protected int consumerCounter; private Connection connection; private Session session; private static final int MESSAGE COUNT = 2000; public void testLoadTempAdvisoryQueues() throws Exception { for (int i = 0; i < MESSAGE COUNT; i++) { TemporaryQueue tempQueue = session createTemporaryQueue(); MessageConsumer consumer = session createConsumer(tempQueue); MessageProducer producer = session createProducer(tempQueue); consumer close(); producer close(); tempQueue delete(); } AdvisoryBroker ab = (AdvisoryBroker) broker getBroker() getAdaptor( AdvisoryBroker class); assertTrue(ab getAdvisoryDestinations() size() == 0); assertTrue(ab getAdvisoryConsumers() size() == 0); assertTrue(ab getAdvisoryProducers() size() == 0); RegionBroker rb = (RegionBroker) broker getBroker() getAdaptor(RegionBroker class); for (Destination dest rb getDestinationMap() values()) { LOG debug( Destination {} , dest); } assertTrue( Should be at least 2 destinations , rb getDestinationMap() size() > 2); } public void testLoadTempAdvisoryTopics() throws Exception { for (int i = 0; i < MESSAGE COUNT; i++) { TemporaryTopic tempTopic = session createTemporaryTopic(); MessageConsumer consumer = session createConsumer(tempTopic); MessageProducer producer = session createProducer(tempTopic); consumer close(); producer close(); tempTopic delete(); } AdvisoryBroker ab = (AdvisoryBroker) broker getBroker() getAdaptor( AdvisoryBroker class); assertTrue(ab getAdvisoryDestinations() size() == 0); assertTrue(ab getAdvisoryConsumers() size() == 0); assertTrue(ab getAdvisoryProducers() size() == 0); RegionBroker rb = (RegionBroker) broker getBroker() getAdaptor( RegionBroker class); for (Destination dest rb getDestinationMap() values()) { LOG debug( Destination {} , dest); } assertTrue( Should be at least 2 destinations , rb getDestinationMap() size() > 2); } Override protected void setUp() throws Exception { super setUp(); connection = createConnection(); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); } Override protected void tearDown() throws Exception { if (connection != null) { connection close(); } super tearDown(); } }",1.0,
2169,2169,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\advisory\TempQueueMemoryTest.,Producer,"class Producer extends Thread { private final int numToSend; public Producer(int numToSend) { this numToSend = numToSend; } Override public void run() { try { Session session = clientConnection createSession(clientTransactional, clientTransactional Session SESSION TRANSACTED Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(serverDestination); for (int i =0; i< numToSend; i++) { TemporaryQueue replyTo = session createTemporaryQueue(); MessageConsumer consumer = session createConsumer(replyTo); Message msg = session createMessage(); msg setJMSReplyTo(replyTo); producer send(msg); if (clientTransactional) { session commit(); } consumer receive(); if (clientTransactional) { session commit(); } consumer close(); if (deleteTempQueue) { replyTo delete(); } else { } } } catch (JMSException e) { e printStackTrace(); } } }",1.0,
2170,2170,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\blob\BlobTransferPolicyUriTest.,BlobTransferPolicyUriTest,public class BlobTransferPolicyUriTest extends TestCase { public void testBlobTransferPolicyIsConfiguredViaUri() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( vm BlobTransferPolicy policy = factory getBlobTransferPolicy(); assertEquals( http assertEquals( http } },1.0,
2171,2171,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\blob\FilesystemBlobTest.,FilesystemBlobTest,"public class FilesystemBlobTest extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(FilesystemBlobTest class); private Connection connection; private String tmpDir = System getProperty( user dir ) + /target/FilesystemBlobTest ; public void setUp() throws Exception { super setUp(); String fileUrl = file LOG info( Using file + fileUrl); bindAddress = vm connectionFactory = createConnectionFactory(); connection = createConnection(); connection start(); } public void testBlobFile() throws Exception { File file = File createTempFile( amq-data-file- , dat ); String content = hello world + System currentTimeMillis(); BufferedWriter writer = new BufferedWriter(new FileWriter(file)); writer append(content); writer close(); ActiveMQSession session = (ActiveMQSession) connection createSession( false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); MessageConsumer consumer = session createConsumer(destination); BlobMessage message = session createBlobMessage(file); producer send(message); Thread sleep(1000); Message msg = consumer receive(1000); Assert assertTrue(msg instanceof ActiveMQBlobMessage); InputStream input = ((ActiveMQBlobMessage) msg) getInputStream(); StringBuilder b = new StringBuilder(); int i = input read(); while (i != -1) { b append((char) i); i = input read(); } input close(); File uploaded = new File(tmpDir, msg getJMSMessageID() toString() replace( , )); Assert assertEquals(content, b toString()); assertTrue(uploaded exists()); ((ActiveMQBlobMessage)msg) deleteFile(); assertFalse(uploaded exists()); } protected void tearDown() throws Exception { if (connection != null) { connection stop(); } super tearDown(); IOHelper deleteFile(new File(tmpDir)); } }",1.0,
2172,2172,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\blob\FTPBlobDownloadStrategyTest.,FTPBlobDownloadStrategyTest,"public class FTPBlobDownloadStrategyTest extends FTPTestSupport { final int FILE SIZE = Short MAX VALUE * 10; public void testDownload() throws Exception { setConnection(); File uploadFile = new File(ftpHomeDirFile, test txt ); FileWriter wrt = new FileWriter(uploadFile); wrt write( hello world ); for(int ix = 0; ix < FILE SIZE; ++ix ) { wrt write( a ); } wrt close(); ActiveMQBlobMessage message = new ActiveMQBlobMessage(); BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy()); InputStream stream; try { message setURL(new URL(ftpUrl + test txt )); stream = strategy getInputStream(message); int i = stream read(); StringBuilder sb = new StringBuilder(2048); while(i != -1) { sb append((char)i); i = stream read(); } Assert assertEquals( hello world , sb toString() substring(0, hello world length())); Assert assertEquals(FILE SIZE, sb toString() substring( hello world length()) length()); assertTrue(uploadFile exists()); strategy deleteFile(message); assertFalse(uploadFile exists()); } catch (Exception e) { e printStackTrace(); Assert assertTrue(false); } } public void testWrongAuthentification() throws MalformedURLException { ActiveMQBlobMessage message = new ActiveMQBlobMessage(); BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy()); try { message setURL(new URL( ftp strategy getInputStream(message); } catch(JMSException e) { Assert assertEquals( Wrong Exception , Cant Authentificate to FTP-Server , e getMessage()); return; } catch(Exception e) { System out println(e); Assert assertTrue( Wrong Exception + e, false); return; } Assert assertTrue( Expect Exception , false); } public void testWrongFTPPort() throws MalformedURLException { ActiveMQBlobMessage message = new ActiveMQBlobMessage(); BlobDownloadStrategy strategy = new FTPBlobDownloadStrategy(new BlobTransferPolicy()); try { message setURL(new URL( ftp strategy getInputStream(message); } catch(JMSException e) { Assert assertEquals( Wrong Exception , Problem connecting the FTP-server , e getMessage()); return; } catch(Exception e) { e printStackTrace(); Assert assertTrue( Wrong Exception + e, false); return; } Assert assertTrue( Expect Exception , false); } }",1.0,
2174,2174,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\blob\FTPBlobUploadStrategyTest.,FTPBlobUploadStrategyTest,"public class FTPBlobUploadStrategyTest extends FTPTestSupport { public void testFileUpload() throws Exception { setConnection(); File file = File createTempFile( amq-data-file- , dat ); BufferedWriter writer = new BufferedWriter(new FileWriter(file)); writer append( hello world ); writer close(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); ((ActiveMQConnection)connection) setCopyMessageOnSend(false); ActiveMQBlobMessage message = (ActiveMQBlobMessage) ((ActiveMQSession)session) createBlobMessage(file); message setMessageId(new MessageId( testmessage )); message onSend(); Assert assertEquals(ftpUrl + testmessage , message getURL() toString()); File uploaded = new File(ftpHomeDirFile, testmessage ); assertTrue( File doesn t exists , uploaded exists()); } public void testWriteDenied() throws Exception { userNamePass = guest ; setConnection(); File file = File createTempFile( amq-data-file- , dat ); BufferedWriter writer = new BufferedWriter(new FileWriter(file)); writer append( hello world ); writer close(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); ((ActiveMQConnection)connection) setCopyMessageOnSend(false); ActiveMQBlobMessage message = (ActiveMQBlobMessage) ((ActiveMQSession)session) createBlobMessage(file); message setMessageId(new MessageId( testmessage )); try { message onSend(); } catch (JMSException e) { e printStackTrace(); return; } fail( Should have failed with permission denied exception! ); } }",1.0,
2178,2178,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\BrokerRestartTestSupport.,BrokerRestartTestSupport,public class BrokerRestartTestSupport extends BrokerTestSupport { Override protected BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); File dir = broker getBrokerDataDirectory(); if (dir != null) { IOHelper deleteChildren(dir); } broker setDeleteAllMessagesOnStartup(true); configureBroker(broker); return broker; } protected BrokerService createRestartedBroker() throws Exception { BrokerService broker = new BrokerService(); configureBroker(broker); return broker; } protected void configureBroker(BrokerService broker) throws Exception { broker setDestinationPolicy(policyMap); } protected void restartBroker() throws Exception { broker stop(); broker = createRestartedBroker(); broker start(); } },1.0,
2179,2179,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\BrokerServiceTest.,BrokerServiceTest,"public class BrokerServiceTest extends TestCase { public void testAddRemoveTransportsWithJMX() throws Exception { BrokerService service = new BrokerService(); service setUseJmx(true); service setPersistent(false); TransportConnector connector = service addConnector( tcp service start(); service removeConnector(connector); connector stop(); service stop(); } public void testAddRemoveTransportsWithoutJMX() throws Exception { BrokerService service = new BrokerService(); service setPersistent(false); service setUseJmx(false); TransportConnector connector = service addConnector( tcp service start(); service removeConnector(connector); connector stop(); service stop(); } public void testAddRemoveNetworkWithJMX() throws Exception { BrokerService service = new BrokerService(); service setPersistent(false); service setUseJmx(true); NetworkConnector connector = service addNetworkConnector( multicast service start(); service removeNetworkConnector(connector); connector stop(); service stop(); } public void testAddRemoveNetworkWithoutJMX() throws Exception { BrokerService service = new BrokerService(); service setPersistent(false); service setUseJmx(false); NetworkConnector connector = service addNetworkConnector( multicast service start(); service removeNetworkConnector(connector); connector stop(); service stop(); } public void testSystemUsage() { BrokerService service = new BrokerService(); assertEquals( 1024 * 1024 * 64, service getSystemUsage() getMemoryUsage() getLimit() ); assertEquals( 1024L * 1024 * 1024 * 50, service getSystemUsage() getTempUsage() getLimit() ); assertEquals( 1024L * 1024 * 1024 * 100, service getSystemUsage() getStoreUsage() getLimit() ); } }",1.0,
2183,2183,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\CreateDestinationsOnStartupViaXBeanTest.,CreateDestinationsOnStartupViaXBeanTest,"public class CreateDestinationsOnStartupViaXBeanTest extends EmbeddedBrokerTestSupport { public void testNewDestinationsAreCreatedOnStartup() throws Exception { assertQueueCreated( FOO BAR , true); assertQueueCreated( FOO DoesNotExist , false); assertTopicCreated( SOME TOPIC , true); assertTopicCreated( FOO DoesNotExist , false); } protected void assertQueueCreated(String name, boolean expected) throws Exception { assertDestinationCreated(new ActiveMQQueue(name), expected); } protected void assertTopicCreated(String name, boolean expected) throws Exception { assertDestinationCreated(new ActiveMQTopic(name), expected); } protected void assertDestinationCreated(ActiveMQDestination destination, boolean expected) throws Exception { Set answer = broker getBroker() getDestinations(destination); int size = expected 1 0; assertEquals( Could not find destination + destination + Size of found destinations + answer, size, answer size()); } protected BrokerService createBroker() throws Exception { XBeanBrokerFactory factory = new XBeanBrokerFactory(); BrokerService answer = factory createBroker(new URI(getBrokerConfigUri())); answer setPersistent(false); return answer; } protected String getBrokerConfigUri() { return org/apache/activemq/broker/destinations-on-start xml ; } }",1.0,
2184,2184,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\DedicatedTaskRunnerBrokerTest.,DedicatedTaskRunnerBrokerTest,public class DedicatedTaskRunnerBrokerTest extends BrokerTest { protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); broker setDedicatedTaskRunner(true); return broker; } public static Test suite() { return suite(DedicatedTaskRunnerBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
2186,2186,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\DurablePersistentFalseRestartTest.,DurablePersistentFalseRestartTest,"public class DurablePersistentFalseRestartTest extends BrokerRestartTestSupport { Override protected void configureBroker(BrokerService broker) throws Exception { super configureBroker(broker); broker setPersistent(false); broker setPersistenceAdapter(new KahaDBPersistenceAdapter()); broker addConnector( tcp } public void testValidateNoPersistenceForDurableAfterRestart() throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory( failover ( + broker getTransportConnectors() get(0) getPublishableConnectString() + ) ); ActiveMQConnection connection = (ActiveMQConnection) connectionFactory createConnection(); connection setClientID( clientId ); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Topic destination = session createTopic(queueName); MessageConsumer consumer = session createDurableSubscriber(destination, subscriberName ); populateDestination(10, destination, connection); restartBroker(); ((FailoverTransport) connection getTransport() narrow(FailoverTransport class)) add(true, broker getTransportConnectors() get(0) getPublishableConnectString()); TextMessage msg = (TextMessage) consumer receive(4000); assertNull( did not get a message when persistent=false, message + msg, msg); connection close(); } private void populateDestination(final int nbMessages, final Destination destination, javax jms Connection connection) throws JMSException { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); for (int i = 1; i <= nbMessages; i++) { producer send(session createTextMessage( <hello id= + i + /> )); } producer close(); session close(); } public static Test suite() { return suite(DurablePersistentFalseRestartTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } }",1.0,
2188,2188,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\Main.,Main,"public final class Main { protected static boolean createConsumers; private Main() { } public static void main(String[] args) { try { BrokerService broker = new BrokerService(); broker setPersistent(false); ManagementContext managementContext = broker getManagementContext(); managementContext setFindTigerMbeanServer(true); managementContext setUseMBeanServer(true); managementContext setCreateConnector(false); broker setUseJmx(true); broker addConnector( tcp broker addConnector( stomp broker start(); DefaultQueueSender main(new String[] { Prices Equity IBM }); DefaultQueueSender main(new String[] { Prices Equity MSFT }); if (createConsumers) { Connection connection = new ActiveMQConnectionFactory() createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); session createConsumer(new ActiveMQQueue( Orders IBM )); session createConsumer(new ActiveMQQueue( Orders MSFT ), price > 100 ); Session session2 = connection createSession(false, Session AUTO ACKNOWLEDGE); session2 createConsumer(new ActiveMQQueue( Orders MSFT ), price > 200 ); } else { broker waitUntilStopped(); } } catch (Exception e) { System out println( Failed + e); e printStackTrace(); } } }",1.0,
2192,2192,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\NioQueueSubscriptionTest.,NioQueueSubscriptionTest,"public class NioQueueSubscriptionTest extends QueueSubscriptionTest { protected static final Logger LOG = LoggerFactory getLogger(NioQueueSubscriptionTest class); private final Map<Thread, Throwable> exceptions = Collections synchronizedMap(new HashMap<Thread, Throwable>()); Override protected ConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory( tcp } Override protected void setUp() throws Exception { super setUp(); } Override protected BrokerService createBroker() throws Exception { BrokerService answer = BrokerFactory createBroker(new URI( broker answer getManagementContext() setCreateConnector(false); answer setUseJmx(false); answer setDeleteAllMessagesOnStartup(true); final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>(); final PolicyEntry entry = new PolicyEntry(); entry setQueue( > ); entry setOptimizedDispatch(true); policyEntries add(entry); final PolicyMap policyMap = new PolicyMap(); policyMap setPolicyEntries(policyEntries); answer setDestinationPolicy(policyMap); return answer; } public void testLotsOfConcurrentConnections() throws Exception { ExecutorService executor = Executors newCachedThreadPool(); final ConnectionFactory factory = createConnectionFactory(); int connectionCount = 400; final AtomicInteger threadId = new AtomicInteger(0); for (int i = 0; i < connectionCount; i++) { executor execute(new Runnable() { Override public void run() { final int innerId = threadId incrementAndGet(); try { ExceptionListener listener = new NioQueueSubscriptionTestListener(innerId, exceptions, LOG); ActiveMQConnection connection = (ActiveMQConnection) factory createConnection(); connection setExceptionListener(listener); connection start(); assertNotNull(connection getBrokerName()); connections add(connection); } catch (Exception e) { LOG error( >>>> Exception in run() on thread + innerId, e); exceptions put(Thread currentThread(), e); } } }); } executor shutdown(); executor awaitTermination(30, TimeUnit SECONDS); if (!exceptions isEmpty()) { LOG error( >>>> + exceptions size() + exceptions like , exceptions values() iterator() next()); fail( unexpected exceptions in worker threads + exceptions values() iterator() next()); } LOG info( created + connectionCount + connections ); } }",1.0,
2193,2193,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\NioQueueSubscriptionTest.,NioQueueSubscriptionTestListener,"class NioQueueSubscriptionTestListener implements ExceptionListener { private int id = 0; protected Logger LOG; private final Map<Thread, Throwable> exceptions; public NioQueueSubscriptionTestListener(int id, Map<Thread, Throwable> exceptions, Logger log) { this id = id; this exceptions = exceptions; this LOG = log; } Override public void onException(JMSException exception) { LOG error( >>>> Exception in onException() on thread + id, exception); exceptions put(Thread currentThread(), exception); } }",1.0,
2194,2194,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\OutOfOrderXMLTest.,OutOfOrderXMLTest,public class OutOfOrderXMLTest { Test public void verifyBrokerCreationWhenXmlOutOfOrderValidationFalse() throws Exception { BrokerService answer = BrokerFactory createBroker(new URI( xbean org/apache/activemq/broker/out-of-order-broker-elements xml validate=false )); answer stop(); } },1.0,
2195,2195,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ProgressPrinter.,ProgressPrinter,"public class ProgressPrinter { private final long total; private final long interval; private long percentDone; private long counter; public ProgressPrinter(long total, long interval) { this total = total; this interval = interval; } public synchronized void increment() { update(++counter); } public synchronized void update(long current) { long at = 100 * current / total; if ((percentDone / interval) != (at / interval)) { percentDone = at; System out println( Completed + percentDone + % ); } } }",1.0,
2196,2196,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\QueueMbeanRestartTest.,QueueMbeanRestartTest,"public class QueueMbeanRestartTest extends TestSupport { private static final transient Logger LOG = LoggerFactory getLogger(QueueMbeanRestartTest class); BrokerService broker; public static Test suite() { return suite(QueueMbeanRestartTest class); } Override public void setUp() throws Exception { topic = false; super setUp(); } Override public void tearDown() throws Exception { super tearDown(); broker stop(); } public void initCombosForTestMBeanPresenceOnRestart() { addCombinationValues( defaultPersistenceAdapter , new Object[]{PersistenceAdapterChoice KahaDB, PersistenceAdapterChoice LevelDB, PersistenceAdapterChoice JDBC}); } public void testMBeanPresenceOnRestart() throws Exception { createBroker(true); sendMessages(); verifyPresenceOfQueueMbean(); LOG info( restart ); restartBroker(); verifyPresenceOfQueueMbean(); } private void restartBroker() throws Exception { broker stop(); broker waitUntilStopped(); createBroker(false); broker waitUntilStarted(); } private void verifyPresenceOfQueueMbean() throws Exception { for (ObjectName name broker getManagementContext() queryNames(null, null)) { LOG info( candidate + name); String type = name getKeyProperty( destinationType ); if (type != null && type equals( Queue )) { assertEquals( JMXSupport encodeObjectNamePart(((ActiveMQQueue) createDestination()) getPhysicalName()), name getKeyProperty( destinationName )); LOG info( found mbbean + name); return; } } fail( expected to find matching queue mbean for + createDestination()); } private void sendMessages() throws Exception { Session session = createConnection() createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(createDestination()); producer send(session createTextMessage()); } private void createBroker(boolean deleteAll) throws Exception { broker = new BrokerService(); setDefaultPersistenceAdapter(broker); broker setDeleteAllMessagesOnStartup(deleteAll); broker start(); } }",1.0,
2197,2197,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\QueueSubscriptionTest.,QueueSubscriptionTest,"public class QueueSubscriptionTest extends JmsMultipleClientsTestSupport { protected int messageCount = 1000; protected int prefetchCount = 10; protected void setUp() throws Exception { super setUp(); durable = false; topic = false; } public void testManyProducersOneConsumer() throws Exception { consumerCount = 1; producerCount = 10; messageCount = 100; messageSize = 1; prefetchCount = 10; doMultipleClientsTest(); assertTotalMessagesReceived(messageCount * producerCount); } public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception { consumerCount = 2; producerCount = 1; messageCount = 1000; messageSize = 1024; configurePrefetchOfOne(); doMultipleClientsTest(); assertTotalMessagesReceived(messageCount * producerCount); } public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception { consumerCount = 2; producerCount = 1; messageCount = 1000; prefetchCount = messageCount * 2; messageSize = 1024; doMultipleClientsTest(); assertTotalMessagesReceived(messageCount * producerCount); } public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception { consumerCount = 2; producerCount = 1; messageCount = 10; messageSize = 1024 * 1024 * 1; configurePrefetchOfOne(); doMultipleClientsTest(); assertTotalMessagesReceived(messageCount * producerCount); } public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception { consumerCount = 2; producerCount = 1; messageCount = 10; prefetchCount = messageCount * 2; messageSize = 1024 * 1024 * 1; doMultipleClientsTest(); assertTotalMessagesReceived(messageCount * producerCount); } public void testOneProducerManyConsumersFewMessages() throws Exception { consumerCount = 50; producerCount = 1; messageCount = 10; messageSize = 1; prefetchCount = 10; doMultipleClientsTest(); assertTotalMessagesReceived(messageCount * producerCount); } public void testOneProducerManyConsumersManyMessages() throws Exception { consumerCount = 50; producerCount = 1; messageCount = 1000; messageSize = 1; prefetchCount = messageCount / consumerCount; allMessagesList setMaximumDuration(allMessagesList getMaximumDuration() * 20); doMultipleClientsTest(); assertTotalMessagesReceived(messageCount * producerCount); } public void testManyProducersManyConsumers() throws Exception { consumerCount = 200; producerCount = 50; messageCount = 100; messageSize = 1; prefetchCount = 100; allMessagesList setMaximumDuration(allMessagesList getMaximumDuration() * 20); doMultipleClientsTest(); assertTotalMessagesReceived(messageCount * producerCount); } protected void configurePrefetchOfOne() { prefetchCount = 1; allMessagesList setMaximumDuration(allMessagesList getMaximumDuration() * 20); } public void doMultipleClientsTest() throws Exception { final ActiveMQDestination dest = createDestination(); ActiveMQConnectionFactory consumerFactory = (ActiveMQConnectionFactory)createConnectionFactory(); consumerFactory getPrefetchPolicy() setAll(prefetchCount); startConsumers(consumerFactory, dest); startProducers(dest, messageCount); int totalMessageCount = messageCount * producerCount; if (dest isTopic()) { totalMessageCount *= consumerCount; } waitForAllMessagesToBeReceived(totalMessageCount); } }",1.0,
2200,2200,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\RedeliveryRestartTest.,RedeliveryRestartTest,"public class RedeliveryRestartTest extends BrokerRestartTestSupport { private static final transient Logger LOG = LoggerFactory getLogger(RedeliveryRestartTest class); Override protected void configureBroker(BrokerService broker) throws Exception { super configureBroker(broker); KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker getPersistenceAdapter(); kahaDBPersistenceAdapter setRewriteOnRedelivery(true); kahaDBPersistenceAdapter setCleanupInterval(500); broker addConnector( tcp } public void testValidateRedeliveryFlagAfterRestart() throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory( failover ( + broker getTransportConnectors() get(0) getPublishableConnectString() + ) jms transactedIndividualAck=true ); ActiveMQConnection connection = (ActiveMQConnection) connectionFactory createConnection(); connection start(); populateDestination(10, queueName, connection); Session session = connection createSession(true, Session SESSION TRANSACTED); Destination destination = session createQueue(queueName); MessageConsumer consumer = session createConsumer(destination); TextMessage msg = null; for (int i=0; i<5;i++) { msg = (TextMessage) consumer receive(20000); LOG info( not redelivered got + msg); assertNotNull( got the message , msg); assertEquals( first delivery , 1, msg getLongProperty( JMSXDeliveryCount )); assertEquals( not a redelivery , false, msg getJMSRedelivered()); } session rollback(); consumer close(); restartBroker(); ((FailoverTransport) connection getTransport() narrow(FailoverTransport class)) add(true, broker getTransportConnectors() get(0) getPublishableConnectString()); consumer = session createConsumer(destination); for (int i=0; i<5;i++) { msg = (TextMessage) consumer receive(4000); LOG info( redelivered got + msg); assertNotNull( got the message again , msg); assertEquals( redelivery count survives restart , 2, msg getLongProperty( JMSXDeliveryCount )); assertEquals( re delivery flag , true, msg getJMSRedelivered()); } session commit(); for (int i=0; i<5;i++) { msg = (TextMessage) consumer receive(20000); LOG info( not redelivered got + msg); assertNotNull( got the message , msg); assertEquals( first delivery , 1, msg getLongProperty( JMSXDeliveryCount )); assertEquals( not a redelivery , false, msg getJMSRedelivered()); } session commit(); connection close(); } public void testValidateRedeliveryFlagAfterRecovery() throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory(broker getTransportConnectors() get(0) getPublishableConnectString() + jms transactedIndividualAck=true ); ActiveMQConnection connection = (ActiveMQConnection) connectionFactory createConnection(); connection start(); populateDestination(1, queueName, connection); Session session = connection createSession(true, Session SESSION TRANSACTED); Destination destination = session createQueue(queueName); MessageConsumer consumer = session createConsumer(destination); TextMessage msg = (TextMessage) consumer receive(20000); LOG info( got + msg); assertNotNull( got the message , msg); assertEquals( first delivery , 1, msg getLongProperty( JMSXDeliveryCount )); assertEquals( not a redelivery , false, msg getJMSRedelivered()); KahaDBPersistenceAdapter kahaDBPersistenceAdapter = (KahaDBPersistenceAdapter) broker getPersistenceAdapter(); kahaDBPersistenceAdapter getStore() getJournal() close(); broker waitUntilStopped(); broker = createRestartedBroker(); broker start(); connectionFactory = new ActiveMQConnectionFactory(broker getTransportConnectors() get(0) getPublishableConnectString() + jms transactedIndividualAck=true ); connection = (ActiveMQConnection) connectionFactory createConnection(); connection start(); session = connection createSession(true, Session SESSION TRANSACTED); consumer = session createConsumer(destination); msg = (TextMessage) consumer receive(10000); assertNotNull( got the message again , msg); assertEquals( redelivery count survives restart , 2, msg getLongProperty( JMSXDeliveryCount )); assertEquals( re delivery flag , true, msg getJMSRedelivered()); session commit(); connection close(); } private void populateDestination(final int nbMessages, final String destinationName, javax jms Connection connection) throws JMSException { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(destinationName); MessageProducer producer = session createProducer(destination); for (int i = 1; i <= nbMessages; i++) { producer send(session createTextMessage( <hello id= + i + /> )); } producer close(); session close(); } public static Test suite() { return suite(RedeliveryRestartTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } }",1.0,
2201,2201,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\SpringTest.,SpringTest,"public class SpringTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(SpringTest class); protected AbstractApplicationContext context; protected SpringConsumer consumer; protected SpringProducer producer; public void testSenderWithSpringXml() throws Exception { assertSenderConfig( org/apache/activemq/broker/spring xml ); } protected void assertSenderConfig(String config) throws Exception { context = new ClassPathXmlApplicationContext(config); consumer = (SpringConsumer) context getBean( consumer ); assertTrue( Found a valid consumer , consumer != null); consumer start(); producer = (SpringProducer) context getBean( producer ); assertTrue( Found a valid producer , producer != null); consumer flushMessages(); producer start(); consumer waitForMessagesToArrive(producer getMessageCount()); List messages = consumer flushMessages(); LOG info( Consumer has received messages ); for (Iterator iter = messages iterator(); iter hasNext();) { Object message = iter next(); LOG info( Received + message); } assertEquals( Message count , producer getMessageCount(), messages size()); } protected void tearDown() throws Exception { if (consumer != null) { consumer stop(); } if (producer != null) { producer stop(); } if (context != null) { context destroy(); } } }",1.0,
2202,2202,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\StubBroker.,StubBroker,"public class StubBroker extends EmptyBroker { public LinkedList<AddConnectionData> addConnectionData = new LinkedList<AddConnectionData>(); public LinkedList<RemoveConnectionData> removeConnectionData = new LinkedList<RemoveConnectionData>(); public class AddConnectionData { public final ConnectionContext connectionContext; public final ConnectionInfo connectionInfo; public AddConnectionData(ConnectionContext context, ConnectionInfo info) { connectionContext = context; connectionInfo = info; } } public static class RemoveConnectionData { public final ConnectionContext connectionContext; public final ConnectionInfo connectionInfo; public final Throwable error; public RemoveConnectionData(ConnectionContext context, ConnectionInfo info, Throwable error) { connectionContext = context; connectionInfo = info; this error = error; } } public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception { addConnectionData add(new AddConnectionData(context, info)); } public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception { removeConnectionData add(new RemoveConnectionData(context, info, error)); } }",1.0,
2203,2203,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\StubBroker.,AddConnectionData,"public class AddConnectionData { public final ConnectionContext connectionContext; public final ConnectionInfo connectionInfo; public AddConnectionData(ConnectionContext context, ConnectionInfo info) { connectionContext = context; connectionInfo = info; } }",1.0,
2204,2204,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\StubBroker.,RemoveConnectionData,"public static class RemoveConnectionData { public final ConnectionContext connectionContext; public final ConnectionInfo connectionInfo; public final Throwable error; public RemoveConnectionData(ConnectionContext context, ConnectionInfo info, Throwable error) { connectionContext = context; connectionInfo = info; this error = error; } }",1.0,
2205,2205,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\StubConnection.,StubConnection,"public class StubConnection implements Service { private final BlockingQueue<Object> dispatchQueue = new LinkedBlockingQueue<Object>(); private Connection connection; private Transport transport; private boolean shuttingDown; private TransportListener listener; public AtomicReference<Throwable> error = new AtomicReference<Throwable>(); public StubConnection(BrokerService broker) throws Exception { this(TransportFactory connect(broker getVmConnectorURI())); } public StubConnection(Connection connection) { this connection = connection; } public StubConnection(Transport transport) throws Exception { this(transport, null); } public StubConnection(Transport transport, TransportListener transportListener) throws Exception { listener = transportListener; this transport = transport; transport setTransportListener(new DefaultTransportListener() { public void onCommand(Object command) { try { if (command getClass() == ShutdownInfo class) { shuttingDown = true; } StubConnection this dispatch(command); } catch (Exception e) { onException(new IOException( + e)); } } public void onException(IOException e) { if (listener != null) { listener onException(e); } error set(e); } }); transport start(); } protected void dispatch(Object command) throws InterruptedException, IOException { if (listener != null) { listener onCommand(command); } dispatchQueue put(command); } public BlockingQueue<Object> getDispatchQueue() { return dispatchQueue; } public void send(Command command) throws Exception { if (command instanceof Message) { Message message = (Message)command; message setProducerId(message getMessageId() getProducerId()); } command setResponseRequired(false); if (connection != null) { Response response = connection service(command); if (response != null && response isException()) { ExceptionResponse er = (ExceptionResponse)response; throw JMSExceptionSupport create(er getException()); } } else if (transport != null) { transport oneway(command); } } public Response request(Command command) throws Exception { if (command instanceof Message) { Message message = (Message)command; message setProducerId(message getMessageId() getProducerId()); } command setResponseRequired(true); if (connection != null) { Response response = connection service(command); if (response != null && response isException()) { ExceptionResponse er = (ExceptionResponse)response; throw JMSExceptionSupport create(er getException()); } return response; } else if (transport != null) { Response response = (Response)transport request(command); if (response != null && response isException()) { ExceptionResponse er = (ExceptionResponse)response; throw JMSExceptionSupport create(er getException()); } return response; } return null; } public Connection getConnection() { return connection; } public Transport getTransport() { return transport; } public void start() throws Exception { } public void stop() throws Exception { shuttingDown = true; if (transport != null) { try { transport oneway(new ShutdownInfo()); } catch (IOException e) { } ServiceSupport dispose(transport); } } public TransportListener getListener() { return listener; } public void setListener(TransportListener listener) { this listener = listener; } }",1.0,
2209,2209,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\advisory\AdvisoryDuplexNetworkBridgeTest.,AdvisoryDuplexNetworkBridgeTest,public class AdvisoryDuplexNetworkBridgeTest extends AdvisoryNetworkBridgeTest { Override public void createBroker1() throws Exception { broker1 = new BrokerService(); broker1 setBrokerName( broker1 ); broker1 addConnector( tcp broker1 setUseJmx(false); broker1 setPersistent(false); broker1 start(); broker1 waitUntilStarted(); } Override public void createBroker2() throws Exception { broker2 = BrokerFactory createBroker(new URI( xbean org/apache/activemq/network/duplexLocalBroker xml )); broker2 start(); broker2 waitUntilStarted(); } public void assertCreatedByDuplex(boolean createdByDuplex) { assertTrue(createdByDuplex); } },1.0,
2211,2211,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\advisory\AdvisoryNetworkBridgeTest.,AdvisoryNetworkBridgeTest,"public class AdvisoryNetworkBridgeTest extends TestCase { BrokerService broker1; BrokerService broker2; public void testAdvisory() throws Exception { createBroker1(); ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( vm Connection conn = factory createConnection(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); conn start(); MessageConsumer consumer = sess createConsumer(AdvisorySupport getNetworkBridgeAdvisoryTopic()); Thread sleep(1000); createBroker2(); ActiveMQMessage advisory = (ActiveMQMessage)consumer receive(2000); assertNotNull(advisory); assertTrue(advisory getDataStructure() instanceof BrokerInfo); assertTrue(advisory getBooleanProperty( started )); assertCreatedByDuplex(advisory getBooleanProperty( createdByDuplex )); broker2 stop(); broker2 waitUntilStopped(); advisory = (ActiveMQMessage)consumer receive(2000); assertNotNull(advisory); assertTrue(advisory getDataStructure() instanceof BrokerInfo); assertFalse(advisory getBooleanProperty( started )); conn close(); } public void testAddConsumerLater() throws Exception { createBroker1(); createBroker2(); Thread sleep(1000); ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( vm Connection conn = factory createConnection(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); conn start(); MessageConsumer consumer = sess createConsumer(AdvisorySupport getNetworkBridgeAdvisoryTopic()); ActiveMQMessage advisory = (ActiveMQMessage)consumer receive(2000); assertNotNull(advisory); assertTrue(advisory getDataStructure() instanceof BrokerInfo); assertTrue(advisory getBooleanProperty( started )); assertCreatedByDuplex(advisory getBooleanProperty( createdByDuplex )); broker2 stop(); broker2 waitUntilStopped(); advisory = (ActiveMQMessage)consumer receive(2000); assertNotNull(advisory); assertTrue(advisory getDataStructure() instanceof BrokerInfo); assertFalse(advisory getBooleanProperty( started )); consumer = sess createConsumer(AdvisorySupport getNetworkBridgeAdvisoryTopic()); advisory = (ActiveMQMessage)consumer receive(1000); assertNull(advisory); conn close(); } public void assertCreatedByDuplex(boolean createdByDuplex) { assertFalse(createdByDuplex); } public void createBroker1() throws Exception { broker1 = BrokerFactory createBroker(new URI( xbean org/apache/activemq/network/reconnect-broker1 xml )); broker1 start(); broker1 waitUntilStarted(); } public void createBroker2() throws Exception { broker2 = BrokerFactory createBroker(new URI( xbean org/apache/activemq/network/reconnect-broker2 xml )); broker2 start(); broker2 waitUntilStarted(); } Override protected void tearDown() throws Exception { broker1 stop(); broker1 waitUntilStopped(); broker2 stop(); broker2 waitUntilStopped(); } }",1.0,
2212,2212,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest.,DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest,"public class DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest extends DbRestartJDBCQueueMasterSlaveLeaseTest { private static final transient Logger LOG = LoggerFactory getLogger(DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest class); private long restartDelay = 500; Override protected void configureBroker(BrokerService brokerService) { brokerService setIoExceptionHandler(new JDBCIOExceptionHandler()); } Override protected void delayTillRestartRequired() { if (restartDelay > 500) { LOG info( delay for more than lease quantum While Db is offline, master should stay alive but could loose lease ); } else { LOG info( delay for less than lease quantum While Db is offline, master should stay alive ); } try { TimeUnit MILLISECONDS sleep(restartDelay); } catch (InterruptedException e) { e printStackTrace(); } } Override protected void verifyExpectedBroker(int inflightMessageCount) { if (inflightMessageCount == 0 || (inflightMessageCount == failureCount + 10 && restartDelay <= 500)) { assertEquals( connected to master , master getBrokerName(), ((ActiveMQConnection)sendConnection) getBrokerName()); } } Override public void setUp() throws Exception { restartDelay = 500; super setUp(); } public void testSendReceiveWithLeaseExpiry() throws Exception { restartDelay = 3000; testSendReceive(); } public void testAdvisory() throws Exception {} }",1.0,
2213,2213,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\DbRestartJDBCQueueMasterSlaveLeaseTest.,DbRestartJDBCQueueMasterSlaveLeaseTest,"public class DbRestartJDBCQueueMasterSlaveLeaseTest extends DbRestartJDBCQueueMasterSlaveTest { private static final transient Logger LOG = LoggerFactory getLogger(DbRestartJDBCQueueMasterSlaveLeaseTest class); Override protected void configureJdbcPersistenceAdapter(JDBCPersistenceAdapter persistenceAdapter) throws IOException { super configureJdbcPersistenceAdapter(persistenceAdapter); persistenceAdapter setLocker(new LeaseDatabaseLocker()); persistenceAdapter getLocker() setLockAcquireSleepInterval(getLockAcquireSleepInterval()); persistenceAdapter setLockKeepAlivePeriod(getLockKeepAlivePeriod()); } private long getLockKeepAlivePeriod() { return 500; } private long getLockAcquireSleepInterval() { return 2000; } Override protected void delayTillRestartRequired() { LOG info( delay for less than lease quantum While Db is offline, master should stay alive ); try { TimeUnit SECONDS sleep(1); } catch (InterruptedException e) { e printStackTrace(); } } Override protected void verifyExpectedBroker(int inflightMessageCount) { if (inflightMessageCount == 0 || inflightMessageCount == failureCount + 10) { assertEquals( connected to master , master getBrokerName(), ((ActiveMQConnection)sendConnection) getBrokerName()); } } }",1.0,
2214,2214,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\DbRestartJDBCQueueMasterSlaveTest.,DbRestartJDBCQueueMasterSlaveTest,"public class DbRestartJDBCQueueMasterSlaveTest extends JDBCQueueMasterSlaveTest { private static final transient Logger LOG = LoggerFactory getLogger(DbRestartJDBCQueueMasterSlaveTest class); protected void messageSent() throws Exception { verifyExpectedBroker(inflightMessageCount); if (++inflightMessageCount == failureCount) { LOG info( STOPPING DB! !!!! ); final EmbeddedDataSource ds = ((SyncDataSource)getExistingDataSource()) getDelegate(); ds setShutdownDatabase( shutdown ); LOG info( DB STOPPED! !!!! ); Thread dbRestartThread = new Thread( db-re-start-thread ) { public void run() { delayTillRestartRequired(); ds setShutdownDatabase( false ); LOG info( DB RESTARTED! !!!! ); } }; dbRestartThread start(); } verifyExpectedBroker(inflightMessageCount); } protected void verifyExpectedBroker(int inflightMessageCount) { if (inflightMessageCount == 0) { assertEquals( connected to master , master getBrokerName(), ((ActiveMQConnection)sendConnection) getBrokerName()); } else if (inflightMessageCount == failureCount + 10) { assertEquals( connected to slave , slave get() getBrokerName(), ((ActiveMQConnection)sendConnection) getBrokerName()); } } protected void delayTillRestartRequired() { LOG info( Waiting for master broker to Stop ); master waitUntilStopped(); } protected void sendToProducer(MessageProducer producer, Destination producerDestination, Message message) throws JMSException { { boolean sent = false; do { try { producer send(producerDestination, message); sent = true; } catch (JMSException e) { LOG info( Exception on producer send for + message, e); try { Thread sleep(2000); } catch (InterruptedException ignored) { } } } while(!sent); } } Override protected Session createReceiveSession(Connection receiveConnection) throws Exception { return receiveConnection createSession(true, Session SESSION TRANSACTED); } Override protected void consumeMessage(Message message, List<Message> messageList) { try { receiveSession commit(); super consumeMessage(message, messageList); } catch (JMSException e) { LOG info( Failed to commit message receipt + message, e); try { receiveSession rollback(); } catch (JMSException ignored) {} if (e getCause() instanceof TransactionRolledBackException) { TransactionRolledBackException transactionRolledBackException = (TransactionRolledBackException)e getCause(); if (transactionRolledBackException getMessage() indexOf( in doubt ) != -1) { } } } } }",1.0,
2216,2216,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\JDBCQueueMasterSlaveTest.,JDBCQueueMasterSlaveTest,"public class JDBCQueueMasterSlaveTest extends QueueMasterSlaveTestSupport { protected DataSource sharedDs; protected String MASTER URL = tcp protected String SLAVE URL = tcp protected void setUp() throws Exception { sharedDs = new SyncDataSource((EmbeddedDataSource) DataSourceServiceSupport createDataSource(IOHelper getDefaultDataDirectory())); super setUp(); } protected void createMaster() throws Exception { master = new BrokerService(); master setBrokerName( master ); master addConnector(MASTER URL); master setUseJmx(false); master setPersistent(true); master setDeleteAllMessagesOnStartup(true); JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter(); persistenceAdapter setDataSource(getExistingDataSource()); configureJdbcPersistenceAdapter(persistenceAdapter); master setPersistenceAdapter(persistenceAdapter); configureBroker(master); master start(); } protected void configureBroker(BrokerService master) { } protected void createSlave() throws Exception { Thread t = new Thread() { public void run() { try { BrokerService broker = new BrokerService(); broker setBrokerName( slave ); TransportConnector connector = new TransportConnector(); connector setUri(new URI(SLAVE URL)); broker addConnector(connector); broker setUseJmx(false); broker setPersistent(true); JDBCPersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter(); persistenceAdapter setDataSource(getExistingDataSource()); persistenceAdapter setCreateTablesOnStartup(false); broker setPersistenceAdapter(persistenceAdapter); configureJdbcPersistenceAdapter(persistenceAdapter); configureBroker(broker); broker start(); slave set(broker); slaveStarted countDown(); } catch (IllegalStateException expectedOnShutdown) { } catch (Exception e) { fail( failed to start slave broker, reason + e); } } }; t start(); } protected void configureJdbcPersistenceAdapter(JDBCPersistenceAdapter persistenceAdapter) throws IOException { persistenceAdapter setLockKeepAlivePeriod(500); persistenceAdapter getLocker() setLockAcquireSleepInterval(500); } protected DataSource getExistingDataSource() throws Exception { return sharedDs; } class SyncDataSource implements DataSource { final EmbeddedDataSource delegate; SyncDataSource(EmbeddedDataSource dataSource) { this delegate = dataSource; } Override public Connection getConnection() throws SQLException { synchronized (this) { return delegate getConnection(); } } Override public Connection getConnection(String username, String password) throws SQLException { synchronized (this) { return delegate getConnection(); } } Override public PrintWriter getLogWriter() throws SQLException { return null; } Override public void setLogWriter(PrintWriter out) throws SQLException { } Override public void setLoginTimeout(int seconds) throws SQLException { } Override public int getLoginTimeout() throws SQLException { return 0; } Override public <T> T unwrap(Class<T> iface) throws SQLException { return null; } Override public boolean isWrapperFor(Class< > iface) throws SQLException { return false; } EmbeddedDataSource getDelegate() { return delegate; } public Logger getParentLogger() throws SQLFeatureNotSupportedException { return null; } }; }",1.0,
2217,2217,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\JDBCQueueMasterSlaveTest.,SyncDataSource,"class SyncDataSource implements DataSource { final EmbeddedDataSource delegate; SyncDataSource(EmbeddedDataSource dataSource) { this delegate = dataSource; } Override public Connection getConnection() throws SQLException { synchronized (this) { return delegate getConnection(); } } Override public Connection getConnection(String username, String password) throws SQLException { synchronized (this) { return delegate getConnection(); } } Override public PrintWriter getLogWriter() throws SQLException { return null; } Override public void setLogWriter(PrintWriter out) throws SQLException { } Override public void setLoginTimeout(int seconds) throws SQLException { } Override public int getLoginTimeout() throws SQLException { return 0; } Override public <T> T unwrap(Class<T> iface) throws SQLException { return null; } Override public boolean isWrapperFor(Class< > iface) throws SQLException { return false; } EmbeddedDataSource getDelegate() { return delegate; } public Logger getParentLogger() throws SQLFeatureNotSupportedException { return null; } };",1.0,
2218,2218,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\QueueMasterSlaveSingleUrlTest.,QueueMasterSlaveSingleUrlTest,public class QueueMasterSlaveSingleUrlTest extends QueueMasterSlaveTestSupport { private final String brokerUrl = tcp private final String singleUriString = failover Override protected void setUp() throws Exception { setAutoFail(true); super setUp(); } protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory(singleUriString); } protected void createMaster() throws Exception { master = new BrokerService(); master setBrokerName( shared-master ); configureSharedPersistenceAdapter(master); master addConnector(brokerUrl); master start(); } private void configureSharedPersistenceAdapter(BrokerService broker) throws Exception { AMQPersistenceAdapter adapter = new AMQPersistenceAdapter(); adapter setDirectory(new File( shared )); broker setPersistenceAdapter(adapter); } protected void createSlave() throws Exception { new Thread(new Runnable() { public void run() { try { BrokerService broker = new BrokerService(); broker setBrokerName( shared-slave ); configureSharedPersistenceAdapter(broker); final TransportConnector tConnector = new TransportConnector(); tConnector setUri(new URI(brokerUrl)); broker addConnector(tConnector); broker start(); slave set(broker); slaveStarted countDown(); } catch (Exception e) { e printStackTrace(); } } }) start(); } },1.0,
2220,2220,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\QueueMasterSlaveTestUsingSharedFileTest.,QueueMasterSlaveTestUsingSharedFileTest,public class QueueMasterSlaveTestUsingSharedFileTest extends QueueMasterSlaveTestSupport { protected String getSlaveXml() { return org/apache/activemq/broker/ft/sharedFileSlave xml ; } protected String getMasterXml() { return org/apache/activemq/broker/ft/sharedFileMaster xml ; } protected void createSlave() throws Exception { new Thread(new Runnable() { public void run() { try { QueueMasterSlaveTestUsingSharedFileTest super createSlave(); } catch (Exception e) { e printStackTrace(); } } }) start(); } },1.0,
2221,2221,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\jmx\BrokerViewSlowStoreStartupTest.,BrokerViewSlowStoreStartupTest,"public class BrokerViewSlowStoreStartupTest { private static final Logger LOG = LoggerFactory getLogger(BrokerViewSlowStoreStartupTest class); private final CountDownLatch holdStoreStart = new CountDownLatch(1); private final String brokerName = brokerViewTest ; private BrokerService broker; private Thread startThread; private BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName(brokerName); KahaDBStore kaha = new KahaDBStore() { Override public void start() throws Exception { LOG info( Test KahaDB class is waiting for signal to complete its start() ); holdStoreStart await(); super start(); LOG info( Test KahaDB class is completed its start() ); } }; kaha setDirectory(new File( target/activemq-data/kahadb )); kaha deleteAllMessages(); broker setPersistenceAdapter(kaha); broker setUseJmx(true); return broker; } Before public void setUp() throws Exception { broker = createBroker(); startThread = new Thread(new Runnable() { Override public void run() { try { broker start(); } catch(Exception e) { } } }); startThread start(); } After public void tearDown() throws Exception { holdStoreStart countDown(); startThread join(); if (broker != null) { broker stop(); broker waitUntilStopped(); } } Test(timeout=120000) public void testBrokerViewOnSlowStoreStart() throws Exception { assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return (broker getAdminView()) != null; } })); BrokerView view = broker getAdminView(); try { view getBrokerName(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getBrokerId(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTotalEnqueueCount(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTotalDequeueCount(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTotalConsumerCount(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTotalProducerCount(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTotalMessageCount(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTotalMessagesCached(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view resetStatistics(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view enableStatistics(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view disableStatistics(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view isStatisticsEnabled(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTopics(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getQueues(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTemporaryTopics(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTemporaryQueues(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTopicSubscribers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getDurableTopicSubscribers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getQueueSubscribers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTemporaryTopicSubscribers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTemporaryQueueSubscribers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getInactiveDurableTopicSubscribers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTopicProducers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getQueueProducers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTemporaryTopicProducers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getTemporaryQueueProducers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view getDynamicDestinationProducers(); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view removeConnector( tcp ); fail( Should have thrown an NoSuchElementException ); } catch(NoSuchElementException e) { } try { view removeNetworkConnector( tcp ); fail( Should have thrown an NoSuchElementException ); } catch(NoSuchElementException e) { } try { view addTopic( TEST ); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view addQueue( TEST ); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view removeTopic( TEST ); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view removeQueue( TEST ); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view createDurableSubscriber( 1 , 2 , 3 , 4 ); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } try { view destroyDurableSubscriber( 1 , 2 ); fail( Should have thrown an IllegalStateException ); } catch(IllegalStateException e) { } holdStoreStart countDown(); startThread join(); assertNotNull(view getBroker()); try { view getBrokerName(); } catch(Exception e) { fail( caught an exception getting the Broker property + e getClass() getName()); } try { view getBrokerId(); } catch(IllegalStateException e) { fail( caught an exception getting the Broker property + e getClass() getName()); } try { view getTotalEnqueueCount(); } catch(IllegalStateException e) { fail( caught an exception getting the Broker property + e getClass() getName()); } } }",1.0,
2226,2226,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\jmx\TransportConnectorMBeanTest.,TransportConnectorMBeanTest,"public class TransportConnectorMBeanTest { private static final Logger LOG = LoggerFactory getLogger(TransportConnectorMBeanTest class); BrokerService broker; Test public void verifyRemoteAddressInMbeanName() throws Exception { doVerifyRemoteAddressInMbeanName(true); } Test public void verifyRemoteAddressNotInMbeanName() throws Exception { doVerifyRemoteAddressInMbeanName(false); } private void doVerifyRemoteAddressInMbeanName(boolean allowRemoteAddress) throws Exception { createBroker(allowRemoteAddress); ActiveMQConnection connection = createConnection(); Set<ObjectName> registeredMbeans = getRegisteredMbeans(); assertEquals( presence of mbean with clientId , true, match(connection getClientID(), registeredMbeans)); assertEquals( presence of mbean with local port , allowRemoteAddress, match(extractLocalPort(connection), registeredMbeans)); } After public void stopBroker() throws Exception { if (broker != null) { broker stop(); } } private boolean match(String s, Set<ObjectName> registeredMbeans) { String encodedName = JMXSupport encodeObjectNamePart(s); for (ObjectName name registeredMbeans) { LOG info( checking for match + encodedName + , with + name toString()); if (name toString() contains(encodedName)) { return true; } } return false; } private String extractLocalPort(ActiveMQConnection connection) throws Exception { Socket socket = (Socket) connection getTransport() narrow(Socket class); return String valueOf(socket getLocalPort()); } private Set<ObjectName> getRegisteredMbeans() throws Exception { Thread sleep(200); return broker getManagementContext() queryNames(null, null); } private ActiveMQConnection createConnection() throws Exception { final String opts = jms watchTopicAdvisories=false ; ActiveMQConnection connection = (ActiveMQConnection) new ActiveMQConnectionFactory(broker getTransportConnectors() get(0) getConnectUri() + opts) createConnection(); connection start(); return connection; } private void createBroker(boolean allowRemoteAddressInMbeanNames) throws Exception { broker = new BrokerService(); broker setPersistent(false); broker addConnector( tcp broker getManagementContext() setAllowRemoteAddressInMBeanNames(allowRemoteAddressInMbeanNames); broker start(); } }",1.0,
2232,2232,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\IndividualDeadLetterTest.,IndividualDeadLetterTest,"public class IndividualDeadLetterTest extends DeadLetterTest { private static final Logger LOG = LoggerFactory getLogger(IndividualDeadLetterTest class); protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PolicyEntry policy = new PolicyEntry(); DeadLetterStrategy strategy = new IndividualDeadLetterStrategy(); strategy setProcessNonPersistent(true); policy setDeadLetterStrategy(strategy); PolicyMap pMap = new PolicyMap(); pMap setDefaultEntry(policy); broker setDestinationPolicy(pMap); return broker; } protected Destination createDlqDestination() { String prefix = topic ActiveMQ DLQ Topic ActiveMQ DLQ Queue ; return new ActiveMQQueue(prefix + getClass() getName() + + getName()); } public void testDLQBrowsing() throws Exception { super topic = false; deliveryMode = DeliveryMode PERSISTENT; durableSubscriber = false; messageCount = 1; connection start(); ActiveMQConnection amqConnection = (ActiveMQConnection) connection; rollbackCount = amqConnection getRedeliveryPolicy() getMaximumRedeliveries() + 1; LOG info( Will redeliver messages + rollbackCount + times ); sendMessages(); for (int i = 0; i < rollbackCount; i++) { makeConsumer(); Message message = consumer receive(5000); assertNotNull( No message received , message); session rollback(); LOG info( Rolled back + rollbackCount + times ); consumer close(); } makeDlqBrowser(); browseDlq(); dlqBrowser close(); session close(); Thread sleep(1000); session = connection createSession(transactedMode, acknowledgeMode); Queue testQueue = new ActiveMQQueue( ActiveMQ DLQ Queue ActiveMQ DLQ Queue + getClass() getName() + + getName()); MessageConsumer testConsumer = session createConsumer(testQueue); assertNull( The message shouldn t be sent to another DLQ , testConsumer receive(1000)); } protected void browseDlq() throws Exception { Enumeration messages = dlqBrowser getEnumeration(); while (messages hasMoreElements()) { LOG info( Browsing + messages nextElement()); } } }",1.0,
2233,2233,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\IndividualDeadLetterViaXmlTest.,IndividualDeadLetterViaXmlTest,public class IndividualDeadLetterViaXmlTest extends DeadLetterTest { private static final Logger LOG = LoggerFactory getLogger(IndividualDeadLetterViaXmlTest class); protected BrokerService createBroker() throws Exception { BrokerFactoryBean factory = new BrokerFactoryBean(new ClassPathResource( org/apache/activemq/broker/policy/individual-dlq xml )); factory afterPropertiesSet(); BrokerService answer = factory getBroker(); return answer; } protected Destination createDlqDestination() { String queueName = Test DLQ + getClass() getName() + + getName(); LOG info( Using queue name + queueName); return new ActiveMQQueue(queueName); } },1.0,
2235,2235,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\MessageListenerDeadLetterTest.,RollbackMessageListener,"class RollbackMessageListener implements MessageListener { final int maxRollbacks; final int deliveryCount; AtomicInteger rollbacks = new AtomicInteger(); RollbackMessageListener(int c, int delvery) { maxRollbacks = c; deliveryCount = delvery; } public void onMessage(Message message) { try { int expectedMessageId = rollbacks get() / deliveryCount; LOG info( expecting messageId + expectedMessageId); assertMessage(message, expectedMessageId); if (rollbacks incrementAndGet() > maxRollbacks) { fail( received too many messages, already done too many rollbacks + rollbacks); } session rollback(); } catch (Throwable e) { LOG error( unexpected exception + e, e); if (e instanceof Error) { error[0] = (Error) e; } else { fail( unexpected exception + e); } } } }",1.0,
2237,2237,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\NoRetryDeadLetterTest.,NoRetryDeadLetterTest,public class NoRetryDeadLetterTest extends DeadLetterTest { private static final Logger LOG = LoggerFactory getLogger(NoRetryDeadLetterTest class); protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { ActiveMQConnectionFactory connectionFactory = super createConnectionFactory(); RedeliveryPolicy redeliveryPolicy = new RedeliveryPolicy(); redeliveryPolicy setMaximumRedeliveries(0); connectionFactory setRedeliveryPolicy(redeliveryPolicy); return connectionFactory; } },1.0,
2238,2238,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\PerDurableConsumerDeadLetterTest.,PerDurableConsumerDeadLetterTest,public class PerDurableConsumerDeadLetterTest extends DeadLetterTest { private static final Logger LOG = LoggerFactory getLogger(PerDurableConsumerDeadLetterTest class); private static final String CLIENT ID = george ; protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PolicyEntry policy = new PolicyEntry(); IndividualDeadLetterStrategy strategy = new IndividualDeadLetterStrategy(); strategy setProcessNonPersistent(true); strategy setDestinationPerDurableSubscriber(true); policy setDeadLetterStrategy(strategy); PolicyMap pMap = new PolicyMap(); pMap setDefaultEntry(policy); broker setDestinationPolicy(pMap); return broker; } protected String createClientId() { return CLIENT ID; } protected Destination createDlqDestination() { String prefix = topic ActiveMQ DLQ Topic ActiveMQ DLQ Queue ; String destinationName = prefix + getClass() getName() + + getName(); if (durableSubscriber) { String subName = CLIENT ID + + getDestination() toString(); destinationName += + subName ; } return new ActiveMQQueue(destinationName); } },1.0,
2241,2241,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\SimpleDispatchPolicyTest.,SimpleDispatchPolicyTest,"public class SimpleDispatchPolicyTest extends QueueSubscriptionTest { protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PolicyEntry policy = new PolicyEntry(); policy setDispatchPolicy(new SimpleDispatchPolicy()); policy setSubscriptionRecoveryPolicy(new FixedCountSubscriptionRecoveryPolicy()); PolicyMap pMap = new PolicyMap(); pMap setDefaultEntry(policy); broker setDestinationPolicy(pMap); return broker; } public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception { super testOneProducerTwoConsumersSmallMessagesLargePrefetch(); } public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception { super testOneProducerTwoConsumersLargeMessagesLargePrefetch(); } public void assertOneConsumerReceivedAllMessages(int messageCount) throws Exception { boolean found = false; for (Iterator i = consumers keySet() iterator(); i hasNext();) { MessageIdList messageIdList = (MessageIdList)consumers get(i next()); int count = messageIdList getMessageCount(); if (count > 0) { if (found) { fail( No other consumers should have received any messages ); } else { assertEquals( Consumer should have received all messages , messageCount, count); found = true; } } } if (!found) { fail( At least one consumer should have received all messages ); } } }",1.0,
2242,2242,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\StrictOrderDispatchPolicyTest.,StrictOrderDispatchPolicyTest,"public class StrictOrderDispatchPolicyTest extends TopicSubscriptionTest { protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PolicyEntry policy = new PolicyEntry(); policy setDispatchPolicy(new StrictOrderDispatchPolicy()); PolicyMap pMap = new PolicyMap(); pMap setDefaultEntry(policy); broker setDestinationPolicy(pMap); return broker; } public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception { super testOneProducerTwoConsumersLargeMessagesOnePrefetch(); assertReceivedMessagesAreOrdered(); } public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception { super testOneProducerTwoConsumersSmallMessagesOnePrefetch(); assertReceivedMessagesAreOrdered(); } public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception { super testOneProducerTwoConsumersSmallMessagesLargePrefetch(); assertReceivedMessagesAreOrdered(); } public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception { super testOneProducerTwoConsumersLargeMessagesLargePrefetch(); assertReceivedMessagesAreOrdered(); } public void testOneProducerManyConsumersFewMessages() throws Exception { super testOneProducerManyConsumersFewMessages(); assertReceivedMessagesAreOrdered(); } public void testOneProducerManyConsumersManyMessages() throws Exception { super testOneProducerManyConsumersManyMessages(); assertReceivedMessagesAreOrdered(); } public void testManyProducersOneConsumer() throws Exception { super testManyProducersOneConsumer(); assertReceivedMessagesAreOrdered(); } public void testManyProducersManyConsumers() throws Exception { super testManyProducersManyConsumers(); assertReceivedMessagesAreOrdered(); } public void assertReceivedMessagesAreOrdered() throws Exception { if (consumers size() <= 1) { return; } Iterator i = consumers keySet() iterator(); MessageIdList messageOrder = (MessageIdList)consumers get(i next()); for (; i hasNext();) { MessageIdList messageIdList = (MessageIdList)consumers get(i next()); assertTrue( Messages are not ordered , messageOrder equals(messageIdList)); } } }",1.0,
2243,2243,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\DestinationGCTest.,DestinationGCTest,"public class DestinationGCTest extends EmbeddedBrokerTestSupport { ActiveMQQueue queue = new ActiveMQQueue( TEST ); Override protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); broker setDestinations(new ActiveMQDestination[] {queue}); broker setSchedulePeriodForDestinationPurge(1000); broker setMaxPurgedDestinationsPerSweep(1); PolicyEntry entry = new PolicyEntry(); entry setGcInactiveDestinations(true); entry setInactiveTimoutBeforeGC(3000); PolicyMap map = new PolicyMap(); map setDefaultEntry(entry); broker setDestinationPolicy(map); return broker; } public void testDestinationGc() throws Exception { assertEquals(1, broker getAdminView() getQueues() length); assertTrue( After GC runs the Queue should be empty , Wait waitFor(new Condition() { Override public boolean isSatisified() throws Exception { return broker getAdminView() getQueues() length == 0; } })); } public void testDestinationGcLimit() throws Exception { broker getAdminView() addQueue( TEST1 ); broker getAdminView() addQueue( TEST2 ); broker getAdminView() addQueue( TEST3 ); broker getAdminView() addQueue( TEST4 ); assertEquals(5, broker getAdminView() getQueues() length); Thread sleep(7000); int queues = broker getAdminView() getQueues() length; assertTrue(queues > 0 && queues < 5); assertTrue( After GC runs the Queue should be empty , Wait waitFor(new Condition() { Override public boolean isSatisified() throws Exception { return broker getAdminView() getQueues() length == 0; } })); } }",1.0,
2247,2247,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\QueueOptimizedDispatchExceptionTest.,MockMemoryUsage,private class MockMemoryUsage extends MemoryUsage { private boolean full = true; public void setFull(boolean full) { this full = full; } Override public boolean isFull() { return full; } } Test,1.0,
2250,2250,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\CursorDurableTest.,CursorDurableTest,"public class CursorDurableTest extends CursorSupport { protected Destination getDestination(Session session) throws JMSException { String topicName = getClass() getName(); return session createTopic(topicName); } protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException { Connection connection = fac createConnection(); connection setClientID( testConsumer ); connection start(); return connection; } protected MessageConsumer getConsumer(Connection connection) throws Exception { Session consumerSession = connection createSession(false, Session AUTO ACKNOWLEDGE); Topic topic = (Topic)getDestination(consumerSession); MessageConsumer consumer = consumerSession createDurableSubscriber(topic, testConsumer ); return consumer; } protected void configureBroker(BrokerService answer) throws Exception { answer setDeleteAllMessagesOnStartup(true); answer addConnector(bindAddress); answer setDeleteAllMessagesOnStartup(true); } }",1.0,
2253,2253,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\FilePendingMessageCursorTestSupport.,FilePendingMessageCursorTestSupport,"public class FilePendingMessageCursorTestSupport { protected static final Logger LOG = LoggerFactory getLogger(FilePendingMessageCursorTestSupport class); protected BrokerService brokerService; protected FilePendingMessageCursor underTest; After public void stopBroker() throws Exception { if (brokerService != null) { brokerService getTempDataStore() stop(); } } private void createBrokerWithTempStoreLimit() throws Exception { brokerService = new BrokerService(); brokerService setUseJmx(false); SystemUsage usage = brokerService getSystemUsage(); usage getTempUsage() setLimit(1025*1024*15); PList dud = brokerService getTempDataStore() getPList( dud ); dud addFirst( A , new ByteSequence( A getBytes())); } Test public void testAddToEmptyCursorWhenTempStoreIsFull() throws Exception { createBrokerWithTempStoreLimit(); SystemUsage usage = brokerService getSystemUsage(); assertTrue( temp store is full % + usage getTempUsage() getPercentUsage(), usage getTempUsage() isFull()); underTest = new FilePendingMessageCursor(brokerService getBroker(), test , false); underTest setSystemUsage(usage); underTest addMessageLast(QueueMessageReference NULL MESSAGE); assertFalse( cursor is not full , underTest isFull()); } Test public void testResetClearsIterator() throws Exception { createBrokerWithTempStoreLimit(); underTest = new FilePendingMessageCursor(brokerService getBroker(), test , false); underTest addMessageLast(QueueMessageReference NULL MESSAGE); underTest reset(); underTest release(); try { underTest hasNext(); fail( expect npe on use of iterator after release ); } catch (NullPointerException expected) {} } }",1.0,
2254,2254,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\NegativeQueueTest.,NegativeQueueTest,"public class NegativeQueueTest extends AutoFailTestSupport { private static final Logger LOG = LoggerFactory getLogger(NegativeQueueTest class); public static SimpleDateFormat formatter = new SimpleDateFormat( yyyyMMdd,hh mm ss SSS ); private static final String QUEUE 1 NAME = conn test queue 1 ; private static final String QUEUE 2 NAME = conn test queue 2 ; private static final long QUEUE MEMORY LIMIT = 2097152; private static final long MEMORY USAGE = 400000000; private static final long TEMP USAGE = 200000000; private static final long STORE USAGE = 1000000000; private static final int MESSAGE COUNT = 1100; protected static final boolean TRANSACTED = true; protected static final boolean DEBUG = true; protected static int NUM CONSUMERS = 20; protected static int PREFETCH SIZE = 1000; protected BrokerService broker; protected String bindAddress = tcp public void testWithDefaultPrefetch() throws Exception{ PREFETCH SIZE = 1000; NUM CONSUMERS = 20; blastAndConsume(); } public void x testWithDefaultPrefetchFiveConsumers() throws Exception{ PREFETCH SIZE = 1000; NUM CONSUMERS = 5; blastAndConsume(); } public void x testWithDefaultPrefetchTwoConsumers() throws Exception{ PREFETCH SIZE = 1000; NUM CONSUMERS = 2; blastAndConsume(); } public void testWithDefaultPrefetchOneConsumer() throws Exception{ PREFETCH SIZE = 1000; NUM CONSUMERS = 1; blastAndConsume(); } public void testWithMediumPrefetch() throws Exception{ PREFETCH SIZE = 50; NUM CONSUMERS = 20; blastAndConsume(); } public void x testWithSmallPrefetch() throws Exception{ PREFETCH SIZE = 10; NUM CONSUMERS = 20; blastAndConsume(); } public void testWithNoPrefetch() throws Exception{ PREFETCH SIZE = 1; NUM CONSUMERS = 20; blastAndConsume(); } public void blastAndConsume() throws Exception { LOG info(getName()); ConnectionFactory factory = createConnectionFactory(); Connection proxyConnection = factory createConnection(); proxyConnection start(); Session proxySession = proxyConnection createSession(false, Session AUTO ACKNOWLEDGE); final QueueViewMBean proxyQueue1 = getProxyToQueueViewMBean(proxySession createQueue(QUEUE 1 NAME)); final QueueViewMBean proxyQueue2 = getProxyToQueueViewMBean(proxySession createQueue(QUEUE 2 NAME)); Connection producerConnection = factory createConnection(); producerConnection start(); Session session = producerConnection createSession(TRANSACTED, Session AUTO ACKNOWLEDGE); Destination queue = session createQueue(QUEUE 1 NAME); MessageProducer producer = session createProducer(queue); List<TextMessage> senderList = new ArrayList<TextMessage>(); for (int i = 0; i < MESSAGE COUNT; i++) { TextMessage msg = session createTextMessage(i + + formatter format(new Date())); senderList add(msg); producer send(msg); if(TRANSACTED) session commit(); if(DEBUG && i%100 == 0){ int index = (i/100)+1; System out print(index-((index/10)*10)); } } if(DEBUG){ System out println( ); System out println( Queue1 Size = +proxyQueue1 getQueueSize()); System out println( Queue1 Memory % Used = +proxyQueue1 getMemoryPercentUsage()); System out println( Queue1 Memory Available = +proxyQueue1 getMemoryLimit()); } final CountDownLatch latch1 = new CountDownLatch(1); final CountDownLatch latch2 = new CountDownLatch(1); Connection[] consumerConnections1 = new Connection[NUM CONSUMERS]; List<Message> consumerList1 = new ArrayList<Message>(); Connection[] consumerConnections2 = new Connection[NUM CONSUMERS]; Connection[] producerConnections2 = new Connection[NUM CONSUMERS]; List<Message> consumerList2 = new ArrayList<Message>(); for(int ix=0; ix<NUM CONSUMERS; ix++){ producerConnections2[ix] = factory createConnection(); producerConnections2[ix] start(); consumerConnections1[ix] = getConsumerConnection(factory); Session consumerSession = consumerConnections1[ix] createSession(TRANSACTED, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = consumerSession createConsumer(session createQueue(QUEUE 1 NAME)); consumer setMessageListener(new SessionAwareMessageListener(producerConnections2[ix], consumerSession, QUEUE 2 NAME, latch1, consumerList1)); } latch1 await(200000, TimeUnit MILLISECONDS); if(DEBUG){ System out println( ); System out println( Queue2 Size = +proxyQueue2 getQueueSize()); System out println( Queue2 Memory % Used = +proxyQueue2 getMemoryPercentUsage()); System out println( Queue2 Memory Available = +proxyQueue2 getMemoryLimit()); } for(int ix=0; ix<NUM CONSUMERS; ix++){ consumerConnections2[ix] = getConsumerConnection(factory); Session consumerSession = consumerConnections2[ix] createSession(TRANSACTED, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = consumerSession createConsumer(session createQueue(QUEUE 2 NAME)); consumer setMessageListener(new SessionAwareMessageListener(consumerSession, latch2, consumerList2)); } boolean success = Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { boolean done = latch2 await(10, TimeUnit SECONDS); if(DEBUG){ System out println( ); System out println( Queue1 Size = +proxyQueue1 getQueueSize()); System out println( Queue1 Memory % Used = +proxyQueue1 getMemoryPercentUsage()); System out println( Queue2 Size = +proxyQueue2 getQueueSize()); System out println( Queue2 Memory % Used = +proxyQueue2 getMemoryPercentUsage()); System out println( Queue2 Memory Available = +proxyQueue2 getMemoryLimit()); } return done; } }, 300 * 1000); if (!success) { dumpAllThreads( blocked waiting on 2 ); } assertTrue( got all expected messages on 2 , success); producerConnection close(); for(int ix=0; ix<NUM CONSUMERS; ix++){ consumerConnections1[ix] close(); consumerConnections2[ix] close(); producerConnections2[ix] close(); } Thread sleep(500); if(DEBUG){ System out println( ); System out println( Queue1 Size = +proxyQueue1 getQueueSize()); System out println( Queue1 Memory % Used = +proxyQueue1 getMemoryPercentUsage()); System out println( Queue2 Size = +proxyQueue2 getQueueSize()); System out println( Queue2 Memory % Used = +proxyQueue2 getMemoryPercentUsage()); } Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 0 == proxyQueue1 getQueueSize(); }}); assertEquals( Queue1 has gone negative, ,0, proxyQueue1 getQueueSize()); Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 0 == proxyQueue2 getQueueSize(); }}); assertEquals( Queue2 has gone negative, ,0, proxyQueue2 getQueueSize()); proxyConnection close(); } private QueueViewMBean getProxyToQueueViewMBean(Queue queue) throws MalformedObjectNameException, JMSException { final String prefix = org apache activemq type=Broker,brokerName=localhost,destinationType=Queue,destinationName= ; ObjectName queueViewMBeanName = new ObjectName(prefix + queue getQueueName()); QueueViewMBean proxy = (QueueViewMBean) broker getManagementContext() newProxyInstance(queueViewMBeanName, QueueViewMBean class, true); return proxy; } protected Connection getConsumerConnection(ConnectionFactory fac) throws JMSException { Connection connection = fac createConnection(); connection start(); return connection; } Override protected void setUp() throws Exception { if (broker == null) { broker = createBroker(); } super setUp(); } Override protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); broker waitUntilStopped(); } } protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(bindAddress); Properties props = new Properties(); props setProperty( prefetchPolicy durableTopicPrefetch , + PREFETCH SIZE); props setProperty( prefetchPolicy optimizeDurableTopicPrefetch , + PREFETCH SIZE); props setProperty( prefetchPolicy queuePrefetch , + PREFETCH SIZE); cf setProperties(props); return cf; } protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); configureBroker(answer); answer start(); answer waitUntilStarted(); bindAddress = answer getTransportConnectors() get(0) getConnectUri() toString(); return answer; } protected void configureBroker(BrokerService answer) throws Exception { PolicyEntry policy = new PolicyEntry(); policy setMemoryLimit(QUEUE MEMORY LIMIT); policy setPendingQueuePolicy(new StorePendingQueueMessageStoragePolicy()); PolicyMap pMap = new PolicyMap(); pMap setDefaultEntry(policy); answer setDestinationPolicy(pMap); answer setDeleteAllMessagesOnStartup(true); answer addConnector( tcp MemoryUsage memoryUsage = new MemoryUsage(); memoryUsage setLimit(MEMORY USAGE); memoryUsage setPercentUsageMinDelta(20); TempUsage tempUsage = new TempUsage(); tempUsage setLimit(TEMP USAGE); StoreUsage storeUsage = new StoreUsage(); storeUsage setLimit(STORE USAGE); SystemUsage systemUsage = new SystemUsage(); systemUsage setMemoryUsage(memoryUsage); systemUsage setTempUsage(tempUsage); systemUsage setStoreUsage(storeUsage); answer setSystemUsage(systemUsage); } class SessionAwareMessageListener implements MessageListener{ private final List<Message> consumerList; private final CountDownLatch latch; private final Session consumerSession; private Session producerSession; private MessageProducer producer; public SessionAwareMessageListener(Session consumerSession, CountDownLatch latch, List<Message> consumerList){ this(null, consumerSession, null, latch, consumerList); } public SessionAwareMessageListener(Connection producerConnection, Session consumerSession, String outQueueName, CountDownLatch latch, List<Message> consumerList){ this consumerList = consumerList; this latch = latch; this consumerSession = consumerSession; if(producerConnection != null){ try { producerSession = producerConnection createSession(TRANSACTED, Session AUTO ACKNOWLEDGE); Destination queue = producerSession createQueue(outQueueName); producer = producerSession createProducer(queue); } catch (JMSException e) { e printStackTrace(); } } } Override public void onMessage(Message msg) { try { if(producer == null){ Thread sleep(50); }else{ producer send(msg); if(TRANSACTED) producerSession commit(); } } catch (Exception e) { e printStackTrace(); } synchronized(consumerList){ consumerList add(msg); if(DEBUG && consumerList size()%100 == 0) { int index = consumerList size()/100; System out print(index-((index/10)*10)); } if (consumerList size() == MESSAGE COUNT) { latch countDown(); } } if(TRANSACTED){ try { consumerSession commit(); } catch (JMSException e) { e printStackTrace(); } } } } }",1.0,
2255,2255,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\NegativeQueueTest.,SessionAwareMessageListener,"class SessionAwareMessageListener implements MessageListener{ private final List<Message> consumerList; private final CountDownLatch latch; private final Session consumerSession; private Session producerSession; private MessageProducer producer; public SessionAwareMessageListener(Session consumerSession, CountDownLatch latch, List<Message> consumerList){ this(null, consumerSession, null, latch, consumerList); } public SessionAwareMessageListener(Connection producerConnection, Session consumerSession, String outQueueName, CountDownLatch latch, List<Message> consumerList){ this consumerList = consumerList; this latch = latch; this consumerSession = consumerSession; if(producerConnection != null){ try { producerSession = producerConnection createSession(TRANSACTED, Session AUTO ACKNOWLEDGE); Destination queue = producerSession createQueue(outQueueName); producer = producerSession createProducer(queue); } catch (JMSException e) { e printStackTrace(); } } } Override public void onMessage(Message msg) { try { if(producer == null){ Thread sleep(50); }else{ producer send(msg); if(TRANSACTED) producerSession commit(); } } catch (Exception e) { e printStackTrace(); } synchronized(consumerList){ consumerList add(msg); if(DEBUG && consumerList size()%100 == 0) { int index = consumerList size()/100; System out print(index-((index/10)*10)); } if (consumerList size() == MESSAGE COUNT) { latch countDown(); } } if(TRANSACTED){ try { consumerSession commit(); } catch (JMSException e) { e printStackTrace(); } } } }",1.0,
2257,2257,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\OrderPendingListTest.,TestPendingList,"static class TestPendingList implements PendingList { private final LinkedList<MessageReference> theList = new LinkedList<MessageReference>(); Override public boolean isEmpty() { return theList isEmpty(); } Override public void clear() { theList clear(); } Override public PendingNode addMessageFirst(MessageReference message) { theList addFirst(message); return new PendingNode(null, message); } Override public PendingNode addMessageLast(MessageReference message) { theList addLast(message); return new PendingNode(null, message); } Override public PendingNode remove(MessageReference message) { if (theList remove(message)) { return new PendingNode(null, message); } else { return null; } } Override public int size() { return theList size(); } Override public Iterator<MessageReference> iterator() { return theList iterator(); } Override public boolean contains(MessageReference message) { return theList contains(message); } Override public Collection<MessageReference> values() { return theList; } Override public void addAll(PendingList pendingList) { for(MessageReference messageReference pendingList) { theList add(messageReference); } } }",1.0,
2261,2261,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\StoreBasedCursorTest.,StoreBasedCursorTest,"public class StoreBasedCursorTest extends TestCase { protected String bindAddress = tcp BrokerService broker; ActiveMQConnectionFactory factory; Connection connection; Session session; Queue queue; int messageSize = 1024; int memoryLimit = 12 * messageSize; protected void setUp() throws Exception { super setUp(); if (broker == null) { broker = new BrokerService(); broker setAdvisorySupport(false); } } protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); broker = null; } } protected void start() throws Exception { broker start(); factory = new ActiveMQConnectionFactory( vm factory setWatchTopicAdvisories(false); connection = factory createConnection(); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); queue = session createQueue( QUEUE + this getClass() getName()); } protected void stop() throws Exception { session close(); connection close(); broker stop(); broker = null; } protected void configureBroker(long memoryLimit, long systemLimit) throws Exception { broker setDeleteAllMessagesOnStartup(true); broker addConnector(bindAddress); broker setPersistent(true); SystemUsage systemUsage = broker getSystemUsage(); systemUsage setSendFailIfNoSpace(true); systemUsage getMemoryUsage() setLimit(systemLimit); PolicyEntry policy = new PolicyEntry(); policy setProducerFlowControl(true); policy setUseCache(true); PolicyMap pMap = new PolicyMap(); pMap setDefaultEntry(policy); broker setDestinationPolicy(pMap); } protected String createMessageText(int index) { StringBuffer buffer = new StringBuffer(messageSize); buffer append( Message + index + sent at + new Date()); if (buffer length() > messageSize) { return buffer substring(0, messageSize); } for (int i = buffer length(); i < messageSize; i++) { buffer append( ); } return buffer toString(); } protected void sendMessages(int deliveryMode) throws Exception { start(); MessageProducer producer = session createProducer(queue); producer setDeliveryMode(deliveryMode); int i =0; try { for (i = 0; i < 200; i++) { TextMessage message = session createTextMessage(createMessageText(i)); producer send(message); } } catch (javax jms ResourceAllocationException e) { e printStackTrace(); fail(e getMessage() + num msgs = + i + percentUsage = + broker getSystemUsage() getMemoryUsage() getPercentUsage()); } stop(); } public void testTwoUsageEqualPersistent() throws Exception { configureBroker(memoryLimit, memoryLimit); sendMessages(DeliveryMode PERSISTENT); } public void testUseCachePersistent() throws Exception { int limit = memoryLimit / 2; configureBroker(limit, memoryLimit); sendMessages(DeliveryMode PERSISTENT); } public void testMemoryUsageLowPersistent() throws Exception { configureBroker(memoryLimit, 10 * memoryLimit); sendMessages(DeliveryMode PERSISTENT); } public void testTwoUsageEqualNonPersistent() throws Exception { configureBroker(memoryLimit, memoryLimit); sendMessages(DeliveryMode NON PERSISTENT); } public void testMemoryUsageLowNonPersistent() throws Exception { configureBroker(memoryLimit, 10 * memoryLimit); sendMessages(DeliveryMode NON PERSISTENT); } }",1.0,
2262,2262,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\StoreQueueCursorJDBCNoDuplicateTest.,StoreQueueCursorJDBCNoDuplicateTest,public class StoreQueueCursorJDBCNoDuplicateTest extends StoreQueueCursorNoDuplicateTest { protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PersistenceAdapter persistenceAdapter = new JDBCPersistenceAdapter(); broker setPersistenceAdapter(persistenceAdapter); return broker; } },1.0,
2263,2263,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\StoreQueueCursorJournalNoDuplicateTest.,StoreQueueCursorJournalNoDuplicateTest,"public class StoreQueueCursorJournalNoDuplicateTest extends StoreQueueCursorNoDuplicateTest { Override protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); File dataFileDir = new File( target/activemq-data/StoreQueueCursorJournalNoDuplicateTest ); File journalDir = new File(dataFileDir, journal ) getCanonicalFile(); JournalImpl journal = new JournalImpl(journalDir, 3, 1024 * 1024 * 20); KahaPersistenceAdapter kahaAdaptor = new KahaPersistenceAdapter(); kahaAdaptor setDirectory(dataFileDir); JournalPersistenceAdapter journalAdaptor = new JournalPersistenceAdapter(journal, kahaAdaptor, broker getTaskRunnerFactory()); journalAdaptor setMaxCheckpointWorkers(1); broker setPersistenceAdapter(journalAdaptor); return broker; } }",1.0,
2264,2264,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\StoreQueueCursorKahaDBNoDuplicateTest.,StoreQueueCursorKahaDBNoDuplicateTest,public class StoreQueueCursorKahaDBNoDuplicateTest extends StoreQueueCursorNoDuplicateTest { Override protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PersistenceAdapter persistenceAdapter = new KahaDBStore(); persistenceAdapter setDirectory(new File( target/activemq-data/kahadb )); broker setPersistenceAdapter(persistenceAdapter); return broker; } },1.0,
2265,2265,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\StoreQueueCursorMemoryNoDuplicateTest.,StoreQueueCursorMemoryNoDuplicateTest,public class StoreQueueCursorMemoryNoDuplicateTest extends StoreQueueCursorNoDuplicateTest { protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); broker setPersistent(false); return broker; } },1.0,
2267,2267,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\group\MessageGroupHashBucketTest.,MessageGroupHashBucketTest,public class MessageGroupHashBucketTest extends MessageGroupMapTest { protected MessageGroupMap createMessageGroupMap() { return new MessageGroupHashBucket(1024); } },1.0,
2270,2270,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\scheduler\JmsCronSchedulerTest.,JmsCronSchedulerTest,"public class JmsCronSchedulerTest extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(JmsCronSchedulerTest class); public void testSimulatenousCron() throws Exception { final int COUNT = 10; final AtomicInteger count = new AtomicInteger(); Connection connection = createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(destination); final CountDownLatch latch = new CountDownLatch(COUNT); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { latch countDown(); count incrementAndGet(); LOG debug( Received one Message, count is at + count get()); } }); connection start(); for (int i = 0; i < COUNT; i++) { MessageProducer producer = session createProducer(destination); TextMessage message = session createTextMessage( test msg +i); message setStringProperty(ScheduledMessage AMQ SCHEDULED CRON, * * * * * ); producer send(message); producer close(); Thread sleep(2000); } SchedulerBroker sb = (SchedulerBroker) this broker getBroker() getAdaptor(SchedulerBroker class); JobScheduler js = sb getJobScheduler(); List<Job> list = js getAllJobs(); assertEquals(COUNT, list size()); latch await(2, TimeUnit MINUTES); assertEquals(COUNT, count get()); } public void testCronScheduleWithTtlSet() throws Exception { Connection connection = createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(destination); connection start(); MessageProducer producer = session createProducer(destination); producer setTimeToLive(TimeUnit MINUTES toMillis(1)); TextMessage message = session createTextMessage( test msg ); message setStringProperty(ScheduledMessage AMQ SCHEDULED CRON, * * * * * ); producer send(message); producer close(); Thread sleep(TimeUnit MINUTES toMillis(2)); assertNotNull(consumer receiveNoWait()); assertNull(consumer receiveNoWait()); } Override protected void setUp() throws Exception { bindAddress = vm super setUp(); } Override protected BrokerService createBroker() throws Exception { return createBroker(true); } protected BrokerService createBroker(boolean delete) throws Exception { File schedulerDirectory = new File( target/scheduler ); if (delete) { IOHelper mkdirs(schedulerDirectory); IOHelper deleteChildren(schedulerDirectory); } BrokerService answer = new BrokerService(); answer setPersistent(isPersistent()); answer getManagementContext() setCreateConnector(false); answer setDeleteAllMessagesOnStartup(true); answer setDataDirectory( target ); answer setSchedulerDirectoryFile(schedulerDirectory); answer setSchedulerSupport(true); answer setUseJmx(false); answer addConnector(bindAddress); return answer; } }",1.0,
2271,2271,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\scheduler\JmsSchedulerTest.,JmsSchedulerTest,"public class JmsSchedulerTest extends EmbeddedBrokerTestSupport { public void testCron() throws Exception { final int COUNT = 10; final AtomicInteger count = new AtomicInteger(); Connection connection = createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(destination); final CountDownLatch latch = new CountDownLatch(COUNT); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { latch countDown(); count incrementAndGet(); } }); connection start(); MessageProducer producer = session createProducer(destination); TextMessage message = session createTextMessage( test msg ); long time = 1000; message setStringProperty(ScheduledMessage AMQ SCHEDULED CRON, * * * * * ); message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, time); message setLongProperty(ScheduledMessage AMQ SCHEDULED PERIOD, 500); message setIntProperty(ScheduledMessage AMQ SCHEDULED REPEAT, COUNT - 1); producer send(message); producer close(); Thread sleep(500); SchedulerBroker sb = (SchedulerBroker) this broker getBroker() getAdaptor(SchedulerBroker class); JobScheduler js = sb getJobScheduler(); List<Job> list = js getAllJobs(); assertEquals(1, list size()); latch await(240, TimeUnit SECONDS); assertEquals(COUNT, count get()); } public void testSchedule() throws Exception { final int COUNT = 1; Connection connection = createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(destination); final CountDownLatch latch = new CountDownLatch(COUNT); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { latch countDown(); } }); connection start(); long time = 5000; MessageProducer producer = session createProducer(destination); TextMessage message = session createTextMessage( test msg ); message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, time); producer send(message); producer close(); Thread sleep(2000); assertEquals(latch getCount(), COUNT); latch await(5, TimeUnit SECONDS); assertEquals(latch getCount(), 0); } public void testTransactedSchedule() throws Exception { final int COUNT = 1; Connection connection = createConnection(); final Session session = connection createSession(true, Session SESSION TRANSACTED); MessageConsumer consumer = session createConsumer(destination); final CountDownLatch latch = new CountDownLatch(COUNT); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { try { session commit(); } catch (JMSException e) { e printStackTrace(); } latch countDown(); } }); connection start(); long time = 5000; MessageProducer producer = session createProducer(destination); TextMessage message = session createTextMessage( test msg ); message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, time); producer send(message); session commit(); producer close(); Thread sleep(2000); assertEquals(latch getCount(), COUNT); latch await(5, TimeUnit SECONDS); assertEquals(latch getCount(), 0); } public void testScheduleRepeated() throws Exception { final int NUMBER = 10; final AtomicInteger count = new AtomicInteger(); Connection connection = createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(destination); final CountDownLatch latch = new CountDownLatch(NUMBER); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { latch countDown(); count incrementAndGet(); } }); connection start(); MessageProducer producer = session createProducer(destination); TextMessage message = session createTextMessage( test msg ); long time = 1000; message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, time); message setLongProperty(ScheduledMessage AMQ SCHEDULED PERIOD, 500); message setIntProperty(ScheduledMessage AMQ SCHEDULED REPEAT, NUMBER - 1); producer send(message); producer close(); assertEquals(latch getCount(), NUMBER); latch await(10, TimeUnit SECONDS); assertEquals(0, latch getCount()); Thread sleep(1000); assertEquals(NUMBER, count get()); } public void testScheduleRestart() throws Exception { Connection connection = createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); connection start(); MessageProducer producer = session createProducer(destination); TextMessage message = session createTextMessage( test msg ); long time = 5000; message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, time); producer send(message); producer close(); broker stop(); broker waitUntilStopped(); broker = createBroker(false); broker start(); broker waitUntilStarted(); connection = createConnection(); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(destination); Message msg = consumer receive(5000); assertNotNull( Didn t receive the message , msg); producer = session createProducer(destination); message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, time); producer send(message); producer close(); } public void testJobSchedulerStoreUsage() throws Exception { broker getSystemUsage() getJobSchedulerUsage() setLimit(10 * 1024); ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( vm Connection conn = factory createConnection(); conn start(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); final long time = 5000; final ProducerThread producer = new ProducerThread(sess, destination) { Override protected Message createMessage(int i) throws Exception { Message message = super createMessage(i); message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, time); return message; } }; producer setMessageCount(100); producer start(); MessageConsumer consumer = sess createConsumer(destination); final CountDownLatch latch = new CountDownLatch(100); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { latch countDown(); } }); Thread sleep(10000l); assertEquals(100, latch getCount()); broker getSystemUsage() getJobSchedulerUsage() setLimit(1024 * 1024 * 33); Thread sleep(10000l); Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { return producer getSentCount() == producer getMessageCount(); } }, 20000l); assertEquals( Producer didn t send all messages , producer getMessageCount(), producer getSentCount()); latch await(20000l, TimeUnit MILLISECONDS); assertEquals( Consumer did not receive all messages , 0, latch getCount()); } Override protected void setUp() throws Exception { bindAddress = vm super setUp(); } Override protected BrokerService createBroker() throws Exception { return createBroker(true); } protected BrokerService createBroker(boolean delete) throws Exception { File schedulerDirectory = new File( target/scheduler ); if (delete) { IOHelper mkdirs(schedulerDirectory); IOHelper deleteChildren(schedulerDirectory); } BrokerService answer = new BrokerService(); answer setPersistent(isPersistent()); answer setDeleteAllMessagesOnStartup(true); answer setDataDirectory( target ); answer setSchedulerDirectoryFile(schedulerDirectory); answer setSchedulerSupport(true); answer setUseJmx(false); answer addConnector(bindAddress); return answer; } }",1.0,
2273,2273,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\scheduler\JobSchedulerStoreTest.,JobSchedulerStoreTest,"public class JobSchedulerStoreTest extends TestCase { public void testRestart() throws Exception { JobSchedulerStore store = new JobSchedulerStoreImpl(); File directory = new File( target/test/ScheduledDB ); IOHelper mkdirs(directory); IOHelper deleteChildren(directory); store setDirectory(directory); final int NUMBER = 1000; store start(); List<ByteSequence>list = new ArrayList<ByteSequence>(); for (int i = 0; i < NUMBER;i++ ) { ByteSequence buff = new ByteSequence(new String( testjob +i) getBytes()); list add(buff); } JobScheduler js = store getJobScheduler( test ); int count = 0; long startTime = 10 * 60 * 1000; long period = startTime; for (ByteSequence job list) { js schedule( id +(count++), job, , startTime, period, -1); } List<Job>test = js getAllJobs(); assertEquals(list size(),test size()); store stop(); store start(); js = store getJobScheduler( test ); test = js getAllJobs(); assertEquals(list size(),test size()); for (int i = 0; i < list size();i++) { String orig = new String(list get(i) getData()); String payload = new String(test get(i) getPayload()); assertEquals(orig,payload); } } }",1.0,
2275,2275,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\store\DefaultStoreBrokerTest.,DefaultStoreBrokerTest,public class DefaultStoreBrokerTest extends BrokerTest { protected BrokerService createBroker() throws Exception { return BrokerFactory createBroker(new URI( broker } protected BrokerService createRestartedBroker() throws Exception { return BrokerFactory createBroker(new URI( broker } public static Test suite() { return suite(DefaultStoreBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
2276,2276,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\store\DefaultStoreRecoveryBrokerTest.,DefaultStoreRecoveryBrokerTest,public class DefaultStoreRecoveryBrokerTest extends RecoveryBrokerTest { protected BrokerService createBroker() throws Exception { return BrokerFactory createBroker(new URI( broker } protected BrokerService createRestartedBroker() throws Exception { return BrokerFactory createBroker(new URI( broker } public static Test suite() { return suite(DefaultStoreRecoveryBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
2279,2279,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\store\TransactionStoreTest.,TransactionStoreTest,"public class TransactionStoreTest extends TestCase { protected static final int MAX TX = 2500; protected static final int MAX THREADS = 200; class BeingTested extends AMQTransactionStore { public BeingTested() { super(null); } public Map<TransactionId, AMQTx> getInFlight() { return inflightTransactions; } }; BeingTested underTest = new BeingTested(); public void testConcurrentGetTx() throws Exception { final ConnectionId connectionId = new ConnectionId( 1 1 ); Runnable getTx = new Runnable() { public void run() { for (int i=0; i<MAX TX;i++) { TransactionId txid = new LocalTransactionId(connectionId, i); underTest getTx(txid, null); } } }; ExecutorService executor = Executors newFixedThreadPool(MAX THREADS); for (int i=0;i < MAX THREADS; i++) { executor execute(getTx); } executor shutdown(); executor awaitTermination(10, TimeUnit SECONDS); assertEquals( has just the right amount of transactions , MAX TX, underTest getInFlight() size()); } }",1.0,
2280,2280,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\store\TransactionStoreTest.,BeingTested,"class BeingTested extends AMQTransactionStore { public BeingTested() { super(null); } public Map<TransactionId, AMQTx> getInFlight() { return inflightTransactions; } };",1.0,
2281,2281,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\util\PluginBrokerTest.,PluginBrokerTest,"public class PluginBrokerTest extends JmsTopicSendReceiveTest { private static final Logger LOG = LoggerFactory getLogger(PluginBrokerTest class); private BrokerService broker; protected void setUp() throws Exception { broker = createBroker(); super setUp(); } protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } } protected BrokerService createBroker() throws Exception { return createBroker( org/apache/activemq/util/plugin-broker xml ); } protected BrokerService createBroker(String uri) throws Exception { LOG info( Loading broker configuration from the classpath with URI + uri); return BrokerFactory createBroker(new URI( xbean + uri)); } protected void assertMessageValid(int index, Message message) throws JMSException { assertEquals( localhost , message getStringProperty( BrokerPath )); ActiveMQMessage amqMsg = (ActiveMQMessage)message; if (index == 7) { assertTrue( expiration is in range, depends on two distinct calls to System currentTimeMillis , 1500 < amqMsg getExpiration() - amqMsg getTimestamp()); } else if (index == 9) { assertTrue( expiration ceeling is in range, depends on two distinct calls to System currentTimeMillis , 59500 < amqMsg getExpiration() - amqMsg getTimestamp()); } else { assertEquals(1000, amqMsg getExpiration() - amqMsg getTimestamp()); } super assertMessageValid(index, message); } protected void sendMessage(int index, Message message) throws Exception { if (index == 7) { producer send(producerDestination, message, Message DEFAULT DELIVERY MODE, Message DEFAULT PRIORITY, 2000); } else if (index == 9) { producer send(producerDestination, message, Message DEFAULT DELIVERY MODE, Message DEFAULT PRIORITY, 200000); } else { super sendMessage(index, message); } } }",1.0,
2282,2282,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\util\RedeliveryPluginTest.,RedeliveryPluginTest,public class RedeliveryPluginTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(RedeliveryPluginTest class); RedeliveryPlugin underTest = new RedeliveryPlugin(); public void testInstallPluginValidation() throws Exception { RedeliveryPolicyMap redeliveryPolicyMap = new RedeliveryPolicyMap(); RedeliveryPolicy defaultEntry = new RedeliveryPolicy(); defaultEntry setInitialRedeliveryDelay(500); redeliveryPolicyMap setDefaultEntry(defaultEntry); underTest setRedeliveryPolicyMap(redeliveryPolicyMap); final BrokerService brokerService = new BrokerService(); brokerService setSchedulerSupport(false); Broker broker = new ErrorBroker( hi ) { Override public BrokerService getBrokerService() { return brokerService; } }; try { underTest installPlugin(broker); fail( expect exception on no scheduler support ); } catch (Exception expected) { LOG info( expected + expected); } brokerService setSchedulerSupport(true); try { underTest installPlugin(broker); fail( expect exception on small initial delay ); } catch (Exception expected) { LOG info( expected + expected); } defaultEntry setInitialRedeliveryDelay(5000); defaultEntry setRedeliveryDelay(500); brokerService setSchedulerSupport(true); try { underTest installPlugin(broker); fail( expect exception on small redelivery delay ); } catch (Exception expected) { LOG info( expected + expected); } } },1.0,
2284,2284,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\util\TraceBrokerPathPluginTest.,TraceBrokerPathPluginTest,"public class TraceBrokerPathPluginTest extends TestCase { BrokerService brokerA; BrokerService brokerB; TransportConnector tcpConnectorA; TransportConnector tcpConnectorB; MessageProducer producer; MessageConsumer consumer; Connection connectionA; Connection connectionB; Session sessionA; Session sessionB; String queue = TEST FOO ; String traceProperty = BROKER PATH ; Before public void setUp() throws Exception { TraceBrokerPathPlugin tbppA = new TraceBrokerPathPlugin(); tbppA setStampProperty(traceProperty); TraceBrokerPathPlugin tbppB = new TraceBrokerPathPlugin(); tbppB setStampProperty(traceProperty); brokerA = new BrokerService(); brokerA setBrokerName( brokerA ); brokerA setPersistent(false); brokerA setUseJmx(true); brokerA setPlugins(new BrokerPlugin[] {tbppA}); tcpConnectorA = brokerA addConnector( tcp brokerB = new BrokerService(); brokerB setBrokerName( brokerB ); brokerB setPersistent(false); brokerB setUseJmx(true); brokerB setPlugins(new BrokerPlugin[] {tbppB}); tcpConnectorB = brokerB addConnector( tcp brokerA addNetworkConnector( static ( + tcpConnectorB getConnectUri() toString() + ) ); brokerB start(); brokerB waitUntilStarted(); brokerA start(); brokerA waitUntilStarted(); connectionA = new ActiveMQConnectionFactory(tcpConnectorA getConnectUri()) createConnection(); connectionA start(); sessionA = connectionA createSession(false, Session AUTO ACKNOWLEDGE); producer = sessionA createProducer(sessionA createQueue(queue)); producer setDeliveryMode(DeliveryMode NON PERSISTENT); connectionB = new ActiveMQConnectionFactory(tcpConnectorB getConnectUri()) createConnection(); connectionB start(); sessionB = connectionB createSession(false, Session AUTO ACKNOWLEDGE); consumer = sessionB createConsumer(sessionB createQueue(queue)); } After public void tearDown() throws Exception { producer close(); consumer close(); sessionA close(); sessionB close(); connectionA close(); connectionB close(); brokerA stop(); brokerB stop(); } Test public void testTraceBrokerPathPlugin() throws Exception { Message sentMessage = sessionA createMessage(); producer send(sentMessage); Message receivedMessage = consumer receive(1000); assertNotNull(receivedMessage); assertEquals(sentMessage getJMSMessageID(), receivedMessage getJMSMessageID()); assertEquals( brokerA,brokerB , receivedMessage getStringProperty(traceProperty)); } }",1.0,
2286,2286,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\virtual\CompositeTopicTest.,CompositeTopicTest,public class CompositeTopicTest extends CompositeQueueTest { protected Destination getConsumer1Dsetination() { return new ActiveMQQueue( FOO ); } protected Destination getConsumer2Dsetination() { return new ActiveMQTopic( BAR ); } protected Destination getProducerDestination() { return new ActiveMQTopic( MY TOPIC ); } protected String getBrokerConfigUri() { return org/apache/activemq/broker/virtual/composite-topic xml ; } },1.0,
2287,2287,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\virtual\FilteredQueueTest.,FilteredQueueTest,"public class FilteredQueueTest extends CompositeQueueTest { Override protected String getBrokerConfigUri() { return org/apache/activemq/broker/virtual/filtered-queue xml ; } Override protected void assertMessagesArrived(ConsumerBean messageList1, ConsumerBean messageList2) { messageList1 assertMessagesArrived(total / 2); messageList2 assertMessagesArrived(1); } }",1.0,
2290,2290,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\virtual\MirroredQueueUsingVirtualTopicQueueTest.,MirroredQueueUsingVirtualTopicQueueTest,public class MirroredQueueUsingVirtualTopicQueueTest extends MirroredQueueTest { Override protected Destination createConsumeDestination() { String queueName = Consumer A VirtualTopic Mirror + getQueueName(); return new ActiveMQQueue(queueName); } },1.0,
2291,2291,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\virtual\VirtualTopicDisconnectSelectorTest.,VirtualTopicDisconnectSelectorTest,"public class VirtualTopicDisconnectSelectorTest extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(VirtualTopicDisconnectSelectorTest class); protected Connection connection; public void testVirtualTopicSelectorDisconnect() throws Exception { testVirtualTopicDisconnect( odd = no , 3000, 1500); } public void testVirtualTopicNoSelectorDisconnect() throws Exception { testVirtualTopicDisconnect(null, 3000, 3000); } public void testVirtualTopicDisconnect(String messageSelector, int total , int expected) throws Exception { if (connection == null) { connection = createConnection(); } connection start(); final ConsumerBean messageList = new ConsumerBean(); Session session = connection createSession(false, Session CLIENT ACKNOWLEDGE); Destination producerDestination = getProducerDestination(); Destination destination = getConsumerDsetination(); LOG info( Sending to + producerDestination); LOG info( Consuming from + destination ); MessageConsumer consumer = createConsumer(session, destination, messageSelector); MessageListener listener = new MessageListener(){ public void onMessage(Message message){ messageList onMessage(message); try { message acknowledge(); } catch (JMSException e) { e printStackTrace(); } } }; consumer setMessageListener(listener); MessageProducer producer = session createProducer(producerDestination); assertNotNull(producer); int disconnectCount = total/3; int reconnectCount = (total * 2)/3; for (int i = 0; i < total; i++) { producer send(createMessage(session, i)); if (i==disconnectCount){ consumer close(); } if (i==reconnectCount){ consumer = createConsumer(session, destination, messageSelector); consumer setMessageListener(listener); } } assertMessagesArrived(messageList, expected ,10000); } protected Destination getConsumerDsetination() { return new ActiveMQQueue( Consumer VirtualTopic TEST ); } protected Destination getProducerDestination() { return new ActiveMQTopic( VirtualTopic TEST ); } protected void setUp() throws Exception { super setUp(); } protected MessageConsumer createConsumer(Session session, Destination destination, String messageSelector) throws JMSException { if (messageSelector != null) { return session createConsumer(destination, messageSelector); } else { return session createConsumer(destination); } } protected TextMessage createMessage(Session session, int i) throws JMSException { TextMessage textMessage = session createTextMessage( message + i); if (i % 2 != 0) { textMessage setStringProperty( odd , yes ); } else { textMessage setStringProperty( odd , no ); } textMessage setIntProperty( i , i); return textMessage; } protected void assertMessagesArrived(ConsumerBean messageList, int expected, long timeout) { messageList assertMessagesArrived(expected,timeout); messageList flushMessages(); LOG info( validate no other messages on queues ); try { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination1 = getConsumerDsetination(); MessageConsumer c1 = session createConsumer(destination1, null); c1 setMessageListener(messageList); LOG info( send one simple message that should go to both consumers ); MessageProducer producer = session createProducer(getProducerDestination()); assertNotNull(producer); producer send(session createTextMessage( Last Message )); messageList assertMessagesArrived(1); } catch (JMSException e) { e printStackTrace(); fail( unexpeced ex while waiting for last messages + e); } } protected String getBrokerConfigUri() { return org/apache/activemq/broker/virtual/disconnected-selector xml ; } protected BrokerService createBroker() throws Exception { XBeanBrokerFactory factory = new XBeanBrokerFactory(); BrokerService answer = factory createBroker(new URI(getBrokerConfigUri())); return answer; } }",1.0,
2292,2292,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\virtual\VirtualTopicDLQTest.,VirtualTopicDLQTest,"public class VirtualTopicDLQTest extends TestCase { private static BrokerService broker; private static final Logger LOG = LoggerFactory getLogger(VirtualTopicDLQTest class); static final String jmsConnectionURI = failover (vm private static final String virtualTopicName = VirtualTopic Test ; private static final String consumer1Prefix = Consumer A ; private static final String consumer2Prefix = Consumer B ; private static final String consumer3Prefix = Consumer C ; private static final String dlqPrefix = ActiveMQ DLQ Topic ; private static final int numberMessages = 6; Before public void setUp() throws Exception { try { broker = BrokerFactory createBroker( xbean org/apache/activemq/broker/virtual/virtual-individual-dlq xml , true); broker start(); broker waitUntilStarted(); } catch (Exception e) { e printStackTrace(); throw e; } } After public void tearDown() throws Exception { try { purgeDestination(dlqPrefix + consumer1Prefix + virtualTopicName); purgeDestination(dlqPrefix + consumer2Prefix + virtualTopicName); purgeDestination(dlqPrefix + consumer3Prefix + virtualTopicName); } catch (Exception e) { e printStackTrace(); } if (broker != null) { broker stop(); broker waitUntilStopped(); broker = null; } } Test public void testVirtualTopicSubscriberDeadLetterQueue() throws Exception { TestConsumer consumer1 = null; TestConsumer consumer2 = null; TestConsumer consumer3 = null; TestConsumer dlqConsumer1 = null; TestConsumer dlqConsumer2 = null; TestConsumer dlqConsumer3 = null; try { consumer1 = new TestConsumer(consumer1Prefix + virtualTopicName, false, numberMessages, true); thread(consumer1, false); consumer2 = new TestConsumer(consumer2Prefix + virtualTopicName, false, numberMessages, true); thread(consumer2, false); consumer3 = new TestConsumer(consumer3Prefix + virtualTopicName, false, numberMessages, false); thread(consumer3, false); dlqConsumer1 = new TestConsumer(dlqPrefix + consumer1Prefix + virtualTopicName, false, numberMessages, false); thread(dlqConsumer1, false); dlqConsumer2 = new TestConsumer(dlqPrefix + consumer2Prefix + virtualTopicName, false, numberMessages, false); thread(dlqConsumer2, false); dlqConsumer3 = new TestConsumer(dlqPrefix + consumer3Prefix + virtualTopicName, false, numberMessages, false); thread(dlqConsumer3, false); Thread sleep(1000); TestProducer producer = new TestProducer(virtualTopicName, true, numberMessages); thread(producer, false); assertTrue( sent all producer messages in time, count is + producer getLatch() getCount(), producer getLatch() await(10, TimeUnit SECONDS)); LOG info( producer successful, count = + producer getLatch() getCount()); assertTrue( remaining consumer1 count should be zero, is + consumer1 getLatch() getCount(), consumer1 getLatch() await(10, TimeUnit SECONDS)); LOG info( consumer1 successful, count = + consumer1 getLatch() getCount()); assertTrue( remaining consumer2 count should be zero, is + consumer2 getLatch() getCount(), consumer2 getLatch() await(10, TimeUnit SECONDS)); LOG info( consumer2 successful, count = + consumer2 getLatch() getCount()); assertTrue( remaining consumer3 count should be zero, is + consumer3 getLatch() getCount(), consumer3 getLatch() await(10, TimeUnit SECONDS)); LOG info( consumer3 successful, count = + consumer3 getLatch() getCount()); assertTrue( remaining dlqConsumer1 count should be zero, is + dlqConsumer1 getLatch() getCount(), dlqConsumer1 getLatch() await(10, TimeUnit SECONDS)); LOG info( dlqConsumer1 successful, count = + dlqConsumer1 getLatch() getCount()); assertTrue( remaining dlqConsumer2 count should be zero, is + dlqConsumer2 getLatch() getCount(), dlqConsumer2 getLatch() await(10, TimeUnit SECONDS)); LOG info( dlqConsumer2 successful, count = + dlqConsumer2 getLatch() getCount()); assertTrue( remaining dlqConsumer3 count should be + numberMessages + , is + dlqConsumer3 getLatch() getCount(), dlqConsumer3 getLatch() getCount() == numberMessages); LOG info( dlqConsumer2 successful, count = + dlqConsumer2 getLatch() getCount()); } catch (Exception e) { e printStackTrace(); throw e; } finally { if (consumer1 != null) consumer1 setStop(true); if (consumer2 != null) consumer2 setStop(true); if (consumer3 != null) consumer3 setStop(true); if (dlqConsumer1 != null) dlqConsumer1 setStop(true); if (dlqConsumer2 != null) dlqConsumer2 setStop(true); if (dlqConsumer3 != null) dlqConsumer3 setStop(true); } } private static Thread thread(Runnable runnable, boolean daemon) { Thread brokerThread = new Thread(runnable); brokerThread setDaemon(daemon); brokerThread start(); return brokerThread; } private class TestProducer implements Runnable { private String destinationName = null; private boolean isTopic = true; private int numberMessages = 0; private CountDownLatch latch = null; public TestProducer(String destinationName, boolean isTopic, int numberMessages) { this destinationName = destinationName; this isTopic = isTopic; this numberMessages = numberMessages; latch = new CountDownLatch(numberMessages); } public CountDownLatch getLatch() { return latch; } public void run() { ActiveMQConnectionFactory connectionFactory = null; ActiveMQConnection connection = null; ActiveMQSession session = null; Destination destination = null; try { LOG info( Started TestProducer for destination ( + destinationName + ) ); connectionFactory = new ActiveMQConnectionFactory(jmsConnectionURI); connection = (ActiveMQConnection) connectionFactory createConnection(); connection start(); session = (ActiveMQSession) connection createSession(false, Session AUTO ACKNOWLEDGE); if (isTopic) { destination = session createTopic(this destinationName); } else { destination = session createQueue(this destinationName); } ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session createProducer(destination); producer setDeliveryMode(DeliveryMode NON PERSISTENT); for (int i = 0; i < numberMessages; i++) { TextMessage message = (TextMessage) session createTextMessage( I am a message + String valueOf(i)); try { producer send(message); } catch (Exception deeperException) { LOG info( Producer for destination ( + destinationName + ) Caught + deeperException); } latch countDown(); Thread sleep(1000); } LOG info( Finished TestProducer for destination ( + destinationName + ) ); } catch (Exception e) { LOG error( Terminating TestProducer( + destinationName + )Caught + e); e printStackTrace(); } finally { try { if (session != null) session close(); if (connection != null) connection close(); } catch (Exception e) { e printStackTrace(); LOG error( Closing connection/session ( + destinationName + )Caught + e); } } } } private class TestConsumer implements Runnable, ExceptionListener, MessageListener { private String destinationName = null; private boolean isTopic = true; private CountDownLatch latch = null; private int maxRedeliveries = 0; private int receivedMessageCounter = 0; private boolean bFakeFail = false; private boolean bStop = false; private ActiveMQConnectionFactory connectionFactory = null; private ActiveMQConnection connection = null; private Session session = null; private MessageConsumer consumer = null; public TestConsumer(String destinationName, boolean isTopic, int expectedNumberMessages, boolean bFakeFail) { this destinationName = destinationName; this isTopic = isTopic; latch = new CountDownLatch(expectedNumberMessages * (this bFakeFail (maxRedeliveries + 1) 1)); this bFakeFail = bFakeFail; } public CountDownLatch getLatch() { return latch; } public void run() { try { LOG info( Started TestConsumer for destination ( + destinationName + ) ); connectionFactory = new ActiveMQConnectionFactory(jmsConnectionURI); connection = (ActiveMQConnection) connectionFactory createConnection(); connection start(); session = connection createSession(true, Session SESSION TRANSACTED); RedeliveryPolicy policy = connection getRedeliveryPolicy(); policy setInitialRedeliveryDelay(1); policy setUseExponentialBackOff(false); policy setMaximumRedeliveries(maxRedeliveries); connection setExceptionListener(this); Destination destination = null; if (isTopic) { destination = session createTopic(destinationName); } else { destination = session createQueue(destinationName); } consumer = session createConsumer(destination); consumer setMessageListener(this); while (!bStop) { Thread sleep(100); } LOG info( Finished TestConsumer for destination name ( + destinationName + ) remaining + this latch getCount() + messages + this toString()); } catch (Exception e) { LOG error( Consumer ( + destinationName + ) Caught + e); e printStackTrace(); } finally { try { if (consumer != null) consumer close(); if (session != null) session close(); if (connection != null) connection close(); } catch (Exception e) { e printStackTrace(); LOG error( Closing connection/session ( + destinationName + )Caught + e); } } } public synchronized void onException(JMSException ex) { ex printStackTrace(); LOG error( Consumer for destination, ( + destinationName + ), JMS Exception occured Shutting down client ); } public synchronized void setStop(boolean bStop) { this bStop = bStop; } public synchronized void onMessage(Message message) { receivedMessageCounter++; latch countDown(); LOG info( Consumer for destination ( + destinationName + ) latch countdown + latch getCount() + Number messages received + this receivedMessageCounter); try { LOG info( Consumer for destination ( + destinationName + ) Received message id + message getJMSMessageID()); if (!bFakeFail) { LOG info( Consumer on destination + destinationName + committing JMS Session for message + message toString()); session commit(); } else { LOG info( Consumer on destination + destinationName + rolling back JMS Session for message + message toString()); session rollback(); } } catch (JMSException ex) { ex printStackTrace(); LOG error( Error reading JMS Message from destination + destinationName + ); } } } private static void purgeDestination(String destination) throws Exception { final Queue dest = (Queue) ((RegionBroker) broker getRegionBroker()) getQueueRegion() getDestinationMap() get(new ActiveMQQueue(destination)); dest purge(); assertEquals(0, dest getDestinationStatistics() getMessages() getCount()); } }",1.0,
2296,2296,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\virtual\VirtualTopicPubSubUsingXBeanTest.,VirtualTopicPubSubUsingXBeanTest,public class VirtualTopicPubSubUsingXBeanTest extends VirtualTopicPubSubTest { protected String getVirtualTopicConsumerName() { return VirtualTopicConsumers ConsumerNumberOne FOO ; } protected String getVirtualTopicName() { return FOO ; } protected BrokerService createBroker() throws Exception { XBeanBrokerFactory factory = new XBeanBrokerFactory(); BrokerService answer = factory createBroker(new URI(getBrokerConfigUri())); answer setPersistent(false); return answer; } protected String getBrokerConfigUri() { return org/apache/activemq/broker/virtual/global-virtual-topics xml ; } },1.0,
2299,2299,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\ActiveMQSlowConsumerManualTest.,ActiveMQSlowConsumerManualTest,"public class ActiveMQSlowConsumerManualTest { private static final int PORT = 12345; private static final ActiveMQTopic TOPIC = new ActiveMQTopic( TOPIC ); private static final String URL = nio Test(timeout = 60000) public void testDefaultSettings() throws Exception { runTest( testDefaultSettings , 30, -1, -1, false, false, false, false); } Test(timeout = 60000) public void testDefaultSettingsWithOptimiseAcknowledge() throws Exception { runTest( testDefaultSettingsWithOptimiseAcknowledge , 30, -1, -1, false, false, true, false); } Test(timeout = 60000) public void testBounded() throws Exception { runTest( testBounded , 30, 5, 25, false, false, false, false); } Test(timeout = 60000) public void testBoundedWithOptimiseAcknowledge() throws Exception { runTest( testBoundedWithOptimiseAcknowledge , 30, 5, 25, false, false, true, false); } public void runTest(String name, int sendMessageCount, int prefetchLimit, int messageLimit, boolean evictOldestMessage, boolean disableFlowControl, boolean optimizeAcknowledge, boolean persistent) throws Exception { BrokerService broker = createBroker(persistent); broker setDestinationPolicy(buildPolicy(TOPIC, prefetchLimit, messageLimit, evictOldestMessage, disableFlowControl)); broker start(); Session slowConsumerSession = buildSession( SlowConsumer , URL, optimizeAcknowledge); final CountDownLatch blockSlowConsumer = new CountDownLatch(1); final AtomicInteger slowConsumerReceiveCount = new AtomicInteger(); final List<Integer> slowConsumerReceived = sendMessageCount <= 1000 new ArrayList<Integer>() null; MessageConsumer slowConsumer = createSubscriber(slowConsumerSession, new MessageListener() { Override public void onMessage(Message message) { try { slowConsumerReceiveCount incrementAndGet(); int count = Integer parseInt(((TextMessage) message) getText()); if (slowConsumerReceived != null) slowConsumerReceived add(count); if (count % 10000 == 0) System out println( SlowConsumer Receive + count); blockSlowConsumer await(); } catch (Exception ignored) { } } } ); Session fastConsumerSession = buildSession( FastConsumer , URL, optimizeAcknowledge); final AtomicInteger fastConsumerReceiveCount = new AtomicInteger(); final List<Integer> fastConsumerReceived = sendMessageCount <= 1000 new ArrayList<Integer>() null; MessageConsumer fastConsumer = createSubscriber(fastConsumerSession, new MessageListener() { Override public void onMessage(Message message) { try { fastConsumerReceiveCount incrementAndGet(); TimeUnit MILLISECONDS sleep(5); int count = Integer parseInt(((TextMessage) message) getText()); if (fastConsumerReceived != null) fastConsumerReceived add(count); if (count % 10000 == 0) System out println( FastConsumer Receive + count); } catch (Exception ignored) { } } } ); Thread sleep(500); AtomicInteger sentCount = new AtomicInteger(); List<Integer> sent = sendMessageCount <= 1000 new ArrayList<Integer>() null; Session publisherSession = buildSession( Publisher , URL, optimizeAcknowledge); MessageProducer publisher = createPublisher(publisherSession); for (int i = 0; i < sendMessageCount; i++) { sentCount incrementAndGet(); if (sent != null) sent add(i); if (i % 10000 == 0) System out println( Publisher Send + i); publisher send(publisherSession createTextMessage(Integer toString(i))); } Thread sleep(500); System out println(name + Publisher Sent + sentCount + + sent); System out println(name + Whilst slow consumer blocked ); System out println( t t- SlowConsumer Received + slowConsumerReceiveCount + + slowConsumerReceived); System out println( t t- FastConsumer Received + fastConsumerReceiveCount + + fastConsumerReceived); blockSlowConsumer countDown(); Thread sleep(500); System out println(name + After slow consumer unblocked ); System out println( t t- SlowConsumer Received + slowConsumerReceiveCount + + slowConsumerReceived); System out println( t t- FastConsumer Received + fastConsumerReceiveCount + + fastConsumerReceived); System out println(); publisher close(); publisherSession close(); slowConsumer close(); slowConsumerSession close(); fastConsumer close(); fastConsumerSession close(); broker stop(); Assert assertEquals( Fast consumer missed messages whilst slow consumer was blocking , sent, fastConsumerReceived); } private static BrokerService createBroker(boolean persistent) throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName( TestBroker ); broker setPersistent(persistent); broker addConnector(URL); return broker; } private static MessageConsumer createSubscriber(Session session, MessageListener messageListener) throws JMSException { MessageConsumer consumer = session createConsumer(TOPIC); consumer setMessageListener(messageListener); return consumer; } private static MessageProducer createPublisher(Session session) throws JMSException { MessageProducer producer = session createProducer(TOPIC); producer setDeliveryMode(DeliveryMode NON PERSISTENT); return producer; } private static Session buildSession(String clientId, String url, boolean optimizeAcknowledge) throws JMSException { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url); connectionFactory setCopyMessageOnSend(false); connectionFactory setDisableTimeStampsByDefault(true); connectionFactory setOptimizeAcknowledge(optimizeAcknowledge); if (optimizeAcknowledge) { connectionFactory setOptimizeAcknowledgeTimeOut(1); } Connection connection = connectionFactory createConnection(); connection setClientID(clientId); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); connection start(); return session; } private static PolicyMap buildPolicy(ActiveMQTopic topic, int prefetchLimit, int messageLimit, boolean evictOldestMessage, boolean disableFlowControl) { PolicyMap policyMap = new PolicyMap(); PolicyEntry policyEntry = new PolicyEntry(); if (evictOldestMessage) { policyEntry setMessageEvictionStrategy(new OldestMessageEvictionStrategy()); } if (disableFlowControl) { policyEntry setProducerFlowControl(false); } if (prefetchLimit > 0) { policyEntry setTopicPrefetch(prefetchLimit); } if (messageLimit > 0) { ConstantPendingMessageLimitStrategy messageLimitStrategy = new ConstantPendingMessageLimitStrategy(); messageLimitStrategy setLimit(messageLimit); policyEntry setPendingMessageLimitStrategy(messageLimitStrategy); } policyMap put(topic, policyEntry); return policyMap; } }",1.0,
2300,2300,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ1282.,AMQ1282,"public class AMQ1282 extends TestCase { private ConnectionFactory factory; private Connection connection; private MapMessage message; Override protected void setUp() throws Exception { factory = new ActiveMQConnectionFactory( vm connection = factory createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); message = session createMapMessage(); super setUp(); } Override protected void tearDown() throws Exception { connection close(); super tearDown(); } public void testUnmappedBooleanMessage() throws JMSException { Object expected; try { expected = Boolean valueOf(null); } catch (Exception ex) { expected = ex; } try { Boolean actual = message getBoolean( foo ); assertEquals(expected, actual); } catch (Exception ex) { assertEquals(expected, ex); } } public void testUnmappedIntegerMessage() throws JMSException { Object expected; try { expected = Integer valueOf(null); } catch (Exception ex) { expected = ex; } try { Integer actual = message getInt( foo ); assertEquals(expected, actual); } catch (Exception ex) { Class< > aClass = expected getClass(); assertTrue(aClass isInstance(ex)); } } public void testUnmappedShortMessage() throws JMSException { Object expected; try { expected = Short valueOf(null); } catch (Exception ex) { expected = ex; } try { Short actual = message getShort( foo ); assertEquals(expected, actual); } catch (Exception ex) { Class< > aClass = expected getClass(); assertTrue(aClass isInstance(ex)); } } public void testUnmappedLongMessage() throws JMSException { Object expected; try { expected = Long valueOf(null); } catch (Exception ex) { expected = ex; } try { Long actual = message getLong( foo ); assertEquals(expected, actual); } catch (Exception ex) { Class< > aClass = expected getClass(); assertTrue(aClass isInstance(ex)); } } public void testUnmappedStringMessage() throws JMSException { Object expected; try { expected = String valueOf(null); } catch (Exception ex) { expected = ex; } try { String actual = message getString( foo ); assertEquals(expected, actual); } catch (Exception ex) { Class< > aClass = expected getClass(); assertTrue(aClass isInstance(ex)); } } public void testUnmappedCharMessage() throws JMSException { try { message getChar( foo ); fail( should have thrown NullPointerException ); } catch (NullPointerException success) { assertNotNull(success); } } public void testUnmappedByteMessage() throws JMSException { Object expected; try { expected = Byte valueOf(null); } catch (Exception ex) { expected = ex; } try { Byte actual = message getByte( foo ); assertEquals(expected, actual); } catch (Exception ex) { Class< > aClass = expected getClass(); assertTrue(aClass isInstance(ex)); } } public void testUnmappedDoubleMessage() throws JMSException { Object expected; try { expected = Double valueOf(null); } catch (Exception ex) { expected = ex; } try { Double actual = message getDouble( foo ); assertEquals(expected, actual); } catch (Exception ex) { Class< > aClass = expected getClass(); assertTrue(aClass isInstance(ex)); } } public void testUnmappedFloatMessage() throws JMSException { Object expected; try { expected = Float valueOf(null); } catch (Exception ex) { expected = ex; } try { Float actual = message getFloat( foo ); assertEquals(expected, actual); } catch (Exception ex) { Class< > aClass = expected getClass(); assertTrue(aClass isInstance(ex)); } } }",1.0,
2302,2302,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ1853Test.,AMQ1853Test,"public class AMQ1853Test { private static BrokerService broker; private static final Logger LOG = LoggerFactory getLogger(AMQ1853Test class); static final String jmsConnectionURI = failover (vm private static final String queueFail = Queue BlockingConsumer QueueFail ; private final int producerMessages = 5; private final int totalNumberMessages = producerMessages * 2; private final int maxRedeliveries = 2; private final int redeliveryDelay = 1000; private Map<String, AtomicInteger> messageList = null; Before public void setUp() throws Exception { broker = BrokerFactory createBroker(new URI( broker ()/localhost persistent=false )); broker setUseJmx(false); broker setDeleteAllMessagesOnStartup(true); broker start(); broker waitUntilStarted(); } After public void tearDown() throws Exception { if (broker != null) { broker stop(); broker waitUntilStopped(); broker = null; } } Test public void testConsumerMessagesAreNotOrdered() throws Exception { TestConsumer consumerAllFail = null; messageList = new Hashtable<String, AtomicInteger>(); try { TestProducer producerAllFail = new TestProducer(queueFail); thread(producerAllFail, false); consumerAllFail = new TestConsumer(queueFail, true); thread(consumerAllFail, false); Thread sleep(1000); thread(producerAllFail, false); Thread sleep(1000); producerAllFail getLatch() await(); LOG info( producer successful, count = + producerAllFail getLatch() getCount()); LOG info( final message list size = + messageList size()); assertTrue( message list size = + messageList size() + exptected + totalNumberMessages, Wait waitFor(new Condition() { Override public boolean isSatisified() throws Exception { return totalNumberMessages == messageList size(); } })); consumerAllFail getLatch() await(); LOG info( consumerAllFail successful, count = + consumerAllFail getLatch() getCount()); Iterator<String> keys = messageList keySet() iterator(); for (AtomicInteger counter messageList values()) { String message = keys next(); LOG info( final count for message + message + counter = + counter get()); assertTrue( for message + message + counter = + counter get(), counter get() == maxRedeliveries + 1); } assertFalse(consumerAllFail messageReceiptIsOrdered()); } finally { if (consumerAllFail != null) { consumerAllFail setStop(true); } } } private static Thread thread(Runnable runnable, boolean daemon) { Thread brokerThread = new Thread(runnable); brokerThread setDaemon(daemon); brokerThread start(); return brokerThread; } private class TestProducer implements Runnable { private CountDownLatch latch = null; private String destinationName = null; public TestProducer(String destinationName) { this destinationName = destinationName; latch = new CountDownLatch(totalNumberMessages); } public CountDownLatch getLatch() { return latch; } public void run() { ActiveMQConnectionFactory connectionFactory = null; ActiveMQConnection connection = null; ActiveMQSession session = null; Destination destination = null; try { LOG info( Started TestProducer for destination ( + destinationName + ) ); connectionFactory = new ActiveMQConnectionFactory(jmsConnectionURI); connection = (ActiveMQConnection) connectionFactory createConnection(); connection setCopyMessageOnSend(false); connection start(); session = (ActiveMQSession) connection createSession(false, Session AUTO ACKNOWLEDGE); destination = session createQueue(this destinationName); ActiveMQMessageProducer producer = (ActiveMQMessageProducer) session createProducer(destination); producer setDeliveryMode(DeliveryMode NON PERSISTENT); for (int i = 0; i < (producerMessages); i++) { TextMessage message = (TextMessage) session createTextMessage(); message setLongProperty( TestTime , (System currentTimeMillis())); try { producer send(message); LOG info( Producer ( + destinationName + ) n + message getJMSMessageID() + = sent messageId n ); latch countDown(); LOG info( Latch count + latch getCount()); LOG info( Producer message list size = + messageList keySet() size()); messageList put(message getJMSMessageID(), new AtomicInteger(0)); LOG info( Producer message list size = + messageList keySet() size()); } catch (Exception deeperException) { LOG info( Producer for destination ( + destinationName + ) Caught + deeperException); } Thread sleep(1000); } LOG info( Finished TestProducer for destination ( + destinationName + ) ); } catch (Exception e) { LOG error( Terminating TestProducer( + destinationName + )Caught + e); } finally { try { if (session != null) { session close(); } if (connection != null) { connection close(); } } catch (Exception e) { LOG error( Closing connection/session ( + destinationName + )Caught + e); } } } } private class TestConsumer implements Runnable, ExceptionListener, MessageListener { private CountDownLatch latch = null; private int receivedMessageCounter = 0; private boolean bFakeFail = false; String destinationName = null; boolean bMessageReceiptIsOrdered = true; boolean bStop = false; String previousMessageId = null; private ActiveMQConnectionFactory connectionFactory = null; private ActiveMQConnection connection = null; private Session session = null; private MessageConsumer consumer = null; public TestConsumer(String destinationName, boolean bFakeFail) { this bFakeFail = bFakeFail; latch = new CountDownLatch(totalNumberMessages * (this bFakeFail (maxRedeliveries + 1) 1)); this destinationName = destinationName; } public CountDownLatch getLatch() { return latch; } public boolean messageReceiptIsOrdered() { return bMessageReceiptIsOrdered; } public void run() { try { LOG info( Started TestConsumer for destination ( + destinationName + ) ); connectionFactory = new ActiveMQConnectionFactory(jmsConnectionURI); connection = (ActiveMQConnection) connectionFactory createConnection(); connection setNonBlockingRedelivery(true); session = connection createSession(true, Session SESSION TRANSACTED); RedeliveryPolicy policy = connection getRedeliveryPolicy(); policy setInitialRedeliveryDelay(redeliveryDelay); policy setBackOffMultiplier(-1); policy setRedeliveryDelay(redeliveryDelay); policy setMaximumRedeliveryDelay(-1); policy setUseExponentialBackOff(false); policy setMaximumRedeliveries(maxRedeliveries); connection setExceptionListener(this); Destination destination = session createQueue(destinationName); consumer = session createConsumer(destination); consumer setMessageListener(this); connection start(); while (!bStop) { Thread sleep(100); } LOG info( Finished TestConsumer for destination name ( + destinationName + ) remaining + this latch getCount() + messages + this toString()); } catch (Exception e) { LOG error( Consumer ( + destinationName + ) Caught + e); } finally { try { if (consumer != null) { consumer close(); } if (session != null) { session close(); } if (connection != null) { connection close(); } } catch (Exception e) { LOG error( Closing connection/session ( + destinationName + )Caught + e); } } } public synchronized void onException(JMSException ex) { LOG error( Consumer for destination, ( + destinationName + ), JMS Exception occured Shutting down client ); } public synchronized void setStop(boolean bStop) { this bStop = bStop; } public synchronized void onMessage(Message message) { receivedMessageCounter++; latch countDown(); LOG info( Consumer for destination ( + destinationName + ) latch countdown + latch getCount() + Number messages received + this receivedMessageCounter); try { if (receivedMessageCounter % (maxRedeliveries + 1) == 1) { previousMessageId = message getJMSMessageID(); } if (bMessageReceiptIsOrdered) { bMessageReceiptIsOrdered = previousMessageId trim() equals(message getJMSMessageID()); } final String jmsMessageId = message getJMSMessageID(); assertTrue( Did not find expected , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return messageList containsKey(jmsMessageId); } })); AtomicInteger counter = messageList get(jmsMessageId); counter incrementAndGet(); LOG info( Consumer for destination ( + destinationName + ) n + message getJMSMessageID() + = currentMessageId n + previousMessageId + = previousMessageId n + bMessageReceiptIsOrdered + = bMessageReceiptIsOrdered n + >>LATENCY + (System currentTimeMillis() - message getLongProperty( TestTime )) + n + message counter = + counter get()); if (!bFakeFail) { LOG debug( Consumer on destination + destinationName + committing JMS Session for message + message toString()); session commit(); } else { LOG debug( Consumer on destination + destinationName + rolling back JMS Session for message + message toString()); session rollback(); } } catch (Exception ex) { ex printStackTrace(); LOG error( Error reading JMS Message from destination + destinationName + ); } } } }",1.0,
2309,2309,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ1893Test.,TestConsumer,"class TestConsumer { private CountDownLatch finishLatch = new CountDownLatch(1); public void consume() throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory( brokerService getTransportConnectors() get(0) getConnectUri() toString() ); final int totalMessageCount = MESSAGE COUNT OF ONE GROUP * PRIORITIES length; final AtomicInteger counter = new AtomicInteger(); final MessageListener listener = new MessageListener() { public void onMessage(Message message) { if (debug) { try { log info(((TextMessage) message) getText()); } catch (JMSException e) { e printStackTrace(); } } if (counter incrementAndGet() == totalMessageCount) { finishLatch countDown(); } } }; int consumerCount = PRIORITIES length; Connection[] connections = new Connection[consumerCount]; Session[] sessions = new Session[consumerCount]; MessageConsumer[] consumers = new MessageConsumer[consumerCount]; for (int i = 0; i < consumerCount; i++) { String selector = priority = + PRIORITIES[i]; connections[i] = connectionFactory createConnection(); sessions[i] = connections[i] createSession(false, Session AUTO ACKNOWLEDGE); consumers[i] = sessions[i] createConsumer(destination, selector); consumers[i] setMessageListener(listener); } for (Connection connection connections) { connection start(); } log info( received + counter get() + messages ); assertTrue( got all messages in time , finishLatch await(60, TimeUnit SECONDS)); log info( received + counter get() + messages ); for (MessageConsumer consumer consumers) { consumer close(); } for (Session session sessions) { session close(); } for (Connection connection connections) { connection close(); } } }",1.0,
2311,2311,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ1917Test.,MessageSenderReceiver,"class MessageSenderReceiver implements Runnable { Destination reqDest; Destination replyDest; String origMsg; public MessageSenderReceiver(Destination reqDest, Destination replyDest, String msg) throws Exception { this replyDest = replyDest; this reqDest = reqDest; this origMsg = msg; } private int getIndexFromCurrentThread() { String name = Thread currentThread() getName(); String num = name substring(name lastIndexOf( - ) +1); int idx = Integer parseInt(num) -1; assertTrue( idx is in range idx= + idx, idx < NUM THREADS); return idx; } public void run() { try { int threadIndex = getIndexFromCurrentThread(); Session session = sessions[threadIndex]; MessageProducer producer = producers[threadIndex]; final Message sendJmsMsg = session createTextMessage(origMsg); producer setDeliveryMode(DeliveryMode NON PERSISTENT); producer send(sendJmsMsg); String jmsId = sendJmsMsg getJMSMessageID(); String selector = JMSCorrelationID= + jmsId + ; MessageConsumer consumer = session createConsumer(replyDest, selector); Message receiveJmsMsg = consumer receive(2000); consumer close(); if (receiveJmsMsg == null) { errorLatch countDown(); fail( Unable to receive response for + origMsg + , with selector= + selector); } else { roundTripLatch countDown(); } } catch (JMSException e) { fail( unexpected exception + e); } } }",1.0,
2312,2312,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ1917Test.,LimitedThreadFactory,public class LimitedThreadFactory implements ThreadFactory { int threadCount; private ThreadFactory factory; public LimitedThreadFactory(ThreadFactory threadFactory) { this factory = threadFactory; } public Thread newThread(Runnable arg0) { if (++threadCount > NUM THREADS) { errorLatch countDown(); fail( too many threads requested ); } return factory newThread(arg0); } },1.0,
2313,2313,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ1936Test.,AMQ1936Test,"public class AMQ1936Test extends TestCase { private final static Logger logger = Logger getLogger(AMQ1936Test class); private final static String TEST QUEUE NAME = dynamicQueues/duplicate message test queue ; private final static long TEST MESSAGE COUNT = 6000; private final static int CONSUMER COUNT = 2; private final static boolean TRANSACTED RECEIVE = true; private final ThreadPoolExecutor threadPool = new ThreadPoolExecutor(CONSUMER COUNT, CONSUMER COUNT, Long MAX VALUE, TimeUnit SECONDS, new LinkedBlockingQueue<Runnable>()); private final ThreadedMessageReceiver[] receivers = new ThreadedMessageReceiver[CONSUMER COUNT]; private BrokerService broker = null; static QueueConnectionFactory connectionFactory = null; Override protected void setUp() throws Exception { super setUp(); broker = new BrokerService(); broker getSystemUsage() getMemoryUsage() setLimit(5 * 1024 * 1024); broker setBrokerName( test ); broker setDeleteAllMessagesOnStartup(true); broker start(); connectionFactory = new ActiveMQConnectionFactory( vm ; } Override protected void tearDown() throws Exception { super tearDown(); if (threadPool != null) { for (ThreadedMessageReceiver receiver receivers) { receiver setShouldStop(true); } logger info( Waiting for receivers to shutdown ); if (!threadPool awaitTermination(10, TimeUnit SECONDS)) { logger warn( Not all receivers completed shutdown ); } else { logger info( All receivers shutdown successfully ); } } logger debug( Stoping the broker ); if (broker != null) { broker stop(); } } private void sendTextMessage(String queueName, int i) throws JMSException, NamingException { QueueConnectionFactory connectionFactory = new ActiveMQConnectionFactory( vm QueueConnection queueConnection = null; QueueSession session = null; QueueSender sender = null; Queue queue = null; TextMessage message = null; try { queueConnection = connectionFactory createQueueConnection(); session = queueConnection createQueueSession(false, QueueSession AUTO ACKNOWLEDGE); queue = session createQueue(TEST QUEUE NAME); sender = session createSender(queue); sender setDeliveryMode(DeliveryMode PERSISTENT); message = session createTextMessage(String valueOf(i)); sender send(message); if (session getTransacted()) { session commit(); } if (i % 1000 == 0) { logger info( Message successfully sent to + queue getQueueName() + messageid + message getJMSMessageID() + content + message getText()); } } finally { if (sender != null) { sender close(); } if (session != null) { session close(); } if (queueConnection != null) { queueConnection close(); } } } public void testForDuplicateMessages() throws Exception { final ConcurrentHashMap<String, String> messages = new ConcurrentHashMap<String, String>(); final Object lock = new Object(); final CountDownLatch duplicateSignal = new CountDownLatch(1); final AtomicInteger messageCount = new AtomicInteger(0); for (int i = 0; i < TEST MESSAGE COUNT / 2; i++) { if (duplicateSignal getCount() == 0) { fail( Duplicate message id detected ); } sendTextMessage(TEST QUEUE NAME, i); } for (int i = 0; i < CONSUMER COUNT; i++) { receivers[i] = new ThreadedMessageReceiver(TEST QUEUE NAME, new IMessageHandler() { Override public void onMessage(Message message) throws Exception { synchronized (lock) { int current = messageCount incrementAndGet(); if (current % 1000 == 0) { logger info( Received message + message getJMSMessageID() + with content + ((TextMessage) message) getText()); } if (messages containsKey(message getJMSMessageID())) { duplicateSignal countDown(); logger fatal( duplicate message id detected + message getJMSMessageID()); fail( Duplicate message id detected + message getJMSMessageID()); } else { messages put(message getJMSMessageID(), message getJMSMessageID()); } } } }); threadPool submit(receivers[i]); } for (int i = 0; i < TEST MESSAGE COUNT / 2; i++) { if (duplicateSignal getCount() == 0) { fail( Duplicate message id detected ); } sendTextMessage(TEST QUEUE NAME, i); } logger info( sent all + TEST MESSAGE COUNT + messages ); boolean ok = Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return TEST MESSAGE COUNT == messages size(); } }, TimeUnit MINUTES toMillis(7)); if (!ok) { AutoFailTestSupport dumpAllThreads( --STUCK -- ); } assertEquals( Number of messages received does not match the number sent , TEST MESSAGE COUNT, messages size()); assertEquals(TEST MESSAGE COUNT, messageCount get()); } private final static class ThreadedMessageReceiver implements Runnable { private IMessageHandler handler = null; private final AtomicBoolean shouldStop = new AtomicBoolean(false); public ThreadedMessageReceiver(String queueName, IMessageHandler handler) { this handler = handler; } Override public void run() { QueueConnection queueConnection = null; QueueSession session = null; QueueReceiver receiver = null; Queue queue = null; Message message = null; try { try { queueConnection = connectionFactory createQueueConnection(); session = queueConnection createQueueSession(TRANSACTED RECEIVE, QueueSession AUTO ACKNOWLEDGE); queue = session createQueue(TEST QUEUE NAME); receiver = session createReceiver(queue); queueConnection start(); logger info( Receiver + Thread currentThread() getName() + connected ); while (!(shouldStop get() || Thread currentThread() isInterrupted())) { try { message = receiver receive(200); } catch (Exception e) { if (e instanceof InterruptedException || e getCause() instanceof InterruptedException) { } else { throw e; } } if (message != null && this handler != null) { this handler onMessage(message); } if (session getTransacted()) { session commit(); } } logger info( Receiver + Thread currentThread() getName() + shutting down ); } finally { if (receiver != null) { try { receiver close(); } catch (JMSException e) { logger warn(e); } } if (session != null) { try { session close(); } catch (JMSException e) { logger warn(e); } } if (queueConnection != null) { queueConnection close(); } } } catch (JMSException e) { logger error(e); e printStackTrace(); } catch (NamingException e) { logger error(e); } catch (Exception e) { logger error(e); e printStackTrace(); } } public void setShouldStop(Boolean shouldStop) { this shouldStop set(shouldStop); } } public interface IMessageHandler { void onMessage(Message message) throws Exception; } }",1.0,
2314,2314,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ1936Test.,ThreadedMessageReceiver,"private final static class ThreadedMessageReceiver implements Runnable { private IMessageHandler handler = null; private final AtomicBoolean shouldStop = new AtomicBoolean(false); public ThreadedMessageReceiver(String queueName, IMessageHandler handler) { this handler = handler; } Override public void run() { QueueConnection queueConnection = null; QueueSession session = null; QueueReceiver receiver = null; Queue queue = null; Message message = null; try { try { queueConnection = connectionFactory createQueueConnection(); session = queueConnection createQueueSession(TRANSACTED RECEIVE, QueueSession AUTO ACKNOWLEDGE); queue = session createQueue(TEST QUEUE NAME); receiver = session createReceiver(queue); queueConnection start(); logger info( Receiver + Thread currentThread() getName() + connected ); while (!(shouldStop get() || Thread currentThread() isInterrupted())) { try { message = receiver receive(200); } catch (Exception e) { if (e instanceof InterruptedException || e getCause() instanceof InterruptedException) { } else { throw e; } } if (message != null && this handler != null) { this handler onMessage(message); } if (session getTransacted()) { session commit(); } } logger info( Receiver + Thread currentThread() getName() + shutting down ); } finally { if (receiver != null) { try { receiver close(); } catch (JMSException e) { logger warn(e); } } if (session != null) { try { session close(); } catch (JMSException e) { logger warn(e); } } if (queueConnection != null) { queueConnection close(); } } } catch (JMSException e) { logger error(e); e printStackTrace(); } catch (NamingException e) { logger error(e); } catch (Exception e) { logger error(e); e printStackTrace(); } } public void setShouldStop(Boolean shouldStop) { this shouldStop set(shouldStop); } }",1.0,
2315,2315,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2021Test.,AMQ2021Test,"public class AMQ2021Test extends TestCase implements ExceptionListener, UncaughtExceptionHandler { private static final Logger log = LoggerFactory getLogger(AMQ2021Test class); BrokerService brokerService; ArrayList<Thread> threads = new ArrayList<Thread>(); Vector<Throwable> exceptions; AMQ2021Test testCase; private final String ACTIVEMQ BROKER BIND = tcp private String CONSUMER BROKER URL = jms redeliveryPolicy maximumRedeliveries=1&jms redeliveryPolicy initialRedeliveryDelay=0 ; private String PRODUCER BROKER URL; private final int numMessages = 1000; private final int numConsumers = 2; private final int dlqMessages = numMessages/2; private CountDownLatch receivedLatch; private ActiveMQTopic destination; private CountDownLatch started; Override protected void setUp() throws Exception { Thread setDefaultUncaughtExceptionHandler(this); testCase = this; brokerService = new BrokerService(); brokerService setDeleteAllMessagesOnStartup(true); brokerService addConnector(ACTIVEMQ BROKER BIND); brokerService start(); destination = new ActiveMQTopic(getName()); exceptions = new Vector<Throwable>(); CONSUMER BROKER URL = brokerService getTransportConnectors() get(0) getPublishableConnectString() + CONSUMER BROKER URL; PRODUCER BROKER URL = brokerService getTransportConnectors() get(0) getPublishableConnectString(); receivedLatch = new CountDownLatch(numConsumers * (numMessages + dlqMessages)); started = new CountDownLatch(1); } Override protected void tearDown() throws Exception { for (Thread t threads) { t interrupt(); t join(); } brokerService stop(); } public void testConcurrentTopicResendToDLQ() throws Exception { for (int i=0; i<numConsumers;i++) { ConsumerThread c1 = new ConsumerThread( Consumer- + i); threads add(c1); c1 start(); } assertTrue(started await(10, TimeUnit SECONDS)); Thread producer = new Thread() { Override public void run() { try { produce(numMessages); } catch (Exception e) { } } }; threads add(producer); producer start(); boolean allGood = receivedLatch await(90, TimeUnit SECONDS); for (Throwable t exceptions) { log error( failing test with first exception , t); fail( exception during test + t); } assertTrue( excepted messages received within time limit , allGood); assertEquals(0, exceptions size()); for (int i=0; i<numConsumers; i++) { assertEquals(dlqMessages*2, ((ConsumerThread)threads get(i)) recoveries); assertEquals(numMessages + dlqMessages, ((ConsumerThread)threads get(i)) counter); } consumeFromDLQ(dlqMessages); } private void consumeFromDLQ( int messageCount) throws Exception { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONSUMER BROKER URL); Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer dlqConsumer = session createConsumer(new ActiveMQQueue( ActiveMQ DLQ )); int count = 0; for (int i=0; i< messageCount; i++) { if (dlqConsumer receive(1000) == null) { break; } count++; } assertEquals(messageCount, count); } public void produce(int count) throws Exception { Connection connection=null; try { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(PRODUCER BROKER URL); connection = factory createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); producer setTimeToLive(0); connection start(); for (int i=0 ; i< count; i++) { int id = i+1; TextMessage message = session createTextMessage(getName()+ Message + id); message setIntProperty( MsgNumber , id); producer send(message); if (id % 500 == 0) { log info( sent + id + , ith + message); } } } catch (JMSException e) { log error( unexpected ex on produce , e); exceptions add(e); } finally { try { if (connection != null) { connection close(); } } catch (Throwable e) { } } } public class ConsumerThread extends Thread implements MessageListener { public long counter = 0; public long recoveries = 0; private Session session; public ConsumerThread(String threadId) { super(threadId); } public void run() { try { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONSUMER BROKER URL); Connection connection = connectionFactory createConnection(); connection setExceptionListener(testCase); connection setClientID(getName()); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = session createDurableSubscriber(destination, getName()); consumer setMessageListener(this); connection start(); started countDown(); } catch (JMSException exception) { log error( unexpected ex in consumer run , exception); exceptions add(exception); } } public void onMessage(Message message) { try { counter++; int messageNumber=message getIntProperty( MsgNumber ); if(messageNumber%2==0){ session recover(); recoveries++; } else { message acknowledge(); } if (counter % 200 == 0) { log info( recoveries + recoveries + , Received + counter + , counter th + message); } receivedLatch countDown(); }catch (Exception e) { log error( unexpected ex on onMessage , e); exceptions add(e); } } } public void onException(JMSException exception) { log info( Unexpected JMSException , exception); exceptions add(exception); } public void uncaughtException(Thread thread, Throwable exception) { log info( Unexpected exception from thread + thread + , ex + exception); exceptions add(exception); } }",1.0,
2316,2316,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2021Test.,ConsumerThread,"public class ConsumerThread extends Thread implements MessageListener { public long counter = 0; public long recoveries = 0; private Session session; public ConsumerThread(String threadId) { super(threadId); } public void run() { try { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(CONSUMER BROKER URL); Connection connection = connectionFactory createConnection(); connection setExceptionListener(testCase); connection setClientID(getName()); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = session createDurableSubscriber(destination, getName()); consumer setMessageListener(this); connection start(); started countDown(); } catch (JMSException exception) { log error( unexpected ex in consumer run , exception); exceptions add(exception); } } public void onMessage(Message message) { try { counter++; int messageNumber=message getIntProperty( MsgNumber ); if(messageNumber%2==0){ session recover(); recoveries++; } else { message acknowledge(); } if (counter % 200 == 0) { log info( recoveries + recoveries + , Received + counter + , counter th + message); } receivedLatch countDown(); }catch (Exception e) { log error( unexpected ex on onMessage , e); exceptions add(e); } } }",1.0,
2319,2319,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2149KahaDBTest.,AMQ2149KahaDBTest,public class AMQ2149KahaDBTest extends AMQ2149Test { Override protected void configurePersistenceAdapter(BrokerService brokerService) throws Exception { } },1.0,
2321,2321,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2149Test.,Receiver,"private class Receiver implements MessageListener { private final javax jms Destination dest; private final Connection connection; private final Session session; private final MessageConsumer messageConsumer; private volatile long nextExpectedSeqNum = 0; private final boolean transactional; private String lastId = null; public Receiver(javax jms Destination dest, boolean transactional) throws JMSException { this dest = dest; this transactional = transactional; connection = new ActiveMQConnectionFactory(brokerURL) createConnection(); connection setClientID(dest toString()); session = connection createSession(transactional, transactional Session SESSION TRANSACTED Session AUTO ACKNOWLEDGE); if (ActiveMQDestination transform(dest) isTopic()) { messageConsumer = session createDurableSubscriber((Topic) dest, dest toString()); } else { messageConsumer = session createConsumer(dest); } messageConsumer setMessageListener(this); connection start(); } public void close() throws JMSException { connection close(); } public long getNextExpectedSeqNo() { return nextExpectedSeqNum; } final int TRANSACITON BATCH = 500; public void onMessage(Message message) { try { final long seqNum = message getLongProperty(SEQ NUM PROPERTY); if ((seqNum % TRANSACITON BATCH) == 0) { LOG info(dest + received + seqNum); if (transactional) { LOG info( committing ); session commit(); } } if (seqNum != nextExpectedSeqNum) { LOG warn(dest + received + seqNum + in msg + message getJMSMessageID() + expected + nextExpectedSeqNum + , lastId + lastId + , message + message); fail(dest + received + seqNum + expected + nextExpectedSeqNum); } ++nextExpectedSeqNum; lastId = message getJMSMessageID(); } catch (TransactionRolledBackException expectedSometimesOnFailoverRecovery) { LOG info( got rollback + expectedSometimesOnFailoverRecovery); nextExpectedSeqNum -= (TRANSACITON BATCH -1); } catch (Throwable e) { LOG error(dest + onMessage error , e); exceptions add(e); } } }",1.0,
2322,2322,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2149Test.,Sender,"private class Sender implements Runnable { private final javax jms Destination dest; private final Connection connection; private final Session session; private final MessageProducer messageProducer; private volatile long nextSequenceNumber = 0; public Sender(javax jms Destination dest) throws JMSException { this dest = dest; connection = new ActiveMQConnectionFactory(brokerURL) createConnection(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); messageProducer = session createProducer(dest); messageProducer setDeliveryMode(DeliveryMode PERSISTENT); connection start(); } public void run() { final String longString = buildLongString(); while (nextSequenceNumber < numtoSend) { try { final Message message = session createTextMessage(longString); message setLongProperty(SEQ NUM PROPERTY, nextSequenceNumber); ++nextSequenceNumber; messageProducer send(message); if ((nextSequenceNumber % 500) == 0) { LOG info(dest + sent + nextSequenceNumber); } } catch (Exception e) { LOG error(dest + send error , e); exceptions add(e); } if (sleepBetweenSend > 0) { try { Thread sleep(sleepBetweenSend); } catch (InterruptedException e) { LOG warn(dest + sleep interrupted , e); } } } try { connection close(); } catch (JMSException ignored) { } } }",1.0,
2323,2323,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2149Test.,RestartTask,"class RestartTask extends TimerTask { public void run() { synchronized (brokerLock) { LOG info( stopping broker ); try { broker stop(); broker waitUntilStopped(); } catch (Exception e) { LOG error( ex on broker stop , e); exceptions add(e); } LOG info( restarting broker ); try { createBroker(configurer); broker waitUntilStarted(); } catch (Exception e) { LOG error( ex on broker restart , e); exceptions add(e); } } if (++numBrokerRestarts < MAX BROKER RESTARTS) { try { timer schedule(new RestartTask(), brokerStopPeriod); } catch (IllegalStateException ignore alreadyCancelled) { } } else { LOG info( no longer stopping broker on reaching Max restarts + MAX BROKER RESTARTS); } } }",1.0,
2325,2325,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2200Test.,AMQ2200Test,"public class AMQ2200Test { private static final String bindAddress = tcp private BrokerService broker; private ActiveMQConnectionFactory cf; Before public void setUp() throws Exception { broker = new BrokerService(); broker setDataDirectory( target + File separator + activemq-data ); broker setPersistent(true); broker setUseJmx(true); broker setAdvisorySupport(false); broker setDeleteAllMessagesOnStartup(true); broker addConnector(bindAddress); String address = broker getTransportConnectors() get(0) getPublishableConnectString(); broker start(); broker waitUntilStarted(); cf = new ActiveMQConnectionFactory(address); } After public void tearDown() throws Exception { if (broker != null) { broker stop(); broker waitUntilStopped(); } } Test public void testTopicSubscriptionView() throws Exception { TopicConnection connection = cf createTopicConnection(); TopicSession session = connection createTopicSession(false, Session AUTO ACKNOWLEDGE); Topic destination = session createTopic( TopicViewTestTopic ); MessageConsumer consumer = session createConsumer(destination); assertNotNull(consumer); TimeUnit SECONDS sleep(1); ObjectName subscriptionNames[] = broker getAdminView() getTopicSubscribers(); assertTrue(subscriptionNames length > 0); boolean fail = true; for(ObjectName name subscriptionNames) { if (name toString() contains( TopicViewTestTopic )) { TopicSubscriptionViewMBean sub = (TopicSubscriptionViewMBean) broker getManagementContext() newProxyInstance(name, TopicSubscriptionViewMBean class, true); assertNotNull(sub); assertTrue(sub getSessionId() != -1); assertTrue(sub getMaximumPendingQueueSize() == -1); sub setMaximumPendingQueueSize(1000); assertTrue(sub getMaximumPendingQueueSize() != -1); fail = false; } } if (fail) { fail( Didn t find the TopicSubscriptionView ); } } }",1.0,
2326,2326,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2213Test.,AMQ2213Test,"public class AMQ2213Test { BrokerService broker; ConnectionFactory factory; Connection connection; Session session; Queue queue; MessageConsumer consumer; public void createBroker(boolean deleteAll) throws Exception { broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(deleteAll); broker setDataDirectory( target/AMQ3145Test ); broker setUseJmx(true); broker getManagementContext() setCreateConnector(false); broker addConnector( tcp broker start(); broker waitUntilStarted(); factory = new ActiveMQConnectionFactory(broker getTransportConnectors() get(0) getConnectUri() toString()); connection = factory createConnection(); connection start(); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); } Before public void createBroker() throws Exception { createBroker(true); } After public void tearDown() throws Exception { if (consumer != null) { consumer close(); } session close(); connection stop(); connection close(); broker stop(); } Test public void testEqualsGenericSession() throws JMSException { assertNotNull(this connection); Session sess = this connection createSession(false, Session AUTO ACKNOWLEDGE); assertTrue(sess equals(sess)); } Test public void testEqualsTopicSession() throws JMSException { assertNotNull(this connection); assertTrue(this connection instanceof TopicConnection); TopicSession sess = ((TopicConnection)this connection) createTopicSession(false, Session AUTO ACKNOWLEDGE); assertTrue(sess equals(sess)); } Test public void testEqualsQueueSession() throws JMSException { assertNotNull(this connection); assertTrue(this connection instanceof QueueConnection); QueueSession sess = ((QueueConnection)this connection) createQueueSession(false, Session AUTO ACKNOWLEDGE); assertTrue(sess equals(sess)); } }",1.0,
2332,2332,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2401Test.,AMQ2401Test,"public class AMQ2401Test extends TestCase implements MessageListener { private BrokerService broker; private ActiveMQConnectionFactory factory; private static final int SEND COUNT = 500; private static final int CONSUMER COUNT = 50; private static final int PRODUCER COUNT = 1; private static final int LOG INTERVAL = 10; private static final Logger LOG = LoggerFactory getLogger(AMQ2401Test class); private final ArrayList<Service> services = new ArrayList<Service>(CONSUMER COUNT + PRODUCER COUNT); private int count = 0; private CountDownLatch latch; Override protected void setUp() throws Exception { broker = new BrokerService(); broker setDataDirectory( target + File separator + test-data + File separator + AMQ2401Test ); broker setDeleteAllMessagesOnStartup(true); String connectionUri = broker addConnector( tcp PolicyMap policies = new PolicyMap(); PolicyEntry entry = new PolicyEntry(); entry setMemoryLimit(1024 * 100); entry setProducerFlowControl(true); entry setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy()); entry setQueue( > ); policies setDefaultEntry(entry); broker setDestinationPolicy(policies); broker setUseJmx(false); broker start(); broker waitUntilStarted(); factory = new ActiveMQConnectionFactory(connectionUri); super setUp(); } Override protected void tearDown() throws Exception { broker stop(); broker waitUntilStopped(); } public void testDupsOk() throws Exception { TestProducer p = null; TestConsumer c = null; try { latch = new CountDownLatch(SEND COUNT); for (int i = 0; i < CONSUMER COUNT; i++) { TestConsumer consumer = new TestConsumer(); consumer start(); services add(consumer); } for (int i = 0; i < PRODUCER COUNT; i++) { TestProducer producer = new TestProducer(); producer start(); services add(producer); } waitForMessageReceipt(TimeUnit SECONDS toMillis(30)); } finally { if (p != null) { p close(); } if (c != null) { c close(); } } } Override public void onMessage(Message message) { latch countDown(); if (++count % LOG INTERVAL == 0) { LOG debug( Received message + count); } try { Thread sleep(1); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } private void waitForMessageReceipt(long timeout) throws InterruptedException, TimeoutException { if (!latch await(timeout, TimeUnit MILLISECONDS)) { throw new TimeoutException(String format( Consumner didn t receive expected of messages, %d of %d received , latch getCount(), SEND COUNT)); } } private interface Service { public void start() throws Exception; public void close(); } private class TestProducer implements Runnable, Service { Thread thread; BytesMessage message; Connection connection; Session session; MessageProducer producer; TestProducer() throws Exception { thread = new Thread(this, TestProducer ); connection = factory createConnection(); connection start(); session = connection createSession(false, Session DUPS OK ACKNOWLEDGE); producer = session createProducer(session createQueue( AMQ2401Test )); } Override public void start() { thread start(); } Override public void run() { int count = SEND COUNT / PRODUCER COUNT; for (int i = 1; i <= count; i++) { try { if ((i % LOG INTERVAL) == 0) { LOG debug( Sending + i); } message = session createBytesMessage(); message writeBytes(new byte[1024]); producer send(message); } catch (JMSException jmse) { jmse printStackTrace(); break; } } } Override public void close() { try { connection close(); } catch (JMSException e) { } } } private class TestConsumer implements Runnable, Service { ActiveMQConnection connection; Session session; MessageConsumer consumer; TestConsumer() throws Exception { factory setOptimizeAcknowledge(false); connection = (ActiveMQConnection) factory createConnection(); session = connection createSession(false, Session DUPS OK ACKNOWLEDGE); consumer = session createConsumer(session createQueue( AMQ2401Test )); consumer setMessageListener(AMQ2401Test this); } Override public void start() throws Exception { connection start(); } Override public void close() { try { connection close(); } catch (JMSException e) { } } Override public void run() { while (latch getCount() > 0) { try { onMessage(consumer receive()); } catch (Exception e) { e printStackTrace(); } } } } }",1.0,
2333,2333,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2401Test.,TestProducer,"private class TestProducer implements Runnable, Service { Thread thread; BytesMessage message; Connection connection; Session session; MessageProducer producer; TestProducer() throws Exception { thread = new Thread(this, TestProducer ); connection = factory createConnection(); connection start(); session = connection createSession(false, Session DUPS OK ACKNOWLEDGE); producer = session createProducer(session createQueue( AMQ2401Test )); } Override public void start() { thread start(); } Override public void run() { int count = SEND COUNT / PRODUCER COUNT; for (int i = 1; i <= count; i++) { try { if ((i % LOG INTERVAL) == 0) { LOG debug( Sending + i); } message = session createBytesMessage(); message writeBytes(new byte[1024]); producer send(message); } catch (JMSException jmse) { jmse printStackTrace(); break; } } } Override public void close() { try { connection close(); } catch (JMSException e) { } } }",1.0,
2334,2334,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2401Test.,TestConsumer,"private class TestConsumer implements Runnable, Service { ActiveMQConnection connection; Session session; MessageConsumer consumer; TestConsumer() throws Exception { factory setOptimizeAcknowledge(false); connection = (ActiveMQConnection) factory createConnection(); session = connection createSession(false, Session DUPS OK ACKNOWLEDGE); consumer = session createConsumer(session createQueue( AMQ2401Test )); consumer setMessageListener(AMQ2401Test this); } Override public void start() throws Exception { connection start(); } Override public void close() { try { connection close(); } catch (JMSException e) { } } Override public void run() { while (latch getCount() > 0) { try { onMessage(consumer receive()); } catch (Exception e) { e printStackTrace(); } } } }",1.0,
2335,2335,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2413Test.,AMQ2413Test,"public class AMQ2413Test extends CombinationTestSupport implements MessageListener { private static final Logger LOG = LoggerFactory getLogger(AMQ2413Test class); BrokerService broker; private ActiveMQConnectionFactory factory; private static final int HANG THRESHOLD = 60; private static final int SEND COUNT = 1000; private static final int RECEIVER THINK TIME = 1; private static final int CONSUMER COUNT = 1; private static final int PRODUCER COUNT = 50; private static final int TO SEND = SEND COUNT / PRODUCER COUNT; public int deliveryMode = DeliveryMode NON PERSISTENT; public int ackMode = Session DUPS OK ACKNOWLEDGE; public boolean useVMCursor = false; public boolean useOptimizeAcks = false; private final ArrayList<Service> services = new ArrayList<Service>(CONSUMER COUNT + PRODUCER COUNT); AtomicInteger count = new AtomicInteger(0); Semaphore receivedMessages; AtomicBoolean running = new AtomicBoolean(false); public void initCombos() { addCombinationValues( deliveryMode , new Object[] { DeliveryMode PERSISTENT, DeliveryMode NON PERSISTENT }); addCombinationValues( ackMode , new Object[] { Session DUPS OK ACKNOWLEDGE, Session AUTO ACKNOWLEDGE }); addCombinationValues( useVMCursor , new Object[] { true, false }); } Override protected void setUp() throws Exception { broker = new BrokerService(); broker setDataDirectory( target + File separator + test-data + File separator + AMQ2401Test ); broker setDeleteAllMessagesOnStartup(true); KahaDBPersistenceAdapter kahaDb = (KahaDBPersistenceAdapter) broker getPersistenceAdapter(); kahaDb setConcurrentStoreAndDispatchQueues(false); broker addConnector( tcp PolicyMap policies = new PolicyMap(); PolicyEntry entry = new PolicyEntry(); entry setMemoryLimit(1024 * 1024); entry setProducerFlowControl(true); if (useVMCursor) { entry setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy()); } entry setQueue( > ); policies setDefaultEntry(entry); broker setDestinationPolicy(policies); broker start(); broker waitUntilStarted(); count set(0); receivedMessages = new Semaphore(0); factory = new ActiveMQConnectionFactory( tcp setAutoFail(true); super setUp(); } Override protected void tearDown() throws Exception { running set(false); for (Service service services) { service close(); } broker stop(); broker waitUntilStopped(); super tearDown(); } public void testReceipt() throws Exception { running set(true); TestProducer p = null; TestConsumer c = null; try { for (int i = 0; i < CONSUMER COUNT; i++) { TestConsumer consumer = new TestConsumer(); consumer start(); services add(consumer); } for (int i = 0; i < PRODUCER COUNT; i++) { TestProducer producer = new TestProducer(i); producer start(); services add(producer); } waitForMessageReceipt(); } finally { if (p != null) { p close(); } if (c != null) { c close(); } } } Override public void onMessage(Message message) { receivedMessages release(); if (count incrementAndGet() % 100 == 0) { LOG info( Received message + count); } track(message); if (RECEIVER THINK TIME > 0) { try { Thread sleep(RECEIVER THINK TIME); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } } HashMap<ProducerId, boolean[]> tracker = new HashMap<ProducerId, boolean[]>(); private synchronized void track(Message message) { try { MessageId id = new MessageId(message getJMSMessageID()); ProducerId pid = id getProducerId(); int seq = (int) id getProducerSequenceId(); boolean[] ids = tracker get(pid); if (ids == null) { ids = new boolean[TO SEND + 1]; ids[seq] = true; tracker put(pid, ids); } else { assertTrue( not already received + id, !ids[seq]); ids[seq] = true; } } catch (Exception e) { LOG error(e toString()); } } private void waitForMessageReceipt() throws InterruptedException, TimeoutException { try { while (count get() < SEND COUNT) { if (!receivedMessages tryAcquire(HANG THRESHOLD, TimeUnit SECONDS)) { if (count get() == SEND COUNT) break; verifyTracking(); throw new TimeoutException( count= + count get() + Message not received for more than + HANG THRESHOLD + seconds ); } } } finally { running set(false); } } private void verifyTracking() { Vector<MessageId> missing = new Vector<MessageId>(); for (ProducerId pid tracker keySet()) { boolean[] ids = tracker get(pid); for (int i = 1; i < TO SEND + 1; i++) { if (!ids[i]) { missing add(new MessageId(pid, i)); } } } assertTrue( No missing messages + missing, missing isEmpty()); } private interface Service { public void start() throws Exception; public void close(); } private class TestProducer implements Runnable, Service { Thread thread; BytesMessage message; Connection connection; Session session; MessageProducer producer; TestProducer(int id) throws Exception { thread = new Thread(this, TestProducer- + id); connection = factory createConnection(); connection start(); session = connection createSession(false, Session DUPS OK ACKNOWLEDGE); producer = session createProducer(session createQueue( AMQ2401Test )); } Override public void start() { thread start(); } Override public void run() { int i = 1; for (; i <= TO SEND; i++) { try { if (+i % 100 == 0) { LOG info(Thread currentThread() getName() + Sending message + i); } message = session createBytesMessage(); message writeBytes(new byte[1024]); producer setDeliveryMode(deliveryMode); producer send(message); } catch (JMSException jmse) { jmse printStackTrace(); break; } } LOG info(Thread currentThread() getName() + Sent + (i - 1)); } Override public void close() { try { connection close(); } catch (JMSException e) { e printStackTrace(); } } } private class TestConsumer implements Runnable, Service { ActiveMQConnection connection; Session session; MessageConsumer consumer; TestConsumer() throws Exception { factory setOptimizeAcknowledge(false); connection = (ActiveMQConnection) factory createConnection(); if (useOptimizeAcks) { connection setOptimizeAcknowledge(true); } session = connection createSession(false, ackMode); consumer = session createConsumer(session createQueue( AMQ2401Test )); consumer setMessageListener(AMQ2413Test this); } Override public void start() throws Exception { connection start(); } Override public void close() { try { connection close(); } catch (JMSException e) { e printStackTrace(); } } Override public void run() { while (running get()) { try { onMessage(consumer receive()); } catch (Exception e) { e printStackTrace(); } } } } public static Test suite() { return suite(AMQ2413Test class); } }",1.0,
2336,2336,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2413Test.,TestProducer,"private class TestProducer implements Runnable, Service { Thread thread; BytesMessage message; Connection connection; Session session; MessageProducer producer; TestProducer(int id) throws Exception { thread = new Thread(this, TestProducer- + id); connection = factory createConnection(); connection start(); session = connection createSession(false, Session DUPS OK ACKNOWLEDGE); producer = session createProducer(session createQueue( AMQ2401Test )); } Override public void start() { thread start(); } Override public void run() { int i = 1; for (; i <= TO SEND; i++) { try { if (+i % 100 == 0) { LOG info(Thread currentThread() getName() + Sending message + i); } message = session createBytesMessage(); message writeBytes(new byte[1024]); producer setDeliveryMode(deliveryMode); producer send(message); } catch (JMSException jmse) { jmse printStackTrace(); break; } } LOG info(Thread currentThread() getName() + Sent + (i - 1)); } Override public void close() { try { connection close(); } catch (JMSException e) { e printStackTrace(); } } }",1.0,
2338,2338,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2439Test.,AMQ2439Test,"public class AMQ2439Test extends JmsMultipleBrokersTestSupport { private static final Logger LOG = LoggerFactory getLogger(AMQ2439Test class); Destination dest; public void testDuplicatesThroughNetwork() throws Exception { assertEquals( received expected amount , 500, receiveExactMessages( BrokerB , 500)); assertEquals( received expected amount , 500, receiveExactMessages( BrokerB , 500)); validateQueueStats(); } private void validateQueueStats() throws Exception { final BrokerView brokerView = brokers get( BrokerA ) broker getAdminView(); assertEquals( enequeue is correct , 1000, brokerView getTotalEnqueueCount()); assertTrue( dequeue is correct , Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { LOG info( dequeue count (want 1000), is + brokerView getTotalDequeueCount()); return 1000 == brokerView getTotalDequeueCount(); } })); } protected int receiveExactMessages(String brokerName, int msgCount) throws Exception { BrokerItem brokerItem = brokers get(brokerName); Connection connection = brokerItem createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(dest); Message msg; int i; for (i = 0; i < msgCount; i++) { msg = consumer receive(1000); if (msg == null) { break; } } connection close(); brokerItem connections remove(connection); return i; } public void setUp() throws Exception { super setUp(); createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp bridgeBrokers( BrokerA , BrokerB ); startAllBrokers(); dest = createDestination( TEST FOO , false); sendMessages( BrokerA , dest, 1000); } }",1.0,
2340,2340,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2489Test.,Consumer,"public final class Consumer implements MessageListener { final Session session; private Consumer(int acknowledgmentMode) { try { session = connection createSession(false, acknowledgmentMode); final Queue queue = session createQueue(getQueueName() + consumer prefetchSize=1 ); final MessageConsumer consumer = session createConsumer(queue); consumer setMessageListener(this); } catch (JMSException e) { e printStackTrace(); throw new RuntimeException(e); } } public void onMessage(Message message) { try { final int seqNum = message getIntProperty(SEQ NUM PROPERTY); if ((seqNum % 2) == 0) { System out println( Delayed message sequence numeber + seqNum); try { TimeUnit SECONDS sleep(1); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } message acknowledge(); } catch (JMSException e) { e printStackTrace(); throw new RuntimeException(e); } finally { LATCH countDown(); } } private void close() { if (session != null) { try { session close(); } catch (JMSException e) { e printStackTrace(); throw new RuntimeException(e); } } } }",1.0,
2341,2341,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2489Test.,TestExceptionListener,public final class TestExceptionListener implements ExceptionListener { private final java util Queue<Exception> exceptions = new ConcurrentLinkedQueue<Exception>(); public void onException(JMSException e) { exceptions add(e); } public boolean hasExceptions() { return exceptions isEmpty() == false; } public String getStatusText() { final StringBuilder str = new StringBuilder(); str append( Exceptions count on broker side + exceptions size() + nMessages n ); for (Exception e exceptions) { str append(e getMessage() + n n ); } return str toString(); } },1.0,
2345,2345,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2528Test.,AMQ2528Test,"public class AMQ2528Test extends EmbeddedBrokerTestSupport { protected void setUp() throws Exception { useTopic = false; super setUp(); } public void testRemoveMatchingMessages() throws Exception { final int NUM MESSAGES = 100; final String MESSAGE ID = id ; Connection conn = createConnection(); try { conn start(); Session session = conn createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); for (int id = 0; id < NUM MESSAGES; id++) { Message message = session createMessage(); message setIntProperty(MESSAGE ID, id); producer send(message); } producer close(); session close(); } finally { conn close(); } Queue queue = (Queue) broker getRegionBroker() getDestinations( destination) iterator() next(); Assert assertEquals(NUM MESSAGES / 2, queue removeMatchingMessages(MESSAGE ID + < + NUM MESSAGES / 2)); Assert assertEquals(NUM MESSAGES - NUM MESSAGES / 2, queue removeMatchingMessages( )); } }",1.0,
2347,2347,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2580Test.,AMQ2580Test,"public class AMQ2580Test extends TestSupport { private static final Logger LOG = LoggerFactory getLogger(AMQ2580Test class); private static final String TOPIC NAME = topicName ; private static final String CLIENT ID = client id ; private static final String textOfSelectedMsg = good message ; protected TopicConnection connection; private Topic topic; private Session session; private MessageProducer producer; private ConnectionFactory connectionFactory; private BrokerService service; public static Test suite() { return suite(AMQ2580Test class); } protected void setUp() throws Exception { super setUp(); initDurableBroker(); initConnectionFactory(); initTopic(); } protected void tearDown() throws Exception { shutdownClient(); service stop(); super tearDown(); } private void initConnection() throws JMSException { if (connection == null) { LOG info( Initializing connection ); connection = (TopicConnection) connectionFactory createConnection(); connection start(); } } public void initCombosForTestTopicIsDurableSmokeTest() throws Exception { addCombinationValues( defaultPersistenceAdapter , PersistenceAdapterChoice values()); } public void testTopicIsDurableSmokeTest() throws Exception { initClient(); MessageConsumer consumer = createMessageConsumer(); LOG info( Consuming message ); assertNull(consumer receive(1)); shutdownClient(); consumer close(); sendMessages(); shutdownClient(); initClient(); consumer = createMessageConsumer(); LOG info( Consuming message ); TextMessage answer1 = (TextMessage) consumer receive(1000); assertNotNull( we got our message , answer1); consumer close(); } private MessageConsumer createMessageConsumer() throws JMSException { LOG info( creating durable subscriber ); return session createDurableSubscriber(topic, TOPIC NAME, name= value , false); } private void initClient() throws JMSException { LOG info( Initializing client ); initConnection(); initSession(); } private void shutdownClient() throws JMSException { LOG info( Closing session and connection ); session close(); connection close(); session = null; connection = null; } private void sendMessages() throws JMSException { initConnection(); initSession(); LOG info( Creating producer ); producer = session createProducer(topic); sendMessageThatFailsSelection(); sendMessage(textOfSelectedMsg, value ); } private void initSession() throws JMSException { LOG info( Initializing session ); session = connection createTopicSession(false, Session AUTO ACKNOWLEDGE); } private void sendMessageThatFailsSelection() throws JMSException { for (int i = 0; i < 5; i++) { String textOfNotSelectedMsg = Msg + i; sendMessage(textOfNotSelectedMsg, not value ); LOG info( ); } } private void sendMessage( String msgText, String propertyValue) throws JMSException { LOG info( Creating message + msgText); TextMessage messageToSelect = session createTextMessage(msgText); messageToSelect setStringProperty( name , propertyValue); LOG info( Sending message ); producer send(messageToSelect); } protected void initConnectionFactory() throws Exception { ActiveMQConnectionFactory activeMqConnectionFactory = createActiveMqConnectionFactory(); connectionFactory = activeMqConnectionFactory; } private ActiveMQConnectionFactory createActiveMqConnectionFactory() throws Exception { ActiveMQConnectionFactory activeMqConnectionFactory = new ActiveMQConnectionFactory( failover + service getTransportConnectors() get(0) getConnectUri() toString()); activeMqConnectionFactory setWatchTopicAdvisories(false); ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy(); prefetchPolicy setDurableTopicPrefetch(2); prefetchPolicy setOptimizeDurableTopicPrefetch(2); activeMqConnectionFactory setPrefetchPolicy(prefetchPolicy); activeMqConnectionFactory setClientID(CLIENT ID); return activeMqConnectionFactory; } private void initDurableBroker() throws Exception { service = new BrokerService(); setDefaultPersistenceAdapter(service); service setDeleteAllMessagesOnStartup(true); service setAdvisorySupport(false); service setTransportConnectorURIs(new String[]{ tcp service setPersistent(true); service setUseJmx(false); service start(); } private void initTopic() throws JMSException { initConnection(); TopicSession topicSession = connection createTopicSession(false, Session AUTO ACKNOWLEDGE); topic = topicSession createTopic(TOPIC NAME); } }",1.0,
2350,2350,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2585Test.,AMQ2585Test,"public class AMQ2585Test extends EmbeddedBrokerAndConnectionTestSupport { private final Destination destination = new ActiveMQQueue( MyQueue ); final static String LENGTH10STRING = 1234567890 ; private Session session; private MessageProducer producer; private ConsumerBean messageList; public void testOneMessageWithProperties() throws Exception { TextMessage message = session createTextMessage(LENGTH10STRING); message setStringProperty(LENGTH10STRING, LENGTH10STRING); producer send(message); messageList assertMessagesArrived(1); ActiveMQTextMessage received = ((ActiveMQTextMessage) messageList flushMessages() get(0)); assertEquals(LENGTH10STRING, received getText()); assertTrue(received getProperties() size() > 0); assertTrue(received propertyExists(LENGTH10STRING)); assertEquals(LENGTH10STRING, received getStringProperty(LENGTH10STRING)); final int sizeShouldBeNoLessThan = LENGTH10STRING length() * 4 + Message DEFAULT MINIMUM MESSAGE SIZE; assertTrue( Message size was smaller than expected + received getSize(), received getSize() >= sizeShouldBeNoLessThan); assertFalse(LENGTH10STRING length() * 2 == received getSize()); } Override protected void setUp() throws Exception { bindAddress = bindAddress + marshal=true ; super setUp(); messageList = new ConsumerBean(); messageList setVerbose(true); session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer messageConsumer = session createConsumer(destination); messageConsumer setMessageListener(messageList); producer = session createProducer(destination); } }",1.0,
2351,2351,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2616Test.,AMQ2616Test,"public class AMQ2616Test extends TestCase { private static final int NUMBER = 2000; private BrokerService brokerService; private final ArrayList<Thread> threads = new ArrayList<Thread>(); private final String ACTIVEMQ BROKER BIND = tcp private final AtomicBoolean shutdown = new AtomicBoolean(); private String connectionUri; public void testQueueResourcesReleased() throws Exception{ ActiveMQConnectionFactory fac = new ActiveMQConnectionFactory(connectionUri); Connection tempConnection = fac createConnection(); tempConnection start(); Session tempSession = tempConnection createSession(false, Session AUTO ACKNOWLEDGE); Queue tempQueue = tempSession createTemporaryQueue(); Connection testConnection = fac createConnection(); long startUsage = brokerService getSystemUsage() getMemoryUsage() getUsage(); Session testSession = testConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer testProducer = testSession createProducer(tempQueue); byte[] payload = new byte[1024*4]; for (int i = 0; i < NUMBER; i++ ) { BytesMessage msg = testSession createBytesMessage(); msg writeBytes(payload); testProducer send(msg); } long endUsage = brokerService getSystemUsage() getMemoryUsage() getUsage(); assertFalse(startUsage==endUsage); tempConnection close(); Thread sleep(1000); endUsage = brokerService getSystemUsage() getMemoryUsage() getUsage(); assertEquals(startUsage,endUsage); } Override protected void setUp() throws Exception { brokerService = new BrokerService(); KahaDBPersistenceAdapter adaptor = new KahaDBPersistenceAdapter(); adaptor setEnableJournalDiskSyncs(false); File file = new File( target/AMQ2616Test ); IOHelper mkdirs(file); IOHelper deleteChildren(file); adaptor setDirectory(file); brokerService setPersistenceAdapter(adaptor); PolicyMap policyMap = new PolicyMap(); PolicyEntry pe = new PolicyEntry(); pe setMemoryLimit(10 * 1024 * 1024); pe setOptimizedDispatch(true); pe setProducerFlowControl(false); pe setExpireMessagesPeriod(1000); pe setPendingQueuePolicy(new FilePendingQueueMessageStoragePolicy()); policyMap put(new ActiveMQQueue( > ), pe); brokerService setDestinationPolicy(policyMap); brokerService getSystemUsage() getMemoryUsage() setLimit(20 * 1024 * 1024); brokerService getSystemUsage() getTempUsage() setLimit(200 * 1024 * 1024); brokerService addConnector(ACTIVEMQ BROKER BIND); brokerService start(); brokerService waitUntilStarted(); connectionUri = brokerService getTransportConnectors() get(0) getPublishableConnectString(); new ActiveMQQueue(getName()); } Override protected void tearDown() throws Exception { shutdown set(true); for (Thread t threads) { t interrupt(); t join(); } brokerService stop(); } }",1.0,
2352,2352,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2645Test.,AMQ2645Test,"public class AMQ2645Test extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(AMQ2645Test class); private final static String QUEUE NAME = test daroo q ; public void testWaitForTransportInterruptionProcessingHang() throws Exception { final ConnectionFactory fac = new ActiveMQConnectionFactory( failover ( + this bindAddress + ) ); final Connection connection = fac createConnection(); try { final Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); final Queue queue = session createQueue(QUEUE NAME); final MessageProducer producer = session createProducer(queue); producer setDeliveryMode(DeliveryMode PERSISTENT); connection start(); producer send(session createTextMessage( test )); final CountDownLatch afterRestart = new CountDownLatch(1); final CountDownLatch twoNewMessages = new CountDownLatch(1); final CountDownLatch thirdMessageReceived = new CountDownLatch(1); final MessageConsumer consumer = session createConsumer(session createQueue(QUEUE NAME)); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { try { afterRestart await(); final TextMessage txtMsg = (TextMessage) message; if (txtMsg getText() equals( test )) { producer send(session createTextMessage( test 1 )); TimeUnit SECONDS sleep(5); producer send(session createTextMessage( test 2 )); LOG info( Two new messages produced ); twoNewMessages countDown(); } else if (txtMsg getText() equals( test 3 )) { thirdMessageReceived countDown(); } } catch (Exception e) { LOG error(e toString()); throw new RuntimeException(e); } } }); LOG info( Stopping broker ); broker stop(); LOG info( Creating new broker ); broker = createBroker(); startBroker(); broker waitUntilStarted(); afterRestart countDown(); assertTrue( Consumer is deadlocked! , twoNewMessages await(60, TimeUnit SECONDS)); producer send(session createTextMessage( test 3 )); assertTrue( Consumer got third message after block , thirdMessageReceived await(60, TimeUnit SECONDS)); } finally { broker stop(); } } Override protected void setUp() throws Exception { bindAddress = tcp super setUp(); } }",1.0,
2353,2353,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2736Test.,AMQ2736Test,"public class AMQ2736Test { BrokerService broker; Test public void testRollbackOnRecover() throws Exception { broker = createAndStartBroker(true); DefaultIOExceptionHandler ignoreAllExceptionsIOExHandler = new DefaultIOExceptionHandler(); ignoreAllExceptionsIOExHandler setIgnoreAllErrors(true); broker setIoExceptionHandler(ignoreAllExceptionsIOExHandler); ActiveMQConnectionFactory f = new ActiveMQConnectionFactory( vm f setAlwaysSyncSend(true); Connection c = f createConnection(); c start(); Session s = c createSession(true, Session SESSION TRANSACTED); MessageProducer p = s createProducer(new ActiveMQQueue( Tx )); p send(s createTextMessage( aa )); KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker getPersistenceAdapter(); KahaDBStore store = pa getStore(); assertNotNull( last tx location is present + store getInProgressTxLocationRange()[1]); store getJournal() close(); try { store close(); } catch (Exception expectedLotsAsJournalBorked) { } broker stop(); broker waitUntilStopped(); broker = createAndStartBroker(false); pa = (KahaDBPersistenceAdapter) broker getPersistenceAdapter(); store = pa getStore(); assertNull( in progress tx location is present , store getInProgressTxLocationRange()[0]); } After public void stopBroker() throws Exception { if (broker != null) { broker stop(); } } private BrokerService createAndStartBroker(boolean deleteAll) throws Exception { BrokerService broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(deleteAll); broker setUseJmx(false); broker getManagementContext() setCreateConnector(false); broker start(); return broker; } }",1.0,
2354,2354,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2751Test.,AMQ2751Test,"public class AMQ2751Test extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(AMQ2751Test class); private static String clientIdPrefix = consumer ; private static String queueName = FOO ; public void testRecoverRedelivery() throws Exception { final CountDownLatch redelivery = new CountDownLatch(6); final ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( failover ( + broker getTransportConnectors() get(0) getConnectUri() + ) ); try { Connection connection = factory createConnection(); String clientId = clientIdPrefix; connection setClientID(clientId); final Session session = connection createSession(false, Session CLIENT ACKNOWLEDGE); Queue queue = session createQueue(queueName); MessageConsumer consumer = session createConsumer(queue); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { try { LOG info( Got message + message getJMSMessageID()); if (message getJMSRedelivered()) { LOG info( It s a redelivery ); redelivery countDown(); } LOG info( calling recover() on the session to force redelivery ); session recover(); } catch (JMSException e) { e printStackTrace(); } } }); System out println( Created queue consumer with clientId + clientId); connection start(); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage( test )); assertTrue( we got 6 redeliveries , redelivery await(20, TimeUnit SECONDS)); } finally { broker stop(); } } Override protected void setUp() throws Exception { bindAddress = tcp super setUp(); } }",1.0,
2356,2356,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2832Test.,AMQ2832Test,"public class AMQ2832Test { private static final Logger LOG = LoggerFactory getLogger(AMQ2832Test class); BrokerService broker = null; private final Destination destination = new ActiveMQQueue( AMQ2832Test ); protected void startBroker(boolean delete) throws Exception { broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(delete); broker setPersistent(true); broker setUseJmx(false); broker addConnector( tcp configurePersistence(broker, delete); broker start(); LOG info( Starting broker ); } protected void configurePersistence(BrokerService brokerService, boolean deleteAllOnStart) throws Exception { KahaDBPersistenceAdapter adapter = (KahaDBPersistenceAdapter) brokerService getPersistenceAdapter(); adapter setJournalMaxFileLength(1024 * 20); adapter setCheckpointInterval(500); adapter setCleanupInterval(500); if (!deleteAllOnStart) { adapter setForceRecoverIndex(true); } } Test public void testAckRemovedMessageReplayedAfterRecovery() throws Exception { startBroker(true); StagedConsumer consumer = new StagedConsumer(); int numMessagesAvailable = produceMessagesToConsumeMultipleDataFiles(20); Message firstUnacked = consumer receive(10); LOG info( first unacked + firstUnacked getJMSMessageID()); Message secondUnacked = consumer receive(1); LOG info( second unacked + secondUnacked getJMSMessageID()); numMessagesAvailable -= 11; numMessagesAvailable += produceMessagesToConsumeMultipleDataFiles(10); LOG info( Acking firstUnacked + firstUnacked getJMSMessageID()); firstUnacked acknowledge(); numMessagesAvailable += produceMessagesToConsumeMultipleDataFiles(10); consumer receive(numMessagesAvailable) acknowledge(); consumer close(); broker stop(); broker waitUntilStopped(); startBroker(false); consumer = new StagedConsumer(); Message msg = consumer receive(1, 5); assertNotNull( One messages left after recovery , msg); msg acknowledge(); msg = consumer receive(1, 5); assertEquals( Only one messages left after recovery + msg, null, msg); consumer close(); } private int produceMessagesToConsumeMultipleDataFiles(int numToSend) throws Exception { int sent = 0; Connection connection = new ActiveMQConnectionFactory( broker getTransportConnectors() get(0) getConnectUri()) createConnection(); connection start(); try { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); for (int i = 0; i < numToSend; i++) { producer send(createMessage(session, i)); sent++; } } finally { connection close(); } return sent; } final String payload = new String(new byte[1024]); private Message createMessage(Session session, int i) throws Exception { return session createTextMessage(payload + + i); } private class StagedConsumer { Connection connection; MessageConsumer consumer; StagedConsumer() throws Exception { connection = new ActiveMQConnectionFactory( failover broker getTransportConnectors() get(0) getConnectUri() toString()) createConnection(); connection start(); consumer = connection createSession(false, ActiveMQSession INDIVIDUAL ACKNOWLEDGE) createConsumer(destination); } public Message receive(int numToReceive) throws Exception { return receive(numToReceive, 2); } public Message receive(int numToReceive, int timeoutInSeconds) throws Exception { Message msg = null; for (; numToReceive > 0; numToReceive--) { do { msg = consumer receive(1*1000); } while (msg == null && --timeoutInSeconds > 0); if (numToReceive > 1) { msg acknowledge(); } if (msg != null) { LOG debug( received + msg getJMSMessageID()); } } return msg; } void close() throws JMSException { consumer close(); connection close(); } } }",1.0,
2357,2357,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2832Test.,StagedConsumer,"private class StagedConsumer { Connection connection; MessageConsumer consumer; StagedConsumer() throws Exception { connection = new ActiveMQConnectionFactory( failover broker getTransportConnectors() get(0) getConnectUri() toString()) createConnection(); connection start(); consumer = connection createSession(false, ActiveMQSession INDIVIDUAL ACKNOWLEDGE) createConsumer(destination); } public Message receive(int numToReceive) throws Exception { return receive(numToReceive, 2); } public Message receive(int numToReceive, int timeoutInSeconds) throws Exception { Message msg = null; for (; numToReceive > 0; numToReceive--) { do { msg = consumer receive(1*1000); } while (msg == null && --timeoutInSeconds > 0); if (numToReceive > 1) { msg acknowledge(); } if (msg != null) { LOG debug( received + msg getJMSMessageID()); } } return msg; } void close() throws JMSException { consumer close(); connection close(); } }",1.0,
2362,2362,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2982Test.,CleanableKahaDBStore,private static class CleanableKahaDBStore extends KahaDBStore { public void forceCleanup() throws IOException { checkpointCleanup(true); } public int getFileMapSize() throws IOException { indexLock readLock() lock(); try { return getJournal() getFileMap() size(); } finally { indexLock readLock() unlock(); } } } Before,1.0,
2365,2365,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2983Test.,CleanableKahaDBStore,private static class CleanableKahaDBStore extends KahaDBStore { public void forceCleanup() throws IOException { checkpointCleanup(true); } public int getFileMapSize() throws IOException { indexLock readLock() lock(); try { return getJournal() getFileMap() size(); } finally { indexLock readLock() unlock(); } } },1.0,
2366,2366,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2983Test.,ConsumerThread,"private class ConsumerThread extends Thread { Override public void run() { try { ConnectionFactory factory = new ActiveMQConnectionFactory( vm Connection connection = factory createConnection(); connection start(); Session session = connection createSession(true, Session SESSION TRANSACTED); MessageConsumer consumer = session createConsumer(session createQueue(QUEUE NAME)); do { Message message = consumer receive(200); if (message != null) { session commit(); messageCountDown countDown(); } } while (messageCountDown getCount() != 0); consumer close(); session close(); connection close(); } catch (Exception e) { Assert fail(e getMessage()); } } } Before",1.0,
2367,2367,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3014Test.,AMQ3014Test,"public class AMQ3014Test { private static final String BROKER URL = tcp private List<BrokerInfo> remoteBrokerInfos = Collections synchronizedList(new ArrayList<BrokerInfo>()); private BrokerService localBroker = new BrokerService(); private BrokerService remoteBroker = new BrokerService() { Override protected TransportConnector createTransportConnector(URI brokerURI) throws Exception { TransportServer transport = TransportFactorySupport bind(this, brokerURI); return new TransportConnector(transport) { Override protected Connection createConnection(Transport transport) throws IOException { Connection connection = super createConnection(transport); final TransportListener proxiedListener = transport getTransportListener(); transport setTransportListener(new TransportListener() { Override public void onCommand(Object command) { if (command instanceof BrokerInfo) { remoteBrokerInfos add((BrokerInfo) command); } proxiedListener onCommand(command); } Override public void onException(IOException error) { proxiedListener onException(error); } Override public void transportInterupted() { proxiedListener transportInterupted(); } Override public void transportResumed() { proxiedListener transportResumed(); } }); return connection; } }; } }; Before public void init() throws Exception { localBroker setBrokerName( localBroker ); localBroker setPersistent(false); localBroker setUseJmx(false); localBroker setSchedulerSupport(false); remoteBroker setBrokerName( remoteBroker ); remoteBroker setPersistent(false); remoteBroker setUseJmx(false); remoteBroker addConnector(BROKER URL); remoteBroker setSchedulerSupport(false); } After public void cleanup() throws Exception { try { localBroker stop(); } finally { remoteBroker stop(); } } Test public void NormalCaseTest() throws Exception { runTest(0, 3000); } Test public void DelayedCaseTest() throws Exception { runTest(500, 3000); } private void runTest(final long taskRunnerDelay, long timeout) throws Exception { DiscoveryNetworkConnector dnc = new DiscoveryNetworkConnector(); SimpleDiscoveryAgent da = new SimpleDiscoveryAgent(); da setServices(remoteBroker getTransportConnectors() get(0) getPublishableConnectString()); dnc setDiscoveryAgent(da); localBroker addNetworkConnector(dnc); final TaskRunnerFactory realTaskRunnerFactory = localBroker getTaskRunnerFactory(); localBroker setTaskRunnerFactory(new TaskRunnerFactory() { public TaskRunner createTaskRunner(Task task, String name) { final TaskRunner realTaskRunner = realTaskRunnerFactory createTaskRunner(task, name); if (name startsWith( ActiveMQ Connection Dispatcher )) { return new TaskRunner() { Override public void shutdown() throws InterruptedException { realTaskRunner shutdown(); } Override public void shutdown(long timeout) throws InterruptedException { realTaskRunner shutdown(timeout); } Override public void wakeup() throws InterruptedException { Thread sleep(taskRunnerDelay); realTaskRunner wakeup(); } }; } else { return realTaskRunnerFactory createTaskRunner(task, name); } } }); remoteBroker start(); localBroker start(); long startTimeMillis = System currentTimeMillis(); while (remoteBrokerInfos isEmpty() && (System currentTimeMillis() - startTimeMillis) < timeout) { Thread sleep(100); } Assert assertFalse( Timed out waiting for bridge to form , remoteBrokerInfos isEmpty()); ; Assert assertNotNull( Local broker ID is null , remoteBrokerInfos get( 0) getBrokerId()); } }",1.0,
2368,2368,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3120Test.,AMQ3120Test,"public class AMQ3120Test { private static final Logger LOG = LoggerFactory getLogger(AMQ3120Test class); BrokerService broker = null; File kahaDbDir = null; private final Destination destination = new ActiveMQQueue( AMQ3120Test ); final String payload = new String(new byte[1024]); protected void startBroker(boolean delete) throws Exception { broker = new BrokerService(); kahaDbDir = new File(broker getBrokerDataDirectory(), KahaDB ); deleteDir(kahaDbDir); broker setSchedulerSupport(false); broker setDeleteAllMessagesOnStartup(delete); broker setPersistent(true); broker setUseJmx(false); broker addConnector( tcp PolicyMap map = new PolicyMap(); PolicyEntry entry = new PolicyEntry(); entry setUseCache(false); map setDefaultEntry(entry); broker setDestinationPolicy(map); configurePersistence(broker, delete); broker start(); LOG info( Starting broker ); } protected void configurePersistence(BrokerService brokerService, boolean deleteAllOnStart) throws Exception { KahaDBPersistenceAdapter adapter = (KahaDBPersistenceAdapter) brokerService getPersistenceAdapter(); adapter setJournalMaxFileLength(1024 * 20); adapter setCheckpointInterval(500); adapter setCleanupInterval(500); if (!deleteAllOnStart) { adapter setForceRecoverIndex(true); } } private boolean deleteDir(File dir) { if (dir isDirectory()) { String[] children = dir list(); for (int i = 0; i < children length; i++) { boolean success = deleteDir(new File(dir, children[i])); if (!success) { return false; } } } return dir delete(); } private int getFileCount(File dir){ if (dir isDirectory()) { String[] children = dir list(); return children length; } return 0; } Test public void testCleanupOfFiles() throws Exception { final int messageCount = 500; startBroker(true); int fileCount = getFileCount(kahaDbDir); assertEquals(4, fileCount); Connection connection = new ActiveMQConnectionFactory( broker getTransportConnectors() get(0) getConnectUri()) createConnection(); connection start(); Session producerSess = connection createSession(false, Session AUTO ACKNOWLEDGE); Session consumerSess = connection createSession(false, Session AUTO ACKNOWLEDGE); ProducerThread producer = new ProducerThread(producerSess, destination) { Override protected Message createMessage(int i) throws Exception { return sess createTextMessage(payload + + i); } }; producer setSleep(650); producer setMessageCount(messageCount); ConsumerThread consumer = new ConsumerThread(consumerSess, destination); consumer setBreakOnNull(false); consumer setMessageCount(messageCount); producer start(); consumer start(); producer join(); consumer join(); assertEquals( consumer got all produced messages , producer getMessageCount(), consumer getReceived()); broker stop(); broker waitUntilStopped(); } }",1.0,
2369,2369,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3140Test.,AMQ3140Test,"public class AMQ3140Test { private static final int MESSAGES PER THREAD = 100; private static final int THREAD COUNT = 10; private BrokerService broker; private static final String QUEUE NAME = test ; private static class Sender extends Thread { private static final int DELAY = 3000; Override public void run() { try { ConnectionFactory cf = new ActiveMQConnectionFactory( vm Connection connection = cf createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(session createQueue(QUEUE NAME)); Message message = session createTextMessage( test ); for (int i = 0; i < MESSAGES PER THREAD; i++) { message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, DELAY); producer send(message); } session close(); connection close(); } catch (JMSException e) { fail(e getMessage()); } } } Before public void setup() throws Exception { File schedulerDirectory = new File( target/test/ScheduledDB ); IOHelper mkdirs(schedulerDirectory); IOHelper deleteChildren(schedulerDirectory); broker = new BrokerService(); broker setSchedulerSupport(true); broker setPersistent(false); broker setDeleteAllMessagesOnStartup(true); broker setDataDirectory( target ); broker setSchedulerDirectoryFile(schedulerDirectory); broker setUseJmx(false); broker addConnector( vm broker start(); broker waitUntilStarted(); } After public void tearDown() throws Exception { broker stop(); } Test public void noMessageLostOnConcurrentScheduling() throws JMSException, InterruptedException { final AtomicLong receiveCounter = new AtomicLong(); ConnectionFactory cf = new ActiveMQConnectionFactory( vm Connection connection = cf createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(session createQueue(QUEUE NAME)); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { receiveCounter incrementAndGet(); } }); List<Sender> senderThreads = new ArrayList<Sender>(); for (int i = 0; i < THREAD COUNT; i++) { Sender sender = new Sender(); senderThreads add(sender); } for (Sender sender senderThreads) { sender start(); } for (Sender sender senderThreads) { sender join(); } TimeUnit SECONDS sleep(10); session close(); connection close(); assertEquals(MESSAGES PER THREAD * THREAD COUNT, receiveCounter get()); } }",1.0,
2370,2370,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3140Test.,Sender,"private static class Sender extends Thread { private static final int DELAY = 3000; Override public void run() { try { ConnectionFactory cf = new ActiveMQConnectionFactory( vm Connection connection = cf createConnection(); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(session createQueue(QUEUE NAME)); Message message = session createTextMessage( test ); for (int i = 0; i < MESSAGES PER THREAD; i++) { message setLongProperty(ScheduledMessage AMQ SCHEDULED DELAY, DELAY); producer send(message); } session close(); connection close(); } catch (JMSException e) { fail(e getMessage()); } } } Before",1.0,
2379,2379,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3274Test.,MessageClient,"protected class MessageClient extends java lang Thread { protected MessageConsumer msgCons; protected boolean shutdownInd; protected int expectedCount; protected int lastSeq = 0; protected int msgCount = 0; protected boolean haveFirstSeq; protected CountDownLatch shutdownLatch; public MessageClient(MessageConsumer cons, int num to expect) { msgCons = cons; expectedCount = (num to expect * (echoResponseFill + 1)); shutdownLatch = new CountDownLatch(1); } public void run() { CountDownLatch latch; try { synchronized (this) { latch = shutdownLatch; } shutdownInd = false; processMessages(); latch countDown(); } catch (Exception exc) { LOG error( message client error , exc); } } public void waitShutdown(long timeout) { CountDownLatch latch; try { synchronized (this) { latch = shutdownLatch; } if (latch != null) latch await(timeout, TimeUnit MILLISECONDS); else LOG info( echo client shutdown client does not appear to be active ); } catch (InterruptedException int exc) { LOG warn( wait for message client shutdown interrupted , int exc); } } public boolean shutdown() { boolean down ind; if (!shutdownInd) { shutdownInd = true; } waitShutdown(200); synchronized (this) { if ((shutdownLatch == null) || (shutdownLatch getCount() == 0)) down ind = true; else down ind = false; } return down ind; } public int getNumMsgReceived() { return msgCount; } protected void processMessages() throws Exception { Message in msg; haveFirstSeq = false; while ((!shutdownInd) && (!testError)) { in msg = msgCons receive(100); if (in msg != null) { msgCount++; checkMessage(in msg); } } } protected void checkMessage(Message in msg) throws Exception { int seq; LOG debug( received message + fmtMsgInfo(in msg)); if (in msg propertyExists( SEQ )) { seq = in msg getIntProperty( SEQ ); if ((haveFirstSeq) && (seq != (lastSeq + 1))) { LOG error( ***ERROR*** incorrect sequence number; expected + Integer toString(lastSeq + 1) + but have + Integer toString(seq)); testError = true; } lastSeq = seq; if (msgCount > expectedCount) { LOG warn( *** have more messages than expected; have + msgCount + ; expect + expectedCount); testError = true; } } if (in msg propertyExists( end-of-response )) { LOG trace( received end-of-response message ); shutdownInd = true; } } }",1.0,
2380,2380,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3274Test.,EchoService,"protected class EchoService extends java lang Thread { protected String destName; protected Connection jmsConn; protected Session sess; protected MessageConsumer msg cons; protected boolean Shutdown ind; protected Destination req dest; protected Destination resp dest; protected MessageProducer msg prod; protected CountDownLatch waitShutdown; public EchoService(String dest, Connection broker conn) throws Exception { destName = dest; jmsConn = broker conn; Shutdown ind = false; sess = jmsConn createSession(false, Session AUTO ACKNOWLEDGE); req dest = sess createQueue(destName); msg cons = sess createConsumer(req dest); jmsConn start(); waitShutdown = new CountDownLatch(1); } public EchoService(String dest, String broker url) throws Exception { this(dest, ActiveMQConnection makeConnection(broker url)); } public void run() { Message req; try { LOG info( STARTING ECHO SERVICE ); while (!Shutdown ind) { req = msg cons receive(100); if (req != null) { if (LOG isDebugEnabled()) LOG debug( ECHO request message + req toString()); resp dest = req getJMSReplyTo(); if (resp dest != null) { msg prod = sess createProducer(resp dest); msg prod send(req); msg prod close(); msg prod = null; } else { LOG warn( invalid request no reply-to destination given ); } } } } catch (Exception ex) { LOG error(null, ex); } finally { LOG info( shutting down test echo service ); try { jmsConn stop(); } catch (javax jms JMSException jms exc) { LOG warn( error on shutting down JMS connection , jms exc); } synchronized (this) { waitShutdown countDown(); } } } public void shutdown() { CountDownLatch wait l; synchronized (this) { wait l = waitShutdown; } Shutdown ind = true; try { if (wait l != null) { if (wait l await(3000, TimeUnit MILLISECONDS)) { LOG info( echo service shutdown complete ); } else { LOG warn( timeout waiting for echo service shutdown ); } } else { LOG info( echo service shutdown service does not appear to be active ); } } catch (InterruptedException int exc) { LOG warn( interrupted while waiting for echo service shutdown ); } } }",1.0,
2382,2382,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3352Test.,AMQ3352Test,"public class AMQ3352Test { TransportConnector connector; BrokerService brokerService; Before public void startBroker() throws Exception { brokerService = new BrokerService(); brokerService setDeleteAllMessagesOnStartup(true); connector = brokerService addConnector( tcp brokerService start(); } After public void stopBroker() throws Exception { brokerService stop(); } Test public void verifyEnqueueLargeNumWithStateTracker() throws Exception { String url = failover ( + connector getPublishableConnectString() + ) jms useAsyncSend=true&trackMessages=true&maxCacheSize=131072 ; ActiveMQConnection conn = (ActiveMQConnection)new ActiveMQConnectionFactory(url) createConnection(null, null); Session session = conn createSession(false, Session CLIENT ACKNOWLEDGE); MessageProducer producer = session createProducer(session createQueue( EVENTQ )); producer setDeliveryMode(DeliveryMode PERSISTENT); producer setDisableMessageID(true); producer setDisableMessageTimestamp(true); StringBuffer buffer = new StringBuffer(); for (int i=0;i<1024;i++) { buffer append(String valueOf(Math random())); } String payload = buffer toString(); for (int i=0; i<10000; i++) { StringBuffer buff = new StringBuffer( x ); buff append(payload); producer send(session createTextMessage(buff toString())); } } }",1.0,
2384,2384,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3405Test.,RollbackMessageListener,"class RollbackMessageListener implements MessageListener { final int maxRollbacks; final int deliveryCount; final AtomicInteger rollbacks = new AtomicInteger(); RollbackMessageListener(int c, int delvery) { maxRollbacks = c; deliveryCount = delvery; } Override public void onMessage(Message message) { try { int expectedMessageId = rollbacks get() / deliveryCount; LOG info( expecting messageId + expectedMessageId); rollbacks incrementAndGet(); session rollback(); } catch (Throwable e) { LOG error( unexpected exception + e, e); if (e instanceof Error) { error[0] = (Error) e; } else { fail( unexpected exception + e); } } } }",1.0,
2390,2390,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3537Test.,AMQ3537Test,"public class AMQ3537Test implements InvocationHandler, Serializable { private static final long serialVersionUID = 1L; public static final Class[] TEST CLASSES = new Class[] { List class, NonJDKList class, Serializable class }; private final List l = new ArrayList<String>(); Before public void setUp() throws Exception { l add( foo ); } Test public void testDeserializeProxy() throws Exception { List proxy = (List) java lang reflect Proxy newProxyInstance(this getClass() getClassLoader(), TEST CLASSES, this); ByteArrayOutputStream baos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(baos); oos writeObject(proxy); byte[] serializedProxy = baos toByteArray(); oos close(); baos close(); ClassLoadingAwareObjectInputStream claois = new ClassLoadingAwareObjectInputStream(new ByteArrayInputStream(serializedProxy)); List deserializedProxy = (List) claois readObject(); claois close(); assertEquals( foo , deserializedProxy get(0)); } Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { return method invoke(l, args); } public interface NonJDKList { int size(); } }",1.0,
2393,2393,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3625Test.,AMQ3625Test,"public class AMQ3625Test { protected BrokerService broker1; protected BrokerService broker2; protected AtomicBoolean authenticationFailed = new AtomicBoolean(false); protected AtomicBoolean gotNPE = new AtomicBoolean(false); protected String java security auth login config = java security auth login config ; protected String xbean = xbean ; protected String base = src/test/resources/org/apache/activemq/bugs/amq3625 ; protected String conf = conf ; protected String keys = keys ; protected String sep = File separator; protected String JaasStompSSLBroker1 xml = JaasStompSSLBroker1 xml ; protected String JaasStompSSLBroker2 xml = JaasStompSSLBroker2 xml ; protected String oldLoginConf = null; Before public void before() throws Exception { if (System getProperty(java security auth login config) != null) { oldLoginConf = System getProperty(java security auth login config); } System setProperty(java security auth login config, base + sep + conf + sep + login config ); broker1 = BrokerFactory createBroker(xbean + base + sep + conf + sep + JaasStompSSLBroker1 xml); broker2 = BrokerFactory createBroker(xbean + base + sep + conf + sep + JaasStompSSLBroker2 xml); broker1 start(); broker1 waitUntilStarted(); broker2 start(); broker2 waitUntilStarted(); } After public void after() throws Exception { broker1 stop(); broker2 stop(); if (oldLoginConf != null) { System setProperty(java security auth login config, oldLoginConf); } } Test public void go() throws Exception { Appender appender = new DefaultTestAppender() { Override public void doAppend(LoggingEvent event) { if (event getThrowableInformation() != null) { Throwable t = event getThrowableInformation() getThrowable(); if (t instanceof SecurityException) { authenticationFailed set(true); } if (t instanceof NullPointerException) { gotNPE set(true); } } } }; Logger getRootLogger() addAppender(appender); String connectURI = broker1 getConnectorByName( openwire ) getConnectUri() toString(); connectURI = connectURI replace( needClientAuth=true , ); broker2 addNetworkConnector( static ( + connectURI + ) ) start(); Thread sleep(10 * 1000); Logger getRootLogger() removeAppender(appender); assertTrue(authenticationFailed get()); assertFalse(gotNPE get()); } }",1.0,
2395,2395,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3675Test.,AMQ3675Test,"public class AMQ3675Test { private static Logger LOG = LoggerFactory getLogger(AMQ3675Test class); private final static int deliveryMode = DeliveryMode NON PERSISTENT; private final static ActiveMQTopic destination = new ActiveMQTopic( XYZ ); private ActiveMQConnectionFactory factory; private BrokerService broker; public TopicViewMBean getTopicView() throws Exception { ObjectName destinationName = broker getAdminView() getTopics()[0]; TopicViewMBean topicView = (TopicViewMBean) broker getManagementContext() newProxyInstance(destinationName, TopicViewMBean class, true); return topicView; } Test public void countConsumers() throws Exception { final Connection producerConnection = factory createConnection(); producerConnection start(); final Connection consumerConnection = factory createConnection(); consumerConnection setClientID( subscriber1 ); Session consumerMQSession = consumerConnection createSession(false, Session CLIENT ACKNOWLEDGE); TopicSubscriber consumer = consumerMQSession createDurableSubscriber(destination, myTopic ); consumerConnection start(); Session session = producerConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); producer setDeliveryMode(deliveryMode); final BrokerView brokerView = broker getAdminView(); final TopicViewMBean topicView = getTopicView(); assertTrue( Should have one consumer on topic , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return topicView getConsumerCount() == 1; } })); consumer close(); assertTrue( Durable consumer should now be inactive , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return brokerView getInactiveDurableTopicSubscribers() length == 1; } })); try { brokerView removeTopic(destination getTopicName()); } catch (Exception e1) { fail( Unable to remove destination + destination getPhysicalName()); } assertTrue( Should have no topics on the broker , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return brokerView getTopics() length == 0; } })); try { brokerView destroyDurableSubscriber( subscriber1 , myTopic ); } catch(Exception e) { fail( Exception not expected when attempting to delete Durable consumer ); } assertTrue( Should be no durable consumers active or inactive , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return brokerView getInactiveDurableTopicSubscribers() length == 0 && brokerView getDurableTopicSubscribers() length == 0; } })); consumer = consumerMQSession createDurableSubscriber(destination, myTopic ); consumer close(); assertTrue( Should be one consumer on the Topic , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { LOG info( Number of inactive consumers + brokerView getInactiveDurableTopicSubscribers() length); return brokerView getInactiveDurableTopicSubscribers() length == 1; } })); final TopicViewMBean recreatedTopicView = getTopicView(); assertTrue( Should have one consumer on topic , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return recreatedTopicView getConsumerCount() == 1; } })); } Before public void setUp() throws Exception { broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(true); broker setAdvisorySupport(false); broker setDeleteAllMessagesOnStartup(true); TransportConnector connector = broker addConnector( tcp broker start(); factory = new ActiveMQConnectionFactory(connector getPublishableConnectString()); factory setAlwaysSyncSend(true); factory setDispatchAsync(false); } After public void tearDown() throws Exception { broker stop(); } }",1.0,
2397,2397,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3732Test.,AMQ3732Test,"public class AMQ3732Test { private static Logger LOG = LoggerFactory getLogger(AMQ3732Test class); private ActiveMQConnectionFactory connectionFactory; private Connection connection; private Session session; private BrokerService broker; private String connectionUri; private final Random pause = new Random(); private final long NUM MESSAGES = 25000; private final AtomicLong totalConsumed = new AtomicLong(); Before public void startBroker() throws Exception { broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(true); broker setPersistent(false); broker setUseJmx(false); broker addConnector( tcp broker start(); broker waitUntilStarted(); connectionUri = broker getTransportConnectors() get(0) getPublishableConnectString(); connectionFactory = new ActiveMQConnectionFactory(connectionUri); connectionFactory getPrefetchPolicy() setAll(0); } After public void stopBroker() throws Exception { connection close(); broker stop(); broker waitUntilStopped(); } Test(timeout = 1200000) public void testInterruptionAffects() throws Exception { connection = connectionFactory createConnection(); connection start(); session = connection createSession(false, ActiveMQSession INDIVIDUAL ACKNOWLEDGE); Queue queue = session createQueue( AMQ3732Test ); final LinkedBlockingQueue<Message> workQueue = new LinkedBlockingQueue<Message>(); final MessageConsumer consumer1 = session createConsumer(queue); final MessageConsumer consumer2 = session createConsumer(queue); final MessageProducer producer = session createProducer(queue); Thread consumer1Thread = new Thread(new Runnable() { Override public void run() { try { while (totalConsumed get() < NUM MESSAGES) { Message message = consumer1 receiveNoWait(); if (message != null) { workQueue add(message); } } } catch(Exception e) { LOG error( Caught an unexpected error , e); } } }); consumer1Thread start(); Thread consumer2Thread = new Thread(new Runnable() { Override public void run() { try { while (totalConsumed get() < NUM MESSAGES) { Message message = consumer2 receive(50); if (message != null) { workQueue add(message); } } } catch(Exception e) { LOG error( Caught an unexpected error , e); } } }); consumer2Thread start(); Thread producerThread = new Thread(new Runnable() { Override public void run() { try { for (int i = 0; i < NUM MESSAGES; ++i) { producer send(session createTextMessage( TEST )); TimeUnit MILLISECONDS sleep(pause nextInt(10)); } } catch(Exception e) { LOG error( Caught an unexpected error , e); } } }); producerThread start(); Thread ackingThread = new Thread(new Runnable() { Override public void run() { try { while (totalConsumed get() < NUM MESSAGES) { Message message = workQueue take(); message acknowledge(); totalConsumed incrementAndGet(); if ((totalConsumed get() % 100) == 0) { LOG info( Consumed + totalConsumed get() + messages so far ); } } } catch(Exception e) { LOG error( Caught an unexpected error , e); } } }); ackingThread start(); producerThread join(); consumer1Thread join(); consumer2Thread join(); ackingThread join(); assertEquals(NUM MESSAGES, totalConsumed get()); } }",1.0,
2398,2398,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3841Test.,AMQ3841Test,"public class AMQ3841Test { static final Logger LOG = LoggerFactory getLogger(AMQ3841Test class); private final static int maxFileLength = 1024*1024*32; private final static String destinationName = TEST QUEUE ; BrokerService broker; Before public void setUp() throws Exception { prepareBrokerWithMultiStore(true); broker start(); broker waitUntilStarted(); } After public void tearDown() throws Exception { broker stop(); } protected BrokerService createBroker(PersistenceAdapter kaha) throws Exception { BrokerService broker = new BrokerService(); broker setUseJmx(true); broker setBrokerName( localhost ); broker setPersistenceAdapter(kaha); return broker; } Test public void testRestartAfterQueueDelete() throws Exception { assertTrue( Broker doesn t have an Admin View , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return (broker getAdminView()) != null; } })); broker getAdminView() addQueue(destinationName); assertNotNull(broker getDestination(new ActiveMQQueue(destinationName))); broker getAdminView() removeQueue(destinationName); broker stop(); broker waitUntilStopped(); prepareBrokerWithMultiStore(false); broker start(); broker getAdminView() addQueue(destinationName); assertNotNull(broker getDestination(new ActiveMQQueue(destinationName))); } protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException { KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter(); kaha setJournalMaxFileLength(maxFileLength); kaha setCleanupInterval(5000); if (delete) { kaha deleteAllMessages(); } return kaha; } public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception { MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter(); if (deleteAllMessages) { multiKahaDBPersistenceAdapter deleteAllMessages(); } ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>(); FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter(); template setPersistenceAdapter(createStore(deleteAllMessages)); template setPerDestination(true); adapters add(template); multiKahaDBPersistenceAdapter setFilteredPersistenceAdapters(adapters); broker = createBroker(multiKahaDBPersistenceAdapter); } }",1.0,
2401,2401,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3932Test.,AMQ3932Test,"public class AMQ3932Test { private Connection connection; private BrokerService broker; Before public void setUp() throws Exception { broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(false); TransportConnector tcpConnector = broker addConnector( tcp broker start(); ConnectionFactory factory = new ActiveMQConnectionFactory( failover ( + tcpConnector getPublishableConnectString() + ) jms prefetchPolicy queuePrefetch=0 ); connection = factory createConnection(); connection start(); } After public void tearDown() throws Exception { connection close(); if (broker != null) { broker stop(); broker waitUntilStopped(); broker = null; } } Test public void testPlainReceiveBlocks() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); final MessageConsumer consumer = session createConsumer(session createQueue(getClass() getName())); broker stop(); broker waitUntilStopped(); broker = null; final CountDownLatch done = new CountDownLatch(1); final CountDownLatch started = new CountDownLatch(1); ExecutorService executor = Executors newSingleThreadExecutor(); executor execute(new Runnable() { public void run() { try { started countDown(); Log info( Entering into a Sync receive call ); consumer receive(); } catch (JMSException e) { } done countDown(); } }); assertTrue(started await(10, TimeUnit SECONDS)); assertFalse(done await(20, TimeUnit SECONDS)); } Test public void testHungReceiveNoWait() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); final MessageConsumer consumer = session createConsumer(session createQueue(getClass() getName())); broker stop(); broker waitUntilStopped(); broker = null; final CountDownLatch done = new CountDownLatch(1); final CountDownLatch started = new CountDownLatch(1); ExecutorService executor = Executors newSingleThreadExecutor(); executor execute(new Runnable() { public void run() { try { started countDown(); Log info( Entering into a Sync receiveNoWait call ); consumer receiveNoWait(); } catch (JMSException e) { } done countDown(); } }); assertTrue(started await(10, TimeUnit SECONDS)); assertTrue(done await(20, TimeUnit SECONDS)); } Test public void testHungReceiveTimed() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); final MessageConsumer consumer = session createConsumer(session createQueue(getClass() getName())); broker stop(); broker waitUntilStopped(); broker = null; final CountDownLatch done = new CountDownLatch(1); final CountDownLatch started = new CountDownLatch(1); ExecutorService executor = Executors newSingleThreadExecutor(); executor execute(new Runnable() { public void run() { try { started countDown(); Log info( Entering into a timed Sync receive call ); consumer receive(10); } catch (JMSException e) { } done countDown(); } }); assertTrue(started await(10, TimeUnit SECONDS)); assertTrue(done await(20, TimeUnit SECONDS)); } }",1.0,
2404,2404,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3961Test.,TestServerSessionPool,"public class TestServerSessionPool implements ServerSessionPool { private final TopicConnection connection; public TestServerSessionPool(final TopicConnection connection) { this connection = connection; } Override public ServerSession getServerSession() throws JMSException { final TopicSession topicSession = connection createTopicSession(true, Session AUTO ACKNOWLEDGE); return new TestServerSession(topicSession); } }",1.0,
2405,2405,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3961Test.,TestServerSession,"public class TestServerSession implements ServerSession, MessageListener { private final TopicSession session; public TestServerSession(final TopicSession session) throws JMSException { this session = session; session setMessageListener(this); } Override public Session getSession() throws JMSException { return session; } Override public void start() throws JMSException { session run(); } Override public void onMessage(final Message message) { synchronized (processedSessions) { processedSessions add(this); } } }",1.0,
2408,2408,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ4062Test.,PrefetchConsumer,"public class PrefetchConsumer implements MessageListener{ public static final String SUBSCRIPTION NAME = A NAME ABC DEF ; private final String user = ActiveMQConnection DEFAULT USER; private final String password = ActiveMQConnection DEFAULT PASSWORD; private final String uri; private boolean transacted; ActiveMQConnection connection; Session session; MessageConsumer consumer; private boolean needAck=false; CountDownLatch a=new CountDownLatch(1); public PrefetchConsumer(boolean needAck, String uri){ this needAck=needAck; this uri = uri; } public void recieve() throws Exception{ ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, uri); connection = (ActiveMQConnection)connectionFactory createConnection(); connection setClientID( 3 ); connection start(); session = connection createSession(transacted, Session CLIENT ACKNOWLEDGE); Destination destination = session createTopic( topic2 ); consumer = session createDurableSubscriber((Topic)destination,SUBSCRIPTION NAME); consumer setMessageListener(this); } Override public void onMessage(Message message) { try { a await(); } catch (InterruptedException e1) { } if(needAck){ try { message acknowledge(); consumer close(); session close(); connection close(); } catch (JMSException e) { } } } }",1.0,
2409,2409,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ4062Test.,Producer,"public class Producer { protected final String user = ActiveMQConnection DEFAULT USER; private final String password = ActiveMQConnection DEFAULT PASSWORD; private final String uri; private boolean transacted; public Producer(String uri) { this uri = uri; } public void send() throws Exception{ ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, uri); ActiveMQConnection connection = (ActiveMQConnection)connectionFactory createConnection(); connection start(); ActiveMQSession session = (ActiveMQSession)connection createSession(transacted, Session AUTO ACKNOWLEDGE); Destination destination = session createTopic( topic2 ); MessageProducer producer = session createProducer(destination); producer setDeliveryMode(DeliveryMode PERSISTENT); for(int i=0;i<100;i++){ TextMessage om=session createTextMessage( hello from producer ); producer send(om); } producer close(); session close(); connection close(); } }",1.0,
2413,2413,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ4133Test.,AMQ4133Test,"public class AMQ4133Test { protected String java security auth login config = java security auth login config ; protected String xbean = xbean ; protected String confBase = src/test/resources/org/apache/activemq/bugs/amq4126 ; protected String certBase = src/test/resources/org/apache/activemq/security ; protected String sep = File separator; protected String activemqXml = InconsistentConnectorPropertiesBehaviour xml ; protected BrokerService broker; protected String oldLoginConf = null; Before public void before() throws Exception { if (System getProperty(java security auth login config) != null) { oldLoginConf = System getProperty(java security auth login config); } System setProperty(java security auth login config, confBase + sep + login config ); broker = BrokerFactory createBroker(xbean + confBase + sep + activemqXml); broker start(); broker waitUntilStarted(); } After public void after() throws Exception { if (broker != null) { broker stop(); broker waitUntilStopped(); } } Test public void stompSSLTransportNeedClientAuthTrue() throws Exception { stompConnectTo( localhost , broker getConnectorByName( stomp+ssl ) getConnectUri() getPort()); } Test public void stompSSLNeedClientAuthTrue() throws Exception { stompConnectTo( localhost , broker getConnectorByName( stomp+ssl+special ) getConnectUri() getPort()); } Test public void stompNIOSSLTransportNeedClientAuthTrue() throws Exception { stompConnectTo( localhost , broker getConnectorByName( stomp+nio+ssl ) getConnectUri() getPort()); } Test public void stompNIOSSLNeedClientAuthTrue() throws Exception { stompConnectTo( localhost , broker getConnectorByName( stomp+nio+ssl+special ) getConnectUri() getPort()); } public Socket createSocket(String host, int port) throws Exception { System setProperty( javax net ssl trustStore , certBase + sep + broker1 ks ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , certBase + sep + client ks ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); SocketFactory factory = SSLSocketFactory getDefault(); return factory createSocket(host, port); } public void stompConnectTo(String host, int port) throws Exception { StompConnection stompConnection = new StompConnection(); stompConnection open(createSocket(host, port)); stompConnection sendFrame( CONNECT n + n + Stomp NULL); StompFrame f = stompConnection receive(); TestCase assertEquals(f getBody(), CONNECTED , f getAction()); stompConnection close(); } }",1.0,
2417,2417,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ4160Test.,AMQ4160Test,"public class AMQ4160Test extends JmsMultipleBrokersTestSupport { final long MAX TEST TIME = TimeUnit MINUTES toMillis(2); public void setUp() throws Exception { setAutoFail(true); setMaxTestTime(MAX TEST TIME); super setUp(); } public void testLostActiveBridge() throws Exception { final long ATTEMPT TO CREATE DELAY = TimeUnit SECONDS toMillis(15); BrokerService broker1 = createBroker(new URI( broker (vm final BrokerService broker2 = createBroker(new URI( broker (vm BrokerPlugin ignoreAddConnectionPlugin = new BrokerPlugin() { Override public Broker installPlugin(Broker broker) throws Exception { return new BrokerFilter(broker) { Override public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception { } }; } }; broker1 setPlugins(new BrokerPlugin[] { ignoreAddConnectionPlugin }); startAllBrokers(); final CountDownLatch attemptLatch = new CountDownLatch(2); final CountDownLatch createLatch = new CountDownLatch(2); DiscoveryNetworkConnector nc = new DiscoveryNetworkConnector() { Override public void onServiceAdd(DiscoveryEvent event) { attemptLatch countDown(); super onServiceAdd(event); } Override protected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) { try { attemptLatch await(); createLatch countDown(); createLatch await(ATTEMPT TO CREATE DELAY, TimeUnit MILLISECONDS); return super createBridge(localTransport, remoteTransport, event); } catch (InterruptedException e) { Thread interrupted(); return null; } } }; nc setDiscoveryAgent(new DiscoveryAgent() { TaskRunnerFactory taskRunner = new TaskRunnerFactory(); DiscoveryListener listener; Override public void start() throws Exception { taskRunner init(); taskRunner execute(new Runnable() { Override public void run() { listener onServiceAdd(new DiscoveryEvent(broker2 getVmConnectorURI() toString())); } }); taskRunner execute(new Runnable() { Override public void run() { listener onServiceAdd(new DiscoveryEvent(broker2 getVmConnectorURI() toString())); } }); } Override public void stop() throws Exception { taskRunner shutdown(); } Override public void setDiscoveryListener(DiscoveryListener listener) { this listener = listener; } Override public void registerService(String name) throws IOException { } Override public void serviceFailed(DiscoveryEvent event) throws IOException { listener onServiceRemove(event); } }); broker1 addNetworkConnector(nc); nc start(); waitForBridge(broker1 getBrokerName(), broker2 getBrokerName(), MAX TEST TIME, TimeUnit MILLISECONDS); Assert assertFalse(nc activeBridges() isEmpty()); } public void testInactiveBridgStillActive() throws Exception { BrokerService broker1 = createBroker(new URI( broker (vm final BrokerService broker2 = createBroker(new URI( broker (vm BrokerPlugin disallowAddConnectionPlugin = new BrokerPlugin() { Override public Broker installPlugin(Broker broker) throws Exception { return new BrokerFilter(broker) { Override public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception { throw new Exception( Test exception to force bridge failure ); } }; } }; broker1 setPlugins(new BrokerPlugin[] { disallowAddConnectionPlugin }); startAllBrokers(); final SimpleDiscoveryAgent da = new SimpleDiscoveryAgent(); da setServices(new URI[] { broker2 getVmConnectorURI() }); final CountDownLatch attemptLatch = new CountDownLatch(3); final CountDownLatch removedLatch = new CountDownLatch(1); DiscoveryNetworkConnector nc = new DiscoveryNetworkConnector() { Override public void onServiceAdd(DiscoveryEvent event) { attemptLatch countDown(); super onServiceAdd(event); } Override public void onServiceRemove(DiscoveryEvent event) { super onServiceRemove(event); removedLatch countDown(); } Override protected NetworkBridge createBridge(Transport localTransport, Transport remoteTransport, final DiscoveryEvent event) { final NetworkBridge next = super createBridge(localTransport, remoteTransport, event); return new NetworkBridge() { Override public void start() throws Exception { next start(); removedLatch await(); } Override public void stop() throws Exception { next stop(); } Override public void serviceRemoteException(Throwable error) { next serviceRemoteException(error); } Override public void serviceLocalException(Throwable error) { next serviceLocalException(error); } Override public void setNetworkBridgeListener( NetworkBridgeListener listener) { next setNetworkBridgeListener(listener); } Override public String getRemoteAddress() { return next getRemoteAddress(); } Override public String getRemoteBrokerName() { return next getRemoteBrokerName(); } Override public String getLocalAddress() { return next getLocalAddress(); } Override public String getLocalBrokerName() { return next getLocalBrokerName(); } Override public long getEnqueueCounter() { return next getEnqueueCounter(); } Override public long getDequeueCounter() { return next getDequeueCounter(); } Override public void setMbeanObjectName(ObjectName objectName) { next setMbeanObjectName(objectName); } Override public ObjectName getMbeanObjectName() { return next getMbeanObjectName(); } }; } }; nc setDiscoveryAgent(da); broker1 addNetworkConnector(nc); nc start(); Assert assertTrue(attemptLatch await(30, TimeUnit SECONDS)); } public void testAllowAttemptsAfterRestart() throws Exception { final long STOP DELAY = TimeUnit SECONDS toMillis(10); BrokerService broker1 = createBroker(new URI( broker (vm final BrokerService broker2 = createBroker(new URI( broker (vm startAllBrokers(); NetworkConnector nc = bridgeBrokers(broker1 getBrokerName(), broker2 getBrokerName()); nc start(); waitForBridge(broker1 getBrokerName(), broker2 getBrokerName(), MAX TEST TIME, TimeUnit MILLISECONDS); nc stop(); Thread sleep(STOP DELAY); nc start(); waitForBridge(broker1 getBrokerName(), broker2 getBrokerName(), MAX TEST TIME, TimeUnit MILLISECONDS); } }",1.0,
2419,2419,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ4220Test.,AMQ4220Test,"public class AMQ4220Test { static final Logger LOG = LoggerFactory getLogger(AMQ4220Test class); private final static int maxFileLength = 1024*1024*32; private final static String destinationName = TEST QUEUE ; BrokerService broker; Before public void setUp() throws Exception { prepareBrokerWithMultiStore(true); broker start(); broker waitUntilStarted(); } After public void tearDown() throws Exception { broker stop(); } protected BrokerService createBroker(PersistenceAdapter kaha) throws Exception { BrokerService broker = new BrokerService(); broker setUseJmx(true); broker setBrokerName( localhost ); broker setPersistenceAdapter(kaha); return broker; } Test public void testRestartAfterQueueDelete() throws Exception { assertTrue( Broker doesn t have an Admin View , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return (broker getAdminView()) != null; } })); LOG info( Adding initial destination {} , destinationName); broker getAdminView() addQueue(destinationName); assertNotNull(broker getDestination(new ActiveMQQueue(destinationName))); LOG info( Removing initial destination {} , destinationName); broker getAdminView() removeQueue(destinationName); LOG info( Adding back destination {} , destinationName); broker getAdminView() addQueue(destinationName); assertNotNull(broker getDestination(new ActiveMQQueue(destinationName))); } protected KahaDBPersistenceAdapter createStore(boolean delete) throws IOException { KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter(); kaha setJournalMaxFileLength(maxFileLength); kaha setCleanupInterval(5000); if (delete) { kaha deleteAllMessages(); } return kaha; } public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception { MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter(); if (deleteAllMessages) { multiKahaDBPersistenceAdapter deleteAllMessages(); } ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>(); FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter(); template setPersistenceAdapter(createStore(deleteAllMessages)); template setPerDestination(true); adapters add(template); multiKahaDBPersistenceAdapter setFilteredPersistenceAdapters(adapters); broker = createBroker(multiKahaDBPersistenceAdapter); } }",1.0,
2427,2427,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\DurableConsumerTest.,SimpleTopicSubscriber,"private class SimpleTopicSubscriber implements MessageListener,ExceptionListener{ private TopicConnection topicConnection = null; public SimpleTopicSubscriber(String connectionURL,String clientId,String topicName) { ActiveMQConnectionFactory topicConnectionFactory = null; TopicSession topicSession = null; Topic topic = null; TopicSubscriber topicSubscriber = null; topicConnectionFactory = new ActiveMQConnectionFactory(connectionURL); try { topic = new ActiveMQTopic(topicName); topicConnection = topicConnectionFactory createTopicConnection(); topicConnection setClientID((clientId)); topicConnection start(); topicSession = topicConnection createTopicSession(false, Session AUTO ACKNOWLEDGE); topicSubscriber = topicSession createDurableSubscriber(topic, (clientId)); topicSubscriber setMessageListener(this); } catch (JMSException e) { e printStackTrace(); } } public void onMessage(Message arg0){ } public void closeConnection(){ if (topicConnection != null) { try { topicConnection close(); } catch (JMSException e) { } } } public void onException(JMSException exception){ exceptions add(exception); } }",1.0,
2428,2428,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\DurableConsumerTest.,MessagePublisher,"private class MessagePublisher implements Runnable{ private final boolean shouldPublish = true; public void run(){ TopicConnectionFactory topicConnectionFactory = null; TopicConnection topicConnection = null; TopicSession topicSession = null; Topic topic = null; TopicPublisher topicPublisher = null; Message message = null; topicConnectionFactory = new ActiveMQConnectionFactory(CONNECTION URL); try { topic = new ActiveMQTopic(TOPIC NAME); topicConnection = topicConnectionFactory createTopicConnection(); topicSession = topicConnection createTopicSession(false, Session AUTO ACKNOWLEDGE); topicPublisher = topicSession createPublisher(topic); message = topicSession createMessage(); } catch (Exception ex) { exceptions add(ex); } while (shouldPublish) { try { topicPublisher publish(message, DeliveryMode PERSISTENT, 1, 2 * 60 * 60 * 1000); } catch (JMSException ex) { exceptions add(ex); } try { Thread sleep(1); } catch (Exception ex) { } } } }",1.0,
2429,2429,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\JMSDurableTopicNoLocalTest.,JMSDurableTopicNoLocalTest,"public class JMSDurableTopicNoLocalTest extends EmbeddedBrokerTestSupport { protected String bindAddress; public void testConsumeNoLocal() throws Exception { final String TEST NAME = getClass() getName(); Connection connection = createConnection(); connection setClientID(TEST NAME); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); TopicSubscriber subscriber = session createDurableSubscriber((Topic) destination, topicUser2 , null, true); final CountDownLatch latch = new CountDownLatch(1); subscriber setMessageListener(new MessageListener() { public void onMessage(Message message) { System out println( Receive a message + message); latch countDown(); } }); connection start(); MessageProducer producer = session createProducer(destination); TextMessage message = session createTextMessage( THIS IS A TEST ); producer send(message); producer close(); latch await(5,TimeUnit SECONDS); assertEquals(latch getCount(),1); } Override protected void setUp() throws Exception { bindAddress = vm useTopic=true; super setUp(); } Override protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setUseJmx(false); answer setPersistent(true); answer setDeleteAllMessagesOnStartup(true); answer addConnector(bindAddress); return answer; } }",1.0,
2433,2433,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\MemoryUsageCleanupTest.,MemoryUsageCleanupTest,"public class MemoryUsageCleanupTest { private static final Logger LOG = LoggerFactory getLogger(MemoryUsageCleanupTest class); private static final String QUEUE NAME = MemoryUsageCleanupTest class getName() + Queue ; private final String str = new String( QAa0bcLdUK2eHfJgTP8XhiFj61DOklNm9nBoI5pGqYVrs3CtSuMZvwWx4yE7zR ); private BrokerService broker; private String connectionUri; private ExecutorService pool; private String queueName; private Random r = new Random(); Before public void setUp() throws Exception { broker = new BrokerService(); broker setDataDirectory( target + File separator + activemq-data ); broker setPersistent(true); broker setUseJmx(true); broker setDedicatedTaskRunner(false); broker setAdvisorySupport(false); broker setDeleteAllMessagesOnStartup(true); SharedDeadLetterStrategy strategy = new SharedDeadLetterStrategy(); strategy setProcessExpired(false); strategy setProcessNonPersistent(false); PolicyEntry defaultPolicy = new PolicyEntry(); defaultPolicy setQueue( > ); defaultPolicy setOptimizedDispatch(true); defaultPolicy setDeadLetterStrategy(strategy); defaultPolicy setMemoryLimit(300000000); PolicyMap policyMap = new PolicyMap(); policyMap setDefaultEntry(defaultPolicy); broker setDestinationPolicy(policyMap); broker getSystemUsage() getMemoryUsage() setLimit(300000000L); broker addConnector( tcp broker start(); broker waitUntilStarted(); connectionUri = broker getTransportConnectors() get(0) getPublishableConnectString(); pool = Executors newFixedThreadPool(10); } After public void tearDown() throws Exception { if (broker != null) { broker stop(); broker waitUntilStopped(); } if (pool != null) { pool shutdown(); } } Test public void testIt() throws Exception { final int startPercentage = broker getAdminView() getMemoryPercentUsage(); LOG info( MemoryUseage at test start = + startPercentage); for (int i = 0; i < 2; i++) { LOG info( Started the test iteration + i + using queueName = + queueName); queueName = QUEUE NAME + i; final CountDownLatch latch = new CountDownLatch(11); pool execute(new Runnable() { Override public void run() { receiveAndDiscard100messages(latch); } }); for (int j = 0; j < 10; j++) { pool execute(new Runnable() { Override public void run() { send10000messages(latch); } }); } LOG info( Waiting on the send / receive latch ); latch await(5, TimeUnit MINUTES); LOG info( Resumed ); destroyQueue(); TimeUnit SECONDS sleep(2); } LOG info( MemoryUseage before awaiting temp store cleanup = + broker getAdminView() getMemoryPercentUsage()); assertTrue( MemoryUsage should return to + startPercentage + % but was + broker getAdminView() getMemoryPercentUsage() + % , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return broker getAdminView() getMemoryPercentUsage() == startPercentage; } })); int endPercentage = broker getAdminView() getMemoryPercentUsage(); LOG info( MemoryUseage at test end = + endPercentage); } public void destroyQueue() { try { Broker broker = this broker getBroker(); if (!broker isStopped()) { LOG info( Removing + queueName); broker removeDestination(this broker getAdminConnectionContext(), new ActiveMQQueue(queueName), 10); } } catch (Exception e) { LOG warn( Got an error while removing the test queue , e); } } private void send10000messages(CountDownLatch latch) { ActiveMQConnection activeMQConnection = null; try { activeMQConnection = createConnection(null); Session session = activeMQConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(session createQueue(queueName)); producer setDeliveryMode(DeliveryMode NON PERSISTENT); activeMQConnection start(); for (int i = 0; i < 10000; i++) { TextMessage textMessage = session createTextMessage(); textMessage setText(generateBody(1000)); textMessage setJMSDeliveryMode(DeliveryMode NON PERSISTENT); producer send(textMessage); try { Thread sleep(10); } catch (InterruptedException e) { } } producer close(); } catch (JMSException e) { LOG warn( Got an error while sending the messages , e); } finally { if (activeMQConnection != null) { try { activeMQConnection close(); } catch (JMSException e) { } } } latch countDown(); } private void receiveAndDiscard100messages(CountDownLatch latch) { ActiveMQConnection activeMQConnection = null; try { activeMQConnection = createConnection(null); Session session = activeMQConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer messageConsumer = session createConsumer( session createQueue(queueName)); activeMQConnection start(); for (int i = 0; i < 100; i++) { messageConsumer receive(); } messageConsumer close(); LOG info( Created and disconnected ); } catch (JMSException e) { LOG warn( Got an error while receiving the messages , e); } finally { if (activeMQConnection != null) { try { activeMQConnection close(); } catch (JMSException e) { } } } latch countDown(); } private ActiveMQConnection createConnection(String id) throws JMSException { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri); if (id != null) { factory setClientID(id); } ActiveMQConnection connection = (ActiveMQConnection) factory createConnection(); return connection; } private String generateBody(int length) { StringBuilder sb = new StringBuilder(); int te = 0; for (int i = 1; i <= length; i++) { te = r nextInt(62); sb append(str charAt(te)); } return sb toString(); } }",1.0,
2435,2435,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\MessageSender.,MessageSender,"public class MessageSender { private MessageProducer producer; private Session session; public MessageSender(String queueName, Connection connection, boolean useTransactedSession, boolean topic) throws Exception { session = useTransactedSession connection createSession(true, Session SESSION TRANSACTED) connection createSession(false, Session AUTO ACKNOWLEDGE); producer = session createProducer(topic session createTopic(queueName) session createQueue(queueName)); } public void send(String payload) throws Exception { ObjectMessage message = session createObjectMessage(); message setObject(payload); producer send(message); if (session getTransacted()) { session commit(); } } public MessageProducer getProducer() { return producer; } }",1.0,
2436,2436,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\MissingDataFileTest.,MissingDataFileTest,"public class MissingDataFileTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(MissingDataFileTest class); private static int counter = 500; private static int hectorToHaloCtr; private static int xenaToHaloCtr; private static int troyToHaloCtr; private static int haloToHectorCtr; private static int haloToXenaCtr; private static int haloToTroyCtr; private final String hectorToHalo = hectorToHalo ; private final String xenaToHalo = xenaToHalo ; private final String troyToHalo = troyToHalo ; private final String haloToHector = haloToHector ; private final String haloToXena = haloToXena ; private final String haloToTroy = haloToTroy ; private BrokerService broker; private Connection hectorConnection; private Connection xenaConnection; private Connection troyConnection; private Connection haloConnection; private final Object lock = new Object(); final boolean useTopic = false; final boolean useSleep = true; protected static final String payload = new String(new byte[500]); public Connection createConnection() throws JMSException { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( tcp return factory createConnection(); } public Session createSession(Connection connection, boolean transacted) throws JMSException { return connection createSession(transacted, Session AUTO ACKNOWLEDGE); } public void startBroker() throws Exception { broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(true); broker setPersistent(true); broker setUseJmx(true); broker addConnector( tcp SystemUsage systemUsage; systemUsage = new SystemUsage(); systemUsage getMemoryUsage() setLimit(10 * 1024 * 1024); broker setSystemUsage(systemUsage); KahaDBPersistenceAdapter kahaDBPersistenceAdapter = new KahaDBPersistenceAdapter(); kahaDBPersistenceAdapter setJournalMaxFileLength(16*1024); kahaDBPersistenceAdapter setCleanupInterval(500); broker setPersistenceAdapter(kahaDBPersistenceAdapter); broker start(); LOG info( Starting broker ); } Override public void tearDown() throws Exception { hectorConnection close(); xenaConnection close(); troyConnection close(); haloConnection close(); broker stop(); } public void testForNoDataFoundError() throws Exception { startBroker(); hectorConnection = createConnection(); Thread hectorThread = buildProducer(hectorConnection, hectorToHalo, false, useTopic); Receiver hHectorReceiver = new Receiver() { Override public void receive(String s) throws Exception { haloToHectorCtr++; if (haloToHectorCtr >= counter) { synchronized (lock) { lock notifyAll(); } } possiblySleep(haloToHectorCtr); } }; buildReceiver(hectorConnection, haloToHector, false, hHectorReceiver, useTopic); troyConnection = createConnection(); Thread troyThread = buildProducer(troyConnection, troyToHalo); Receiver hTroyReceiver = new Receiver() { Override public void receive(String s) throws Exception { haloToTroyCtr++; if (haloToTroyCtr >= counter) { synchronized (lock) { lock notifyAll(); } } possiblySleep(haloToTroyCtr); } }; buildReceiver(hectorConnection, haloToTroy, false, hTroyReceiver, false); xenaConnection = createConnection(); Thread xenaThread = buildProducer(xenaConnection, xenaToHalo); Receiver hXenaReceiver = new Receiver() { Override public void receive(String s) throws Exception { haloToXenaCtr++; if (haloToXenaCtr >= counter) { synchronized (lock) { lock notifyAll(); } } possiblySleep(haloToXenaCtr); } }; buildReceiver(xenaConnection, haloToXena, false, hXenaReceiver, false); haloConnection = createConnection(); final MessageSender hectorSender = buildTransactionalProducer(haloToHector, haloConnection, false); final MessageSender troySender = buildTransactionalProducer(haloToTroy, haloConnection, false); final MessageSender xenaSender = buildTransactionalProducer(haloToXena, haloConnection, false); Receiver hectorReceiver = new Receiver() { Override public void receive(String s) throws Exception { hectorToHaloCtr++; troySender send(payload); if (hectorToHaloCtr >= counter) { synchronized (lock) { lock notifyAll(); } possiblySleep(hectorToHaloCtr); } } }; Receiver xenaReceiver = new Receiver() { Override public void receive(String s) throws Exception { xenaToHaloCtr++; hectorSender send(payload); if (xenaToHaloCtr >= counter) { synchronized (lock) { lock notifyAll(); } } possiblySleep(xenaToHaloCtr); } }; Receiver troyReceiver = new Receiver() { Override public void receive(String s) throws Exception { troyToHaloCtr++; xenaSender send(payload); if (troyToHaloCtr >= counter) { synchronized (lock) { lock notifyAll(); } } } }; buildReceiver(haloConnection, hectorToHalo, true, hectorReceiver, false); buildReceiver(haloConnection, xenaToHalo, true, xenaReceiver, false); buildReceiver(haloConnection, troyToHalo, true, troyReceiver, false); haloConnection start(); troyConnection start(); troyThread start(); xenaConnection start(); xenaThread start(); hectorConnection start(); hectorThread start(); waitForMessagesToBeDelivered(); assertEquals(hectorToHaloCtr, counter); LOG info( hectorToHalo received + hectorToHaloCtr + messages ); assertEquals(xenaToHaloCtr, counter); LOG info( xenaToHalo received + xenaToHaloCtr + messages ); assertEquals(troyToHaloCtr, counter); LOG info( troyToHalo received + troyToHaloCtr + messages ); assertEquals(haloToHectorCtr, counter); LOG info( haloToHector received + haloToHectorCtr + messages ); assertEquals(haloToXenaCtr, counter); LOG info( haloToXena received + haloToXenaCtr + messages ); assertEquals(haloToTroyCtr, counter); LOG info( haloToTroy received + haloToTroyCtr + messages ); } protected void possiblySleep(int count) throws InterruptedException { if (useSleep) { if (count % 100 == 0) { Thread sleep(5000); } } } protected void waitForMessagesToBeDelivered() { long maxWaitTime = counter * 1000; long waitTime = maxWaitTime; long start = (maxWaitTime <= 0) 0 System currentTimeMillis(); synchronized (lock) { boolean hasMessages = true; while (hasMessages && waitTime >= 0) { try { lock wait(200); } catch (InterruptedException e) { LOG error(e toString()); } hasMessages = hectorToHaloCtr < counter || xenaToHaloCtr < counter || troyToHaloCtr < counter || haloToHectorCtr < counter || haloToXenaCtr < counter || haloToTroyCtr < counter; waitTime = maxWaitTime - (System currentTimeMillis() - start); } } } public MessageSender buildTransactionalProducer(String queueName, Connection connection, boolean isTopic) throws Exception { return new MessageSender(queueName, connection, true, isTopic); } public Thread buildProducer(Connection connection, final String queueName) throws Exception { return buildProducer(connection, queueName, false, false); } public Thread buildProducer(Connection connection, final String queueName, boolean transacted, boolean isTopic) throws Exception { final MessageSender producer = new MessageSender(queueName, connection, transacted, isTopic); Thread thread = new Thread() { Override public synchronized void run() { for (int i = 0; i < counter; i++) { try { producer send(payload ); } catch (Exception e) { throw new RuntimeException( on + queueName + send , e); } } } }; return thread; } public void buildReceiver(Connection connection, final String queueName, boolean transacted, final Receiver receiver, boolean isTopic) throws Exception { final Session session = transacted connection createSession(true, Session SESSION TRANSACTED) connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer inputMessageConsumer = session createConsumer(isTopic session createTopic(queueName) session createQueue(queueName)); MessageListener messageListener = new MessageListener() { Override public void onMessage(Message message) { try { ObjectMessage objectMessage = (ObjectMessage)message; String s = (String)objectMessage getObject(); receiver receive(s); if (session getTransacted()) { session commit(); } } catch (Exception e) { e printStackTrace(); } } }; inputMessageConsumer setMessageListener(messageListener); } }",1.0,
2438,2438,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\OptimizeAcknowledgeWithExpiredMsgsTest.,MyMessageListener,"private class MyMessageListener implements MessageListener, ExceptionListener { private AtomicInteger counter = new AtomicInteger(0); public void onMessage(final Message message) { try { LOG trace( Got Message + message getJMSMessageID()); LOG info( counter at + counter incrementAndGet()); } catch (final Exception e) { } } public int getCounter() { return counter get(); } public synchronized void onException(JMSException ex) { LOG error( JMS Exception occured Shutting down client ); } }",1.0,
2441,2441,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\QueueWorkerPrefetchTest.,WorkMessage,private static class WorkMessage implements Serializable { private static final long serialVersionUID = 1L; private final int id; public WorkMessage(int id) { this id = id; } Override public String toString() { return Work + id; } },1.0,
2442,2442,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\QueueWorkerPrefetchTest.,Worker,"private static class Worker implements MessageListener { private static AtomicInteger counter = new AtomicInteger(0); private Session session; private MessageProducer masterItemProducer; private MessageProducer workItemProducer; public Worker(Session session) throws JMSException { this session = session; masterItemProducer = session createProducer(session createQueue( master-item )); Queue workItemQueue = session createQueue( work-item ); workItemProducer = session createProducer(workItemQueue); MessageConsumer workItemConsumer = session createConsumer(workItemQueue); workItemConsumer setMessageListener(this); } public void onMessage(javax jms Message message) { try { WorkMessage work = (WorkMessage) ((ObjectMessage) message) getObject(); long c = counter incrementAndGet(); if (c % BATCH SIZE != 0) { workItemProducer send(session createObjectMessage(new WorkMessage(work id + 1))); } masterItemProducer send(session createObjectMessage(work)); } catch (JMSException e) { throw new IllegalStateException( Something has gone wrong , e); } } public void close() throws JMSException { masterItemProducer close(); workItemProducer close(); session close(); } }",1.0,
2443,2443,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\RawRollbackSharedConsumerTests.,RawRollbackSharedConsumerTests,"public class RawRollbackSharedConsumerTests { private static ConnectionFactory connectionFactory; private static Destination queue; private static BrokerService broker; BeforeClass public static void clean() throws Exception { broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(true); broker setUseJmx(true); broker start(); ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(); connectionFactory setBrokerURL( vm RawRollbackSharedConsumerTests connectionFactory = connectionFactory; queue = new ActiveMQQueue( queue ); } AfterClass public static void close() throws Exception { broker stop(); } Before public void clearData() throws Exception { getMessages(false); convertAndSend( foo ); convertAndSend( bar ); } After public void checkPostConditions() throws Exception { Thread sleep(1000L); List<String> list = getMessages(false); assertEquals(2, list size()); } Test public void testReceiveMessages() throws Exception { List<String> list = getMessages(true); assertEquals(2, list size()); assertTrue(list contains( foo )); } private void convertAndSend(String msg) throws Exception { Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(true, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage(msg)); producer close(); session commit(); session close(); connection close(); } private List<String> getMessages(boolean rollback) throws Exception { Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(true, Session AUTO ACKNOWLEDGE); String next = ; List<String> msgs = new ArrayList<String>(); MessageConsumer consumer = session createConsumer(queue); while (next != null) { next = (String) receiveAndConvert(consumer); if (next != null) msgs add(next); } consumer close(); if (rollback) { session rollback(); } else { session commit(); } session close(); connection close(); return msgs; } private String receiveAndConvert(MessageConsumer consumer) throws Exception { Message message = consumer receive(100L); if (message==null) { return null; } return ((TextMessage)message) getText(); } }",1.0,
2444,2444,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\RawRollbackTests.,RawRollbackTests,"public class RawRollbackTests { private static ConnectionFactory connectionFactory; private static Destination queue; private static BrokerService broker; BeforeClass public static void clean() throws Exception { broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(true); broker setUseJmx(true); broker start(); ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(); connectionFactory setBrokerURL( vm RawRollbackTests connectionFactory = connectionFactory; queue = new ActiveMQQueue( queue ); } AfterClass public static void close() throws Exception { broker stop(); } Before public void clearData() throws Exception { getMessages(false); convertAndSend( foo ); convertAndSend( bar ); } After public void checkPostConditions() throws Exception { Thread sleep(1000L); List<String> list = getMessages(false); assertEquals(2, list size()); } Test public void testReceiveMessages() throws Exception { List<String> list = getMessages(true); assertEquals(2, list size()); assertTrue(list contains( foo )); } private void convertAndSend(String msg) throws Exception { Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(true, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(queue); producer send(session createTextMessage(msg)); producer close(); session commit(); session close(); connection close(); } private List<String> getMessages(boolean rollback) throws Exception { Connection connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(true, Session AUTO ACKNOWLEDGE); String next = ; List<String> msgs = new ArrayList<String>(); while (next != null) { next = (String) receiveAndConvert(session); if (next != null) msgs add(next); } if (rollback) { session rollback(); } else { session commit(); } session close(); connection close(); return msgs; } private String receiveAndConvert(Session session) throws Exception { MessageConsumer consumer = session createConsumer(queue); Message message = consumer receive(100L); consumer close(); if (message==null) { return null; } return ((TextMessage)message) getText(); } }",1.0,
2445,2445,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\SlowConsumerTest.,SlowConsumerTest,"public class SlowConsumerTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(SlowConsumerTest class); private static final int MESSAGES COUNT = 10000; private final int messageLogFrequency = 2500; private final long messageReceiveTimeout = 10000L; private Socket stompSocket; private ByteArrayOutputStream inputBuffer; private int messagesCount; public void testRemoveSubscriber() throws Exception { final BrokerService broker = new BrokerService(); broker setPersistent(true); broker setUseJmx(true); broker setDeleteAllMessagesOnStartup(true); broker addConnector( tcp broker start(); ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( broker getTransportConnectors() get(0) getPublishableConnectString()); final Connection connection = factory createConnection(); connection start(); Thread producingThread = new Thread( Producing thread ) { public void run() { try { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(new ActiveMQQueue(getDestinationName())); for (int idx = 0; idx < MESSAGES COUNT; ++idx) { Message message = session createTextMessage( + idx); producer send(message); LOG debug( Sending + idx); } producer close(); session close(); } catch (Throwable ex) { ex printStackTrace(); } } }; producingThread setPriority(Thread MAX PRIORITY); producingThread start(); Thread sleep(1000); Thread consumingThread = new Thread( Consuming thread ) { public void run() { try { Session session = connection createSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = session createConsumer(new ActiveMQQueue(getDestinationName())); int diff = 0; while (messagesCount != MESSAGES COUNT) { Message msg = consumer receive(messageReceiveTimeout); if (msg == null) { LOG warn( Got null message at count + messagesCount + Continuing ); break; } String text = ((TextMessage)msg) getText(); int currentMsgIdx = Integer parseInt(text); LOG debug( Received + text + messageCount + messagesCount); msg acknowledge(); if ((messagesCount + diff) != currentMsgIdx) { LOG debug( Message(s) skipped!! Should be message no + messagesCount + but got + currentMsgIdx); diff = currentMsgIdx - messagesCount; } ++messagesCount; if (messagesCount % messageLogFrequency == 0) { LOG info( Received + messagesCount + messages so far ); } } } catch (Throwable ex) { ex printStackTrace(); } } }; consumingThread start(); consumingThread join(); assertEquals(MESSAGES COUNT, messagesCount); } public void sendFrame(String data) throws Exception { byte[] bytes = data getBytes( UTF-8 ); OutputStream outputStream = stompSocket getOutputStream(); for (int i = 0; i < bytes length; i++) { outputStream write(bytes[i]); } outputStream flush(); } public String receiveFrame(long timeOut) throws Exception { stompSocket setSoTimeout((int)timeOut); InputStream is = stompSocket getInputStream(); int c = 0; for (;;) { c = is read(); if (c < 0) { throw new IOException( socket closed ); } else if (c == 0) { c = is read(); byte[] ba = inputBuffer toByteArray(); inputBuffer reset(); return new String(ba, UTF-8 ); } else { inputBuffer write(c); } } } protected String getDestinationName() { return getClass() getName() + + getName(); } }",1.0,
2446,2446,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\SparseAckReplayAfterStoreCleanupAMQStoreTest.,SparseAckReplayAfterStoreCleanupAMQStoreTest,"public class SparseAckReplayAfterStoreCleanupAMQStoreTest extends AMQ2832Test { Override protected void configurePersistence(BrokerService brokerService, boolean deleteAllOnStart) throws Exception { brokerService setPersistenceFactory(new AMQPersistenceAdapterFactory()); AMQPersistenceAdapterFactory factory = (AMQPersistenceAdapterFactory) brokerService getPersistenceFactory(); factory setMaxFileLength(1024 * 12); factory setCheckpointInterval(500); factory setCleanupInterval(500); factory setSyncOnWrite(false); if (!deleteAllOnStart) { factory setForceRecoverReferenceStore(true); } brokerService getPersistenceAdapter(); } }",1.0,
2447,2447,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\TempQueueDeleteOnCloseTest.,TempQueueDeleteOnCloseTest,"public class TempQueueDeleteOnCloseTest { Test public void test() throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory( vm Connection connectionA = connectionFactory createConnection(); connectionA setClientID( ConnectionA ); Session sessionA = connectionA createSession(false, Session AUTO ACKNOWLEDGE); Destination tempQueueA = sessionA createTemporaryQueue(); MessageConsumer consumer = sessionA createConsumer(tempQueueA); connectionA start(); Connection connectionB = connectionFactory createConnection(); connectionB setClientID( ConnectionB ); connectionB start(); connectionB close(); consumer close(); connectionA close(); } }",1.0,
2450,2450,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\TempStoreDataCleanupTest.,TempStoreDataCleanupTest,"public class TempStoreDataCleanupTest { private static final Logger LOG = LoggerFactory getLogger(TempStoreDataCleanupTest class); private static final String QUEUE NAME = TempStoreDataCleanupTest class getName() + Queue ; private final String str = new String( QAa0bcLdUK2eHfJgTP8XhiFj61DOklNm9nBoI5pGqYVrs3CtSuMZvwWx4yE7zR ); private BrokerService broker; private String connectionUri; private ExecutorService pool; private String queueName; private Random r = new Random(); Before public void setUp() throws Exception { broker = new BrokerService(); broker setDataDirectory( target + File separator + activemq-data ); broker setPersistent(true); broker setUseJmx(true); broker setDedicatedTaskRunner(false); broker setAdvisorySupport(false); broker setDeleteAllMessagesOnStartup(true); SharedDeadLetterStrategy strategy = new SharedDeadLetterStrategy(); strategy setProcessExpired(false); strategy setProcessNonPersistent(false); PolicyEntry defaultPolicy = new PolicyEntry(); defaultPolicy setQueue( > ); defaultPolicy setOptimizedDispatch(true); defaultPolicy setDeadLetterStrategy(strategy); defaultPolicy setMemoryLimit(9000000); PolicyMap policyMap = new PolicyMap(); policyMap setDefaultEntry(defaultPolicy); broker setDestinationPolicy(policyMap); broker getSystemUsage() getMemoryUsage() setLimit(300000000L); broker addConnector( tcp broker start(); broker waitUntilStarted(); connectionUri = broker getTransportConnectors() get(0) getPublishableConnectString(); pool = Executors newFixedThreadPool(10); } After public void tearDown() throws Exception { if (broker != null) { broker stop(); broker waitUntilStopped(); } if (pool != null) { pool shutdown(); } } Test public void testIt() throws Exception { int startPercentage = broker getAdminView() getMemoryPercentUsage(); LOG info( MemoryUseage at test start = + startPercentage); for (int i = 0; i < 2; i++) { LOG info( Started the test iteration + i + using queueName = + queueName); queueName = QUEUE NAME + i; final CountDownLatch latch = new CountDownLatch(11); pool execute(new Runnable() { Override public void run() { receiveAndDiscard100messages(latch); } }); for (int j = 0; j < 10; j++) { pool execute(new Runnable() { Override public void run() { send10000messages(latch); } }); } LOG info( Waiting on the send / receive latch ); latch await(5, TimeUnit MINUTES); LOG info( Resumed ); destroyQueue(); TimeUnit SECONDS sleep(2); } LOG info( MemoryUseage before awaiting temp store cleanup = + broker getAdminView() getMemoryPercentUsage()); final PListStoreImpl pa = (PListStoreImpl) broker getTempDataStore(); assertTrue( only one journal file should be left + pa getJournal() getFileMap() size(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return pa getJournal() getFileMap() size() == 1; } }, TimeUnit MINUTES toMillis(3)) ); int endPercentage = broker getAdminView() getMemoryPercentUsage(); LOG info( MemoryUseage at test end = + endPercentage); assertEquals(startPercentage, endPercentage); } public void destroyQueue() { try { Broker broker = this broker getBroker(); if (!broker isStopped()) { LOG info( Removing + queueName); broker removeDestination(this broker getAdminConnectionContext(), new ActiveMQQueue(queueName), 10); } } catch (Exception e) { LOG warn( Got an error while removing the test queue , e); } } private void send10000messages(CountDownLatch latch) { ActiveMQConnection activeMQConnection = null; try { activeMQConnection = createConnection(null); Session session = activeMQConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(session createQueue(queueName)); producer setDeliveryMode(DeliveryMode NON PERSISTENT); activeMQConnection start(); for (int i = 0; i < 10000; i++) { TextMessage textMessage = session createTextMessage(); textMessage setText(generateBody(1000)); textMessage setJMSDeliveryMode(DeliveryMode NON PERSISTENT); producer send(textMessage); try { Thread sleep(10); } catch (InterruptedException e) { } } producer close(); } catch (JMSException e) { LOG warn( Got an error while sending the messages , e); } finally { if (activeMQConnection != null) { try { activeMQConnection close(); } catch (JMSException e) { } } } latch countDown(); } private void receiveAndDiscard100messages(CountDownLatch latch) { ActiveMQConnection activeMQConnection = null; try { activeMQConnection = createConnection(null); Session session = activeMQConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer messageConsumer = session createConsumer( session createQueue(queueName)); activeMQConnection start(); for (int i = 0; i < 100; i++) { messageConsumer receive(); } messageConsumer close(); LOG info( Created and disconnected ); } catch (JMSException e) { LOG warn( Got an error while receiving the messages , e); } finally { if (activeMQConnection != null) { try { activeMQConnection close(); } catch (JMSException e) { } } } latch countDown(); } private ActiveMQConnection createConnection(String id) throws JMSException { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(connectionUri); if (id != null) { factory setClientID(id); } ActiveMQConnection connection = (ActiveMQConnection) factory createConnection(); return connection; } private String generateBody(int length) { StringBuilder sb = new StringBuilder(); int te = 0; for (int i = 1; i <= length; i++) { te = r nextInt(62); sb append(str charAt(te)); } return sb toString(); } }",1.0,
2451,2451,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\TransactedStoreUsageSuspendResumeTest.,TransactedStoreUsageSuspendResumeTest,"public class TransactedStoreUsageSuspendResumeTest { private static final Logger LOG = LoggerFactory getLogger(TransactedStoreUsageSuspendResumeTest class); private static final int MAX MESSAGES = 10000; private static final String QUEUE NAME = test queue ; private BrokerService broker; private final CountDownLatch messagesReceivedCountDown = new CountDownLatch(MAX MESSAGES); private final CountDownLatch messagesSentCountDown = new CountDownLatch(MAX MESSAGES); private final CountDownLatch consumerStartLatch = new CountDownLatch(1); private class ConsumerThread extends Thread { Override public void run() { try { consumerStartLatch await(30, TimeUnit SECONDS); ConnectionFactory factory = new ActiveMQConnectionFactory( vm Connection connection = factory createConnection(); connection start(); Session session = connection createSession(true, Session SESSION TRANSACTED); long currentSendCount; do { currentSendCount = messagesSentCountDown getCount(); TimeUnit SECONDS sleep(5); } while (currentSendCount != messagesSentCountDown getCount()); LOG info( Starting consumer at + currentSendCount); MessageConsumer consumer = session createConsumer(session createQueue(QUEUE NAME)); do { Message message = consumer receive(1000); if (message != null) { session commit(); messagesReceivedCountDown countDown(); } if (messagesReceivedCountDown getCount() % 500 == 0) { LOG info( remaining to receive + messagesReceivedCountDown getCount()); } } while (messagesReceivedCountDown getCount() != 0); consumer close(); session close(); connection close(); } catch (Exception e) { Assert fail(e getMessage()); } } } Before public void setup() throws Exception { broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(true); broker setPersistent(true); KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter(); kahaDB setJournalMaxFileLength(500 * 1024); kahaDB setCleanupInterval(10*1000); broker setPersistenceAdapter(kahaDB); broker getSystemUsage() getStoreUsage() setLimit(7*1024*1024); broker start(); broker waitUntilStarted(); } After public void tearDown() throws Exception { broker stop(); } Test public void testTransactedStoreUsageSuspendResume() throws Exception { ConsumerThread thread = new ConsumerThread(); thread start(); ExecutorService sendExecutor = Executors newSingleThreadExecutor(); sendExecutor execute(new Runnable() { Override public void run() { try { sendMessages(); } catch (Exception ignored) { } } }); sendExecutor shutdown(); sendExecutor awaitTermination(5, TimeUnit MINUTES); boolean allMessagesReceived = messagesReceivedCountDown await(120, TimeUnit SECONDS); assertTrue( Got all messages + messagesReceivedCountDown, allMessagesReceived); } private void sendMessages() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( vm factory setAlwaysSyncSend(true); Connection connection = factory createConnection(); connection start(); Session session = connection createSession(true, Session SESSION TRANSACTED); Destination queue = session createQueue(QUEUE NAME); Destination retainQueue = session createQueue(QUEUE NAME + -retain ); MessageProducer producer = session createProducer(null); producer setDeliveryMode(DeliveryMode PERSISTENT); BytesMessage message = session createBytesMessage(); message writeBytes(new byte[10]); for (int i=0; i<4240; i++) { producer send(retainQueue, message); session commit(); } consumerStartLatch countDown(); for (int i = 0; i < MAX MESSAGES; i++) { producer send(queue, message); if (i>0 && i%20 == 0) { session commit(); } messagesSentCountDown countDown(); if (i>0 && i%500 == 0) { LOG info( Sent + i); } } session commit(); producer close(); session close(); connection close(); } }",1.0,
2452,2452,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\TransactedStoreUsageSuspendResumeTest.,ConsumerThread,"private class ConsumerThread extends Thread { Override public void run() { try { consumerStartLatch await(30, TimeUnit SECONDS); ConnectionFactory factory = new ActiveMQConnectionFactory( vm Connection connection = factory createConnection(); connection start(); Session session = connection createSession(true, Session SESSION TRANSACTED); long currentSendCount; do { currentSendCount = messagesSentCountDown getCount(); TimeUnit SECONDS sleep(5); } while (currentSendCount != messagesSentCountDown getCount()); LOG info( Starting consumer at + currentSendCount); MessageConsumer consumer = session createConsumer(session createQueue(QUEUE NAME)); do { Message message = consumer receive(1000); if (message != null) { session commit(); messagesReceivedCountDown countDown(); } if (messagesReceivedCountDown getCount() % 500 == 0) { LOG info( remaining to receive + messagesReceivedCountDown getCount()); } } while (messagesReceivedCountDown getCount() != 0); consumer close(); session close(); connection close(); } catch (Exception e) { Assert fail(e getMessage()); } } } Before",1.0,
2455,2455,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\VMTransportClosureTest.,VMTransportClosureTest,"public class VMTransportClosureTest extends EmbeddedBrokerTestSupport { private static final Log LOG = LogFactory getLog(VMTransportClosureTest class); private static final long MAX TEST TIME MILLIS = 300000; private static final int NUM ATTEMPTS = 100000; public void setUp() throws Exception { setAutoFail(true); setMaxTestTime(MAX TEST TIME MILLIS); super setUp(); } Override protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setPersistent(isPersistent()); return answer; } public void testPrematureClosure() throws Exception { ActiveMQConnection persistentConn = (ActiveMQConnection) createConnection(); persistentConn start(); Session session = persistentConn createSession(true, Session SESSION TRANSACTED); MessageProducer producer = session createProducer(destination); for (int i = 0; i < NUM ATTEMPTS; i++) { LOG info( Attempt + i); final Transport localTransport = TransportFactory connect(broker getVmConnectorURI()); localTransport setTransportListener(new TransportListener() { public void onCommand(Object command) { if (command instanceof ShutdownInfo) { try { localTransport stop(); } catch (Exception ex) { throw new RuntimeException(ex); } } } public void onException(IOException error) { } public void transportInterupted() { } public void transportResumed() { } }); localTransport start(); localTransport stop(); producer send(session createMessage()); session rollback(); } persistentConn close(); } }",1.0,
2456,2456,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\amq1095\ActiveMQTestCase.,ActiveMQTestCase,"public class ActiveMQTestCase extends TestCase { private Context context; private BrokerService broker; protected Connection connection; protected Destination destination; private List<MessageConsumer> consumersToEmpty = new LinkedList<MessageConsumer>(); protected final long RECEIVE TIMEOUT = 500; public ActiveMQTestCase() {} public ActiveMQTestCase(final String name) { super(name); } protected void setUp() { URI uri; try { final Properties systemProperties = System getProperties(); final Properties jndiProperties = new Properties(); for (final Iterator i = systemProperties keySet() iterator(); i hasNext();) { final String key = (String) i next(); if (key startsWith( java naming ) || key startsWith( topic ) || key startsWith( queue )) { final String value = (String) systemProperties get(key); jndiProperties put(key, value); } } context = new InitialContext(jndiProperties); uri = new URI( xbean org/apache/activemq/bugs/amq1095/activemq xml ); broker = BrokerFactory createBroker(uri); broker start(); } catch (Exception ex) { throw new RuntimeException(ex); } final ConnectionFactory connectionFactory; try { connectionFactory = (ConnectionFactory) context lookup( TopicConnectionFactory ); destination = new ActiveMQTopic( TestTopic ); connection = connectionFactory createConnection(); connection setClientID( sampleClientID ); } catch (JMSException ex1) { ex1 printStackTrace(); Assert fail(ex1 toString()); } catch (NamingException ex2) { ex2 printStackTrace(); Assert fail(ex2 toString()); } catch (Throwable ex3) { ex3 printStackTrace(); Assert fail(ex3 toString()); } } protected void tearDown() throws Exception { TextMessage msg; try { for (final Iterator i = consumersToEmpty iterator(); i hasNext();) { final MessageConsumer consumer = (MessageConsumer) i next(); if (consumer != null) do msg = (TextMessage) consumer receive(RECEIVE TIMEOUT); while (msg != null); } } catch (Exception e) { } if (connection != null) { connection stop(); } broker stop(); } protected void registerToBeEmptiedOnShutdown(final MessageConsumer consumer) { consumersToEmpty add(consumer); } }",1.0,
2457,2457,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\amq1095\MessageSelectorTest.,MessageSelectorTest,"public class MessageSelectorTest extends ActiveMQTestCase { private MessageConsumer consumer1; private MessageConsumer consumer2; public MessageSelectorTest() {} public MessageSelectorTest(final String name) { super(name); } public void testMessageSelectorForDurableSubscribersRunA() { runMessageSelectorTest(true); } public void testMessageSelectorForDurableSubscribersRunB() { runMessageSelectorTest(true); } public void testMessageSelectorForNonDurableSubscribers() { runMessageSelectorTest(false); } private void runMessageSelectorTest(final boolean isDurableSubscriber) { try { final String PROPERTY CONSUMER = consumer ; final String CONSUMER 1 = Consumer 1 ; final String CONSUMER 2 = Consumer 2 ; final String MESSAGE 1 = Message to + CONSUMER 1; final String MESSAGE 2 = Message to + CONSUMER 2; assertNotNull(connection); assertNotNull(destination); final Session producingSession = connection createSession(false, Session AUTO ACKNOWLEDGE); final MessageProducer producer = producingSession createProducer(destination); final Session consumingSession1 = connection createSession(false, Session AUTO ACKNOWLEDGE); final Session consumingSession2 = connection createSession(false, Session AUTO ACKNOWLEDGE); if (isDurableSubscriber) { consumer1 = consumingSession1 createDurableSubscriber ((Topic) destination, CONSUMER 1, PROPERTY CONSUMER + = 1 , false); consumer2 = consumingSession2 createDurableSubscriber ((Topic) destination, CONSUMER 2, PROPERTY CONSUMER + = 2 , false); } else { consumer1 = consumingSession1 createConsumer(destination, PROPERTY CONSUMER + = 1 ); consumer2 = consumingSession2 createConsumer(destination, PROPERTY CONSUMER + = 2 ); } registerToBeEmptiedOnShutdown(consumer1); registerToBeEmptiedOnShutdown(consumer2); connection start(); TextMessage msg1; TextMessage msg2; int propertyValue; String contents; msg1 = (TextMessage) consumer1 receive(RECEIVE TIMEOUT); if (msg1 != null) { final StringBuffer msg = new StringBuffer( The consumer read a message that was left over from a former ActiveMQ broker run ); propertyValue = msg1 getIntProperty(PROPERTY CONSUMER); contents = msg1 getText(); if (propertyValue != 1) { msg append( That message does not match the consumer s message selector ); fail(msg toString()); } assertEquals(1, propertyValue); assertEquals(MESSAGE 1, contents); } msg2 = (TextMessage) consumer2 receive(RECEIVE TIMEOUT); if (msg2 != null) { final StringBuffer msg = new StringBuffer( The consumer read a message that was left over from a former ActiveMQ broker run ); propertyValue = msg2 getIntProperty(PROPERTY CONSUMER); contents = msg2 getText(); if (propertyValue != 2) { msg append( That message does not match the consumer s message selector ); fail(msg toString()); } assertEquals(2, propertyValue); assertEquals(MESSAGE 2, contents); } TextMessage msg; msg = producingSession createTextMessage(); msg setText(MESSAGE 1); msg setIntProperty(PROPERTY CONSUMER, 1); producer send(msg); msg = producingSession createTextMessage(); msg setText(MESSAGE 2); msg setIntProperty(PROPERTY CONSUMER, 2); producer send(msg); msg1 = (TextMessage) consumer1 receive(RECEIVE TIMEOUT); assertNotNull(msg1); propertyValue = msg1 getIntProperty(PROPERTY CONSUMER); contents = msg1 getText(); assertEquals(1, propertyValue); assertEquals(MESSAGE 1, contents); msg1 = (TextMessage) consumer1 receive(RECEIVE TIMEOUT); assertNull(msg1); msg2 = (TextMessage) consumer2 receive(RECEIVE TIMEOUT); assertNotNull(msg2); propertyValue = msg2 getIntProperty(PROPERTY CONSUMER); contents = msg2 getText(); assertEquals(2, propertyValue); assertEquals(MESSAGE 2, contents); msg2 = (TextMessage) consumer2 receive(RECEIVE TIMEOUT); assertNull(msg2); } catch (JMSException ex) { ex printStackTrace(); Assert fail(); } } }",1.0,
2458,2458,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\amq1974\TryJmsClient.,TryJmsClient,"public class TryJmsClient { private final BrokerService broker = new BrokerService(); public static void main(String[] args) throws Exception { new TryJmsClient() start(); } private void start() throws Exception { broker setUseJmx(false); broker setPersistent(true); broker setBrokerName( TestBroker ); broker getSystemUsage() setSendFailIfNoSpace(true); broker getSystemUsage() getMemoryUsage() setLimit(10 * 1024 * 1024); KahaPersistenceAdapter persist = new KahaPersistenceAdapter(); persist setDirectory(new File( /tmp/broker2 )); persist setMaxDataFileLength(20 * 1024 * 1024); broker setPersistenceAdapter(persist); String brokerUrl = tcp broker addConnector(brokerUrl); broker start(); addNetworkBroker(); startUsageMonitor(broker); startMessageSend(); synchronized(this) { this wait(); } } private void startUsageMonitor(final BrokerService brokerService) { new Thread(new Runnable() { public void run() { while (true) { try { Thread sleep(10000); } catch (InterruptedException e) { e printStackTrace(); } System out println( ActiveMQ memeory + brokerService getSystemUsage() getMemoryUsage() getPercentUsage() + + brokerService getSystemUsage() getMemoryUsage() getUsage()); System out println( ActiveMQ message store + brokerService getSystemUsage() getStoreUsage() getPercentUsage()); System out println( ActiveMQ temp space + brokerService getSystemUsage() getTempUsage() getPercentUsage()); } } }) start(); } private void addNetworkBroker() throws Exception { DiscoveryNetworkConnector dnc = new DiscoveryNetworkConnector(); dnc setNetworkTTL(1); dnc setBrokerName( TestBroker ); dnc setName( Broker1Connector ); dnc setDynamicOnly(true); SimpleDiscoveryAgent discoveryAgent = new SimpleDiscoveryAgent(); String remoteUrl = tcp discoveryAgent setServices(remoteUrl); dnc setDiscoveryAgent(discoveryAgent); broker addNetworkConnector(dnc); dnc start(); } private void startMessageSend() { new Thread(new MessageSend()) start(); } private class MessageSend implements Runnable { public void run() { try { String url = vm ActiveMQConnection connection = ActiveMQConnection makeConnection(url); connection setDispatchAsync(true); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination dest = session createTopic( TestDestination ); MessageProducer producer = session createProducer(dest); producer setDeliveryMode(DeliveryMode PERSISTENT); for(int i = 0; i < 99999999; i++) { TextMessage message = session createTextMessage( test + i); try { producer send(message); } catch (Exception e ) { e printStackTrace(); System out println( TOTAL number of messages sent + i); break; } if (i % 1000 == 0) { System out println( sent message + message getJMSMessageID()); } } } catch (JMSException e) { e printStackTrace(); } catch (URISyntaxException e) { e printStackTrace(); } } } }",1.0,
2459,2459,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\amq1974\TryJmsClient.,MessageSend,"private class MessageSend implements Runnable { public void run() { try { String url = vm ActiveMQConnection connection = ActiveMQConnection makeConnection(url); connection setDispatchAsync(true); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination dest = session createTopic( TestDestination ); MessageProducer producer = session createProducer(dest); producer setDeliveryMode(DeliveryMode PERSISTENT); for(int i = 0; i < 99999999; i++) { TextMessage message = session createTextMessage( test + i); try { producer send(message); } catch (Exception e ) { e printStackTrace(); System out println( TOTAL number of messages sent + i); break; } if (i % 1000 == 0) { System out println( sent message + message getJMSMessageID()); } } } catch (JMSException e) { e printStackTrace(); } catch (URISyntaxException e) { e printStackTrace(); } } }",1.0,
2460,2460,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\amq1974\TryJmsManager.,TryJmsManager,"public class TryJmsManager { private final BrokerService broker = new BrokerService(); public static void main(String[] args) throws Exception { new TryJmsManager() start(); } private void start() throws Exception { broker setUseJmx(false); broker setPersistent(true); broker setBrokerName( TestBroker ); broker getSystemUsage() setSendFailIfNoSpace(true); broker getSystemUsage() getMemoryUsage() setLimit(10 * 1024 * 1024); KahaPersistenceAdapter persist = new KahaPersistenceAdapter(); persist setDirectory(new File( /tmp/broker1 )); persist setMaxDataFileLength(20 * 1024 * 1024); broker setPersistenceAdapter(persist); String brokerUrl = tcp broker addConnector(brokerUrl); broker start(); addNetworkBroker(); startUsageMonitor(broker); startMessageConsumer(); synchronized(this) { this wait(); } } private void startUsageMonitor(final BrokerService brokerService) { new Thread(new Runnable() { public void run() { while (true) { try { Thread sleep(10000); } catch (InterruptedException e) { e printStackTrace(); } System out println( ActiveMQ memeory + brokerService getSystemUsage() getMemoryUsage() getPercentUsage() + + brokerService getSystemUsage() getMemoryUsage() getUsage()); System out println( ActiveMQ message store + brokerService getSystemUsage() getStoreUsage() getPercentUsage()); System out println( ActiveMQ temp space + brokerService getSystemUsage() getTempUsage() getPercentUsage()); } } }) start(); } private void addNetworkBroker() throws Exception { DiscoveryNetworkConnector dnc = new DiscoveryNetworkConnector(); dnc setNetworkTTL(1); dnc setBrokerName( TestBroker ); dnc setName( Broker1Connector ); dnc setDynamicOnly(true); SimpleDiscoveryAgent discoveryAgent = new SimpleDiscoveryAgent(); String remoteUrl = tcp discoveryAgent setServices(remoteUrl); dnc setDiscoveryAgent(discoveryAgent); broker addNetworkConnector(dnc); dnc start(); } private void startMessageConsumer() throws JMSException, URISyntaxException { String url = vm ActiveMQConnection connection = ActiveMQConnection makeConnection(url); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination dest = session createTopic( TestDestination ); MessageConsumer consumer = session createConsumer(dest); consumer setMessageListener(new MessageListener() { public void onMessage(Message message) { try { System out println( got message + message getJMSMessageID()); } catch (JMSException e) { e printStackTrace(); } } } ); connection start(); } }",1.0,
2462,2462,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\embedded\ThreadExplorer.,ThreadExplorer,"public class ThreadExplorer { static Logger logger = Logger getLogger(ThreadExplorer class); public static Thread[] listThreads() { int nThreads = Thread activeCount(); Thread ret[] = new Thread[nThreads]; Thread enumerate(ret); return ret; } public static Thread fetchThread(String name) { Thread[] threadArray = listThreads(); for (int i = 0; i < threadArray length; i++) { Thread t = threadArray[i]; if (t getName() equalsIgnoreCase(name)) return t; } return null; } SuppressWarnings( deprecation ) public static int kill(String threadName, boolean isStarredExp, String motivation) { String me = ThreadExplorer kill ; if (logger isDebugEnabled()) { logger debug( Entering + me + with + threadName + isStarred + isStarredExp); } int ret = 0; Pattern mypattern = null; if (isStarredExp) { String realreg = threadName toLowerCase() replaceAll( * , * ); mypattern = Pattern compile(realreg); } Thread[] threads = listThreads(); for (int i = 0; i < threads length; i++) { Thread thread = threads[i]; if (thread == null) continue; boolean matches = false; if (isStarredExp) { Matcher matcher = mypattern matcher(thread getName() toLowerCase()); matches = matcher matches(); } else { matches = (thread getName() equalsIgnoreCase(threadName)); } if (matches && (Thread currentThread() != thread) && !thread getName() equals( main )) { if (logger isInfoEnabled()) logger info( Killing thread named [ + thread getName() + ] ); ret++; try { thread stop(); } catch (ThreadDeath e) { logger warn( Thread already death , e); } } } return ret; } public static String show(String title) { StringBuffer out = new StringBuffer(); Thread[] threadArray = ThreadExplorer listThreads(); out append(title + n ); for (int i = 0; i < threadArray length; i++) { Thread thread = threadArray[i]; if (thread != null) { out append( * [ + thread getName() + ] + (thread isDaemon() (Daemon) ) + Group + thread getThreadGroup() getName() + n ); } else { out append( * ThreadDeath + thread + n ); } } return out toString(); } public static int active() { int count = 0; Thread[] threadArray = ThreadExplorer listThreads(); for (int i = 0; i < threadArray length; i++) { Thread thread = threadArray[i]; if (thread != null) { count++; } } return count; } }",1.0,
2465,2465,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\command\ActiveMQDestinationTest.,CombyDest,"class CombyDest implements Queue, Topic, TemporaryQueue, TemporaryTopic { private final String qName; private final String topicName; public CombyDest(String qName, String topicName) { this qName = qName; this topicName = topicName; } public void delete() throws JMSException { } public String getTopicName() throws JMSException { return topicName; } public String getQueueName() throws JMSException { return qName; } }",1.0,
2468,2468,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\command\ActiveMQObjectMessageTest.,ActiveMQObjectMessageTest,"public class ActiveMQObjectMessageTest extends TestCase { public ActiveMQObjectMessageTest(String name) { super(name); } public static void main(String[] args) { junit textui TestRunner run(ActiveMQObjectMessageTest class); } protected void setUp() throws Exception { super setUp(); } protected void tearDown() throws Exception { super tearDown(); } public void testBytes() throws JMSException, IOException { ActiveMQObjectMessage msg = new ActiveMQObjectMessage(); String str = testText ; msg setObject(str); msg = (ActiveMQObjectMessage) msg copy(); assertEquals(msg getObject(), str); } public void testSetObject() throws JMSException { ActiveMQObjectMessage msg = new ActiveMQObjectMessage(); String str = testText ; msg setObject(str); assertTrue(msg getObject() == str); } public void testClearBody() throws JMSException { ActiveMQObjectMessage objectMessage = new ActiveMQObjectMessage(); try { objectMessage setObject( String ); objectMessage clearBody(); assertFalse(objectMessage isReadOnlyBody()); assertNull(objectMessage getObject()); objectMessage setObject( String ); objectMessage getObject(); } catch (MessageNotWriteableException mnwe) { fail( should be writeable ); } } public void testReadOnlyBody() throws JMSException { ActiveMQObjectMessage msg = new ActiveMQObjectMessage(); msg setObject( test ); msg setReadOnlyBody(true); try { msg getObject(); } catch (MessageNotReadableException e) { fail( should be readable ); } try { msg setObject( test ); fail( should throw exception ); } catch (MessageNotWriteableException e) { } } public void testWriteOnlyBody() throws JMSException { ActiveMQObjectMessage msg = new ActiveMQObjectMessage(); msg setReadOnlyBody(false); try { msg setObject( test ); msg getObject(); } catch (MessageNotReadableException e) { fail( should be readable ); } msg setReadOnlyBody(true); try { msg getObject(); msg setObject( test ); fail( should throw exception ); } catch (MessageNotReadableException e) { fail( should be readable ); } catch (MessageNotWriteableException mnwe) { } } }",1.0,
2471,2471,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\command\DataStructureTestSupport.,DataStructureTestSupport,"public abstract class DataStructureTestSupport extends CombinationTestSupport { public boolean cacheEnabled; public WireFormat wireFormat; public void assertBeanMarshalls(Object original) throws IOException { Object o = marshalAndUnmarshall(original, wireFormat); assertNotNull(o); assertEquals(original, o); } public static void assertEquals(Object expect, Object was) { if (expect == null ^ was == null) { throw new AssertionFailedError( Not equals, expected + expect + , was + was); } if (expect == null) { return; } if (expect getClass() != was getClass()) { throw new AssertionFailedError( Not equals, classes don t match expected + expect getClass() + , was + was getClass()); } if (expect getClass() isArray()) { Class componentType = expect getClass() getComponentType(); if (componentType isPrimitive()) { boolean ok = false; if (componentType == byte class) { ok = Arrays equals((byte[])expect, (byte[])was); } if (componentType == char class) { ok = Arrays equals((char[])expect, (char[])was); } if (componentType == short class) { ok = Arrays equals((short[])expect, (short[])was); } if (componentType == int class) { ok = Arrays equals((int[])expect, (int[])was); } if (componentType == long class) { ok = Arrays equals((long[])expect, (long[])was); } if (componentType == double class) { ok = Arrays equals((double[])expect, (double[])was); } if (componentType == float class) { ok = Arrays equals((float[])expect, (float[])was); } if (!ok) { throw new AssertionFailedError( Arrays not equal ); } } else { Object expectArray[] = (Object[])expect; Object wasArray[] = (Object[])was; if (expectArray length != wasArray length) { throw new AssertionFailedError( Not equals, array lengths don t match expected + expectArray length + , was + wasArray length); } for (int i = 0; i < wasArray length; i++) { assertEquals(expectArray[i], wasArray[i]); } } } else if (expect instanceof Command) { assertEquals(expect getClass(), was getClass()); Method[] methods = expect getClass() getMethods(); for (int i = 0; i < methods length; i++) { Method method = methods[i]; if ((method getName() startsWith( get ) || method getName() startsWith( is )) && method getParameterTypes() length == 0 && method getReturnType() != null) { try { if (method getName() startsWith( get )) { expect getClass() getMethod(method getName() replaceFirst( get , set ), new Class[] {method getReturnType()}); } else { expect getClass() getMethod(method getName() replaceFirst( is , set ), new Class[] {method getReturnType()}); } } catch (Throwable ignore) { continue; } try { assertEquals(method invoke(expect, (Object)null), method invoke(was, (Object)null)); } catch (IllegalArgumentException e) { } catch (IllegalAccessException e) { } catch (InvocationTargetException e) { } } } } else { TestCase assertEquals(expect, was); } } protected void setUp() throws Exception { wireFormat = createWireFormat(); super setUp(); } protected WireFormat createWireFormat() { OpenWireFormat answer = new OpenWireFormat(); answer setCacheEnabled(cacheEnabled); return answer; } protected Object marshalAndUnmarshall(Object original, WireFormat wireFormat) throws IOException { ByteSequence packet = wireFormat marshal(original); return wireFormat unmarshal(packet); } }",1.0,
2475,2475,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\config\BrokerPropertiesTest.,BrokerPropertiesTest,"public class BrokerPropertiesTest extends TestCase { private static final transient Logger LOG = LoggerFactory getLogger(BrokerPropertiesTest class); public void testPropertiesFile() throws Exception { BrokerService broker = BrokerFactory createBroker( properties org/apache/activemq/config/broker properties ); LOG info( Created broker + broker); assertNotNull(broker); assertEquals( isUseJmx() , false, broker isUseJmx()); assertEquals( isPersistent() , false, broker isPersistent()); assertEquals( getBrokerName() , Cheese , broker getBrokerName()); broker stop(); } public void testVmBrokerPropertiesFile() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( vm Connection connection = factory createConnection(); BrokerService broker = BrokerRegistry getInstance() lookup( Cheese ); LOG info( Found broker + broker); assertNotNull(broker); assertEquals( isUseJmx() , false, broker isUseJmx()); assertEquals( isPersistent() , false, broker isPersistent()); assertEquals( getBrokerName() , Cheese , broker getBrokerName()); connection close(); broker stop(); } }",1.0,
2477,2477,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\config\BrokerXmlConfigTest.,BrokerXmlConfigTest,public class BrokerXmlConfigTest extends JmsTopicSendReceiveWithTwoConnectionsTest { protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(); connectionFactory setBrokerURL( vm return connectionFactory; } },1.0,
2480,2480,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\config\JDBCConfigTest.,JDBCConfigTest,"public class JDBCConfigTest { protected static final String JOURNAL ROOT = target/test-data/ ; protected static final String DERBY ROOT = target/test-data/ ; protected static final String CONF ROOT = src/test/resources/org/apache/activemq/config/sample-conf/ ; private static final Logger LOG = LoggerFactory getLogger(JDBCConfigTest class); Test public void testJdbcConfig() throws Exception { File journalFile = new File(JOURNAL ROOT + testJDBCConfig/journal ); recursiveDelete(journalFile); File derbyFile = new File(DERBY ROOT + testJDBCConfig/derbydb ); recursiveDelete(derbyFile); BrokerService broker; broker = createBroker(new FileSystemResource(CONF ROOT + jdbc-example xml )); try { assertEquals( Broker Config Error (brokerName) , brokerJdbcConfigTest , broker getBrokerName()); PersistenceAdapter adapter = broker getPersistenceAdapter(); assertTrue( Should have created a jdbc persistence adapter , adapter instanceof JDBCPersistenceAdapter); assertEquals( JDBC Adapter Config Error (cleanupPeriod) , 60000, ((JDBCPersistenceAdapter) adapter) getCleanupPeriod()); assertTrue( Should have created an EmbeddedDataSource , ((JDBCPersistenceAdapter) adapter) getDataSource() instanceof EmbeddedDataSource); assertTrue( Should have created a DefaultWireFormat , ((JDBCPersistenceAdapter) adapter) getWireFormat() instanceof ObjectStreamWireFormat); LOG info( Success ); } finally { if (broker != null) { broker stop(); } } } protected static void recursiveDelete(File file) { if (file isDirectory()) { File[] files = file listFiles(); for (int i = 0; i < files length; i++) { recursiveDelete(files[i]); } } file delete(); } protected BrokerService createBroker(String resource) throws Exception { return createBroker(new ClassPathResource(resource)); } protected BrokerService createBroker(Resource resource) throws Exception { BrokerFactoryBean factory = new BrokerFactoryBean(resource); factory afterPropertiesSet(); BrokerService broker = factory getBroker(); assertTrue( Should have a broker! , broker != null); return broker; } }",1.0,
2481,2481,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\console\command\DummyConnectionFactory.,DummyConnectionFactory,"public class DummyConnectionFactory extends ActiveMQConnectionFactory { public DummyConnectionFactory() { super(); } public DummyConnectionFactory(String userName, String password, String brokerURL) { super(userName, password, brokerURL); } public DummyConnectionFactory(String userName, String password, URI brokerURL) { super(userName, password, brokerURL); } public DummyConnectionFactory(String brokerURL) { super(brokerURL); } public DummyConnectionFactory(URI brokerURL) { super(brokerURL); } }",1.0,
2482,2482,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\console\command\InvalidConnectionFactory.,InvalidConnectionFactory,public class InvalidConnectionFactory extends ActiveMQConnectionFactory { },1.0,
2483,2483,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\console\command\LowercasingPasswordFactory.,LowercasingPasswordFactory,public class LowercasingPasswordFactory implements PasswordFactory { Override public String getPassword(String password) { return password toLowerCase(); } },1.0,
2485,2485,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\console\command\TestAMQ3411.,TestAMQ3411,"public class TestAMQ3411 extends TestCase { SuppressWarnings( unused ) private static final Logger LOG = LoggerFactory getLogger(TestPurgeCommand class); private static final Collection<String> DEFAULT OPTIONS = Arrays asList(new String[] { --amqurl , tcp private static final Collection<String> DEFAULT TOKENS = Arrays asList(new String[] { FOO QUEUE }); protected AbstractApplicationContext context; protected static final String origPassword = ABCDEFG ; protected void setUp() throws Exception { super setUp(); context = createApplicationContext(); } protected AbstractApplicationContext createApplicationContext() { return new ClassPathXmlApplicationContext( org/apache/activemq/console/command/activemq xml ); } protected void tearDown() throws Exception { BrokerService broker = (BrokerService) context getBean( localbroker ); broker stop(); broker = (BrokerService) context getBean( default ); broker stop(); super tearDown(); } public void testNoFactorySet() throws Exception { AmqBrowseCommand command = new AmqBrowseCommand(); CommandContext context = new CommandContext(); context setFormatter(new CommandShellOutputFormatter(System out)); command setCommandContext(context); List<String> tokens = new ArrayList<String>(); tokens addAll(DEFAULT OPTIONS); tokens addAll(DEFAULT TOKENS); command execute(tokens); assertNotNull(command getPasswordFactory()); assertTrue(command getPasswordFactory() instanceof DefaultPasswordFactory); assertNull(command getPassword()); } public void testUsernamePasswordSet() throws Exception { AmqBrowseCommand command = new AmqBrowseCommand(); CommandContext context = new CommandContext(); String username = user ; String password = password ; context setFormatter(new CommandShellOutputFormatter(System out)); command setCommandContext(context); List<String> tokens = new ArrayList<String>(); tokens addAll(DEFAULT OPTIONS); tokens add( --password ); tokens add(password); tokens add( --user ); tokens add(username); tokens addAll(DEFAULT TOKENS); command execute(tokens); assertNotNull(command getPasswordFactory()); assertTrue(command getPasswordFactory() instanceof DefaultPasswordFactory); assertEquals(password, command getPassword()); assertEquals(username, command getUsername()); } public void testFactorySet() throws Exception { AmqBrowseCommand command = new AmqBrowseCommand(); CommandContext context = new CommandContext(); context setFormatter(new CommandShellOutputFormatter(System out)); command setCommandContext(context); List<String> tokens = new ArrayList<String>(); tokens addAll(DEFAULT OPTIONS); tokens add( --passwordFactory ); tokens add(LowercasingPasswordFactory class getCanonicalName()); tokens add( --password ); tokens add(origPassword); tokens addAll(DEFAULT TOKENS); command execute(tokens); assertNotNull(command getPasswordFactory()); assertTrue(command getPasswordFactory() instanceof LowercasingPasswordFactory); assertEquals(origPassword toLowerCase(), command getPassword()); } public void testFactorySetWrong1() throws Exception { AmqBrowseCommand command = new AmqBrowseCommand(); CommandContext context = new CommandContext(); context setFormatter(new CommandShellOutputFormatter(System out)); command setCommandContext(context); List<String> tokens = new ArrayList<String>(); tokens addAll(DEFAULT OPTIONS); tokens add( --passwordFactory ); tokens add( org apache activemq console command TestAMQ3411 DoesntExistFactory ); tokens add( --password ); tokens add(origPassword); tokens addAll(DEFAULT TOKENS); try { command execute(tokens); } catch (Throwable e) { Throwable cause = e; while (null != cause) { if (cause instanceof java lang ClassNotFoundException) return; cause = cause getCause(); } assertFalse(e toString(), true); } assertFalse( No exception caught , true); } public void testFactorySetWrong2() throws Exception { AmqBrowseCommand command = new AmqBrowseCommand(); CommandContext context = new CommandContext(); context setFormatter(new CommandShellOutputFormatter(System out)); command setCommandContext(context); List<String> tokens = new ArrayList<String>(); tokens addAll(DEFAULT OPTIONS); tokens add( --passwordFactory ); tokens add( java lang Object ); tokens add( --password ); tokens add(origPassword); tokens addAll(DEFAULT TOKENS); try { command execute(tokens); } catch (Throwable e) { Throwable cause = e; while (null != cause) { if (cause instanceof java lang ClassCastException) return; cause = cause getCause(); } assertFalse(e toString(), true); } assertFalse( No exception caught , true); } }",1.0,
2487,2487,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\demo\DefaultQueueSender.,DefaultQueueSender,"public final class DefaultQueueSender { private static final Logger LOG = LoggerFactory getLogger(DefaultQueueSender class); private DefaultQueueSender() { } public static void main(String[] args) { String uri = tcp String text = Hello World! ; Connection connection = null; if (args length < 1) { printUsage(); System exit(1); } int idx = 0; String arg = args[0]; if (arg equals( -uri )) { if (args length == 1) { printUsage(); System exit(1); } uri = args[1]; idx += 2; } String queueName = args[idx]; LOG info( Connecting to + uri); LOG info( Queue name is + queueName); if (++idx < args length) { text = args[idx]; } try { ConnectionFactory factory = new ActiveMQConnectionFactory(uri); connection = factory createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createQueue(queueName); MessageProducer producer = session createProducer(destination); Message message = session createTextMessage(text); producer send(message); } catch (JMSException e) { LOG info( Exception occurred + e toString()); } finally { if (connection != null) { try { connection close(); } catch (JMSException e) { } } } } protected static void printUsage() { System out println( Usage java DefaultQueueSender [-uri <connection-uri>] + <queue-name> [<message-body>] ); } }",1.0,
2488,2488,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\demo\SimpleConsumer.,SimpleConsumer,"public final class SimpleConsumer { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(SimpleConsumer class); private SimpleConsumer() { } public static void main(String[] args) { String destinationName = null; Context jndiContext = null; ConnectionFactory connectionFactory = null; Connection connection = null; Session session = null; Destination destination = null; MessageConsumer consumer = null; if (args length != 1) { LOG info( Usage java SimpleConsumer <destination-name> ); System exit(1); } destinationName = args[0]; LOG info( Destination name is + destinationName); try { jndiContext = new InitialContext(); } catch (NamingException e) { LOG info( Could not create JNDI API + context + e toString()); System exit(1); } try { connectionFactory = (ConnectionFactory)jndiContext lookup( ConnectionFactory ); destination = (Destination)jndiContext lookup(destinationName); } catch (NamingException e) { LOG info( JNDI API lookup failed + e toString()); System exit(1); } try { connection = connectionFactory createConnection(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); consumer = session createConsumer(destination); connection start(); while (true) { Message m = consumer receive(1); if (m != null) { if (m instanceof TextMessage) { TextMessage message = (TextMessage)m; LOG info( Reading message + message getText()); } else { break; } } } } catch (JMSException e) { LOG info( Exception occurred + e); } finally { if (connection != null) { try { connection close(); } catch (JMSException e) { } } } } }",1.0,
2489,2489,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\demo\SimpleProducer.,SimpleProducer,"public final class SimpleProducer { private static final Logger LOG = LoggerFactory getLogger(SimpleProducer class); private SimpleProducer() { } public static void main(String[] args) { Context jndiContext = null; ConnectionFactory connectionFactory = null; Connection connection = null; Session session = null; Destination destination = null; MessageProducer producer = null; String destinationName = null; final int numMsgs; if ((args length < 1) || (args length > 2)) { LOG info( Usage java SimpleProducer <destination-name> [<number-of-messages>] ); System exit(1); } destinationName = args[0]; LOG info( Destination name is + destinationName); if (args length == 2) { numMsgs = (new Integer(args[1])) intValue(); } else { numMsgs = 1; } try { jndiContext = new InitialContext(); } catch (NamingException e) { LOG info( Could not create JNDI API context + e toString()); System exit(1); } try { connectionFactory = (ConnectionFactory)jndiContext lookup( ConnectionFactory ); destination = (Destination)jndiContext lookup(destinationName); } catch (NamingException e) { LOG info( JNDI API lookup failed + e); System exit(1); } try { connection = connectionFactory createConnection(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); producer = session createProducer(destination); TextMessage message = session createTextMessage(); for (int i = 0; i < numMsgs; i++) { message setText( This is message + (i + 1)); LOG info( Sending message + message getText()); producer send(message); } producer send(session createMessage()); } catch (JMSException e) { LOG info( Exception occurred + e); } finally { if (connection != null) { try { connection close(); } catch (JMSException e) { } } } } }",1.0,
2490,2490,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\demo\SimpleQueueReceiver.,SimpleQueueReceiver,"public final class SimpleQueueReceiver { private static final Logger LOG = LoggerFactory getLogger(SimpleQueueReceiver class); private SimpleQueueReceiver() { } public static void main(String[] args) { String queueName = null; Context jndiContext = null; QueueConnectionFactory queueConnectionFactory = null; QueueConnection queueConnection = null; QueueSession queueSession = null; Queue queue = null; QueueReceiver queueReceiver = null; TextMessage message = null; if (args length != 1) { LOG info( Usage java + SimpleQueueReceiver <queue-name> ); System exit(1); } queueName = args[0]; LOG info( Queue name is + queueName); try { jndiContext = new InitialContext(); } catch (NamingException e) { LOG info( Could not create JNDI API + context + e toString()); System exit(1); } try { queueConnectionFactory = (QueueConnectionFactory)jndiContext lookup( QueueConnectionFactory ); queue = (Queue)jndiContext lookup(queueName); } catch (NamingException e) { LOG info( JNDI API lookup failed + e toString()); System exit(1); } try { queueConnection = queueConnectionFactory createQueueConnection(); queueSession = queueConnection createQueueSession(false, Session AUTO ACKNOWLEDGE); queueReceiver = queueSession createReceiver(queue); queueConnection start(); while (true) { Message m = queueReceiver receive(1); if (m != null) { if (m instanceof TextMessage) { message = (TextMessage)m; LOG info( Reading message + message getText()); } else { break; } } } } catch (JMSException e) { LOG info( Exception occurred + e toString()); } finally { if (queueConnection != null) { try { queueConnection close(); } catch (JMSException e) { } } } } }",1.0,
2491,2491,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\demo\SimpleQueueSender.,SimpleQueueSender,"public final class SimpleQueueSender { private static final Logger LOG = LoggerFactory getLogger(SimpleQueueSender class); private SimpleQueueSender() { } public static void main(String[] args) { String queueName = null; Context jndiContext = null; QueueConnectionFactory queueConnectionFactory = null; QueueConnection queueConnection = null; QueueSession queueSession = null; Queue queue = null; QueueSender queueSender = null; TextMessage message = null; final int numMsgs; if ((args length < 1) || (args length > 2)) { LOG info( Usage java SimpleQueueSender + <queue-name> [<number-of-messages>] ); System exit(1); } queueName = args[0]; LOG info( Queue name is + queueName); if (args length == 2) { numMsgs = (new Integer(args[1])) intValue(); } else { numMsgs = 1; } try { jndiContext = new InitialContext(); } catch (NamingException e) { LOG info( Could not create JNDI API context + e toString()); System exit(1); } try { queueConnectionFactory = (QueueConnectionFactory)jndiContext lookup( QueueConnectionFactory ); queue = (Queue)jndiContext lookup(queueName); } catch (NamingException e) { LOG info( JNDI API lookup failed + e); System exit(1); } try { queueConnection = queueConnectionFactory createQueueConnection(); queueSession = queueConnection createQueueSession(false, Session AUTO ACKNOWLEDGE); queueSender = queueSession createSender(queue); message = queueSession createTextMessage(); for (int i = 0; i < numMsgs; i++) { message setText( This is message + (i + 1)); LOG info( Sending message + message getText()); queueSender send(message); } queueSender send(queueSession createMessage()); } catch (JMSException e) { LOG info( Exception occurred + e toString()); } finally { if (queueConnection != null) { try { queueConnection close(); } catch (JMSException e) { } } } } }",1.0,
2492,2492,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\filter\DestinationFilterTest.,DestinationFilterTest,"public class DestinationFilterTest extends TestCase { public void testPrefixFilter() throws Exception { DestinationFilter filter = DestinationFilter parseFilter(new ActiveMQQueue( > )); assertTrue( Filter not parsed well + filter getClass(), filter instanceof PrefixDestinationFilter); System out println(filter); assertFalse( Filter matched wrong destination type , filter matches(new ActiveMQTopic( > ))); } public void testWildcardFilter() throws Exception { DestinationFilter filter = DestinationFilter parseFilter(new ActiveMQQueue( A * )); assertTrue( Filter not parsed well + filter getClass(), filter instanceof WildcardDestinationFilter); assertFalse( Filter matched wrong destination type , filter matches(new ActiveMQTopic( A B ))); } public void testCompositeFilter() throws Exception { DestinationFilter filter = DestinationFilter parseFilter(new ActiveMQQueue( A B,B C )); assertTrue( Filter not parsed well + filter getClass(), filter instanceof CompositeDestinationFilter); assertFalse( Filter matched wrong destination type , filter matches(new ActiveMQTopic( A B ))); } }",1.0,
2494,2494,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\filter\DestinationMapTempDestinationTest.,DestinationMapTempDestinationTest,"public class DestinationMapTempDestinationTest extends TestCase { public void testtestTempDestinations() throws Exception { ConnectionId id = new ConnectionId(new IdGenerator() generateId()); DestinationMap map = new DestinationMap(); Object value = new Object(); int count = 1000; for (int i = 0; i < count; i++) { ActiveMQTempQueue queue = new ActiveMQTempQueue(id, i); map put(queue, value); } for (int i = 0; i < count; i++) { ActiveMQTempQueue queue = new ActiveMQTempQueue(id, i); map remove(queue, value); Set set = map get(queue); assertTrue(set isEmpty()); } } }",1.0,
2496,2496,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\filter\DestinationPathTest.,DestinationPathTest,"public class DestinationPathTest extends TestSupport { public void testPathParse() { assertParse( FOO , new String[]{ FOO }); assertParse( FOO BAR , new String[]{ FOO , BAR }); assertParse( FOO * , new String[]{ FOO , * }); assertParse( FOO > , new String[]{ FOO , > }); assertParse( FOO BAR XYZ , new String[]{ FOO , BAR , XYZ }); assertParse( FOO BAR , new String[]{ FOO , BAR , }); } protected void assertParse(String subject, String[] expected) { String[] path = DestinationPath getDestinationPaths(subject); assertArrayEqual(subject, expected, path); } }",1.0,
2497,2497,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\filter\DummyPolicy.,DummyPolicy,public class DummyPolicy extends DestinationMap { protected Class getEntryClass() { return DummyPolicyEntry class; } public void setEntries(List entries) { super setEntries(entries); } },1.0,
2498,2498,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\filter\DummyPolicyEntry.,DummyPolicyEntry,public class DummyPolicyEntry extends DestinationMapEntry<String> { private String description; public String getDescription() { return description; } public void setDescription(String description) { this description = description; } public Comparable<String> getValue() { return description; } protected String getValuePropertyName() { return description ; } },1.0,
2499,2499,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\filter\DummyPolicyTest.,DummyPolicyTest,"public class DummyPolicyTest extends SpringTestSupport { public void testPolicy() throws Exception { DummyPolicy policy = (DummyPolicy)getBean( policy ); Set set = policy get(new ActiveMQTopic( FOO BAR )); assertSetEquals( FOO BAR set , new Object[] { Edam , Cheddar }, set); } protected AbstractApplicationContext createApplicationContext() { return new ClassPathXmlApplicationContext( org/apache/activemq/filter/dummyPolicy xml ); } }",1.0,
2502,2502,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\jndi\ActiveMQWASInitialContextFactoryTest.,ActiveMQWASInitialContextFactoryTest,"public class ActiveMQWASInitialContextFactoryTest extends JNDITestSupport { SuppressWarnings( unchecked ) public void testTransformEnvironment() { Hashtable<Object, Object> originalEnvironment = new Hashtable<Object, Object>(); originalEnvironment put( java naming connectionFactoryNames , ConnectionFactory ); originalEnvironment put( java naming topic jms systemMessageTopic , jms/systemMessageTopic ); originalEnvironment put(Context PROVIDER URL, tcp originalEnvironment put( non-string , Integer valueOf(43)); originalEnvironment put( java naming queue , jms/systemMessageQueue ); Hashtable<Object, Object> transformedEnvironment = new ActiveMQWASInitialContextFactory() transformEnvironment(originalEnvironment); assertEquals( ConnectionFactory , ConnectionFactory , transformedEnvironment get( connectionFactoryNames )); assertEquals( topic jm , jms/systemMessageTopic , transformedEnvironment get( topic jms/systemMessageTopic )); assertEquals( java naming provider url , tcp assertNull( non-string , transformedEnvironment get( non-string )); assertEquals( queue , jms/systemMessageQueue , transformedEnvironment get( java naming queue )); } }",1.0,
2503,2503,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\jndi\CustomConnectionFactoryNameTest.,CustomConnectionFactoryNameTest,"public class CustomConnectionFactoryNameTest extends ActiveMQInitialContextFactoryTest { public void testConnectionFactoriesArePresent() throws NamingException { super testConnectionFactoriesArePresent(); assertConnectionFactoryPresent( jms/Connection ); assertConnectionFactoryPresent( jms/DURABLE SUB CONNECTION FACTORY ); } public void testConnectionFactoriesAreConfigured() throws NamingException { super testConnectionFactoriesArePresent(); ActiveMQConnectionFactory factory1 = (ActiveMQConnectionFactory) context lookup( jms/Connection ); assertNull(factory1 getClientID()); ActiveMQConnectionFactory factory2 = (ActiveMQConnectionFactory) context lookup( jms/DURABLE SUB CONNECTION FACTORY ); assertEquals( testclient , factory2 getClientID()); } protected String getConnectionFactoryLookupName() { return myConnectionFactory ; } protected void configureEnvironment() { super configureEnvironment(); environment put( connectionFactoryNames , myConnectionFactory, jms/Connection, jms/DURABLE SUB CONNECTION FACTORY ); environment put( connection jms/DURABLE SUB CONNECTION FACTORY clientID , testclient ); } }",1.0,
2504,2504,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\jndi\DestinationNameWithSlashTest.,DestinationNameWithSlashTest,"public class DestinationNameWithSlashTest extends JNDITestSupport { public void testNameWithSlash() throws Exception { assertDestinationExists( jms/Queue ); } protected void configureEnvironment() { super configureEnvironment(); environment put( queue jms/Queue , example myqueue ); } }",1.0,
2506,2506,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\jndi\JNDITestSupport.,JNDITestSupport,"public abstract class JNDITestSupport extends TestCase { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(JNDITestSupport class); protected Hashtable environment = new Hashtable(); protected Context context; protected void assertConnectionFactoryPresent(String lookupName) throws NamingException { Object connectionFactory = context lookup(lookupName); assertTrue( Should have created a ConnectionFactory for key + lookupName + but got + connectionFactory, connectionFactory instanceof ConnectionFactory); } protected void assertBinding(Binding binding) throws NamingException { Object object = binding getObject(); assertTrue( Should have got a child context but got + object, object instanceof Context); Context childContext = (Context) object; NamingEnumeration iter = childContext listBindings( ); while (iter hasMore()) { Binding destinationBinding = (Binding) iter next(); LOG info( Found destination + destinationBinding getName()); Object destination = destinationBinding getObject(); assertTrue( Should have a Destination but got + destination, destination instanceof Destination); } } protected void setUp() throws Exception { super setUp(); configureEnvironment(); InitialContextFactory factory = new ActiveMQInitialContextFactory(); context = factory getInitialContext(environment); assertTrue( No context created , context != null); } protected void tearDown() throws NamingException, JMSException { NamingEnumeration iter = context listBindings( ); while (iter hasMore()) { Binding binding = (Binding) iter next(); Object connFactory = binding getObject(); if (connFactory instanceof ActiveMQConnectionFactory) { } } } protected void configureEnvironment() { environment put( brokerURL , vm } protected void assertDestinationExists(String name) throws NamingException { Object object = context lookup(name); assertTrue( Should have received a Destination for name + name + but instead found + object, object instanceof Destination); } }",1.0,
2508,2508,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\jndi\XAConnectionFactoryTest.,XAConnectionFactoryTest,"public class XAConnectionFactoryTest extends ActiveMQInitialContextFactoryTest { public void testConnectionFactoriesIsXA() throws NamingException { assertTrue( connection factory implements XA , context lookup(getConnectionFactoryLookupName()) instanceof XAConnectionFactory); } protected void configureEnvironment() { environment put( xa , true ); super configureEnvironment(); } }",1.0,
2509,2509,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\joramtests\ActiveMQAdmin.,ActiveMQAdmin,"public class ActiveMQAdmin implements Admin { Context context; { try { final Hashtable<String, String> env = new Hashtable<String, String>(); env put( java naming factory initial , org eclipse jetty jndi InitialContextFactory ); env put( java naming factory url pkgs , org eclipse jetty jndi );; context = new InitialContext(env); } catch (NamingException e) { throw new RuntimeException(e); } } protected BrokerService createBroker() throws Exception { return BrokerFactory createBroker(new URI( broker } public String getName() { return getClass() getName(); } BrokerService broker; public void startServer() throws Exception { if (System getProperty( basedir ) == null) { File file = new File( ); System setProperty( basedir , file getAbsolutePath()); } broker = createBroker(); broker start(); } public void stopServer() throws Exception { broker stop(); } public void start() throws Exception { } public void stop() throws Exception { } public Context createContext() throws NamingException { return context; } public void createQueue(String name) { try { context bind(name, new ActiveMQQueue(name)); } catch (NamingException e) { throw new RuntimeException(e); } } public void createTopic(String name) { try { context bind(name, new ActiveMQTopic(name)); } catch (NamingException e) { throw new RuntimeException(e); } } public void deleteQueue(String name) { try { context unbind(name); } catch (NamingException e) { throw new RuntimeException(e); } } public void deleteTopic(String name) { try { context unbind(name); } catch (NamingException e) { throw new RuntimeException(e); } } public void createConnectionFactory(String name) { try { final ConnectionFactory factory = new ActiveMQConnectionFactory( vm ((ActiveMQConnectionFactory) factory) setNestedMapAndListEnabled(false); context bind(name, factory); } catch (NamingException e) { throw new RuntimeException(e); } } public void deleteConnectionFactory(String name) { try { context unbind(name); } catch (NamingException e) { throw new RuntimeException(e); } } public void createQueueConnectionFactory(String name) { createConnectionFactory(name); } public void createTopicConnectionFactory(String name) { createConnectionFactory(name); } public void deleteQueueConnectionFactory(String name) { deleteConnectionFactory(name); } public void deleteTopicConnectionFactory(String name) { deleteConnectionFactory(name); } }",1.0,
2510,2510,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\joramtests\JoramJmsTest.,JoramJmsTest,public class JoramJmsTest extends TestCase { public static Test suite() { TestSuite suite = new TestSuite(); suite addTestSuite(SelectorTest class); suite addTestSuite(ConnectionTest class); suite addTestSuite(TopicConnectionTest class); suite addTestSuite(MessageHeaderTest class); suite addTestSuite(MessageBodyTest class); suite addTestSuite(MessageDefaultTest class); suite addTestSuite(MessageTypeTest class); suite addTestSuite(JMSXPropertyTest class); suite addTestSuite(MessagePropertyConversionTest class); suite addTestSuite(TemporaryQueueTest class); suite addTestSuite(SelectorSyntaxTest class); suite addTestSuite(QueueSessionTest class); suite addTestSuite(SessionTest class); suite addTestSuite(TopicSessionTest class); suite addTestSuite(TemporaryTopicTest class); suite addTestSuite(UnifiedSessionTest class); suite addTestSuite(QueueBrowserTest class); suite addTestSuite(MessagePropertyTest class); return suite; } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
2511,2511,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\leveldb\LevelDBStoreBrokerTest.,LevelDBStoreBrokerTest,public class LevelDBStoreBrokerTest extends BrokerTest { public static Test suite() { return suite(LevelDBStoreBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } Override protected BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); broker setPersistenceAdapter(createPersistenceAdapter(true)); return broker; } protected PersistenceAdapter createPersistenceAdapter(boolean delete) { LevelDBStore store = new LevelDBStore(); store setDirectory(new File( target/activemq-data/leveldb )); if (delete) { store deleteAllMessages(); } return store; } protected BrokerService createRestartedBroker() throws IOException { BrokerService broker = new BrokerService(); broker setPersistenceAdapter(createPersistenceAdapter(false)); return broker; } },1.0,
2512,2512,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\leveldb\LevelDBXARecoveryBrokerTest.,LevelDBXARecoveryBrokerTest,public class LevelDBXARecoveryBrokerTest extends XARecoveryBrokerTest { public static Test suite() { return suite(LevelDBXARecoveryBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } Override protected void configureBroker(BrokerService broker) throws Exception { super configureBroker(broker); LevelDBStore store = new LevelDBStore(); store setDirectory(new File( target/activemq-data/xahaleveldb )); broker setPersistenceAdapter(store); } Override public void testTopicPersistentPreparedAcksAvailableAfterRestartAndRollback() { } },1.0,
2513,2513,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\load\LoadClient.,LoadClient,"public class LoadClient implements Runnable{ private static final Logger LOG = LoggerFactory getLogger(LoadClient class); protected static int SLEEP TIME = 2; protected String name; protected ConnectionFactory factory; protected Connection connection; protected Destination startDestination; protected Destination nextDestination; protected Session session; protected MessageConsumer consumer; protected MessageProducer producer; protected PerfRate rate = new PerfRate(); protected int deliveryMode = DeliveryMode PERSISTENT; protected ActiveMQMessageAudit audit = new ActiveMQMessageAudit(); protected boolean connectionPerMessage = false; protected boolean running; protected int timeout = 10000; public LoadClient(String name,ConnectionFactory factory) { this name=name; this factory = factory; } public synchronized void start() throws JMSException { if (!running) { rate reset(); running = true; if (!connectionPerMessage) { connection = factory createConnection(); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); consumer = session createConsumer(getConsumeDestination()); producer = session createProducer(getSendDestination()); producer setDeliveryMode(this deliveryMode); } Thread t = new Thread(this); t setName(name); t start(); } } public void stop() throws JMSException, InterruptedException { running = false; if(connection != null) { connection stop(); } } public void run() { try { while (running) { String result = consume(); if(result != null) { send(result); rate increment(); } else if (running) { LOG error(name + Failed to consume! ); } } } catch (Throwable e) { e printStackTrace(); } } protected String consume() throws Exception { Connection con = null; MessageConsumer c = consumer; if (connectionPerMessage){ con = factory createConnection(); con start(); Session s = con createSession(false, Session AUTO ACKNOWLEDGE); c = s createConsumer(getConsumeDestination()); } TextMessage result = (TextMessage) c receive(timeout); if (result != null) { if (audit isDuplicate(result getJMSMessageID())) { throw new JMSException( Received duplicate + result getText()); } if (!audit isInOrder(result getJMSMessageID())) { throw new JMSException( Out of order + result getText()); } if (connectionPerMessage) { Thread sleep(SLEEP TIME); con close(); } } return result != null result getText() null; } protected void send(String text) throws Exception { Connection con = connection; MessageProducer p = producer; Session s = session; if (connectionPerMessage){ con = factory createConnection(); con start(); s = con createSession(false, Session AUTO ACKNOWLEDGE); p = s createProducer(getSendDestination()); p setDeliveryMode(deliveryMode); } TextMessage message = s createTextMessage(text); p send(message); if (connectionPerMessage) { Thread sleep(SLEEP TIME); con close(); } } public String getName() { return name; } public void setName(String name) { this name = name; } public Destination getStartDestination() { return startDestination; } public void setStartDestination(Destination startDestination) { this startDestination = startDestination; } public Destination getNextDestination() { return nextDestination; } public void setNextDestination(Destination nextDestination) { this nextDestination = nextDestination; } public int getDeliveryMode() { return deliveryMode; } public void setDeliveryMode(int deliveryMode) { this deliveryMode = deliveryMode; } public boolean isConnectionPerMessage() { return connectionPerMessage; } public void setConnectionPerMessage(boolean connectionPerMessage) { this connectionPerMessage = connectionPerMessage; } public int getTimeout() { return timeout; } public void setTimeout(int timeout) { this timeout = timeout; } protected Destination getSendDestination() { return nextDestination; } protected Destination getConsumeDestination() { return startDestination; } }",1.0,
2514,2514,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\load\LoadController.,LoadController,"public class LoadController extends LoadClient{ private int numberOfBatches=1; private int batchSize =1000; private int count; private final CountDownLatch stopped = new CountDownLatch(1); public LoadController(String name,ConnectionFactory factory) { super(name,factory); } public int awaitTestComplete() throws InterruptedException { boolean complete = stopped await(60*5,TimeUnit SECONDS); return count; } public void stop() throws JMSException, InterruptedException { running = false; stopped countDown(); if (connection != null) { this connection stop(); } } public void run() { try { for (int i = 0; i < numberOfBatches; i++) { for (int j = 0; j < batchSize; j++) { String payLoad = batch[ + i + ]no + j; send(payLoad); } for (int j = 0; j < batchSize; j++) { String result = consume(); if (result != null) { count++; rate increment(); } } } } catch (Throwable e) { e printStackTrace(); } finally { stopped countDown(); } } public int getNumberOfBatches() { return numberOfBatches; } public void setNumberOfBatches(int numberOfBatches) { this numberOfBatches = numberOfBatches; } public int getBatchSize() { return batchSize; } public void setBatchSize(int batchSize) { this batchSize = batchSize; } protected Destination getSendDestination() { return startDestination; } protected Destination getConsumeDestination() { return nextDestination; } }",1.0,
2515,2515,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\load\LoadTest.,LoadTest,"public class LoadTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(LoadTest class); protected BrokerService broker; protected String bindAddress= tcp protected LoadController controller; protected LoadClient[] clients; protected ConnectionFactory factory; protected Destination destination; protected int numberOfClients = 50; protected int deliveryMode = DeliveryMode PERSISTENT; protected int batchSize = 1000; protected int numberOfBatches = 10; protected int timeout = Integer MAX VALUE; protected boolean connectionPerMessage = false; protected Connection managementConnection; protected Session managementSession; protected void setUp() throws Exception { if (broker == null) { broker = createBroker(bindAddress); } factory = createConnectionFactory(bindAddress); managementConnection = factory createConnection(); managementSession = managementConnection createSession(false, Session AUTO ACKNOWLEDGE); Destination startDestination = createDestination(managementSession, getClass()+ start ); Destination endDestination = createDestination(managementSession, getClass()+ end ); LOG info( Running with + numberOfClients + clients - sending + numberOfBatches + batches of + batchSize + messages ); controller = new LoadController( Controller ,factory); controller setBatchSize(batchSize); controller setNumberOfBatches(numberOfBatches); controller setDeliveryMode(deliveryMode); controller setConnectionPerMessage(connectionPerMessage); controller setStartDestination(startDestination); controller setNextDestination(endDestination); controller setTimeout(timeout); clients = new LoadClient[numberOfClients]; for (int i = 0; i < numberOfClients; i++) { Destination inDestination = null; if (i==0) { inDestination = startDestination; }else { inDestination = createDestination(managementSession, getClass() + client +(i)); } Destination outDestination = null; if (i==(numberOfClients-1)) { outDestination = endDestination; }else { outDestination = createDestination(managementSession, getClass() + client +(i+1)); } LoadClient client = new LoadClient( client( +i+ ) ,factory); client setTimeout(timeout); client setDeliveryMode(deliveryMode); client setConnectionPerMessage(connectionPerMessage); client setStartDestination(inDestination); client setNextDestination(outDestination); clients[i] = client; } super setUp(); } protected void tearDown() throws Exception { super tearDown(); managementConnection close(); for (int i = 0; i < numberOfClients; i++) { clients[i] stop(); } controller stop(); if (broker != null) { broker stop(); broker = null; } } protected Destination createDestination(Session s, String destinationName) throws JMSException { return s createQueue(destinationName); } protected BrokerService createBroker(String uri) throws Exception { BrokerService answer = new BrokerService(); configureBroker(answer,uri); answer start(); return answer; } protected void configureBroker(BrokerService answer,String uri) throws Exception { answer setDeleteAllMessagesOnStartup(true); answer addConnector(uri); answer setUseShutdownHook(false); } protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception { return new ActiveMQConnectionFactory(uri); } public void testLoad() throws JMSException, InterruptedException { for (int i = 0; i < numberOfClients; i++) { clients[i] start(); } controller start(); assertEquals((batchSize* numberOfBatches),controller awaitTestComplete()); } }",1.0,
2516,2516,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\management\BoundaryStatisticTest.,BoundaryStatisticTest,"public class BoundaryStatisticTest extends StatisticTestSupport { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(BoundaryStatisticTest class); public void testStatistic() throws Exception { BoundaryStatisticImpl stat = new BoundaryStatisticImpl( myBoundaryStat , seconds , myBoundaryStatDesc , 1000, 2000); assertStatistic(stat, myBoundaryStat , seconds , myBoundaryStatDesc ); assertEquals(1000, stat getLowerBound()); assertEquals(2000, stat getUpperBound()); LOG info( Stat is + stat); } }",1.0,
2517,2517,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\management\BoundedRangeStatisticTest.,BoundedRangeStatisticTest,"public class BoundedRangeStatisticTest extends RangeStatisticTest { public void testStatistic() throws Exception { BoundedRangeStatisticImpl stat = new BoundedRangeStatisticImpl( myRange , millis , myDescription , 10, 3000); assertStatistic(stat, myRange , millis , myDescription ); assertEquals(10, stat getLowerBound()); assertEquals(3000, stat getUpperBound()); assertRangeStatistic(stat); } }",1.0,
2518,2518,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\management\CountStatisticTest.,CountStatisticTest,"public class CountStatisticTest extends StatisticTestSupport { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(CountStatisticTest class); public void testStatistic() throws Exception { CountStatisticImpl stat = new CountStatisticImpl( myCounter , seconds , myDescription ); stat setEnabled(true); assertStatistic(stat, myCounter , seconds , myDescription ); assertEquals(0, stat getCount()); stat increment(); assertEquals(1, stat getCount()); stat increment(); assertEquals(2, stat getCount()); stat decrement(); assertEquals(1, stat getCount()); Thread sleep(500); stat increment(); assertLastTimeNotStartTime(stat); LOG info( Counter is + stat); stat reset(); assertEquals(0, stat getCount()); } }",1.0,
2519,2519,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\management\RangeStatisticTest.,RangeStatisticTest,"public class RangeStatisticTest extends StatisticTestSupport { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(RangeStatisticTest class); public void testStatistic() throws Exception { RangeStatisticImpl stat = new RangeStatisticImpl( myRange , millis , myDescription ); assertStatistic(stat, myRange , millis , myDescription ); assertRangeStatistic(stat); } protected void assertRangeStatistic(RangeStatisticImpl stat) throws InterruptedException { assertEquals(0, stat getCurrent()); assertEquals(0, stat getLowWaterMark()); assertEquals(0, stat getHighWaterMark()); stat setCurrent(100); assertEquals(100, stat getCurrent()); assertEquals(100, stat getLowWaterMark()); assertEquals(100, stat getHighWaterMark()); stat setCurrent(50); assertEquals(50, stat getCurrent()); assertEquals(50, stat getLowWaterMark()); assertEquals(100, stat getHighWaterMark()); stat setCurrent(200); assertEquals(200, stat getCurrent()); assertEquals(50, stat getLowWaterMark()); assertEquals(200, stat getHighWaterMark()); Thread sleep(500); stat setCurrent(10); assertEquals(10, stat getCurrent()); assertEquals(10, stat getLowWaterMark()); assertEquals(200, stat getHighWaterMark()); assertLastTimeNotStartTime(stat); LOG info( Stat is + stat); stat reset(); assertEquals(0, stat getCurrent()); assertEquals(0, stat getLowWaterMark()); assertEquals(0, stat getHighWaterMark()); stat setCurrent(100); assertEquals(100, stat getCurrent()); assertEquals(100, stat getLowWaterMark()); assertEquals(100, stat getHighWaterMark()); } }",1.0,
2520,2520,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\management\StatisticTestSupport.,StatisticTestSupport,"public abstract class StatisticTestSupport extends TestCase { protected void assertStatistic(StatisticImpl counter, String name, String unit, String description) { assertEquals(name, counter getName()); assertEquals(unit, counter getUnit()); assertEquals(description, counter getDescription()); } protected void assertLastTimeNotStartTime(StatisticImpl counter) { assertTrue( Should not have start time the same as last sample time Start time + counter getStartTime() + lastTime + counter getLastSampleTime(), counter getStartTime() != counter getLastSampleTime()); } }",1.0,
2521,2521,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\management\TimeStatisticTest.,TimeStatisticTest,"public class TimeStatisticTest extends StatisticTestSupport { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(TimeStatisticTest class); public void testStatistic() throws Exception { TimeStatisticImpl stat = new TimeStatisticImpl( myTimer , millis , myDescription ); assertStatistic(stat, myTimer , millis , myDescription ); assertEquals(0, stat getCount()); stat addTime(100); assertEquals(1, stat getCount()); assertEquals(100, stat getMinTime()); assertEquals(100, stat getMaxTime()); stat addTime(403); assertEquals(2, stat getCount()); assertEquals(100, stat getMinTime()); assertEquals(403, stat getMaxTime()); stat addTime(50); assertEquals(3, stat getCount()); assertEquals(50, stat getMinTime()); assertEquals(403, stat getMaxTime()); assertEquals(553, stat getTotalTime()); Thread sleep(500); stat addTime(10); assertLastTimeNotStartTime(stat); LOG info( Stat is + stat); stat reset(); assertEquals(0, stat getCount()); assertEquals(0, stat getMinTime()); assertEquals(0, stat getMaxTime()); assertEquals(0, stat getTotalTime()); stat addTime(100); assertEquals(1, stat getCount()); assertEquals(100, stat getMinTime()); assertEquals(100, stat getMaxTime()); assertEquals(100, stat getTotalTime()); } }",1.0,
2522,2522,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\memory\MemoryPropertyTest.,MemoryPropertyTest,"public class MemoryPropertyTest extends TestCase { private static final transient Logger LOG = LoggerFactory getLogger(MemoryPropertyTest class); BrokerService broker; protected void setUp() throws Exception { LOG info( Creating broker ); broker = createBroker( xbean org/apache/activemq/memory/activemq xml ); LOG info( Success ); super setUp(); } protected BrokerService createBroker(String resource) throws Exception { return BrokerFactory createBroker(resource); } protected void tearDown() throws Exception { LOG info( Closing Broker ); if (broker != null) { broker stop(); } LOG info( Broker closed ); } public void testBrokerInitialized() { assertTrue( We should have a broker , broker != null); assertEquals( test-broker , broker getBrokerName()); assertEquals(1024, broker getSystemUsage() getMemoryUsage() getLimit()); assertEquals(34, broker getSystemUsage() getMemoryUsage() getPercentUsageMinDelta()); assertNotNull(broker getSystemUsage() getStoreUsage() getStore()); assertNull(broker getSystemUsage() getTempUsage() getStore()); } }",1.0,
2523,2523,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\memory\buffer\DummyMessage.,DummyMessage,public class DummyMessage extends ActiveMQMessage { private int size; public DummyMessage(int size) { this size = size; } public int getSize() { return size; } public String toString() { return DummyMessage[id= + getMessageId() + size= + size + ] ; } },1.0,
2524,2524,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\memory\buffer\MemoryBufferTestSupport.,MemoryBufferTestSupport,"public abstract class MemoryBufferTestSupport extends TestCase { private static final Logger LOG = LoggerFactory getLogger(MemoryBufferTestSupport class); protected MessageBuffer buffer = createMessageBuffer(); protected MessageQueue qA = buffer createMessageQueue(); protected MessageQueue qB = buffer createMessageQueue(); protected MessageQueue qC = buffer createMessageQueue(); protected int messageCount; protected abstract MessageBuffer createMessageBuffer(); protected void setUp() throws Exception { buffer = createMessageBuffer(); qA = buffer createMessageQueue(); qB = buffer createMessageQueue(); qC = buffer createMessageQueue(); } protected void dump() { LOG info( Dumping current state ); dumpQueue(qA, A ); dumpQueue(qB, B ); dumpQueue(qC, C ); } protected void dumpQueue(MessageQueue queue, String name) { LOG info( + name + = + queue getList()); } protected ActiveMQMessage createMessage(int size) throws Exception { DummyMessage answer = new DummyMessage(size); answer setIntProperty( counter , ++messageCount); answer setJMSMessageID( + messageCount); return answer; } }",1.0,
2525,2525,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\memory\buffer\OrderBasedMemoryBufferTest.,OrderBasedMemoryBufferTest,"public class OrderBasedMemoryBufferTest extends MemoryBufferTestSupport { public void testSizeWorks() throws Exception { qA add(createMessage(10)); qB add(createMessage(10)); qB add(createMessage(10)); qC add(createMessage(10)); dump(); assertEquals( buffer size , 40, buffer getSize()); assertEquals( qA , 10, qA getSize()); assertEquals( qB , 20, qB getSize()); assertEquals( qC , 10, qC getSize()); qC add(createMessage(10)); dump(); assertEquals( buffer size , 40, buffer getSize()); assertEquals( qA , 0, qA getSize()); assertEquals( qB , 20, qB getSize()); assertEquals( qC , 20, qC getSize()); qB add(createMessage(10)); dump(); assertEquals( buffer size , 40, buffer getSize()); assertEquals( qA , 0, qA getSize()); assertEquals( qB , 20, qB getSize()); assertEquals( qC , 20, qC getSize()); qA add(createMessage(10)); dump(); assertEquals( buffer size , 40, buffer getSize()); assertEquals( qA , 10, qA getSize()); assertEquals( qB , 10, qB getSize()); assertEquals( qC , 20, qC getSize()); } protected MessageBuffer createMessageBuffer() { return new OrderBasedMessageBuffer(40); } }",1.0,
2526,2526,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\memory\buffer\SizeBasedMessageBufferTest.,SizeBasedMessageBufferTest,"public class SizeBasedMessageBufferTest extends MemoryBufferTestSupport { public void testSizeWorks() throws Exception { qA add(createMessage(10)); qB add(createMessage(10)); qB add(createMessage(10)); qC add(createMessage(10)); dump(); assertEquals( buffer size , 40, buffer getSize()); assertEquals( qA , 10, qA getSize()); assertEquals( qB , 20, qB getSize()); assertEquals( qC , 10, qC getSize()); qC add(createMessage(10)); dump(); assertEquals( buffer size , 40, buffer getSize()); assertEquals( qA , 10, qA getSize()); assertEquals( qB , 10, qB getSize()); assertEquals( qC , 20, qC getSize()); } protected MessageBuffer createMessageBuffer() { return new SizeBasedMessageBuffer(40); } }",1.0,
2531,2531,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\DuplexNetworkMBeanTest.,DuplexNetworkMBeanTest,"public class DuplexNetworkMBeanTest { protected static final Logger LOG = LoggerFactory getLogger(DuplexNetworkMBeanTest class); protected final int numRestarts = 3; protected BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName( broker ); broker addConnector( tcp return broker; } protected BrokerService createNetworkedBroker() throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName( networkedBroker ); broker addConnector( tcp NetworkConnector networkConnector = broker addNetworkConnector( static (tcp networkConnector setDuplex(true); return broker; } Test public void testMbeanPresenceOnNetworkBrokerRestart() throws Exception { BrokerService broker = createBroker(); try { broker start(); assertEquals(1, countMbeans(broker, connector , 30000)); assertEquals(0, countMbeans(broker, connectionName )); BrokerService networkedBroker = null; for (int i=0; i<numRestarts; i++) { networkedBroker = createNetworkedBroker(); try { networkedBroker start(); assertEquals(1, countMbeans(networkedBroker, networkBridge , 2000)); assertEquals(1, countMbeans(broker, networkBridge , 2000)); assertEquals(1, countMbeans(broker, connectionName )); } finally { networkedBroker stop(); networkedBroker waitUntilStopped(); } assertEquals(0, countMbeans(networkedBroker, stopped )); assertEquals(0, countMbeans(broker, networkBridge )); } assertEquals(0, countMbeans(networkedBroker, networkBridge )); assertEquals(0, countMbeans(networkedBroker, connector )); assertEquals(0, countMbeans(networkedBroker, connectionName )); assertEquals(1, countMbeans(broker, connector )); } finally { broker stop(); broker waitUntilStopped(); } } Test public void testMbeanPresenceOnBrokerRestart() throws Exception { BrokerService networkedBroker = createNetworkedBroker(); try { networkedBroker start(); assertEquals(1, countMbeans(networkedBroker, connector=networkConnectors , 30000)); assertEquals(0, countMbeans(networkedBroker, connectionName )); BrokerService broker = null; for (int i=0; i<numRestarts; i++) { broker = createBroker(); try { broker start(); assertEquals(1, countMbeans(networkedBroker, networkBridge , 5000)); assertEquals( restart number + i, 1, countMbeans(broker, connectionName , 10000)); } finally { broker stop(); broker waitUntilStopped(); } assertEquals(0, countMbeans(broker, stopped )); } assertEquals(1, countMbeans(networkedBroker, connector=networkConnectors )); assertEquals(0, countMbeans(networkedBroker, connectionName )); assertEquals(0, countMbeans(broker, connectionName )); } finally { networkedBroker stop(); networkedBroker waitUntilStopped(); } } private int countMbeans(BrokerService broker, String type) throws Exception { return countMbeans(broker, type, 0); } private int countMbeans(BrokerService broker, String type, int timeout) throws Exception { final long expiryTime = System currentTimeMillis() + timeout; if (!type contains( = )) { type = type + =* ; } final ObjectName beanName = new ObjectName( org apache activemq type=Broker,brokerName= + broker getBrokerName() + , + type + ,* ); Set<ObjectName> mbeans = null; int count = 0; do { if (timeout > 0) { Thread sleep(100); } LOG info( Query name + beanName); mbeans = broker getManagementContext() queryNames(beanName, null); if (mbeans != null) { count = mbeans size(); } else { logAllMbeans(broker); } } while ((mbeans == null || mbeans isEmpty()) && expiryTime > System currentTimeMillis()); if (timeout > 0) { assumeNotNull(mbeans); } return count; } private void logAllMbeans(BrokerService broker) throws MalformedURLException { try { Set< > all = broker getManagementContext() queryNames(null, null); LOG info( Total MBean count= + all size()); for (Object o all) { ObjectInstance bean = (ObjectInstance)o; LOG info(bean getObjectName() toString()); } } catch (Exception ignored) { LOG warn( getMBeanServer ex + ignored); } } }",1.0,
2532,2532,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\DuplexNetworkTest.,DuplexNetworkTest,"public class DuplexNetworkTest extends SimpleNetworkTest { Override protected String getLocalBrokerURI() { return org/apache/activemq/network/duplexLocalBroker xml ; } Override protected BrokerService createRemoteBroker() throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName( remoteBroker ); broker addConnector( tcp return broker; } Test public void testTempQueues() throws Exception { TemporaryQueue temp = localSession createTemporaryQueue(); MessageProducer producer = localSession createProducer(temp); producer send(localSession createTextMessage( test )); Thread sleep(100); assertEquals( Destination not created , 1, remoteBroker getAdminView() getTemporaryQueues() length); temp delete(); assertTrue( Destination not deleted , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 0 == remoteBroker getAdminView() getTemporaryQueues() length; } })); } }",1.0,
2533,2533,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\DynamicallyIncludedDestinationsDuplexNetworkTest.,DynamicallyIncludedDestinationsDuplexNetworkTest,"public class DynamicallyIncludedDestinationsDuplexNetworkTest extends SimpleNetworkTest { private static final int REMOTE BROKER TCP PORT = 61617; Override protected String getLocalBrokerURI() { return org/apache/activemq/network/duplexDynamicIncludedDestLocalBroker xml ; } Override protected BrokerService createRemoteBroker() throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName( remoteBroker ); broker addConnector( tcp return broker; } Override public void testRequestReply() throws Exception { } Test public void testTempQueues() throws Exception { TemporaryQueue temp = localSession createTemporaryQueue(); MessageProducer producer = localSession createProducer(temp); producer send(localSession createTextMessage( test )); Thread sleep(100); assertEquals( Destination not created , 1, remoteBroker getAdminView() getTemporaryQueues() length); temp delete(); Thread sleep(100); assertEquals( Destination not deleted , 0, remoteBroker getAdminView() getTemporaryQueues() length); } Test public void testDynamicallyIncludedDestinationsForDuplex() throws Exception{ TransportConnection bridgeConnection = getDuplexBridgeConnectionFromRemote(); assertNotNull(bridgeConnection); DemandForwardingBridge duplexBridge = getDuplexBridgeFromConnection(bridgeConnection); assertNotNull(duplexBridge); NetworkBridgeConfiguration configuration = getConfigurationFromNetworkBridge(duplexBridge); assertNotNull(configuration); assertFalse( This destinationFilter does not include ONLY the destinations specified in dynamicallyIncludedDestinations , configuration getDestinationFilter() equals(AdvisorySupport CONSUMER ADVISORY TOPIC PREFIX + > )); assertEquals( There are other patterns in the destinationFilter that shouldn t be there , ActiveMQ Advisory Consumer Queue include test foo,ActiveMQ Advisory Consumer Topic include test bar , configuration getDestinationFilter()); } private NetworkBridgeConfiguration getConfigurationFromNetworkBridge(DemandForwardingBridgeSupport duplexBridge) throws NoSuchFieldException, IllegalAccessException { Field f = DemandForwardingBridgeSupport class getDeclaredField( configuration ); f setAccessible(true); NetworkBridgeConfiguration configuration = (NetworkBridgeConfiguration) f get(duplexBridge); return configuration; } private DemandForwardingBridge getDuplexBridgeFromConnection(TransportConnection bridgeConnection) throws NoSuchFieldException, IllegalAccessException { Field f = TransportConnection class getDeclaredField( duplexBridge ); f setAccessible(true); DemandForwardingBridge bridge = (DemandForwardingBridge) f get(bridgeConnection); return bridge; } public TransportConnection getDuplexBridgeConnectionFromRemote() { TransportConnection duplexBridgeConnectionFromRemote = remoteBroker getTransportConnectorByName( tcp getConnections() get(0); return duplexBridgeConnectionFromRemote; } }",1.0,
2534,2534,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\FailoverStaticNetworkTest.,FailoverStaticNetworkTest,"public class FailoverStaticNetworkTest { protected static final Logger LOG = LoggerFactory getLogger(FailoverStaticNetworkTest class); private final static String DESTINATION NAME = testQ ; protected BrokerService brokerA; protected BrokerService brokerA1; protected BrokerService brokerB; protected BrokerService brokerC; private SslContext sslContext; protected BrokerService createBroker(String scheme, String listenPort, String[] networkToPorts) throws Exception { return createBroker(scheme, listenPort, networkToPorts, null); } protected BrokerService createBroker(String scheme, String listenPort, String[] networkToPorts, HashMap<String, String> networkProps) throws Exception { BrokerService broker = new BrokerService(); broker getManagementContext() setCreateConnector(false); broker setSslContext(sslContext); broker setDeleteAllMessagesOnStartup(true); broker setBrokerName( Broker + listenPort); TransportConnector transportConnector = new TransportConnector(); transportConnector setUri(new URI(scheme + List<TransportConnector> transportConnectors = new ArrayList<TransportConnector>(); transportConnectors add(transportConnector); broker setTransportConnectors(transportConnectors); if (networkToPorts != null && networkToPorts length > 0) { StringBuilder builder = new StringBuilder( static (failover ( + scheme + builder append(networkToPorts[0]); for (int i=1;i<networkToPorts length; i++) { builder append( , + scheme + } builder append( ) maxReconnectAttempts=0) useExponentialBackOff=false ); NetworkConnector nc = broker addNetworkConnector(builder toString()); if (networkProps != null) { IntrospectionSupport setProperties(nc, networkProps); } } return broker; } private BrokerService createBroker(String listenPort, String dataDir) throws Exception { BrokerService broker = new BrokerService(); broker setUseJmx(false); broker getManagementContext() setCreateConnector(false); broker setBrokerName( Broker Shared ); TransportConnector connector = new TransportConnector(); connector setUri(new URI( tcp broker addConnector(connector); broker setDataDirectory(dataDir); return broker; } Before public void setUp() throws Exception { KeyManager[] km = SslBrokerServiceTest getKeyManager(); TrustManager[] tm = SslBrokerServiceTest getTrustManager(); sslContext = new SslContext(km, tm, null); } After public void tearDown() throws Exception { brokerB stop(); brokerB waitUntilStopped(); brokerA stop(); brokerA waitUntilStopped(); if (brokerA1 != null) { brokerA1 stop(); brokerA1 waitUntilStopped(); } if (brokerC != null) { brokerC stop(); brokerC waitUntilStopped(); } } Test public void testSendReceiveAfterReconnect() throws Exception { brokerA = createBroker( tcp , 61617 , null); brokerA start(); brokerB = createBroker( tcp , 62617 , new String[]{ 61617 }); brokerB start(); doTestNetworkSendReceive(); LOG info( stopping brokerA ); brokerA stop(); brokerA waitUntilStopped(); LOG info( restarting brokerA ); brokerA = createBroker( tcp , 61617 , null); brokerA start(); doTestNetworkSendReceive(); } Test public void testSendReceiveFailover() throws Exception { brokerA = createBroker( tcp , 61617 , null); brokerA start(); brokerB = createBroker( tcp , 62617 , new String[]{ 61617 , 63617 }); brokerB start(); doTestNetworkSendReceive(); Set<String> bridgeNames = getNetworkBridgeMBeanName(brokerB); assertEquals( only one bridgeName + bridgeNames, 1, bridgeNames size()); LOG info( stopping brokerA ); brokerA stop(); brokerA waitUntilStopped(); LOG info( restarting brokerA ); brokerA = createBroker( tcp , 63617 , null); brokerA start(); doTestNetworkSendReceive(); Set<String> otherBridgeNames = getNetworkBridgeMBeanName(brokerB); assertEquals( only one bridgeName + otherBridgeNames, 1, otherBridgeNames size()); assertTrue( there was an addition , bridgeNames addAll(otherBridgeNames)); } private Set<String> getNetworkBridgeMBeanName(BrokerService brokerB) throws Exception { Set<String> names = new HashSet<String>(); for (ObjectName objectName brokerB getManagementContext() queryNames(null, null)) { if (objectName getKeyProperty( networkBridge ) != null) { names add(objectName getKeyProperty( networkBridge )); } } return names; } Test public void testSendReceiveFailoverDuplex() throws Exception { final Vector<Throwable> errors = new Vector<Throwable>(); final String dataDir = target/data/shared ; brokerA = createBroker( 61617 , dataDir); brokerA start(); final BrokerService slave = createBroker( 63617 , dataDir); brokerA1 = slave; ExecutorService executor = Executors newCachedThreadPool(); executor execute(new Runnable() { Override public void run() { try { slave start(); } catch (Exception e) { e printStackTrace(); errors add(e); } } }); executor shutdown(); HashMap<String, String> networkConnectorProps = new HashMap<String, String>(); networkConnectorProps put( duplex , true ); brokerB = createBroker( tcp , 62617 , new String[]{ 61617 , 63617 }, networkConnectorProps); brokerB start(); doTestNetworkSendReceive(brokerA, brokerB); doTestNetworkSendReceive(brokerB, brokerA); LOG info( stopping brokerA (master shared broker) ); brokerA stop(); brokerA waitUntilStopped(); brokerA1 waitUntilStarted(); doTestNetworkSendReceive(brokerA1, brokerB); doTestNetworkSendReceive(brokerB, brokerA1); assertTrue( No unexpected exceptions + errors, errors isEmpty()); } Test public void testSendReceiveFailoverDuplexWithPIM() throws Exception { final String dataDir = target/data/shared/pim ; brokerA = createBroker( 61617 , dataDir); brokerA start(); final BrokerService slave = createBroker( 63617 , dataDir); brokerA1 = slave; ExecutorService executor = Executors newCachedThreadPool(); executor execute(new Runnable() { Override public void run() { try { slave start(); } catch (Exception e) { e printStackTrace(); } } }); executor shutdown(); HashMap<String, String> networkConnectorProps = new HashMap<String, String>(); networkConnectorProps put( duplex , true ); networkConnectorProps put( networkTTL , 2 ); brokerB = createBroker( tcp , 62617 , new String[]{ 61617 , 63617 }, networkConnectorProps); brokerB start(); assertTrue( all props applied , networkConnectorProps isEmpty()); networkConnectorProps put( duplex , true ); networkConnectorProps put( networkTTL , 2 ); brokerC = createBroker( tcp , 64617 , new String[]{ 61617 , 63617 }, networkConnectorProps); brokerC start(); assertTrue( all props applied a second time , networkConnectorProps isEmpty()); doTestNetworkSendReceive(brokerC, brokerB); doTestNetworkSendReceive(brokerB, brokerC); LOG info( stopping brokerA (master shared broker) ); brokerA stop(); brokerA waitUntilStopped(); doTestNetworkSendReceive(brokerC, brokerB); doTestNetworkSendReceive(brokerB, brokerC); brokerC stop(); brokerC waitUntilStopped(); } Test public void testSendReceive() throws Exception { brokerA = createBroker( tcp , 61617 , null); brokerA start(); brokerB = createBroker( tcp , 62617 , new String[]{ 61617 , 1111 }); brokerB start(); doTestNetworkSendReceive(); } Test public void testSendReceiveSsl() throws Exception { brokerA = createBroker( ssl , 61617 , null); brokerA start(); brokerB = createBroker( ssl , 62617 , new String[]{ 61617 , 1111 }); brokerB start(); doTestNetworkSendReceive(); } Test public void testRepeatedSendReceiveWithMasterSlaveAlternate() throws Exception { doTestRepeatedSendReceiveWithMasterSlaveAlternate(null); } Test public void testRepeatedSendReceiveWithMasterSlaveAlternateDuplex() throws Exception { HashMap<String, String> networkConnectorProps = new HashMap<String, String>(); networkConnectorProps put( duplex , true ); doTestRepeatedSendReceiveWithMasterSlaveAlternate(networkConnectorProps); } public void doTestRepeatedSendReceiveWithMasterSlaveAlternate(HashMap<String, String> networkConnectorProps) throws Exception { brokerB = createBroker( tcp , 62617 , new String[]{ 61610 , 61611 }, networkConnectorProps); brokerB start(); final AtomicBoolean done = new AtomicBoolean(false); ExecutorService executorService = Executors newCachedThreadPool(); executorService execute(new Runnable() { Override public void run() { try { while (!done get()) { brokerA = createBroker( tcp , 61610 , null); brokerA setBrokerName( Pair ); brokerA setBrokerObjectName(new ObjectName(brokerA getManagementContext() getJmxDomainName() + + BrokerName= + JMXSupport encodeObjectNamePart( A ) + , + Type=Broker )); ((KahaDBPersistenceAdapter)brokerA getPersistenceAdapter()) getLocker() setLockAcquireSleepInterval(1000); brokerA start(); brokerA waitUntilStopped(); brokerA1 waitUntilStarted(); } } catch (Exception ignored) { LOG info( A create/start, unexpected + ignored, ignored); } } }); Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return brokerA != null && brokerA waitUntilStarted(); } }); executorService execute(new Runnable() { Override public void run() { try { while (!done get()) { brokerA1 = createBroker( tcp , 61611 , null); brokerA1 setBrokerName( Pair ); brokerA1 setBrokerObjectName(new ObjectName(brokerA getManagementContext() getJmxDomainName() + + BrokerName= + JMXSupport encodeObjectNamePart( A1 ) + , + Type=Broker )); ((KahaDBPersistenceAdapter)brokerA1 getPersistenceAdapter()) getLocker() setLockAcquireSleepInterval(1000); brokerA1 start(); brokerA1 waitUntilStopped(); brokerA waitUntilStarted(); } } catch (Exception ignored) { LOG info( A1 create/start, unexpected + ignored, ignored); } } }); for (int i=0; i<4; i++) { BrokerService currentMaster = (i%2 == 0 brokerA brokerA1); LOG info( iteration + i + , using + currentMaster getBrokerObjectName() getKeyProperty( BrokerName )); currentMaster waitUntilStarted(); doTestNetworkSendReceive(brokerB, currentMaster); LOG info( Stopping + currentMaster getBrokerObjectName() getKeyProperty( BrokerName )); currentMaster stop(); currentMaster waitUntilStopped(); } done set(true); LOG info( all done ); executorService shutdownNow(); } private void doTestNetworkSendReceive() throws Exception, JMSException { doTestNetworkSendReceive(brokerB, brokerA); } private void doTestNetworkSendReceive(final BrokerService to, final BrokerService from) throws Exception, JMSException { LOG info( Creating Consumer on the networked broker + from); SslContext setCurrentSslContext(sslContext); ConnectionFactory consFactory = createConnectionFactory(from); Connection consConn = consFactory createConnection(); consConn start(); Session consSession = consConn createSession(false, Session AUTO ACKNOWLEDGE); ActiveMQDestination destination = (ActiveMQDestination) consSession createQueue(DESTINATION NAME); final MessageConsumer consumer = consSession createConsumer(destination); LOG info( publishing to + to); sendMessageTo(destination, to); boolean gotMessage = Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { Message message = consumer receive(5000); LOG info( from + from getBrokerObjectName() getKeyProperty( BrokerName ) + , received + message); return message != null; } }); try { consConn close(); } catch (JMSException ignored) { } assertTrue( consumer on A got message , gotMessage); } private void sendMessageTo(ActiveMQDestination destination, BrokerService brokerService) throws Exception { ConnectionFactory factory = createConnectionFactory(brokerService); Connection conn = factory createConnection(); conn start(); Session session = conn createSession(false, Session AUTO ACKNOWLEDGE); session createProducer(destination) send(session createTextMessage( Hi )); conn close(); } protected ConnectionFactory createConnectionFactory(final BrokerService broker) throws Exception { String url = broker getTransportConnectors() get(0) getServer() getConnectURI() toString(); ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(url); connectionFactory setOptimizedMessageDispatch(true); connectionFactory setDispatchAsync(false); connectionFactory setUseAsyncSend(false); connectionFactory setOptimizeAcknowledge(false); connectionFactory setAlwaysSyncSend(true); return connectionFactory; } }",1.0,
2536,2536,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\MulticastNetworkTest.,MulticastNetworkTest,public class MulticastNetworkTest extends SimpleNetworkTest { protected String getRemoteBrokerURI() { return org/apache/activemq/network/multicast/remoteBroker xml ; } protected String getLocalBrokerURI() { return org/apache/activemq/network/multicast/localBroker xml ; } Override public void testRequestReply() throws Exception { } },1.0,
2538,2538,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\NetworkConnectionsCleanedupTest.,NetworkConnectionsCleanedupTest,public class NetworkConnectionsCleanedupTest extends TestCase { protected static final int MESSAGE COUNT = 10; private static final Logger LOG = LoggerFactory getLogger(NetworkConnectionsCleanedupTest class); protected AbstractApplicationContext context; protected Connection localConnection; protected Connection remoteConnection; protected BrokerService localBroker; protected BrokerService remoteBroker; protected Session localSession; protected Session remoteSession; protected ActiveMQTopic included; protected ActiveMQTopic excluded; protected String consumerName = durableSubs ; public void skipTestNetworkConnections() throws Exception { String uri = static (tcp List<ActiveMQDestination> list = new ArrayList<ActiveMQDestination>(); for (int i =0;i < 100;i++){ list add(new ActiveMQTopic( FOO +i)); } String bindAddress = tcp BrokerService broker = new BrokerService(); broker setUseJmx(false); broker setPersistent(false); broker addConnector(bindAddress); NetworkConnector network = broker addNetworkConnector(uri); network setDynamicOnly(true); network setStaticallyIncludedDestinations(list); uri = static (tcp network = broker addNetworkConnector(uri); network setDynamicOnly(true); network setStaticallyIncludedDestinations(list); broker setUseShutdownHook(false); broker start(); Thread sleep(1000 * 3600); } },1.0,
2540,2540,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\NetworkDestinationFilterTest.,NetworkDestinationFilterTest,"public class NetworkDestinationFilterTest extends TestCase { public void testFilter() throws Exception { NetworkBridgeConfiguration config = new NetworkBridgeConfiguration(); assertEquals(AdvisorySupport CONSUMER ADVISORY TOPIC PREFIX + > , config getDestinationFilter()); List<ActiveMQDestination> dests = new ArrayList<ActiveMQDestination>(); config setDynamicallyIncludedDestinations(dests); assertEquals(AdvisorySupport CONSUMER ADVISORY TOPIC PREFIX + > , config getDestinationFilter()); dests add(new ActiveMQQueue( TEST > )); dests add(new ActiveMQTopic( TEST > )); dests add(new ActiveMQTempQueue( TEST > )); String prefix = AdvisorySupport CONSUMER ADVISORY TOPIC PREFIX; assertEquals(prefix + Queue TEST >, + prefix + Topic TEST > , config getDestinationFilter()); } }",1.0,
2543,2543,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\NetworkLoadTest.,ForwardingClient,"class ForwardingClient { private final AtomicLong forwardCounter = new AtomicLong(); private final Connection toConnection; private final Connection fromConnection; public ForwardingClient(int from, int to) throws JMSException { toConnection = createConnection(from); Session toSession = toConnection createSession(false, Session AUTO ACKNOWLEDGE); final MessageProducer producer = toSession createProducer(new ActiveMQQueue( Q +to)); producer setDeliveryMode(DeliveryMode NON PERSISTENT); producer setDisableMessageID(true); fromConnection = createConnection(from); Session fromSession = fromConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = fromSession createConsumer(new ActiveMQQueue( Q +from)); consumer setMessageListener(new MessageListener() { public void onMessage(Message msg) { try { producer send(msg); forwardCounter incrementAndGet(); } catch (JMSException e) { } } }); } public void start() throws JMSException { toConnection start(); fromConnection start(); } public void stop() throws JMSException { toConnection stop(); fromConnection stop(); } public void close() throws JMSException { toConnection close(); fromConnection close(); } }",1.0,
2546,2546,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\NetworkRemovesSubscriptionsTest.,DummyMessageListener,class DummyMessageListener implements MessageListener { public void onMessage(Message arg0) { } } Override,1.0,
2547,2547,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\NetworkRestartPlainTest.,NetworkRestartPlainTest,public class NetworkRestartPlainTest extends NetworkRestartTest { Override protected String getLocalBrokerURI() { return org/apache/activemq/network/localBroker-plain xml ; } },1.0,
2549,2549,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\NetworkTestSupport.,NetworkTestSupport,"public class NetworkTestSupport extends BrokerTestSupport { protected ArrayList connections = new ArrayList(); protected TransportConnector connector; protected PersistenceAdapter remotePersistenceAdapter; protected BrokerService remoteBroker; protected SystemUsage remoteMemoryManager; protected TransportConnector remoteConnector; protected boolean useJmx = false; protected void setUp() throws Exception { super setUp(); remotePersistenceAdapter = createRemotePersistenceAdapter(true); remoteBroker = createRemoteBroker(remotePersistenceAdapter); remoteConnector = createRemoteConnector(); remoteBroker addConnector( remoteConnector ); BrokerRegistry getInstance() bind( remotehost , remoteBroker); remoteBroker start(); } protected BrokerService createBroker() throws Exception { BrokerService broker = BrokerFactory createBroker(new URI( broker ()/localhost persistent=false&useJmx=false& )); connector = createConnector(); broker addConnector(connector); broker setUseJmx(useJmx); return broker; } protected TransportConnector createRemoteConnector() throws Exception, IOException, URISyntaxException { return new TransportConnector(TransportFactory bind(new URI(getRemoteURI()))); } protected TransportConnector createConnector() throws Exception, IOException, URISyntaxException { return new TransportConnector(TransportFactory bind(new URI(getLocalURI()))); } protected String getRemoteURI() { return vm } protected String getLocalURI() { return vm } protected PersistenceAdapter createRemotePersistenceAdapter(boolean clean) throws Exception { if (remotePersistenceAdapter == null || clean) { remotePersistenceAdapter = new MemoryPersistenceAdapter(); } return remotePersistenceAdapter; } protected BrokerService createRemoteBroker(PersistenceAdapter persistenceAdapter) throws Exception { BrokerService answer = new BrokerService(); answer setBrokerName( remote ); answer setUseJmx(useJmx); answer setPersistenceAdapter(persistenceAdapter); return answer; } protected StubConnection createConnection() throws Exception { Transport transport = TransportFactory connect(connector getServer() getConnectURI()); StubConnection connection = new StubConnection(transport); connections add(connection); return connection; } protected StubConnection createRemoteConnection() throws Exception { Transport transport = TransportFactory connect(remoteConnector getServer() getConnectURI()); StubConnection connection = new StubConnection(transport); connections add(connection); return connection; } protected Transport createTransport() throws Exception { Transport transport = TransportFactory connect(connector getServer() getConnectURI()); return transport; } protected Transport createRemoteTransport() throws Exception { Transport transport = TransportFactory connect(remoteConnector getServer() getConnectURI()); return transport; } protected void restartRemoteBroker() throws Exception { BrokerRegistry getInstance() unbind( remotehost ); remoteConnector stop(); remoteBroker stop(); remotePersistenceAdapter stop(); remotePersistenceAdapter = createRemotePersistenceAdapter(false); remotePersistenceAdapter start(); remoteBroker = createRemoteBroker(remotePersistenceAdapter); remoteBroker addConnector(getRemoteURI()); remoteBroker start(); BrokerRegistry getInstance() bind( remotehost , remoteBroker); } protected void tearDown() throws Exception { for (Iterator iter = connections iterator(); iter hasNext();) { StubConnection connection = (StubConnection)iter next(); connection stop(); iter remove(); } BrokerRegistry getInstance() unbind( remotehost ); remoteConnector stop(); connector stop(); remoteBroker stop(); remoteBroker waitUntilStopped(); remotePersistenceAdapter stop(); super tearDown(); } }",1.0,
2551,2551,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\SSHTunnelNetworkReconnectTest.,SSHTunnelNetworkReconnectTest,public class SSHTunnelNetworkReconnectTest extends NetworkReconnectTest { private static final transient Logger LOG = LoggerFactory getLogger(SSHTunnelNetworkReconnectTest class); ArrayList processes = new ArrayList(); protected BrokerService createFirstBroker() throws Exception { return BrokerFactory createBroker(new URI( xbean org/apache/activemq/network/ssh-reconnect-broker1 xml )); } protected BrokerService createSecondBroker() throws Exception { return BrokerFactory createBroker(new URI( xbean org/apache/activemq/network/ssh-reconnect-broker2 xml )); } protected void setUp() throws Exception { startProcess( ssh -Nn -L60006 localhost 61616 localhost ); startProcess( ssh -Nn -L60007 localhost 61617 localhost ); super setUp(); } protected void tearDown() throws Exception { super tearDown(); for (Iterator iter = processes iterator(); iter hasNext();) { Process p = (Process)iter next(); p destroy(); } } private void startProcess(String command) throws IOException { final Process process = Runtime getRuntime() exec(command); processes add(process); new Thread( stdout + command) { public void run() { try { InputStream is = process getInputStream(); int c; while ((c = is read()) >= 0) { System out write(c); } } catch (IOException e) { } } } start(); new Thread( stderr + command) { public void run() { try { InputStream is = process getErrorStream(); int c; while ((c = is read()) >= 0) { System err write(c); } } catch (IOException e) { } } } start(); } },1.0,
2554,2554,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\jms\QueueBridgeXBeanTest.,QueueBridgeXBeanTest,public class QueueBridgeXBeanTest extends QueueBridgeTest { protected AbstractApplicationContext createApplicationContext() { return new ClassPathXmlApplicationContext( org/apache/activemq/network/jms/queue-xbean xml ); } },1.0,
2557,2557,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\jms\TopicBridgeStandaloneReconnectTest.,TopicBridgeStandaloneReconnectTest,"public class TopicBridgeStandaloneReconnectTest { private static final Logger LOG = LoggerFactory getLogger(TopicBridgeStandaloneReconnectTest class); private SimpleJmsTopicConnector jmsTopicConnector; private BrokerService localBroker; private BrokerService foreignBroker; private ActiveMQConnectionFactory localConnectionFactory; private ActiveMQConnectionFactory foreignConnectionFactory; private Destination outbound; private Destination inbound; private ArrayList<Connection> connections = new ArrayList<Connection>(); Test public void testSendAndReceiveOverConnectedBridges() throws Exception { startLocalBroker(); startForeignBroker(); jmsTopicConnector start(); final MessageConsumer local = createConsumerForLocalBroker(); final MessageConsumer foreign = createConsumerForForeignBroker(); sendMessageToForeignBroker( to foreign broker ); sendMessageToLocalBroker( to local broker ); assertTrue( Should have received a Message , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { Message message = local receive(100); if (message != null && ((TextMessage) message) getText() equals( to local broker )) { return true; } return false; } })); assertTrue( Should have received a Message , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { Message message = foreign receive(100); if (message != null && ((TextMessage) message) getText() equals( to foreign broker )) { return true; } return false; } })); } Test public void testSendAndReceiveOverBridgeWhenStartedBeforeBrokers() throws Exception { jmsTopicConnector start(); startLocalBroker(); startForeignBroker(); assertTrue( Should have Connected , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return jmsTopicConnector isConnected(); } })); final MessageConsumer local = createConsumerForLocalBroker(); final MessageConsumer foreign = createConsumerForForeignBroker(); sendMessageToForeignBroker( to foreign broker ); sendMessageToLocalBroker( to local broker ); assertTrue( Should have received a Message , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { Message message = local receive(100); if (message != null && ((TextMessage) message) getText() equals( to local broker )) { return true; } return false; } })); assertTrue( Should have received a Message , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { Message message = foreign receive(100); if (message != null && ((TextMessage) message) getText() equals( to foreign broker )) { return true; } return false; } })); } Test public void testSendAndReceiveOverBridgeWithRestart() throws Exception { startLocalBroker(); startForeignBroker(); jmsTopicConnector start(); assertTrue( Should have Connected , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return jmsTopicConnector isConnected(); } })); stopLocalBroker(); stopForeignBroker(); assertTrue( Should have detected connection drop , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return !jmsTopicConnector isConnected(); } })); startLocalBroker(); startForeignBroker(); assertTrue( Should have Re-Connected , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return jmsTopicConnector isConnected(); } })); final MessageConsumer local = createConsumerForLocalBroker(); final MessageConsumer foreign = createConsumerForForeignBroker(); sendMessageToForeignBroker( to foreign broker ); sendMessageToLocalBroker( to local broker ); assertTrue( Should have received a Message , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { Message message = local receive(100); if (message != null && ((TextMessage) message) getText() equals( to local broker )) { return true; } return false; } })); assertTrue( Should have received a Message , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { Message message = foreign receive(100); if (message != null && ((TextMessage) message) getText() equals( to foreign broker )) { return true; } return false; } })); } Before public void setUp() throws Exception { localConnectionFactory = createLocalConnectionFactory(); foreignConnectionFactory = createForeignConnectionFactory(); outbound = new ActiveMQTopic( RECONNECT TEST OUT TOPIC ); inbound = new ActiveMQTopic( RECONNECT TEST IN TOPIC ); jmsTopicConnector = new SimpleJmsTopicConnector(); jmsTopicConnector setOutboundTopicBridges( new OutboundTopicBridge[] {new OutboundTopicBridge( RECONNECT TEST OUT TOPIC )}); jmsTopicConnector setInboundTopicBridges( new InboundTopicBridge[] {new InboundTopicBridge( RECONNECT TEST IN TOPIC )}); jmsTopicConnector setOutboundTopicConnectionFactory( new ActiveMQConnectionFactory( tcp jmsTopicConnector setLocalTopicConnectionFactory( new ActiveMQConnectionFactory( tcp } After public void tearDown() throws Exception { disposeConsumerConnections(); try { jmsTopicConnector stop(); jmsTopicConnector = null; } catch (Exception e) { } try { stopLocalBroker(); } catch (Throwable e) { } try { stopForeignBroker(); } catch (Throwable e) { } } protected void disposeConsumerConnections() { for (Iterator<Connection> iter = connections iterator(); iter hasNext();) { Connection connection = iter next(); try { connection close(); } catch (Throwable ignore) { } } } protected void startLocalBroker() throws Exception { if (localBroker == null) { localBroker = createFirstBroker(); localBroker start(); localBroker waitUntilStarted(); } } protected void stopLocalBroker() throws Exception { if (localBroker != null) { localBroker stop(); localBroker waitUntilStopped(); localBroker = null; } } protected void startForeignBroker() throws Exception { if (foreignBroker == null) { foreignBroker = createSecondBroker(); foreignBroker start(); foreignBroker waitUntilStarted(); } } protected void stopForeignBroker() throws Exception { if (foreignBroker != null) { foreignBroker stop(); foreignBroker waitUntilStopped(); foreignBroker = null; } } protected BrokerService createFirstBroker() throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName( broker1 ); broker setPersistent(false); broker setUseJmx(false); broker addConnector( tcp return broker; } protected BrokerService createSecondBroker() throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName( broker2 ); broker setPersistent(false); broker setUseJmx(false); broker addConnector( tcp return broker; } protected ActiveMQConnectionFactory createLocalConnectionFactory() { return new ActiveMQConnectionFactory( tcp } protected ActiveMQConnectionFactory createForeignConnectionFactory() { return new ActiveMQConnectionFactory( tcp } protected void sendMessageToForeignBroker(String text) throws JMSException { Connection connection = null; try { connection = localConnectionFactory createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(outbound); TextMessage message = session createTextMessage(); message setText(text); producer send(message); } finally { try { connection close(); } catch (Throwable ignore) { } } } protected void sendMessageToLocalBroker(String text) throws JMSException { Connection connection = null; try { connection = foreignConnectionFactory createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(inbound); TextMessage message = session createTextMessage(); message setText(text); producer send(message); } finally { try { connection close(); } catch (Throwable ignore) { } } } protected MessageConsumer createConsumerForLocalBroker() throws JMSException { Connection connection = localConnectionFactory createConnection(); connections add(connection); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); return session createConsumer(inbound); } protected MessageConsumer createConsumerForForeignBroker() throws JMSException { Connection connection = foreignConnectionFactory createConnection(); connections add(connection); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); return session createConsumer(outbound); } }",1.0,
2558,2558,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\jms\TopicBridgeXBeanTest.,TopicBridgeXBeanTest,public class TopicBridgeXBeanTest extends TopicBridgeSpringTest { protected AbstractApplicationContext createApplicationContext() { return new ClassPathXmlApplicationContext( org/apache/activemq/network/jms/topic-config xml ); } },1.0,
2561,2561,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\BrokerInfoData.,BrokerInfoData,public class BrokerInfoData extends DataFileGenerator { protected Object createObject() { BrokerInfo rc = new BrokerInfo(); rc setResponseRequired(false); rc setBrokerName( localhost ); rc setBrokerURL( tcp rc setBrokerId(new BrokerId( ID 1289012830123 )); rc setCommandId((short) 12); rc setResponseRequired(false); return rc; } },1.0,
2564,2564,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\ItStillMarshallsTheSameTest.,ItStillMarshallsTheSameTest,public class ItStillMarshallsTheSameTest extends TestCase { public void testAll() throws Exception { BrokerInfoData assertAllControlFileAreEqual(); } },1.0,
2566,2566,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\WireFormatInfoData.,WireFormatInfoData,public class WireFormatInfoData extends DataFileGenerator { protected Object createObject() throws IOException { WireFormatInfo rc = new WireFormatInfo(); rc setResponseRequired(false); rc setCacheEnabled(true); rc setVersion(1); return rc; } },1.0,
2567,2567,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQBytesMessageTest.,ActiveMQBytesMessageTest,public class ActiveMQBytesMessageTest extends ActiveMQMessageTest { public static final ActiveMQBytesMessageTest SINGLETON = new ActiveMQBytesMessageTest(); public Object createObject() throws Exception { ActiveMQBytesMessage info = new ActiveMQBytesMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQBytesMessage info = (ActiveMQBytesMessage)object; } },1.0,
2568,2568,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQDestinationTestSupport.,ActiveMQDestinationTestSupport,public abstract class ActiveMQDestinationTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQDestination info = (ActiveMQDestination)object; info setPhysicalName( PhysicalName 1 ); } },1.0,
2569,2569,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQMapMessageTest.,ActiveMQMapMessageTest,public class ActiveMQMapMessageTest extends ActiveMQMessageTest { public static final ActiveMQMapMessageTest SINGLETON = new ActiveMQMapMessageTest(); public Object createObject() throws Exception { ActiveMQMapMessage info = new ActiveMQMapMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQMapMessage info = (ActiveMQMapMessage)object; } },1.0,
2570,2570,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQMessageTest.,ActiveMQMessageTest,public class ActiveMQMessageTest extends MessageTestSupport { public static final ActiveMQMessageTest SINGLETON = new ActiveMQMessageTest(); public Object createObject() throws Exception { ActiveMQMessage info = new ActiveMQMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQMessage info = (ActiveMQMessage)object; } },1.0,
2571,2571,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQObjectMessageTest.,ActiveMQObjectMessageTest,public class ActiveMQObjectMessageTest extends ActiveMQMessageTest { public static final ActiveMQObjectMessageTest SINGLETON = new ActiveMQObjectMessageTest(); public Object createObject() throws Exception { ActiveMQObjectMessage info = new ActiveMQObjectMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQObjectMessage info = (ActiveMQObjectMessage)object; } },1.0,
2572,2572,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQQueueTest.,ActiveMQQueueTest,public class ActiveMQQueueTest extends ActiveMQDestinationTestSupport { public static final ActiveMQQueueTest SINGLETON = new ActiveMQQueueTest(); public Object createObject() throws Exception { ActiveMQQueue info = new ActiveMQQueue(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQQueue info = (ActiveMQQueue)object; } },1.0,
2573,2573,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQStreamMessageTest.,ActiveMQStreamMessageTest,public class ActiveMQStreamMessageTest extends ActiveMQMessageTest { public static final ActiveMQStreamMessageTest SINGLETON = new ActiveMQStreamMessageTest(); public Object createObject() throws Exception { ActiveMQStreamMessage info = new ActiveMQStreamMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQStreamMessage info = (ActiveMQStreamMessage)object; } },1.0,
2574,2574,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQTempDestinationTestSupport.,ActiveMQTempDestinationTestSupport,public abstract class ActiveMQTempDestinationTestSupport extends ActiveMQDestinationTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTempDestination info = (ActiveMQTempDestination)object; } },1.0,
2575,2575,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQTempQueueTest.,ActiveMQTempQueueTest,public class ActiveMQTempQueueTest extends ActiveMQTempDestinationTestSupport { public static final ActiveMQTempQueueTest SINGLETON = new ActiveMQTempQueueTest(); public Object createObject() throws Exception { ActiveMQTempQueue info = new ActiveMQTempQueue(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTempQueue info = (ActiveMQTempQueue)object; } },1.0,
2576,2576,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQTempTopicTest.,ActiveMQTempTopicTest,public class ActiveMQTempTopicTest extends ActiveMQTempDestinationTestSupport { public static final ActiveMQTempTopicTest SINGLETON = new ActiveMQTempTopicTest(); public Object createObject() throws Exception { ActiveMQTempTopic info = new ActiveMQTempTopic(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTempTopic info = (ActiveMQTempTopic)object; } },1.0,
2577,2577,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQTextMessageTest.,ActiveMQTextMessageTest,public class ActiveMQTextMessageTest extends ActiveMQMessageTest { public static final ActiveMQTextMessageTest SINGLETON = new ActiveMQTextMessageTest(); public Object createObject() throws Exception { ActiveMQTextMessage info = new ActiveMQTextMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTextMessage info = (ActiveMQTextMessage)object; } },1.0,
2578,2578,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ActiveMQTopicTest.,ActiveMQTopicTest,public class ActiveMQTopicTest extends ActiveMQDestinationTestSupport { public static final ActiveMQTopicTest SINGLETON = new ActiveMQTopicTest(); public Object createObject() throws Exception { ActiveMQTopic info = new ActiveMQTopic(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTopic info = (ActiveMQTopic)object; } },1.0,
2579,2579,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2582,2582,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static final ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl)object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); } },1.0,
2583,2583,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static final ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError)object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2586,2586,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static final ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl)object; info setClose(true); info setConsumerId(createConsumerId( ConsumerId 1 )); info setPrefetch(1); } },1.0,
2587,2587,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static final ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId)object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2589,2589,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static final ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand)object; info setCommand( Command 1 ); } },1.0,
2590,2590,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static final DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse)object; { DataStructure value[] = new DataStructure[2]; for (int i = 0; i < 2; i++) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2591,2591,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static final DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse)object; info setData(createDataStructure( Data 1 )); } },1.0,
2594,2594,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ExceptionResponseTest.,ExceptionResponseTest,public class ExceptionResponseTest extends ResponseTest { public static final ExceptionResponseTest SINGLETON = new ExceptionResponseTest(); public Object createObject() throws Exception { ExceptionResponse info = new ExceptionResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ExceptionResponse info = (ExceptionResponse)object; info setException(createThrowable( Exception 1 )); } },1.0,
2595,2595,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\FlushCommandTest.,FlushCommandTest,public class FlushCommandTest extends BaseCommandTestSupport { public static final FlushCommandTest SINGLETON = new FlushCommandTest(); public Object createObject() throws Exception { FlushCommand info = new FlushCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); FlushCommand info = (FlushCommand)object; } },1.0,
2596,2596,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static final IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse)object; info setResult(1); } },1.0,
2597,2597,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\JournalQueueAckTest.,JournalQueueAckTest,public class JournalQueueAckTest extends DataFileGeneratorTestSupport { public static final JournalQueueAckTest SINGLETON = new JournalQueueAckTest(); public Object createObject() throws Exception { JournalQueueAck info = new JournalQueueAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalQueueAck info = (JournalQueueAck)object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageAck(createMessageAck( MessageAck 2 )); } },1.0,
2598,2598,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static final JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck)object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2601,2601,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\KeepAliveInfoTest.,KeepAliveInfoTest,public class KeepAliveInfoTest extends BaseCommandTestSupport { public static final KeepAliveInfoTest SINGLETON = new KeepAliveInfoTest(); public Object createObject() throws Exception { KeepAliveInfo info = new KeepAliveInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); KeepAliveInfo info = (KeepAliveInfo)object; } },1.0,
2602,2602,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\LastPartialCommandTest.,LastPartialCommandTest,public class LastPartialCommandTest extends PartialCommandTest { public static final LastPartialCommandTest SINGLETON = new LastPartialCommandTest(); public Object createObject() throws Exception { LastPartialCommand info = new LastPartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LastPartialCommand info = (LastPartialCommand)object; } },1.0,
2603,2603,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static final LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId)object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2604,2604,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\MessageAckTest.,MessageAckTest,public class MessageAckTest extends BaseCommandTestSupport { public static final MessageAckTest SINGLETON = new MessageAckTest(); public Object createObject() throws Exception { MessageAck info = new MessageAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageAck info = (MessageAck)object; info setDestination(createActiveMQDestination( Destination 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setConsumerId(createConsumerId( ConsumerId 3 )); info setAckType((byte)1); info setFirstMessageId(createMessageId( FirstMessageId 4 )); info setLastMessageId(createMessageId( LastMessageId 5 )); info setMessageCount(1); } },1.0,
2605,2605,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static final MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification)object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2606,2606,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static final MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch)object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2607,2607,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static final MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId)object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2611,2611,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static final ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId)object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
2614,2614,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static final RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo)object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubscriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
2615,2615,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static final ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand)object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
2618,2618,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static final SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo)object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
2619,2619,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static final ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo)object; } },1.0,
2620,2620,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static final SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo)object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); } },1.0,
2621,2621,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId)object; } },1.0,
2622,2622,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static final TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo)object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte)1); } },1.0,
2624,2624,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\XATransactionIdTest.,XATransactionIdTest,public class XATransactionIdTest extends TransactionIdTestSupport { public static final XATransactionIdTest SINGLETON = new XATransactionIdTest(); public Object createObject() throws Exception { XATransactionId info = new XATransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); XATransactionId info = (XATransactionId)object; info setFormatId(1); info setGlobalTransactionId( GlobalTransactionId 1 getBytes()); info setBranchQualifier( BranchQualifier 2 getBytes()); } },1.0,
2625,2625,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQBytesMessageTest.,ActiveMQBytesMessageTest,public class ActiveMQBytesMessageTest extends ActiveMQMessageTest { public static final ActiveMQBytesMessageTest SINGLETON = new ActiveMQBytesMessageTest(); public Object createObject() throws Exception { ActiveMQBytesMessage info = new ActiveMQBytesMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQBytesMessage info = (ActiveMQBytesMessage)object; } },1.0,
2626,2626,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQDestinationTestSupport.,ActiveMQDestinationTestSupport,public abstract class ActiveMQDestinationTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQDestination info = (ActiveMQDestination)object; info setPhysicalName( PhysicalName 1 ); } },1.0,
2627,2627,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQMapMessageTest.,ActiveMQMapMessageTest,public class ActiveMQMapMessageTest extends ActiveMQMessageTest { public static final ActiveMQMapMessageTest SINGLETON = new ActiveMQMapMessageTest(); public Object createObject() throws Exception { ActiveMQMapMessage info = new ActiveMQMapMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQMapMessage info = (ActiveMQMapMessage)object; } },1.0,
2628,2628,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQMessageTest.,ActiveMQMessageTest,public class ActiveMQMessageTest extends MessageTestSupport { public static final ActiveMQMessageTest SINGLETON = new ActiveMQMessageTest(); public Object createObject() throws Exception { ActiveMQMessage info = new ActiveMQMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQMessage info = (ActiveMQMessage)object; } },1.0,
2629,2629,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQObjectMessageTest.,ActiveMQObjectMessageTest,public class ActiveMQObjectMessageTest extends ActiveMQMessageTest { public static final ActiveMQObjectMessageTest SINGLETON = new ActiveMQObjectMessageTest(); public Object createObject() throws Exception { ActiveMQObjectMessage info = new ActiveMQObjectMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQObjectMessage info = (ActiveMQObjectMessage)object; } },1.0,
2630,2630,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQQueueTest.,ActiveMQQueueTest,public class ActiveMQQueueTest extends ActiveMQDestinationTestSupport { public static final ActiveMQQueueTest SINGLETON = new ActiveMQQueueTest(); public Object createObject() throws Exception { ActiveMQQueue info = new ActiveMQQueue(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQQueue info = (ActiveMQQueue)object; } },1.0,
2631,2631,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQStreamMessageTest.,ActiveMQStreamMessageTest,public class ActiveMQStreamMessageTest extends ActiveMQMessageTest { public static final ActiveMQStreamMessageTest SINGLETON = new ActiveMQStreamMessageTest(); public Object createObject() throws Exception { ActiveMQStreamMessage info = new ActiveMQStreamMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQStreamMessage info = (ActiveMQStreamMessage)object; } },1.0,
2632,2632,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQTempDestinationTestSupport.,ActiveMQTempDestinationTestSupport,public abstract class ActiveMQTempDestinationTestSupport extends ActiveMQDestinationTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTempDestination info = (ActiveMQTempDestination)object; } },1.0,
2633,2633,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQTempQueueTest.,ActiveMQTempQueueTest,public class ActiveMQTempQueueTest extends ActiveMQTempDestinationTestSupport { public static final ActiveMQTempQueueTest SINGLETON = new ActiveMQTempQueueTest(); public Object createObject() throws Exception { ActiveMQTempQueue info = new ActiveMQTempQueue(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTempQueue info = (ActiveMQTempQueue)object; } },1.0,
2634,2634,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQTempTopicTest.,ActiveMQTempTopicTest,public class ActiveMQTempTopicTest extends ActiveMQTempDestinationTestSupport { public static final ActiveMQTempTopicTest SINGLETON = new ActiveMQTempTopicTest(); public Object createObject() throws Exception { ActiveMQTempTopic info = new ActiveMQTempTopic(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTempTopic info = (ActiveMQTempTopic)object; } },1.0,
2635,2635,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQTextMessageTest.,ActiveMQTextMessageTest,public class ActiveMQTextMessageTest extends ActiveMQMessageTest { public static final ActiveMQTextMessageTest SINGLETON = new ActiveMQTextMessageTest(); public Object createObject() throws Exception { ActiveMQTextMessage info = new ActiveMQTextMessage(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTextMessage info = (ActiveMQTextMessage)object; } },1.0,
2636,2636,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ActiveMQTopicTest.,ActiveMQTopicTest,public class ActiveMQTopicTest extends ActiveMQDestinationTestSupport { public static final ActiveMQTopicTest SINGLETON = new ActiveMQTopicTest(); public Object createObject() throws Exception { ActiveMQTopic info = new ActiveMQTopic(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ActiveMQTopic info = (ActiveMQTopic)object; } },1.0,
2637,2637,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2640,2640,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static final ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl) object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); } },1.0,
2641,2641,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static final ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError) object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2644,2644,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static final ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setClose(true); info setConsumerId(createConsumerId( ConsumerId 1 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },1.0,
2645,2645,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static final ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId) object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2647,2647,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static final ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand) object; info setCommand( Command 1 ); } },1.0,
2648,2648,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static final DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse)object; { DataStructure value[] = new DataStructure[2]; for (int i = 0; i < 2; i++) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2649,2649,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static final DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },1.0,
2652,2652,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ExceptionResponseTest.,ExceptionResponseTest,public class ExceptionResponseTest extends ResponseTest { public static final ExceptionResponseTest SINGLETON = new ExceptionResponseTest(); public Object createObject() throws Exception { ExceptionResponse info = new ExceptionResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ExceptionResponse info = (ExceptionResponse) object; info setException(createThrowable( Exception 1 )); } },1.0,
2653,2653,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\FlushCommandTest.,FlushCommandTest,public class FlushCommandTest extends BaseCommandTestSupport { public static final FlushCommandTest SINGLETON = new FlushCommandTest(); public Object createObject() throws Exception { FlushCommand info = new FlushCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); FlushCommand info = (FlushCommand) object; } },1.0,
2654,2654,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static final IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse) object; info setResult(1); } },1.0,
2655,2655,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\JournalQueueAckTest.,JournalQueueAckTest,public class JournalQueueAckTest extends DataFileGeneratorTestSupport { public static final JournalQueueAckTest SINGLETON = new JournalQueueAckTest(); public Object createObject() throws Exception { JournalQueueAck info = new JournalQueueAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalQueueAck info = (JournalQueueAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageAck(createMessageAck( MessageAck 2 )); } },1.0,
2656,2656,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static final JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2659,2659,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\KeepAliveInfoTest.,KeepAliveInfoTest,public class KeepAliveInfoTest extends BaseCommandTestSupport { public static final KeepAliveInfoTest SINGLETON = new KeepAliveInfoTest(); public Object createObject() throws Exception { KeepAliveInfo info = new KeepAliveInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); KeepAliveInfo info = (KeepAliveInfo) object; } },1.0,
2661,2661,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static final LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId) object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2662,2662,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\MessageAckTest.,MessageAckTest,public class MessageAckTest extends BaseCommandTestSupport { public static final MessageAckTest SINGLETON = new MessageAckTest(); public Object createObject() throws Exception { MessageAck info = new MessageAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageAck info = (MessageAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setConsumerId(createConsumerId( ConsumerId 3 )); info setAckType((byte) 1); info setFirstMessageId(createMessageId( FirstMessageId 4 )); info setLastMessageId(createMessageId( LastMessageId 5 )); info setMessageCount(1); } },1.0,
2663,2663,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static final MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2664,2664,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static final MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2665,2665,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static final MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId) object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2666,2666,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static final MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); } },1.0,
2669,2669,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\PartialCommandTest.,PartialCommandTest,public class PartialCommandTest extends DataFileGeneratorTestSupport { public static final PartialCommandTest SINGLETON = new PartialCommandTest(); public Object createObject() throws Exception { PartialCommand info = new PartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); PartialCommand info = (PartialCommand) object; info setCommandId(1); info setData( Data 1 getBytes()); } },1.0,
2670,2670,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static final ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
2673,2673,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static final RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubscriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
2674,2674,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static final ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand) object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
2677,2677,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static final SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo) object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
2678,2678,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static final ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo) object; } },1.0,
2679,2679,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static final SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); } },1.0,
2680,2680,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId) object; } },1.0,
2681,2681,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static final TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },1.0,
2683,2683,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\XATransactionIdTest.,XATransactionIdTest,public class XATransactionIdTest extends TransactionIdTestSupport { public static final XATransactionIdTest SINGLETON = new XATransactionIdTest(); public Object createObject() throws Exception { XATransactionId info = new XATransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); XATransactionId info = (XATransactionId) object; info setFormatId(1); info setGlobalTransactionId( GlobalTransactionId 1 getBytes()); info setBranchQualifier( BranchQualifier 2 getBytes()); } },1.0,
2684,2684,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2687,2687,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static final ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl) object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); } },1.0,
2688,2688,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static final ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError) object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2691,2691,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static final ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setClose(true); info setConsumerId(createConsumerId( ConsumerId 1 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },1.0,
2692,2692,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static final ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId) object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2694,2694,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static final ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand) object; info setCommand( Command 1 ); } },1.0,
2695,2695,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static final DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse)object; { DataStructure value[] = new DataStructure[2]; for (int i = 0; i < 2; i++) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2696,2696,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static final DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },1.0,
2699,2699,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ExceptionResponseTest.,ExceptionResponseTest,public class ExceptionResponseTest extends ResponseTest { public static final ExceptionResponseTest SINGLETON = new ExceptionResponseTest(); public Object createObject() throws Exception { ExceptionResponse info = new ExceptionResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ExceptionResponse info = (ExceptionResponse) object; info setException(createThrowable( Exception 1 )); } },1.0,
2700,2700,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\FlushCommandTest.,FlushCommandTest,public class FlushCommandTest extends BaseCommandTestSupport { public static final FlushCommandTest SINGLETON = new FlushCommandTest(); public Object createObject() throws Exception { FlushCommand info = new FlushCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); FlushCommand info = (FlushCommand) object; } },1.0,
2701,2701,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static final IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse) object; info setResult(1); } },1.0,
2702,2702,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\JournalQueueAckTest.,JournalQueueAckTest,public class JournalQueueAckTest extends DataFileGeneratorTestSupport { public static final JournalQueueAckTest SINGLETON = new JournalQueueAckTest(); public Object createObject() throws Exception { JournalQueueAck info = new JournalQueueAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalQueueAck info = (JournalQueueAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageAck(createMessageAck( MessageAck 2 )); } },1.0,
2703,2703,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static final JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2706,2706,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\KeepAliveInfoTest.,KeepAliveInfoTest,public class KeepAliveInfoTest extends BaseCommandTestSupport { public static final KeepAliveInfoTest SINGLETON = new KeepAliveInfoTest(); public Object createObject() throws Exception { KeepAliveInfo info = new KeepAliveInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); KeepAliveInfo info = (KeepAliveInfo) object; } },1.0,
2708,2708,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static final LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId) object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2709,2709,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\MessageAckTest.,MessageAckTest,public class MessageAckTest extends BaseCommandTestSupport { public static final MessageAckTest SINGLETON = new MessageAckTest(); public Object createObject() throws Exception { MessageAck info = new MessageAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageAck info = (MessageAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setConsumerId(createConsumerId( ConsumerId 3 )); info setAckType((byte) 1); info setFirstMessageId(createMessageId( FirstMessageId 4 )); info setLastMessageId(createMessageId( LastMessageId 5 )); info setMessageCount(1); } },1.0,
2710,2710,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static final MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2711,2711,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static final MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2712,2712,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static final MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId) object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2713,2713,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static final MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },1.0,
2716,2716,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\PartialCommandTest.,PartialCommandTest,public class PartialCommandTest extends DataFileGeneratorTestSupport { public static final PartialCommandTest SINGLETON = new PartialCommandTest(); public Object createObject() throws Exception { PartialCommand info = new PartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); PartialCommand info = (PartialCommand) object; info setCommandId(1); info setData( Data 1 getBytes()); } },1.0,
2717,2717,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ProducerAckTest.,ProducerAckTest,public class ProducerAckTest extends BaseCommandTestSupport { public static final ProducerAckTest SINGLETON = new ProducerAckTest(); public Object createObject() throws Exception { ProducerAck info = new ProducerAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerAck info = (ProducerAck) object; info setProducerId(createProducerId( ProducerId 1 )); info setSize(1); } },1.0,
2718,2718,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static final ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
2721,2721,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static final RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubscriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
2722,2722,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static final ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand) object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
2725,2725,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static final SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo) object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
2726,2726,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static final ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo) object; } },1.0,
2727,2727,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static final SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },1.0,
2728,2728,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId) object; } },1.0,
2729,2729,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static final TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },1.0,
2730,2730,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\XATransactionIdTest.,XATransactionIdTest,public class XATransactionIdTest extends TransactionIdTestSupport { public static final XATransactionIdTest SINGLETON = new XATransactionIdTest(); public Object createObject() throws Exception { XATransactionId info = new XATransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); XATransactionId info = (XATransactionId) object; info setFormatId(1); info setGlobalTransactionId( GlobalTransactionId 1 getBytes()); info setBranchQualifier( BranchQualifier 2 getBytes()); } },1.0,
2731,2731,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2734,2734,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl) object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); } },1.0,
2735,2735,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError) object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2738,2738,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setClose(true); info setConsumerId(createConsumerId( ConsumerId 1 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },1.0,
2739,2739,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId) object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2741,2741,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand) object; info setCommand( Command 1 ); } },1.0,
2742,2742,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse) object; { DataStructure value[] = new DataStructure[2]; for( int i=0; i < 2; i++ ) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2743,2743,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },1.0,
2748,2748,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse) object; info setResult(1); } },1.0,
2750,2750,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2754,2754,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\LastPartialCommandTest.,LastPartialCommandTest,public class LastPartialCommandTest extends PartialCommandTest { public static LastPartialCommandTest SINGLETON = new LastPartialCommandTest(); public Object createObject() throws Exception { LastPartialCommand info = new LastPartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LastPartialCommand info = (LastPartialCommand) object; } },1.0,
2755,2755,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId) object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2756,2756,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\MessageAckTest.,MessageAckTest,public class MessageAckTest extends BaseCommandTestSupport { public static MessageAckTest SINGLETON = new MessageAckTest(); public Object createObject() throws Exception { MessageAck info = new MessageAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageAck info = (MessageAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setConsumerId(createConsumerId( ConsumerId 3 )); info setAckType((byte) 1); info setFirstMessageId(createMessageId( FirstMessageId 4 )); info setLastMessageId(createMessageId( LastMessageId 5 )); info setMessageCount(1); } },1.0,
2757,2757,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2758,2758,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2759,2759,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId) object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2760,2760,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },1.0,
2764,2764,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ProducerAckTest.,ProducerAckTest,public class ProducerAckTest extends BaseCommandTestSupport { public static ProducerAckTest SINGLETON = new ProducerAckTest(); public Object createObject() throws Exception { ProducerAck info = new ProducerAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerAck info = (ProducerAck) object; info setProducerId(createProducerId( ProducerId 1 )); info setSize(1); } },1.0,
2765,2765,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
2768,2768,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubscriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
2769,2769,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand) object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
2772,2772,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo) object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
2773,2773,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo) object; } },1.0,
2774,2774,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },1.0,
2775,2775,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId) object; } },1.0,
2776,2776,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },1.0,
2778,2778,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2781,2781,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl) object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); } },1.0,
2782,2782,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError) object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2785,2785,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setClose(true); info setConsumerId(createConsumerId( ConsumerId 1 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },1.0,
2786,2786,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId) object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2788,2788,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand) object; info setCommand( Command 1 ); } },1.0,
2789,2789,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse) object; { DataStructure value[] = new DataStructure[2]; for( int i=0; i < 2; i++ ) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2790,2790,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },1.0,
2795,2795,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse) object; info setResult(1); } },1.0,
2797,2797,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2801,2801,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\LastPartialCommandTest.,LastPartialCommandTest,public class LastPartialCommandTest extends PartialCommandTest { public static LastPartialCommandTest SINGLETON = new LastPartialCommandTest(); public Object createObject() throws Exception { LastPartialCommand info = new LastPartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LastPartialCommand info = (LastPartialCommand) object; } },1.0,
2802,2802,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId) object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2803,2803,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\MessageAckTest.,MessageAckTest,public class MessageAckTest extends BaseCommandTestSupport { public static MessageAckTest SINGLETON = new MessageAckTest(); public Object createObject() throws Exception { MessageAck info = new MessageAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageAck info = (MessageAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setConsumerId(createConsumerId( ConsumerId 3 )); info setAckType((byte) 1); info setFirstMessageId(createMessageId( FirstMessageId 4 )); info setLastMessageId(createMessageId( LastMessageId 5 )); info setMessageCount(1); } },1.0,
2804,2804,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2805,2805,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2806,2806,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId) object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2807,2807,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },1.0,
2811,2811,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ProducerAckTest.,ProducerAckTest,public class ProducerAckTest extends BaseCommandTestSupport { public static ProducerAckTest SINGLETON = new ProducerAckTest(); public Object createObject() throws Exception { ProducerAck info = new ProducerAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerAck info = (ProducerAck) object; info setProducerId(createProducerId( ProducerId 1 )); info setSize(1); } },1.0,
2812,2812,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
2815,2815,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubscriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
2816,2816,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand) object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
2819,2819,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo) object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
2820,2820,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo) object; } },1.0,
2821,2821,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },1.0,
2822,2822,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId) object; } },1.0,
2823,2823,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },1.0,
2825,2825,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2828,2828,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl) object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); info setConnectedBrokers( ConnectedBrokers 1 ); info setReconnectTo( ReconnectTo 2 ); info setRebalanceConnection(false); } },1.0,
2829,2829,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError) object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2832,2832,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setDestination(createActiveMQDestination( Destination 1 )); info setClose(true); info setConsumerId(createConsumerId( ConsumerId 2 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },1.0,
2833,2833,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId) object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2835,2835,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand) object; info setCommand( Command 1 ); } },1.0,
2836,2836,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse) object; { DataStructure value[] = new DataStructure[2]; for( int i=0; i < 2; i++ ) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2837,2837,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },1.0,
2842,2842,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse) object; info setResult(1); } },1.0,
2844,2844,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2848,2848,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\LastPartialCommandTest.,LastPartialCommandTest,public class LastPartialCommandTest extends PartialCommandTest { public static LastPartialCommandTest SINGLETON = new LastPartialCommandTest(); public Object createObject() throws Exception { LastPartialCommand info = new LastPartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LastPartialCommand info = (LastPartialCommand) object; } },1.0,
2849,2849,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId) object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2850,2850,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\MessageAckTest.,MessageAckTest,public class MessageAckTest extends BaseCommandTestSupport { public static MessageAckTest SINGLETON = new MessageAckTest(); public Object createObject() throws Exception { MessageAck info = new MessageAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageAck info = (MessageAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setConsumerId(createConsumerId( ConsumerId 3 )); info setAckType((byte) 1); info setFirstMessageId(createMessageId( FirstMessageId 4 )); info setLastMessageId(createMessageId( LastMessageId 5 )); info setMessageCount(1); } },1.0,
2851,2851,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2852,2852,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2853,2853,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId) object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2854,2854,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },1.0,
2858,2858,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ProducerAckTest.,ProducerAckTest,public class ProducerAckTest extends BaseCommandTestSupport { public static ProducerAckTest SINGLETON = new ProducerAckTest(); public Object createObject() throws Exception { ProducerAck info = new ProducerAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerAck info = (ProducerAck) object; info setProducerId(createProducerId( ProducerId 1 )); info setSize(1); } },1.0,
2859,2859,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
2862,2862,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubcriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
2863,2863,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand) object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
2866,2866,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo) object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
2867,2867,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo) object; } },1.0,
2868,2868,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubcriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },1.0,
2869,2869,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId) object; } },1.0,
2870,2870,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },1.0,
2872,2872,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2875,2875,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl) object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); info setConnectedBrokers( ConnectedBrokers 1 ); info setReconnectTo( ReconnectTo 2 ); info setRebalanceConnection(false); } },1.0,
2876,2876,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError) object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2879,2879,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setDestination(createActiveMQDestination( Destination 1 )); info setClose(true); info setConsumerId(createConsumerId( ConsumerId 2 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },1.0,
2880,2880,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId) object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2882,2882,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand) object; info setCommand( Command 1 ); } },1.0,
2883,2883,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse) object; { DataStructure value[] = new DataStructure[2]; for( int i=0; i < 2; i++ ) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2884,2884,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },1.0,
2889,2889,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse) object; info setResult(1); } },1.0,
2891,2891,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2895,2895,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\LastPartialCommandTest.,LastPartialCommandTest,public class LastPartialCommandTest extends PartialCommandTest { public static LastPartialCommandTest SINGLETON = new LastPartialCommandTest(); public Object createObject() throws Exception { LastPartialCommand info = new LastPartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LastPartialCommand info = (LastPartialCommand) object; } },1.0,
2896,2896,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId) object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2898,2898,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2899,2899,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2900,2900,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId) object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2901,2901,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },1.0,
2905,2905,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ProducerAckTest.,ProducerAckTest,public class ProducerAckTest extends BaseCommandTestSupport { public static ProducerAckTest SINGLETON = new ProducerAckTest(); public Object createObject() throws Exception { ProducerAck info = new ProducerAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerAck info = (ProducerAck) object; info setProducerId(createProducerId( ProducerId 1 )); info setSize(1); } },1.0,
2906,2906,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
2909,2909,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubcriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
2910,2910,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand) object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
2913,2913,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo) object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
2914,2914,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo) object; } },1.0,
2915,2915,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubcriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },1.0,
2916,2916,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId) object; } },1.0,
2917,2917,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },1.0,
2919,2919,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2922,2922,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl) object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); info setConnectedBrokers( ConnectedBrokers 1 ); info setReconnectTo( ReconnectTo 2 ); info setRebalanceConnection(false); info setToken( Token 3 getBytes()); } },1.0,
2923,2923,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError) object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2926,2926,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setDestination(createActiveMQDestination( Destination 1 )); info setClose(true); info setConsumerId(createConsumerId( ConsumerId 2 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },1.0,
2927,2927,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId) object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2929,2929,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand) object; info setCommand( Command 1 ); } },1.0,
2930,2930,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse) object; { DataStructure value[] = new DataStructure[2]; for( int i=0; i < 2; i++ ) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2931,2931,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },1.0,
2936,2936,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse) object; info setResult(1); } },1.0,
2938,2938,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2942,2942,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\LastPartialCommandTest.,LastPartialCommandTest,public class LastPartialCommandTest extends PartialCommandTest { public static LastPartialCommandTest SINGLETON = new LastPartialCommandTest(); public Object createObject() throws Exception { LastPartialCommand info = new LastPartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LastPartialCommand info = (LastPartialCommand) object; } },1.0,
2943,2943,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId) object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2945,2945,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2946,2946,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2947,2947,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId) object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2948,2948,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },1.0,
2952,2952,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ProducerAckTest.,ProducerAckTest,public class ProducerAckTest extends BaseCommandTestSupport { public static ProducerAckTest SINGLETON = new ProducerAckTest(); public Object createObject() throws Exception { ProducerAck info = new ProducerAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerAck info = (ProducerAck) object; info setProducerId(createProducerId( ProducerId 1 )); info setSize(1); } },1.0,
2953,2953,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
2956,2956,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubcriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
2957,2957,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand) object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
2960,2960,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo) object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
2961,2961,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo) object; } },1.0,
2962,2962,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubcriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },1.0,
2963,2963,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId) object; } },1.0,
2964,2964,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },1.0,
2966,2966,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\BaseCommandTestSupport.,BaseCommandTestSupport,public abstract class BaseCommandTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); BaseCommand info = (BaseCommand)object; info setCommandId(1); info setResponseRequired(true); } },1.0,
2969,2969,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ConnectionControlTest.,ConnectionControlTest,public class ConnectionControlTest extends BaseCommandTestSupport { public static ConnectionControlTest SINGLETON = new ConnectionControlTest(); public Object createObject() throws Exception { ConnectionControl info = new ConnectionControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionControl info = (ConnectionControl) object; info setClose(true); info setExit(false); info setFaultTolerant(true); info setResume(false); info setSuspend(true); info setConnectedBrokers( ConnectedBrokers 1 ); info setReconnectTo( ReconnectTo 2 ); info setRebalanceConnection(false); info setToken( Token 3 getBytes()); } },1.0,
2970,2970,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ConnectionErrorTest.,ConnectionErrorTest,public class ConnectionErrorTest extends BaseCommandTestSupport { public static ConnectionErrorTest SINGLETON = new ConnectionErrorTest(); public Object createObject() throws Exception { ConnectionError info = new ConnectionError(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConnectionError info = (ConnectionError) object; info setException(createThrowable( Exception 1 )); info setConnectionId(createConnectionId( ConnectionId 2 )); } },1.0,
2973,2973,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setDestination(createActiveMQDestination( Destination 1 )); info setClose(true); info setConsumerId(createConsumerId( ConsumerId 2 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },1.0,
2974,2974,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ConsumerIdTest.,ConsumerIdTest,public class ConsumerIdTest extends DataFileGeneratorTestSupport { public static ConsumerIdTest SINGLETON = new ConsumerIdTest(); public Object createObject() throws Exception { ConsumerId info = new ConsumerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerId info = (ConsumerId) object; info setConnectionId( ConnectionId 1 ); info setSessionId(1); info setValue(2); } },1.0,
2976,2976,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ControlCommandTest.,ControlCommandTest,public class ControlCommandTest extends BaseCommandTestSupport { public static ControlCommandTest SINGLETON = new ControlCommandTest(); public Object createObject() throws Exception { ControlCommand info = new ControlCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ControlCommand info = (ControlCommand) object; info setCommand( Command 1 ); } },1.0,
2977,2977,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\DataArrayResponseTest.,DataArrayResponseTest,public class DataArrayResponseTest extends ResponseTest { public static DataArrayResponseTest SINGLETON = new DataArrayResponseTest(); public Object createObject() throws Exception { DataArrayResponse info = new DataArrayResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataArrayResponse info = (DataArrayResponse) object; { DataStructure value[] = new DataStructure[2]; for( int i=0; i < 2; i++ ) { value[i] = createDataStructure( Data 1 ); } info setData(value); } } },1.0,
2978,2978,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },1.0,
2983,2983,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\IntegerResponseTest.,IntegerResponseTest,public class IntegerResponseTest extends ResponseTest { public static IntegerResponseTest SINGLETON = new IntegerResponseTest(); public Object createObject() throws Exception { IntegerResponse info = new IntegerResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); IntegerResponse info = (IntegerResponse) object; info setResult(1); } },1.0,
2985,2985,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\JournalTopicAckTest.,JournalTopicAckTest,public class JournalTopicAckTest extends DataFileGeneratorTestSupport { public static JournalTopicAckTest SINGLETON = new JournalTopicAckTest(); public Object createObject() throws Exception { JournalTopicAck info = new JournalTopicAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); JournalTopicAck info = (JournalTopicAck) object; info setDestination(createActiveMQDestination( Destination 1 )); info setMessageId(createMessageId( MessageId 2 )); info setMessageSequenceId(1); info setSubscritionName( SubscritionName 3 ); info setClientId( ClientId 4 ); info setTransactionId(createTransactionId( TransactionId 5 )); } },1.0,
2989,2989,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\LastPartialCommandTest.,LastPartialCommandTest,public class LastPartialCommandTest extends PartialCommandTest { public static LastPartialCommandTest SINGLETON = new LastPartialCommandTest(); public Object createObject() throws Exception { LastPartialCommand info = new LastPartialCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LastPartialCommand info = (LastPartialCommand) object; } },1.0,
2990,2990,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\LocalTransactionIdTest.,LocalTransactionIdTest,public class LocalTransactionIdTest extends TransactionIdTestSupport { public static LocalTransactionIdTest SINGLETON = new LocalTransactionIdTest(); public Object createObject() throws Exception { LocalTransactionId info = new LocalTransactionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); LocalTransactionId info = (LocalTransactionId) object; info setValue(1); info setConnectionId(createConnectionId( ConnectionId 1 )); } },1.0,
2992,2992,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },1.0,
2993,2993,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },1.0,
2994,2994,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\MessageIdTest.,MessageIdTest,public class MessageIdTest extends DataFileGeneratorTestSupport { public static MessageIdTest SINGLETON = new MessageIdTest(); public Object createObject() throws Exception { MessageId info = new MessageId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageId info = (MessageId) object; info setProducerId(createProducerId( ProducerId 1 )); info setProducerSequenceId(1); info setBrokerSequenceId(2); } },1.0,
2995,2995,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },1.0,
2999,2999,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ProducerAckTest.,ProducerAckTest,public class ProducerAckTest extends BaseCommandTestSupport { public static ProducerAckTest SINGLETON = new ProducerAckTest(); public Object createObject() throws Exception { ProducerAck info = new ProducerAck(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerAck info = (ProducerAck) object; info setProducerId(createProducerId( ProducerId 1 )); info setSize(1); } },1.0,
3000,3000,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ProducerIdTest.,ProducerIdTest,public class ProducerIdTest extends DataFileGeneratorTestSupport { public static ProducerIdTest SINGLETON = new ProducerIdTest(); public Object createObject() throws Exception { ProducerId info = new ProducerId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ProducerId info = (ProducerId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); info setSessionId(2); } },1.0,
3003,3003,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\RemoveSubscriptionInfoTest.,RemoveSubscriptionInfoTest,public class RemoveSubscriptionInfoTest extends BaseCommandTestSupport { public static RemoveSubscriptionInfoTest SINGLETON = new RemoveSubscriptionInfoTest(); public Object createObject() throws Exception { RemoveSubscriptionInfo info = new RemoveSubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); RemoveSubscriptionInfo info = (RemoveSubscriptionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setSubcriptionName( SubcriptionName 2 ); info setClientId( ClientId 3 ); } },1.0,
3004,3004,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ReplayCommandTest.,ReplayCommandTest,public class ReplayCommandTest extends BaseCommandTestSupport { public static ReplayCommandTest SINGLETON = new ReplayCommandTest(); public Object createObject() throws Exception { ReplayCommand info = new ReplayCommand(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ReplayCommand info = (ReplayCommand) object; info setFirstNakNumber(1); info setLastNakNumber(2); } },1.0,
3007,3007,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\SessionInfoTest.,SessionInfoTest,public class SessionInfoTest extends BaseCommandTestSupport { public static SessionInfoTest SINGLETON = new SessionInfoTest(); public Object createObject() throws Exception { SessionInfo info = new SessionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionInfo info = (SessionInfo) object; info setSessionId(createSessionId( SessionId 1 )); } },1.0,
3008,3008,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\ShutdownInfoTest.,ShutdownInfoTest,public class ShutdownInfoTest extends BaseCommandTestSupport { public static ShutdownInfoTest SINGLETON = new ShutdownInfoTest(); public Object createObject() throws Exception { ShutdownInfo info = new ShutdownInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ShutdownInfo info = (ShutdownInfo) object; } },1.0,
3009,3009,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubcriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },1.0,
3010,3010,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\TransactionIdTestSupport.,TransactionIdTestSupport,public abstract class TransactionIdTestSupport extends DataFileGeneratorTestSupport { protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionId info = (TransactionId) object; } },1.0,
3011,3011,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },1.0,
3013,3013,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\AMQStoreDurableTopicTest.,AMQStoreDurableTopicTest,"public class AMQStoreDurableTopicTest extends SimpleDurableTopicTest { protected void configureBroker(BrokerService answer,String uri) throws Exception { File dataFileDir = new File( target/test-amq-data/perfTest/amqdb ); dataFileDir mkdirs(); answer setDeleteAllMessagesOnStartup(true); AMQPersistenceAdapter adaptor = new AMQPersistenceAdapter(); answer setDataDirectoryFile(dataFileDir); answer setPersistenceAdapter(adaptor); answer addConnector(uri); } protected void setUp() throws Exception { numberofProducers=1; numberOfConsumers=1; super setUp(); } }",1.0,
3014,3014,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\AMQStoreQueueTest.,AMQStoreQueueTest,"public class AMQStoreQueueTest extends SimpleQueueTest { protected void configureBroker(BrokerService answer,String uri) throws Exception { File dataFileDir = new File( target/test-amq-data/perfTest/amq ); AMQPersistenceAdapter adaptor = new AMQPersistenceAdapter(); adaptor setDirectory(dataFileDir); answer setPersistenceAdapter(adaptor); answer addConnector(uri); answer setDeleteAllMessagesOnStartup(true); } }",1.0,
3017,3017,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\InactiveQueueTest.,InactiveQueueTest,"public class InactiveQueueTest extends TestCase { private static final transient Logger LOG = LoggerFactory getLogger(InactiveQueueTest class); private static final int MESSAGE COUNT = 0; private static final String DEFAULT PASSWORD = ; private static final String USERNAME = testuser ; private static final String CLIENTID = mytestclient ; private static final String QUEUE NAME = testevent ; private static final int DELIVERY MODE = javax jms DeliveryMode PERSISTENT; private static final int DELIVERY PRIORITY = javax jms Message DEFAULT PRIORITY; ActiveMQConnectionFactory connectionFactory; BrokerService broker; private Connection connection; private MessageProducer publisher; private TopicSubscriber subscriber; private Destination destination; private Session session; protected void setUp() throws Exception { super setUp(); broker = new BrokerService(); broker addConnector(ActiveMQConnectionFactory DEFAULT BROKER BIND URL); broker start(); connectionFactory = new ActiveMQConnectionFactory(ActiveMQConnectionFactory DEFAULT BROKER URL); connectionFactory setUseAsyncSend(true); } protected void tearDown() throws Exception { super tearDown(); broker stop(); } public void testNoSubscribers() throws Exception { connection = connectionFactory createConnection(USERNAME, DEFAULT PASSWORD); assertNotNull(connection); connection start(); session = connection createSession(false, javax jms Session AUTO ACKNOWLEDGE); assertNotNull(session); destination = session createQueue(QUEUE NAME); assertNotNull(destination); publisher = session createProducer(destination); assertNotNull(publisher); MapMessage msg = session createMapMessage(); assertNotNull(msg); msg setString( key1 , value1 ); int loop; for (loop = 0; loop < MESSAGE COUNT; loop++) { msg setInt( key2 , loop); publisher send(msg, DELIVERY MODE, DELIVERY PRIORITY, Message DEFAULT TIME TO LIVE); if (loop % 500 == 0) { LOG debug( Sent + loop + messages ); } } Thread sleep(1000000); this assertEquals(loop, MESSAGE COUNT); publisher close(); session close(); connection stop(); connection stop(); } }",1.0,
3018,3018,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\JournalKahaDurableTopicTest.,JournalKahaDurableTopicTest,"public class JournalKahaDurableTopicTest extends SimpleDurableTopicTest { Override protected void setUp() throws Exception { super setUp(); sampleCount = 3; sampleInternal = 10000; } protected void configureBroker(BrokerService answer,String uri) throws Exception { File dataFileDir = new File( target/test-amq-data/perfTest ); File journalDir = new File(dataFileDir, journal ) getCanonicalFile(); JournalImpl journal = new JournalImpl(journalDir, 3, 1024 * 1024 * 20); KahaPersistenceAdapter kahaAdaptor = new KahaPersistenceAdapter(); JournalPersistenceAdapter journalAdaptor = new JournalPersistenceAdapter(journal, kahaAdaptor, answer getTaskRunnerFactory()); journalAdaptor setMaxCheckpointWorkers(1); answer setPersistenceAdapter(journalAdaptor); answer addConnector(uri); answer setDeleteAllMessagesOnStartup(true); } }",1.0,
3019,3019,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\JournalKahaQueueTest.,JournalKahaQueueTest,"public class JournalKahaQueueTest extends SimpleQueueTest { protected void configureBroker(BrokerService answer,String uri) throws Exception { File dataFileDir = new File( target/test-amq-data/perfTest ); File journalDir = new File(dataFileDir, journal ) getCanonicalFile(); JournalImpl journal = new JournalImpl(journalDir, 3, 1024 * 1024 * 20); KahaPersistenceAdapter kahaAdaptor = new KahaPersistenceAdapter(); JournalPersistenceAdapter journalAdaptor = new JournalPersistenceAdapter(journal, kahaAdaptor, answer getTaskRunnerFactory()); journalAdaptor setMaxCheckpointWorkers(1); answer setPersistenceAdapter(journalAdaptor); answer addConnector(uri); answer setDeleteAllMessagesOnStartup(true); } }",1.0,
3020,3020,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\KahaDBDurableTopicTest.,KahaDBDurableTopicTest,"public class KahaDBDurableTopicTest extends SimpleDurableTopicTest { Override protected void setUp() throws Exception { super setUp(); } Override protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception { ActiveMQConnectionFactory result = new ActiveMQConnectionFactory(uri); return result; } Override protected void configureBroker(BrokerService answer,String uri) throws Exception { answer setDeleteAllMessagesOnStartup(true); answer addConnector(uri); answer setUseShutdownHook(false); answer setEnableStatistics(false); } }",1.0,
3021,3021,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\KahaDBDurableTransactedTopicTest.,KahaDBDurableTransactedTopicTest,"public class KahaDBDurableTransactedTopicTest extends KahaDBDurableTopicTest { Override protected void setUp() throws Exception { super setUp(); } Override protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException { PerfProducer result= new PerfProducer(fac, dest, payload, true); result setDeliveryMode(DeliveryMode PERSISTENT); return result; } }",1.0,
3022,3022,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\KahaDBQueueTest.,KahaDBQueueTest,"public class KahaDBQueueTest extends SimpleQueueTest { Override protected void setUp() throws Exception { this numberOfDestinations = 25; this numberofProducers = 1; super setUp(); } Override protected void configureBroker(BrokerService answer,String uri) throws Exception { File dataFileDir = new File( target/test-amq-data/perfTest/kahadb ); File archiveDir = new File(dataFileDir, archive ); KahaDBPersistenceAdapter kaha = new KahaDBPersistenceAdapter(); kaha setDirectory(dataFileDir); kaha setDirectoryArchive(archiveDir); kaha setArchiveDataLogs(false); kaha setEnableJournalDiskSyncs(true); kaha setEnableIndexWriteAsync(true); kaha setIndexCacheSize(10000); answer setPersistenceAdapter(kaha); answer addConnector(uri); answer setDeleteAllMessagesOnStartup(true); } }",1.0,
3023,3023,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\KahaDurableTopicTest.,KahaDurableTopicTest,"public class KahaDurableTopicTest extends SimpleDurableTopicTest { Override protected void configureBroker(BrokerService answer,String uri) throws Exception { KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter(); answer setPersistenceAdapter(adaptor); answer setDeleteAllMessagesOnStartup(true); answer addConnector(uri); } }",1.0,
3024,3024,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\KahaQueueTest.,KahaQueueTest,public class KahaQueueTest extends SimpleQueueTest { final static String config = org/apache/activemq/perf/kahadbBroker xml ; protected BrokerService createBroker(String uri) throws Exception { Resource resource = new ClassPathResource(config); BrokerFactoryBean brokerFactory = new BrokerFactoryBean(resource); resource = new ClassPathResource(config); brokerFactory = new BrokerFactoryBean(resource); brokerFactory afterPropertiesSet(); return brokerFactory getBroker(); } },1.0,
3026,3026,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\NetworkedSyncTest.,NetworkedSyncTest,"public class NetworkedSyncTest extends TestCase { public static final int MESSAGE COUNT = 10000; public final static String config = org/apache/activemq/perf/networkSync xml ; public final static String broker1URL = tcp public final static String broker2URL = tcp private final String networkConnectorURL = static private static final Logger LOG = LoggerFactory getLogger(NetworkedSyncTest class); BrokerService broker1 = null; BrokerService broker2 = null; NetworkConnector connector = null; public NetworkedSyncTest(String name) { super(name); LOG info( Testcase started ); } public static void main(String args[]) { TestRunner run(NetworkedSyncTest class); } protected void setUp() throws Exception { LOG info( setUp() called ); ClassPathXmlApplicationContext context1 = null; BrokerFactoryBean brokerFactory = new BrokerFactoryBean(new ClassPathResource(config)); try { Thread currentThread() setContextClassLoader( NetworkedSyncTest class getClassLoader()); context1 = new ClassPathXmlApplicationContext(config); broker1 = (BrokerService) context1 getBean( broker1 ); if (!broker1 isStarted()) { LOG info( Broker broker1 not yet started Kicking it off now ); broker1 start(); } else { LOG info( Broker broker1 already started Not kicking it off a second time ); broker1 waitUntilStopped(); } } catch (Exception e) { LOG error( Error + e getMessage()); throw e; } try { Thread currentThread() setContextClassLoader( NetworkedSyncTest class getClassLoader()); context1 = new ClassPathXmlApplicationContext(config); broker2 = (BrokerService) context1 getBean( broker2 ); if (!broker2 isStarted()) { LOG info( Broker broker2 not yet started Kicking it off now ); broker2 start(); } else { LOG info( Broker broker2 already started Not kicking it off a second time ); broker2 waitUntilStopped(); } } catch (Exception e) { LOG error( Error + e getMessage()); throw e; } connector = broker1 addNetworkConnector(networkConnectorURL); connector setBrokerName(broker1 getBrokerName()); connector setDuplex(true); connector start(); LOG info( Network connector created ); } protected void tearDown() throws Exception { LOG info( tearDown() called ); if (broker1 != null && broker1 isStarted()) { LOG info( Broker1 still running, stopping it now ); broker1 stop(); } else { LOG info( Broker1 not running, nothing to shutdown ); } if (broker2 != null && broker2 isStarted()) { LOG info( Broker2 still running, stopping it now ); broker2 stop(); } else { LOG info( Broker2 not running, nothing to shutdown ); } } public void testMessageExchange() throws Exception { LOG info( testMessageExchange() called ); long start = System currentTimeMillis(); Thread producer = new Thread(new Producer()); Thread consumer = new Thread(new Consumer()); consumer start(); Thread sleep(2000); producer start(); producer join(); consumer join(); long end = System currentTimeMillis(); System out println( Duration +(end-start)); } }",1.0,
3030,3030,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\PerfConsumer.,PerfConsumer,"public class PerfConsumer implements MessageListener { private static final Logger LOG = LoggerFactory getLogger(PerfConsumer class); protected Connection connection; protected MessageConsumer consumer; protected long sleepDuration; protected long initialDelay; protected boolean enableAudit = false; protected ActiveMQMessageAudit audit = new ActiveMQMessageAudit(16 * 1024,20); protected boolean firstMessage =true; protected String lastMsgId; protected PerfRate rate = new PerfRate(); public PerfConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException { connection = fac createConnection(); connection setClientID(consumerName); Session s = connection createSession(false, Session AUTO ACKNOWLEDGE); if (dest instanceof Topic && consumerName != null && consumerName length() > 0) { consumer = s createDurableSubscriber((Topic)dest, consumerName); } else { consumer = s createConsumer(dest); } consumer setMessageListener(this); } public PerfConsumer(ConnectionFactory fac, Destination dest) throws JMSException { this(fac, dest, null); } public void start() throws JMSException { connection start(); rate reset(); } public void stop() throws JMSException { connection stop(); } public void shutDown() throws JMSException { connection close(); } public PerfRate getRate() { return rate; } public void onMessage(Message msg) { if (firstMessage) { firstMessage=false; if (getInitialDelay() > 0) { try { Thread sleep(getInitialDelay()); } catch (InterruptedException e) { } } } rate increment(); try { if (enableAudit && !this audit isInOrder(msg getJMSMessageID())) { LOG error( Message out of order!! + msg getJMSMessageID() + LAST = + lastMsgId); } if (enableAudit && this audit isDuplicate(msg)){ LOG error( Duplicate Message! + msg); } lastMsgId=msg getJMSMessageID(); } catch (JMSException e1) { e1 printStackTrace(); } try { if (sleepDuration != 0) { Thread sleep(sleepDuration); } } catch (InterruptedException e) { } } public synchronized long getSleepDuration() { return sleepDuration; } public synchronized void setSleepDuration(long sleepDuration) { this sleepDuration = sleepDuration; } public boolean isEnableAudit() { return enableAudit; } public void setEnableAudit(boolean doAudit) { this enableAudit = doAudit; } public long getInitialDelay() { return initialDelay; } public void setInitialDelay(long initialDelay) { this initialDelay = initialDelay; } }",1.0,
3031,3031,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\PerfProducer.,PerfProducer,"public class PerfProducer implements Runnable { protected Connection connection; protected MessageProducer producer; protected PerfRate rate = new PerfRate(); private final byte[] payload; private Session session; private final CountDownLatch stopped = new CountDownLatch(1); private boolean running; private final boolean transacted; private int sleep = 0; public PerfProducer(ConnectionFactory fac, Destination dest, byte[] payload) throws JMSException { this(fac, dest, payload, false); } public PerfProducer(ConnectionFactory fac, Destination dest, byte[] payload, boolean transacted) throws JMSException { connection = fac createConnection(); this transacted = transacted; if (transacted) { session = connection createSession(true, Session SESSION TRANSACTED); } else { session = connection createSession(false, Session AUTO ACKNOWLEDGE); } producer = session createProducer(dest); this payload = payload; } public void setDeliveryMode(int mode) throws JMSException { producer setDeliveryMode(mode); } public void setTimeToLive(int ttl) throws JMSException { producer setTimeToLive(ttl); } public void shutDown() throws JMSException { connection close(); } public PerfRate getRate() { return rate; } public synchronized void start() throws JMSException { if (!running) { rate reset(); running = true; connection start(); Thread t = new Thread(this); t setName( Producer ); t start(); } } public void stop() throws JMSException, InterruptedException { synchronized (this) { running = false; } stopped await(1, TimeUnit SECONDS); connection stop(); } public synchronized boolean isRunning() { return running; } public void run() { try { while (isRunning()) { BytesMessage msg; msg = session createBytesMessage(); msg writeBytes(payload); producer send(msg); if(this transacted) { this session commit(); } rate increment(); if (sleep > 0) { Thread sleep(sleep); } } } catch (Throwable e) { e printStackTrace(); } finally { stopped countDown(); } } public int getSleep() { return sleep; } public void setSleep(int sleep) { this sleep = sleep; } }",1.0,
3032,3032,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\PerfRate.,PerfRate,public class PerfRate { protected int totalCount; protected int count; protected long startTime = System currentTimeMillis(); public int getCount() { return totalCount; } public synchronized void increment() { totalCount++; count++; } public int getRate() { long endTime = System currentTimeMillis(); long totalTime = endTime - startTime; int result = (int)((count * 1000) / totalTime); return result; } public synchronized PerfRate cloneAndReset() { PerfRate rc = new PerfRate(); rc totalCount = totalCount; rc count = count; rc startTime = startTime; count = 0; startTime = System currentTimeMillis(); return rc; } public void reset() { count = 0; startTime = System currentTimeMillis(); } public int getTotalCount() { return totalCount; } public void setTotalCount(int totalCount) { this totalCount = totalCount; } },1.0,
3033,3033,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\QueueConnectionMemoryTest.,QueueConnectionMemoryTest,"public class QueueConnectionMemoryTest extends SimpleQueueTest { private static final transient Logger LOG = LoggerFactory getLogger(QueueConnectionMemoryTest class); protected void setUp() throws Exception { } protected void tearDown() throws Exception { } protected Destination createDestination(Session s, String destinationName) throws JMSException { return s createTemporaryQueue(); } public void testPerformance() throws JMSException { } protected void configureBroker(BrokerService answer,String uri) throws Exception { KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter(); answer setPersistenceAdapter(adaptor); answer addConnector(uri); answer setDeleteAllMessagesOnStartup(true); } public void testMemory() throws Exception { if (broker == null) { broker = createBroker(bindAddress); } factory = createConnectionFactory(bindAddress); Connection con = factory createConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = createDestination(session, destinationName); con close(); for (int i = 0; i < 3; i++) { Connection connection = factory createConnection(); connection start(); Session s = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination dest = s createTemporaryQueue(); MessageConsumer consumer = s createConsumer(dest); LOG debug( Created connnection + i); Thread sleep(1000); } Thread sleep(Integer MAX VALUE); } }",1.0,
3034,3034,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\RunBroker.,RunBroker,"public class RunBroker { public static void main(String arg[]) { try { KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter(); File dataFileDir = new File( target/test-amq-data/perfTest/kahadb ); IOHelper deleteChildren(dataFileDir); File archiveDir = new File(dataFileDir, archive ); kahaDB setDirectory(dataFileDir); kahaDB setIndexWriteBatchSize(1000); kahaDB setIndexCacheSize(10000); BrokerService broker = new BrokerService(); broker setUseJmx(false); broker setPersistenceAdapter(kahaDB); broker setDeleteAllMessagesOnStartup(true); broker addConnector( tcp broker start(); System err println( Running ); Thread sleep(Long MAX VALUE); } catch (Throwable e) { e printStackTrace(); } } }",1.0,
3035,3035,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\SimpleDurableTopicNetworkTest.,SimpleDurableTopicNetworkTest,"public class SimpleDurableTopicNetworkTest extends SimpleNetworkTest { protected void setUp() throws Exception { numberofProducers=1; numberOfConsumers=1; sampleCount=1000; playloadSize = 1024; super setUp(); } protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte payload[]) throws JMSException { PerfProducer pp = new PerfProducer(fac, dest, payload); pp setDeliveryMode(DeliveryMode PERSISTENT); return pp; } protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException { return new PerfConsumer(fac, dest, subs + number); } }",1.0,
3039,3039,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\SimpleNonPersistentQueueTest.,SimpleNonPersistentQueueTest,"public class SimpleNonPersistentQueueTest extends SimpleQueueTest { Override protected void setUp() throws Exception { numberOfConsumers = 1; numberofProducers = 1; super setUp(); } Override protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException { PerfProducer pp = new PerfProducer(fac, dest, payload); pp setDeliveryMode(DeliveryMode NON PERSISTENT); return pp; } Override protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException { PerfConsumer result = new PerfConsumer(fac, dest); result setInitialDelay(10*1000); boolean enableAudit = numberOfConsumers <= 1; System err println( Enable Audit = + enableAudit); result setEnableAudit(enableAudit); return result; } Override protected void configureBroker(BrokerService answer,String uri) throws Exception { final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>(); final PolicyEntry entry = new PolicyEntry(); entry setQueue( > ); entry setMemoryLimit(1024 * 1024 * 1); entry setOptimizedDispatch(true); entry setLazyDispatch(true); policyEntries add(entry); final PolicyMap policyMap = new PolicyMap(); policyMap setPolicyEntries(policyEntries); answer setDestinationPolicy(policyMap); super configureBroker(answer, uri); } }",1.0,
3040,3040,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\SimpleNonPersistentTopicTest.,SimpleNonPersistentTopicTest,"public class SimpleNonPersistentTopicTest extends SimpleTopicTest { protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException { PerfProducer pp = new PerfProducer(fac, dest, payload); pp setDeliveryMode(DeliveryMode NON PERSISTENT); return pp; } }",1.0,
3041,3041,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\SimpleQueueTest.,SimpleQueueTest,"public class SimpleQueueTest extends SimpleTopicTest { protected long initialConsumerDelay = 0; protected long consumerSleep = 0; Override protected Destination createDestination(Session s, String destinationName) throws JMSException { return s createQueue(destinationName); } Override protected void setUp() throws Exception { numberOfConsumers = 1; super setUp(); } Override protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException { PerfConsumer consumer = new PerfConsumer(fac, dest); consumer setInitialDelay(this initialConsumerDelay); consumer setSleepDuration(this consumerSleep); boolean enableAudit = numberOfConsumers <= 1; System err println( Enable Audit = + enableAudit); consumer setEnableAudit(enableAudit); return consumer; } }",1.0,
3042,3042,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\SimpleTopicTest.,SimpleTopicTest,"public class SimpleTopicTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(SimpleTopicTest class); protected BrokerService broker; protected String clientURI= tcp protected String bindAddress= tcp protected PerfProducer[] producers; protected PerfConsumer[] consumers; protected String destinationName = getClass() getName(); protected int sampleCount = 20; protected long sampleInternal = 10000; protected int numberOfDestinations=1; protected int numberOfConsumers = 1; protected int numberofProducers = 1; protected int totalNumberOfProducers; protected int totalNumberOfConsumers; protected int playloadSize = 12; protected byte[] array; protected ConnectionFactory factory; protected void setUp() throws Exception { if (broker == null) { broker = createBroker(bindAddress); } factory = createConnectionFactory(clientURI); Connection con = factory createConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); LOG info( Running + numberofProducers + producer(s) and + numberOfConsumers + consumer(s) per + numberOfDestinations + Destination(s) ); totalNumberOfConsumers=numberOfConsumers*numberOfDestinations; totalNumberOfProducers=numberofProducers*numberOfDestinations; producers = new PerfProducer[totalNumberOfProducers]; consumers = new PerfConsumer[totalNumberOfConsumers]; int consumerCount = 0; int producerCount = 0; for (int k =0; k < numberOfDestinations;k++) { Destination destination = createDestination(session, destinationName+ +k); LOG info( Testing against destination + destination); for (int i = 0; i < numberOfConsumers; i++) { consumers[consumerCount] = createConsumer(factory, destination, consumerCount); consumerCount++; } for (int i = 0; i < numberofProducers; i++) { array = new byte[playloadSize]; for (int j = i; j < array length; j++) { array[j] = (byte)j; } producers[producerCount] = createProducer(factory, destination, i, array); producerCount++; } } con close(); super setUp(); } protected void tearDown() throws Exception { super tearDown(); for (int i = 0; i < numberOfConsumers; i++) { consumers[i] shutDown(); } for (int i = 0; i < numberofProducers; i++) { producers[i] shutDown(); } if (broker != null) { broker stop(); broker = null; } } protected Destination createDestination(Session s, String destinationName) throws JMSException { return s createTopic(destinationName); } protected BrokerService createBroker(String uri) throws Exception { BrokerService answer = new BrokerService(); configureBroker(answer,uri); answer start(); return answer; } protected PerfProducer createProducer(ConnectionFactory fac, Destination dest, int number, byte[] payload) throws JMSException { return new PerfProducer(fac, dest, payload); } protected PerfConsumer createConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException { return new PerfConsumer(fac, dest); } protected void configureBroker(BrokerService answer,String uri) throws Exception { answer setDeleteAllMessagesOnStartup(true); answer addConnector(uri); answer setUseShutdownHook(false); } protected ActiveMQConnectionFactory createConnectionFactory(String uri) throws Exception { return new ActiveMQConnectionFactory(uri); } public void testPerformance() throws JMSException, InterruptedException { for (int i = 0; i < totalNumberOfConsumers; i++) { consumers[i] start(); } for (int i = 0; i < totalNumberOfProducers; i++) { producers[i] start(); } LOG info( Sampling performance + sampleCount + times at a + sampleInternal + ms interval ); for (int i = 0; i < sampleCount; i++) { Thread sleep(sampleInternal); dumpProducerRate(); dumpConsumerRate(); } for (int i = 0; i < totalNumberOfProducers; i++) { producers[i] stop(); } for (int i = 0; i < totalNumberOfConsumers; i++) { consumers[i] stop(); } } protected void dumpProducerRate() { int totalRate = 0; int totalCount = 0; String producerString= Producers ; for (int i = 0; i < producers length; i++) { PerfRate rate = producers[i] getRate() cloneAndReset(); totalRate += rate getRate(); totalCount += rate getTotalCount(); producerString+= [ +i+ +rate getRate() + , +rate getTotalCount()+ ]; ; } if (producers != null && producers length > 0) { int avgRate = totalRate / producers length; System out println( Avg producer rate = + avgRate + msg/sec | Total rate = + totalRate + , sent = + totalCount); } } protected void dumpConsumerRate() { int totalRate = 0; int totalCount = 0; String consumerString= Consumers ; for (int i = 0; i < consumers length; i++) { PerfRate rate = consumers[i] getRate() cloneAndReset(); totalRate += rate getRate(); totalCount += rate getTotalCount(); consumerString+= [ +i+ +rate getRate() + , +rate getTotalCount()+ ]; ; } if (consumers != null && consumers length > 0) { int avgRate = totalRate / consumers length; System out println( Avg consumer rate = + avgRate + msg/sec | Total rate = + totalRate + , received = + totalCount); System out println(consumerString); } } }",1.0,
3043,3043,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\SlowConsumer.,SlowConsumer,"public class SlowConsumer extends PerfConsumer { private static final transient Logger LOG = LoggerFactory getLogger(SlowConsumer class); public SlowConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException { super(fac, dest, consumerName); } public SlowConsumer(ConnectionFactory fac, Destination dest) throws JMSException { super(fac, dest, null); } public void onMessage(Message msg) { super onMessage(msg); LOG debug( GOT A MSG + msg); try { Thread sleep(10000); } catch (InterruptedException e) { e printStackTrace(); } } }",1.0,
3045,3045,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\SlowDurableConsumerTopicTest.,SlowDurableConsumerTopicTest,"public class SlowDurableConsumerTopicTest extends SlowConsumerTopicTest { protected PerfConsumer[] slowConsumers; protected int numberOfSlowConsumers = 1; protected PerfConsumer createSlowConsumer(ConnectionFactory fac, Destination dest, int number) throws JMSException { return new SlowConsumer(fac, dest, durableSlowConsumer + number); } }",1.0,
3046,3046,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\TemporaryTopicMemoryAllocationTest.,TemporaryTopicMemoryAllocationTest,public class TemporaryTopicMemoryAllocationTest extends MemoryAllocationTest { public TemporaryTopicMemoryAllocationTest() { super(); } protected Destination getDestination(Session session) throws JMSException { return session createTemporaryTopic(); } },1.0,
3048,3048,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\pool\JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest.,JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest,public class JmsSendReceiveTwoConnectionsWithSenderUsingPoolTest extends JmsTopicSendReceiveWithTwoConnectionsTest { protected PooledConnectionFactory senderConnectionFactory = new PooledConnectionFactory( vm protected Connection createSendConnection() throws Exception { return senderConnectionFactory createConnection(); } protected void setUp() throws Exception { verbose = true; super setUp(); } protected void tearDown() throws Exception { super tearDown(); senderConnectionFactory stop(); } },1.0,
3051,3051,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\proxy\ProxyTestSupport.,ProxyTestSupport,public class ProxyTestSupport extends BrokerTestSupport { protected ArrayList<StubConnection> connections = new ArrayList<StubConnection>(); protected TransportConnector connector; protected PersistenceAdapter remotePersistenceAdapter; protected BrokerService remoteBroker; protected SystemUsage remoteMemoryManager; protected TransportConnector remoteConnector; private ProxyConnector proxyConnector; private ProxyConnector remoteProxyConnector; protected BrokerService createBroker() throws Exception { BrokerService service = new BrokerService(); service setBrokerName( broker1 ); service setPersistent(false); service setUseJmx(false); connector = service addConnector(getLocalURI()); proxyConnector = new ProxyConnector(); proxyConnector setName( proxy ); proxyConnector setBind(new URI(getLocalProxyURI())); proxyConnector setRemote(new URI( fanout static service addProxyConnector(proxyConnector); return service; } protected BrokerService createRemoteBroker() throws Exception { BrokerService service = new BrokerService(); service setBrokerName( broker2 ); service setPersistent(false); service setUseJmx(false); remoteConnector = service addConnector(getRemoteURI()); remoteProxyConnector = new ProxyConnector(); remoteProxyConnector setName( remoteProxy ); remoteProxyConnector setBind(new URI(getRemoteProxyURI())); remoteProxyConnector setRemote(new URI( fanout static service addProxyConnector(remoteProxyConnector); return service; } protected void setUp() throws Exception { super setUp(); remoteBroker = createRemoteBroker(); remoteBroker start(); } protected void tearDown() throws Exception { for (Iterator<StubConnection> iter = connections iterator(); iter hasNext();) { StubConnection connection = iter next(); connection stop(); iter remove(); } remoteBroker stop(); super tearDown(); } protected String getRemoteURI() { return tcp } protected String getLocalURI() { return tcp } protected String getRemoteProxyURI() { return tcp } protected String getLocalProxyURI() { return tcp } protected StubConnection createConnection() throws Exception { Transport transport = TransportFactory connect(connector getServer() getConnectURI()); StubConnection connection = new StubConnection(transport); connections add(connection); return connection; } protected StubConnection createRemoteConnection() throws Exception { Transport transport = TransportFactory connect(remoteConnector getServer() getConnectURI()); StubConnection connection = new StubConnection(transport); connections add(connection); return connection; } protected StubConnection createProxyConnection() throws Exception { Transport transport = TransportFactory connect(proxyConnector getServer() getConnectURI()); StubConnection connection = new StubConnection(transport); connections add(connection); return connection; } protected StubConnection createRemoteProxyConnection() throws Exception { Transport transport = TransportFactory connect(remoteProxyConnector getServer() getConnectURI()); StubConnection connection = new StubConnection(transport); connections add(connection); return connection; } },1.0,
3052,3052,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\AbstractCachedLDAPAuthorizationMapLegacyTest.,AbstractCachedLDAPAuthorizationMapLegacyTest,"public abstract class AbstractCachedLDAPAuthorizationMapLegacyTest extends AbstractLdapTestUnit { static final GroupPrincipal GUESTS = new GroupPrincipal( guests ); static final GroupPrincipal USERS = new GroupPrincipal( users ); static final GroupPrincipal ADMINS = new GroupPrincipal( admins ); protected LdapConnection connection; protected SimpleCachedLDAPAuthorizationMap map; Before public void setup() throws Exception { connection = getLdapConnection(); map = createMap(); } After public void cleanup() throws Exception { if (connection != null) { try { connection close(); } catch (IOException e) { } } if (map != null) { map destroy(); } } Test public void testQuery() throws Exception { map query(); Set< > readACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + readACLs, 2, readACLs size()); assertTrue( Contains admin group , readACLs contains(ADMINS)); assertTrue( Contains users group , readACLs contains(USERS)); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( FAILED )); assertEquals( set size + failedACLs, 0, failedACLs size()); } Test public void testSynchronousUpdate() throws Exception { map setRefreshInterval(1); map query(); Set< > readACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + readACLs, 2, readACLs size()); assertTrue( Contains admin group , readACLs contains(ADMINS)); assertTrue( Contains users group , readACLs contains(USERS)); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( FAILED )); assertEquals( set size + failedACLs, 0, failedACLs size()); LdifReader reader = new LdifReader(getRemoveLdif()); for (LdifEntry entry reader) { connection delete(entry getDn()); } failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 0, failedACLs size()); assertNull(map getTempDestinationReadACLs()); assertNull(map getTempDestinationWriteACLs()); assertNull(map getTempDestinationAdminACLs()); } Test public void testWildcards() throws Exception { map query(); Set< > fooACLs = map getReadACLs(new ActiveMQQueue( FOO 1 )); assertEquals( set size + fooACLs, 2, fooACLs size()); assertTrue( Contains admin group , fooACLs contains(ADMINS)); assertTrue( Contains users group , fooACLs contains(USERS)); Set< > barACLs = map getReadACLs(new ActiveMQQueue( BAR 2 )); assertEquals( set size + barACLs, 2, barACLs size()); assertTrue( Contains admin group , barACLs contains(ADMINS)); assertTrue( Contains users group , barACLs contains(USERS)); } Test public void testAdvisory() throws Exception { map query(); Set< > readACLs = map getReadACLs(new ActiveMQTopic( ActiveMQ Advisory Connection )); assertEquals( set size + readACLs, 2, readACLs size()); assertTrue( Contains admin group , readACLs contains(ADMINS)); assertTrue( Contains users group , readACLs contains(USERS)); } Test public void testTemporary() throws Exception { map query(); Thread sleep(1000); Set< > readACLs = map getTempDestinationReadACLs(); assertEquals( set size + readACLs, 2, readACLs size()); assertTrue( Contains admin group , readACLs contains(ADMINS)); assertTrue( Contains users group , readACLs contains(USERS)); } Test public void testAdd() throws Exception { map query(); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( FAILED )); assertEquals( set size + failedACLs, 0, failedACLs size()); LdifReader reader = new LdifReader(getAddLdif()); for (LdifEntry entry reader) { connection add(entry getEntry()); } Thread sleep(2000); failedACLs = map getReadACLs(new ActiveMQQueue( FAILED )); assertEquals( set size + failedACLs, 2, failedACLs size()); } Test public void testRemove() throws Exception { map query(); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 2, failedACLs size()); LdifReader reader = new LdifReader(getRemoveLdif()); for (LdifEntry entry reader) { connection delete(entry getDn()); } Thread sleep(2000); failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 0, failedACLs size()); assertTrue(map getTempDestinationReadACLs() == null || map getTempDestinationReadACLs() isEmpty()); assertTrue(map getTempDestinationWriteACLs() == null || map getTempDestinationWriteACLs() isEmpty()); assertTrue(map getTempDestinationAdminACLs() == null || map getTempDestinationAdminACLs() isEmpty()); } Test public void testRenameDestination() throws Exception { map query(); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 2, failedACLs size()); connection rename(new Dn( cn=TEST FOO, + getQueueBaseDn()), new Rdn( cn=TEST BAR )); Thread sleep(2000); failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 0, failedACLs size()); failedACLs = map getReadACLs(new ActiveMQQueue( TEST BAR )); assertEquals( set size + failedACLs, 2, failedACLs size()); } Test public void testRenamePermission() throws Exception { map query(); connection delete(new Dn( cn=Read,cn=TEST FOO, + getQueueBaseDn())); Thread sleep(2000); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 0, failedACLs size()); failedACLs = map getWriteACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 2, failedACLs size()); connection rename(new Dn( cn=Write,cn=TEST FOO, + getQueueBaseDn()), new Rdn( cn=Read )); Thread sleep(2000); failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 2, failedACLs size()); failedACLs = map getWriteACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 0, failedACLs size()); } Test public void testChange() throws Exception { map query(); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 2, failedACLs size()); Dn dn = new Dn( cn=read,cn=TEST FOO, + getQueueBaseDn()); ModifyRequest request = new ModifyRequestImpl(); request setName(dn); setupModifyRequest(request); connection modify(request); Thread sleep(2000); failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 1, failedACLs size()); request = new ModifyRequestImpl(); request setName(new Dn( cn=TEST FOO, + getQueueBaseDn())); request add( description , This is a description! In fact, it is a very good description ); connection modify(request); Thread sleep(2000); failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 1, failedACLs size()); } Test public void testRestartAsync() throws Exception { testRestart(false); } Test public void testRestartSync() throws Exception { testRestart(true); } public void testRestart(final boolean sync) throws Exception { if (sync) { map setRefreshInterval(1000); } map query(); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( FAILED )); assertEquals( set size + failedACLs, 0, failedACLs size()); failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 2, failedACLs size()); getLdapServer() stop(); Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { if (sync) { return !map isContextAlive(); } else { return map context == null; } } }); failedACLs = map getReadACLs(new ActiveMQQueue( TEST FOO )); assertEquals( set size + failedACLs, 2, failedACLs size()); getLdapServer() start(); Thread sleep(2000); connection = getLdapConnection(); LdifReader reader = new LdifReader(getAddLdif()); for (LdifEntry entry reader) { connection add(entry getEntry()); } Thread sleep(2000); failedACLs = map getReadACLs(new ActiveMQQueue( FAILED )); assertEquals( set size + failedACLs, 2, failedACLs size()); } protected SimpleCachedLDAPAuthorizationMap createMap() { return new SimpleCachedLDAPAuthorizationMap(); } protected abstract InputStream getAddLdif(); protected abstract InputStream getRemoveLdif(); protected void setupModifyRequest(ModifyRequest request) { request remove( member , cn=users ); } protected abstract String getQueueBaseDn(); protected abstract LdapConnection getLdapConnection() throws Exception; public static void cleanAndLoad(String deleteFromDn, String ldifResourcePath, String ldapHost, int ldapPort, String ldapUser, String ldapPass, DirContext context) throws Exception { List<String> dns = new LinkedList<String>(); dns add(deleteFromDn); while (!dns isEmpty()) { String name = dns get(dns size() - 1); Context currentContext = (Context) context lookup(name); NamingEnumeration<NameClassPair> namingEnum = currentContext list( ); if (namingEnum hasMore()) { while (namingEnum hasMore()) { dns add(namingEnum next() getNameInNamespace()); } } else { context unbind(name); dns remove(dns size() - 1); } } final SecurityManager securityManager = new SecurityManager() { public void checkPermission(java security Permission permission) { if (permission getName() contains( exitVM )) { throw new SecurityException( System exit calls disabled for the moment ); } } }; System setSecurityManager(securityManager); File file = new File(AbstractCachedLDAPAuthorizationMapLegacyTest class getClassLoader() getResource( ldifResourcePath) toURI()); Class< > clazz = Class forName( LDAPModify ); Method mainMethod = clazz getMethod( main , String[] class); try { mainMethod invoke(null, new Object[] { new String[] { -v , -h , ldapHost, -p , String valueOf(ldapPort), -D , ldapUser, -w , ldapPass, -a , -f , file toString()}}); } catch (InvocationTargetException e) { if (!(e getTargetException() instanceof SecurityException)) { throw e; } } System setSecurityManager(null); } }",1.0,
3053,3053,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\AbstractCachedLDAPAuthorizationModuleTest.,AbstractCachedLDAPAuthorizationModuleTest,"public abstract class AbstractCachedLDAPAuthorizationModuleTest extends AbstractCachedLDAPAuthorizationMapLegacyTest { static final UserPrincipal JDOE = new UserPrincipal( jdoe ); Test public void testQuery() throws Exception { map query(); Set< > readACLs = map getReadACLs(new ActiveMQQueue( TEST FOOBAR )); assertEquals( set size + readACLs, 3, readACLs size()); assertTrue( Contains admin group , readACLs contains(ADMINS)); assertTrue( Contains users group , readACLs contains(USERS)); assertTrue( Contains jdoe user , readACLs contains(JDOE)); Set< > failedACLs = map getReadACLs(new ActiveMQQueue( FAILED )); assertEquals( set size + failedACLs, 0, failedACLs size()); super testQuery(); } Override protected final void setupModifyRequest(ModifyRequest request) { request remove( member , getMemberAttributeValueForModifyRequest()); } protected abstract String getMemberAttributeValueForModifyRequest(); Override protected SimpleCachedLDAPAuthorizationMap createMap() { SimpleCachedLDAPAuthorizationMap map = super createMap(); map setLegacyGroupMapping(false); return map; } }",1.0,
3055,3055,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\CachedLDAPAuthorizationModuleLegacyOpenLDAPTest.,CachedLDAPAuthorizationModuleLegacyOpenLDAPTest,"public class CachedLDAPAuthorizationModuleLegacyOpenLDAPTest extends AbstractCachedLDAPAuthorizationMapLegacyTest { protected static final String LDAP USER = cn=Manager,dc=apache,dc=org ; protected static final String LDAP PASS = password ; protected static final String LDAP HOST = localhost ; protected static final int LDAP PORT = 389; Before Override public void setup() throws Exception { super setup(); cleanAndLoad( dc=apache,dc=org , org/apache/activemq/security/activemq-openldap-legacy ldif , LDAP HOST, LDAP PORT, LDAP USER, LDAP PASS, map open()); } Test public void testRenameDestination() throws Exception { } protected SimpleCachedLDAPAuthorizationMap createMap() { SimpleCachedLDAPAuthorizationMap newMap = super createMap(); newMap setConnectionURL( ldap newMap setConnectionUsername(LDAP USER); newMap setConnectionPassword(LDAP PASS); newMap setRefreshInterval(10); newMap setQueueSearchBase( ou=Queue,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ); newMap setTopicSearchBase( ou=Topic,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ); newMap setTempSearchBase( ou=Temp,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ); return newMap; } protected InputStream getAddLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-openldap-legacy-add ldif ); } protected InputStream getRemoveLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-openldap-legacy-delete ldif ); } protected String getQueueBaseDn() { return ou=Queue,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ; } protected LdapConnection getLdapConnection() throws LdapException, IOException { LdapConnection connection = new LdapNetworkConnection(LDAP HOST, LDAP PORT); connection bind(new Dn(LDAP USER), LDAP PASS); return connection; } }",1.0,
3056,3056,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\CachedLDAPAuthorizationModuleLegacyTest.,CachedLDAPAuthorizationModuleLegacyTest,"public class CachedLDAPAuthorizationModuleLegacyTest extends AbstractCachedLDAPAuthorizationMapLegacyTest { Override protected SimpleCachedLDAPAuthorizationMap createMap() { SimpleCachedLDAPAuthorizationMap map = super createMap(); map setConnectionURL( ldap return map; } protected InputStream getAddLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-apacheds-legacy-add ldif ); } protected InputStream getRemoveLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-apacheds-legacy-delete ldif ); } protected String getQueueBaseDn() { return ou=Queue,ou=Destination,ou=ActiveMQ,ou=system ; } protected LdapConnection getLdapConnection() throws LdapException, IOException { LdapConnection connection = new LdapNetworkConnection( localhost , getLdapServer() getPort()); connection bind(new Dn( uid=admin,ou=system ), secret ); return connection; } }",1.0,
3057,3057,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\CachedLDAPAuthorizationModuleOpenLDAPTest.,CachedLDAPAuthorizationModuleOpenLDAPTest,"public class CachedLDAPAuthorizationModuleOpenLDAPTest extends AbstractCachedLDAPAuthorizationModuleTest { protected static final String LDAP USER = cn=Manager,dc=apache,dc=org ; protected static final String LDAP PASS = password ; protected static final String LDAP HOST = localhost ; protected static final int LDAP PORT = 389; Before Override public void setup() throws Exception { super setup(); cleanAndLoad( dc=apache,dc=org , org/apache/activemq/security/activemq-openldap ldif , LDAP HOST, LDAP PORT, LDAP USER, LDAP PASS, map open()); } Test public void testRenameDestination() throws Exception { } Override protected SimpleCachedLDAPAuthorizationMap createMap() { SimpleCachedLDAPAuthorizationMap newMap = super createMap(); newMap setConnectionURL( ldap newMap setConnectionUsername(LDAP USER); newMap setConnectionPassword(LDAP PASS); newMap setRefreshInterval(10); newMap setQueueSearchBase( ou=Queue,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ); newMap setTopicSearchBase( ou=Topic,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ); newMap setTempSearchBase( ou=Temp,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ); return newMap; } Override protected InputStream getAddLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-openldap-add ldif ); } Override protected InputStream getRemoveLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-openldap-delete ldif ); } Override protected String getMemberAttributeValueForModifyRequest() { return cn=users,ou=Group,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ; } Override protected String getQueueBaseDn() { return ou=Queue,ou=Destination,ou=ActiveMQ,dc=activemq,dc=apache,dc=org ; } Override protected LdapConnection getLdapConnection() throws LdapException, IOException { LdapConnection connection = new LdapNetworkConnection(LDAP HOST, LDAP PORT); connection bind(new Dn(LDAP USER), LDAP PASS); return connection; } }",1.0,
3058,3058,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\CachedLDAPAuthorizationModuleTest.,CachedLDAPAuthorizationModuleTest,"public class CachedLDAPAuthorizationModuleTest extends AbstractCachedLDAPAuthorizationModuleTest { Override protected SimpleCachedLDAPAuthorizationMap createMap() { SimpleCachedLDAPAuthorizationMap map = super createMap(); map setConnectionURL( ldap return map; } Override protected InputStream getAddLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-apacheds-add ldif ); } Override protected InputStream getRemoveLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-apacheds-delete ldif ); } Override protected String getMemberAttributeValueForModifyRequest() { return cn=users,ou=Group,ou=ActiveMQ,ou=system ; } protected String getQueueBaseDn() { return ou=Queue,ou=Destination,ou=ActiveMQ,ou=system ; } Override protected LdapConnection getLdapConnection() throws Exception { LdapConnection connection = new LdapNetworkConnection( localhost , getLdapServer() getPort()); connection bind(new Dn( uid=admin,ou=system ), secret ); return connection; } }",1.0,
3060,3060,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\CachedLDAPSecurityTest.,CachedLDAPSecurityTest,"public class CachedLDAPSecurityTest extends CachedLDAPSecurityLegacyTest { Before Override public void setup() throws Exception { System setProperty( ldapPort , String valueOf(getLdapServer() getPort())); broker = BrokerFactory createBroker( xbean org/apache/activemq/security/activemq-apacheds xml ); broker start(); broker waitUntilStarted(); } }",1.0,
3069,3069,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\SimpleAnonymousPluginTest.,SimpleAnonymousPluginTest,"public class SimpleAnonymousPluginTest extends SimpleAuthenticationPluginTest { private static final Logger LOG = LoggerFactory getLogger(SimpleAnonymousPluginTest class); public static Test suite() { return suite(SimpleAnonymousPluginTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } protected BrokerService createBroker() throws Exception { return createBroker( org/apache/activemq/security/simple-anonymous-broker xml ); } public void testInvalidAuthentication() throws JMSException { try { Connection c = factory createConnection( user , krap ); connections add(c); c start(); fail( Expected exception ); } catch (JMSException e) { } try { Connection c = factory createConnection( userkrap , null); connections add(c); c start(); fail( Expected exception ); } catch (JMSException e) { } } public void testAnonymousReceiveSucceeds() throws JMSException { doReceive(false); } public void testAnonymousReceiveFails() throws JMSException { doReceive(true); } public void testAnonymousSendFails() throws JMSException { doSend(true); } public void testAnonymousSendSucceeds() throws JMSException { doSend(false); } public void initCombosForTestAnonymousReceiveSucceeds() { addCombinationValues( userName , new Object[] {}); addCombinationValues( password , new Object[] {}); addCombinationValues( destination , new Object[] {new ActiveMQQueue( GUEST BAR ), new ActiveMQTopic( GUEST BAR )}); } public void initCombosForTestAnonymousReceiveFails() { addCombinationValues( userName , new Object[] {}); addCombinationValues( password , new Object[] {}); addCombinationValues( destination , new Object[] {new ActiveMQQueue( TEST ), new ActiveMQTopic( TEST ), new ActiveMQQueue( USERS FOO ), new ActiveMQTopic( USERS FOO ) }); } public void initCombosForTestAnonymousSendFails() { addCombinationValues( userName , new Object[] {}); addCombinationValues( password , new Object[] {}); addCombinationValues( destination , new Object[] {new ActiveMQQueue( TEST ), new ActiveMQTopic( TEST ), new ActiveMQQueue( USERS FOO ), new ActiveMQTopic( USERS FOO )}); } public void initCombosForTestAnonymousSendSucceeds() { addCombinationValues( userName , new Object[] {}); addCombinationValues( password , new Object[] {}); addCombinationValues( destination , new Object[] {new ActiveMQQueue( GUEST BAR ), new ActiveMQTopic( GUEST BAR )}); } }",1.0,
3072,3072,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\SimpleAuthorizationMapTest.,SimpleAuthorizationMapTest,public class SimpleAuthorizationMapTest extends AuthorizationMapTest { protected AuthorizationMap createAuthorizationMap() { return SimpleSecurityBrokerSystemTest createAuthorizationMap(); } },1.0,
3074,3074,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\SimpleSecurityBrokerSystemTest.,SimpleAuthenticationFactory,"static class SimpleAuthenticationFactory implements BrokerPlugin { public Broker installPlugin(Broker broker) { HashMap<String, String> u = new HashMap<String, String>(); u put( system , manager ); u put( user , password ); u put( guest , password ); Map<String, Set<Principal>> groups = new HashMap<String, Set<Principal>>(); groups put( system , new HashSet<Principal>(Arrays asList(new Principal[] {ADMINS, USERS}))); groups put( user , new HashSet<Principal>(Arrays asList(new Principal[] {USERS}))); groups put( guest , new HashSet<Principal>(Arrays asList(new Principal[] {GUESTS}))); return new SimpleAuthenticationBroker(broker, u, groups); } public String toString() { return SimpleAuthenticationBroker ; } }",1.0,
3075,3075,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\StubDoNothingCallbackHandler.,StubDoNothingCallbackHandler,"public class StubDoNothingCallbackHandler implements CallbackHandler { public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException { } }",1.0,
3076,3076,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\StubDualJaasConfiguration.,StubDualJaasConfiguration,"public class StubDualJaasConfiguration extends Configuration { private AppConfigurationEntry nonSslConfigEntry; private AppConfigurationEntry sslConfigEntry; public StubDualJaasConfiguration(AppConfigurationEntry nonSslConfigEntry, AppConfigurationEntry sslConfigEntry) { this nonSslConfigEntry = nonSslConfigEntry; this sslConfigEntry = sslConfigEntry; } public AppConfigurationEntry[] getAppConfigurationEntry(String name) { if ( activemq-domain equals(name)) { return new AppConfigurationEntry[] {nonSslConfigEntry}; } else { return new AppConfigurationEntry[] {sslConfigEntry}; } } public void refresh() { } }",1.0,
3077,3077,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\StubJaasConfiguration.,StubJaasConfiguration,public class StubJaasConfiguration extends Configuration { private AppConfigurationEntry configEntry; public StubJaasConfiguration(AppConfigurationEntry configEntry) { this configEntry = configEntry; } public AppConfigurationEntry[] getAppConfigurationEntry(String name) { return new AppConfigurationEntry[] {configEntry}; } public void refresh() { } },1.0,
3079,3079,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\StubSecurityContext.,StubSecurityContext,public class StubSecurityContext extends SecurityContext { StubSecurityContext() { super( ); } public Set<Principal> getPrincipals() { return null; } },1.0,
3080,3080,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\XBeanSecurityTest.,XBeanSecurityTest,public class XBeanSecurityTest extends SecurityTestSupport { private static final Logger LOG = LoggerFactory getLogger(XBeanSecurityTest class); public static Test suite() { return suite(XBeanSecurityTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } protected BrokerService createBroker() throws Exception { return createBroker( org/apache/activemq/security/jaas-broker xml ); } protected BrokerService createBroker(String uri) throws Exception { LOG info( Loading broker configuration from the classpath with URI + uri); return BrokerFactory createBroker(new URI( xbean + uri)); } },1.0,
3081,3081,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\XBeanSecurityWithGuestNoCredentialsOnlyTest.,XBeanSecurityWithGuestNoCredentialsOnlyTest,"public class XBeanSecurityWithGuestNoCredentialsOnlyTest extends JmsTestSupport { private static final Logger LOG = LoggerFactory getLogger(XBeanSecurityWithGuestNoCredentialsOnlyTest class); public ActiveMQDestination destination; public static Test suite() { return suite(XBeanSecurityWithGuestNoCredentialsOnlyTest class); } public void testUserSendGoodPassword() throws JMSException { Message m = doSend(false); assertEquals( system , ((ActiveMQMessage)m) getUserID()); assertEquals( system , m getStringProperty( JMSXUserID )); } public void testUserSendWrongPassword() throws JMSException { try { doSend(true); fail( expect exception on connect ); } catch (JMSException expected) { assertTrue( cause as expected , expected getCause() instanceof SecurityException); } } public void testUserSendNoCredentials() throws JMSException { Message m = doSend(false); assertEquals( guest , ((ActiveMQMessage)m) getUserID()); assertEquals( guest , m getStringProperty( JMSXUserID )); } protected BrokerService createBroker() throws Exception { return createBroker( org/apache/activemq/security/jaas-broker-guest-no-creds-only xml ); } protected BrokerService createBroker(String uri) throws Exception { LOG info( Loading broker configuration from the classpath with URI + uri); return BrokerFactory createBroker(new URI( xbean + uri)); } public Message doSend(boolean fail) throws JMSException { Connection adminConnection = factory createConnection( system , manager ); connections add(adminConnection); adminConnection start(); Session adminSession = adminConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = adminSession createConsumer(destination); connections remove(connection); connection = (ActiveMQConnection)factory createConnection(userName, password); connections add(connection); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); try { sendMessages(session, destination, 1); } catch (JMSException e) { if (!fail || !(e getCause() instanceof SecurityException)) { throw e; } } Message m = consumer receive(1000); if (fail) { assertNull(m); } else { assertNotNull(m); assertEquals( 0 , ((TextMessage)m) getText()); assertNull(consumer receiveNoWait()); } return m; } public void initCombosForTestUserSendGoodPassword() { addCombinationValues( userName , new Object[] { system }); addCombinationValues( password , new Object[] { manager }); addCombinationValues( destination , new Object[] {new ActiveMQQueue( test ), new ActiveMQTopic( test )}); } public void initCombosForTestUserSendWrongPassword() { addCombinationValues( userName , new Object[] { system }); addCombinationValues( password , new Object[] { wrongpassword }); addCombinationValues( destination , new Object[] {new ActiveMQQueue( GuestQueue )}); } public void initCombosForTestUserSendNoCredentials() { addCombinationValues( userName , new Object[] {null, system }); addCombinationValues( password , new Object[] {null}); addCombinationValues( destination , new Object[] {new ActiveMQQueue( GuestQueue )}); } }",1.0,
3082,3082,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\XBeanSecurityWithGuestTest.,XBeanSecurityWithGuestTest,"public class XBeanSecurityWithGuestTest extends JmsTestSupport { private static final Logger LOG = LoggerFactory getLogger(XBeanSecurityWithGuestTest class); public ActiveMQDestination destination; public static Test suite() { return suite(XBeanSecurityWithGuestTest class); } public void testUserSendGoodPassword() throws JMSException { Message m = doSend(false); assertEquals( system , ((ActiveMQMessage)m) getUserID()); assertEquals( system , m getStringProperty( JMSXUserID )); } public void testUserSendWrongPassword() throws JMSException { Message m = doSend(false); assertEquals( guest , ((ActiveMQMessage)m) getUserID()); assertEquals( guest , m getStringProperty( JMSXUserID )); } public void testUserSendNoCredentials() throws JMSException { Message m = doSend(false); assertEquals( guest , ((ActiveMQMessage)m) getUserID()); assertEquals( guest , m getStringProperty( JMSXUserID )); } protected BrokerService createBroker() throws Exception { return createBroker( org/apache/activemq/security/jaas-broker-guest xml ); } protected BrokerService createBroker(String uri) throws Exception { LOG info( Loading broker configuration from the classpath with URI + uri); return BrokerFactory createBroker(new URI( xbean + uri)); } public Message doSend(boolean fail) throws JMSException { Connection adminConnection = factory createConnection( system , manager ); connections add(adminConnection); adminConnection start(); Session adminSession = adminConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = adminSession createConsumer(destination); connections remove(connection); connection = (ActiveMQConnection)factory createConnection(userName, password); connections add(connection); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); try { sendMessages(session, destination, 1); } catch (JMSException e) { if (!fail || !(e getCause() instanceof SecurityException)) { throw e; } } Message m = consumer receive(1000); if (fail) { assertNull(m); } else { assertNotNull(m); assertEquals( 0 , ((TextMessage)m) getText()); assertNull(consumer receiveNoWait()); } return m; } public void initCombosForTestUserSendGoodPassword() { addCombinationValues( userName , new Object[] { system }); addCombinationValues( password , new Object[] { manager }); addCombinationValues( destination , new Object[] {new ActiveMQQueue( test ), new ActiveMQTopic( test )}); } public void initCombosForTestUserSendWrongPassword() { addCombinationValues( userName , new Object[] { system }); addCombinationValues( password , new Object[] { wrongpassword }); addCombinationValues( destination , new Object[] {new ActiveMQQueue( GuestQueue )}); } public void initCombosForTestUserSendNoCredentials() { addCombinationValues( userName , new Object[] { , null}); addCombinationValues( password , new Object[] { , null}); addCombinationValues( destination , new Object[] {new ActiveMQQueue( GuestQueue )}); } }",1.0,
3083,3083,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\XBeanSslContextTest.,XBeanSslContextTest,public class XBeanSslContextTest { BrokerService broker; Test public void testSslContextElement() throws Exception { broker = BrokerFactory createBroker(new URI( xbean org/apache/activemq/security/activemq-sslcontext xml )); } After public void stopBroker() throws Exception { if (broker != null) broker stop(); } },1.0,
3084,3084,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\selector\SelectorParserTest.,SelectorParserTest,"public class SelectorParserTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(SelectorParserTest class); public void testParseXPath() throws Exception { BooleanExpression filter = parse( XPATH assertTrue( Created XPath expression , filter instanceof XPathExpression); LOG info( Expression + filter); } public void testParseWithParensAround() throws Exception { String[] values = { x = 1 and y = 2 , (x = 1) and (y = 2) , ((x = 1) and (y = 2)) }; for (int i = 0; i < values length; i++) { String value = values[i]; LOG info( Parsing + value); BooleanExpression andExpression = parse(value); assertTrue( Created LogicExpression expression , andExpression instanceof LogicExpression); LogicExpression logicExpression = (LogicExpression)andExpression; Expression left = logicExpression getLeft(); Expression right = logicExpression getRight(); assertTrue( Left is a binary filter , left instanceof ComparisonExpression); assertTrue( Right is a binary filter , right instanceof ComparisonExpression); ComparisonExpression leftCompare = (ComparisonExpression)left; ComparisonExpression rightCompare = (ComparisonExpression)right; assertPropertyExpression( left , leftCompare getLeft(), x ); assertPropertyExpression( right , rightCompare getLeft(), y ); } } protected void assertPropertyExpression(String message, Expression expression, String expected) { assertTrue(message + Must be PropertyExpression , expression instanceof PropertyExpression); PropertyExpression propExp = (PropertyExpression)expression; assertEquals(message + Property name , expected, propExp getName()); } protected BooleanExpression parse(String text) throws Exception { return SelectorParser parse(text); } }",1.0,
3088,3088,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\spring\Spring2XmlNamespacesTest.,Spring2XmlNamespacesTest,public class Spring2XmlNamespacesTest extends SpringTestSupport { public void testUsingSpringXmlNamespacesWithPublicXsdLocation() throws Exception { assertSenderConfig( spring-embedded-xbean xml ); } },1.0,
3089,3089,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\spring\Spring2XmlNamespacesWithoutRemoteSchemaTest.,Spring2XmlNamespacesWithoutRemoteSchemaTest,public class Spring2XmlNamespacesWithoutRemoteSchemaTest extends SpringTestSupport { public void testUsingSpring2NamespacesForANonExistingXsdDocument() throws Exception { assertSenderConfig( spring-embedded-xbean-noversion xml ); } },1.0,
3091,3091,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\spring\SpringProducer.,SpringProducer,"public class SpringProducer { private static final Logger LOG = LoggerFactory getLogger(SpringProducer class); private JmsTemplate template; private Destination destination; private int messageCount = 10; public void start() throws JMSException { for (int i = 0; i < messageCount; i++) { final String text = Text for message + i; template send(destination, new MessageCreator() { public Message createMessage(Session session) throws JMSException { LOG info( Sending message + text); TextMessage message = session createTextMessage(text); message setStringProperty( next , foo ); return message; } }); } } public void stop() throws JMSException { } public JmsTemplate getTemplate() { return template; } public void setTemplate(JmsTemplate template) { this template = template; } public int getMessageCount() { return messageCount; } public void setMessageCount(int messageCount) { this messageCount = messageCount; } public Destination getDestination() { return destination; } public void setDestination(Destination destination) { this destination = destination; } }",1.0,
3092,3092,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\spring\SpringTest.,SpringTest,"public class SpringTest extends SpringTestSupport { public void testSenderWithSpringXml() throws Exception { String config = spring xml ; assertSenderConfig(config); } public void testSenderWithSpringXmlAndQueue() throws Exception { String config = spring-queue xml ; assertSenderConfig(config); } public void testSenderWithSpringXmlUsingJNDI() throws Exception { String config = spring-jndi xml ; assertSenderConfig(config); } public void testSenderWithSpringXmlEmbeddedBrokerConfiguredViaXml() throws Exception { String config = spring-embedded xml ; assertSenderConfig(config); } public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXml() throws Exception { String config = spring-embedded-xbean xml ; assertSenderConfig(config); } public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXmlUsingLocalXsd() throws Exception { String config = spring-embedded-xbean-local xml ; assertSenderConfig(config); } public void testStartFalse() throws Exception { String config = spring-start-false xml ; Thread currentThread() setContextClassLoader(SpringTest class getClassLoader()); context = new ClassPathXmlApplicationContext(config); BrokerService broker = (BrokerService)context getBean(BrokerService class); assertFalse( Broker is started , broker isStarted()); } }",1.0,
3093,3093,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\spring\SpringTestSupport.,SpringTestSupport,"public class SpringTestSupport extends TestCase { private static final Logger LOG = LoggerFactory getLogger(SpringTest class); protected AbstractApplicationContext context; protected SpringConsumer consumer; protected SpringProducer producer; protected void assertSenderConfig(String config) throws Exception { Thread currentThread() setContextClassLoader(SpringTest class getClassLoader()); context = new ClassPathXmlApplicationContext(config); consumer = (SpringConsumer) context getBean( consumer ); assertTrue( Found a valid consumer , consumer != null); consumer start(); Thread sleep(1000); consumer flushMessages(); producer = (SpringProducer) context getBean( producer ); assertTrue( Found a valid producer , producer != null); producer start(); consumer waitForMessagesToArrive(producer getMessageCount()); List messages = consumer flushMessages(); LOG info( Consumer has received messages ); for (Iterator iter = messages iterator(); iter hasNext();) { Object message = iter next(); LOG info( Received + message); } assertEquals( Message count , producer getMessageCount(), messages size()); } protected void tearDown() throws Exception { if (consumer != null) { consumer stop(); } if (producer != null) { producer stop(); } if (context != null) { context destroy(); } } }",1.0,
3094,3094,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\AutoStorePerDestinationTest.,AutoStorePerDestinationTest,public class AutoStorePerDestinationTest extends StorePerDestinationTest { public void prepareBrokerWithMultiStore(boolean deleteAllMessages) throws Exception { MultiKahaDBPersistenceAdapter multiKahaDBPersistenceAdapter = new MultiKahaDBPersistenceAdapter(); if (deleteAllMessages) { multiKahaDBPersistenceAdapter deleteAllMessages(); } ArrayList<FilteredKahaDBPersistenceAdapter> adapters = new ArrayList<FilteredKahaDBPersistenceAdapter>(); FilteredKahaDBPersistenceAdapter template = new FilteredKahaDBPersistenceAdapter(); template setPersistenceAdapter(createStore(deleteAllMessages)); template setPerDestination(true); adapters add(template); multiKahaDBPersistenceAdapter setFilteredPersistenceAdapters(adapters); brokerService = createBroker(multiKahaDBPersistenceAdapter); } },1.0,
3096,3096,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\MessagePriorityTest.,ProducerThread,"protected class ProducerThread extends Thread { int priority; int messageCount; ActiveMQDestination dest; public ProducerThread(ActiveMQDestination dest, int messageCount, int priority) { this messageCount = messageCount; this priority = priority; this dest = dest; } public void run() { try { MessageProducer producer = sess createProducer(dest); producer setPriority(priority); producer setDeliveryMode(deliveryMode); for (int i = 0; i < messageCount; i++) { producer send(sess createTextMessage( message priority + priority)); } } catch (Exception e) { e printStackTrace(); } } public void setMessagePriority(int priority) { this priority = priority; } public void setMessageCount(int messageCount) { this messageCount = messageCount; } }",1.0,
3097,3097,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\StoreOrderTest.,StoreOrderTest,"public abstract class StoreOrderTest { private static final Logger LOG = LoggerFactory getLogger(StoreOrderTest class); protected BrokerService broker; private ActiveMQConnection connection; public Destination destination = new ActiveMQQueue( StoreOrderTest consumer prefetchSize=0 ); protected abstract void setPersistentAdapter(BrokerService brokerService) throws Exception; protected void dumpMessages() throws Exception {} public class TransactedSend implements Runnable { private CountDownLatch readyForCommit; private CountDownLatch firstDone; private boolean first; private Session session; private MessageProducer producer; public TransactedSend(CountDownLatch readyForCommit, CountDownLatch firstDone, boolean b) throws Exception { this readyForCommit = readyForCommit; this firstDone = firstDone; this first = b; session = connection createSession(true, Session SESSION TRANSACTED); producer = session createProducer(destination); } public void run() { try { if (!first) { firstDone await(30, TimeUnit SECONDS); } producer send(session createTextMessage(first first second )); if (first) { firstDone countDown(); } readyForCommit countDown(); } catch (Exception e) { e printStackTrace(); fail( unexpected ex on run + e); } } public void commit() throws Exception { session commit(); session close(); } } Before public void setup() throws Exception { broker = createBroker(); initConnection(); } public void initConnection() throws Exception { ConnectionFactory connectionFactory = new ActiveMQConnectionFactory( vm connection = (ActiveMQConnection) connectionFactory createConnection(); connection setWatchTopicAdvisories(false); connection start(); } After public void stopBroker() throws Exception { if (connection != null) { connection close(); } if (broker != null) { broker stop(); } } Test public void testCompositeSendReceiveAfterRestart() throws Exception { destination = new ActiveMQQueue( StoreOrderTest,SecondStoreOrderTest ); enqueueOneMessage(); LOG info( restart broker ); stopBroker(); broker = createRestartedBroker(); dumpMessages(); initConnection(); destination = new ActiveMQQueue( StoreOrderTest ); assertNotNull( got one message from first dest , receiveOne()); dumpMessages(); destination = new ActiveMQQueue( SecondStoreOrderTest ); assertNotNull( got one message from second dest , receiveOne()); } Test public void validateUnorderedTxCommit() throws Exception { Executor executor = Executors newCachedThreadPool(); CountDownLatch readyForCommit = new CountDownLatch(2); CountDownLatch firstDone = new CountDownLatch(1); TransactedSend first = new TransactedSend(readyForCommit, firstDone, true); TransactedSend second = new TransactedSend(readyForCommit, firstDone, false); executor execute(first); executor execute(second); assertTrue( both started , readyForCommit await(20, TimeUnit SECONDS)); LOG info( commit out of order ); second commit(); enqueueOneMessage(); first commit(); LOG info( send/commit done ); dumpMessages(); String received1, received2, received3 = null; if (true) { LOG info( receive and rollback ); Session session = connection createSession(true, Session SESSION TRANSACTED); received1 = receive(session); received2 = receive(session); received3 = receive(session); assertEquals( second , received1); assertEquals( middle , received2); assertEquals( first , received3); session rollback(); session close(); } LOG info( restart broker ); stopBroker(); broker = createRestartedBroker(); initConnection(); if (true) { LOG info( receive and rollback after restart ); Session session = connection createSession(true, Session SESSION TRANSACTED); received1 = receive(session); received2 = receive(session); received3 = receive(session); assertEquals( second , received1); assertEquals( middle , received2); assertEquals( first , received3); session rollback(); session close(); } LOG info( receive and ack each message ); received1 = receiveOne(); received2 = receiveOne(); received3 = receiveOne(); assertEquals( second , received1); assertEquals( middle , received2); assertEquals( first , received3); } private void enqueueOneMessage() throws Exception { Session session = connection createSession(true, Session SESSION TRANSACTED); MessageProducer producer = session createProducer(destination); producer send(session createTextMessage( middle )); session commit(); session close(); } private String receiveOne() throws Exception { Session session = connection createSession(true, Session SESSION TRANSACTED); String received = receive(session); session commit(); session close(); return received; } private String receive(Session session) throws Exception { MessageConsumer consumer = session createConsumer(destination); String result = null; TextMessage message = (TextMessage) consumer receive(5000); if (message != null) { LOG info( got message + message); result = message getText(); } consumer close(); return result; } protected BrokerService createBroker() throws Exception { boolean deleteMessagesOnStartup = true; return startBroker(deleteMessagesOnStartup); } protected BrokerService createRestartedBroker() throws Exception { boolean deleteMessagesOnStartup = false; return startBroker(deleteMessagesOnStartup); } protected BrokerService startBroker(boolean deleteMessagesOnStartup) throws Exception { BrokerService newBroker = new BrokerService(); configureBroker(newBroker); newBroker setDeleteAllMessagesOnStartup(deleteMessagesOnStartup); newBroker start(); return newBroker; } protected void configureBroker(BrokerService brokerService) throws Exception { setPersistentAdapter(brokerService); brokerService setAdvisorySupport(false); PolicyMap map = new PolicyMap(); PolicyEntry defaultEntry = new PolicyEntry(); defaultEntry setMemoryLimit(1024*3); defaultEntry setCursorMemoryHighWaterMark(68); defaultEntry setExpireMessagesPeriod(0); map setDefaultEntry(defaultEntry); brokerService setDestinationPolicy(map); } }",1.0,
3098,3098,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\StoreOrderTest.,TransactedSend,"public class TransactedSend implements Runnable { private CountDownLatch readyForCommit; private CountDownLatch firstDone; private boolean first; private Session session; private MessageProducer producer; public TransactedSend(CountDownLatch readyForCommit, CountDownLatch firstDone, boolean b) throws Exception { this readyForCommit = readyForCommit; this firstDone = firstDone; this first = b; session = connection createSession(true, Session SESSION TRANSACTED); producer = session createProducer(destination); } public void run() { try { if (!first) { firstDone await(30, TimeUnit SECONDS); } producer send(session createTextMessage(first first second )); if (first) { firstDone countDown(); } readyForCommit countDown(); } catch (Exception e) { e printStackTrace(); fail( unexpected ex on run + e); } } public void commit() throws Exception { session commit(); session close(); } } Before",1.0,
3100,3100,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\BrokenPersistenceAdapter.,BrokenPersistenceAdapter,class BrokenPersistenceAdapter extends JDBCPersistenceAdapter { private final Logger LOG = LoggerFactory getLogger(BrokenPersistenceAdapter class); private boolean shouldBreak = false; Override public void commitTransaction(ConnectionContext context) throws IOException { if ( shouldBreak ) { LOG warn( Throwing exception on purpose ); throw new IOException( Breaking on purpose ); } LOG debug( in commitTransaction ); super commitTransaction(context); } public void setShouldBreak(boolean shouldBreak) { this shouldBreak = shouldBreak; } },1.0,
3101,3101,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\DatabaseLockerConfigTest.,DatabaseLockerConfigTest,"public class DatabaseLockerConfigTest { Test public void testSleepConfig() throws Exception { LeaseDatabaseLocker underTest = new LeaseDatabaseLocker(); underTest setLockAcquireSleepInterval(50); underTest configure(null); assertEquals( configured sleep value retained , 50, underTest getLockAcquireSleepInterval()); } Test public void testDefaultSleepConfig() throws Exception { LeaseDatabaseLocker underTest = new LeaseDatabaseLocker(); underTest configure(null); assertEquals( configured sleep value retained , AbstractLocker DEFAULT LOCK ACQUIRE SLEEP INTERVAL, underTest getLockAcquireSleepInterval()); } Test public void testSleepConfigOrig() throws Exception { DefaultDatabaseLocker underTest = new DefaultDatabaseLocker(); underTest setLockAcquireSleepInterval(50); underTest configure(null); assertEquals( configured sleep value retained , 50, underTest getLockAcquireSleepInterval()); } Test public void testDefaultSleepConfigOrig() throws Exception { DefaultDatabaseLocker underTest = new DefaultDatabaseLocker(); underTest configure(null); assertEquals( configured sleep value retained , AbstractLocker DEFAULT LOCK ACQUIRE SLEEP INTERVAL, underTest getLockAcquireSleepInterval()); } }",1.0,
3104,3104,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\JDBCNegativeQueueTest.,JDBCNegativeQueueTest,"public class JDBCNegativeQueueTest extends NegativeQueueTest { EmbeddedDataSource dataSource; protected void configureBroker(BrokerService answer) throws Exception { super configureBroker(answer); JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); answer setPersistenceAdapter(jdbc); } protected void tearDown() throws Exception { if (DEBUG) { printQuery( Select * from ACTIVEMQ MSGS , System out); } super tearDown(); } private void printQuery(String query, PrintStream out) throws SQLException { Connection conn = dataSource getConnection(); printQuery(conn prepareStatement(query), out); conn close(); } private void printQuery(PreparedStatement s, PrintStream out) throws SQLException { ResultSet set = null; try { set = s executeQuery(); ResultSetMetaData metaData = set getMetaData(); for (int i = 1; i <= metaData getColumnCount(); i++) { if (i == 1) out print( || ); out print(metaData getColumnName(i) + || ); } out println(); while (set next()) { for (int i = 1; i <= metaData getColumnCount(); i++) { if (i == 1) out print( | ); out print(set getString(i) + | ); } out println(); } } finally { try { set close(); } catch (Throwable ignore) { } try { s close(); } catch (Throwable ignore) { } } } }",1.0,
3105,3105,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\JDBCNetworkBrokerDetachTest.,JDBCNetworkBrokerDetachTest,public class JDBCNetworkBrokerDetachTest extends NetworkBrokerDetachTest { protected void configureBroker(BrokerService broker) throws Exception { JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); EmbeddedDataSource dataSource = new EmbeddedDataSource(); dataSource setDatabaseName(broker getBrokerName()); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); jdbc deleteAllMessages(); broker setPersistenceAdapter(jdbc); broker setUseVirtualTopics(false); } },1.0,
3106,3106,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\JDBCPersistenceAdapterTest.,JDBCPersistenceAdapterTest,public class JDBCPersistenceAdapterTest extends PersistenceAdapterTestSupport { protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws IOException { JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); jdbc setEnableAudit(true); brokerService setSchedulerSupport(false); brokerService setPersistenceAdapter(jdbc); jdbc setBrokerService(brokerService); EmbeddedDataSource dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); if( delete ) { jdbc deleteAllMessages(); } return jdbc; } public void testAuditOff() throws Exception { pa stop(); pa = createPersistenceAdapter(true); ((JDBCPersistenceAdapter)pa) setEnableAudit(false); pa start(); boolean failed = true; try { testStoreCanHandleDupMessages(); failed = false; } catch (AssertionFailedError e) { } if (!failed) { fail( Should have failed with audit turned off ); } } },1.0,
3107,3107,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\JDBCStoreBrokerTest.,JDBCStoreBrokerTest,public class JDBCStoreBrokerTest extends BrokerTest { protected BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); EmbeddedDataSource dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); jdbc deleteAllMessages(); broker setPersistenceAdapter(jdbc); return broker; } protected BrokerService createRestartedBroker() throws Exception { BrokerService broker = new BrokerService(); JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); EmbeddedDataSource dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); broker setPersistenceAdapter(jdbc); return broker; } public static Test suite() { return suite(JDBCStoreBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
3109,3109,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\JDBCTestMemory.,JDBCTestMemory,"public class JDBCTestMemory extends TestCase { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( tcp Connection conn; Session sess; Destination dest; BrokerService broker; protected void setUp() throws Exception { broker = createBroker(); broker start(); broker waitUntilStarted(); } protected void tearDown() throws Exception { broker stop(); } protected BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); broker setUseJmx(true); JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); EmbeddedDataSource dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); jdbc deleteAllMessages(); broker setPersistenceAdapter(jdbc); broker addConnector( tcp return broker; } protected BrokerService createRestartedBroker() throws Exception { BrokerService broker = new BrokerService(); broker setUseJmx(true); JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); EmbeddedDataSource dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); broker setPersistenceAdapter(jdbc); broker addConnector( tcp return broker; } public void init() throws Exception { conn = factory createConnection(); conn start(); sess = conn createSession(false, Session AUTO ACKNOWLEDGE); dest = sess createQueue( test ); } public void testRecovery() throws Exception { init(); MessageProducer producer = sess createProducer(dest); for (int i = 0; i < 1000; i++) { producer send(sess createTextMessage( test )); } producer close(); sess close(); conn close(); broker stop(); broker waitUntilStopped(); broker = createRestartedBroker(); broker start(); broker waitUntilStarted(); init(); for (int i = 0; i < 10; i++) { new Thread( Producer + i) { public void run() { try { MessageProducer producer = sess createProducer(dest); for (int i = 0; i < 15000; i++) { producer send(sess createTextMessage( test )); if (i % 100 == 0) { System out println(getName() + sent message + i); } } producer close(); } catch (Exception e) { e printStackTrace(); } } } start(); new Thread( Consumer + i) { public void run() { try { MessageConsumer consumer = sess createConsumer(dest); for (int i = 0; i < 15000; i++) { consumer receive(2000); if (i % 100 == 0) { System out println(getName() + received message + i); } } consumer close(); } catch (Exception e) { e printStackTrace(); } } } start(); } System in read(); sess close(); conn close(); } }",1.0,
3110,3110,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\JDBCXACommitExceptionTest.,JDBCXACommitExceptionTest,"public class JDBCXACommitExceptionTest extends JDBCCommitExceptionTest { private static final Logger LOG = LoggerFactory getLogger(JDBCXACommitExceptionTest class); private long txGenerator = System currentTimeMillis(); protected ActiveMQXAConnectionFactory factory = new ActiveMQXAConnectionFactory( tcp boolean onePhase = true; public void testTwoPhaseSqlException() throws Exception { onePhase = false; doTestSqlException(); } Override protected int receiveMessages(int messagesExpected) throws Exception { XAConnection connection = factory createXAConnection(); connection start(); XASession session = connection createXASession(); jdbc setShouldBreak(true); receiveMessages(messagesExpected, session, onePhase); jdbc setShouldBreak(false); return receiveMessages(messagesExpected, session, onePhase); } protected int receiveMessages(int messagesExpected, XASession session, boolean onePhase) throws Exception { int messagesReceived = 0; for (int i=0; i<messagesExpected; i++) { Destination destination = session createQueue( TEST ); MessageConsumer consumer = session createConsumer(destination); XAResource resource = session getXAResource(); resource recover(XAResource TMSTARTRSCAN); resource recover(XAResource TMNOFLAGS); Xid tid = createXid(); Message message = null; try { LOG debug( Receiving message + (messagesReceived+1) + of + messagesExpected); resource start(tid, XAResource TMNOFLAGS); message = consumer receive(2000); LOG info( Received + message); resource end(tid, XAResource TMSUCCESS); if (message != null) { if (onePhase) { resource commit(tid, true); } else { resource prepare(tid); resource commit(tid, false); } messagesReceived++; } } catch (Exception e) { LOG debug( Caught exception , e); try { LOG debug( Rolling back transaction (just in case, no need to do this as it is implicit in a 1pc commit failure) + tid); resource rollback(tid); } catch (XAException ex) { try { LOG debug( Caught exception during rollback + ex + forgetting transaction + tid); resource forget(tid); } catch (XAException ex1) { LOG debug( rollback/forget failed + ex1 errorCode); } } } finally { if (consumer != null) { consumer close(); } } } return messagesReceived; } public Xid createXid() throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream os = new DataOutputStream(baos); os writeLong(++txGenerator); os close(); final byte[] bs = baos toByteArray(); return new Xid() { public int getFormatId() { return 86; } public byte[] getGlobalTransactionId() { return bs; } public byte[] getBranchQualifier() { return bs; } }; } }",1.0,
3111,3111,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\LeaseDatabaseLockerTest.,LeaseDatabaseLockerTest,"public class LeaseDatabaseLockerTest { private static final Logger LOG = LoggerFactory getLogger(LeaseDatabaseLockerTest class); JDBCPersistenceAdapter jdbc; BrokerService brokerService; EmbeddedDataSource dataSource; Before public void setUpStore() throws Exception { dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc = new JDBCPersistenceAdapter(); jdbc setDataSource(dataSource); brokerService = new BrokerService(); jdbc setBrokerService(brokerService); jdbc getAdapter() doCreateTables(jdbc getTransactionContext()); } Test public void testLockInterleave() throws Exception { LeaseDatabaseLocker lockerA = new LeaseDatabaseLocker(); brokerService setBrokerName( First ); lockerA configure(jdbc); final LeaseDatabaseLocker lockerB = new LeaseDatabaseLocker(); brokerService setBrokerName( Second ); lockerB configure(jdbc); final AtomicBoolean blocked = new AtomicBoolean(true); final Connection connection = dataSource getConnection(); printLockTable(connection); lockerA start(); printLockTable(connection); ExecutorService executor = Executors newCachedThreadPool(); executor execute(new Runnable() { Override public void run() { try { lockerB start(); blocked set(false); printLockTable(connection); } catch (Exception e) { e printStackTrace(); } } }); assertTrue( B is blocked , blocked get()); assertTrue( A is good , lockerA keepAlive()); printLockTable(connection); lockerA stop(); printLockTable(connection); TimeUnit MILLISECONDS sleep(2 * lockerB getLockAcquireSleepInterval()); assertFalse( lockerB has the lock , blocked get()); lockerB stop(); printLockTable(connection); } Test public void testLockAcquireRace() throws Exception { final String fakeId = Anon ; final Connection connection = dataSource getConnection(); PreparedStatement statement = connection prepareStatement(jdbc getStatements() getLeaseObtainStatement()); final long now = System currentTimeMillis(); statement setString(1,fakeId); statement setLong(2, now + 30000); statement setLong(3, now); assertEquals( we got the lease , 1, statement executeUpdate()); printLockTable(connection); final LeaseDatabaseLocker lockerA = new LeaseDatabaseLocker(); lockerA setLeaseHolderId( A ); lockerA configure(jdbc); final LeaseDatabaseLocker lockerB = new LeaseDatabaseLocker(); lockerB setLeaseHolderId( B ); lockerB configure(jdbc); final Set<LeaseDatabaseLocker> lockedSet = new HashSet<LeaseDatabaseLocker>(); ExecutorService executor = Executors newCachedThreadPool(); executor execute(new Runnable() { Override public void run() { try { lockerA start(); lockedSet add(lockerA); printLockTable(connection); } catch (Exception e) { e printStackTrace(); } } }); executor execute(new Runnable() { Override public void run() { try { lockerB start(); lockedSet add(lockerB); printLockTable(connection); } catch (Exception e) { e printStackTrace(); } } }); TimeUnit SECONDS sleep(2); assertTrue( no start , lockedSet isEmpty()); assertFalse( A is blocked , lockerA keepAlive()); assertFalse( B is blocked , lockerB keepAlive()); LOG info( releasing phony lock + fakeId); statement = connection prepareStatement(jdbc getStatements() getLeaseUpdateStatement()); statement setString(1, null); statement setLong(2, 0l); statement setString(3, fakeId); assertEquals( we released + fakeId, 1, statement executeUpdate()); LOG info( released + fakeId); printLockTable(connection); TimeUnit MILLISECONDS sleep(AbstractLocker DEFAULT LOCK ACQUIRE SLEEP INTERVAL); assertEquals( one locker started , 1, lockedSet size()); assertTrue( one isAlive , lockerA keepAlive() || lockerB keepAlive()); LeaseDatabaseLocker winner = lockedSet iterator() next(); winner stop(); lockedSet remove(winner); TimeUnit MILLISECONDS sleep(AbstractLocker DEFAULT LOCK ACQUIRE SLEEP INTERVAL); assertEquals( one locker started , 1, lockedSet size()); lockedSet iterator() next() stop(); printLockTable(connection); } private void printLockTable(Connection connection) throws Exception { ((DefaultJDBCAdapter)jdbc getAdapter()) printQuery(connection, SELECT * from ACTIVEMQ LOCK , System err); } }",1.0,
3112,3112,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\CustomLockerTest.,CustomLockerTest,public class CustomLockerTest extends TestCase { public void testCustomLocker() throws Exception { BrokerService broker = BrokerFactory createBroker( xbean org/apache/activemq/store/kahadb/shared xml ); broker waitUntilStarted(); broker stop(); broker waitUntilStopped(); } },1.0,
3114,3114,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\KahaDBMessagePriorityTest.,KahaDBMessagePriorityTest,public class KahaDBMessagePriorityTest extends MessagePriorityTest { Override protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws Exception { KahaDBPersistenceAdapter adapter = new KahaDBPersistenceAdapter(); adapter setConcurrentStoreAndDispatchQueues(false); adapter setConcurrentStoreAndDispatchTopics(false); adapter deleteAllMessages(); return adapter; } public static Test suite() { return suite(KahaDBMessagePriorityTest class); } },1.0,
3115,3115,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\KahaDBPersistenceAdapterTest.,KahaDBPersistenceAdapterTest,public class KahaDBPersistenceAdapterTest extends PersistenceAdapterTestSupport { protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws IOException { KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(new File( target/activemq-data/kahadb )); if (delete) { kaha deleteAllMessages(); } return kaha; } },1.0,
3116,3116,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\KahaDBStoreBrokerTest.,KahaDBStoreBrokerTest,public class KahaDBStoreBrokerTest extends BrokerTest { protected void setUp() throws Exception { this setAutoFail(true); super setUp(); } protected BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); KahaDBStore kaha = new KahaDBStore(); File directory = new File( target/activemq-data/kahadb ); IOHelper deleteChildren(directory); kaha setDirectory(directory); kaha deleteAllMessages(); broker setPersistenceAdapter(kaha); return broker; } protected BrokerService createRestartedBroker() throws Exception { BrokerService broker = new BrokerService(); KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(new File( target/activemq-data/kahadb )); broker setPersistenceAdapter(kaha); return broker; } public static Test suite() { return suite(KahaDBStoreBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
3117,3117,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\KahaDBStoreOrderTest.,KahaDBStoreOrderTest,public class KahaDBStoreOrderTest extends StoreOrderTest { Override protected void setPersistentAdapter(BrokerService brokerService) throws Exception { KahaDBStore kaha = new KahaDBStore(); File directory = new File( target/activemq-data/kahadb/storeOrder ); kaha setDirectory(directory); brokerService setPersistenceAdapter(kaha); } },1.0,
3119,3119,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\KahaDBStoreRecoveryExpiryTest.,KahaDBStoreRecoveryExpiryTest,"public class KahaDBStoreRecoveryExpiryTest { private BrokerService broker; private ActiveMQConnection connection; private Destination destination = new ActiveMQQueue( Test ); private Session session; Test public void testRestartWitExpired() throws Exception { publishMessages(1, 0); publishMessages(1, 2000); publishMessages(1, 0); restartBroker(3000); consumeMessages(2); } Test public void testRestartWitExpiredLargerThanBatchRecovery() throws Exception { publishMessages(BaseDestination MAX PAGE SIZE + 10, 2000); publishMessages(10, 0); restartBroker(3000); consumeMessages(10); } private void consumeMessages(int count) throws Exception { MessageConsumer consumer = session createConsumer(destination); for (int i=0; i<count; i++) { assertNotNull( got message + i, consumer receive(4000)); } assertNull( none left over , consumer receive(2000)); } private void restartBroker(int restartDelay) throws Exception { stopBroker(); TimeUnit MILLISECONDS sleep(restartDelay); startBroker(); } After public void stopBroker() throws Exception { broker stop(); broker waitUntilStopped(); } private void publishMessages(int count, int expiry) throws Exception { MessageProducer producer = session createProducer(destination); for (int i=0; i<count; i++) { producer send(session createTextMessage(), DeliveryMode PERSISTENT, 5, expiry); } } Before public void startBroker() throws Exception { broker = new BrokerService(); ((KahaDBPersistenceAdapter)broker getPersistenceAdapter()) setIndexCacheSize(0); PolicyMap policyMap = new PolicyMap(); PolicyEntry defaultEntry = new PolicyEntry(); defaultEntry setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy()); policyMap setDefaultEntry(defaultEntry); broker setDestinationPolicy(policyMap); broker setUseJmx(false); broker start(); ConnectionFactory connectionFactory = new ActiveMQConnectionFactory( vm connection = (ActiveMQConnection) connectionFactory createConnection(); connection setWatchTopicAdvisories(false); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); } }",1.0,
3121,3121,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\KahaDBTest.,KahaDBTest,"public class KahaDBTest extends TestCase { protected BrokerService createBroker(KahaDBStore kaha) throws Exception { BrokerService broker = new BrokerService(); broker setUseJmx(false); broker setPersistenceAdapter(kaha); broker start(); return broker; } private KahaDBStore createStore(boolean delete) throws IOException { KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(new File( target/activemq-data/kahadb )); if( delete ) { kaha deleteAllMessages(); } return kaha; } public void testIgnoreMissingJournalfilesOptionSetFalse() throws Exception { KahaDBStore kaha = createStore(true); kaha setJournalMaxFileLength(1024*100); assertFalse(kaha isIgnoreMissingJournalfiles()); BrokerService broker = createBroker(kaha); sendMessages(1000); broker stop(); assertExistsAndDelete(new File(kaha getDirectory(), db-4 log )); assertExistsAndDelete(new File(kaha getDirectory(), db-8 log )); kaha = createStore(false); kaha setJournalMaxFileLength(1024*100); assertFalse(kaha isIgnoreMissingJournalfiles()); try { broker = createBroker(kaha); fail( expected IOException ); } catch (IOException e) { assertTrue( e getMessage() startsWith( Detected missing/corrupt journal files ) ); } } public void testIgnoreMissingJournalfilesOptionSetTrue() throws Exception { KahaDBStore kaha = createStore(true); kaha setJournalMaxFileLength(1024*100); assertFalse(kaha isIgnoreMissingJournalfiles()); BrokerService broker = createBroker(kaha); sendMessages(1000); broker stop(); assertExistsAndDelete(new File(kaha getDirectory(), db-4 log )); assertExistsAndDelete(new File(kaha getDirectory(), db-8 log )); kaha = createStore(false); kaha setIgnoreMissingJournalfiles(true); kaha setJournalMaxFileLength(1024*100); broker = createBroker(kaha); int count = receiveMessages(); assertTrue( count > 800 ); assertTrue( count < 1000 ); broker stop(); } public void testCheckCorruptionNotIgnored() throws Exception { KahaDBStore kaha = createStore(true); assertFalse(kaha isChecksumJournalFiles()); assertFalse(kaha isCheckForCorruptJournalFiles()); kaha setJournalMaxFileLength(1024*100); kaha setChecksumJournalFiles(true); BrokerService broker = createBroker(kaha); sendMessages(1000); broker stop(); assertExistsAndCorrupt(new File(kaha getDirectory(), db-4 log )); assertExistsAndCorrupt(new File(kaha getDirectory(), db-8 log )); kaha = createStore(false); kaha setJournalMaxFileLength(1024*100); kaha setChecksumJournalFiles(true); kaha setCheckForCorruptJournalFiles(true); assertFalse(kaha isIgnoreMissingJournalfiles()); try { broker = createBroker(kaha); fail( expected IOException ); } catch (IOException e) { assertTrue( e getMessage() startsWith( Detected missing/corrupt journal files ) ); } } private void assertExistsAndCorrupt(File file) throws IOException { assertTrue(file exists()); RandomAccessFile f = new RandomAccessFile(file, rw ); try { f seek(1024*5+134); f write( corruption string getBytes()); } finally { f close(); } } public void testCheckCorruptionIgnored() throws Exception { KahaDBStore kaha = createStore(true); kaha setJournalMaxFileLength(1024*100); kaha setChecksumJournalFiles(true); BrokerService broker = createBroker(kaha); sendMessages(1000); broker stop(); assertExistsAndCorrupt(new File(kaha getDirectory(), db-4 log )); assertExistsAndCorrupt(new File(kaha getDirectory(), db-8 log )); kaha = createStore(false); kaha setIgnoreMissingJournalfiles(true); kaha setJournalMaxFileLength(1024*100); kaha setChecksumJournalFiles(true); kaha setCheckForCorruptJournalFiles(true); broker = createBroker(kaha); int count = receiveMessages(); assertTrue( Expected to received a min of messages Got +count, count > 990 ); assertTrue( count < 1000 ); broker stop(); } private void assertExistsAndDelete(File file) { assertTrue(file exists()); file delete(); assertFalse(file exists()); } private void sendMessages(int count) throws JMSException { ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory( vm Connection connection = cf createConnection(); try { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(new ActiveMQQueue( TEST )); for (int i = 0; i < count; i++) { producer send(session createTextMessage(createContent(i))); } } finally { connection close(); } } private int receiveMessages() throws JMSException { int rc=0; ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory( vm Connection connection = cf createConnection(); try { connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer messageConsumer = session createConsumer(new ActiveMQQueue( TEST )); while ( messageConsumer receive(1000) !=null ) { rc++; } return rc; } finally { connection close(); } } private String createContent(int i) { StringBuilder sb = new StringBuilder(i+ ); while( sb length() < 1024 ) { sb append( * ); } return sb toString(); } }",1.0,
3123,3123,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\NoSpaceIOTest.,NoSpaceIOTest,"public class NoSpaceIOTest { private static final Logger LOG = LoggerFactory getLogger(NoSpaceIOTest class); public static void main(String[] args) throws Exception { new NoSpaceIOTest() testRunOutOfSpace(); } Ignore( needs small volume, like usb key ) Test public void testRunOutOfSpace() throws Exception { BrokerService broker = new BrokerService(); File dataDir = new File( /Volumes/NO NAME/ ); File useUpSpace = new File(dataDir, bigFile ); if (!useUpSpace exists()) { LOG info( using up some space ); RandomAccessFile filler = new RandomAccessFile(useUpSpace, rw ); filler setLength(1024*1024*1212); filler close(); File toDelete = new File(dataDir, toDelete ); filler = new RandomAccessFile(toDelete, rw ); filler setLength(1024*1024*32*10); filler close(); } broker setDataDirectoryFile(dataDir); broker start(); AtomicLong consumed = new AtomicLong(0); consume(consumed); LOG info( consumed + consumed); broker getPersistenceAdapter() checkpoint(true); AtomicLong sent = new AtomicLong(0); try { produce(sent, 200); } catch (Exception expected) { LOG info( got ex, sent + sent); } LOG info( sent + sent); System out println( Remove toDelete file and press any key to continue ); int read = System in read(); System err println( read + read); LOG info( Trying to send again + sent); try { produce(sent, 200); } catch (Exception expected) { LOG info( got ex, sent + sent); } LOG info( sent + sent); } private void consume(AtomicLong consumed) throws JMSException { Connection c = new ActiveMQConnectionFactory( vm try { c start(); Session s = c createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = s createConsumer(new ActiveMQQueue( t )); while (consumer receive(2000) != null) { consumed incrementAndGet(); } } finally { c close(); } } private void produce(AtomicLong sent, long toSend) throws JMSException { Connection c = new ActiveMQConnectionFactory( vm try { c start(); Session s = c createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = s createProducer(new ActiveMQQueue( t )); TextMessage m = s createTextMessage(); m setText(String valueOf(new char[1024*1024])); for (int i=0; i<toSend; i++) { producer send(m); sent incrementAndGet(); } } finally { c close(); } } }",1.0,
3124,3124,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\PBMesssagesTest.,PBMesssagesTest,"public class PBMesssagesTest extends TestCase { public void testKahaAddMessageCommand() throws IOException { KahaAddMessageCommand expected = new KahaAddMessageCommand(); expected setDestination(new KahaDestination() setName( Foo ) setType(DestinationType QUEUE)); expected setMessage(new Buffer(new byte[] {1,2,3,4,5,6} )); expected setMessageId( Hello World ); int size = expected serializedSizeFramed(); DataByteArrayOutputStream os = new DataByteArrayOutputStream(size + 1); os writeByte(expected type() getNumber()); expected writeFramed(os); ByteSequence seq = os toByteSequence(); DataByteArrayInputStream is = new DataByteArrayInputStream(seq); KahaEntryType type = KahaEntryType valueOf(is readByte()); JournalCommand message = (JournalCommand)type createMessage(); message mergeFramed(is); assertEquals(expected, message); } }",1.0,
3125,3125,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\TempKahaDBStoreBrokerTest.,TempKahaDBStoreBrokerTest,public class TempKahaDBStoreBrokerTest extends BrokerTest { protected BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(new File( target/activemq-data/kahadb )); kaha deleteAllMessages(); broker setPersistenceAdapter(kaha); return broker; } protected BrokerService createRestartedBroker() throws Exception { BrokerService broker = new BrokerService(); TempKahaDBStore kaha = new TempKahaDBStore(); kaha setDirectory(new File( target/activemq-data/kahadb )); broker setPersistenceAdapter(kaha); return broker; } public static Test suite() { return suite(TempKahaDBStoreBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
3127,3127,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\perf\KahaStoreDurableTopicTest.,KahaStoreDurableTopicTest,"public class KahaStoreDurableTopicTest extends SimpleDurableTopicTest { protected void configureBroker(BrokerService answer,String uri) throws Exception { File dataFileDir = new File( target/test-amq-data/perfTest/amqdb ); dataFileDir mkdirs(); KahaDBStore adaptor = new KahaDBStore(); adaptor setDirectory(dataFileDir); answer setDataDirectoryFile(dataFileDir); answer setPersistenceAdapter(adaptor); answer addConnector(uri); } }",1.0,
3128,3128,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\perf\KahaStoreQueueTest.,KahaStoreQueueTest,"public class KahaStoreQueueTest extends SimpleQueueTest { protected void configureBroker(BrokerService answer,String uri) throws Exception { File dataFileDir = new File( target/test-amq-data/perfTest/amqdb ); dataFileDir mkdirs(); answer setDeleteAllMessagesOnStartup(true); KahaDBStore adaptor = new KahaDBStore(); adaptor setDirectory(dataFileDir); answer setDataDirectoryFile(dataFileDir); answer setPersistenceAdapter(adaptor); answer addConnector(uri); } }",1.0,
3129,3129,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\perf\TempKahaStoreQueueTest.,TempKahaStoreQueueTest,"public class TempKahaStoreQueueTest extends SimpleQueueTest { protected void configureBroker(BrokerService answer,String uri) throws Exception { File dataFileDir = new File( target/test-amq-data/perfTest/temp-amqdb ); dataFileDir mkdirs(); answer setDeleteAllMessagesOnStartup(true); TempKahaDBStore adaptor = new TempKahaDBStore(); adaptor setDirectory(dataFileDir); answer setDataDirectoryFile(dataFileDir); answer setPersistenceAdapter(adaptor); answer addConnector(uri); } }",1.0,
3132,3132,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\plist\PListTest.,A,"class A implements Runnable { Override public void run() { final String threadName = Thread currentThread() getName(); try { for (int i = 0; i < iterations; i++) { PList candidate = lists[i % numLists]; Thread currentThread() setName( ALRF + candidate getName()); synchronized (plistLocks(candidate)) { Object locator = candidate addLast(String valueOf(i), payload); getFirst(candidate); assertTrue(candidate remove(locator)); } } } catch (Exception error) { LOG error( Unexpcted ex , error); error printStackTrace(); exceptions add(error); } finally { Thread currentThread() setName(threadName); } }",1.0,
3133,3133,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\plist\PListTest.,B,"class B implements Runnable { Override public void run() { final String threadName = Thread currentThread() getName(); try { for (int i = 0; i < iterations; i++) { PList candidate = lists[i % numLists]; Thread currentThread() setName( ALRF + candidate getName()); synchronized (plistLocks(candidate)) { Object locator = candidate addLast(String valueOf(i), payload); getFirst(candidate); assertTrue(candidate remove(locator)); } } } catch (Exception error) { error printStackTrace(); exceptions add(error); } finally { Thread currentThread() setName(threadName); } }",1.0,
3135,3135,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\leveldb\LevelDBStoreBrokerTest.,LevelDBStoreBrokerTest,public class LevelDBStoreBrokerTest extends BrokerTest { protected void setUp() throws Exception { this setAutoFail(true); super setUp(); } protected BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); LevelDBStore levelDBStore = new LevelDBStore(); File directory = new File( target/activemq-data/leveldb ); IOHelper deleteChildren(directory); levelDBStore setDirectory(directory); levelDBStore deleteAllMessages(); broker setPersistenceAdapter(levelDBStore); return broker; } protected BrokerService createRestartedBroker() throws Exception { BrokerService broker = new BrokerService(); KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(new File( target/activemq-data/leveldb )); broker setPersistenceAdapter(kaha); return broker; } public static Test suite() { return suite(LevelDBStoreBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
3139,3139,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest.,JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest,"public class JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest extends JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest { private static final Logger LOG = LoggerFactory getLogger(JmsTopicSendReceiveWithEmbeddedBrokerAndUserIDTest class); protected String userName = James ; protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { ActiveMQConnectionFactory answer = super createConnectionFactory(); answer setUserName(userName); return answer; } protected void configureBroker(BrokerService answer) throws Exception { answer setPopulateJMSXUserID(true); super configureBroker(answer); } protected void assertMessagesReceivedAreValid(List receivedMessages) throws JMSException { super assertMessagesReceivedAreValid(receivedMessages); for (Iterator iter = receivedMessages iterator(); iter hasNext();) { Message message = (Message)iter next(); String userID = message getStringProperty( JMSXUserID ); LOG info( Received message with userID + userID); assertEquals( JMSXUserID header , userName, userID); } } public void testSpoofedJMSXUserIdIsIgnored() throws Exception { Thread sleep(1000); messages clear(); for (int i = 0; i < data length; i++) { Message message = createMessage(i); configureMessage(message); message setStringProperty( JMSXUserID , spoofedId ); if (verbose) { LOG info( About to send a message + message + with text + data[i]); } sendMessage(i, message); } assertMessagesAreReceived(); LOG info( + data length + messages(s) received, closing down connections ); } }",1.0,
3140,3140,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\JmsTopicSendReceiveWithTwoConnectionsAndByteSelectorTest.,JmsTopicSendReceiveWithTwoConnectionsAndByteSelectorTest,"public class JmsTopicSendReceiveWithTwoConnectionsAndByteSelectorTest extends JmsTopicSendReceiveWithTwoConnectionsTest { protected void configureMessage(Message message) throws JMSException { message setByteProperty( dummy , (byte) 33); } protected MessageConsumer createConsumer() throws JMSException { return receiveSession createConsumer(consumerDestination, dummy = 33 , false); } }",1.0,
3141,3141,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest.,JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest,public class JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest extends JmsTopicSendReceiveWithTwoConnectionsTest { protected BrokerService broker; protected String bindAddress = tcp protected void setUp() throws Exception { if (broker == null) { broker = createBroker(); } super setUp(); } protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } } protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); configureBroker(answer); answer start(); return answer; } protected void configureBroker(BrokerService answer) throws Exception { answer addConnector(bindAddress); } protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory(bindAddress); } },1.0,
3143,3143,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\TemporaryDestinationToFromNameTest.,TemporaryDestinationToFromNameTest,"public class TemporaryDestinationToFromNameTest extends EmbeddedBrokerAndConnectionTestSupport { private static final Logger LOG = LoggerFactory getLogger(TemporaryDestinationToFromNameTest class); public void testCreateTemporaryQueueThenCreateAQueueFromItsName() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Queue tempQueue = session createTemporaryQueue(); String name = tempQueue getQueueName(); LOG info( Created queue named + name); Queue createdQueue = session createQueue(name); assertEquals( created queue not equal to temporary queue , tempQueue, createdQueue); } public void testCreateTemporaryTopicThenCreateATopicFromItsName() throws Exception { Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); Topic tempTopic = session createTemporaryTopic(); String name = tempTopic getTopicName(); LOG info( Created topic named + name); Topic createdTopic = session createTopic(name); assertEquals( created topic not equal to temporary topic , tempTopic, createdTopic); } }",1.0,
3144,3144,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\message\NestedMapAndListPropertyTest.,NestedMapAndListPropertyTest,"public class NestedMapAndListPropertyTest extends JmsTopicSendReceiveWithTwoConnectionsAndEmbeddedBrokerTest { private static final Logger LOG = LoggerFactory getLogger(NestedMapAndListPropertyTest class); protected void assertMessageValid(int index, Message message) throws JMSException { Object value = message getObjectProperty( textField ); assertEquals( textField , data[index], value); Map map = (Map)message getObjectProperty( mapField ); assertNotNull(map); assertEquals( mapField a , foo , map get( a )); assertEquals( mapField b , new Integer(23), map get( b )); assertEquals( mapField c , new Long(45), map get( c )); value = map get( d ); assertTrue( mapField d should be a Map , value instanceof Map); map = (Map)value; assertEquals( mapField d x , abc , map get( x )); value = map get( y ); assertTrue( mapField d y is a List , value instanceof List); List list = (List)value; LOG debug( mapField d y + list); assertEquals( listField size , 3, list size()); LOG debug( Found map + map); list = (List)message getObjectProperty( listField ); LOG debug( listField + list); assertEquals( listField size , 3, list size()); assertEquals( listField[0] , a , list get(0)); assertEquals( listField[1] , b , list get(1)); assertEquals( listField[2] , c , list get(2)); assertEquals( JohnDoe , message getStringProperty( JMSXUserID )); } protected Message createMessage(int index) throws JMSException { Message answer = session createMessage(); answer setStringProperty( textField , data[index]); Map<String, Object> grandChildMap = new HashMap<String, Object>(); grandChildMap put( x , abc ); grandChildMap put( y , Arrays asList(new Object[] { a , b , c })); Map<String, Object> nestedMap = new HashMap<String, Object>(); nestedMap put( a , foo ); nestedMap put( b , new Integer(23)); nestedMap put( c , new Long(45)); nestedMap put( d , grandChildMap); answer setObjectProperty( mapField , nestedMap); answer setObjectProperty( listField , Arrays asList(new Object[] { a , b , c })); answer setStringProperty( JMSXUserID , JohnDoe ); return answer; } }",1.0,
3146,3146,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\retroactive\DummyMessageQuery.,DummyMessageQuery,"public class DummyMessageQuery implements MessageQuery { public static final int MESSAGE COUNT = 10; private static final Logger LOG = LoggerFactory getLogger(DummyMessageQuery class); public void execute(ActiveMQDestination destination, MessageListener listener) throws Exception { LOG info( Initial query is creating + MESSAGE COUNT + messages ); for (int i = 0; i < MESSAGE COUNT; i++) { ActiveMQTextMessage message = new ActiveMQTextMessage(); message setText( Initial message + i + loaded from query ); listener onMessage(message); } } public boolean validateUpdate(Message message) { return true; } }",1.0,
3147,3147,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\retroactive\RetroactiveConsumerTestWithDestinationBasedBufferTest.,RetroactiveConsumerTestWithDestinationBasedBufferTest,public class RetroactiveConsumerTestWithDestinationBasedBufferTest extends RetroactiveConsumerTestWithSimpleMessageListTest { protected String getBrokerXml() { return org/apache/activemq/test/retroactive/activemq-fixed-destination-buffer xml ; } },1.0,
3148,3148,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\retroactive\RetroactiveConsumerTestWithLastImagePolicyWithWildcardTest.,RetroactiveConsumerTestWithLastImagePolicyWithWildcardTest,"public class RetroactiveConsumerTestWithLastImagePolicyWithWildcardTest extends RetroactiveConsumerTestWithSimpleMessageListTest { private int counter = 1; protected void sendMessage(MessageProducer producer, TextMessage message) throws JMSException { ActiveMQTopic topic = new ActiveMQTopic(destination getPhysicalName() + + (counter++)); producer send(topic, message); } protected MessageProducer createProducer() throws JMSException { return session createProducer(null); } protected MessageConsumer createConsumer() throws JMSException { return session createConsumer(new ActiveMQTopic(destination getPhysicalName() + > )); } protected String getBrokerXml() { return org/apache/activemq/test/retroactive/activemq-lastimage-policy xml ; } }",1.0,
3150,3150,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\retroactive\RetroactiveConsumerTestWithTimePolicyTest.,RetroactiveConsumerTestWithTimePolicyTest,public class RetroactiveConsumerTestWithTimePolicyTest extends RetroactiveConsumerTestWithSimpleMessageListTest { protected String getBrokerXml() { return org/apache/activemq/test/retroactive/activemq-timed-policy xml ; } },1.0,
3153,3153,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\test\rollback\DelegatingTransactionalMessageListener.,DelegatingTransactionalMessageListener,"public class DelegatingTransactionalMessageListener implements MessageListener { private static final transient Logger LOG = LoggerFactory getLogger(DelegatingTransactionalMessageListener class); private final MessageListener underlyingListener; private boolean transacted = true; private int ackMode = Session AUTO ACKNOWLEDGE; private Session session; public DelegatingTransactionalMessageListener(MessageListener underlyingListener, Connection connection, Destination destination) { this underlyingListener = underlyingListener; try { session = connection createSession(transacted, ackMode); MessageConsumer consumer = session createConsumer(destination); consumer setMessageListener(this); } catch (JMSException e) { throw new IllegalStateException( Could not listen to + destination, e); } } public void onMessage(Message message) { try { underlyingListener onMessage(message); session commit(); } catch (Throwable e) { rollback(); } } private void rollback() { try { session rollback(); } catch (JMSException e) { LOG error( Failed to rollback + e, e); } } public Session getSession() { return session; } }",1.0,
3155,3155,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\QueueClusterTest.,QueueClusterTest,public class QueueClusterTest extends TopicClusterTest { protected void setUp() throws Exception { topic = false; super setUp(); } protected int expectedReceiveCount() { return MESSAGE COUNT * NUMBER IN CLUSTER; } },1.0,
3159,3159,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\StubTransport.,StubTransport,public class StubTransport extends TransportSupport { private Queue<Object> queue = new ConcurrentLinkedQueue<Object>(); private volatile int receiveCounter; protected void doStop(ServiceStopper stopper) throws Exception { } protected void doStart() throws Exception { } public void oneway(Object command) throws IOException { receiveCounter++; queue add(command); } public Queue<Object> getQueue() { return queue; } public String getRemoteAddress() { return null; } public int getReceiveCounter() { return receiveCounter; } },1.0,
3160,3160,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\StubTransportListener.,StubTransportListener,public class StubTransportListener implements TransportListener { private Queue commands = new ConcurrentLinkedQueue(); private Queue exceptions = new ConcurrentLinkedQueue(); public Queue getCommands() { return commands; } public Queue getExceptions() { return exceptions; } public void onCommand(Object command) { commands add(command); } public void onException(IOException error) { exceptions add(error); } public void transportInterupted() { } public void transportResumed() { } },1.0,
3162,3162,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\TransportBrokerTestSupport.,TransportBrokerTestSupport,"public abstract class TransportBrokerTestSupport extends BrokerTest { protected TransportConnector connector; private ArrayList<StubConnection> connections = new ArrayList<StubConnection>(); protected void setUp() throws Exception { super setUp(); } protected BrokerService createBroker() throws Exception { BrokerService service = super createBroker(); connector = service addConnector(getBindLocation()); return service; } protected abstract String getBindLocation(); protected void tearDown() throws Exception { for (Iterator<StubConnection> iter = connections iterator(); iter hasNext();) { StubConnection connection = iter next(); connection stop(); iter remove(); } if( connector!=null ) { connector stop(); } super tearDown(); } protected URI getBindURI() throws URISyntaxException { return new URI(getBindLocation()); } protected StubConnection createConnection() throws Exception { URI bindURI = getBindURI(); URI actualURI = connector getServer() getConnectURI(); URI connectURI = new URI(actualURI getScheme(), actualURI getUserInfo(), bindURI getHost(), actualURI getPort(), actualURI getPath(), bindURI getQuery(), bindURI getFragment()); Transport transport = TransportFactory connect(connectURI); StubConnection connection = new StubConnection(transport); connections add(connection); return connection; } }",1.0,
3164,3164,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\discovery\DiscoveryNetworkReconnectTest.,NetworkBridgeObjectNameMatcher,class NetworkBridgeObjectNameMatcher<T> extends BaseMatcher<T> { T name; NetworkBridgeObjectNameMatcher(T o) { name = o; } Override public boolean matches(Object arg0) { ObjectName other = (ObjectName) arg0; ObjectName mine = (ObjectName) name; LOG info( Match + mine + vs + other); if (! networkConnectors equals(other getKeyProperty( connector ))) { return false; } return other getKeyProperty( connector ) equals(mine getKeyProperty( connector )) && other getKeyProperty( networkBridge ) != null && mine getKeyProperty( networkBridge ) != null; } Override public void describeTo(Description arg0) { arg0 appendText(this getClass() getName()); } } Before,1.0,
3167,3167,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\discovery\DiscoveryUriTest.,DiscoveryUriTest,"public class DiscoveryUriTest extends EmbeddedBrokerTestSupport { Override protected BrokerService createBroker() throws Exception { bindAddress = tcp BrokerService answer = new BrokerService(); answer setPersistent(isPersistent()); TransportConnector connector = new TransportConnector(); connector setUri(new URI(bindAddress)); connector setDiscoveryUri(new URI( multicast answer addConnector(connector); return answer; } public void testConnect() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( discovery (multicast Connection conn = factory createConnection(); conn start(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = sess createProducer(sess createQueue( test )); producer send(sess createTextMessage( test )); MessageConsumer consumer = sess createConsumer(sess createQueue( test )); Message msg = consumer receive(1000); assertNotNull(msg); } public void testFailedConnect() throws Exception { try { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( discovery (multicast Connection conn = factory createConnection(); conn start(); } catch (Exception e) { return; } fail( Expected connection failure ); } }",1.0,
3168,3168,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\discovery\ZeroconfDiscoverTransportTest.,ZeroconfDiscoverTransportTest,public class ZeroconfDiscoverTransportTest extends DiscoveryTransportBrokerTest { protected String getDiscoveryUri() { return zeroconf } },1.0,
3170,3170,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\failover\BadConnectionTest.,BadConnectionTest,"public class BadConnectionTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(BadConnectionTest class); protected Transport transport; public void testConnectingToUnavailableServer() throws Exception { try { transport asyncRequest(new ActiveMQMessage(), null); fail( This should never succeed ); } catch (IOException e) { LOG info( Caught expected exception + e, e); } } protected Transport createTransport() throws Exception { return TransportFactory connect(new URI( failover } protected void setUp() throws Exception { transport = createTransport(); transport setTransportListener(new TransportListener() { public void onCommand(Object command) { } public void onException(IOException error) { } public void transportInterupted() { } public void transportResumed() { } }); transport start(); } protected void tearDown() throws Exception { if (transport != null) { transport stop(); } } }",1.0,
3173,3173,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\failover\FailoverClusterTest.,FailoverClusterTest,"public class FailoverClusterTest extends TestCase { private static final int NUMBER = 10; private static final String BROKER BIND ADDRESS = tcp private static final String BROKER A NAME = BROKERA ; private static final String BROKER B NAME = BROKERB ; private BrokerService brokerA; private BrokerService brokerB; private String clientUrl; private final List<ActiveMQConnection> connections = new ArrayList<ActiveMQConnection>(); public void testClusterConnectedAfterClients() throws Exception { createClients(); if (brokerB == null) { brokerB = createBrokerB(BROKER BIND ADDRESS); } Thread sleep(3000); Set<String> set = new HashSet<String>(); for (ActiveMQConnection c connections) { set add(c getTransportChannel() getRemoteAddress()); } assertTrue(set size() > 1); } public void testClusterURIOptionsStrip() throws Exception { createClients(); if (brokerB == null) { brokerB = createBrokerB(BROKER BIND ADDRESS + transport closeAsync=false ); } Thread sleep(3000); Set<String> set = new HashSet<String>(); for (ActiveMQConnection c connections) { set add(c getTransportChannel() getRemoteAddress()); } assertTrue(set size() > 1); } public void testClusterConnectedBeforeClients() throws Exception { if (brokerB == null) { brokerB = createBrokerB(BROKER BIND ADDRESS); } Thread sleep(5000); createClients(); Thread sleep(2000); brokerA stop(); Thread sleep(2000); URI brokerBURI = new URI( brokerB getTransportConnectors() get(0) getPublishableConnectString()); for (ActiveMQConnection c connections) { String addr = c getTransportChannel() getRemoteAddress(); assertTrue(addr indexOf( + brokerBURI getPort()) > 0); } } Override protected void setUp() throws Exception { if (brokerA == null) { brokerA = createBrokerA(BROKER BIND ADDRESS + transport closeAsync=false ); clientUrl = failover } } Override protected void tearDown() throws Exception { for (Connection c connections) { c close(); } if (brokerB != null) { brokerB stop(); brokerB = null; } if (brokerA != null) { brokerA stop(); brokerA = null; } } protected BrokerService createBrokerA(String uri) throws Exception { BrokerService answer = new BrokerService(); answer setUseJmx(false); configureConsumerBroker(answer, uri); answer start(); return answer; } protected void configureConsumerBroker(BrokerService answer, String uri) throws Exception { answer setBrokerName(BROKER A NAME); answer setPersistent(false); TransportConnector connector = answer addConnector(uri); connector setRebalanceClusterClients(true); connector setUpdateClusterClients(true); answer setUseShutdownHook(false); } protected BrokerService createBrokerB(String uri) throws Exception { BrokerService answer = new BrokerService(); answer setUseJmx(false); configureNetwork(answer, uri); answer start(); return answer; } protected void configureNetwork(BrokerService answer, String uri) throws Exception { answer setBrokerName(BROKER B NAME); answer setPersistent(false); NetworkConnector network = answer addNetworkConnector( static network setDuplex(true); TransportConnector connector = answer addConnector(uri); connector setRebalanceClusterClients(true); connector setUpdateClusterClients(true); answer setUseShutdownHook(false); } SuppressWarnings( unused ) protected void createClients() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(clientUrl); for (int i = 0; i < NUMBER; i++) { ActiveMQConnection c = (ActiveMQConnection) factory createConnection(); c start(); Session s = c createSession(false, Session AUTO ACKNOWLEDGE); Queue queue = s createQueue(getClass() getName()); MessageConsumer consumer = s createConsumer(queue); connections add(c); } } }",1.0,
3175,3175,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\failover\FailoverComplexClusterTest.,FailoverComplexClusterTest,"public class FailoverComplexClusterTest extends FailoverClusterTestSupport { private static final String BROKER A CLIENT TC ADDRESS = tcp private static final String BROKER B CLIENT TC ADDRESS = tcp private static final String BROKER C CLIENT TC ADDRESS = tcp private static final String BROKER A NOB TC ADDRESS = tcp private static final String BROKER B NOB TC ADDRESS = tcp private static final String BROKER C NOB TC ADDRESS = tcp private static final String BROKER A NAME = BROKERA ; private static final String BROKER B NAME = BROKERB ; private static final String BROKER C NAME = BROKERC ; public void testThreeBrokerClusterSingleConnectorBasic() throws Exception { initSingleTcBroker( , null, null); Thread sleep(2000); setClientUrl( failover createClients(); Thread sleep(2000); runTests(false, null, null, null); } public void testThreeBrokerClusterSingleConnectorBackupFailoverConfig() throws Exception { initSingleTcBroker( , null, null); Thread sleep(2000); setClientUrl( failover createClients(); Thread sleep(2000); runTests(false, null, null, null); } public void testThreeBrokerClusterSingleConnectorWithParams() throws Exception { initSingleTcBroker( transport closeAsync=false , null, null); Thread sleep(2000); setClientUrl( failover createClients(); Thread sleep(2000); runTests(false, null, null, null); } public void testThreeBrokerClusterWithClusterFilter() throws Exception { initSingleTcBroker( transport closeAsync=false , null, null); Thread sleep(2000); setClientUrl( failover createClients(); runTests(false, null, * , null); } public void testThreeBrokerClusterMultipleConnectorBasic() throws Exception { initMultiTcCluster( , null); Thread sleep(2000); setClientUrl( failover createClients(); Thread sleep(2000); runTests(true, null, null, null); } public void testOriginalBrokerRestart() throws Exception { initSingleTcBroker( , null, null); Thread sleep(2000); setClientUrl( failover createClients(); Thread sleep(2000); assertClientsConnectedToThreeBrokers(); getBroker(BROKER A NAME) stop(); getBroker(BROKER A NAME) waitUntilStopped(); removeBroker(BROKER A NAME); Thread sleep(5000); assertClientsConnectedToTwoBrokers(); createBrokerA(false, null, null, null); getBroker(BROKER A NAME) waitUntilStarted(); Thread sleep(5000); assertClientsConnectedToThreeBrokers(); } public void testThreeBrokerClusterClientDistributions() throws Exception { initSingleTcBroker( , null, null); Thread sleep(2000); setClientUrl( failover createClients(100); Thread sleep(5000); runClientDistributionTests(false, null, null, null); } public void testThreeBrokerClusterDestinationFilter() throws Exception { initSingleTcBroker( , null, null); Thread sleep(2000); setClientUrl( failover createClients(); runTests(false, null, null, Queue TEST FOO > ); } private void runTests(boolean multi, String tcParams, String clusterFilter, String destinationFilter) throws Exception, InterruptedException { assertClientsConnectedToThreeBrokers(); getBroker(BROKER C NAME) stop(); getBroker(BROKER C NAME) waitUntilStopped(); removeBroker(BROKER C NAME); Thread sleep(5000); assertClientsConnectedToTwoBrokers(); createBrokerC(multi, tcParams, clusterFilter, destinationFilter); getBroker(BROKER C NAME) waitUntilStarted(); Thread sleep(5000); assertClientsConnectedToThreeBrokers(); } private void runClientDistributionTests(boolean multi, String tcParams, String clusterFilter, String destinationFilter) throws Exception, InterruptedException { assertClientsConnectedToThreeBrokers(); assertClientsConnectionsEvenlyDistributed( 25); getBroker(BROKER C NAME) stop(); getBroker(BROKER C NAME) waitUntilStopped(); removeBroker(BROKER C NAME); Thread sleep(5000); assertClientsConnectedToTwoBrokers(); assertClientsConnectionsEvenlyDistributed( 35); createBrokerC(multi, tcParams, clusterFilter, destinationFilter); getBroker(BROKER C NAME) waitUntilStarted(); Thread sleep(5000); assertClientsConnectedToThreeBrokers(); assertClientsConnectionsEvenlyDistributed( 20); } Override protected void setUp() throws Exception { } Override protected void tearDown() throws Exception { shutdownClients(); Thread sleep(2000); destroyBrokerCluster(); } private void initSingleTcBroker(String params, String clusterFilter, String destinationFilter) throws Exception { createBrokerA(false, params, clusterFilter, null); createBrokerB(false, params, clusterFilter, null); createBrokerC(false, params, clusterFilter, null); getBroker(BROKER C NAME) waitUntilStarted(); } private void initMultiTcCluster(String params, String clusterFilter) throws Exception { createBrokerA(true, params, clusterFilter, null); createBrokerB(true, params, clusterFilter, null); createBrokerC(true, params, clusterFilter, null); getBroker(BROKER C NAME) waitUntilStarted(); } private void createBrokerA(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception { final String tcParams = (params == null) params; if (getBroker(BROKER A NAME) == null) { addBroker(BROKER A NAME, createBroker(BROKER A NAME)); addTransportConnector(getBroker(BROKER A NAME), openwire , BROKER A CLIENT TC ADDRESS + tcParams, true); if (multi) { addTransportConnector(getBroker(BROKER A NAME), network , BROKER A NOB TC ADDRESS + tcParams, false); addNetworkBridge(getBroker(BROKER A NAME), A 2 B Bridge , static addNetworkBridge(getBroker(BROKER A NAME), A 2 C Bridge , static } else { addNetworkBridge(getBroker(BROKER A NAME), A 2 B Bridge , static addNetworkBridge(getBroker(BROKER A NAME), A 2 C Bridge , static } getBroker(BROKER A NAME) start(); } } private void createBrokerB(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception { final String tcParams = (params == null) params; if (getBroker(BROKER B NAME) == null) { addBroker(BROKER B NAME, createBroker(BROKER B NAME)); addTransportConnector(getBroker(BROKER B NAME), openwire , BROKER B CLIENT TC ADDRESS + tcParams, true); if (multi) { addTransportConnector(getBroker(BROKER B NAME), network , BROKER B NOB TC ADDRESS + tcParams, false); addNetworkBridge(getBroker(BROKER B NAME), B 2 A Bridge , static addNetworkBridge(getBroker(BROKER B NAME), B 2 C Bridge , static } else { addNetworkBridge(getBroker(BROKER B NAME), B 2 A Bridge , static addNetworkBridge(getBroker(BROKER B NAME), B 2 C Bridge , static } getBroker(BROKER B NAME) start(); } } private void createBrokerC(boolean multi, String params, String clusterFilter, String destinationFilter) throws Exception { final String tcParams = (params == null) params; if (getBroker(BROKER C NAME) == null) { addBroker(BROKER C NAME, createBroker(BROKER C NAME)); addTransportConnector(getBroker(BROKER C NAME), openwire , BROKER C CLIENT TC ADDRESS + tcParams, true); if (multi) { addTransportConnector(getBroker(BROKER C NAME), network , BROKER C NOB TC ADDRESS + tcParams, false); addNetworkBridge(getBroker(BROKER C NAME), C 2 A Bridge , static addNetworkBridge(getBroker(BROKER C NAME), C 2 B Bridge , static } else { addNetworkBridge(getBroker(BROKER C NAME), C 2 A Bridge , static addNetworkBridge(getBroker(BROKER C NAME), C 2 B Bridge , static } getBroker(BROKER C NAME) start(); } } }",1.0,
3179,3179,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\failover\FailoverConsumerUnconsumedTest.,TestConsumer,"class TestConsumer extends ActiveMQMessageConsumer { TestConsumer(Session consumerSession, Destination destination, ActiveMQConnection connection) throws Exception { super((ActiveMQSession) consumerSession, new ConsumerId(new SessionId(connection getConnectionInfo() getConnectionId(),1), nextGen()), ActiveMQMessageTransformation transformDestination(destination), null, , prefetch, -1, false, false, true, null); } public int unconsumedSize() { return unconsumedMessages size(); } }",1.0,
3180,3180,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\failover\FailoverDuplicateTest.,FailoverDuplicateTest,"public class FailoverDuplicateTest extends TestSupport { private static final Logger LOG = LoggerFactory getLogger(FailoverDuplicateTest class); private static final String QUEUE NAME = TestQueue ; private static final String TRANSPORT URI = tcp private String url; BrokerService broker; public void tearDown() throws Exception { stopBroker(); } public void stopBroker() throws Exception { if (broker != null) { broker stop(); } } private void startCleanBroker() throws Exception { startBroker(true); } public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception { broker = createBroker(deleteAllMessagesOnStartup); broker start(); } public void startBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception { broker = createBroker(deleteAllMessagesOnStartup, bindAddress); broker start(); } public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception { return createBroker(deleteAllMessagesOnStartup, TRANSPORT URI); } public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception { broker = new BrokerService(); broker setUseJmx(false); broker setAdvisorySupport(false); broker addConnector(bindAddress); broker setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup); url = broker getTransportConnectors() get(0) getConnectUri() toString(); return broker; } public void configureConnectionFactory(ActiveMQConnectionFactory factory) { factory setAuditMaximumProducerNumber(2048); factory setOptimizeAcknowledge(true); } SuppressWarnings( unchecked ) public void testFailoverSendReplyLost() throws Exception { broker = createBroker(true); setDefaultPersistenceAdapter(broker); final CountDownLatch gotMessageLatch = new CountDownLatch(1); final CountDownLatch producersDone = new CountDownLatch(1); final AtomicBoolean first = new AtomicBoolean(false); broker setPlugins(new BrokerPlugin[]{ new BrokerPluginSupport() { Override public void send(final ProducerBrokerExchange producerExchange, org apache activemq command Message messageSend) throws Exception { super send(producerExchange, messageSend); if (first compareAndSet(false, true)) { producerExchange getConnectionContext() setDontSendReponse(true); Executors newSingleThreadExecutor() execute(new Runnable() { public void run() { try { LOG info( Waiting for recepit ); assertTrue( message received on time , gotMessageLatch await(60, TimeUnit SECONDS)); assertTrue( new producers done on time , producersDone await(120, TimeUnit SECONDS)); LOG info( Stopping connection post send and receive and multiple producers ); producerExchange getConnectionContext() getConnection() stop(); } catch (Exception e) { e printStackTrace(); } } }); } } } }); broker start(); ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory( failover ( + url + ) jms watchTopicAdvisories=false ); configureConnectionFactory(cf); Connection sendConnection = cf createConnection(); sendConnection start(); final Session sendSession = sendConnection createSession(false, Session AUTO ACKNOWLEDGE); final Queue destination = sendSession createQueue(QUEUE NAME); final AtomicInteger receivedCount = new AtomicInteger(); MessageListener listener = new MessageListener() { Override public void onMessage(Message message) { gotMessageLatch countDown(); receivedCount incrementAndGet(); } }; Connection receiveConnection; Session receiveSession = null; receiveConnection = cf createConnection(); receiveConnection start(); receiveSession = receiveConnection createSession(false, Session AUTO ACKNOWLEDGE); receiveSession createConsumer(destination) setMessageListener(listener); final CountDownLatch sendDoneLatch = new CountDownLatch(1); Executors newSingleThreadExecutor() execute(new Runnable() { public void run() { LOG info( doing async send ); try { produceMessage(sendSession, destination, will resend , 1); } catch (JMSException e) { LOG error( got send exception , e); fail( got unexpected send exception + e); } sendDoneLatch countDown(); LOG info( done async send ); } }); assertTrue( one message got through on time , gotMessageLatch await(20, TimeUnit SECONDS)); final int numProducers = 1050; final int numPerProducer = 2; final int totalSent = numPerProducer * numProducers + 1; for (int i=0; i<numProducers; i++) { produceMessage(receiveSession, destination, new producer + i, numPerProducer); if (i == 1025) { LOG info( count down producers done ); producersDone countDown(); } } assertTrue( message sent complete through failover , sendDoneLatch await(30, TimeUnit SECONDS)); Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { LOG info( received count + receivedCount get()); return totalSent <= receivedCount get(); } }); assertEquals( we got all produced messages , totalSent, receivedCount get()); sendConnection close(); receiveConnection close(); assertEquals( expect all messages are dequeued with one duplicate , totalSent +1, ((RegionBroker) broker getRegionBroker()) getDestinationStatistics() getEnqueues() getCount()); Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { LOG info( dequeues + ((RegionBroker) broker getRegionBroker()) getDestinationStatistics() getDequeues() getCount()); return totalSent + 1 <= ((RegionBroker) broker getRegionBroker()) getDestinationStatistics() getDequeues() getCount(); } }); assertEquals( dequeue correct, including duplicate dispatch auto acked , totalSent + 1, ((RegionBroker) broker getRegionBroker()) getDestinationStatistics() getDequeues() getCount()); broker stop(); broker waitUntilStopped(); LOG info( Checking for remaining/hung messages with second restart ); broker = createBroker(false, url); setDefaultPersistenceAdapter(broker); broker start(); cf = new ActiveMQConnectionFactory( failover ( + url + ) ); configureConnectionFactory(cf); sendConnection = cf createConnection(); sendConnection start(); Session session2 = sendConnection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = session2 createConsumer(destination); Message msg = consumer receive(1000); if (msg == null) { msg = consumer receive(5000); } assertNull( no messges left dangling but got + msg, msg); sendConnection close(); } private void produceMessage(final Session producerSession, Queue destination, final String text, final int count) throws JMSException { MessageProducer producer = producerSession createProducer(destination); for (int i=0; i<count; i++) { TextMessage message = producerSession createTextMessage(text + , count + i); producer send(message); } producer close(); } }",1.0,
3181,3181,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\failover\FailoverPrefetchZeroTest.,FailoverPrefetchZeroTest,"public class FailoverPrefetchZeroTest { private static final Logger LOG = LoggerFactory getLogger(FailoverPrefetchZeroTest class); private static final String QUEUE NAME = FailoverPrefetchZero ; private static final String TRANSPORT URI = tcp private String url; final int prefetch = 0; BrokerService broker; After public void stopBroker() throws Exception { if (broker != null) { broker stop(); } } public void startBroker(boolean deleteAllMessagesOnStartup) throws Exception { broker = createBroker(deleteAllMessagesOnStartup); broker start(); } public BrokerService createBroker(boolean deleteAllMessagesOnStartup) throws Exception { return createBroker(deleteAllMessagesOnStartup, TRANSPORT URI); } public BrokerService createBroker(boolean deleteAllMessagesOnStartup, String bindAddress) throws Exception { broker = new BrokerService(); broker addConnector(bindAddress); broker setDeleteAllMessagesOnStartup(deleteAllMessagesOnStartup); url = broker getTransportConnectors() get(0) getConnectUri() toString(); return broker; } SuppressWarnings( unchecked ) Test public void testPrefetchZeroConsumerThroughRestart() throws Exception { broker = createBroker(true); final CountDownLatch pullDone = new CountDownLatch(1); broker setPlugins(new BrokerPlugin[]{ new BrokerPluginSupport() { Override public Response messagePull(ConnectionContext context, final MessagePull pull) throws Exception { context setDontSendReponse(true); pullDone countDown(); Executors newSingleThreadExecutor() execute(new Runnable() { public void run() { LOG info( Stopping broker on pull + pull); try { broker stop(); } catch (Exception e) { e printStackTrace(); } } }); return null; } } }); broker start(); ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory( failover ( + url + ) ); cf setWatchTopicAdvisories(false); final ActiveMQConnection connection = (ActiveMQConnection) cf createConnection(); connection start(); final Session consumerSession = connection createSession(false, Session AUTO ACKNOWLEDGE); final Queue destination = consumerSession createQueue(QUEUE NAME + consumer prefetchSize= + prefetch); final MessageConsumer consumer = consumerSession createConsumer(destination); produceMessage(consumerSession, destination, 1); final CountDownLatch receiveDone = new CountDownLatch(1); final Vector<Message> received = new Vector<Message>(); Executors newSingleThreadExecutor() execute(new Runnable() { public void run() { try { LOG info( receive one ); Message msg = consumer receive(30000); if (msg != null) { received add(msg); } receiveDone countDown(); LOG info( done receive ); } catch (Exception e) { e printStackTrace(); } } }); assertTrue( pull completed on broker , pullDone await(30, TimeUnit SECONDS)); broker waitUntilStopped(); broker = createBroker(false, url); broker start(); assertTrue( receive completed through failover , receiveDone await(30, TimeUnit SECONDS)); assertTrue( we got our message , !received isEmpty()); connection close(); } private void produceMessage(final Session producerSession, Queue destination, long count) throws JMSException { MessageProducer producer = producerSession createProducer(destination); for (int i = 0; i < count; i++) { TextMessage message = producerSession createTextMessage( Test message + i); producer send(message); } producer close(); } }",1.0,
3197,3197,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\failover\SlowConnectionTest.,MockBroker,class MockBroker extends Thread { ServerSocket ss = null; public MockBroker() { super( MockBroker ); } public void run() { List<Socket> inProgress = new ArrayList<Socket>(); ServerSocketFactory factory = ServerSocketFactory getDefault(); try { ss = factory createServerSocket(0); ss setSoTimeout(5000); socketReadyLatch countDown(); while (!interrupted()) { inProgress add(ss accept()); } } catch (java net SocketTimeoutException expected) { } catch (Exception e) { e printStackTrace(); } finally { try { ss close(); } catch (IOException ignored) {} for (Socket s inProgress) { try { s close(); } catch (IOException ignored) {} } } } },1.0,
3203,3203,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\nio\NIOPersistentSendAndReceiveTest.,NIOPersistentSendAndReceiveTest,public class NIOPersistentSendAndReceiveTest extends NIOJmsSendAndReceiveTest { protected BrokerService broker; protected void setUp() throws Exception { this topic = false; this deliveryMode = DeliveryMode PERSISTENT; super setUp(); } protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setPersistent(true); answer addConnector(getBrokerURL()); return answer; } },1.0,
3206,3206,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\nio\NIOSSLTransportBrokerTest.,NIOSSLTransportBrokerTest,"public class NIOSSLTransportBrokerTest extends TransportBrokerTestSupport { public static final String KEYSTORE TYPE = jks ; public static final String PASSWORD = password ; public static final String SERVER KEYSTORE = src/test/resources/server keystore ; public static final String TRUST KEYSTORE = src/test/resources/client keystore ; protected String getBindLocation() { return nio+ssl } Override protected URI getBindURI() throws URISyntaxException { return new URI( nio+ssl } protected void setUp() throws Exception { System setProperty( javax net ssl trustStore , TRUST KEYSTORE); System setProperty( javax net ssl trustStorePassword , PASSWORD); System setProperty( javax net ssl trustStoreType , KEYSTORE TYPE); System setProperty( javax net ssl keyStore , SERVER KEYSTORE); System setProperty( javax net ssl keyStoreType , KEYSTORE TYPE); System setProperty( javax net ssl keyStorePassword , PASSWORD); maxWait = 10000; super setUp(); } Override protected void tearDown() throws Exception { super tearDown(); } public static Test suite() { return suite(NIOSSLTransportBrokerTest class); } public static void main(String[] args) { TestRunner run(suite()); } }",1.0,
3207,3207,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\nio\NIOTransportBrokerTest.,NIOTransportBrokerTest,public class NIOTransportBrokerTest extends TransportBrokerTestSupport { protected String getBindLocation() { return nio } public static Test suite() { return suite(NIOTransportBrokerTest class); } public static void main(String[] args) { TestRunner run(suite()); } },1.0,
3210,3210,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\reliable\UnreliableCommandDatagramChannel.,UnreliableCommandDatagramChannel,"public class UnreliableCommandDatagramChannel extends CommandDatagramChannel { private static final Logger LOG = LoggerFactory getLogger(UnreliableCommandDatagramChannel class); private DropCommandStrategy dropCommandStrategy; public UnreliableCommandDatagramChannel(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller, ReplayBuffer replayBuffer, DatagramChannel channel, ByteBufferPool bufferPool, DropCommandStrategy strategy) { super(transport, wireFormat, datagramSize, targetAddress, headerMarshaller, channel, bufferPool); this dropCommandStrategy = strategy; } protected void sendWriteBuffer(int commandId, SocketAddress address, ByteBuffer writeBuffer, boolean redelivery) throws IOException { if (dropCommandStrategy shouldDropCommand(commandId, address, redelivery)) { writeBuffer flip(); LOG info( Dropping datagram with command + commandId); getReplayBuffer() addBuffer(commandId, writeBuffer); } else { super sendWriteBuffer(commandId, address, writeBuffer, redelivery); } } }",1.0,
3211,3211,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\reliable\UnreliableCommandDatagramSocket.,UnreliableCommandDatagramSocket,"public class UnreliableCommandDatagramSocket extends CommandDatagramSocket { private static final Logger LOG = LoggerFactory getLogger(UnreliableCommandDatagramSocket class); private DropCommandStrategy dropCommandStrategy; public UnreliableCommandDatagramSocket(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller, DatagramSocket channel, DropCommandStrategy strategy) { super(transport, wireFormat, datagramSize, targetAddress, headerMarshaller, channel); this dropCommandStrategy = strategy; } protected void sendWriteBuffer(int commandId, SocketAddress address, byte[] data, boolean redelivery) throws IOException { if (dropCommandStrategy shouldDropCommand(commandId, address, redelivery)) { LOG info( Dropping datagram with command + commandId); ReplayBuffer bufferCache = getReplayBuffer(); if (bufferCache != null && !redelivery) { bufferCache addBuffer(commandId, data); } } else { super sendWriteBuffer(commandId, address, data, redelivery); } } }",1.0,
3212,3212,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\reliable\UnreliableUdpTransport.,UnreliableUdpTransport,"public class UnreliableUdpTransport extends UdpTransport { private DropCommandStrategy dropCommandStrategy; public UnreliableUdpTransport(OpenWireFormat wireFormat, int port) throws UnknownHostException, IOException { super(wireFormat, port); } public UnreliableUdpTransport(OpenWireFormat wireFormat, SocketAddress socketAddress) throws IOException { super(wireFormat, socketAddress); } public UnreliableUdpTransport(OpenWireFormat wireFormat, URI remoteLocation) throws UnknownHostException, IOException { super(wireFormat, remoteLocation); } public UnreliableUdpTransport(OpenWireFormat wireFormat) throws IOException { super(wireFormat); } public DropCommandStrategy getDropCommandStrategy() { return dropCommandStrategy; } public void setDropCommandStrategy(DropCommandStrategy dropCommandStrategy) { this dropCommandStrategy = dropCommandStrategy; } protected CommandChannel createCommandDatagramChannel() { return new UnreliableCommandDatagramChannel(this, getWireFormat(), getDatagramSize(), getTargetAddress(), createDatagramHeaderMarshaller(), getReplayBuffer(), getChannel(), getBufferPool(), dropCommandStrategy); } }",1.0,
3214,3214,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\InactivityMonitorTest.,InactivityMonitorTest,"public class InactivityMonitorTest extends CombinationTestSupport implements TransportAcceptListener { private static final Logger LOG = LoggerFactory getLogger(InactivityMonitorTest class); public Runnable serverRunOnCommand; public Runnable clientRunOnCommand; private TransportServer server; private Transport clientTransport; private Transport serverTransport; private int serverPort; private final AtomicInteger clientReceiveCount = new AtomicInteger(0); private final AtomicInteger clientErrorCount = new AtomicInteger(0); private final AtomicInteger serverReceiveCount = new AtomicInteger(0); private final AtomicInteger serverErrorCount = new AtomicInteger(0); private final AtomicBoolean ignoreClientError = new AtomicBoolean(false); private final AtomicBoolean ignoreServerError = new AtomicBoolean(false); protected void setUp() throws Exception { super setUp(); startTransportServer(); } private void startClient() throws Exception, URISyntaxException { clientTransport = TransportFactory connect(new URI( tcp clientTransport setTransportListener(new TransportListener() { public void onCommand(Object command) { clientReceiveCount incrementAndGet(); if (clientRunOnCommand != null) { clientRunOnCommand run(); } } public void onException(IOException error) { if (!ignoreClientError get()) { LOG info( Client transport error ); error printStackTrace(); clientErrorCount incrementAndGet(); } } public void transportInterupted() { } public void transportResumed() { } }); clientTransport start(); } private void startTransportServer() throws IOException, URISyntaxException, Exception { server = TransportFactory bind(new URI( tcp server setAcceptListener(this); server start(); serverPort = server getSocketAddress() getPort(); } protected void tearDown() throws Exception { ignoreClientError set(true); ignoreServerError set(true); try { if (clientTransport != null) { clientTransport stop(); } if (serverTransport != null) { serverTransport stop(); } if (server != null) { server stop(); } } catch (Throwable e) { e printStackTrace(); } super tearDown(); } public void onAccept(Transport transport) { try { LOG info( [ + getName() + ] Server Accepted a Connection ); serverTransport = transport; serverTransport setTransportListener(new TransportListener() { public void onCommand(Object command) { serverReceiveCount incrementAndGet(); if (serverRunOnCommand != null) { serverRunOnCommand run(); } } public void onException(IOException error) { if (!ignoreClientError get()) { LOG info( Server transport error , error); serverErrorCount incrementAndGet(); } } public void transportInterupted() { } public void transportResumed() { } }); serverTransport start(); } catch (Exception e) { e printStackTrace(); } } public void onAcceptError(Exception error) { LOG trace(error toString()); } public void testClientHang() throws Exception { clientTransport = new TcpTransport(new OpenWireFormat(), SocketFactory getDefault(), new URI( tcp clientTransport setTransportListener(new TransportListener() { public void onCommand(Object command) { clientReceiveCount incrementAndGet(); if (clientRunOnCommand != null) { clientRunOnCommand run(); } } public void onException(IOException error) { if (!ignoreClientError get()) { LOG info( Client transport error ); error printStackTrace(); clientErrorCount incrementAndGet(); } } public void transportInterupted() { } public void transportResumed() { } }); clientTransport start(); WireFormatInfo info = new WireFormatInfo(); info setVersion(OpenWireFormat DEFAULT VERSION); info setMaxInactivityDuration(1000); clientTransport oneway(info); assertEquals(0, serverErrorCount get()); assertEquals(0, clientErrorCount get()); Thread sleep(6000); assertEquals(0, clientErrorCount get()); assertTrue(serverErrorCount get() > 0); } public void testNoClientHang() throws Exception { startClient(); assertEquals(0, serverErrorCount get()); assertEquals(0, clientErrorCount get()); Thread sleep(4000); assertEquals(0, clientErrorCount get()); assertEquals(0, serverErrorCount get()); } public void initCombosForTestNoClientHangWithServerBlock() throws Exception { startClient(); addCombinationValues( clientInactivityLimit , new Object[] {Long valueOf(1000)}); addCombinationValues( serverInactivityLimit , new Object[] {Long valueOf(1000)}); addCombinationValues( serverRunOnCommand , new Object[] {new Runnable() { public void run() { try { LOG info( Sleeping ); Thread sleep(4000); } catch (InterruptedException e) { } } }}); } public void testNoClientHangWithServerBlock() throws Exception { startClient(); assertEquals(0, serverErrorCount get()); assertEquals(0, clientErrorCount get()); Thread sleep(4000); assertEquals(0, clientErrorCount get()); assertEquals(0, serverErrorCount get()); } }",1.0,
3215,3215,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\QualityOfServiceUtilsTest.,QualityOfServiceUtilsTest,"public class QualityOfServiceUtilsTest extends TestCase { private int ECN; Override protected void setUp() throws Exception { Socket socket = new Socket(); ECN = socket getTrafficClass() & Integer parseInt( 00000011 , 2); } Override protected void tearDown() throws Exception { super tearDown(); } public void testValidDiffServIntegerValues() { int[] values = {0, 1, 32, 62, 63}; for (int val values) { testValidDiffServIntegerValue(val); } } public void testInvalidDiffServIntegerValues() { int[] values = {-2, -1, 64, 65}; for (int val values) { testInvalidDiffServIntegerValue(val); } } public void testValidDiffServNames() { Map<String, Integer> namesToExpected = new HashMap<String, Integer>(); namesToExpected put( CS0 , Integer valueOf( 000000 , 2)); namesToExpected put( CS1 , Integer valueOf( 001000 , 2)); namesToExpected put( CS2 , Integer valueOf( 010000 , 2)); namesToExpected put( CS3 , Integer valueOf( 011000 , 2)); namesToExpected put( CS4 , Integer valueOf( 100000 , 2)); namesToExpected put( CS5 , Integer valueOf( 101000 , 2)); namesToExpected put( CS6 , Integer valueOf( 110000 , 2)); namesToExpected put( CS7 , Integer valueOf( 111000 , 2)); namesToExpected put( EF , Integer valueOf( 101110 , 2)); namesToExpected put( AF11 , Integer valueOf( 001010 , 2)); namesToExpected put( AF12 , Integer valueOf( 001100 , 2)); namesToExpected put( AF13 , Integer valueOf( 001110 , 2)); namesToExpected put( AF21 , Integer valueOf( 010010 , 2)); namesToExpected put( AF22 , Integer valueOf( 010100 , 2)); namesToExpected put( AF23 , Integer valueOf( 010110 , 2)); namesToExpected put( AF31 , Integer valueOf( 011010 , 2)); namesToExpected put( AF32 , Integer valueOf( 011100 , 2)); namesToExpected put( AF33 , Integer valueOf( 011110 , 2)); namesToExpected put( AF41 , Integer valueOf( 100010 , 2)); namesToExpected put( AF42 , Integer valueOf( 100100 , 2)); namesToExpected put( AF43 , Integer valueOf( 100110 , 2)); for (String name namesToExpected keySet()) { testValidDiffServName(name, namesToExpected get(name)); } } public void testInvalidDiffServNames() { String[] names = { hello world , , abcd }; for (String name names) { testInvalidDiffServName(name); } } private void testValidDiffServName(String name, int expected) { int dscp = -1; try { dscp = QualityOfServiceUtils getDSCP(name); } catch (IllegalArgumentException e) { fail( IllegalArgumentException thrown for valid Differentiated + Services name + name); } assertEquals( Incorrect Differentiated Services Code Point + dscp + returned for name + name + , ECN | (expected << 2), dscp); } private void testInvalidDiffServName(String name) { try { int dscp = QualityOfServiceUtils getDSCP(name); fail( No IllegalArgumentException thrown for invalid Differentiated + Services value + name + ); } catch (IllegalArgumentException e) { } } private void testValidDiffServIntegerValue(int val) { try { int dscp = QualityOfServiceUtils getDSCP(Integer toString(val)); assertEquals( Incorrect Differentiated Services Code Point + returned for value + val + , ECN | (val << 2), dscp); } catch (IllegalArgumentException e) { fail( IllegalArgumentException thrown for valid Differentiated + Services value + val); } } private void testInvalidDiffServIntegerValue(int val) { try { int dscp = QualityOfServiceUtils getDSCP(Integer toString(val)); fail( No IllegalArgumentException thrown for invalid + Differentiated Services value + val + ); } catch (IllegalArgumentException expected) { } } public void testValidTypeOfServiceValues() { int[] values = {0, 1, 32, 100, 255}; for (int val values) { testValidTypeOfServiceValue(val); } } public void testInvalidTypeOfServiceValues() { int[] values = {-2, -1, 256, 257}; for (int val values) { testInvalidTypeOfServiceValue(val); } } private void testValidTypeOfServiceValue(int val) { try { int typeOfService = QualityOfServiceUtils getToS(val); assertEquals( Incorrect Type of Services value returned for + val + , val, typeOfService); } catch (IllegalArgumentException e) { fail( IllegalArgumentException thrown for valid Type of Service + value + val + ); } } private void testInvalidTypeOfServiceValue(int val) { try { int typeOfService = QualityOfServiceUtils getToS(val); fail( No IllegalArgumentException thrown for invalid + Type of Service value + val + ); } catch (IllegalArgumentException expected) { } } }",1.0,
3216,3216,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\ServerSocketTstFactory.,ServerSocketTstFactory,"public class ServerSocketTstFactory extends ServerSocketFactory { private static final Logger LOG = LoggerFactory getLogger(ServerSocketTstFactory class); private class ServerSocketTst { private final ServerSocket socket; public ServerSocketTst(int port, Random rnd) throws IOException { this socket = ServerSocketFactory getDefault() createServerSocket(port); } public ServerSocketTst(int port, int backlog, Random rnd) throws IOException { this socket = ServerSocketFactory getDefault() createServerSocket(port, backlog); } public ServerSocketTst(int port, int backlog, InetAddress bindAddr, Random rnd) throws IOException { this socket = ServerSocketFactory getDefault() createServerSocket(port, backlog, bindAddr); } public ServerSocket getSocket() { return this socket; } }; private final Random rnd; public ServerSocketTstFactory() { super(); LOG info( Creating a new ServerSocketTstFactory ); this rnd = new Random(); } public ServerSocket createServerSocket(int port) throws IOException { ServerSocketTst sSock = new ServerSocketTst(port, this rnd); return sSock getSocket(); } public ServerSocket createServerSocket(int port, int backlog) throws IOException { ServerSocketTst sSock = new ServerSocketTst(port, backlog, this rnd); return sSock getSocket(); } public ServerSocket createServerSocket(int port, int backlog, InetAddress ifAddress) throws IOException { ServerSocketTst sSock = new ServerSocketTst(port, backlog, ifAddress, this rnd); return sSock getSocket(); } private final static ServerSocketTstFactory server = new ServerSocketTstFactory(); public static ServerSocketTstFactory getDefault() { return server; } }",1.0,
3217,3217,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\ServerSocketTstFactory.,ServerSocketTst,"private class ServerSocketTst { private final ServerSocket socket; public ServerSocketTst(int port, Random rnd) throws IOException { this socket = ServerSocketFactory getDefault() createServerSocket(port); } public ServerSocketTst(int port, int backlog, Random rnd) throws IOException { this socket = ServerSocketFactory getDefault() createServerSocket(port, backlog); } public ServerSocketTst(int port, int backlog, InetAddress bindAddr, Random rnd) throws IOException { this socket = ServerSocketFactory getDefault() createServerSocket(port, backlog, bindAddr); } public ServerSocket getSocket() { return this socket; } };",1.0,
3218,3218,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SocketTstFactory.,SocketTstFactory,"public class SocketTstFactory extends SocketFactory { private static final Logger LOG = LoggerFactory getLogger(SocketTstFactory class); private static final ConcurrentHashMap<InetAddress, Integer> closeIter = new ConcurrentHashMap<InetAddress, Integer>(); private class SocketTst { private class Bagot implements Runnable { private Thread processus; private Random rnd; private Socket socket; private final InetAddress address; public Bagot(Random rnd, Socket socket, InetAddress address) { this processus = new Thread(this, Network Faults maker undefined ); this rnd = rnd; this socket = socket; this address = address; } public void start() { this processus setName( Network Faults maker + this socket toString()); this processus start(); } public void run () { int lastDelayVal; Integer lastDelay; while (!this processus isInterrupted()) { if (!this socket isClosed()) { try { lastDelay = closeIter get(this address); if (lastDelay == null) { lastDelayVal = 0; } else { lastDelayVal = lastDelay intValue(); if (lastDelayVal > 10) lastDelayVal += 20; else lastDelayVal += 1; } lastDelay = new Integer(lastDelayVal); LOG info( Trying to close client socket + socket toString() + in + lastDelayVal + milliseconds ); try { Thread sleep(lastDelayVal); } catch (InterruptedException e) { this processus interrupt(); Thread currentThread() interrupt(); } catch (IllegalArgumentException e) { } this socket close(); closeIter put(this address, lastDelay); LOG info( Client socket + this socket toString() + is closed ); } catch (IOException e) { } } this processus interrupt(); } } } private final Bagot bagot; private final Socket socket; public SocketTst(InetAddress address, int port, Random rnd) throws IOException { this socket = new Socket(address, port); bagot = new Bagot(rnd, this socket, address); } public SocketTst(InetAddress address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException { this socket = new Socket(address, port, localAddr, localPort); bagot = new Bagot(rnd, this socket, address); } public SocketTst(String address, int port, Random rnd) throws UnknownHostException, IOException { this socket = new Socket(address, port); bagot = new Bagot(rnd, this socket, InetAddress getByName(address)); } public SocketTst(String address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException { this socket = new Socket(address, port, localAddr, localPort); bagot = new Bagot(rnd, this socket, InetAddress getByName(address)); } public Socket getSocket() { return this socket; } public void startBagot() { bagot start(); } }; private final Random rnd; public SocketTstFactory() { super(); LOG info( Creating a new SocketTstFactory ); this rnd = new Random(); } public Socket createSocket(InetAddress host, int port) throws IOException { SocketTst sockTst; sockTst = new SocketTst(host, port, this rnd); sockTst startBagot(); return sockTst getSocket(); } public Socket createSocket(InetAddress host, int port, InetAddress localAddress, int localPort) throws IOException { SocketTst sockTst; sockTst = new SocketTst(host, port, localAddress, localPort, this rnd); sockTst startBagot(); return sockTst getSocket(); } public Socket createSocket(String host, int port) throws IOException { SocketTst sockTst; sockTst = new SocketTst(host, port, this rnd); sockTst startBagot(); return sockTst getSocket(); } public Socket createSocket(String host, int port, InetAddress localAddress, int localPort) throws IOException { SocketTst sockTst; sockTst = new SocketTst(host, port, localAddress, localPort, this rnd); sockTst startBagot(); return sockTst getSocket(); } private final static SocketTstFactory client = new SocketTstFactory(); public static SocketFactory getDefault() { return client; } }",1.0,
3219,3219,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SocketTstFactory.,SocketTst,"private class SocketTst { private class Bagot implements Runnable { private Thread processus; private Random rnd; private Socket socket; private final InetAddress address; public Bagot(Random rnd, Socket socket, InetAddress address) { this processus = new Thread(this, Network Faults maker undefined ); this rnd = rnd; this socket = socket; this address = address; } public void start() { this processus setName( Network Faults maker + this socket toString()); this processus start(); } public void run () { int lastDelayVal; Integer lastDelay; while (!this processus isInterrupted()) { if (!this socket isClosed()) { try { lastDelay = closeIter get(this address); if (lastDelay == null) { lastDelayVal = 0; } else { lastDelayVal = lastDelay intValue(); if (lastDelayVal > 10) lastDelayVal += 20; else lastDelayVal += 1; } lastDelay = new Integer(lastDelayVal); LOG info( Trying to close client socket + socket toString() + in + lastDelayVal + milliseconds ); try { Thread sleep(lastDelayVal); } catch (InterruptedException e) { this processus interrupt(); Thread currentThread() interrupt(); } catch (IllegalArgumentException e) { } this socket close(); closeIter put(this address, lastDelay); LOG info( Client socket + this socket toString() + is closed ); } catch (IOException e) { } } this processus interrupt(); } } } private final Bagot bagot; private final Socket socket; public SocketTst(InetAddress address, int port, Random rnd) throws IOException { this socket = new Socket(address, port); bagot = new Bagot(rnd, this socket, address); } public SocketTst(InetAddress address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException { this socket = new Socket(address, port, localAddr, localPort); bagot = new Bagot(rnd, this socket, address); } public SocketTst(String address, int port, Random rnd) throws UnknownHostException, IOException { this socket = new Socket(address, port); bagot = new Bagot(rnd, this socket, InetAddress getByName(address)); } public SocketTst(String address, int port, InetAddress localAddr, int localPort, Random rnd) throws IOException { this socket = new Socket(address, port, localAddr, localPort); bagot = new Bagot(rnd, this socket, InetAddress getByName(address)); } public Socket getSocket() { return this socket; } public void startBagot() { bagot start(); } };",1.0,
3220,3220,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SocketTstFactory.,Bagot,"private class Bagot implements Runnable { private Thread processus; private Random rnd; private Socket socket; private final InetAddress address; public Bagot(Random rnd, Socket socket, InetAddress address) { this processus = new Thread(this, Network Faults maker undefined ); this rnd = rnd; this socket = socket; this address = address; } public void start() { this processus setName( Network Faults maker + this socket toString()); this processus start(); } public void run () { int lastDelayVal; Integer lastDelay; while (!this processus isInterrupted()) { if (!this socket isClosed()) { try { lastDelay = closeIter get(this address); if (lastDelay == null) { lastDelayVal = 0; } else { lastDelayVal = lastDelay intValue(); if (lastDelayVal > 10) lastDelayVal += 20; else lastDelayVal += 1; } lastDelay = new Integer(lastDelayVal); LOG info( Trying to close client socket + socket toString() + in + lastDelayVal + milliseconds ); try { Thread sleep(lastDelayVal); } catch (InterruptedException e) { this processus interrupt(); Thread currentThread() interrupt(); } catch (IllegalArgumentException e) { } this socket close(); closeIter put(this address, lastDelay); LOG info( Client socket + this socket toString() + is closed ); } catch (IOException e) { } } this processus interrupt(); } } }",1.0,
3221,3221,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslBrokerServiceTest.,SslBrokerServiceTest,"public class SslBrokerServiceTest extends TransportBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(SslBrokerServiceTest class); TransportConnector needClientAuthConnector; TransportConnector limitedCipherSuites; protected String getBindLocation() { return ssl } Override protected BrokerService createBroker() throws Exception { System setProperty( sun security ssl allowUnsafeRenegotiation , true ); SslBrokerService service = new SslBrokerService(); service setPersistent(false); KeyManager[] km = getKeyManager(); TrustManager[] tm = getTrustManager(); connector = service addSslConnector(getBindLocation(), km, tm, null); limitedCipherSuites = service addSslConnector( ssl needClientAuthConnector = service addSslConnector( ssl SslTransportFactory sslFactory = new SslTransportFactory(); SslContext ctx = new SslContext(km, tm, null); SslContext setCurrentSslContext(ctx); TransportFactory registerTransportFactory( ssl , sslFactory); return service; } public void testNeedClientAuth() throws Exception { SSLContext context = SSLContext getInstance( TLS ); context init(null, getTrustManager(), null); try { makeSSLConnection(context, null, needClientAuthConnector); fail( expected failure on no client cert ); } catch (SSLException expected) { expected printStackTrace(); } makeSSLConnection(context, null, connector); } public void testCipherSuitesDisabled() throws Exception { SSLContext context = SSLContext getInstance( TLS ); context init(getKeyManager(), getTrustManager(), null); try { makeSSLConnection(context, new String[]{ SSL RSA WITH RC4 128 MD5 }, limitedCipherSuites); fail( expected failure on non allowed cipher suite ); } catch (SSLException expectedOnNotAnAvailableSuite) { } makeSSLConnection(context, new String[]{ SSL RSA WITH RC4 128 SHA }, limitedCipherSuites); } private void makeSSLConnection(SSLContext context, String enabledSuites[], TransportConnector connector) throws Exception, UnknownHostException, SocketException { SSLSocket sslSocket = (SSLSocket) context getSocketFactory() createSocket( localhost , connector getUri() getPort()); if (enabledSuites != null) { sslSocket setEnabledCipherSuites(enabledSuites); } sslSocket setSoTimeout(5000); SSLSession session = sslSocket getSession(); sslSocket startHandshake(); LOG info( cyphersuite + session getCipherSuite()); LOG info( peer port + session getPeerPort()); LOG info( peer cert + session getPeerCertificateChain()[0] toString()); } public static TrustManager[] getTrustManager() throws Exception { TrustManager[] trustStoreManagers = null; KeyStore trustedCertStore = KeyStore getInstance(SslTransportBrokerTest KEYSTORE TYPE); trustedCertStore load(new FileInputStream(SslTransportBrokerTest TRUST KEYSTORE), null); TrustManagerFactory tmf = TrustManagerFactory getInstance(TrustManagerFactory getDefaultAlgorithm()); tmf init(trustedCertStore); trustStoreManagers = tmf getTrustManagers(); return trustStoreManagers; } public static KeyManager[] getKeyManager() throws Exception { KeyManagerFactory kmf = KeyManagerFactory getInstance(KeyManagerFactory getDefaultAlgorithm()); KeyStore ks = KeyStore getInstance(SslTransportBrokerTest KEYSTORE TYPE); KeyManager[] keystoreManagers = null; byte[] sslCert = loadClientCredential(SslTransportBrokerTest SERVER KEYSTORE); if (sslCert != null && sslCert length > 0) { ByteArrayInputStream bin = new ByteArrayInputStream(sslCert); ks load(bin, SslTransportBrokerTest PASSWORD toCharArray()); kmf init(ks, SslTransportBrokerTest PASSWORD toCharArray()); keystoreManagers = kmf getKeyManagers(); } return keystoreManagers; } private static byte[] loadClientCredential(String fileName) throws IOException { if (fileName == null) { return null; } FileInputStream in = new FileInputStream(fileName); ByteArrayOutputStream out = new ByteArrayOutputStream(); byte[] buf = new byte[512]; int i = in read(buf); while (i > 0) { out write(buf, 0, i); i = in read(buf); } in close(); return out toByteArray(); } protected void setUp() throws Exception { maxWait = 10000; super setUp(); } public static Test suite() { return suite(SslBrokerServiceTest class); } public static void main(String[] args) { TestRunner run(suite()); } }",1.0,
3222,3222,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslContextBrokerServiceTest.,SslContextBrokerServiceTest,public class SslContextBrokerServiceTest extends TestCase { private ClassPathXmlApplicationContext context; private BrokerService broker; private TransportConnector connector; public void testConfiguration() throws URISyntaxException { assertNotNull(broker); assertNotNull(connector); assertEquals(new URI( ssl assertNotNull(broker getSslContext()); assertFalse(broker getSslContext() getKeyManagers() isEmpty()); assertFalse(broker getSslContext() getTrustManagers() isEmpty()); } protected void setUp() throws Exception { Thread currentThread() setContextClassLoader(SslContextBrokerServiceTest class getClassLoader()); context = new ClassPathXmlApplicationContext( org/apache/activemq/transport/tcp/activemq-ssl xml ); Map beansOfType = context getBeansOfType(BrokerService class); broker = (BrokerService)beansOfType values() iterator() next(); connector = broker getTransportConnectors() get(0); } Override protected void tearDown() throws Exception { context destroy(); } },1.0,
3224,3224,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslContextNBrokerServiceTest.,CertChainCatcher,"class CertChainCatcher implements X509TrustManager { X509Certificate[] serverCerts; public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException { } public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException { serverCerts = arg0; } public X509Certificate[] getAcceptedIssuers() { return null; } }",1.0,
3225,3225,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslSocketHelper.,SslSocketHelper,"public final class SslSocketHelper { private SslSocketHelper() { } public static SSLSocket createSSLSocket(String certDistinguishedName, boolean wantAuth, boolean needAuth) throws IOException { JMXPrincipal principal = new JMXPrincipal(certDistinguishedName); X509Certificate cert = new StubX509Certificate(principal); StubSSLSession sslSession = new StubSSLSession(cert); StubSSLSocket sslSocket = new StubSSLSocket(sslSession); sslSocket setWantClientAuth(wantAuth); sslSocket setNeedClientAuth(needAuth); return sslSocket; } }",1.0,
3226,3226,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslTransportBrokerTest.,SslTransportBrokerTest,"public class SslTransportBrokerTest extends TransportBrokerTestSupport { public static final String KEYSTORE TYPE = jks ; public static final String PASSWORD = password ; public static final String SERVER KEYSTORE = src/test/resources/server keystore ; public static final String TRUST KEYSTORE = src/test/resources/client keystore ; protected String getBindLocation() { return ssl } Override protected URI getBindURI() throws URISyntaxException { return new URI( ssl } protected void setUp() throws Exception { System setProperty( javax net ssl trustStore , TRUST KEYSTORE); System setProperty( javax net ssl trustStorePassword , PASSWORD); System setProperty( javax net ssl trustStoreType , KEYSTORE TYPE); System setProperty( javax net ssl keyStore , SERVER KEYSTORE); System setProperty( javax net ssl keyStorePassword , PASSWORD); System setProperty( javax net ssl keyStoreType , KEYSTORE TYPE); maxWait = 10000; super setUp(); } public static Test suite() { return suite(SslTransportBrokerTest class); } public static void main(String[] args) { TestRunner run(suite()); } }",1.0,
3227,3227,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslTransportFactoryTest.,SslTransportFactoryTest,"public class SslTransportFactoryTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(SslTransportFactoryTest class); private SslTransportFactory factory; private boolean verbose; protected void setUp() throws Exception { factory = new SslTransportFactory(); } protected void tearDown() throws Exception { super tearDown(); } public void testBindServerOptions() throws IOException { SslTransportServer sslTransportServer = null; for (int i = 0; i < 4; ++i) { final boolean wantClientAuth = (i & 0x1) == 1; final boolean needClientAuth = (i & 0x2) == 1; String options = wantClientAuth= + (wantClientAuth true false ) + &needClientAuth= + (needClientAuth true false ); try { sslTransportServer = (SslTransportServer)factory doBind(new URI( ssl + options)); } catch (Exception e) { fail( Unable to bind to address + e getMessage()); } assertEquals( Created ServerSocket did not have correct wantClientAuth status , sslTransportServer getWantClientAuth(), wantClientAuth); assertEquals( Created ServerSocket did not have correct needClientAuth status , sslTransportServer getNeedClientAuth(), needClientAuth); try { sslTransportServer stop(); } catch (Exception e) { fail( Unable to stop TransportServer + e getMessage()); } } } private int getMthNaryDigit(int number, int digitIdx, int numBase) { return (number / ((int)Math pow(numBase, digitIdx))) % numBase; } public void testCompositeConfigure() throws IOException { int optionSettings[] = new int[5]; String optionNames[] = { wantClientAuth , needClientAuth , socket wantClientAuth , socket needClientAuth , socket useClientMode }; for (int i = 0; i < 243; ++i) { Map<String, String> options = new HashMap<String, String>(); for (int j = 0; j < 5; ++j) { optionSettings[j] = getMthNaryDigit(i, j, 3) - 1; if (optionSettings[j] != -1) { options put(optionNames[j], optionSettings[j] == 1 true false ); } } StubSSLSocket socketStub = new StubSSLSocket(null); StubSslTransport transport = null; try { transport = new StubSslTransport(null, socketStub); } catch (Exception e) { fail( Unable to create StubSslTransport + e getMessage()); } if (verbose) { LOG info( ); LOG info( Iteration + i); LOG info( Map settings + options); for (int x = 0; x < optionSettings length; x++) { LOG info( optionSetting[ + x + ] = + optionSettings[x]); } } factory compositeConfigure(transport, new OpenWireFormat(), options); try { transport start(); } catch (Exception e) { } if (socketStub getWantClientAuthStatus() != optionSettings[2]) { LOG info( sheiite ); } assertEquals( wantClientAuth was not properly set for iteration + i, optionSettings[0], transport getWantClientAuthStatus()); assertEquals( needClientAuth was not properly set for iteration + i, optionSettings[1], transport getNeedClientAuthStatus()); assertEquals( socket wantClientAuth was not properly set for iteration + i, optionSettings[2], socketStub getWantClientAuthStatus()); assertEquals( socket needClientAuth was not properly set for iteration + i, optionSettings[3], socketStub getNeedClientAuthStatus()); assertEquals( socket useClientMode was not properly set for iteration + i, optionSettings[4], socketStub getUseClientModeStatus()); } } }",1.0,
3228,3228,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslTransportServerTest.,SslTransportServerTest,"public class SslTransportServerTest extends TestCase { private SslTransportServer sslTransportServer; private StubSSLServerSocket sslServerSocket; protected void setUp() throws Exception { } protected void tearDown() throws Exception { super tearDown(); } private void createAndBindTransportServer(boolean wantClientAuth, boolean needClientAuth, String options) throws IOException { sslServerSocket = new StubSSLServerSocket(); StubSSLSocketFactory socketFactory = new StubSSLSocketFactory(sslServerSocket); try { sslTransportServer = new SslTransportServer(null, new URI( ssl } catch (Exception e) { fail( Unable to create SslTransportServer ); } sslTransportServer setWantClientAuth(wantClientAuth); sslTransportServer setNeedClientAuth(needClientAuth); sslTransportServer bind(); } public void testWantAndNeedClientAuthSetters() throws IOException { for (int i = 0; i < 4; ++i) { String options = ; singleTest(i, options); } } public void testWantAndNeedAuthReflection() throws IOException { for (int i = 0; i < 4; ++i) { String options = wantClientAuth= + (getWantClientAuth(i) true false ) + &needClientAuth= + (getNeedClientAuth(i) true false ); singleTest(i, options); } } private void singleTest(int i, String options) throws IOException { final boolean wantClientAuth = getWantClientAuth(i); final boolean needClientAuth = getNeedClientAuth(i); final int expectedWantStatus = (needClientAuth StubSSLServerSocket UNTOUCHED wantClientAuth StubSSLServerSocket TRUE StubSSLServerSocket UNTOUCHED); final int expectedNeedStatus = (needClientAuth StubSSLServerSocket TRUE StubSSLServerSocket UNTOUCHED ); createAndBindTransportServer(wantClientAuth, needClientAuth, options); assertEquals( Created ServerSocket did not have correct wantClientAuth status wantClientAuth + wantClientAuth + , needClientAuth + needClientAuth, expectedWantStatus, sslServerSocket getWantClientAuthStatus()); assertEquals( Created ServerSocket did not have correct needClientAuth status wantClientAuth + wantClientAuth + , needClientAuth + needClientAuth, expectedNeedStatus, sslServerSocket getNeedClientAuthStatus()); } private boolean getNeedClientAuth(int i) { return ((i & 0x2) == 0x2); } private boolean getWantClientAuth(int i) { return ((i & 0x1) == 0x1); } }",1.0,
3229,3229,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslTransportTest.,SslTransportTest,"public class SslTransportTest extends TestCase { SSLSocket sslSocket; StubTransportListener stubListener; String username; String password; String certDistinguishedName; protected void setUp() throws Exception { certDistinguishedName = ThisNameIsDistinguished ; username = SomeUserName ; password = SomePassword ; } protected void tearDown() throws Exception { super tearDown(); } private void createTransportAndConsume(boolean wantAuth, boolean needAuth) throws IOException { JMXPrincipal principal = new JMXPrincipal(certDistinguishedName); X509Certificate cert = new StubX509Certificate(principal); StubSSLSession sslSession = new StubSSLSession(cert); sslSocket = new StubSSLSocket(sslSession); sslSocket setWantClientAuth(wantAuth); sslSocket setNeedClientAuth(needAuth); SslTransport transport = new SslTransport(new ObjectStreamWireFormat(), sslSocket); stubListener = new StubTransportListener(); transport setTransportListener(stubListener); ConnectionInfo sentInfo = new ConnectionInfo(); sentInfo setUserName(username); sentInfo setPassword(password); transport doConsume(sentInfo); } public void testKeepClientUserName() throws IOException { createTransportAndConsume(true, true); final ConnectionInfo receivedInfo = (ConnectionInfo)stubListener getCommands() remove(); X509Certificate receivedCert; try { receivedCert = ((X509Certificate[])receivedInfo getTransportContext())[0]; } catch (Exception e) { receivedCert = null; } if (receivedCert == null) { fail( Transmitted certificate chain was not attached to ConnectionInfo ); } assertEquals( Received certificate distinguished name did not match the one transmitted , certDistinguishedName, receivedCert getSubjectDN() getName()); } }",1.0,
3231,3231,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\StubSSLSession.,StubSSLSession,"class StubSSLSession implements SSLSession { X509Certificate cert; boolean isVerified; public StubSSLSession(X509Certificate cert) { if (cert != null) { this isVerified = true; this cert = cert; } else { this isVerified = false; this cert = null; } } public void setIsVerified(boolean verified) { this isVerified = verified; } public Certificate[] getPeerCertificates() throws SSLPeerUnverifiedException { if (this isVerified) { return new X509Certificate[] {this cert}; } else { throw new SSLPeerUnverifiedException( Socket is unverified ); } } public byte[] getId() { return null; } public SSLSessionContext getSessionContext() { return null; } public long getCreationTime() { return 0; } public long getLastAccessedTime() { return 0; } public void invalidate() { } public boolean isValid() { return false; } public void putValue(String arg0, Object arg1) { } public Object getValue(String arg0) { return null; } public void removeValue(String arg0) { } public String[] getValueNames() { return null; } public Certificate[] getLocalCertificates() { return null; } public javax security cert X509Certificate[] getPeerCertificateChain() throws SSLPeerUnverifiedException { return null; } public Principal getPeerPrincipal() throws SSLPeerUnverifiedException { return null; } public Principal getLocalPrincipal() { return null; } public String getCipherSuite() { return null; } public String getProtocol() { return null; } public String getPeerHost() { return null; } public int getPeerPort() { return 0; } public int getPacketBufferSize() { return 0; } public int getApplicationBufferSize() { return 0; } }",1.0,
3232,3232,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\StubSSLSocket.,StubSSLSocket,public class StubSSLSocket extends SSLSocket { public static final int UNTOUCHED = -1; public static final int FALSE = 0; public static final int TRUE = 1; private int wantClientAuthStatus = UNTOUCHED; private int needClientAuthStatus = UNTOUCHED; private int useClientModeStatus = UNTOUCHED; private final StubSSLSession session; public StubSSLSocket(StubSSLSession ses) { this session = ses; } public void setWantClientAuth(boolean arg0) { this wantClientAuthStatus = arg0 TRUE FALSE; } public void setNeedClientAuth(boolean arg0) { this needClientAuthStatus = arg0 TRUE FALSE; if (session != null) { this session setIsVerified(arg0); } } public void setUseClientMode(boolean arg0) { useClientModeStatus = arg0 TRUE FALSE; } public boolean getWantClientAuth() { return wantClientAuthStatus == TRUE; } public boolean getNeedClientAuth() { return needClientAuthStatus == TRUE; } public boolean getUseClientMode() { return useClientModeStatus == TRUE; } public int getWantClientAuthStatus() { return wantClientAuthStatus; } public int getNeedClientAuthStatus() { return needClientAuthStatus; } public int getUseClientModeStatus() { return useClientModeStatus; } public SSLSession getSession() { return this session; } public String[] getSupportedCipherSuites() { return null; } public String[] getEnabledCipherSuites() { return null; } public void setEnabledCipherSuites(String[] arg0) { } public String[] getSupportedProtocols() { return null; } public String[] getEnabledProtocols() { return null; } public void setEnabledProtocols(String[] arg0) { } public void addHandshakeCompletedListener(HandshakeCompletedListener arg0) { } public void removeHandshakeCompletedListener(HandshakeCompletedListener arg0) { } public void startHandshake() throws IOException { } public void setEnableSessionCreation(boolean arg0) { } public boolean getEnableSessionCreation() { return false; } },1.0,
3233,3233,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\StubSSLSocketFactory.,StubSSLSocketFactory,"public class StubSSLSocketFactory extends SSLServerSocketFactory { private final ServerSocket retServerSocket; public StubSSLSocketFactory(ServerSocket returnServerSocket) { retServerSocket = returnServerSocket; } public ServerSocket createServerSocket(int arg0) throws IOException { return retServerSocket; } public ServerSocket createServerSocket(int arg0, int arg1) throws IOException { return retServerSocket; } public ServerSocket createServerSocket(int arg0, int arg1, InetAddress arg2) throws IOException { return retServerSocket; } public String[] getDefaultCipherSuites() { return null; } public String[] getSupportedCipherSuites() { return null; } }",1.0,
3234,3234,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\StubSslTransport.,StubSslTransport,"public class StubSslTransport extends SslTransport { public static final int UNTOUCHED = -1; public static final int FALSE = 0; public static final int TRUE = 1; private int wantClientAuthStatus = UNTOUCHED; private int needClientAuthStatus = UNTOUCHED; public StubSslTransport(WireFormat wireFormat, SSLSocket socket) throws Exception { super(wireFormat, socket); } public void setWantClientAuth(boolean arg0) { this wantClientAuthStatus = arg0 TRUE FALSE; } public void setNeedClientAuth(boolean arg0) { this needClientAuthStatus = arg0 TRUE FALSE; } public int getWantClientAuthStatus() { return wantClientAuthStatus; } public int getNeedClientAuthStatus() { return needClientAuthStatus; } }",1.0,
3235,3235,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\StubX509Certificate.,StubX509Certificate,"public class StubX509Certificate extends X509Certificate { private final Principal id; public StubX509Certificate(Principal id) { this id = id; } public Principal getSubjectDN() { return this id; } public void checkValidity() { } public void checkValidity(Date arg0) { } public int getVersion() { return 0; } public BigInteger getSerialNumber() { return null; } public Principal getIssuerDN() { return null; } public Date getNotBefore() { return null; } public Date getNotAfter() { return null; } public byte[] getTBSCertificate() { return null; } public byte[] getSignature() { return null; } public String getSigAlgName() { return null; } public String getSigAlgOID() { return null; } public byte[] getSigAlgParams() { return null; } public boolean[] getIssuerUniqueID() { return null; } public boolean[] getSubjectUniqueID() { return null; } public boolean[] getKeyUsage() { return null; } public int getBasicConstraints() { return 0; } public byte[] getEncoded() { return null; } public void verify(PublicKey arg0) { } public void verify(PublicKey arg0, String arg1) { } public String toString() { return null; } public PublicKey getPublicKey() { return null; } public boolean hasUnsupportedCriticalExtension() { return false; } SuppressWarnings({ unchecked , rawtypes }) public Set getCriticalExtensionOIDs() { return null; } SuppressWarnings({ unchecked , rawtypes }) public Set getNonCriticalExtensionOIDs() { return null; } public byte[] getExtensionValue(String arg0) { return null; } }",1.0,
3236,3236,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\TcpFaultyTransport.,TcpFaultyTransport,"public class TcpFaultyTransport extends TcpTransport implements Transport, Service, Runnable { public TcpFaultyTransport(WireFormat wireFormat, SocketFactory socketFactory, URI remoteLocation, URI localLocation) throws UnknownHostException, IOException { super(wireFormat, socketFactory, remoteLocation, localLocation); } public String toString() { return tcpfaulty } }",1.0,
3237,3237,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\TcpFaultyTransportFactory.,TcpFaultyTransportFactory,"public class TcpFaultyTransportFactory extends TcpTransportFactory { private static final Logger LOG = LoggerFactory getLogger(TcpFaultyTransportFactory class); protected TcpFaultyTransport createTcpFaultyTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new TcpFaultyTransport(wf, socketFactory, location, localLocation); } protected Transport createTransport(URI location, WireFormat wf) throws UnknownHostException, IOException { URI localLocation = null; String path = location getPath(); if (path != null && path length() > 0) { int localPortIndex = path indexOf( ); try { Integer parseInt(path substring(localPortIndex + 1, path length())); String localString = location getScheme() + / + path; localLocation = new URI(localString); } catch (Exception e) { LOG warn( path isn t a valid local location for TcpTransport to use , e); } } SocketFactory socketFactory = createSocketFactory(); return createTcpFaultyTransport(wf, socketFactory, location, localLocation); } protected TcpFaultyTransportServer createTcpFaultyTransportServer(final URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpFaultyTransportServer(this, location, serverSocketFactory); } public TransportServer doBind(final URI location) throws IOException { try { Map<String, String> options = new HashMap<String, String>(URISupport parseParameters(location)); ServerSocketFactory serverSocketFactory = createServerSocketFactory(); TcpFaultyTransportServer server = createTcpFaultyTransportServer(location, serverSocketFactory); server setWireFormatFactory(createWireFormatFactory(options)); IntrospectionSupport setProperties(server, options); Map<String, Object> transportOptions = IntrospectionSupport extractProperties(options, transport ); server setTransportOption(transportOptions); server bind(); return server; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } protected SocketFactory createSocketFactory() throws IOException { return SocketTstFactory getDefault(); } protected ServerSocketFactory createServerSocketFactory() throws IOException { return ServerSocketTstFactory getDefault(); } }",1.0,
3238,3238,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\TcpFaultyTransportServer.,TcpFaultyTransportServer,"public class TcpFaultyTransportServer extends TcpTransportServer implements ServiceListener{ public TcpFaultyTransportServer(TcpFaultyTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { super(transportFactory, location, serverSocketFactory); } public String toString() { return + getBindLocation(); } }",1.0,
3239,3239,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\TcpTransportBindTest.,TcpTransportBindTest,"public class TcpTransportBindTest extends EmbeddedBrokerTestSupport { final String addr = tcp protected void setUp() throws Exception { bindAddress = addr + transport reuseAddress=true&transport soTimeout=1000 ; super setUp(); } public void testConnect() throws Exception { Connection connection = new ActiveMQConnectionFactory(addr) createConnection(); connection start(); } public void testReceiveThrowsException() throws Exception { Connection connection = new ActiveMQConnectionFactory(addr) createConnection(); connection start(); Session sess = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = sess createConsumer(createDestination()); class StopTask extends TimerTask { public void run() { try { broker stop(); } catch (Exception e) { e printStackTrace(); } } } Timer timer = new Timer(); timer schedule(new StopTask(), 1000); try { consumer receive(30000); fail( Should have thrown an exception ); } catch (Exception e) { } } }",1.0,
3240,3240,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\TcpTransportBindTest.,StopTask,class StopTask extends TimerTask { public void run() { try { broker stop(); } catch (Exception e) { e printStackTrace(); } } },1.0,
3241,3241,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\TcpTransportBrokerTest.,TcpTransportBrokerTest,public class TcpTransportBrokerTest extends TransportBrokerTestSupport { protected String getBindLocation() { return tcp } protected void setUp() throws Exception { maxWait = 2000; super setUp(); } public static Test suite() { return suite(TcpTransportBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
3242,3242,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\TcpTransportServerTest.,TcpTransportServerTest,"public class TcpTransportServerTest extends TestCase{ public void testDefaultPropertiesSetOnTransport() throws Exception { TcpTransportServer server = (TcpTransportServer) TransportFactory bind(new URI( tcp server setTransportOption(new HashMap<String, Object>()); server setAcceptListener(new TransportAcceptListener() { Override public void onAccept(Transport transport) { assertTrue( This transport does not have a TransportLogger!! , hasTransportLogger(transport)); } Override public void onAcceptError(Exception error) { fail( Should not have received an error! ); } }); server start(); Socket socket = new Socket( localhost , 61616); server handleSocket(socket); server stop(); } private boolean hasTransportLogger(Transport transport) { boolean end = false; Transport current = transport; while(!end) { if (current instanceof TransportFilter) { TransportFilter filter = (TransportFilter) current; if(filter instanceof TransportLogger){ return true; } current = filter getNext(); } else { end = true; } } return false; } }",1.0,
3243,3243,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\TransportUriTest.,TransportUriTest,"public class TransportUriTest extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(TransportUriTest class); private static final String DIFF SERV = &diffServ= ; private static final String TOS = &typeOfService= ; protected Connection connection; public String prefix; public String postfix; public void initCombosForTestUriOptionsWork() { initSharedCombos(); } public void testUriOptionsWork() throws Exception { String uri = prefix + bindAddress + postfix; LOG info( Connecting via + uri); connection = new ActiveMQConnectionFactory(uri) createConnection(); connection start(); } public void initCombosForTestValidDiffServOptionsWork() { initSharedCombos(); } public void testValidDiffServOptionsWork() throws Exception { String[] validIntegerOptions = { 0 , 1 , 32 , 62 , 63 }; for (String opt validIntegerOptions) { testValidOptionsWork(DIFF SERV + opt, ); } String[] validNameOptions = { CS0 , CS1 , CS2 , CS3 , CS4 , CS5 , CS6 , CS7 , EF , AF11 , AF12 , AF13 , AF21 , AF22 , AF23 , AF31 , AF32 , AF33 , AF41 , AF42 , AF43 }; for (String opt validNameOptions) { testValidOptionsWork(DIFF SERV + opt, ); } } public void initCombosForTestInvalidDiffServOptionDoesNotWork() { initSharedCombos(); } public void testInvalidDiffServOptionsDoesNotWork() throws Exception { String[] invalidIntegerOptions = { -2 , -1 , 64 , 65 , 100 , 255 }; for (String opt invalidIntegerOptions) { testInvalidOptionsDoNotWork(DIFF SERV + opt, ); } String[] invalidNameOptions = { hi , , A , AF , -AF21 }; for (String opt invalidNameOptions) { testInvalidOptionsDoNotWork(DIFF SERV + opt, ); } } public void initCombosForTestValidTypeOfServiceOptionsWork() { initSharedCombos(); } public void testValidTypeOfServiceOptionsWork() throws Exception { int[] validOptions = {0, 1, 32, 100, 254, 255}; for (int opt validOptions) { testValidOptionsWork(TOS + opt, ); } } public void initCombosForTestInvalidTypeOfServiceOptionDoesNotWork() { initSharedCombos(); } public void testInvalidTypeOfServiceOptionDoesNotWork() throws Exception { int[] invalidOptions = {-2, -1, 256, 257}; for (int opt invalidOptions) { testInvalidOptionsDoNotWork(TOS + opt, ); } } public void initCombosForTestDiffServAndTypeOfServiceMutuallyExclusive() { initSharedCombos(); } public void testDiffServAndTypeServiceMutuallyExclusive() { String msg = It should not be possible to set both Differentiated + Services and Type of Service options on the same connection + URI ; testInvalidOptionsDoNotWork(TOS + 32 + DIFF SERV, msg); testInvalidOptionsDoNotWork(DIFF SERV + 32 + TOS + 32, msg); } public void initCombosForTestBadVersionNumberDoesNotWork() { initSharedCombos(); } public void testBadVersionNumberDoesNotWork() throws Exception { testInvalidOptionsDoNotWork( &minmumWireFormatVersion=65535 , ); } public void initCombosForTestBadPropertyNameFails() { initSharedCombos(); } public void testBadPropertyNameFails() throws Exception { testInvalidOptionsDoNotWork( &cheese=abc , ); } private void initSharedCombos() { addCombinationValues( prefix , new Object[] { }); addCombinationValues( postfix , new Object[] { tcpNoDelay=true&keepAlive=true&soLinger=0 }); addCombinationValues( postfix , new Object[] { tcpNoDelay=true&keepAlive=true&soLinger=-1 }); } private void testValidOptionsWork(String options, String msg) { String uri = prefix + bindAddress + postfix + options; LOG info( Connecting via + uri); try { connection = new ActiveMQConnectionFactory(uri) createConnection(); connection start(); } catch (Exception unexpected) { fail( Valid options + options + on URI + uri + should + not have caused an exception to be thrown + msg + Exception + unexpected); } } private void testInvalidOptionsDoNotWork(String options, String msg) { String uri = prefix + bindAddress + postfix + options; LOG info( Connecting via + uri); try { connection = new ActiveMQConnectionFactory(uri) createConnection(); connection start(); fail( Invalid options + options + on URI + uri + should + have caused an exception to be thrown + msg); } catch (Exception expected) { } } Override protected void setUp() throws Exception { bindAddress = tcp super setUp(); } Override protected void tearDown() throws Exception { if (connection != null) { try { connection close(); } catch (JMSException e) { e printStackTrace(); } } super tearDown(); } Override protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setUseJmx(false); answer setPersistent(isPersistent()); answer addConnector(bindAddress); return answer; } public static Test suite() { return suite(TransportUriTest class); } }",1.0,
3244,3244,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\WireformatNegociationTest.,WireformatNegociationTest,"public class WireformatNegociationTest extends CombinationTestSupport { private static final Logger LOG = LoggerFactory getLogger(WireformatNegociationTest class); private TransportServer server; private Transport clientTransport; private Transport serverTransport; private final AtomicReference<WireFormatInfo> clientWF = new AtomicReference<WireFormatInfo>(); private final AtomicReference<WireFormatInfo> serverWF = new AtomicReference<WireFormatInfo>(); private final AtomicReference<Exception> asyncError = new AtomicReference<Exception>(); private final AtomicBoolean ignoreAsycError = new AtomicBoolean(); private final CountDownLatch negociationCounter = new CountDownLatch(2); protected void setUp() throws Exception { super setUp(); } private void startClient(String uri) throws Exception, URISyntaxException { clientTransport = TransportFactory connect(new URI(uri)); clientTransport setTransportListener(new TransportListener() { public void onCommand(Object command) { if (command instanceof WireFormatInfo) { clientWF set((WireFormatInfo)command); negociationCounter countDown(); } } public void onException(IOException error) { if (!ignoreAsycError get()) { LOG info( Client transport error , error); asyncError set(error); negociationCounter countDown(); } } public void transportInterupted() { } public void transportResumed() { } }); clientTransport start(); } private void startServer(String uri) throws IOException, URISyntaxException, Exception { server = TransportFactory bind(new URI(uri)); server setAcceptListener(new TransportAcceptListener() { public void onAccept(Transport transport) { try { LOG info( [ + getName() + ] Server Accepted a Connection ); serverTransport = transport; serverTransport setTransportListener(new TransportListener() { public void onCommand(Object command) { if (command instanceof WireFormatInfo) { serverWF set((WireFormatInfo)command); negociationCounter countDown(); } } public void onException(IOException error) { if (!ignoreAsycError get()) { LOG info( Server transport error , error); asyncError set(error); negociationCounter countDown(); } } public void transportInterupted() { } public void transportResumed() { } }); serverTransport start(); } catch (Exception e) { e printStackTrace(); } } public void onAcceptError(Exception error) { error printStackTrace(); } }); server start(); } protected void tearDown() throws Exception { ignoreAsycError set(true); try { if (clientTransport != null) { clientTransport stop(); } if (serverTransport != null) { serverTransport stop(); } if (server != null) { server stop(); } } catch (Throwable e) { e printStackTrace(); } super tearDown(); } public void testWireFormatInfoSeverVersion1() throws Exception { startServer( tcp startClient( tcp assertTrue( Connect timeout , negociationCounter await(10, TimeUnit SECONDS)); assertNull( Async error + asyncError, asyncError get()); assertNotNull(clientWF get()); assertEquals(1, clientWF get() getVersion()); assertNotNull(serverWF get()); assertEquals(1, serverWF get() getVersion()); } public void testWireFormatInfoClientVersion1() throws Exception { startServer( tcp startClient( tcp assertTrue( Connect timeout , negociationCounter await(10, TimeUnit SECONDS)); assertNull( Async error + asyncError, asyncError get()); assertNotNull(clientWF get()); assertEquals(1, clientWF get() getVersion()); assertNotNull(serverWF get()); assertEquals(1, serverWF get() getVersion()); } public void testWireFormatInfoCurrentVersion() throws Exception { startServer( tcp startClient( tcp assertTrue( Connect timeout , negociationCounter await(10, TimeUnit SECONDS)); assertNull( Async error + asyncError, asyncError get()); assertNotNull(clientWF get()); assertEquals(CommandTypes PROTOCOL VERSION, clientWF get() getVersion()); assertNotNull(serverWF get()); assertEquals(CommandTypes PROTOCOL VERSION, serverWF get() getVersion()); } public void testWireFormatInactivityDurationInitialDelay() throws Exception { startServer( tcp startClient( tcp assertTrue( Connect timeout , negociationCounter await(10, TimeUnit SECONDS)); assertNull( Async error + asyncError, asyncError get()); assertNotNull(clientWF get()); assertEquals(CommandTypes PROTOCOL VERSION, clientWF get() getVersion()); assertNotNull(serverWF get()); assertEquals(CommandTypes PROTOCOL VERSION, serverWF get() getVersion()); } public void testWireFormatMaxFrameSize() throws Exception { startServer( tcp startClient( tcp assertTrue( Connect timeout , negociationCounter await(10, TimeUnit SECONDS)); assertNull( Async error + asyncError, asyncError get()); assertNotNull(clientWF get()); assertEquals(1048576, clientWF get() getMaxFrameSize()); assertNotNull(serverWF get()); assertEquals(1048576, serverWF get() getMaxFrameSize()); } }",1.0,
3245,3245,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\udp\UdpSendReceiveWithTwoConnectionsAndLargeMessagesTest.,UdpSendReceiveWithTwoConnectionsAndLargeMessagesTest,public class UdpSendReceiveWithTwoConnectionsAndLargeMessagesTest extends UdpSendReceiveWithTwoConnectionsTest { protected void setUp() throws Exception { largeMessages = true; messageCount = 2; super setUp(); } },1.0,
3246,3246,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\udp\UdpSendReceiveWithTwoConnectionsTest.,UdpSendReceiveWithTwoConnectionsTest,public class UdpSendReceiveWithTwoConnectionsTest extends JmsTopicSendReceiveWithTwoConnectionsTest { protected String brokerURI = udp protected BrokerService broker; protected void setUp() throws Exception { broker = createBroker(); broker start(); super setUp(); } protected void tearDown() throws Exception { super tearDown(); if (broker != null) { broker stop(); } } protected BrokerService createBroker() throws Exception { BrokerService answer = new BrokerService(); answer setPersistent(false); answer setUseJmx(false); answer addConnector(brokerURI); return answer; } protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory(brokerURI); } },1.0,
3250,3250,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\udp\UpdTransportBindTest.,UpdTransportBindTest,public class UpdTransportBindTest extends EmbeddedBrokerTestSupport{ final String addr = udp protected void setUp() throws Exception { bindAddress = addr + soTimeout=1000 ; super setUp(); } public void testConnect() throws Exception { try { Connection connection = new ActiveMQConnectionFactory(addr) createConnection(); connection start(); } catch (JMSException e) { fail( Could not start the connection for a UDP Transport + Check that the port and connector are available ); } } },1.0,
3251,3251,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VMTransportBrokerNameTest.,VMTransportBrokerNameTest,"public class VMTransportBrokerNameTest extends TestCase { private static final String MY BROKER = myBroker ; final String vmUrl = vm (broker (tcp public void testBrokerName() throws Exception { ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(vmUrl)); ActiveMQConnection c1 = (ActiveMQConnection) cf createConnection(); assertTrue( Transport has name in it + c1 getTransport(), c1 getTransport() toString() contains(MY BROKER)); ActiveMQConnectionFactory cfbyName = new ActiveMQConnectionFactory(new URI( vm Connection c2 = cfbyName createConnection(); assertNotNull(BrokerRegistry getInstance() lookup(MY BROKER)); assertEquals(BrokerRegistry getInstance() findFirst() getBrokerName(), MY BROKER); assertEquals(BrokerRegistry getInstance() getBrokers() size(), 1); c1 close(); c2 close(); } }",1.0,
3252,3252,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VMTransportBrokerTest.,VMTransportBrokerTest,public class VMTransportBrokerTest extends TransportBrokerTestSupport { protected String getBindLocation() { return vm } public static Test suite() { return suite(VMTransportBrokerTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } },1.0,
3254,3254,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VmTransportNetworkBrokerTest.,VmTransportNetworkBrokerTest,"public class VmTransportNetworkBrokerTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(VmTransportNetworkBrokerTest class); private static final String VM BROKER URI = vm CountDownLatch started = new CountDownLatch(1); CountDownLatch gotConnection = new CountDownLatch(1); public void testNoThreadLeak() throws Exception { int originalThreadCount = Thread activeCount(); LOG debug(ThreadExplorer show( threads at beginning )); BrokerService broker = new BrokerService(); broker setDedicatedTaskRunner(true); broker setPersistent(false); broker addConnector( tcp NetworkConnector networkConnector = broker addNetworkConnector( static (tcp networkConnector setDuplex(true); broker start(); ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory(new URI(VM BROKER URI)); Connection connection = cf createConnection( system , manager ); connection start(); TimeUnit SECONDS sleep(5); int threadCountAfterStart = Thread activeCount(); TimeUnit SECONDS sleep(30); int threadCountAfterSleep = Thread activeCount(); assertTrue( Threads are leaking + ThreadExplorer show( active sleep ) + , threadCount= +threadCountAfterStart + threadCountAfterSleep= + threadCountAfterSleep, threadCountAfterSleep < threadCountAfterStart + 8); connection close(); broker stop(); broker waitUntilStopped(); broker = new BrokerService(); broker setSchedulerSupport(true); broker setDedicatedTaskRunner(true); broker setPersistent(false); broker addConnector( tcp broker start(); cf = new ActiveMQConnectionFactory( tcp connection = cf createConnection( system , manager ); connection start(); connection close(); broker stop(); broker waitUntilStopped(); TimeUnit SECONDS sleep(5); Thread[] threads = filterDaemonThreads(ThreadExplorer listThreads()); int threadCountAfterStop = threads length; LOG info(ThreadExplorer show( active after stop )); LOG info( originalThreadCount= + originalThreadCount + threadCountAfterStop= + threadCountAfterStop); assertTrue( Threads are leaking + ThreadExplorer show( active after stop ) + originalThreadCount= + originalThreadCount + threadCountAfterStop= + threadCountAfterStop, threadCountAfterStop == originalThreadCount); } public Thread[] filterDaemonThreads(Thread[] threads) throws Exception { List<Thread> threadList = new ArrayList<Thread>(Arrays asList(threads)); for (int i = 0 ; i < threadList size(); i++) { Thread thread = threadList get(i); LOG debug( Inspecting thread + thread getName()); if (thread isDaemon()) { LOG debug( Removing deamon thread ); threadList remove(thread); Thread sleep(100); } } LOG debug( Converting list back to Array ); return threadList toArray(new Thread[0]); } }",1.0,
3255,3255,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VMTransportThreadSafeTest.,VMTransportThreadSafeTest,"public class VMTransportThreadSafeTest { private static final Logger LOG = LoggerFactory getLogger(VMTransportThreadSafeTest class); private final static String location1 = vm private final static String location2 = vm private final ConcurrentLinkedQueue<DummyCommand> localReceived = new ConcurrentLinkedQueue<DummyCommand>(); private final ConcurrentLinkedQueue<DummyCommand> remoteReceived = new ConcurrentLinkedQueue<DummyCommand>(); private class DummyCommand extends BaseCommand { public final int sequenceId; public DummyCommand() { this sequenceId = 0; } public DummyCommand(int id) { this sequenceId = id; } Override public Response visit(CommandVisitor visitor) throws Exception { return null; } Override public byte getDataStructureType() { return 42; } } private class VMTestTransportListener implements TransportListener { protected final Queue<DummyCommand> received; public boolean shutdownReceived = false; public VMTestTransportListener(Queue<DummyCommand> receiveQueue) { this received = receiveQueue; } Override public void onCommand(Object command) { if (command instanceof ShutdownInfo) { shutdownReceived = true; } else { received add((DummyCommand) command); } } Override public void onException(IOException error) { } Override public void transportInterupted() { } Override public void transportResumed() { } } private class VMResponderTransportListener implements TransportListener { protected final Queue<DummyCommand> received; private final Transport peer; public VMResponderTransportListener(Queue<DummyCommand> receiveQueue, Transport peer) { this received = receiveQueue; this peer = peer; } Override public void onCommand(Object command) { if (command instanceof ShutdownInfo) { return; } else { received add((DummyCommand) command); if (peer != null) { try { peer oneway(command); } catch (IOException e) { } } } } Override public void onException(IOException error) { } Override public void transportInterupted() { } Override public void transportResumed() { } } private class SlowVMTestTransportListener extends VMTestTransportListener { private final TimeUnit delayUnit; private final long delay; public SlowVMTestTransportListener(Queue<DummyCommand> receiveQueue) { this(receiveQueue, 10, TimeUnit MILLISECONDS); } public SlowVMTestTransportListener(Queue<DummyCommand> receiveQueue, long delay, TimeUnit delayUnit) { super(receiveQueue); this delay = delay; this delayUnit = delayUnit; } Override public void onCommand(Object command) { super onCommand(command); try { delayUnit sleep(delay); } catch (InterruptedException e) { } } } private class GatedVMTestTransportListener extends VMTestTransportListener { private final CountDownLatch gate; public GatedVMTestTransportListener(Queue<DummyCommand> receiveQueue) { this(receiveQueue, new CountDownLatch(1)); } public GatedVMTestTransportListener(Queue<DummyCommand> receiveQueue, CountDownLatch gate) { super(receiveQueue); this gate = gate; } Override public void onCommand(Object command) { super onCommand(command); try { gate await(); } catch (InterruptedException e) { } } } private void assertMessageAreOrdered(ConcurrentLinkedQueue<DummyCommand> queue) { int lastSequenceId = 0; for(DummyCommand command queue) { int id = command sequenceId; assertTrue( Last id + lastSequenceId + should be less than current id + id, id > lastSequenceId); } } Before public void setUp() throws Exception { localReceived clear(); remoteReceived clear(); } After public void tearDown() throws Exception { } Test(timeout=60000) public void testStartWthoutListenerIOE() throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); local setPeer(remote); remote setPeer(local); remote setTransportListener(new VMTestTransportListener(localReceived)); try { local start(); fail( Should have thrown an IOExcoption ); } catch (IOException e) { } } Test(timeout=60000) public void testOnewayOnStoppedTransportTDE() throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); local setPeer(remote); remote setPeer(local); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new VMTestTransportListener(remoteReceived)); local start(); local stop(); try { local oneway(new DummyCommand()); fail( Should have thrown a TransportDisposedException ); } catch(TransportDisposedIOException e) { } } Test(timeout=60000) public void testStopSendsShutdownToPeer() throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); local setPeer(remote); remote setPeer(local); final VMTestTransportListener remoteListener = new VMTestTransportListener(remoteReceived); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(remoteListener); local start(); local stop(); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remoteListener shutdownReceived; } })); } Test(timeout=60000) public void testMultipleStartsAndStops() throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); local setPeer(remote); remote setPeer(local); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new VMTestTransportListener(remoteReceived)); local start(); remote start(); local start(); remote start(); for(int i = 0; i < 100; ++i) { local oneway(new DummyCommand()); } for(int i = 0; i < 100; ++i) { remote oneway(new DummyCommand()); } local start(); remote start(); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remoteReceived size() == 100; } })); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return localReceived size() == 100; } })); local stop(); local stop(); remote stop(); remote stop(); } Test(timeout=60000) public void testStartWithPeerNotStartedEnqueusCommandsNonAsync() throws Exception { doTestStartWithPeerNotStartedEnqueusCommands(false); } private void doTestStartWithPeerNotStartedEnqueusCommands(boolean async) throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); remote setAsync(async); local setPeer(remote); remote setPeer(local); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new VMTestTransportListener(remoteReceived)); local start(); for(int i = 0; i < 100; ++i) { local oneway(new DummyCommand()); } assertEquals(100, remote getMessageQueue() size()); remote start(); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remoteReceived size() == 100; } })); local stop(); remote stop(); } Test(timeout=60000) public void testBlockedOnewayEnqeueAandStopTransportAsync() throws Exception { doTestBlockedOnewayEnqeueAandStopTransport(true); } Test(timeout=60000) public void testBlockedOnewayEnqeueAandStopTransportNonAsync() throws Exception { doTestBlockedOnewayEnqeueAandStopTransport(false); } private void doTestBlockedOnewayEnqeueAandStopTransport(boolean async) throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); final AtomicInteger sequenceId = new AtomicInteger(); remote setAsync(async); remote setAsyncQueueDepth(99); local setPeer(remote); remote setPeer(local); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new VMTestTransportListener(remoteReceived)); local start(); Thread t = new Thread(new Runnable() { Override public void run() { for(int i = 0; i < 100; ++i) { try { local oneway(new DummyCommand(sequenceId incrementAndGet())); } catch (Exception e) { } } } }); t start(); LOG debug( Started async delivery, wait for remote s queue to fill up ); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remote getMessageQueue() remainingCapacity() == 0; } })); LOG debug( Remote messageQ is full, start it and stop all ); remote start(); local stop(); remote stop(); } Test(timeout=60000) public void testBlockedOnewayEnqeueWhileStartedDetectsStop() throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); final AtomicInteger sequenceId = new AtomicInteger(); remote setAsync(true); remote setAsyncQueueDepth(2); local setPeer(remote); remote setPeer(local); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new GatedVMTestTransportListener(remoteReceived)); local start(); remote start(); Thread t = new Thread(new Runnable() { Override public void run() { for(int i = 0; i < 3; ++i) { try { local oneway(new DummyCommand(sequenceId incrementAndGet())); } catch (Exception e) { } } } }); t start(); LOG debug( Started async delivery, wait for remote s queue to fill up ); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remote getMessageQueue() remainingCapacity() == 0; } })); LOG debug( Starting async gate open ); Thread gateman = new Thread(new Runnable() { Override public void run() { try { Thread sleep(100); } catch (InterruptedException e) { } ((GatedVMTestTransportListener) remote getTransportListener()) gate countDown(); } }); gateman start(); remote stop(); local stop(); assertEquals(1, remoteReceived size()); assertMessageAreOrdered(remoteReceived); } Test(timeout=60000) public void testStopWhileStartingAsyncWithNoAsyncLimit() throws Exception { doTestStopWhileStartingWithNoAsyncLimit(true, 49); } Test(timeout=60000) public void testStopWhileStartingNonAsyncWithNoAsyncLimit() throws Exception { doTestStopWhileStartingWithNoAsyncLimit(false, 100); } private void doTestStopWhileStartingWithNoAsyncLimit(boolean async, final int expect) throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); remote setAsync(async); local setPeer(remote); remote setPeer(local); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new SlowVMTestTransportListener(remoteReceived)); local start(); for(int i = 0; i < 100; ++i) { local oneway(new DummyCommand(i)); } Thread t = new Thread(new Runnable() { Override public void run() { try { Thread sleep(1000); remote stop(); } catch (Exception e) { } } }); remote start(); t start(); assertTrue( Remote should receive + expect + , commands but got + remoteReceived size(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remoteReceived size() >= expect; } })); LOG debug( Remote listener received + remoteReceived size() + messages ); local stop(); assertTrue( Remote transport never was disposed , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remote isDisposed(); } })); } Test(timeout=120000) public void TestTwoWayMessageThroughPutSync() throws Exception { long totalTimes = 0; final long executions = 20; for (int i = 0; i < 20; ++i) { totalTimes += doTestTwoWayMessageThroughPut(false); } LOG info( Total time of one way sync send throughput test + (totalTimes/executions) + ms ); } Test(timeout=120000) public void TestTwoWayMessageThroughPutAsnyc() throws Exception { long totalTimes = 0; final long executions = 50; for (int i = 0; i < executions; ++i) { totalTimes += doTestTwoWayMessageThroughPut(false); } LOG info( Total time of one way async send throughput test + (totalTimes/executions) + ms ); } private long doTestTwoWayMessageThroughPut(boolean async) throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); final AtomicInteger sequenceId = new AtomicInteger(); remote setAsync(async); local setPeer(remote); remote setPeer(local); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new VMTestTransportListener(remoteReceived)); final int messageCount = 200000; local start(); remote start(); long startTime = System currentTimeMillis(); Thread localSend = new Thread(new Runnable() { Override public void run() { for(int i = 0; i < messageCount; ++i) { try { local oneway(new DummyCommand(sequenceId incrementAndGet())); } catch (Exception e) { } } } }); Thread remoteSend = new Thread(new Runnable() { Override public void run() { for(int i = 0; i < messageCount; ++i) { try { remote oneway(new DummyCommand(sequenceId incrementAndGet())); } catch (Exception e) { } } } }); localSend start(); remoteSend start(); localSend join(); remoteSend join(); long endTime = System currentTimeMillis(); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remoteReceived size() == messageCount; } })); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return localReceived size() == messageCount; } })); LOG debug( All messages sent,stop all ); local stop(); remote stop(); localReceived clear(); remoteReceived clear(); return endTime - startTime; } Test(timeout=120000) public void TestOneWayMessageThroughPutSync() throws Exception { long totalTimes = 0; final long executions = 30; for (int i = 0; i < executions; ++i) { totalTimes += doTestOneWayMessageThroughPut(false); } LOG info( Total time of one way sync send throughput test + (totalTimes/executions) + ms ); } Test(timeout=120000) public void TestOneWayMessageThroughPutAsnyc() throws Exception { long totalTimes = 0; final long executions = 20; for (int i = 0; i < 20; ++i) { totalTimes += doTestOneWayMessageThroughPut(true); } LOG info( Total time of one way async send throughput test + (totalTimes/executions) + ms ); } private long doTestOneWayMessageThroughPut(boolean async) throws Exception { final VMTransport local = new VMTransport(new URI(location1)); final VMTransport remote = new VMTransport(new URI(location2)); final AtomicInteger sequenceId = new AtomicInteger(); remote setAsync(async); local setPeer(remote); remote setPeer(local); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new VMTestTransportListener(remoteReceived)); final int messageCount = 100000; local start(); remote start(); long startTime = System currentTimeMillis(); Thread localSend = new Thread(new Runnable() { Override public void run() { for(int i = 0; i < messageCount; ++i) { try { local oneway(new DummyCommand(sequenceId incrementAndGet())); } catch (Exception e) { } } } }); localSend start(); localSend join(); long endTime = System currentTimeMillis(); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remoteReceived size() == messageCount; } })); LOG debug( All messages sent,stop all ); local stop(); remote stop(); localReceived clear(); remoteReceived clear(); return endTime - startTime; } Test(timeout=120000) public void testTwoWayTrafficWithMutexTransportSync1() throws Exception { for (int i = 0; i < 20; ++i) { doTestTwoWayTrafficWithMutexTransport(false, false); } } Test(timeout=120000) public void testTwoWayTrafficWithMutexTransportSync2() throws Exception { for (int i = 0; i < 20; ++i) { doTestTwoWayTrafficWithMutexTransport(true, false); } } Test(timeout=120000) public void testTwoWayTrafficWithMutexTransportSync3() throws Exception { for (int i = 0; i < 20; ++i) { doTestTwoWayTrafficWithMutexTransport(false, true); } } Test(timeout=120000) public void testTwoWayTrafficWithMutexTransportSync4() throws Exception { for (int i = 0; i < 20; ++i) { doTestTwoWayTrafficWithMutexTransport(false, false); } } public void doTestTwoWayTrafficWithMutexTransport(boolean localAsync, boolean remoteAsync) throws Exception { final VMTransport vmlocal = new VMTransport(new URI(location1)); final VMTransport vmremote = new VMTransport(new URI(location2)); final MutexTransport local = new MutexTransport(vmlocal); final MutexTransport remote = new MutexTransport(vmremote); final AtomicInteger sequenceId = new AtomicInteger(); vmlocal setAsync(localAsync); vmremote setAsync(remoteAsync); vmlocal setPeer(vmremote); vmremote setPeer(vmlocal); local setTransportListener(new VMTestTransportListener(localReceived)); remote setTransportListener(new VMResponderTransportListener(remoteReceived, remote)); final int messageCount = 200000; Thread localSend = new Thread(new Runnable() { Override public void run() { for(int i = 0; i < messageCount; ++i) { try { local oneway(new DummyCommand(sequenceId incrementAndGet())); } catch (Exception e) { } } } }); Thread remoteSend = new Thread(new Runnable() { Override public void run() { for(int i = 0; i < messageCount; ++i) { try { remote oneway(new DummyCommand(sequenceId incrementAndGet())); } catch (Exception e) { } } } }); localSend start(); remoteSend start(); Thread sleep(10); local start(); remote start(); localSend join(); remoteSend join(); assertTrue( Remote should have received ( +messageCount+ ) but got () + remoteReceived size(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return remoteReceived size() == messageCount; } })); assertTrue( Local should have received ( +messageCount*2+ ) but got () + localReceived size(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return localReceived size() == messageCount*2; } })); LOG debug( All messages sent,stop all ); local stop(); remote stop(); localReceived clear(); remoteReceived clear(); } }",1.0,
3256,3256,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VMTransportThreadSafeTest.,DummyCommand,private class DummyCommand extends BaseCommand { public final int sequenceId; public DummyCommand() { this sequenceId = 0; } public DummyCommand(int id) { this sequenceId = id; } Override public Response visit(CommandVisitor visitor) throws Exception { return null; } Override public byte getDataStructureType() { return 42; } },1.0,
3257,3257,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VMTransportThreadSafeTest.,VMTestTransportListener,private class VMTestTransportListener implements TransportListener { protected final Queue<DummyCommand> received; public boolean shutdownReceived = false; public VMTestTransportListener(Queue<DummyCommand> receiveQueue) { this received = receiveQueue; } Override public void onCommand(Object command) { if (command instanceof ShutdownInfo) { shutdownReceived = true; } else { received add((DummyCommand) command); } } Override public void onException(IOException error) { } Override public void transportInterupted() { } Override public void transportResumed() { } },1.0,
3258,3258,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VMTransportThreadSafeTest.,VMResponderTransportListener,"private class VMResponderTransportListener implements TransportListener { protected final Queue<DummyCommand> received; private final Transport peer; public VMResponderTransportListener(Queue<DummyCommand> receiveQueue, Transport peer) { this received = receiveQueue; this peer = peer; } Override public void onCommand(Object command) { if (command instanceof ShutdownInfo) { return; } else { received add((DummyCommand) command); if (peer != null) { try { peer oneway(command); } catch (IOException e) { } } } } Override public void onException(IOException error) { } Override public void transportInterupted() { } Override public void transportResumed() { } }",1.0,
3259,3259,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VMTransportThreadSafeTest.,SlowVMTestTransportListener,"private class SlowVMTestTransportListener extends VMTestTransportListener { private final TimeUnit delayUnit; private final long delay; public SlowVMTestTransportListener(Queue<DummyCommand> receiveQueue) { this(receiveQueue, 10, TimeUnit MILLISECONDS); } public SlowVMTestTransportListener(Queue<DummyCommand> receiveQueue, long delay, TimeUnit delayUnit) { super(receiveQueue); this delay = delay; this delayUnit = delayUnit; } Override public void onCommand(Object command) { super onCommand(command); try { delayUnit sleep(delay); } catch (InterruptedException e) { } } }",1.0,
3260,3260,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\vm\VMTransportThreadSafeTest.,GatedVMTestTransportListener,"private class GatedVMTestTransportListener extends VMTestTransportListener { private final CountDownLatch gate; public GatedVMTestTransportListener(Queue<DummyCommand> receiveQueue) { this(receiveQueue, new CountDownLatch(1)); } public GatedVMTestTransportListener(Queue<DummyCommand> receiveQueue, CountDownLatch gate) { super(receiveQueue); this gate = gate; } Override public void onCommand(Object command) { super onCommand(command); try { gate await(); } catch (InterruptedException e) { } } }",1.0,
3262,3262,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usage\CompositeMessageCursorUsageTest.,CompositeMessageCursorUsageTest,"public class CompositeMessageCursorUsageTest extends TestCase { BrokerService broker; public void setUp() throws Exception { broker = new BrokerService(); broker setPersistent(false); broker start(); } protected void tearDown() throws Exception { broker stop(); } public void testCompositeMessageUsage() throws Exception { String compositeQueue = compositeA,compositeB ; ActiveMQConnectionFactory cf = new ActiveMQConnectionFactory( vm JmsTemplate jt = new JmsTemplate(cf); jt send(compositeQueue, new MessageCreator() { public Message createMessage(Session session) throws JMSException { TextMessage tm = session createTextMessage(); tm setText( test ); return tm; } }); jt send( noCompositeA , new MessageCreator() { public Message createMessage(Session session) throws JMSException { TextMessage tm = session createTextMessage(); tm setText( test ); return tm; } }); jt send( noCompositeB , new MessageCreator() { public Message createMessage(Session session) throws JMSException { TextMessage tm = session createTextMessage(); tm setText( test ); return tm; } }); assertEquals( Cursor memory usage wrong for noCompositeA queue , 1032, getQueueView( noCompositeA ) getCursorMemoryUsage()); assertEquals( Cursor memory usage wrong for noCompositeB queue , 1032, getQueueView( noCompositeB ) getCursorMemoryUsage()); assertEquals( Cursor memory usage wrong for CompositeA queue , 1032, getQueueView( compositeA ) getCursorMemoryUsage()); assertEquals( Cursor memory usage wrong for CompositeB queue , 1032, getQueueView( compositeB ) getCursorMemoryUsage()); } public QueueViewMBean getQueueView(String queueName) throws Exception { ObjectName queueViewMBeanName = new ObjectName( org apache activemq + type=Broker,brokerName=localhost,destinationType=Queue,destinationName= + queueName); return (QueueViewMBean) broker getManagementContext() newProxyInstance(queueViewMBeanName, QueueViewMBean class, true); } }",1.0,
3265,3265,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\AbstractTwoBrokerNetworkConnectorWildcardIncludedDestinationTestSupport.,AbstractTwoBrokerNetworkConnectorWildcardIncludedDestinationTestSupport,"public abstract class AbstractTwoBrokerNetworkConnectorWildcardIncludedDestinationTestSupport extends JmsMultipleBrokersTestSupport { protected static final int MESSAGE COUNT = 1; boolean dynamicOnly = true; int networkTTL = 1; boolean conduit = true; boolean suppressDuplicateQueueSubscriptions = true; boolean decreaseNetworkConsumerPriority = true; public void testSimpleNWOB() throws Exception { sendReceive( BrokerA , local test , false, BrokerB , local test , false, 1, 0); sendReceive( BrokerA , local test , true, BrokerB , local test , true, 1, 0); sendReceive( BrokerA , global test , false, BrokerB , global test , false, 1, 1); sendReceive( BrokerA , global test , true, BrokerB , global test , true, 1, 1); } public void testSimpleNWOBWithWildcardSubscriptions() throws Exception { sendReceive( BrokerA , local test 1 , false, BrokerB , local test > , false, 1, 0); sendReceive( BrokerA , local test 2 , true, BrokerB , local test > , true, 1, 0); sendReceive( BrokerA , global test 1 , false, BrokerB , global test > , false, 1, 1); sendReceive( BrokerA , global test 2 , true, BrokerB , global test > , true, 1, 1); } public void testSimpleNWOBWithVirtualDestinations() throws Exception { sendReceive( BrokerA , local test , true, BrokerB , Consumer a local test , false, 1, 0); sendReceive( BrokerA , global test , true, BrokerB , Consumer a global test , false, 1, 1); } public void testSimpleNWOBWithVirtualDestinationsAndWildcardSubscriptions() throws Exception { sendReceive( BrokerA , local test 1 , true, BrokerB , Consumer a local test > , false, 1, 0); sendReceive( BrokerA , global test 1 , true, BrokerB , Consumer a global test > , false, 1, 1); } public void sendReceive(String broker1, String dest1, boolean topic1, String broker2, String dest2, boolean topic2, int send, int expected) throws Exception{ MessageConsumer client = createConsumer(broker2, createDestination(dest2, topic2)); Thread sleep(1000); sendMessages(broker1, createDestination(dest1, topic1), send); MessageIdList msgs = getConsumerMessages(broker2, client); msgs setMaximumDuration(1000); msgs waitForMessagesToArrive(send); assertEquals(expected, msgs getMessageCount()); client close(); Thread sleep(500); } protected abstract void addIncludedDestination(NetworkConnector networkConnector); public void setUp() throws Exception { super setAutoFail(true); super setUp(); String options = new String( useJmx=false&deleteAllMessagesOnStartup=true ); createAndConfigureBroker(new URI( broker (tcp createAndConfigureBroker(new URI( broker (tcp NetworkConnector nc = bridgeBrokers( BrokerA , BrokerB , dynamicOnly, networkTTL, conduit); nc setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority); nc setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions); addIncludedDestination(nc); nc = bridgeBrokers( BrokerB , BrokerA , dynamicOnly, networkTTL, conduit); nc setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority); nc setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions); addIncludedDestination(nc); startAllBrokers(); } private BrokerService createAndConfigureBroker(URI uri) throws Exception { BrokerService broker = createBroker(uri); configurePersistenceAdapter(broker); VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor(); virtualDestinationInterceptor setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()}); DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor}; broker setDestinationInterceptors(destinationInterceptors); return broker; } protected void configurePersistenceAdapter(BrokerService broker) throws IOException { File dataFileDir = new File( target/test-amq-data/kahadb/ + broker getBrokerName()); KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(dataFileDir); broker setPersistenceAdapter(kaha); } }",1.0,
3270,3270,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\AMQStoreDurableSubscriptionTest.,AMQStoreDurableSubscriptionTest,public class AMQStoreDurableSubscriptionTest extends DurableSubscriptionTestSupport { protected PersistenceAdapter createPersistenceAdapter() throws IOException { File dataDir = new File( target/test-data/durableAmq ); AMQPersistenceAdapter adapter = new AMQPersistenceAdapter(); adapter setDirectory(dataDir); return adapter; } public void testDurableSubscriptionRetroactive() throws Exception { } },1.0,
3272,3272,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\BrokerQueueNetworkWithDisconnectTest.,BrokerQueueNetworkWithDisconnectTest,"public class BrokerQueueNetworkWithDisconnectTest extends JmsMultipleBrokersTestSupport { private static final Log LOG = LogFactory getLog(BrokerQueueNetworkWithDisconnectTest class); private static final int NETWORK DOWN TIME = 5000; protected static final int MESSAGE COUNT = 200; private static final String HUB = HubBroker ; private static final String SPOKE = SpokeBroker ; private SocketProxy socketProxy; private long networkDownTimeStart; public boolean useDuplexNetworkBridge = true; public boolean simulateStalledNetwork; private long inactiveDuration = 1000; private boolean useSocketProxy = true; public void initCombosForTestSendOnAReceiveOnBWithTransportDisconnect() { addCombinationValues( useDuplexNetworkBridge , new Object[]{ Boolean TRUE, Boolean FALSE} ); addCombinationValues( simulateStalledNetwork , new Object[]{ Boolean TRUE } ); } public void testSendOnAReceiveOnBWithTransportDisconnect() throws Exception { bridgeBrokers(SPOKE, HUB); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); MessageConsumer client = createConsumer(HUB, dest); sleep(600); sendMessages(SPOKE, dest, MESSAGE COUNT); MessageIdList msgs = getConsumerMessages(HUB, client); msgs waitForMessagesToArrive(MESSAGE COUNT); assertTrue( At least message + MESSAGE COUNT + must be recieved, duplicates are expected, count= + msgs getMessageCount(), MESSAGE COUNT <= msgs getMessageCount()); } public void testNoStuckConnectionsWithTransportDisconnect() throws Exception { inactiveDuration=60000l; useDuplexNetworkBridge = true; bridgeBrokers(SPOKE, HUB); final BrokerItem hub = brokers get(HUB); hub broker setPlugins(new BrokerPlugin[]{ new BrokerPluginSupport() { int sleepCount = 2; Override public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception { try { while(--sleepCount >= 0) { LOG info( sleeping for a bit in close impl to simulate load where reconnect fails due to a pending close ); TimeUnit SECONDS sleep(2); } } catch (Exception ignored) {} super removeConnection(context, info, error); } } }); startAllBrokers(); waitForBridgeFormation(); for (int i=0; i< 3; i++) { socketProxy halfClose(); sleep(10000); } boolean allGood = Wait waitFor(new Wait Condition(){ public boolean isSatisified() throws Exception { long numConnections = hub broker getTransportConnectors() get(0) getConnections() size(); LOG info( Num connetions + numConnections); return numConnections == 1; }}); if (!allGood) { dumpAllThreads( ExtraHubConnection ); } assertTrue( should be only one transport connection for the single duplex network connector , allGood); allGood = Wait waitFor(new Wait Condition(){ public boolean isSatisified() throws Exception { long numVmConnections = VMTransportFactory SERVERS get(HUB) getConnectionCount(); LOG info( Num VM connetions + numVmConnections); return numVmConnections == 2; }}); if (!allGood) { dumpAllThreads( ExtraHubVMConnection ); } assertTrue( should be only 2 vm connections for the single network duplex network connector , allGood); } public void testTwoDuplexNCsAreAllowed() throws Exception { useDuplexNetworkBridge = true; useSocketProxy = false; NetworkConnector connector = bridgeBrokers(SPOKE, HUB); connector setName( FirstDuplex ); connector = bridgeBrokers(SPOKE, HUB); connector setName( SecondDuplex ); startAllBrokers(); waitForBridgeFormation(); BrokerItem hub = brokers get(HUB); assertEquals( Has two transport Connectors , 2, hub broker getTransportConnectors() get(0) getConnections() size()); } Override protected void startAllBrokers() throws Exception { BrokerItem brokerItem = brokers get(HUB); brokerItem broker start(); brokerItem = brokers get(SPOKE); brokerItem broker start(); sleep(600); } public void setUp() throws Exception { networkDownTimeStart = 0; inactiveDuration = 1000; useSocketProxy = true; super setAutoFail(true); super setUp(); final String options = persistent=true&useJmx=false&deleteAllMessagesOnStartup=true ; createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp } public void tearDown() throws Exception { super tearDown(); if (socketProxy != null) { socketProxy close(); } } public static Test suite() { return suite(BrokerQueueNetworkWithDisconnectTest class); } Override protected void onSend(int i, TextMessage msg) { sleep(50); if (i == 50 || i == 150) { if (simulateStalledNetwork) { socketProxy pause(); } else { socketProxy close(); } networkDownTimeStart = System currentTimeMillis(); } else if (networkDownTimeStart > 0) { if (networkDownTimeStart + NETWORK DOWN TIME < System currentTimeMillis()) { if (simulateStalledNetwork) { socketProxy goOn(); } else { socketProxy reopen(); } networkDownTimeStart = 0; } else { sleep(500); } } super onSend(i, msg); } private void sleep(int milliSecondTime) { try { Thread sleep(milliSecondTime); } catch (InterruptedException igonred) { } } Override protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit, boolean failover) throws Exception { List<TransportConnector> transportConnectors = remoteBroker getTransportConnectors(); URI remoteURI; if (!transportConnectors isEmpty()) { remoteURI = ((TransportConnector)transportConnectors get(0)) getConnectUri(); if (useSocketProxy) { socketProxy = new SocketProxy(remoteURI); remoteURI = socketProxy getUrl(); } DiscoveryNetworkConnector connector = new DiscoveryNetworkConnector(new URI( static ( + remoteURI + wireFormat maxInactivityDuration= + inactiveDuration + &wireFormat maxInactivityDurationInitalDelay= + inactiveDuration + ) useExponentialBackOff=false )); connector setDynamicOnly(dynamicOnly); connector setNetworkTTL(networkTTL); localBroker addNetworkConnector(connector); maxSetupTime = 2000; if (useDuplexNetworkBridge) { connector setDuplex(true); } return connector; } else { throw new Exception( Remote broker has no registered connectors ); } } }",1.0,
3273,3273,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\BrowseOverNetworkTest.,BrowseOverNetworkTest,"public class BrowseOverNetworkTest extends JmsMultipleBrokersTestSupport { private static final Logger LOG = LoggerFactory getLogger(QueueSubscription class); protected static final int MESSAGE COUNT = 10; public void testBrowse() throws Exception { createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp bridgeBrokers( BrokerA , BrokerB ); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); sendMessages( BrokerA , dest, MESSAGE COUNT); Thread sleep(1000); int browsed = browseMessages( BrokerB , dest); Thread sleep(1000); MessageConsumer clientA = createConsumer( BrokerA , dest); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); msgsA waitForMessagesToArrive(MESSAGE COUNT); Thread sleep(1000); MessageConsumer clientB = createConsumer( BrokerB , dest); MessageIdList msgsB = getConsumerMessages( BrokerB , clientB); msgsB waitForMessagesToArrive(MESSAGE COUNT); LOG info( A+B + msgsA getMessageCount() + + + msgsB getMessageCount()); assertEquals( Consumer on Broker A, should ve consumed all messages , MESSAGE COUNT, msgsA getMessageCount()); assertEquals( Broker B shouldn t get any messages , 0, browsed); } public void testConsumerInfo() throws Exception { createBroker(new ClassPathResource( org/apache/activemq/usecases/browse-broker1 xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/browse-broker2 xml )); startAllBrokers(); brokers get( broker1 ) broker waitUntilStarted(); Destination dest = createDestination( QUEUE A,QUEUE B , false); int broker1 = browseMessages( broker1 , dest); assertEquals( Browsed a message on an empty queue , 0, broker1); Thread sleep(1000); int broker2 = browseMessages( broker2 , dest); assertEquals( Browsed a message on an empty queue , 0, broker2); } public class Browser extends Thread { String broker; Destination dest; int totalCount; final int expect; QueueBrowser browser = null; MessageConsumer consumer = null; boolean consume = false; public Browser(String broker, Destination dest, int expect) { this broker = broker; this dest = dest; this expect = expect; } public void run() { int retries = 0; while (retries++ < 20 && totalCount != expect) { try { QueueBrowser browser = createBrowser(broker, dest); int count = browseMessages(browser, broker); if (consume) { if (count != 0) { MessageConsumer consumer = createSyncConsumer(broker, dest); totalCount += count; for (int i = 0; i < count; i++) { ActiveMQTextMessage message = (ActiveMQTextMessage)consumer receive(1000); LOG info(broker + consumer + message getText() + + message getDestination() + + message getMessageId() + + Arrays toString(message getBrokerPath())); if (message == null) break; } } } else { totalCount = count; } LOG info( browser + broker + browsed + totalCount); Thread sleep(1000); } catch (Exception e) { LOG info( Exception browsing + e, e); } finally { try { if (browser != null) { browser close(); } if (consumer != null) { consumer close(); } } catch (Exception e) { LOG info( Exception closing browser + e, e); } } } } public int getTotalCount() { return totalCount; } } protected NetworkConnector bridgeBrokersWithIncludedDestination(String localBrokerName, String remoteBrokerName, ActiveMQDestination included, ActiveMQDestination excluded) throws Exception { NetworkConnector nc = bridgeBrokers(localBrokerName, remoteBrokerName, false, 4, true); nc addStaticallyIncludedDestination(included); if (excluded != null) { nc addExcludedDestination(excluded); } nc setPrefetchSize(1); return nc; } public void testAMQ3020() throws Exception { createBroker(new ClassPathResource( org/apache/activemq/usecases/browse-broker1A xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/browse-broker1B xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/browse-broker2A xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/browse-broker2B xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/browse-broker3A xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/browse-broker3B xml )); brokers get( broker-1A ) broker waitUntilStarted(); brokers get( broker-2A ) broker waitUntilStarted(); brokers get( broker-3A ) broker waitUntilStarted(); for (BrokerItem brokerItem brokers values()) { final BrokerService broker = brokerItem broker; waitForBridgeFormation(broker, 1, 0); waitForBridgeFormation(broker, 1, 1); waitForBridgeFormation(broker, 1, 2); waitForBridgeFormation(broker, 1, 3); waitForBridgeFormation(broker, 1, 4); } Destination composite = createDestination( PROD FUSESOURCE 3 A,PROD FUSESOURCE 3 B , false); final Browser browser1 = new Browser( broker-3A , composite, MESSAGE COUNT); browser1 start(); final Browser browser2 = new Browser( broker-3B , composite, MESSAGE COUNT); browser2 start(); LOG info( Sending messages to broker-1A ); sendMessages( broker-1A , composite, MESSAGE COUNT); LOG info( Message sent to broker-1A ); Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return browser1 getTotalCount() == MESSAGE COUNT; } }); Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return browser2 getTotalCount() == MESSAGE COUNT; } }); browser1 join(); browser2 join(); LOG info( broker-3A browsed + browser1 getTotalCount()); LOG info( broker-3B browsed + browser2 getTotalCount()); assertEquals(MESSAGE COUNT * 2, browser1 getTotalCount() + browser2 getTotalCount() ); } protected int browseMessages(QueueBrowser browser, String name) throws Exception { Enumeration msgs = browser getEnumeration(); int browsedMessage = 0; while (msgs hasMoreElements()) { browsedMessage++; ActiveMQTextMessage message = (ActiveMQTextMessage)msgs nextElement(); LOG info(name + browsed + message getText() + + message getDestination() + + message getMessageId() + + Arrays toString(message getBrokerPath())); } return browsedMessage; } protected int browseMessages(String broker, Destination dest) throws Exception { QueueBrowser browser = createBrowser(broker, dest); int browsedMessage = browseMessages(browser, browser ); browser close(); return browsedMessage; } public void setUp() throws Exception { super setAutoFail(true); super setUp(); } }",1.0,
3274,3274,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\BrowseOverNetworkTest.,Browser,"public class Browser extends Thread { String broker; Destination dest; int totalCount; final int expect; QueueBrowser browser = null; MessageConsumer consumer = null; boolean consume = false; public Browser(String broker, Destination dest, int expect) { this broker = broker; this dest = dest; this expect = expect; } public void run() { int retries = 0; while (retries++ < 20 && totalCount != expect) { try { QueueBrowser browser = createBrowser(broker, dest); int count = browseMessages(browser, broker); if (consume) { if (count != 0) { MessageConsumer consumer = createSyncConsumer(broker, dest); totalCount += count; for (int i = 0; i < count; i++) { ActiveMQTextMessage message = (ActiveMQTextMessage)consumer receive(1000); LOG info(broker + consumer + message getText() + + message getDestination() + + message getMessageId() + + Arrays toString(message getBrokerPath())); if (message == null) break; } } } else { totalCount = count; } LOG info( browser + broker + browsed + totalCount); Thread sleep(1000); } catch (Exception e) { LOG info( Exception browsing + e, e); } finally { try { if (browser != null) { browser close(); } if (consumer != null) { consumer close(); } } catch (Exception e) { LOG info( Exception closing browser + e, e); } } } } public int getTotalCount() { return totalCount; } }",1.0,
3275,3275,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ChangeSentMessageTest.,ChangeSentMessageTest,"public class ChangeSentMessageTest extends TestSupport { private static final int COUNT = 200; private static final String VALUE NAME = value ; public void testDoChangeSentMessage() throws Exception { Destination destination = createDestination( test- + ChangeSentMessageTest class getName()); Connection connection = createConnection(); connection start(); Session consumerSession = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = consumerSession createConsumer(destination); Session publisherSession = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = publisherSession createProducer(destination); HashMap<String, Integer> map = new HashMap<String, Integer>(); ObjectMessage message = publisherSession createObjectMessage(); for (int i = 0; i < COUNT; i++) { map put(VALUE NAME, Integer valueOf(i)); message setObject(map); producer send(message); assertTrue(message getObject() == map); } for (int i = 0; i < COUNT; i++) { ObjectMessage msg = (ObjectMessage)consumer receive(); HashMap receivedMap = (HashMap)msg getObject(); Integer intValue = (Integer)receivedMap get(VALUE NAME); assertTrue(intValue intValue() == i); } } }",1.0,
3276,3276,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ChangeSessionDeliveryModeTest.,ChangeSessionDeliveryModeTest,"public class ChangeSessionDeliveryModeTest extends TestSupport implements MessageListener { public void testDoChangeSessionDeliveryMode() throws Exception { Destination destination = createDestination( foo bar ); Connection connection = createConnection(); connection start(); Session consumerSession = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer1 = consumerSession createConsumer(destination); consumer1 setMessageListener(this); JMSException jmsEx = null; MessageConsumer consumer2 = consumerSession createConsumer(destination); try { consumer2 receive(10); fail( Did not receive expected exception ); } catch (JMSException e) { assertTrue(e instanceof IllegalStateException); } } public void onMessage(Message msg) { } }",1.0,
3278,3278,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\CompositeConsumeTest.,CompositeConsumeTest,"public class CompositeConsumeTest extends JmsTopicSendReceiveWithTwoConnectionsTest { private static final Logger LOG = LoggerFactory getLogger(CompositeConsumeTest class); public void testSendReceive() throws Exception { messages clear(); Destination[] destinations = getDestinations(); int destIdx = 0; for (int i = 0; i < data length; i++) { Message message = session createTextMessage(data[i]); if (verbose) { LOG info( About to send a message + message + with text + data[i]); } producer send(destinations[destIdx], message); if (++destIdx >= destinations length) { destIdx = 0; } } assertMessagesAreReceived(); } protected String getSubject() { return getPrefix() + FOO BAR, + getPrefix() + FOO X Y, + getPrefix() + BAR > ; } protected Destination[] getDestinations() { return new Destination[]{new ActiveMQTopic(getPrefix() + FOO BAR ), new ActiveMQTopic(getPrefix() + BAR WHATNOT XYZ ), new ActiveMQTopic(getPrefix() + FOO X Y )}; } protected String getPrefix() { return super getSubject() + ; } }",1.0,
3281,3281,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ConcurrentProducerDurableConsumerTest.,ConcurrentProducerDurableConsumerTest,"public class ConcurrentProducerDurableConsumerTest extends TestSupport { private static final Logger LOG = LoggerFactory getLogger(ConcurrentProducerDurableConsumerTest class); private int consumerCount = 5; BrokerService broker; protected List<Connection> connections = Collections synchronizedList(new ArrayList<Connection>()); protected Map<MessageConsumer, TimedMessageListener> consumers = new HashMap<MessageConsumer, TimedMessageListener>(); protected MessageIdList allMessagesList = new MessageIdList(); private int messageSize = 1024; public void initCombosForTestSendRateWithActivatingConsumers() throws Exception { addCombinationValues( defaultPersistenceAdapter , new Object[]{PersistenceAdapterChoice KahaDB, PersistenceAdapterChoice LevelDB, PersistenceAdapterChoice MEM}); } public void testSendRateWithActivatingConsumers() throws Exception { final Destination destination = createDestination(); final ConnectionFactory factory = createConnectionFactory(); startInactiveConsumers(factory, destination); Connection connection = factory createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = createMessageProducer(session, destination); double[] inactiveConsumerStats = produceMessages(destination, 500, 10, session, producer, null); LOG info( With inactive consumers ave + inactiveConsumerStats[1] + , max + inactiveConsumerStats[0] + , multiplier + (inactiveConsumerStats[0]/inactiveConsumerStats[1])); final int consumersToActivate = 5; final Object addConsumerSignal = new Object(); Executors newCachedThreadPool(new ThreadFactory() { Override public Thread newThread(Runnable r) { return new Thread(r, ActivateConsumer + this); } }) execute(new Runnable() { Override public void run() { try { MessageConsumer consumer = null; for (int i = 0; i < consumersToActivate; i++) { LOG info( Waiting for add signal from producer ); synchronized (addConsumerSignal) { addConsumerSignal wait(30 * 60 * 1000); } TimedMessageListener listener = new TimedMessageListener(); consumer = createDurableSubscriber(factory createConnection(), destination, consumer + (i + 1)); LOG info( Created consumer + consumer); consumer setMessageListener(listener); consumers put(consumer, listener); } } catch (Exception e) { LOG error( failed to start consumer , e); } } }); double[] statsWithActive = produceMessages(destination, 500, 10, session, producer, addConsumerSignal); LOG info( with concurrent activate, ave + statsWithActive[1] + , max + statsWithActive[0] + , multiplier + (statsWithActive[0]/ statsWithActive[1])); while(consumers size() < consumersToActivate) { TimeUnit SECONDS sleep(2); } long timeToFirstAccumulator = 0; for (TimedMessageListener listener consumers values()) { long time = listener getFirstReceipt(); timeToFirstAccumulator += time; LOG info( Time to first + time); } LOG info( Ave time to first message = + timeToFirstAccumulator/consumers size()); for (TimedMessageListener listener consumers values()) { LOG info( Ave batch receipt time + listener waitForReceivedLimit(10000) + max receipt + listener maxReceiptTime); } LOG info( Ave send time with active + statsWithActive[1] + as multiplier of ave with none active + inactiveConsumerStats[1] + , multiplier= + (statsWithActive[1]/inactiveConsumerStats[1])); assertTrue( Ave send time with active + statsWithActive[1] + within reasonable multpler of ave with none active + inactiveConsumerStats[1] + , multiplier + (statsWithActive[1]/inactiveConsumerStats[1]), statsWithActive[1] < 15 * inactiveConsumerStats[1]); } public void x initCombosForTestSendWithInactiveAndActiveConsumers() throws Exception { addCombinationValues( defaultPersistenceAdapter , new Object[]{PersistenceAdapterChoice KahaDB, PersistenceAdapterChoice LevelDB, PersistenceAdapterChoice JDBC}); } public void x testSendWithInactiveAndActiveConsumers() throws Exception { Destination destination = createDestination(); ConnectionFactory factory = createConnectionFactory(); startInactiveConsumers(factory, destination); Connection connection = factory createConnection(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); producer setDeliveryMode(DeliveryMode PERSISTENT); final int toSend = 100; final int numIterations = 5; double[] noConsumerStats = produceMessages(destination, toSend, numIterations, session, producer, null); startConsumers(factory, destination); LOG info( Activated consumer ); double[] withConsumerStats = produceMessages(destination, toSend, numIterations, session, producer, null); LOG info( With consumer + withConsumerStats[1] + , with noConsumer + noConsumerStats[1] + , multiplier + (withConsumerStats[1]/noConsumerStats[1])); final int reasonableMultiplier = 15; assertTrue( max X times as slow with consumer + withConsumerStats[1] + , with no Consumer + noConsumerStats[1] + , multiplier + (withConsumerStats[1]/noConsumerStats[1]), withConsumerStats[1] < noConsumerStats[1] * reasonableMultiplier); final int toReceive = toSend * numIterations * consumerCount * 2; Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { LOG info( count + allMessagesList getMessageCount()); return toReceive == allMessagesList getMessageCount(); } }, 60 * 1000); assertEquals( got all messages , toReceive, allMessagesList getMessageCount()); } private MessageProducer createMessageProducer(Session session, Destination destination) throws JMSException { MessageProducer producer = session createProducer(destination); producer setDeliveryMode(DeliveryMode PERSISTENT); return producer; } private void startInactiveConsumers(ConnectionFactory factory, Destination destination) throws Exception { startConsumers(factory, destination); for (Connection connection connections) { connection close(); } connections clear(); consumers clear(); } protected void startConsumers(ConnectionFactory factory, Destination dest) throws Exception { MessageConsumer consumer; for (int i = 0; i < consumerCount; i++) { TimedMessageListener list = new TimedMessageListener(); consumer = createDurableSubscriber(factory createConnection(), dest, consumer + (i + 1)); consumer setMessageListener(list); consumers put(consumer, list); } } protected TopicSubscriber createDurableSubscriber(Connection conn, Destination dest, String name) throws Exception { conn setClientID(name); connections add(conn); conn start(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); final TopicSubscriber consumer = sess createDurableSubscriber((javax jms Topic)dest, name); return consumer; } private double[] produceMessages(Destination destination, final int toSend, final int numIterations, Session session, MessageProducer producer, Object addConsumerSignal) throws Exception { long start; long count = 0; double batchMax = 0, max = 0, sum = 0; for (int i=0; i<numIterations; i++) { start = System currentTimeMillis(); for (int j=0; j < toSend; j++) { long singleSendstart = System currentTimeMillis(); TextMessage msg = createTextMessage(session, + j); int priority = ((int)count%10); producer send(msg, DeliveryMode PERSISTENT, priority, 0); max = Math max(max, (System currentTimeMillis() - singleSendstart)); if (++count % 500 == 0) { if (addConsumerSignal != null) { synchronized (addConsumerSignal) { addConsumerSignal notifyAll(); LOG info( Signalled add consumer ); } } } ; if (count % 5000 == 0) { LOG info( Sent + count + , singleSendMax + max); } } long duration = System currentTimeMillis() - start; batchMax = Math max(batchMax, duration); sum += duration; LOG info( Iteration + i + , sent + toSend + , time + duration + , batchMax + batchMax + , singleSendMax + max); } LOG info( Sent + toSend * numIterations + , batchMax + batchMax + singleSendMax + max); return new double[]{batchMax, sum/numIterations}; } protected TextMessage createTextMessage(Session session, String initText) throws Exception { TextMessage msg = session createTextMessage(); if (initText length() < messageSize) { char[] data = new char[messageSize - initText length()]; Arrays fill(data, * ); String str = new String(data); msg setText(initText + str); } else { msg setText(initText); } return msg; } Override protected void setUp() throws Exception { topic = true; super setUp(); broker = createBroker(); broker start(); } Override protected void tearDown() throws Exception { for (Iterator<Connection> iter = connections iterator(); iter hasNext();) { Connection conn = iter next(); try { conn close(); } catch (Throwable e) { } } broker stop(); allMessagesList flushMessages(); consumers clear(); super tearDown(); } protected BrokerService createBroker() throws Exception { BrokerService brokerService = new BrokerService(); brokerService setEnableStatistics(false); brokerService addConnector( tcp brokerService setDeleteAllMessagesOnStartup(true); PolicyEntry policy = new PolicyEntry(); policy setPrioritizedMessages(true); policy setMaxPageSize(500); StorePendingDurableSubscriberMessageStoragePolicy durableSubPending = new StorePendingDurableSubscriberMessageStoragePolicy(); durableSubPending setImmediatePriorityDispatch(true); durableSubPending setUseCache(true); policy setPendingDurableSubscriberPolicy(durableSubPending); PolicyMap policyMap = new PolicyMap(); policyMap setDefaultEntry(policy); brokerService setDestinationPolicy(policyMap); setDefaultPersistenceAdapter(brokerService); return brokerService; } protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( broker getTransportConnectors() get(0) getPublishableConnectString()); ActiveMQPrefetchPolicy prefetchPolicy = new ActiveMQPrefetchPolicy(); prefetchPolicy setAll(1); factory setPrefetchPolicy(prefetchPolicy); factory setDispatchAsync(true); return factory; } public static Test suite() { return suite(ConcurrentProducerDurableConsumerTest class); } class TimedMessageListener implements MessageListener { final int batchSize = 1000; CountDownLatch firstReceiptLatch = new CountDownLatch(1); long mark = System currentTimeMillis(); long firstReceipt = 0l; long receiptAccumulator = 0; long batchReceiptAccumulator = 0; long maxReceiptTime = 0; AtomicLong count = new AtomicLong(0); Map<Integer, MessageIdList> messageLists = new ConcurrentHashMap<Integer, MessageIdList>(new HashMap<Integer, MessageIdList>()); Override public void onMessage(Message message) { final long current = System currentTimeMillis(); final long duration = current - mark; receiptAccumulator += duration; int priority = 0; try { priority = message getJMSPriority(); } catch (JMSException ignored) {} if (!messageLists containsKey(priority)) { MessageIdList perPriorityList = new MessageIdList(); perPriorityList setParent(allMessagesList); messageLists put(priority, perPriorityList); } messageLists get(priority) onMessage(message); if (count incrementAndGet() == 1) { firstReceipt = duration; firstReceiptLatch countDown(); LOG info( First receipt in + firstReceipt + ms ); } else if (count get() % batchSize == 0) { LOG info( Consumed + count get() + in + batchReceiptAccumulator + ms + , priority + priority); batchReceiptAccumulator=0; } maxReceiptTime = Math max(maxReceiptTime, duration); receiptAccumulator += duration; batchReceiptAccumulator += duration; mark = current; } long getMessageCount() { return count get(); } long getFirstReceipt() throws Exception { firstReceiptLatch await(30, TimeUnit SECONDS); return firstReceipt; } public long waitForReceivedLimit(long limit) throws Exception { final long expiry = System currentTimeMillis() + 30*60*1000; while (count get() < limit) { if (System currentTimeMillis() > expiry) { throw new RuntimeException( Expired waiting for X messages, + limit); } TimeUnit SECONDS sleep(2); String missing = findFirstMissingMessage(); if (missing != null) { LOG info( first missing = + missing); throw new RuntimeException( We have a missing message + missing); } } return receiptAccumulator/(limit/batchSize); } private String findFirstMissingMessage() { MessageId current = new MessageId(); for (MessageIdList priorityList messageLists values()) { MessageId previous = null; for (String id priorityList getMessageIds()) { current setValue(id); if (previous == null) { previous = current copy(); } else { if (current getProducerSequenceId() - 1 != previous getProducerSequenceId() && current getProducerSequenceId() - 10 != previous getProducerSequenceId()) { return Missing next after + previous + , got + current; } else { previous = current copy(); } } } } return null; } } }",1.0,
3282,3282,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ConcurrentProducerDurableConsumerTest.,TimedMessageListener,"class TimedMessageListener implements MessageListener { final int batchSize = 1000; CountDownLatch firstReceiptLatch = new CountDownLatch(1); long mark = System currentTimeMillis(); long firstReceipt = 0l; long receiptAccumulator = 0; long batchReceiptAccumulator = 0; long maxReceiptTime = 0; AtomicLong count = new AtomicLong(0); Map<Integer, MessageIdList> messageLists = new ConcurrentHashMap<Integer, MessageIdList>(new HashMap<Integer, MessageIdList>()); Override public void onMessage(Message message) { final long current = System currentTimeMillis(); final long duration = current - mark; receiptAccumulator += duration; int priority = 0; try { priority = message getJMSPriority(); } catch (JMSException ignored) {} if (!messageLists containsKey(priority)) { MessageIdList perPriorityList = new MessageIdList(); perPriorityList setParent(allMessagesList); messageLists put(priority, perPriorityList); } messageLists get(priority) onMessage(message); if (count incrementAndGet() == 1) { firstReceipt = duration; firstReceiptLatch countDown(); LOG info( First receipt in + firstReceipt + ms ); } else if (count get() % batchSize == 0) { LOG info( Consumed + count get() + in + batchReceiptAccumulator + ms + , priority + priority); batchReceiptAccumulator=0; } maxReceiptTime = Math max(maxReceiptTime, duration); receiptAccumulator += duration; batchReceiptAccumulator += duration; mark = current; } long getMessageCount() { return count get(); } long getFirstReceipt() throws Exception { firstReceiptLatch await(30, TimeUnit SECONDS); return firstReceipt; } public long waitForReceivedLimit(long limit) throws Exception { final long expiry = System currentTimeMillis() + 30*60*1000; while (count get() < limit) { if (System currentTimeMillis() > expiry) { throw new RuntimeException( Expired waiting for X messages, + limit); } TimeUnit SECONDS sleep(2); String missing = findFirstMissingMessage(); if (missing != null) { LOG info( first missing = + missing); throw new RuntimeException( We have a missing message + missing); } } return receiptAccumulator/(limit/batchSize); } private String findFirstMissingMessage() { MessageId current = new MessageId(); for (MessageIdList priorityList messageLists values()) { MessageId previous = null; for (String id priorityList getMessageIds()) { current setValue(id); if (previous == null) { previous = current copy(); } else { if (current getProducerSequenceId() - 1 != previous getProducerSequenceId() && current getProducerSequenceId() - 10 != previous getProducerSequenceId()) { return Missing next after + previous + , got + current; } else { previous = current copy(); } } } } return null; } }",1.0,
3284,3284,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ConcurrentProducerQueueConsumerTest.,TimedMessageListener,"static class TimedMessageListener implements MessageListener { static final AtomicLong count = new AtomicLong(0); final int batchSize = 1000; final CountDownLatch firstReceiptLatch = new CountDownLatch(1); long mark = System currentTimeMillis(); long firstReceipt = 0l; long receiptAccumulator = 0; long batchReceiptAccumulator = 0; long maxReceiptTime = 0; final Map<Integer, MessageIdList> messageLists = new ConcurrentHashMap<Integer, MessageIdList>(new HashMap<Integer, MessageIdList>()); Override public void onMessage(Message message) { final long current = System currentTimeMillis(); final long duration = current - mark; receiptAccumulator += duration; int priority = 0; try { priority = message getJMSPriority(); } catch (JMSException ignored) {} if (!messageLists containsKey(priority)) { messageLists put(priority, new MessageIdList()); } messageLists get(priority) onMessage(message); if (count incrementAndGet() == 1) { firstReceipt = duration; firstReceiptLatch countDown(); LOG info( First receipt in + firstReceipt + ms ); } else if (count get() % batchSize == 0) { LOG info( Consumed + count get() + in + batchReceiptAccumulator + ms + , priority + priority); batchReceiptAccumulator=0; } maxReceiptTime = Math max(maxReceiptTime, duration); receiptAccumulator += duration; batchReceiptAccumulator += duration; mark = current; } long getMessageCount() { return count get(); } long getFirstReceipt() throws Exception { firstReceiptLatch await(30, TimeUnit SECONDS); return firstReceipt; } public long waitForReceivedLimit(long limit) throws Exception { final long expiry = System currentTimeMillis() + 30*60*1000; while (count get() < limit) { if (System currentTimeMillis() > expiry) { throw new RuntimeException( Expired waiting for X messages, + limit); } TimeUnit SECONDS sleep(2); String missing = findFirstMissingMessage(); if (missing != null) { LOG info( first missing = + missing); throw new RuntimeException( We have a missing message + missing); } } return receiptAccumulator/(limit/batchSize); } private String findFirstMissingMessage() { return null; } }",1.0,
3288,3288,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\CreateLotsOfTemporaryQueuesTest.,CreateLotsOfTemporaryQueuesTest,"public class CreateLotsOfTemporaryQueuesTest extends EmbeddedBrokerAndConnectionTestSupport { private static final Logger LOG = LoggerFactory getLogger(CreateLotsOfTemporaryQueuesTest class); private static int numberToCreate = 500; private static long sleep = 20; public static void main(String[] args) { configure(args); TestRunner run(suite()); } public static Test suite() { return new TestSuite(CreateLotsOfTemporaryQueuesTest class); } public void testCreateLotsOfTemporaryQueues() throws Exception { LOG info( Creating + numberToCreate + temporary queue(s) ); Session session = connection createSession(true, Session AUTO ACKNOWLEDGE); for (int i = 0; i < numberToCreate; i++) { if (i % 1000 == 0) { LOG info( attempt + i); } TemporaryQueue temporaryQueue = session createTemporaryQueue(); temporaryQueue delete(); Thread sleep(sleep); } LOG info( Created + numberToCreate + temporary queue(s) ); } public static void configure(String[] args) { if (args length > 0) { numberToCreate = Integer parseInt(args[0]); } } }",1.0,
3290,3290,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DiscriminatingConsumerLoadTest.,DiscriminatingConsumerLoadTest,"public class DiscriminatingConsumerLoadTest extends TestSupport { private static final org apache commons logging Log LOG = org apache commons logging LogFactory getLog(DiscriminatingConsumerLoadTest class); private Connection producerConnection; private Connection consumerConnection; private int counterSent = 0; private int counterReceived = 0; public static final String JMSTYPE EATME = DiscriminatingLoadClient EatMe ; public static final String JMSTYPE IGNOREME = DiscriminatingLoadClient IgnoreMe ; private int testSize = 5000; BrokerService broker; protected void setUp() throws Exception { broker = new BrokerService(); broker setPersistent(false); PolicyMap policyMap = new PolicyMap(); PolicyEntry defaultPolicy = new PolicyEntry(); defaultPolicy setMaxPageSize(testSize); policyMap setDefaultEntry(defaultPolicy); broker setDestinationPolicy(policyMap); broker start(); super setUp(); this producerConnection = this createConnection(); this consumerConnection = this createConnection(); } protected void tearDown() throws Exception { if (producerConnection != null) { producerConnection close(); producerConnection = null; } if (consumerConnection != null) { consumerConnection close(); consumerConnection = null; } super tearDown(); broker stop(); } public void testNonDiscriminatingConsumer() throws Exception { consumerConnection = createConnection(); consumerConnection start(); LOG info( consumerConnection = +consumerConnection); try {Thread sleep(1000); } catch (Exception e) {} Consumer consumer = new Consumer(consumerConnection, null); Thread consumerThread = new Thread(consumer); consumerThread start(); producerConnection = createConnection(); producerConnection start(); LOG info( producerConnection = +producerConnection); try {Thread sleep(3000); } catch (Exception e) {} Producer producer = new Producer(producerConnection); Thread producerThread = new Thread(producer); producerThread start(); consumerThread join(); producer stop = true; if (consumer getCount() == testSize ) LOG info( test complete all messsages consumed!! ); else LOG info( test failed Sent + (testSize / 1) + messages intended to be consumed ( + testSize + total), but only consumed + consumer getCount()); assertTrue( Sent + testSize + messages intended to be consumed, but only consumed + consumer getCount(), (consumer getCount() == testSize )); assertFalse( Delivery of messages to consumer was halted during this test , consumer deliveryHalted()); } public void testDiscriminatingConsumer() throws Exception { consumerConnection = createConnection(); consumerConnection start(); LOG info( consumerConnection = +consumerConnection); try {Thread sleep(1000); } catch (Exception e) {} Consumer consumer = new Consumer(consumerConnection, JMSTYPE EATME); Thread consumerThread = new Thread(consumer); consumerThread start(); producerConnection = createConnection(); producerConnection start(); LOG info( producerConnection = +producerConnection); try {Thread sleep(3000); } catch (Exception e) {} Producer producer = new Producer(producerConnection); Thread producerThread = new Thread(producer); producerThread start(); consumerThread join(); producer stop = true; if (consumer getCount() == (testSize / 2)) { LOG info( test complete all messsages consumed!! ); } else { LOG info( test failed Sent + testSize + original messages, only half of which ( + (testSize / 2) + ) were intended to be consumed consumer paused at + consumer getCount()); } assertTrue( Sent + testSize + original messages, only half of which ( + (testSize / 2) + ) were intended to be consumed consumer paused at + consumer getCount(), (consumer getCount() == (testSize / 2))); assertTrue( Delivery of messages to consumer was halted during this test as it only wants half , consumer deliveryHalted()); } private class Producer extends Thread { private int counterSent = 0; private Connection connection = null; public boolean stop = false; public Producer(Connection connection) { this connection = connection; } public void run() { try { final Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); final Queue queue = session createQueue( test ); Thread sleep(10000); MessageProducer producer = session createProducer(queue); while (!stop && (counterSent < testSize)) { TextMessage message = session createTextMessage( *** Ill Ini *** ); message setJMSType(JMSTYPE EATME); producer send(message,DeliveryMode NON PERSISTENT,0,1800000); counterSent++; message = session createTextMessage( *** Ill Ini *** ); message setJMSType(JMSTYPE IGNOREME); producer send(message,DeliveryMode NON PERSISTENT,0,1800000); counterSent++; } session close(); } catch (Exception e) { e printStackTrace(); } LOG info( producer thread complete + counterSent + messages sent to the queue ); } public int getCount() { return this counterSent; } } private class Consumer extends Thread { protected int counterReceived = 0; private Connection connection = null; private String jmsSelector = null; private boolean deliveryHalted = false; public Consumer(Connection connection, String jmsSelector) { this connection = connection; this jmsSelector = jmsSelector; } public void run() { boolean testComplete = false; try { Session session = consumerConnection createSession(false, Session AUTO ACKNOWLEDGE); final Queue queue = session createQueue( test ); MessageConsumer consumer = null; if (null != this jmsSelector) { consumer = session createConsumer(queue, JMSType= + this jmsSelector + ); } else { consumer = session createConsumer(queue); } while (!deliveryHalted && (counterReceived < testSize)) { TextMessage result = (TextMessage) consumer receive(30000); if (result != null) { counterReceived++; LOG info( consuming JMSType = + result getJMSType() + received = + counterReceived); } else { LOG info( consuming timeout while waiting for a message broker must have stopped delivery received = + counterReceived); deliveryHalted = true; } } session close(); } catch (Exception e) { e printStackTrace(); } } public int getCount() { return this counterReceived; } public boolean deliveryHalted() { return this deliveryHalted; } } }",1.0,
3291,3291,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DiscriminatingConsumerLoadTest.,Producer,"private class Producer extends Thread { private int counterSent = 0; private Connection connection = null; public boolean stop = false; public Producer(Connection connection) { this connection = connection; } public void run() { try { final Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); final Queue queue = session createQueue( test ); Thread sleep(10000); MessageProducer producer = session createProducer(queue); while (!stop && (counterSent < testSize)) { TextMessage message = session createTextMessage( *** Ill Ini *** ); message setJMSType(JMSTYPE EATME); producer send(message,DeliveryMode NON PERSISTENT,0,1800000); counterSent++; message = session createTextMessage( *** Ill Ini *** ); message setJMSType(JMSTYPE IGNOREME); producer send(message,DeliveryMode NON PERSISTENT,0,1800000); counterSent++; } session close(); } catch (Exception e) { e printStackTrace(); } LOG info( producer thread complete + counterSent + messages sent to the queue ); } public int getCount() { return this counterSent; } }",1.0,
3292,3292,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DiscriminatingConsumerLoadTest.,Consumer,"private class Consumer extends Thread { protected int counterReceived = 0; private Connection connection = null; private String jmsSelector = null; private boolean deliveryHalted = false; public Consumer(Connection connection, String jmsSelector) { this connection = connection; this jmsSelector = jmsSelector; } public void run() { boolean testComplete = false; try { Session session = consumerConnection createSession(false, Session AUTO ACKNOWLEDGE); final Queue queue = session createQueue( test ); MessageConsumer consumer = null; if (null != this jmsSelector) { consumer = session createConsumer(queue, JMSType= + this jmsSelector + ); } else { consumer = session createConsumer(queue); } while (!deliveryHalted && (counterReceived < testSize)) { TextMessage result = (TextMessage) consumer receive(30000); if (result != null) { counterReceived++; LOG info( consuming JMSType = + result getJMSType() + received = + counterReceived); } else { LOG info( consuming timeout while waiting for a message broker must have stopped delivery received = + counterReceived); deliveryHalted = true; } } session close(); } catch (Exception e) { e printStackTrace(); } } public int getCount() { return this counterReceived; } public boolean deliveryHalted() { return this deliveryHalted; } }",1.0,
3295,3295,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DispatchMultipleConsumersTest.,ProducerThread,"private class ProducerThread extends Thread { int count; Connection conn; Session session; MessageProducer producer; public ProducerThread(ActiveMQConnectionFactory connFactory, int count, String name) { super(); this count = count; this setName(name); logger trace( Created new producer thread + name); try { conn = connFactory createConnection(); conn start(); session = conn createSession(false, Session AUTO ACKNOWLEDGE); producer = session createProducer(dest); start(); } catch (JMSException e) { logger error( Failed to start producer thread + name, e); } } Override public void run() { int i = 0; try { for (; i < count; i++) { producer send(session createTextMessage(msgStr)); Thread sleep(500); } conn close(); } catch (JMSException e) { logger error(e getMessage(), e); } catch (InterruptedException e) { logger error( Interrupted! , e); } sentCount addAndGet(i); producerLatch countDown(); if (logger isTraceEnabled()) { logger trace( Sent + i + messages from thread + getName()); } } }",1.0,
3296,3296,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableConsumerCloseAndReconnectTcpTest.,DurableConsumerCloseAndReconnectTcpTest,"public class DurableConsumerCloseAndReconnectTcpTest extends DurableConsumerCloseAndReconnectTest implements ExceptionListener, TransportListener { private static final Logger LOG = LoggerFactory getLogger(DurableConsumerCloseAndReconnectTcpTest class); private BrokerService broker; private TransportConnector connector; private CountDownLatch gotException = new CountDownLatch(1); private Exception reconnectException; private boolean reconnectInExceptionListener; private boolean reconnectInTransportListener; public void setUp() throws Exception { broker = new BrokerService(); connector = broker addConnector( tcp broker setPersistent(false); broker start(); broker waitUntilStarted(); class SlowCloseSocketTcpTransportFactory extends TcpTransportFactory { class SlowCloseSocketFactory extends SocketFactory { class SlowCloseSocket extends Socket { public SlowCloseSocket(String host, int port) throws IOException { super(host, port); } public SlowCloseSocket(InetAddress host, int port) throws IOException { super(host, port); } public SlowCloseSocket(String host, int port, InetAddress localHost, int localPort) throws IOException { super(host, port, localHost, localPort); } public SlowCloseSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException { super(address, port, localAddress, localPort); } Override public synchronized void close() throws IOException { LOG info( delaying close ); try { TimeUnit MILLISECONDS sleep(500); } catch (InterruptedException e) { e printStackTrace(); } super close(); } } Override public Socket createSocket(String host, int port) throws IOException, UnknownHostException { return new SlowCloseSocket(host, port); } Override public Socket createSocket(InetAddress host, int port) throws IOException { return new SlowCloseSocket(host, port); } Override public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException, UnknownHostException { return new SlowCloseSocket(host, port, localHost, localPort); } Override public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException { return new SlowCloseSocket(address, port, localAddress, localPort); } } Override protected SocketFactory createSocketFactory() throws IOException { return new SlowCloseSocketFactory(); } } TransportFactory registerTransportFactory( tcp , new SlowCloseSocketTcpTransportFactory()); } public void tearDown() throws Exception { broker stop(); broker waitUntilStopped(); } protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory(URISupport removeQuery(connector getConnectUri()) + useKeepAlive=false&wireFormat maxInactivityDuration=2000 ); } Override public void testCreateDurableConsumerCloseThenReconnect() throws Exception { reconnectInExceptionListener = true; makeConsumer(); connection setExceptionListener(this); ((ActiveMQConnection)connection) addTransportListener(this); assertTrue( inactive connection timedout , gotException await(30, TimeUnit SECONDS)); assertNotNull( Got expected exception on close reconnect overlap + reconnectException, reconnectException); } public void testCreateDurableConsumerSlowCloseThenReconnectTransportListener() throws Exception { reconnectInTransportListener = true; makeConsumer(); connection setExceptionListener(this); ((ActiveMQConnection)connection) addTransportListener(this); assertTrue( inactive connection timedout , gotException await(30, TimeUnit SECONDS)); assertNull( No exception + reconnectException, reconnectException); } public void onException(JMSException exception) { LOG info( Exception listener exception + exception); if (reconnectInExceptionListener) { try { makeConsumer(); } catch (Exception e) { reconnectException = e; } gotException countDown(); } } public void onCommand(Object command) {} public void onException(IOException error) { LOG info( Transport listener exception + error); if (reconnectInTransportListener) { try { TimeUnit MILLISECONDS sleep(500); makeConsumer(); } catch (Exception e) { reconnectException = e; } gotException countDown(); } } public void transportInterupted() {} public void transportResumed() {} }",1.0,
3297,3297,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableConsumerCloseAndReconnectTcpTest.,SlowCloseSocketTcpTransportFactory,"class SlowCloseSocketTcpTransportFactory extends TcpTransportFactory { class SlowCloseSocketFactory extends SocketFactory { class SlowCloseSocket extends Socket { public SlowCloseSocket(String host, int port) throws IOException { super(host, port); } public SlowCloseSocket(InetAddress host, int port) throws IOException { super(host, port); } public SlowCloseSocket(String host, int port, InetAddress localHost, int localPort) throws IOException { super(host, port, localHost, localPort); } public SlowCloseSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException { super(address, port, localAddress, localPort); } Override public synchronized void close() throws IOException { LOG info( delaying close ); try { TimeUnit MILLISECONDS sleep(500); } catch (InterruptedException e) { e printStackTrace(); } super close(); } } Override public Socket createSocket(String host, int port) throws IOException, UnknownHostException { return new SlowCloseSocket(host, port); } Override public Socket createSocket(InetAddress host, int port) throws IOException { return new SlowCloseSocket(host, port); } Override public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException, UnknownHostException { return new SlowCloseSocket(host, port, localHost, localPort); } Override public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException { return new SlowCloseSocket(address, port, localAddress, localPort); } } Override protected SocketFactory createSocketFactory() throws IOException { return new SlowCloseSocketFactory(); } }",1.0,
3299,3299,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableConsumerCloseAndReconnectTcpTest.,SlowCloseSocket,"class SlowCloseSocket extends Socket { public SlowCloseSocket(String host, int port) throws IOException { super(host, port); } public SlowCloseSocket(InetAddress host, int port) throws IOException { super(host, port); } public SlowCloseSocket(String host, int port, InetAddress localHost, int localPort) throws IOException { super(host, port, localHost, localPort); } public SlowCloseSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException { super(address, port, localAddress, localPort); } Override public synchronized void close() throws IOException { LOG info( delaying close ); try { TimeUnit MILLISECONDS sleep(500); } catch (InterruptedException e) { e printStackTrace(); } super close(); } } Override",1.0,
3301,3301,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubDelayedUnsubscribeTest.,DurableSubDelayedUnsubscribeTest,"public class DurableSubDelayedUnsubscribeTest { private static final Logger LOG = LoggerFactory getLogger(DurableSubDelayedUnsubscribeTest class); private static final long RUNTIME = 2 * 60 * 1000; private static final int CARGO SIZE = 400; private static final int MAX CLIENTS = 15; private static boolean ALLOW SUBSCRIPTION ABANDONMENT = true; private static final Vector<Throwable> exceptions = new Vector<Throwable>(); private BrokerService broker; private ActiveMQTopic topic; private ClientManager clientManager; private Server server; private HouseKeeper houseKeeper; private final ReentrantReadWriteLock processLock = new ReentrantReadWriteLock(true); Test public void testProcess() throws Exception { server start(); clientManager start(); houseKeeper start(); Thread sleep(RUNTIME); server stopped = true; Client lastClient = new Client(32000, ClientType A); lastClient process(1000); clientManager stopped = true; final BrokerService brokerService = this broker; assertTrue( should have only one inactiveSubscriber subscribed but was + brokerService getAdminView() getInactiveDurableTopicSubscribers() length, Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return brokerService getAdminView() getInactiveDurableTopicSubscribers() length == 1; } }, TimeUnit MINUTES toMillis(houseKeeper SWEEP DELAY * 2))); assertTrue( should be no subscribers subscribed but was + brokerService getAdminView() getDurableTopicSubscribers() length, Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return brokerService getAdminView() getDurableTopicSubscribers() length == 0; } }, TimeUnit MINUTES toMillis(3))); processLock writeLock() lock(); ObjectName[] subscribers = broker getAdminView() getDurableTopicSubscribers(); ObjectName[] inactiveSubscribers = broker getAdminView() getInactiveDurableTopicSubscribers(); final KahaDBPersistenceAdapter persistenceAdapter = (KahaDBPersistenceAdapter) broker getPersistenceAdapter(); printDebugClientInfo(subscribers, inactiveSubscribers, persistenceAdapter); assertEquals( should have only one inactiveSubscriber subscribed , 1, broker getAdminView() getInactiveDurableTopicSubscribers() length); assertEquals( should be no subscribers subscribed , 0, broker getAdminView() getDurableTopicSubscribers() length); final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker getPersistenceAdapter(); assertTrue( should be less than 3 journal file left but was + persistenceAdapter getStore() getJournal() getFileMap() size(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return pa getStore() getJournal() getFileMap() size() <= 3; } }, TimeUnit MINUTES toMillis(3))); this houseKeeper shutdown(); assertTrue( no exceptions + exceptions, exceptions isEmpty()); LOG info( DONE ); } private void printDebugClientInfo(ObjectName[] subscribers, ObjectName[] inactiveSubscribers, final KahaDBPersistenceAdapter pa) throws IOException { LOG info( ====>>> START DEBUG Subscriber INFO ); LOG info( Number of subscribers subscribed as seen through JMX is + subscribers length); for (int i = 0; i < subscribers length; i++) { LOG info( subscribers subscribed as seen throngh JMX + subscribers[i]); } LOG info( Number of inactiveSubscribers subscribed as seen through JMX is + inactiveSubscribers length); for (int i = 0; i < inactiveSubscribers length; i++) { LOG info( subscribers subscribed as seen throngh JMX + inactiveSubscribers[i]); } LOG info( ClientManager clients size is + clientManager clients size()); for (int i = 0; i < clientManager clients size(); i++) { LOG info( clients is + clientManager clients get(i)); } LOG info( housekeep subscriptions size is + houseKeeper abandonedSubscriptions size()); for (int i = 0; i < houseKeeper abandonedSubscriptions size(); i++) { LOG info( housekeep is + houseKeeper abandonedSubscriptions get(i)); } LOG info( number of journal files left + pa getStore() getJournal() getFileMap() size()); LOG info( ====>>> END DEBUG Subscriber INFO ); } final class Server extends Thread { public boolean stopped; final String url = vm + jms redeliveryPolicy maximumRedeliveries=2&jms redeliveryPolicy initialRedeliveryDelay=500& + jms producerWindowSize=20971520&jms prefetchPolicy all=100& + jms copyMessageOnSend=false&jms disableTimeStampsByDefault=false& + jms alwaysSyncSend=true&jms dispatchAsync=false& + jms watchTopicAdvisories=false& + waitForStart=200&create=false ; final ConnectionFactory cf = new ActiveMQConnectionFactory(url); final Object sendMutex = new Object(); final String[] cargos = new String[500]; int transRover = 0; int messageRover = 0; public Server() { super( Server ); setDaemon(true); } Override public void run() { try { while (true) { if (stopped) { break; } Thread sleep(500); processLock readLock() lock(); try { send(); } finally { processLock readLock() unlock(); } } } catch (Throwable e) { exit( Server run failed , e); } } public void send() throws JMSException { synchronized (sendMutex) { int trans = ++transRover; boolean relevantTrans = random(2) > 1; ClientType clientType = relevantTrans ClientType randomClientType() null; int count = random(200); LOG info( Sending Trans[id= + trans + , count= + count + , clientType= + clientType + ] ); Connection con = cf createConnection(); Session sess = con createSession(true, Session SESSION TRANSACTED); MessageProducer prod = sess createProducer(null); for (int i = 0; i < count; i++) { Message message = sess createMessage(); message setIntProperty( ID , ++messageRover); message setIntProperty( TRANS , trans); String type = clientType != null clientType randomMessageType() ClientType randomNonRelevantMessageType(); message setStringProperty( TYPE , type); if (CARGO SIZE > 0) message setStringProperty( CARGO , getCargo(random(CARGO SIZE))); prod send(topic, message); } Message message = sess createMessage(); message setIntProperty( ID , ++messageRover); message setIntProperty( TRANS , trans); message setBooleanProperty( COMMIT , true); message setBooleanProperty( RELEVANT , relevantTrans); prod send(topic, message); sess commit(); LOG info( Committed Trans[id= + trans + , count= + count + , clientType= + clientType + ], ID= + messageRover); sess close(); con close(); } } private String getCargo(int length) { if (length == 0) return null; if (length < cargos length) { String result = cargos[length]; if (result == null) { result = getCargoImpl(length); cargos[length] = result; } return result; } return getCargoImpl(length); } private String getCargoImpl(int length) { StringBuilder sb = new StringBuilder(length); for (int i = length; --i >= 0;) { sb append( a ); } return sb toString(); } } private enum ClientType { A( a , b , c ), B( c , d , e ), C( d , e , f ), D( g , h ); public final String[] messageTypes; public final String selector; ClientType(String messageTypes) { this messageTypes = messageTypes; StringBuilder sb = new StringBuilder( TYPE in ( ); for (int i = 0; i < messageTypes length; i++) { if (i > 0) sb append( , ); sb append( ) append(messageTypes[i]) append( ); } sb append( ) ); selector = sb toString(); } public static ClientType randomClientType() { return values()[DurableSubDelayedUnsubscribeTest random(values() length - 1)]; } public final String randomMessageType() { return messageTypes[DurableSubDelayedUnsubscribeTest random(messageTypes length - 1)]; } public static String randomNonRelevantMessageType() { return Integer toString(DurableSubDelayedUnsubscribeTest random(20)); } Override public final String toString() { return this name() ; } } private final class ClientManager extends Thread { private int clientRover = 0; private final CopyOnWriteArrayList<Client> clients = new CopyOnWriteArrayList<Client>(); private boolean stopped; public ClientManager() { super( ClientManager ); setDaemon(true); } Override public void run() { try { while (true) { if (clients size() < MAX CLIENTS) { if (stopped) { break; } processLock readLock() lock(); try { createNewClient(); } finally { processLock readLock() unlock(); } } int size = clients size(); sleepRandom(size * 3 * 1000, size * 6 * 1000); } } catch (Throwable e) { exit( ClientManager run failed , e); } } private void createNewClient() throws JMSException { ClientType type = ClientType randomClientType(); Client client; synchronized (server sendMutex) { client = new Client(++clientRover, type); clients add(client); } client start(); LOG info(client toString() + created + this); } public void removeClient(Client client) { clients remove(client); } Override public String toString() { StringBuilder sb = new StringBuilder( ClientManager[count= ); sb append(clients size()); sb append( , clients= ); boolean sep = false; for (Client client clients) { if (sep) sb append( , ); else sep = true; sb append(client toString()); } sb append( ] ); return sb toString(); } } private final class Client extends Thread { String url = failover (tcp + jms alwaysSyncSend=true&jms dispatchAsync=true& + jms producerWindowSize=20971520& + jms copyMessageOnSend=false& + initialReconnectDelay=100&maxReconnectDelay=30000& + useExponentialBackOff=true ; final ConnectionFactory cf = new ActiveMQConnectionFactory(url); public static final String SUBSCRIPTION NAME = subscription ; private final int id; private final String conClientId; private final int lifetime = 60 * 1000; private final int online = 1 * 1000; private final int offline = 59 * 1000; private final ClientType clientType; private final String selector; public Client(int id, ClientType clientType) throws JMSException { super( Client + id); setDaemon(true); this id = id; conClientId = cli + id; this clientType = clientType; selector = (COMMIT = true and RELEVANT = true) or + clientType selector; subscribe(); } Override public void run() { long end = System currentTimeMillis() + lifetime; try { boolean sleep = false; while (true) { long max = end - System currentTimeMillis(); if (max <= 0) break; if (sleep) Thread sleep(offline); else sleep = true; processLock readLock() lock(); try { process(online); } finally { processLock readLock() unlock(); } } if (!ALLOW SUBSCRIPTION ABANDONMENT) { unsubscribe(); ALLOW SUBSCRIPTION ABANDONMENT = true; } else { LOG info( Client abandon the subscription + this); houseKeeper abandonedSubscriptions add(conClientId); ALLOW SUBSCRIPTION ABANDONMENT = false; } } catch (Throwable e) { exit(toString() + failed , e); } clientManager removeClient(this); LOG info(toString() + DONE ); } private void process(long processingTime) throws JMSException { long end = System currentTimeMillis() + processingTime; long hardEnd = end + 20000; boolean inTransaction = false; int transCount = 0; LOG info(toString() + ONLINE ); Connection con = openConnection(); Session sess = con createSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = sess createDurableSubscriber(topic, SUBSCRIPTION NAME, selector, false); try { do { long max = end - System currentTimeMillis(); if (max <= 0) { if (!inTransaction) break; max = hardEnd - System currentTimeMillis(); if (max <= 0) exit( + this + failed Transaction is not finished ); } Message message = consumer receive(max); if (message == null) continue; if (message propertyExists( COMMIT )) { message acknowledge(); LOG info( Received Trans[id= + message getIntProperty( TRANS ) + , count= + transCount + ] in + this + ); inTransaction = false; transCount = 0; } else { inTransaction = true; transCount++; } } while (true); } finally { sess close(); con close(); LOG info(toString() + OFFLINE ); } } private Connection openConnection() throws JMSException { Connection con = cf createConnection(); con setClientID(conClientId); con start(); return con; } private void subscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session createDurableSubscriber(topic, SUBSCRIPTION NAME, selector, true); session close(); con close(); } private void unsubscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session unsubscribe(SUBSCRIPTION NAME); session close(); con close(); } Override public String toString() { return Client[id= + id + , type= + clientType + ] ; } } private final class HouseKeeper extends Thread { private final AtomicBoolean done = new AtomicBoolean(); public final long SWEEP DELAY = TimeUnit MINUTES toMillis(3); private HouseKeeper() { super( HouseKeeper ); setDaemon(true); } public final CopyOnWriteArrayList<String> abandonedSubscriptions = new CopyOnWriteArrayList<String>(); public void shutdown() throws Exception { done set(true); this interrupt(); this join(TimeUnit MINUTES toMillis(SWEEP DELAY)); if (!abandonedSubscriptions isEmpty()) { this sweep(); } } Override public void run() { while (!done get()) { try { Thread sleep(SWEEP DELAY); processLock readLock() lock(); try { sweep(); } finally { processLock readLock() unlock(); } } catch (InterruptedException ex) { break; } catch (Throwable e) { Exception log = new Exception( HouseKeeper failed , e); log printStackTrace(); } } } private void sweep() throws Exception { LOG info( Housekeeper sweeping ); int closed = 0; ArrayList<String> sweeped = new ArrayList<String>(); try { for (String clientId abandonedSubscriptions) { LOG info( Sweeping out subscription of + clientId + ); broker getAdminView() destroyDurableSubscriber(clientId, Client SUBSCRIPTION NAME); sweeped add(clientId); closed++; } } catch (Exception ignored) { LOG info( Ex on destroy sub + ignored); } finally { abandonedSubscriptions removeAll(sweeped); } LOG info( Housekeeper sweeped out + closed + subscriptions ); } } public static int random(int max) { return (int) (Math random() * (max + 1)); } public static int random(int min, int max) { return random(max - min) + min; } public static void sleepRandom(int maxMillis) throws InterruptedException { Thread sleep(random(maxMillis)); } public static void sleepRandom(int minMillis, int maxMillis) throws InterruptedException { Thread sleep(random(minMillis, maxMillis)); } public static final class Random { final int min; final int max; Random(int min, int max) { this min = min; this max = max; } public int next() { return random(min, max); } public void sleepRandom() throws InterruptedException { DurableSubDelayedUnsubscribeTest sleepRandom(min, max); } } public static void exit(String message) { exit(message, null); } public static void exit(String message, Throwable e) { Throwable cause = new RuntimeException(message, e); LOG error(message, cause); exceptions add(cause); fail(cause toString()); } Before public void setUp() throws Exception { topic = new ActiveMQTopic( TopicT ); startBroker(); clientManager = new ClientManager(); server = new Server(); houseKeeper = new HouseKeeper(); } After public void tearDown() throws Exception { destroyBroker(); } private void startBroker() throws Exception { startBroker(true); } private void startBroker(boolean deleteAllMessages) throws Exception { if (broker != null) return; broker = BrokerFactory createBroker( broker (vm broker setBrokerName(getName()); broker setAdvisorySupport(false); broker setDeleteAllMessagesOnStartup(deleteAllMessages); File kahadbData = new File( activemq-data/ + getName() + -kahadb ); if (deleteAllMessages) delete(kahadbData); broker setPersistent(true); KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter(); kahadb setDirectory(kahadbData); kahadb setJournalMaxFileLength(512 * 1024); broker setPersistenceAdapter(kahadb); broker addConnector( tcp broker getSystemUsage() getMemoryUsage() setLimit(256 * 1024 * 1024); broker getSystemUsage() getTempUsage() setLimit(256 * 1024 * 1024); broker getSystemUsage() getStoreUsage() setLimit(256 * 1024 * 1024); broker start(); } protected static String getName() { return DurableSubProcessWithRestartTest ; } private static boolean delete(File path) { if (path == null) return true; if (path isDirectory()) { for (File file path listFiles()) { delete(file); } } return path delete(); } private void destroyBroker() throws Exception { if (broker == null) return; broker stop(); broker = null; } }",1.0,
3303,3303,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubDelayedUnsubscribeTest.,ClientManager,"private final class ClientManager extends Thread { private int clientRover = 0; private final CopyOnWriteArrayList<Client> clients = new CopyOnWriteArrayList<Client>(); private boolean stopped; public ClientManager() { super( ClientManager ); setDaemon(true); } Override public void run() { try { while (true) { if (clients size() < MAX CLIENTS) { if (stopped) { break; } processLock readLock() lock(); try { createNewClient(); } finally { processLock readLock() unlock(); } } int size = clients size(); sleepRandom(size * 3 * 1000, size * 6 * 1000); } } catch (Throwable e) { exit( ClientManager run failed , e); } } private void createNewClient() throws JMSException { ClientType type = ClientType randomClientType(); Client client; synchronized (server sendMutex) { client = new Client(++clientRover, type); clients add(client); } client start(); LOG info(client toString() + created + this); } public void removeClient(Client client) { clients remove(client); } Override public String toString() { StringBuilder sb = new StringBuilder( ClientManager[count= ); sb append(clients size()); sb append( , clients= ); boolean sep = false; for (Client client clients) { if (sep) sb append( , ); else sep = true; sb append(client toString()); } sb append( ] ); return sb toString(); } }",1.0,
3305,3305,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubDelayedUnsubscribeTest.,HouseKeeper,"private final class HouseKeeper extends Thread { private final AtomicBoolean done = new AtomicBoolean(); public final long SWEEP DELAY = TimeUnit MINUTES toMillis(3); private HouseKeeper() { super( HouseKeeper ); setDaemon(true); } public final CopyOnWriteArrayList<String> abandonedSubscriptions = new CopyOnWriteArrayList<String>(); public void shutdown() throws Exception { done set(true); this interrupt(); this join(TimeUnit MINUTES toMillis(SWEEP DELAY)); if (!abandonedSubscriptions isEmpty()) { this sweep(); } } Override public void run() { while (!done get()) { try { Thread sleep(SWEEP DELAY); processLock readLock() lock(); try { sweep(); } finally { processLock readLock() unlock(); } } catch (InterruptedException ex) { break; } catch (Throwable e) { Exception log = new Exception( HouseKeeper failed , e); log printStackTrace(); } } } private void sweep() throws Exception { LOG info( Housekeeper sweeping ); int closed = 0; ArrayList<String> sweeped = new ArrayList<String>(); try { for (String clientId abandonedSubscriptions) { LOG info( Sweeping out subscription of + clientId + ); broker getAdminView() destroyDurableSubscriber(clientId, Client SUBSCRIPTION NAME); sweeped add(clientId); closed++; } } catch (Exception ignored) { LOG info( Ex on destroy sub + ignored); } finally { abandonedSubscriptions removeAll(sweeped); } LOG info( Housekeeper sweeped out + closed + subscriptions ); } }",1.0,
3306,3306,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubDelayedUnsubscribeTest.,Random,"public static final class Random { final int min; final int max; Random(int min, int max) { this min = min; this max = max; } public int next() { return random(min, max); } public void sleepRandom() throws InterruptedException { DurableSubDelayedUnsubscribeTest sleepRandom(min, max); } }",1.0,
3309,3309,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessConcurrentCommitActivateNoDuplicateTest.,ClientManager,"private final class ClientManager extends Thread { private int clientRover = 0; private final CopyOnWriteArrayList<Client> clients = new CopyOnWriteArrayList<Client>(); private boolean end; public ClientManager() { super( ClientManager ); setDaemon(true); } public synchronized void setEnd(boolean end) { this end = end; } Override public void run() { try { while (true) { if (clients size() < MAX CLIENTS && !end) { processLock readLock() lock(); try { createNewClient(); } finally { processLock readLock() unlock(); } } int size = clients size(); Thread sleep(100); } } catch (Throwable e) { exit( ClientManager run failed , e); } } private void createNewClient() throws JMSException { ClientType type = ClientType randomClientType(); Client client; synchronized (server sendMutex) { client = new Client(++clientRover, type, CLIENT LIFETIME, CLIENT ONLINE, CLIENT OFFLINE); clients add(client); } client start(); LOG info(client toString() + created + this); } public void removeClient(Client client) { clients remove(client); } public void onServerMessage(Message message) throws JMSException { for (Client client clients) { client onServerMessage(message); } } Override public String toString() { StringBuilder sb = new StringBuilder( ClientManager[count= ); sb append(clients size()); sb append( , clients= ); boolean sep = false; for (Client client clients) { if (sep) sb append( , ); else sep = true; sb append(client toString()); } sb append( ] ); return sb toString(); } }",1.0,
3310,3310,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessConcurrentCommitActivateNoDuplicateTest.,Client,"private final class Client extends Thread { String url = failover (tcp + jms watchTopicAdvisories=false& + jms alwaysSyncSend=true&jms dispatchAsync=true& + jms producerWindowSize=20971520& + jms copyMessageOnSend=false& + jms sendAcksAsync=false& + initialReconnectDelay=100&maxReconnectDelay=30000& + useExponentialBackOff=true ; final ConnectionFactory cf = new ActiveMQConnectionFactory(url); public static final String SUBSCRIPTION NAME = subscription ; private final int id; private final String conClientId; private final Random lifetime; private final Random online; private final Random offline; private final ClientType clientType; private final String selector; private final ConcurrentLinkedQueue<Message> waitingList = new ConcurrentLinkedQueue<Message>(); private final HashSet<Integer> processed = CHECK REDELIVERY new HashSet<Integer>( 10000) null; private ActiveMQMessageConsumer consumer = null; public Client(int id, ClientType clientType, Random lifetime, Random online, Random offline) throws JMSException { super( Client + id); setDaemon(true); this id = id; conClientId = cli + id; this clientType = clientType; selector = (COMMIT = true and RELEVANT = true) or + clientType selector; this lifetime = lifetime; this online = online; this offline = offline; subscribe(); } Override public void run() { long end = System currentTimeMillis() + 60000; try { boolean sleep = false; while (true) { long max = end - System currentTimeMillis(); if (max <= 0) break; Thread sleep(100); processLock readLock() lock(); onlineCount incrementAndGet(); try { process(online next()); } finally { onlineCount decrementAndGet(); processLock readLock() unlock(); } } if (!ALLOW SUBSCRIPTION ABANDONMENT || random(1) > 0) unsubscribe(); else { LOG info( Client abandon the subscription + this); houseKeeper abandonedSubscriptions add(conClientId); } } catch (Throwable e) { exit(toString() + failed , e); } clientManager removeClient(this); LOG info(toString() + DONE ); } private void process(long millis) throws JMSException { long end = System currentTimeMillis() + 200; long hardEnd = end + 20000; boolean inTransaction = false; int transCount = 0; Connection con = openConnection(); Session sess = con createSession(false, Session CLIENT ACKNOWLEDGE); consumer = (ActiveMQMessageConsumer) sess createDurableSubscriber(topic, SUBSCRIPTION NAME, selector, false); LOG info(toString() + ONLINE ); try { do { long max = end - System currentTimeMillis(); if (max <= 0) { if (!inTransaction) { LOG info(toString() + done after no work! ); break; } max = hardEnd - System currentTimeMillis(); if (max <= 0) exit( + this + failed Transaction is not finished ); } Message message = consumer receive(max); if (message == null) continue; onClientMessage(message); if (message propertyExists( COMMIT )) { message acknowledge(); int trans = message getIntProperty( TRANS ); LOG info( Received Trans[id= + trans + , count= + transCount + ] in + this + ); inTransaction = false; transCount = 0; int committing = server committingTransaction; if (committing == trans) { LOG info( Going offline during transaction commit messageID= + message getIntProperty( ID )); break; } } else { inTransaction = true; transCount++; if (1 == transCount) { LOG info( In Trans[id= + message getIntProperty( TRANS ) + ] first ID= + message getIntProperty( ID )); } } } while (true); } finally { sess close(); con close(); LOG info(toString() + OFFLINE ); Message topMessage = waitingList peek(); if (topMessage != null) checkDeliveryTime(topMessage); } } public void onServerMessage(Message message) throws JMSException { if (Boolean TRUE equals(message getObjectProperty( COMMIT ))) { if (Boolean TRUE equals(message getObjectProperty( RELEVANT ))) waitingList add(message); } else { String messageType = message getStringProperty( TYPE ); if (clientType isRelevant(messageType)) waitingList add(message); } } public void onClientMessage(Message message) { Message serverMessage = waitingList poll(); try { Integer receivedId = (Integer) message getObjectProperty( ID ); if (processed != null && processed contains(receivedId)) LOG info( ! Message has been processed before + this + redeliveredFlag= + message getJMSRedelivered() + , message = + message); if (serverMessage == null) exit( + this + failed There is no next server message, but received + message); Integer serverId = (Integer) serverMessage getObjectProperty( ID ); if (receivedId == null || serverId == null) exit( + this + failed message ID not found r n + received + message + r n + server + serverMessage); if (!serverId equals(receivedId)) { StringBuilder missingList = new StringBuilder(); Object lastTrans = null; int transCount = 0; Message nextServerMessage = serverMessage; do { Integer nextServerId = (Integer) nextServerMessage getObjectProperty( ID ); if (nextServerId equals(receivedId)) { if (lastTrans != null) missingList append( Missing TRANS= ) append(lastTrans) append( , size= ) append(transCount) append( r n ); break; } Object trans = nextServerMessage getObjectProperty( TRANS ); if (!trans equals(lastTrans)) { if (lastTrans != null) missingList append( Missing TRANS= ) append(lastTrans) append( , size= ) append(transCount) append( r n ); lastTrans = trans; transCount = 1; } else transCount++; } while ((nextServerMessage = waitingList poll()) != null); exit( Missing messages! r n + missingList + Received message + message + r n + Expected message + serverMessage); } checkDeliveryTime(message); if (processed != null) processed add(receivedId); } catch (Throwable e) { exit( + this + onClientMessage failed r n + received + message + r n + server + serverMessage, e); } } public void checkDeliveryTime(Message message) throws JMSException { long creation = message getJMSTimestamp(); long min = System currentTimeMillis() - (offline max + online min) * (BROKER RESTART > 0 4 1); if (false && min > creation) { SimpleDateFormat df = new SimpleDateFormat( HH mm ss SSS ); exit( + this + checkDeliveryTime failed Message time + df format(new Date(creation)) + , min + df format(new Date(min)) + r n + message); } } private Connection openConnection() throws JMSException { Connection con = cf createConnection(); con setClientID(conClientId); ((ActiveMQConnection) con) setCloseTimeout(60000); con start(); return con; } private void subscribe() throws JMSException { processLock readLock() lock(); try { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session createDurableSubscriber(topic, SUBSCRIPTION NAME, selector, true); session close(); con close(); } finally { processLock readLock() unlock(); } } private void unsubscribe() throws JMSException { processLock readLock() lock(); LOG info( Unsubscribe + this); try { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session unsubscribe(SUBSCRIPTION NAME); session close(); con close(); } finally { processLock readLock() unlock(); } } Override public String toString() { return Client[id= + id + , type= + clientType + ] consumerId= + (consumer != null consumer getConsumerId() null ); } }",1.0,
3311,3311,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessConcurrentCommitActivateNoDuplicateTest.,HouseKeeper,"private final class HouseKeeper extends Thread { private HouseKeeper() { super( HouseKeeper ); setDaemon(true); } public final CopyOnWriteArrayList<String> abandonedSubscriptions = new CopyOnWriteArrayList<String>(); Override public void run() { while (true) { try { Thread sleep(3 * 60 * 1000); processLock readLock() lock(); try { sweep(); } finally { processLock readLock() unlock(); } } catch (InterruptedException ex) { break; } catch (Throwable e) { Exception log = new Exception( HouseKeeper failed , e); log printStackTrace(); } } } private void sweep() throws Exception { LOG info( Housekeeper sweeping ); int closed = 0; ArrayList<String> sweeped = new ArrayList<String>(); try { for (String clientId abandonedSubscriptions) { LOG info( Sweeping out subscription of + clientId + ); broker getAdminView() destroyDurableSubscriber(clientId, Client SUBSCRIPTION NAME); sweeped add(clientId); closed++; } } catch (Exception ignored) { LOG info( Ex on destroy sub + ignored); } finally { abandonedSubscriptions removeAll(sweeped); } LOG info( Housekeeper sweeped out + closed + subscriptions ); } }",1.0,
3312,3312,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessConcurrentCommitActivateNoDuplicateTest.,Random,"public static final class Random { final int min; final int max; Random(int min, int max) { this min = min; this max = max; } public int next() { return random(min, max); } public void sleepRandom() throws InterruptedException { DurableSubProcessConcurrentCommitActivateNoDuplicateTest sleepRandom(min, max); } }",1.0,
3314,3314,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessMultiRestartTest.,MsgProducer,"final class MsgProducer extends Thread { String url = vm final ConnectionFactory cf = new ActiveMQConnectionFactory(url); private long msgCount; int messageRover = 0; public MsgProducer() { super( MsgProducer ); setDaemon(true); } Override public void run() { long endTime = RUNTIME + System currentTimeMillis(); try { while (endTime > System currentTimeMillis()) { Thread sleep(500); processLock readLock() lock(); try { send(); } finally { processLock readLock() unlock(); } LOG info( MsgProducer msgCount= + msgCount); } } catch (Throwable e) { exit( Server run failed , e); } } public void send() throws JMSException { LOG info( Sending ); Connection con = cf createConnection(); Session sess = con createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer prod = sess createProducer(null); Message message = sess createMessage(); message setIntProperty( ID , ++messageRover); message setBooleanProperty( COMMIT , true); prod send(topic, message); msgCount++; LOG info( Message Sent ); sess close(); con close(); } }",1.0,
3315,3315,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessMultiRestartTest.,DurableSubscriber,"private final class DurableSubscriber extends Thread { String url = tcp final ConnectionFactory cf = new ActiveMQConnectionFactory(url); public static final String SUBSCRIPTION NAME = subscription ; private final int id; private final String conClientId; private long msgCount; public DurableSubscriber(int id) throws JMSException { super( DurableSubscriber + id); setDaemon(true); this id = id; conClientId = cli + id; subscribe(); } Override public void run() { long end = System currentTimeMillis() + RUNTIME; try { while (end > System currentTimeMillis()) { processLock readLock() lock(); try { process(5000); } finally { processLock readLock() unlock(); } } unsubscribe(); } catch (Throwable e) { exit(toString() + failed , e); } LOG info(toString() + DONE MsgCout= + msgCount); } private void process(long duration) throws JMSException { LOG info(toString() + ONLINE ); Connection con = openConnection(); Session sess = con createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = sess createDurableSubscriber(topic, SUBSCRIPTION NAME); long end = System currentTimeMillis() + duration; try { while (end > System currentTimeMillis()) { Message message = consumer receive(100); if (message != null) { LOG info(toString() + received message ); msgCount++; } } } finally { sess close(); con close(); LOG info(toString() + OFFLINE ); } } private Connection openConnection() throws JMSException { Connection con = cf createConnection(); con setClientID(conClientId); con start(); return con; } private void subscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session createDurableSubscriber(topic, SUBSCRIPTION NAME); LOG info(toString() + SUBSCRIBED ); session close(); con close(); } private void unsubscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session unsubscribe(SUBSCRIPTION NAME); LOG info(toString() + UNSUBSCRIBED ); session close(); con close(); } Override public String toString() { return DurableSubscriber[id= + id + ] ; } }",1.0,
3318,3318,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessTest.,ClientManager,"private final class ClientManager extends Thread { private int clientRover = 0; private final CopyOnWriteArrayList<Client> clients = new CopyOnWriteArrayList<Client>(); public ClientManager() { super( ClientManager ); setDaemon(true); } Override public void run() { try { while (true) { if (clients size() < MAX CLIENTS) createNewClient(); int size = clients size(); sleepRandom(size * 3 * 1000, size * 6 * 1000); } } catch (Throwable e) { exit( ClientManager run failed , e); } } private void createNewClient() throws JMSException { ClientType type = ClientType randomClientType(); Client client; synchronized (server sendMutex) { client = new Client(++clientRover, type, CLIENT LIFETIME, CLIENT ONLINE, CLIENT OFFLINE); clients add(client); } client start(); LOG info(client toString() + created + this); } public void removeClient(Client client) { clients remove(client); } public void onServerMessage(Message message) throws JMSException { for (Client client clients) { client onServerMessage(message); } } Override public String toString() { StringBuilder sb = new StringBuilder( ClientManager[count= ); sb append(clients size()); sb append( , clients= ); boolean sep = false; for (Client client clients) { if (sep) sb append( , ); else sep = true; sb append(client toString()); } sb append( ] ); return sb toString(); } }",1.0,
3319,3319,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessTest.,Client,"private final class Client extends Thread { String url = failover (tcp jms watchTopicAdvisories=false& + jms alwaysSyncSend=true&jms dispatchAsync=true& + jms producerWindowSize=20971520& + jms copyMessageOnSend=false& + initialReconnectDelay=100&maxReconnectDelay=30000& + useExponentialBackOff=true ; final ConnectionFactory cf = new ActiveMQConnectionFactory(url); public static final String SUBSCRIPTION NAME = subscription ; private final int id; private final String conClientId; private final Random lifetime; private final Random online; private final Random offline; private final ClientType clientType; private final String selector; private final ConcurrentLinkedQueue<Message> waitingList = new ConcurrentLinkedQueue<Message>(); public Client(int id, ClientType clientType, Random lifetime, Random online, Random offline) throws JMSException { super( Client + id); setDaemon(true); this id = id; conClientId = cli + id; this clientType = clientType; selector = (COMMIT = true and RELEVANT = true) or + clientType selector; this lifetime = lifetime; this online = online; this offline = offline; subscribe(); } Override public void run() { long end = System currentTimeMillis() + lifetime next(); try { boolean sleep = false; while (true) { long max = end - System currentTimeMillis(); if (max <= 0) break; if (sleep) offline sleepRandom(); else sleep = true; process(online next()); } if (!ALLOW SUBSCRIPTION ABANDONMENT || random(1) > 0) unsubscribe(); else { LOG info( Client abandon the subscription + this); houseKeeper abandonedSubscriptions add(conClientId); } } catch (Throwable e) { exit(toString() + failed , e); } clientManager removeClient(this); LOG info(toString() + DONE ); } private void process(long millis) throws JMSException { long end = System currentTimeMillis() + millis; long hardEnd = end + 2000; boolean inTransaction = false; int transCount = 0; LOG info(toString() + ONLINE ); Connection con = openConnection(); Session sess = con createSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = sess createDurableSubscriber(topic, SUBSCRIPTION NAME, selector, false); try { do { long max = end - System currentTimeMillis(); if (max <= 0) { if (!inTransaction) break; max = hardEnd - System currentTimeMillis(); if (max <= 0) exit( + this + failed Transaction is not finished ); } Message message = consumer receive(max); if (message == null) continue; onClientMessage(message); if (message propertyExists( COMMIT )) { message acknowledge(); LOG info( Received Trans[id= + message getIntProperty( TRANS ) + , count= + transCount + ] in + this + ); inTransaction = false; transCount = 0; } else { inTransaction = true; transCount++; } } while (true); } finally { sess close(); con close(); LOG info(toString() + OFFLINE ); Message topMessage = waitingList peek(); if (topMessage != null) checkDeliveryTime(topMessage); } } public void onServerMessage(Message message) throws JMSException { if (Boolean TRUE equals(message getObjectProperty( COMMIT ))) { if (Boolean TRUE equals(message getObjectProperty( RELEVANT ))) waitingList add(message); } else { String messageType = message getStringProperty( TYPE ); if (clientType isRelevant(messageType)) waitingList add(message); } } public void onClientMessage(Message message) { Message serverMessage = waitingList poll(); try { if (serverMessage == null) exit( + this + failed There is no next server message, but received + message); Integer receivedId = (Integer) message getObjectProperty( ID ); Integer serverId = (Integer) serverMessage getObjectProperty( ID ); if (receivedId == null || serverId == null) exit( + this + failed message ID not found r n + received + message + r n + server + serverMessage); if (!serverId equals(receivedId)) exit( + this + failed Received wrong message r n + received + message + r n + server + serverMessage); checkDeliveryTime(message); } catch (Throwable e) { exit( + this + onClientMessage failed r n + received + message + r n + server + serverMessage, e); } } public void checkDeliveryTime(Message message) throws JMSException { long creation = message getJMSTimestamp(); long min = System currentTimeMillis() - (offline max + online min); if (min > creation) { SimpleDateFormat df = new SimpleDateFormat( HH mm ss SSS ); exit( + this + checkDeliveryTime failed Message time + df format(new Date(creation)) + , min + df format(new Date(min)) + r n + message); } } private Connection openConnection() throws JMSException { Connection con = cf createConnection(); con setClientID(conClientId); con start(); return con; } private void subscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session createDurableSubscriber(topic, SUBSCRIPTION NAME, selector, true); session close(); con close(); } private void unsubscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session unsubscribe(SUBSCRIPTION NAME); session close(); con close(); } Override public String toString() { return Client[id= + id + , type= + clientType + ] ; } }",1.0,
3320,3320,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessTest.,HouseKeeper,"private final class HouseKeeper extends Thread { private HouseKeeper() { super( HouseKeeper ); setDaemon(true); } public final CopyOnWriteArrayList<String> abandonedSubscriptions = new CopyOnWriteArrayList<String>(); Override public void run() { while (true) { try { Thread sleep(60 * 1000); sweep(); } catch (InterruptedException ex) { break; } catch (Throwable e) { Exception log = new Exception( HouseKeeper failed , e); log printStackTrace(); } } } private void sweep() throws Exception { LOG info( Housekeeper sweeping ); int closed = 0; ArrayList<String> sweeped = new ArrayList<String>(); try { for (String clientId abandonedSubscriptions) { sweeped add(clientId); LOG info( Sweeping out subscription of + clientId + ); broker getAdminView() destroyDurableSubscriber(clientId, Client SUBSCRIPTION NAME); closed++; } } finally { abandonedSubscriptions removeAll(sweeped); } LOG info( Housekeeper sweeped out + closed + subscriptions ); } }",1.0,
3321,3321,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessTest.,Random,"public static final class Random { final int min; final int max; Random(int min, int max) { this min = min; this max = max; } public int next() { return random(min, max); } public void sleepRandom() throws InterruptedException { DurableSubProcessTest sleepRandom(min, max); } }",1.0,
3324,3324,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessWithRestartTest.,ClientManager,"private final class ClientManager extends Thread { private int clientRover = 0; private final CopyOnWriteArrayList<Client> clients = new CopyOnWriteArrayList<Client>(); public ClientManager() { super( ClientManager ); setDaemon(true); } Override public void run() { try { while (true) { if (clients size() < MAX CLIENTS) { processLock readLock() lock(); try { createNewClient(); } finally { processLock readLock() unlock(); } } int size = clients size(); sleepRandom(size * 3 * 1000, size * 6 * 1000); } } catch (Throwable e) { exit( ClientManager run failed , e); } } private void createNewClient() throws JMSException { ClientType type = ClientType randomClientType(); Client client; synchronized (server sendMutex) { client = new Client(++clientRover, type, CLIENT LIFETIME, CLIENT ONLINE, CLIENT OFFLINE); clients add(client); } client start(); LOG info(client toString() + created + this); } public void removeClient(Client client) { clients remove(client); } public void onServerMessage(Message message) throws JMSException { for (Client client clients) { client onServerMessage(message); } } Override public String toString() { StringBuilder sb = new StringBuilder( ClientManager[count= ); sb append(clients size()); sb append( , clients= ); boolean sep = false; for (Client client clients) { if (sep) sb append( , ); else sep = true; sb append(client toString()); } sb append( ] ); return sb toString(); } }",1.0,
3325,3325,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessWithRestartTest.,Client,"private final class Client extends Thread { String url = failover (tcp + jms watchTopicAdvisories=false& + jms alwaysSyncSend=true&jms dispatchAsync=true& + jms producerWindowSize=20971520& + jms copyMessageOnSend=false& + initialReconnectDelay=100&maxReconnectDelay=30000& + useExponentialBackOff=true ; final ConnectionFactory cf = new ActiveMQConnectionFactory(url); public static final String SUBSCRIPTION NAME = subscription ; private final int id; private final String conClientId; private final Random lifetime; private final Random online; private final Random offline; private final ClientType clientType; private final String selector; private final ConcurrentLinkedQueue<Message> waitingList = new ConcurrentLinkedQueue<Message>(); private final HashSet<Integer> processed = CHECK REDELIVERY new HashSet<Integer>( 10000) null; public Client(int id, ClientType clientType, Random lifetime, Random online, Random offline) throws JMSException { super( Client + id); setDaemon(true); this id = id; conClientId = cli + id; this clientType = clientType; selector = (COMMIT = true and RELEVANT = true) or + clientType selector; this lifetime = lifetime; this online = online; this offline = offline; subscribe(); } Override public void run() { long end = System currentTimeMillis() + lifetime next(); try { boolean sleep = false; while (true) { long max = end - System currentTimeMillis(); if (max <= 0) break; if (sleep) offline sleepRandom(); else sleep = true; processLock readLock() lock(); try { process(online next()); } finally { processLock readLock() unlock(); } } if (!ALLOW SUBSCRIPTION ABANDONMENT || random(1) > 0) unsubscribe(); else { LOG info( Client abandon the subscription + this); houseKeeper abandonedSubscriptions add(conClientId); } } catch (Throwable e) { exit(toString() + failed , e); } clientManager removeClient(this); LOG info(toString() + DONE ); } private void process(long millis) throws JMSException { long end = System currentTimeMillis() + millis; long hardEnd = end + 20000; boolean inTransaction = false; int transCount = 0; LOG info(toString() + ONLINE ); Connection con = openConnection(); Session sess = con createSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = sess createDurableSubscriber(topic, SUBSCRIPTION NAME, selector, false); try { do { long max = end - System currentTimeMillis(); if (max <= 0) { if (!inTransaction) break; max = hardEnd - System currentTimeMillis(); if (max <= 0) exit( + this + failed Transaction is not finished ); } Message message = consumer receive(max); if (message == null) continue; onClientMessage(message); if (message propertyExists( COMMIT )) { message acknowledge(); LOG info( Received Trans[id= + message getIntProperty( TRANS ) + , count= + transCount + ] in + this + ); inTransaction = false; transCount = 0; } else { inTransaction = true; transCount++; } } while (true); } finally { sess close(); con close(); LOG info(toString() + OFFLINE ); Message topMessage = waitingList peek(); if (topMessage != null) checkDeliveryTime(topMessage); } } public void onServerMessage(Message message) throws JMSException { if (Boolean TRUE equals(message getObjectProperty( COMMIT ))) { if (Boolean TRUE equals(message getObjectProperty( RELEVANT ))) waitingList add(message); } else { String messageType = message getStringProperty( TYPE ); if (clientType isRelevant(messageType)) waitingList add(message); } } public void onClientMessage(Message message) { Message serverMessage = waitingList poll(); try { Integer receivedId = (Integer) message getObjectProperty( ID ); if (processed != null && processed contains(receivedId)) LOG info( ! Message has been processed before + this + message = + message); if (serverMessage == null) exit( + this + failed There is no next server message, but received + message); Integer serverId = (Integer) serverMessage getObjectProperty( ID ); if (receivedId == null || serverId == null) exit( + this + failed message ID not found r n + received + message + r n + server + serverMessage); if (!serverId equals(receivedId)) { String detail = processed != null Arrays toString(processed toArray()) + n ; exit(detail + this + failed Received wrong message r n + received + message + r n + server + serverMessage); } checkDeliveryTime(message); if (processed != null) processed add(receivedId); } catch (Throwable e) { exit( + this + onClientMessage failed r n + received + message + r n + server + serverMessage, e); } } public void checkDeliveryTime(Message message) throws JMSException { long creation = message getJMSTimestamp(); long min = System currentTimeMillis() - (offline max + online min) * (BROKER RESTART > 0 4 1); if (false && min > creation) { SimpleDateFormat df = new SimpleDateFormat( HH mm ss SSS ); exit( + this + checkDeliveryTime failed Message time + df format(new Date(creation)) + , min + df format(new Date(min)) + r n + message); } } private Connection openConnection() throws JMSException { Connection con = cf createConnection(); con setClientID(conClientId); con start(); return con; } private void subscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session createDurableSubscriber(topic, SUBSCRIPTION NAME, selector, true); session close(); con close(); } private void unsubscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session unsubscribe(SUBSCRIPTION NAME); session close(); con close(); } Override public String toString() { return Client[id= + id + , type= + clientType + ] ; } }",1.0,
3326,3326,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessWithRestartTest.,HouseKeeper,"private final class HouseKeeper extends Thread { private HouseKeeper() { super( HouseKeeper ); setDaemon(true); } public final CopyOnWriteArrayList<String> abandonedSubscriptions = new CopyOnWriteArrayList<String>(); Override public void run() { while (true) { try { Thread sleep(3 * 60 * 1000); processLock readLock() lock(); try { sweep(); } finally { processLock readLock() unlock(); } } catch (InterruptedException ex) { break; } catch (Throwable e) { Exception log = new Exception( HouseKeeper failed , e); log printStackTrace(); } } } private void sweep() throws Exception { LOG info( Housekeeper sweeping ); int closed = 0; ArrayList<String> sweeped = new ArrayList<String>(); try { for (String clientId abandonedSubscriptions) { LOG info( Sweeping out subscription of + clientId + ); broker getAdminView() destroyDurableSubscriber(clientId, Client SUBSCRIPTION NAME); sweeped add(clientId); closed++; } } catch (Exception ignored) { LOG info( Ex on destroy sub + ignored); } finally { abandonedSubscriptions removeAll(sweeped); } LOG info( Housekeeper sweeped out + closed + subscriptions ); } }",1.0,
3327,3327,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessWithRestartTest.,Random,"public static final class Random { final int min; final int max; Random(int min, int max) { this min = min; this max = max; } public int next() { return random(min, max); } public void sleepRandom() throws InterruptedException { DurableSubProcessWithRestartTest sleepRandom(min, max); } }",1.0,
3330,3330,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriberNonPersistentMessageTest.,Consumer,"public class Consumer { private final ConnectionFactory factory; private final ActiveMQConnection connection; private final Session session; private final MessageConsumer messageConsumer; public Consumer(String brokerURL, String interest, String clientId) throws JMSException { factory = new ActiveMQConnectionFactory(brokerURL); connection = (ActiveMQConnection) factory createConnection(); connection setClientID(clientId); connection start(); connection getPrefetchPolicy() setAll(15); session = connection createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = session createTopic(interest); messageConsumer = session createDurableSubscriber((Topic) destination, MyDurableTopic ); } public void deleteAllMessages() throws JMSException { while (getMessage(500) != null) { } } public Message getMessage(int timeout) throws JMSException { return messageConsumer receive(timeout); } public void close() throws JMSException { if (messageConsumer != null) { messageConsumer close(); } if (session != null) { session close(); } if (connection != null) { connection close(); } } public Session getSession() { return session; } }",1.0,
3335,3335,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriptionOfflineTest.,CheckForDupsClient,"class CheckForDupsClient implements Runnable { HashSet<Long> ids = new HashSet<Long>(); final int id; public CheckForDupsClient(int id) { this id = id; } Override public void run() { try { Connection con = createConnection( cli + id); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); for (int j=0;j<2;j++) { MessageConsumer consumer = session createDurableSubscriber(topic, SubsId , null, true); for (int i = 0; i < messageCount/2; i++) { Message message = consumer receive(4000); assertNotNull(message); long producerSequenceId = new MessageId(message getJMSMessageID()) getProducerSequenceId(); assertTrue( ID= + id + not a duplicate + producerSequenceId, ids add(producerSequenceId)); } consumer close(); } MessageConsumer consumer = session createDurableSubscriber(topic, SubsId , null, true); Message message = consumer receive(4000); if (message != null) { long producerSequenceId = new MessageId(message getJMSMessageID()) getProducerSequenceId(); assertTrue( ID= + id + not a duplicate + producerSequenceId, ids add(producerSequenceId)); } assertNull(message); session close(); con close(); } catch (Throwable e) { e printStackTrace(); exceptions add(e); } } }",1.0,
3336,3336,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriptionOfflineTest.,CheckOrderClient,"class CheckOrderClient implements Runnable { final int id; int runCount = 0; public CheckOrderClient(int id) { this id = id; } Override public void run() { try { synchronized (this) { Connection con = clientFactory createConnection(); con setClientID( cli + id); con start(); Session session = con createSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = session createDurableSubscriber(topic, SubsId , null, true); int nextId = 0; ++runCount; int i=0; for (; i < messageCount/2; i++) { Message message = consumer receiveNoWait(); if (message == null) { break; } long producerSequenceId = new MessageId(message getJMSMessageID()) getProducerSequenceId(); assertEquals(id + expected order runCount + runCount + id + message getJMSMessageID(), ++nextId, producerSequenceId); } LOG info(con getClientID() + peeked + i); session close(); con close(); } } catch (Throwable e) { e printStackTrace(); exceptions add(e); } } }",1.0,
3337,3337,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriptionOfflineTest.,Client,"class Client implements Runnable { Connection con; Session session; String clientId; Client(String id) { this clientId = id; } Override public void run() { MessageConsumer consumer = null; Message message = null; try { for (int i = -1; i < random nextInt(10); i++) { con = createConnection(clientId); session = con createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createDurableSubscriber(topic, SubsId , filter = true , true); session close(); con close(); } con = createConnection(clientId); session = con createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createDurableSubscriber(topic, SubsId , filter = true , true); message = consumer receive(4000); assertNotNull( got message , message); message acknowledge(); session close(); con close(); for (int j = -1; j < random nextInt(10); j++) { con = createConnection(clientId); session = con createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createDurableSubscriber(topic, SubsId , filter = true , true); for (int i = 0; i < count - 1; i++) { assertNotNull( got message , consumer receive(4000)); } session close(); con close(); } con = createConnection(clientId); session = con createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createDurableSubscriber(topic, SubsId , filter = true , true); for (int i = 0; i < count - 1; i++) { message = consumer receive(4000); assertNotNull( got message , message); assertTrue( is redelivered , message getJMSRedelivered()); } message acknowledge(); session close(); con close(); con = createConnection(clientId); session = con createSession(false, Session CLIENT ACKNOWLEDGE); consumer = session createDurableSubscriber(topic, SubsId , filter = true , true); assertNull( no message left , consumer receive(2000)); } catch (Throwable throwable) { throwable printStackTrace(); exceptions add(throwable); } } }",1.0,
3338,3338,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriptionOfflineTest.,Listener,"public static class Listener implements MessageListener { int count = 0; String id = null; Listener() { } Listener(String id) { this id = id; } Override public void onMessage(Message message) { count++; if (id != null) { try { LOG info(id + , + message getJMSMessageID()); } catch (Exception ignored) {} } } }",1.0,
3339,3339,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriptionOfflineTest.,FilterCheckListener,"public class FilterCheckListener extends Listener { Override public void onMessage(Message message) { count++; try { Object b = message getObjectProperty( b ); if (b != null) { boolean c = message getBooleanProperty( c ); assertTrue( , c); } else { String d = message getStringProperty( d ); assertTrue( , D1 equals(d) || D2 equals(d)); } } catch (JMSException e) { e printStackTrace(); exceptions add(e); } } }",1.0,
3340,3340,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriptionReactivationTest.,DurableSubscriptionReactivationTest,"public class DurableSubscriptionReactivationTest extends EmbeddedBrokerTestSupport { public boolean keepDurableSubsActive; public void initCombosForTestReactivateKeepaliveSubscription() { addCombinationValues( keepDurableSubsActive , new Object[] { new Boolean(true), new Boolean(false) }); } public void testReactivateKeepaliveSubscription() throws Exception { Connection connection = createConnection(); connection setClientID( cliID ); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); TopicSubscriber subscriber = session createDurableSubscriber((Topic) createDestination(), subName ); subscriber close(); connection close(); connection = createConnection(); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(createDestination()); producer send(session createMessage()); connection close(); connection = createConnection(); connection setClientID( cliID ); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); subscriber = session createDurableSubscriber((Topic) createDestination(), subName ); Message message = subscriber receive(1 * 1000); subscriber close(); connection close(); assertNotNull( Message not received , message); } protected void setUp() throws Exception { useTopic = true; super setUp(); } protected void tearDown() throws Exception { super tearDown(); } Override protected BrokerService createBroker() throws Exception { BrokerService answer = super createBroker(); answer setKeepDurableSubsActive(keepDurableSubsActive); answer setPersistenceAdapter(new JDBCPersistenceAdapter()); answer setDeleteAllMessagesOnStartup(true); return answer; } protected boolean isPersistent() { return true; } public static Test suite() { return suite(DurableSubscriptionReactivationTest class); } }",1.0,
3341,3341,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriptionRemoveOfflineTest.,DurableSubscriptionRemoveOfflineTest,"public class DurableSubscriptionRemoveOfflineTest extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(DurableSubscriptionRemoveOfflineTest class); protected void setUp() throws Exception { useTopic = true; super setUp(); } protected void tearDown() throws Exception { super tearDown(); } Override protected BrokerService createBroker() throws Exception { BrokerService answer = super createBroker(); answer setOfflineDurableSubscriberTaskSchedule(3 * 1000); answer setOfflineDurableSubscriberTimeout(5 * 1000); answer setDeleteAllMessagesOnStartup(true); return answer; } protected BrokerService restartBroker() throws Exception { broker stop(); broker waitUntilStopped(); broker = null; broker = super createBroker(); broker setOfflineDurableSubscriberTaskSchedule(3 * 1000); broker setOfflineDurableSubscriberTimeout(5 * 1000); broker start(); broker waitUntilStarted(); return broker; } public void testRemove() throws Exception { Connection connection = createConnection(); connection setClientID( cliID ); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); TopicSubscriber subscriber = session createDurableSubscriber((Topic) createDestination(), subName ); subscriber close(); connection close(); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return broker getAdminView() getInactiveDurableTopicSubscribers() length == 0; } }, 15000)); } public void testRemoveAfterRestart() throws Exception { Connection connection = createConnection(); connection setClientID( cliID ); connection start(); Session session = connection createSession(false, Session AUTO ACKNOWLEDGE); TopicSubscriber subscriber = session createDurableSubscriber((Topic) createDestination(), subName ); subscriber close(); connection close(); LOG info( Broker restarting, wait for inactive cleanup afterwards ); restartBroker(); LOG info( Broker restarted, wait for inactive cleanup now ); assertTrue(broker getAdminView() getInactiveDurableTopicSubscribers() length == 1); assertTrue(Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return broker getAdminView() getInactiveDurableTopicSubscribers() length == 0; } }, 20000)); } protected boolean isPersistent() { return true; } public static Test suite() { return suite(DurableSubscriptionRemoveOfflineTest class); } }",1.0,
3348,3348,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubSelectorDelayWithRestartTest.,DurableSubSelectorDelayWithRestartTest,"public class DurableSubSelectorDelayWithRestartTest { private static final Logger LOG = LoggerFactory getLogger(DurableSubSelectorDelayWithRestartTest class); public static final long RUNTIME = 1 * 60 * 1000; private boolean RESTART = true; private int NUMBER SUBSCRIBERS = 3; private BrokerService broker; private ActiveMQTopic topic; Test public void testProcess() throws Exception { MsgProducer msgProducer = new MsgProducer(); msgProducer start(); DurableSubscriber subscribers[] = new DurableSubscriber[NUMBER SUBSCRIBERS]; for (int i = 0; i < subscribers length - 1; i++) { subscribers[i] = new DurableSubscriber(i); subscribers[i] process(); } msgProducer join(); subscribers[(subscribers length - 1)] = new DurableSubscriber((subscribers length - 1)); subscribers[(subscribers length - 1)] subscribe(); MsgProducer msgProducer2 = new MsgProducer(); msgProducer2 send(); subscribers[(subscribers length - 1)] process(); for (int j = 0; j < (subscribers length - 1); j++) { LOG info( Unsubscribing subscriber + subscribers[j]); subscribers[j] unsubscribe(); } final KahaDBPersistenceAdapter pa = (KahaDBPersistenceAdapter) broker getPersistenceAdapter(); assertTrue( only one journal file should be left , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return pa getStore() getJournal() getFileMap() size() < 4; } }, TimeUnit MINUTES toMillis(3))); LOG info( DONE ); } final class MsgProducer extends Thread { final String url = failover (tcp final ConnectionFactory cf = new ActiveMQConnectionFactory(url); int transRover = 0; int messageRover = 0; public MsgProducer() { super( MsgProducer ); setDaemon(true); } Override public void run() { long endTime = RUNTIME + System currentTimeMillis(); try { while (endTime > System currentTimeMillis()) { Thread sleep(400); send(); if(RESTART){ destroyBroker(); startBroker(false); } } } catch (Throwable e) { e printStackTrace(System out); throw new RuntimeException(e); } } public void send() throws JMSException { int trans = ++transRover; boolean relevantTrans = true; int count = 40; LOG info( Sending Trans[id= + trans + , count= + count + ] ); Connection con = cf createConnection(); Session sess = con createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer prod = sess createProducer(null); for (int i = 0; i < count; i++) { Message message = sess createMessage(); message setIntProperty( ID , ++messageRover); message setIntProperty( TRANS , trans); message setBooleanProperty( RELEVANT , false); prod send(topic, message); } Message message = sess createMessage(); message setIntProperty( ID , ++messageRover); message setIntProperty( TRANS , trans); message setBooleanProperty( COMMIT , true); message setBooleanProperty( RELEVANT , relevantTrans); prod send(topic, message); LOG info( Committed Trans[id= + trans + , count= + count + ], ID= + messageRover); sess close(); con close(); } } private final class DurableSubscriber { final String url = failover (tcp final ConnectionFactory cf = new ActiveMQConnectionFactory(url); private final String subName ; private final int id; private final String conClientId; private final String selector; public DurableSubscriber(int id) throws JMSException { this id = id; conClientId = cli + id; subName = subscription + id; selector = RELEVANT = true ; } private void process() throws JMSException { long end = System currentTimeMillis() + 20000; int transCount = 0; LOG info(toString() + ONLINE ); Connection con = openConnection(); Session sess = con createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = sess createDurableSubscriber(topic, subName, selector, false); try { do { long max = end - System currentTimeMillis(); if (max <= 0) { break; } Message message = consumer receive(max); if (message == null) { continue; } LOG info( Received Trans[id= + message getIntProperty( TRANS ) + , count= + transCount + ] in + this + ); } while (true); } finally { sess close(); con close(); LOG info(toString() + OFFLINE ); } } private Connection openConnection() throws JMSException { Connection con = cf createConnection(); con setClientID(conClientId); con start(); return con; } public void subscribe() throws JMSException{ LOG info(toString() + SUBSCRIBING ); Connection con = openConnection(); Session sess = con createSession(false, Session AUTO ACKNOWLEDGE); sess createDurableSubscriber(topic, subName, selector, false); sess close(); con close(); } private void unsubscribe() throws JMSException { Connection con = openConnection(); Session session = con createSession(false, Session AUTO ACKNOWLEDGE); session unsubscribe(subName); session close(); con close(); } Override public String toString() { return DurableSubscriber[id= + id + ] ; } } Before public void setUp() throws Exception { topic = new ActiveMQTopic( TopicT ); startBroker(); } After public void tearDown() throws Exception { destroyBroker(); } private void startBroker() throws Exception { startBroker(true); } private void startBroker(boolean deleteAllMessages) throws Exception { if (broker != null) return; broker = BrokerFactory createBroker( broker (vm broker setBrokerName(getName()); broker setAdvisorySupport(false); broker setDeleteAllMessagesOnStartup(deleteAllMessages); File kahadbData = new File( activemq-data/ + getName() + -kahadb ); if (deleteAllMessages) delete(kahadbData); broker setPersistent(true); KahaDBPersistenceAdapter kahadb = new KahaDBPersistenceAdapter(); kahadb setDirectory(kahadbData); kahadb setJournalMaxFileLength( 10 * 1024); broker setPersistenceAdapter(kahadb); broker addConnector( tcp broker getSystemUsage() getMemoryUsage() setLimit(256 * 1024 * 1024); broker getSystemUsage() getTempUsage() setLimit(256 * 1024 * 1024); broker getSystemUsage() getStoreUsage() setLimit(256 * 1024 * 1024); LOG info(toString() + Starting Broker ); broker start(); broker waitUntilStarted(); LOG info(toString() + Broker started!! ); } protected static String getName() { return DurableSubSelectorDelayTest ; } private static boolean delete(File path) { if (path == null) return true; if (path isDirectory()) { for (File file path listFiles()) { delete(file); } } return path delete(); } private void destroyBroker() throws Exception { if (broker == null) return; broker stop(); broker = null; } }",1.0,
3352,3352,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubsOfflineSelectorConcurrentConsumeIndexUseTest.,Listener,"public static class Listener implements MessageListener { int count = 0; String id = null; Listener() { } public void onMessage(Message message) { count++; if (id != null) { try { LOG info(id + , + message getJMSMessageID()); } catch (Exception ignored) { } } } }",1.0,
3354,3354,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubsOfflineSelectorIndexUseTest.,Listener,"public static class Listener implements MessageListener { int count = 0; String id = null; Listener() { } public void onMessage(Message message) { count++; if (id != null) { try { LOG info(id + , + message getJMSMessageID()); } catch (Exception ignored) { } } } }",1.0,
3356,3356,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ExceptionListenerTest.,ExceptionListenerTest,public class ExceptionListenerTest extends TestCase implements ExceptionListener { boolean isException; public ExceptionListenerTest(String arg) { super(arg); } public void testOnException() throws Exception { } public void onException(JMSException e) { isException = true; } },1.0,
3358,3358,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ExpiredMessagesTest.,DLQListener,class DLQListener implements MessageListener { int count = 0; public void onMessage(Message message) { count++; } };,1.0,
3360,3360,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\JdbcDurableSubDupTest.,JdbcDurableSubDupTest,"public class JdbcDurableSubDupTest { private static final Logger LOG = LoggerFactory getLogger(JdbcDurableSubDupTest class); final int prefetchVal = 150; String urlOptions = jms watchTopicAdvisories=false ; String url = null; String queueName = topicTest consumer prefetchSize= + prefetchVal; String xmlMessage = <Example 01234567890123456789012345678901234567890123456789 MessageText> ; String selector = ; String clntVersion = 87 ; String clntId = timsClntId345 + clntVersion; String subscriptionName = subscriptionName-y + clntVersion; SimpleDateFormat dtf = new SimpleDateFormat( HH mm ss ); final int TO RECEIVE = 5000; BrokerService broker = null; Vector<Throwable> exceptions = new Vector(); final int MAX MESSAGES = 100000; int[] dupChecker = new int[MAX MESSAGES]; Before public void startBroker() throws Exception { exceptions clear(); for (int i = 0; i < MAX MESSAGES; i++) { dupChecker[i] = 0; } broker = new BrokerService(); broker setAdvisorySupport(false); broker setPersistenceAdapter(new JDBCPersistenceAdapter()); PolicyEntry policyEntry = new PolicyEntry(); policyEntry setMaxAuditDepth(3000); policyEntry setMaxPageSize(150); policyEntry setPrioritizedMessages(true); PolicyMap policyMap = new PolicyMap(); policyMap setDefaultEntry(policyEntry); broker setDestinationPolicy(policyMap); broker addConnector( tcp broker setDeleteAllMessagesOnStartup(true); broker start(); broker waitUntilStarted(); url = broker getTransportConnectors() get(0) getConnectUri() toString() + + urlOptions; } After public void stopBroker() throws Exception { if (broker != null) { broker stop(); } } Test public void testNoDupsOnSlowConsumerReconnect() throws Exception { JmsConsumerDup consumer = new JmsConsumerDup(); consumer done set(true); consumer run(); consumer done set(false); LOG info( serial production then consumption ); JmsProvider provider = new JmsProvider(); provider run(); consumer run(); assertTrue( no exceptions + exceptions, exceptions isEmpty()); for (int i = 0; i < TO RECEIVE; i++) { assertTrue( got message + i, dupChecker[i] == 1); } } Test public void testNoDupsOnSlowConsumerLargePriorityGapReconnect() throws Exception { JmsConsumerDup consumer = new JmsConsumerDup(); consumer done set(true); consumer run(); consumer done set(false); JmsProvider provider = new JmsProvider(); provider priorityModulator = 2500; provider run(); consumer run(); assertTrue( no exceptions + exceptions, exceptions isEmpty()); for (int i = 0; i < TO RECEIVE; i++) { assertTrue( got message + i, dupChecker[i] == 1); } } class JmsConsumerDup implements MessageListener { long count = 0; AtomicBoolean done = new AtomicBoolean(false); public void run() { Connection connection = null; Session session; Topic topic; ActiveMQConnectionFactory factory; MessageConsumer consumer; factory = new ActiveMQConnectionFactory(url); try { connection = factory createConnection( MyUsername , MyPassword ); connection setClientID(clntId); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); topic = session createTopic(queueName); consumer = session createDurableSubscriber(topic, subscriptionName, selector, false); consumer setMessageListener(this); LOG info( Waiting for messages ); while (!done get()) { TimeUnit SECONDS sleep(5); if (count == TO RECEIVE || !exceptions isEmpty()) { done set(true); } } } catch (Exception e) { LOG error( caught , e); exceptions add(e); throw new RuntimeException(e); } finally { if (connection != null) { try { LOG info( consumer done ( + exceptions isEmpty() + ), closing connection ); connection close(); } catch (JMSException e) { e printStackTrace(); } } } } public void onMessage(Message message) { ++count; try { Thread sleep(0L); } catch (InterruptedException e) { } ; try { TextMessage m = (TextMessage) message; if (count%100 == 0) { LOG info( Rcvd Msg - + count + + m getText() + Sent-> + dtf format(new Date(m getJMSTimestamp())) + Recv-> + dtf format(new Date()) + Expr-> + dtf format(new Date(m getJMSExpiration())) + , mid + m getJMSMessageID() ); } int i = m getIntProperty( SeqNo ); if (i < MAX MESSAGES) { if (dupChecker[i] == 1) { LOG error( Duplicate message received at count + count + , id + m getJMSMessageID()); exceptions add(new RuntimeException( Got Duplicate at + m getJMSMessageID())); } else { dupChecker[i] = 1; } } } catch (JMSException e) { LOG error( caught , e); exceptions add(e); } } } class JmsProvider implements Runnable { int priorityModulator = 10; public void run() { Connection connection; Session session; Topic topic; ActiveMQConnectionFactory factory; MessageProducer messageProducer; long timeToLive = 0l; TextMessage message = null; factory = new ActiveMQConnectionFactory(url); try { connection = factory createConnection( MyUserName , MyPassword ); session = connection createSession(false, Session AUTO ACKNOWLEDGE); topic = session createTopic(queueName); messageProducer = session createProducer(topic); messageProducer setPriority(3); messageProducer setTimeToLive(timeToLive); messageProducer setDeliveryMode(DeliveryMode PERSISTENT); int msgSeqNo = 0; int NUM MSGS = 1000; int NUM GROUPS = TO RECEIVE/NUM MSGS; for (int n = 0; n < NUM GROUPS; n++) { message = session createTextMessage(); for (int i = 0; i < NUM MSGS; i++) { int priority = 0; if (priorityModulator <= 10) { priority = msgSeqNo % priorityModulator; } else { priority = (msgSeqNo >= priorityModulator) 9 0; } message setText(xmlMessage + msgSeqNo + - + priority); message setJMSPriority(priority); message setIntProperty( SeqNo , msgSeqNo); if (i > 0 && i%100 == 0) { LOG info( Sending message + message getText()); } messageProducer send(message, DeliveryMode PERSISTENT, message getJMSPriority(), timeToLive); msgSeqNo++; } try { Thread sleep(1000L); } catch (InterruptedException e) { e printStackTrace(); exceptions add(e); } } } catch (JMSException e) { LOG error( caught , e); e printStackTrace(); exceptions add(e); } } } }",1.0,
3363,3363,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\JDBCDurableSubscriptionTest.,JDBCDurableSubscriptionTest,public class JDBCDurableSubscriptionTest extends DurableSubscriptionTestSupport { protected PersistenceAdapter createPersistenceAdapter() throws IOException { JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); EmbeddedDataSource dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); jdbc setCleanupPeriod(1000); return jdbc; } },1.0,
3365,3365,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\JournalDurableSubscriptionTest.,JournalDurableSubscriptionTest,public class JournalDurableSubscriptionTest extends DurableSubscriptionTestSupport { protected PersistenceAdapter createPersistenceAdapter() throws IOException { File dataDir = new File( target/test-data/durableJournal ); JournalPersistenceAdapterFactory factory = new JournalPersistenceAdapterFactory(); factory setDataDirectoryFile(dataDir); factory setUseJournal(true); factory setJournalLogFileSize(1024 * 64); return factory createPersistenceAdapter(); } },1.0,
3366,3366,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\KahaDBDurableSubscriptionTest.,KahaDBDurableSubscriptionTest,public class KahaDBDurableSubscriptionTest extends DurableSubscriptionTestSupport { protected PersistenceAdapter createPersistenceAdapter() throws IOException { return null; } },1.0,
3367,3367,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\KahaDurableSubscriptionTest.,KahaDurableSubscriptionTest,public class KahaDurableSubscriptionTest extends DurableSubscriptionTestSupport { protected PersistenceAdapter createPersistenceAdapter() throws IOException { File dataDir = new File( target/test-data/durableKaha ); KahaPersistenceAdapter adaptor = new KahaPersistenceAdapter(); adaptor setDirectory(dataDir); return adaptor; } public void testDurableSubscriptionRetroactive() throws Exception { } },1.0,
3373,3373,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\MessageGroupLateArrivalsTest.,MessageGroupLateArrivalsTest,"public class MessageGroupLateArrivalsTest extends JmsTestSupport { public static final Logger log = LoggerFactory getLogger(MessageGroupLateArrivalsTest class); protected Connection connection; protected Session session; protected MessageProducer producer; protected Destination destination; BrokerService broker; protected TransportConnector connector; protected HashMap<String, Integer> messageCount = new HashMap<String, Integer>(); protected HashMap<String, Set<String>> messageGroups = new HashMap<String, Set<String>>(); public static Test suite() { return suite(MessageGroupLateArrivalsTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } Override public void setUp() throws Exception { broker = createBroker(); broker start(); ActiveMQConnectionFactory connFactory = new ActiveMQConnectionFactory(connector getConnectUri() + jms prefetchPolicy all=1000 ); connection = connFactory createConnection(); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); destination = new ActiveMQQueue( test-queue2 ); producer = session createProducer(destination); connection start(); } Override protected BrokerService createBroker() throws Exception { BrokerService service = new BrokerService(); service setPersistent(false); service setUseJmx(false); PolicyMap policyMap = new PolicyMap(); PolicyEntry policy = new PolicyEntry(); policy setUseConsumerPriority(true); policyMap setDefaultEntry(policy); service setDestinationPolicy(policyMap); connector = service addConnector( tcp return service; } Override public void tearDown() throws Exception { producer close(); session close(); connection close(); broker stop(); } public void testConsumersLateToThePartyGetSomeNewGroups() throws Exception { final int perBatch = 3; int[] counters = {perBatch, perBatch, perBatch}; CountDownLatch startSignal = new CountDownLatch(0); CountDownLatch doneSignal = new CountDownLatch(3); CountDownLatch worker1Started = new CountDownLatch(1); CountDownLatch worker2Started = new CountDownLatch(1); CountDownLatch worker3Started = new CountDownLatch(1); messageCount put( worker1 , 0); messageGroups put( worker1 , new HashSet<String>()); Worker worker1 = new Worker(connection, destination, worker1 , startSignal, doneSignal, counters, messageCount, messageGroups, worker1Started); messageCount put( worker2 , 0); messageGroups put( worker2 , new HashSet<String>()); Worker worker2 = new Worker(connection, destination, worker2 , startSignal, doneSignal, counters, messageCount, messageGroups, worker2Started); messageCount put( worker3 , 0); messageGroups put( worker3 , new HashSet<String>()); Worker worker3 = new Worker(connection, destination, worker3 , startSignal, doneSignal, counters, messageCount, messageGroups, worker3Started); new Thread(worker1) start(); new Thread(worker2) start(); worker1Started await(); worker2Started await(); for (int i = 0; i < perBatch; i++) { Message msga = session createTextMessage( hello a ); msga setStringProperty( JMSXGroupID , A ); producer send(msga); Message msgb = session createTextMessage( hello b ); msgb setStringProperty( JMSXGroupID , B ); producer send(msgb); } new Thread(worker3) start(); worker3Started await(); for (int i = 0; i < perBatch; i++) { Message msgc = session createTextMessage( hello c ); msgc setStringProperty( JMSXGroupID , C ); producer send(msgc); } doneSignal await(); List<String> workers = new ArrayList<String>(messageCount keySet()); Collections sort(workers); for (String worker workers) { log info( worker + worker + received + messageCount get(worker) + messages from groups + messageGroups get(worker)); } for (String worker workers) { assertEquals( worker + worker + received + messageCount get(worker) + messages from groups + messageGroups get(worker) , perBatch, messageCount get(worker) intValue()); assertEquals( worker + worker + received + messageCount get(worker) + messages from groups + messageGroups get(worker) , 1, messageGroups get(worker) size()); } } public void testConsumerLateToBigPartyGetsNewGroup() throws Exception { final int perBatch = 2; int[] counters = {perBatch, perBatch, perBatch}; CountDownLatch startSignal = new CountDownLatch(0); CountDownLatch doneSignal = new CountDownLatch(2); CountDownLatch worker1Started = new CountDownLatch(1); CountDownLatch worker2Started = new CountDownLatch(1); messageCount put( worker1 , 0); messageGroups put( worker1 , new HashSet<String>()); Worker worker1 = new Worker(connection, destination, worker1 , startSignal, doneSignal, counters, messageCount, messageGroups, worker1Started); messageCount put( worker2 , 0); messageGroups put( worker2 , new HashSet<String>()); Worker worker2 = new Worker(connection, destination, worker2 , startSignal, doneSignal, counters, messageCount, messageGroups, worker2Started); new Thread(worker1) start(); for (int i = 0; i < perBatch; i++) { Message msga = session createTextMessage( hello c ); msga setStringProperty( JMSXGroupID , A ); producer send(msga); Message msgb = session createTextMessage( hello b ); msgb setStringProperty( JMSXGroupID , B ); producer send(msgb); } new Thread(worker2) start(); worker2Started await(); for (int i = 0; i < perBatch; i++) { Message msgc = session createTextMessage( hello a ); msgc setStringProperty( JMSXGroupID , C ); producer send(msgc); } doneSignal await(); log info( worker1 received + messageCount get( worker1 ) + messages from groups + messageGroups get( worker1 )); assertEquals( worker1 received + messageCount get( worker1 ) + messages from groups + messageGroups get( worker1 ) , 2 * perBatch, messageCount get( worker1 ) intValue()); assertEquals( worker1 received + messageCount get( worker1 ) + messages from groups + messageGroups get( worker1 ) , 2, messageGroups get( worker1 ) size()); log info( worker2 received + messageCount get( worker2 ) + messages from groups + messageGroups get( worker2 )); assertEquals( worker2 received + messageCount get( worker2 ) + messages from groups + messageGroups get( worker2 ) , 2 * perBatch, messageCount get( worker1 ) intValue()); assertEquals( worker2 received + messageCount get( worker2 ) + messages from groups + messageGroups get( worker2 ) , 1, messageGroups get( worker2 ) size()); } private static final class Worker implements Runnable { private Connection connection = null; private Destination queueName = null; private String workerName = null; private CountDownLatch startSignal = null; private CountDownLatch doneSignal = null; private CountDownLatch workerStarted = null; private int[] counters = null; private final HashMap<String, Integer> messageCount; private final HashMap<String, Set<String>> messageGroups; private Worker(Connection connection, Destination queueName, String workerName, CountDownLatch startSignal, CountDownLatch doneSignal, int[] counters, HashMap<String, Integer> messageCount, HashMap<String, Set<String>> messageGroups, CountDownLatch workerStarted) { this connection = connection; this queueName = queueName; this workerName = workerName; this startSignal = startSignal; this doneSignal = doneSignal; this counters = counters; this messageCount = messageCount; this messageGroups = messageGroups; this workerStarted = workerStarted; } private void update(String group) { int msgCount = messageCount get(workerName); messageCount put(workerName, msgCount + 1); Set<String> groups = messageGroups get(workerName); groups add(group); messageGroups put(workerName, groups); } Override public void run() { try { startSignal await(); log info(workerName); Session sess = connection createSession(false, Session CLIENT ACKNOWLEDGE); MessageConsumer consumer = sess createConsumer(queueName); workerStarted countDown(); while (true) { if (counters[0] == 0 && counters[1] == 0 && counters[2] == 0) { doneSignal countDown(); log info(workerName + done ); break; } Message msg = consumer receive(500); if (msg == null) continue; msg acknowledge(); String group = msg getStringProperty( JMSXGroupID ); msg getBooleanProperty( JMSXGroupFirstForConsumer ); if ( A equals(group)) { --counters[0]; update(group); } else if ( B equals(group)) { --counters[1]; update(group); } else if ( C equals(group)) { --counters[2]; update(group); } else { log warn(workerName + , unknown group ); } if (counters[0] != 0 || counters[1] != 0 || counters[2] != 0) { msg acknowledge(); } } consumer close(); sess close(); } catch (Exception e) { e printStackTrace(); } } } }",1.0,
3376,3376,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\MessageReroutingTest.,MessageReroutingTest,"public class MessageReroutingTest extends JmsMultipleBrokersTestSupport { private static final transient Logger LOG = LoggerFactory getLogger(MessageReroutingTest class); public Destination dest; public static final int MESSAGE COUNT = 50; protected void setUp() throws Exception { super setAutoFail(true); super setUp(); createBroker(new ClassPathResource( org/apache/activemq/usecases/rerouting-activemq-D xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/rerouting-activemq-C xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/rerouting-activemq-B xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/rerouting-activemq-A xml )); brokers get( broker-A ) broker waitUntilStarted(); } public void initCombos() { addCombinationValues( dest , new Object[] {new ActiveMQQueue( TEST ), new ActiveMQTopic( TEST )}); } public void testMessageRerouting() throws Exception { MessageConsumer consumer = createConsumer( broker-D , dest); MessageIdList received = getConsumerMessages( broker-D , consumer); Thread sleep(2000); sendMessages( broker-A , dest, MESSAGE COUNT); received waitForMessagesToArrive(MESSAGE COUNT); LOG info( received + received getMessageCount() + messages ); assertEquals(MESSAGE COUNT, received getMessageCount()); brokers get( broker-B ) broker stop(); brokers get( broker-B ) broker waitUntilStopped(); Thread sleep(2000); sendMessages( broker-A , dest, MESSAGE COUNT); received waitForMessagesToArrive(MESSAGE COUNT); LOG info( received + received getMessageCount() + messages ); assertTrue( Didn t receive any more messages + received getMessageCount(), received getMessageCount() > MESSAGE COUNT); } public static Test suite() { return suite(MessageReroutingTest class); } }",1.0,
3378,3378,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\MultiBrokersMultiClientsUsingTcpTest.,MultiBrokersMultiClientsUsingTcpTest,"public class MultiBrokersMultiClientsUsingTcpTest extends MultiBrokersMultiClientsTest { protected List<DemandForwardingBridge> bridges; protected void bridgeAllBrokers(String groupName) throws Exception { for (int i = 1; i <= BROKER COUNT; i++) { for (int j = 1; j <= BROKER COUNT; j++) { if (i != j) { bridgeBrokers( Broker + i, Broker + j); } } } maxSetupTime = 5000; } protected void bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception { List<TransportConnector> remoteTransports = remoteBroker getTransportConnectors(); List<TransportConnector> localTransports = localBroker getTransportConnectors(); URI remoteURI; URI localURI; if (!remoteTransports isEmpty() && !localTransports isEmpty()) { remoteURI = remoteTransports get(0) getConnectUri(); localURI = localTransports get(0) getConnectUri(); if (remoteURI toString() startsWith( tcp ) && localURI toString() startsWith( tcp )) { NetworkBridgeConfiguration config = new NetworkBridgeConfiguration(); config setBrokerName(localBroker getBrokerName()); DemandForwardingBridge bridge = new DemandForwardingBridge(config, TransportFactory connect(localURI), TransportFactory connect(remoteURI)); bridge setBrokerService(localBroker); bridges add(bridge); bridge start(); } else { throw new Exception( Remote broker or local broker is not using tcp connectors ); } } else { throw new Exception( Remote broker or local broker has no registered connectors ); } } public void setUp() throws Exception { super setUp(); int j = 0; for (Iterator<BrokerItem> i = brokers values() iterator(); i hasNext();) { i next() broker addConnector( tcp } bridges = new ArrayList<DemandForwardingBridge>(); } }",1.0,
3380,3380,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\MyObject.,MyObject,"public class MyObject implements Serializable { private String message; private AtomicInteger writeObjectCalled = new AtomicInteger(0); private AtomicInteger readObjectCalled = new AtomicInteger(0); private AtomicInteger readObjectNoDataCalled = new AtomicInteger(0); public MyObject(String message) { this setMessage(message); } public void setMessage(String message) { this message = message; } public String getMessage() { return message; } private void writeObject(java io ObjectOutputStream out) throws IOException { writeObjectCalled incrementAndGet(); out defaultWriteObject(); } private void readObject(java io ObjectInputStream in) throws IOException, ClassNotFoundException { in defaultReadObject(); readObjectCalled incrementAndGet(); } private void readObjectNoData() throws ObjectStreamException { readObjectNoDataCalled incrementAndGet(); } public int getWriteObjectCalled() { return writeObjectCalled get(); } public int getReadObjectCalled() { return readObjectCalled get(); } public int getReadObjectNoDataCalled() { return readObjectNoDataCalled get(); } }",1.0,
3383,3383,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\NetworkOfTwentyBrokersTest.,NetworkOfTwentyBrokersTest,"public class NetworkOfTwentyBrokersTest extends JmsMultipleBrokersTestSupport { private static final Logger LOG = LoggerFactory getLogger(NetworkOfTwentyBrokersTest class); protected void bridgeAllBrokers() throws Exception { bridgeAllBrokers( TwentyBrokersTest , 1, false, false); } protected void bridgeAllBrokers(String groupName, int ttl, boolean suppressduplicateQueueSubs) throws Exception { bridgeAllBrokers(groupName, ttl, suppressduplicateQueueSubs, false); } protected void bridgeAllBrokers(String groupName, int ttl, boolean suppressduplicateQueueSubs, boolean decreasePriority) throws Exception { Collection<BrokerItem> brokerList = brokers values(); for (Iterator<BrokerItem> i = brokerList iterator(); i hasNext();) { BrokerService broker = i next() broker; List<TransportConnector> transportConnectors = broker getTransportConnectors(); if (transportConnectors isEmpty()) { broker addConnector(new URI(AUTO ASSIGN TRANSPORT)); transportConnectors = broker getTransportConnectors(); } TransportConnector transport = transportConnectors get(0); if (transport getDiscoveryUri() == null) { transport setDiscoveryUri(new URI( multicast } List<NetworkConnector> networkConnectors = broker getNetworkConnectors(); if (networkConnectors isEmpty()) { broker addNetworkConnector( multicast networkConnectors = broker getNetworkConnectors(); } NetworkConnector nc = networkConnectors get(0); nc setNetworkTTL(ttl); nc setSuppressDuplicateQueueSubscriptions(suppressduplicateQueueSubs); nc setDecreaseNetworkConsumerPriority(decreasePriority); } maxSetupTime = 8000; } protected BrokerService createBroker(String brokerName) throws Exception { BrokerService broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(false); broker setBrokerName(brokerName); broker addConnector(new URI(AUTO ASSIGN TRANSPORT)); brokers put(brokerName, new BrokerItem(broker)); return broker; } public void testBrokers() throws Exception { int X = 20; int i; LOG info( Creating X Brokers ); for (i = 0; i < X; i++) { createBroker( Broker + i); } bridgeAllBrokers(); startAllBrokers(); waitForBridgeFormation(X-1); LOG info( Waiting for complete formation ); try { Thread sleep(10000); } catch (Exception e) { } verifyPeerBrokerInfos(X-1); LOG info( Stopping half the brokers ); for (i = 0; i < X/2; i++) { destroyBroker( Broker + i); } LOG info( Waiting for complete stop ); try { Thread sleep(10000); } catch (Exception e) { } verifyPeerBrokerInfos((X/2) -1); LOG info( Recreating first half ); for (i = 0; i < X/2; i++) { createBroker( Broker + i); } bridgeAllBrokers(); startAllBrokers(); waitForBridgeFormation(X-1); LOG info( Waiting for complete reformation ); try { Thread sleep(10000); } catch (Exception e) { } verifyPeerBrokerInfos(X-1); } public void testPeerBrokerCountHalfPeer() throws Exception { createBroker( A ); createBroker( B ); bridgeBrokers( A , B ); startAllBrokers(); verifyPeerBrokerInfo(brokers get( A ), 1); verifyPeerBrokerInfo(brokers get( B ), 0); } public void testPeerBrokerCountHalfPeerTwice() throws Exception { createBroker( A ); createBroker( B ); bridgeBrokers( A , B ); bridgeBrokers( A , B ); startAllBrokers(); verifyPeerBrokerInfo(brokers get( A ), 1); verifyPeerBrokerInfo(brokers get( B ), 0); } public void testPeerBrokerCountFullPeer() throws Exception { createBroker( A ); createBroker( B ); bridgeBrokers( A , B ); bridgeBrokers( B , A ); startAllBrokers(); verifyPeerBrokerInfo(brokers get( A ), 1); verifyPeerBrokerInfo(brokers get( B ), 1); } public void testPeerBrokerCountFullPeerDuplex() throws Exception { createBroker( A ); createBroker( B ); NetworkConnector nc = bridgeBrokers( A , B ); nc setDuplex(true); startAllBrokers(); verifyPeerBrokerInfo(brokers get( A ), 1); verifyPeerBrokerInfo(brokers get( B ), 1); } private void verifyPeerBrokerInfo(BrokerItem brokerItem, final int max) throws Exception { final BrokerService broker = brokerItem broker; final RegionBroker regionBroker = (RegionBroker) broker getRegionBroker(); Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { LOG info( verify infos + broker getBrokerName() + , len + regionBroker getPeerBrokerInfos() length); return max == regionBroker getPeerBrokerInfos() length; } }); LOG info( verify infos + broker getBrokerName() + , len + regionBroker getPeerBrokerInfos() length); for (BrokerInfo info regionBroker getPeerBrokerInfos()) { LOG info(info getBrokerName()); } assertEquals(broker getBrokerName(), max, regionBroker getPeerBrokerInfos() length); } private void verifyPeerBrokerInfos(final int max) throws Exception { Collection<BrokerItem> brokerList = brokers values(); for (Iterator<BrokerItem> i = brokerList iterator(); i hasNext();) { verifyPeerBrokerInfo(i next(), max); } } Override public void setUp() throws Exception { super setAutoFail(true); super setUp(); } Override public void tearDown() throws Exception { super tearDown(); ThreadTracker result(); } }",1.0,
3385,3385,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\NoDuplicateOnTopicNetworkTest.,NoDuplicateOnTopicNetworkTest,"public class NoDuplicateOnTopicNetworkTest extends CombinationTestSupport { private static final Logger LOG = LoggerFactory getLogger(NoDuplicateOnTopicNetworkTest class); private static final String MULTICAST DEFAULT = multicast private static final String BROKER 1 = tcp private static final String BROKER 2 = tcp private static final String BROKER 3 = tcp private final static String TOPIC NAME = broadcast ; private static byte BASE PRIORITY = -20; private BrokerService broker1; private BrokerService broker2; private BrokerService broker3; public boolean suppressDuplicateTopicSubs = false; public DispatchPolicy dispatchPolicy = new SimpleDispatchPolicy(); public boolean durableSub = false; AtomicInteger idCounter = new AtomicInteger(0); private boolean dynamicOnly = false; private int ttl = 3; Override protected void setUp() throws Exception { super setUp(); broker3 = createAndStartBroker( broker3 , BROKER 3); Thread sleep(3000); broker2 = createAndStartBroker( broker2 , BROKER 2); Thread sleep(3000); broker1 = createAndStartBroker( broker1 , BROKER 1); Thread sleep(1000); waitForBridgeFormation(); } public static Test suite() { return suite(NoDuplicateOnTopicNetworkTest class); } protected void waitForBridgeFormation() throws Exception { Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { return !broker3 getNetworkConnectors() get(0) activeBridges() isEmpty(); }}); Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { return !broker2 getNetworkConnectors() get(0) activeBridges() isEmpty(); }}); Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { return !broker1 getNetworkConnectors() get(0) activeBridges() isEmpty(); }}); } private BrokerService createAndStartBroker(String name, String addr) throws Exception { BrokerService broker = new BrokerService(); broker setDeleteAllMessagesOnStartup(true); broker setBrokerName(name); broker addConnector(addr) setDiscoveryUri(new URI(MULTICAST DEFAULT)); broker setUseJmx(false); NetworkConnector networkConnector = broker addNetworkConnector(MULTICAST DEFAULT); networkConnector setDecreaseNetworkConsumerPriority(true); networkConnector setDynamicOnly(dynamicOnly); networkConnector setNetworkTTL(ttl); networkConnector setSuppressDuplicateTopicSubscriptions(suppressDuplicateTopicSubs); networkConnector setConsumerPriorityBase(BASE PRIORITY); networkConnector addStaticallyIncludedDestination(new ActiveMQTopic( BeStaticallyIncluded )); PolicyMap policyMap = new PolicyMap(); PolicyEntry policy = new PolicyEntry(); policy setDispatchPolicy(dispatchPolicy); policy setEnableAudit(false); policyMap put(new ActiveMQTopic(TOPIC NAME), policy); broker setDestinationPolicy(policyMap); broker start(); return broker; } Override protected void tearDown() throws Exception { broker1 stop(); broker2 stop(); broker3 stop(); super tearDown(); } public void initCombosForTestProducerConsumerTopic() { this addCombinationValues( suppressDuplicateTopicSubs , new Object[]{Boolean TRUE, Boolean FALSE}); this addCombinationValues( dispatchPolicy , new Object[]{new PriorityNetworkDispatchPolicy(), new SimpleDispatchPolicy()}); this addCombinationValues( durableSub , new Object[]{Boolean TRUE, Boolean FALSE}); } public void testProducerConsumerTopic() throws Exception { final CountDownLatch consumerStarted = new CountDownLatch(1); Thread producerThread = new Thread(new Runnable() { public void run() { TopicWithDuplicateMessages producer = new TopicWithDuplicateMessages(); producer setBrokerURL(BROKER 1); producer setTopicName(TOPIC NAME); try { producer produce(); } catch (JMSException e) { fail( Unexpected + e); } } }); final TopicWithDuplicateMessages consumer = new TopicWithDuplicateMessages(); Thread consumerThread = new Thread(new Runnable() { public void run() { consumer setBrokerURL(BROKER 2); consumer setTopicName(TOPIC NAME); try { consumer consumer(); consumerStarted countDown(); consumer getLatch() await(60, TimeUnit SECONDS); } catch (Exception e) { fail( Unexpected + e); } } }); consumerThread start(); LOG info( Started Consumer ); assertTrue( consumer started eventually , consumerStarted await(10, TimeUnit SECONDS)); Thread sleep(2000); final RegionBroker regionBroker = (RegionBroker)broker1 getRegionBroker(); assertTrue( Found network destination with priority as expected , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { Map<ActiveMQDestination, Destination> destinationMap = regionBroker getTopicRegion() getDestinationMap(); LOG info( destinations + destinationMap keySet()); boolean found = false; for (Destination destination destinationMap values()) { List<Subscription> subscriptions = destination getConsumers(); LOG info(destination + subscriptions + subscriptions); for (Subscription subscription subscriptions) { if (subscription getConsumerInfo() isNetworkSubscription()) { LOG info( subscription + subscription + , priority + subscription getConsumerInfo() getPriority()); assertTrue( priority is < our base + subscription getConsumerInfo() getPriority(), subscription getConsumerInfo() getPriority() <= BASE PRIORITY); found = true; } } } return found; } })); producerThread start(); LOG info( Started Producer ); producerThread join(); consumerThread join(); int duplicateCount = 0; Map<String, String> map = new HashMap<String, String>(); for (String msg consumer getMessageStrings()) { if (map containsKey(msg)) { LOG info( got duplicate + msg); duplicateCount++; } map put(msg, msg); } consumer unSubscribe(); if (suppressDuplicateTopicSubs || dispatchPolicy instanceof PriorityNetworkDispatchPolicy) { assertEquals( no duplicates , 0, duplicateCount); assertEquals( got all required messages + map size(), consumer getNumMessages(), map size()); } else { assertTrue( we can get some duplicates + duplicateCount, duplicateCount >= 0); if (duplicateCount == 0) { assertEquals( got all required messages + map size(), consumer getNumMessages(), map size()); } } } class TopicWithDuplicateMessages { private String brokerURL; private String topicName; private Connection connection; private Session session; private Topic topic; private MessageProducer producer; private MessageConsumer consumer; private final String durableID = DURABLE ID ; private List<String> receivedStrings = Collections synchronizedList(new ArrayList<String>()); private int numMessages = 10; private CountDownLatch recievedLatch = new CountDownLatch(numMessages); public CountDownLatch getLatch() { return recievedLatch; } public List<String> getMessageStrings() { synchronized(receivedStrings) { return new ArrayList<String>(receivedStrings); } } public String getBrokerURL() { return brokerURL; } public void setBrokerURL(String brokerURL) { this brokerURL = brokerURL; } public String getTopicName() { return topicName; } public void setTopicName(String topicName) { this topicName = topicName; } private void createConnection() throws JMSException { ActiveMQConnectionFactory factory = new ActiveMQConnectionFactory( brokerURL); connection = factory createConnection(); connection setClientID( ID + idCounter incrementAndGet()); } private void createTopic() throws JMSException { session = connection createSession(false, Session AUTO ACKNOWLEDGE); topic = session createTopic(topicName); } private void createProducer() throws JMSException { producer = session createProducer(topic); } private void createConsumer() throws JMSException { if (durableSub) { consumer = session createDurableSubscriber(topic, durableID); } else { consumer = session createConsumer(topic); } consumer setMessageListener(new MessageListener() { public void onMessage(Message arg0) { TextMessage msg = (TextMessage) arg0; try { LOG debug( Received message [ + msg getText() + ] ); receivedStrings add(msg getText()); recievedLatch countDown(); } catch (JMSException e) { fail( Unexpected + e); } } }); } private void publish() throws JMSException { for (int i = 0; i < numMessages; i++) { TextMessage textMessage = session createTextMessage(); String message = message + i; LOG debug( Sending message[ + message + ] ); textMessage setText(message); producer send(textMessage); } } public void produce() throws JMSException { createConnection(); createTopic(); createProducer(); connection start(); publish(); } public void consumer() throws JMSException { createConnection(); createTopic(); createConsumer(); connection start(); } public int getNumMessages() { return numMessages; } public void unSubscribe() throws Exception { consumer close(); if (durableSub) { session unsubscribe(durableID); Thread sleep(2000); } } } }",1.0,
3389,3389,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ProducerConsumerTestSupport.,ProducerConsumerTestSupport,"public class ProducerConsumerTestSupport extends TestSupport { protected Connection connection; protected Session session; protected MessageProducer producer; protected MessageConsumer consumer; protected Destination destination; protected void setUp() throws Exception { super setUp(); connection = createConnection(); session = connection createSession(false, Session CLIENT ACKNOWLEDGE); destination = this createDestination(getSubject()); producer = session createProducer(destination); consumer = session createConsumer(destination); connection start(); } protected void tearDown() throws Exception { consumer close(); producer close(); session close(); connection close(); super tearDown(); } }",1.0,
3390,3390,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\PublishOnDurableTopicConsumedMessageTest.,PublishOnDurableTopicConsumedMessageTest,public class PublishOnDurableTopicConsumedMessageTest extends PublishOnTopicConsumedMessageTest { protected void setUp() throws Exception { this durable = true; super setUp(); } },1.0,
3392,3392,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\PublishOnQueueConsumedMessageTest.,PublishOnQueueConsumedMessageTest,public class PublishOnQueueConsumedMessageTest extends PublishOnTopicConsumedMessageTest { protected void setUp() throws Exception { topic = false; super setUp(); } },1.0,
3393,3393,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\PublishOnQueueConsumedMessageUsingActivemqXMLTest.,PublishOnQueueConsumedMessageUsingActivemqXMLTest,public class PublishOnQueueConsumedMessageUsingActivemqXMLTest extends PublishOnTopicConsumedMessageTest { protected static final String JOURNAL ROOT = /data/ ; private static final transient Logger LOG = LoggerFactory getLogger(PublishOnQueueConsumedMessageUsingActivemqXMLTest class); BrokerService broker; protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory( tcp } protected void setUp() throws Exception { File journalFile = new File(JOURNAL ROOT); recursiveDelete(journalFile); LOG info( Creating broker ); broker = createBroker( org/apache/activemq/usecases/activemq xml ); LOG info( Success ); super setUp(); } protected void tearDown() throws Exception { LOG info( Closing Broker ); if (broker != null) { broker stop(); } LOG info( Broker closed ); } protected BrokerService createBroker(String resource) throws Exception { return createBroker(new ClassPathResource(resource)); } protected BrokerService createBroker(Resource resource) throws Exception { BrokerFactoryBean factory = new BrokerFactoryBean(resource); factory afterPropertiesSet(); BrokerService broker = factory getBroker(); return broker; } },1.0,
3394,3394,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\PublishOnTemporaryQueueConsumedMessageTest.,PublishOnTemporaryQueueConsumedMessageTest,public class PublishOnTemporaryQueueConsumedMessageTest extends PublishOnTopicConsumedMessageTest { protected void setUp() throws Exception { topic = false; deliveryMode = DeliveryMode NON PERSISTENT; super setUp(); } },1.0,
3396,3396,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\PublishOnTopicConsumerMessageUsingActivemqXMLTest.,PublishOnTopicConsumerMessageUsingActivemqXMLTest,public class PublishOnTopicConsumerMessageUsingActivemqXMLTest extends PublishOnTopicConsumedMessageTest { protected static final String JOURNAL ROOT = /data/ ; private static final transient Logger LOG = LoggerFactory getLogger(PublishOnTopicConsumerMessageUsingActivemqXMLTest class); BrokerService broker; protected ActiveMQConnectionFactory createConnectionFactory() throws Exception { return new ActiveMQConnectionFactory( tcp } protected void setUp() throws Exception { File journalFile = new File(JOURNAL ROOT); recursiveDelete(journalFile); LOG info( Creating broker ); broker = createBroker( org/apache/activemq/usecases/activemq xml ); LOG info( Success ); super setUp(); } protected void tearDown() throws Exception { LOG info( Closing Broker ); if (broker != null) { broker stop(); } LOG info( Broker closed ); } protected BrokerService createBroker(String resource) throws Exception { return createBroker(new ClassPathResource(resource)); } protected BrokerService createBroker(Resource resource) throws Exception { BrokerFactoryBean factory = new BrokerFactoryBean(resource); factory afterPropertiesSet(); BrokerService broker = factory getBroker(); return broker; } },1.0,
3398,3398,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\QueueConsumerCloseAndReconnectTest.,QueueConsumerCloseAndReconnectTest,public class QueueConsumerCloseAndReconnectTest extends DurableConsumerCloseAndReconnectTest { protected boolean isTopic() { return false; } },1.0,
3400,3400,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\QueueDuplicatesTest.,SendingThread,"private class SendingThread extends Thread { private String subject; SendingThread(String brokerUrl, String subject) { this subject = subject; setDaemon(false); } public void run() { try { Session session = createSession(brokerConnection); Destination dest = session createQueue(subject); MessageProducer producer = session createProducer(dest); producer setDeliveryMode(DeliveryMode NON PERSISTENT); for (int i = 0; i < 20; i++) { String txt = Text Message + i; TextMessage msg = session createTextMessage(txt); producer send(msg); LOG info(formatter format(new Date()) + Sent ==> + msg + to + subject); Thread sleep(1000); } session close(); } catch (Exception e) { e printStackTrace(); } } }",1.0,
3401,3401,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\QueueDuplicatesTest.,SimpleConsumer,"private static class SimpleConsumer implements MessageListener { private Map<String, Message> msgs = new HashMap<String, Message>(); public void onMessage(Message message) { LOG info(formatter format(new Date()) + SimpleConsumer Message Received + message); try { String id = message getJMSMessageID(); assertNull( Message is duplicate + id, msgs get(id)); msgs put(id, message); } catch (Exception e) { e printStackTrace(); } } }",1.0,
3402,3402,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\QueueMemoryFullMultiBrokersTest.,QueueMemoryFullMultiBrokersTest,"public class QueueMemoryFullMultiBrokersTest extends JmsMultipleBrokersTestSupport { public static final int BROKER COUNT = 2; public static final int MESSAGE COUNT = 2000; public void testQueueNetworkWithConsumerFull() throws Exception { bridgeAllBrokers(); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); sendMessages( Broker1 , dest, 50); CountDownLatch latch = new CountDownLatch(MESSAGE COUNT); createConsumer( Broker2 , dest, latch); assertConsumersConnect( Broker1 , dest, 1, 30000); sendMessages( Broker1 , dest, MESSAGE COUNT - 50); assertTrue( Missing + latch getCount() + messages , latch await(45, TimeUnit SECONDS)); BrokerService broker1 = brokers get( Broker1 ) broker; RegionBroker regionBroker = (RegionBroker) broker1 getRegionBroker(); Thread sleep(2000); Queue internalQueue = (Queue) regionBroker getDestinations(ActiveMQDestination transform(dest)) iterator() next(); assertTrue( All messages are consumed and acked from source + internalQueue, internalQueue getMessages() isEmpty()); assertEquals( messages source + internalQueue, 0, internalQueue getDestinationStatistics() getMessages() getCount()); assertEquals( inflight source + internalQueue, 0, internalQueue getDestinationStatistics() getInflight() getCount()); } public void setUp() throws Exception { super setAutoFail(true); super setUp(); messageSize = 1024; for (int i = 1; i <= BROKER COUNT; i++) { createBroker(new URI( broker ()/Broker + i + persistent=false&useJmx=false )); } BrokerService broker2 = brokers get( Broker2 ) broker; applyMemoryLimitPolicy(broker2); } private void applyMemoryLimitPolicy(BrokerService broker) { final SystemUsage memoryManager = new SystemUsage(); memoryManager getMemoryUsage() setLimit(1024 * 50); broker setSystemUsage(memoryManager); final List<PolicyEntry> policyEntries = new ArrayList<PolicyEntry>(); final PolicyEntry entry = new PolicyEntry(); entry setQueue( > ); entry setMemoryLimit(1024 * 4); entry setPendingQueuePolicy(new VMPendingQueueMessageStoragePolicy()); policyEntries add(entry); final PolicyMap policyMap = new PolicyMap(); policyMap setPolicyEntries(policyEntries); broker setDestinationPolicy(policyMap); } }",1.0,
3403,3403,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\QueueRedeliverTest.,QueueRedeliverTest,public class QueueRedeliverTest extends TopicRedeliverTest { protected void setUp() throws Exception { super setUp(); topic = false; } },1.0,
3408,3408,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\RequestReplyTempDestRemovalAdvisoryRaceTest.,MessageClient,"abstract class MessageClient { protected Connection connection; protected Session session; protected MessageConsumer consumer; protected MessageProducer producer; protected Random random; protected int timeToSleep; public MessageClient(ActiveMQConnectionFactory factory, int timeToSleep) throws Exception { this connection = factory createConnection(); this session = connection createSession(false, Session AUTO ACKNOWLEDGE); this timeToSleep = timeToSleep; this random = new Random(System currentTimeMillis()); preInit(); initProducer(); initConsumer(); this connection start(); } protected void preInit() throws JMSException { } abstract protected void initProducer() throws JMSException; abstract protected void initConsumer() throws JMSException; }",1.0,
3409,3409,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\RequestReplyTempDestRemovalAdvisoryRaceTest.,MessageSender,"class MessageSender extends MessageClient implements Runnable { protected Destination tempDest; public MessageSender(ActiveMQConnectionFactory factory) throws Exception { super(factory, RANDOM SLEEP FOR SENDER MS); } Override public void run() { try { TextMessage message = session createTextMessage( request message + messageCount getAndIncrement()); message setJMSReplyTo(tempDest); producer send(message); LOG info( SENDER Message [ + message getText() + ] has been sent ); Message incomingMessage = consumer receive(timeToSleep); if (incomingMessage instanceof TextMessage) { try { LOG info( SENDER Got a response from echo service! + ((TextMessage) incomingMessage) getText()); responseReceived incrementAndGet(); } catch (JMSException e) { LOG error( SENDER might want to see why i m getting non-text messages + incomingMessage, e); } } else { LOG info( SENDER Did not get a response this time ); } } catch (JMSException e) { LOG error( SENDER Could not complete message sending properly + e getMessage()); } finally { try { producer close(); consumer close(); session close(); connection close(); } catch (JMSException e) { e printStackTrace(); } } } Override protected void preInit() throws JMSException { this tempDest = session createTemporaryTopic(); } Override protected void initProducer() throws JMSException { this producer = session createProducer(new ActiveMQQueue(QUEUE NAME)); } Override protected void initConsumer() throws JMSException { this consumer = session createConsumer(tempDest); LOG info( consumer for + tempDest + , + consumer); } }",1.0,
3410,3410,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\RequestReplyTempDestRemovalAdvisoryRaceTest.,EchoRespondent,"class EchoRespondent extends MessageClient implements Runnable { public EchoRespondent(ActiveMQConnectionFactory factory) throws Exception { super(factory, RANDOM SLEEP FOR RESPONDENT MS); } Override public void run() { try { LOG info( RESPONDENT LISTENING ); while (!shutdown get()) { Message incomingMessage = consumer receive(1000); if (incomingMessage instanceof TextMessage) { ActiveMQTextMessage textMessage = (ActiveMQTextMessage) incomingMessage; try { LOG info( RESPONDENT Received a message [ + textMessage getText() + ] + Arrays asList(textMessage getBrokerPath())); Message message = session createTextMessage( reply + textMessage getText()); Destination replyTo = incomingMessage getJMSReplyTo(); TimeUnit MILLISECONDS sleep(timeToSleep); consumerDemandExists await(5, TimeUnit SECONDS); try { producer send(replyTo, message); LOG info( RESPONDENT sent reply + message getJMSMessageID() + back to + replyTo); } catch (JMSException e) { LOG error( RESPONDENT could not send reply message + e getLocalizedMessage(), e); respondentSendError incrementAndGet(); } } catch (JMSException e) { LOG error( RESPONDENT could not create the reply message + e getLocalizedMessage(), e); } catch (InterruptedException e) { LOG info( RESPONDENT could not generate a random number ); } } } } catch (JMSException e) { LOG info( RESPONDENT Could not set the message listener on the respondent ); } } Override protected void initProducer() throws JMSException { this producer = session createProducer(null); this producer setDeliveryMode(DeliveryMode NON PERSISTENT); } Override protected void initConsumer() throws JMSException { this consumer = session createConsumer(new ActiveMQQueue(QUEUE NAME)); } }",1.0,
3411,3411,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\RequestReplyToTopicViaThreeNetworkHopsTest.,RequestReplyToTopicViaThreeNetworkHopsTest,"public class RequestReplyToTopicViaThreeNetworkHopsTest { protected static final int CONCURRENT CLIENT COUNT = 5; protected static final int CONCURRENT SERVER COUNT = 5; protected static final int TOTAL CLIENT ITER = 10; protected static int Next broker num = 0; protected EmbeddedTcpBroker edge1; protected EmbeddedTcpBroker edge2; protected EmbeddedTcpBroker core1; protected EmbeddedTcpBroker core2; protected boolean testError = false; protected boolean fatalTestError = false; protected int echoResponseFill = 0; protected static Log LOG; public boolean duplex = true; static { LOG = LogFactory getLog(RequestReplyToTopicViaThreeNetworkHopsTest class); } public RequestReplyToTopicViaThreeNetworkHopsTest() throws Exception { edge1 = new EmbeddedTcpBroker( edge , 1); edge2 = new EmbeddedTcpBroker( edge , 2); core1 = new EmbeddedTcpBroker( core , 1); core2 = new EmbeddedTcpBroker( core , 2); edge1 coreConnectTo(core1, duplex); edge2 coreConnectTo(core2, duplex); core1 coreConnectTo(core2, duplex); } public void logMessage(String msg) { System out println(msg); System out flush(); } public void testMessages(Session sess, MessageProducer req prod, Destination resp dest, int num msg) throws Exception { MessageConsumer resp cons; TextMessage msg; MessageClient cons client; int cur; int tot expected; resp cons = sess createConsumer(resp dest); cons client = new MessageClient(resp cons, num msg); cons client start(); cur = 0; while ((cur < num msg) && (!fatalTestError)) { msg = sess createTextMessage( MSG AAAA + cur); msg setIntProperty( SEQ , 100 + cur); msg setStringProperty( TEST , TOPO ); msg setJMSReplyTo(resp dest); if (cur == (num msg - 1)) msg setBooleanProperty( end-of-response , true); sendWithRetryOnDeletedDest(req prod, msg); LOG debug( Sent + msg); cur++; } cons client waitShutdown(5000); if (cons client shutdown()) LOG debug( Consumer client shutdown complete ); else LOG debug( Consumer client shutdown incomplete!!! ); tot expected = num msg * (echoResponseFill + 1); if (cons client getNumMsgReceived() == tot expected) { LOG debug( Have + tot expected + messages, as-expected ); } else { testError = true; if (cons client getNumMsgReceived() == 0) fatalTestError = true; LOG error( Have + cons client getNumMsgReceived() + messages; expected + tot expected + on destination + resp dest); } resp cons close(); } protected void sendWithRetryOnDeletedDest(MessageProducer prod, Message msg) throws JMSException { try { if (LOG isDebugEnabled()) LOG debug( SENDING REQUEST message + msg); prod send(msg); } catch (JMSException jms exc) { System out println( AAA + jms exc getMessage()); throw jms exc; } } public void testOneDest(Connection conn, Session sess, Destination cons dest, int num msg) throws Exception { Destination prod dest; MessageProducer msg prod; LOG trace( Creating echo queue and producer ); prod dest = sess createQueue( echo ); msg prod = sess createProducer(prod dest); testMessages(sess, msg prod, cons dest, num msg); msg prod close(); } public void testTempTopic(String prod broker url, String cons broker url) throws Exception { Connection conn; Session sess; Destination cons dest; int echo id; int num msg; num msg = 5; LOG debug( TESTING TEMP TOPICS + prod broker url + -> + cons broker url + ( + num msg + messages) ); conn = createConnection(cons broker url); conn start(); sess = conn createSession(false, Session AUTO ACKNOWLEDGE); LOG trace( Creating destination ); cons dest = sess createTemporaryTopic(); testOneDest(conn, sess, cons dest, num msg); sess close(); conn close(); } public void testTopic(String prod broker url, String cons broker url) throws Exception { int num msg; Connection conn; Session sess; String topic name; Destination cons dest; num msg = 5; LOG info( TESTING TOPICS + prod broker url + -> + cons broker url + ( + num msg + messages) ); conn = createConnection(cons broker url); conn start(); sess = conn createSession(false, Session AUTO ACKNOWLEDGE); topic name = topotest2 perm topic ; LOG trace( Removing existing Topic ); removeTopic(conn, topic name); LOG trace( Creating Topic, + topic name); cons dest = sess createTopic(topic name); testOneDest(conn, sess, cons dest, num msg); removeTopic(conn, topic name); sess close(); conn close(); } public void testTempQueue(String prod broker url, String cons broker url) throws Exception { int echo id; int num msg; Connection conn; Session sess; Destination cons dest; num msg = 5; LOG info( TESTING TEMP QUEUES + prod broker url + -> + cons broker url + ( + num msg + messages) ); conn = createConnection(cons broker url); conn start(); sess = conn createSession(false, Session AUTO ACKNOWLEDGE); LOG trace( Creating destination ); cons dest = sess createTemporaryQueue(); testOneDest(conn, sess, cons dest, num msg); sess close(); conn close(); } public void testQueue(String prod broker url, String cons broker url) throws Exception { int num msg; Connection conn; Session sess; String queue name; Destination cons dest; num msg = 5; LOG info( TESTING QUEUES + prod broker url + -> + cons broker url + ( + num msg + messages) ); conn = createConnection(cons broker url); conn start(); sess = conn createSession(false, Session AUTO ACKNOWLEDGE); queue name = topotest2 perm queue ; LOG trace( Removing existing Queue ); removeQueue(conn, queue name); LOG trace( Creating Queue, + queue name); cons dest = sess createQueue(queue name); testOneDest(conn, sess, cons dest, num msg); removeQueue(conn, queue name); sess close(); conn close(); } Test public void runWithTempTopicReplyTo() throws Exception { EchoService echo svc; TopicTrafficGenerator traffic gen; Thread start1; Thread start2; Thread start3; Thread start4; ThreadPoolExecutor clientExecPool; final CountDownLatch clientCompletionLatch; int iter; fatalTestError = false; testError = false; clientExecPool = new ThreadPoolExecutor(CONCURRENT CLIENT COUNT, CONCURRENT CLIENT COUNT, 0, TimeUnit SECONDS, new ArrayBlockingQueue<Runnable>(10000)); clientCompletionLatch = new CountDownLatch(TOTAL CLIENT ITER); start1 = new Thread() { public void run() { try { edge1 start(); } catch (Exception ex) { LOG error(null, ex); } } }; start2 = new Thread() { public void run() { try { edge2 start(); } catch (Exception ex) { LOG error(null, ex); } } }; start3 = new Thread() { public void run() { try { core1 start(); } catch (Exception ex) { LOG error(null, ex); } } }; start4 = new Thread() { public void run() { try { core2 start(); } catch (Exception ex) { LOG error(null, ex); } } }; start1 start(); start2 start(); start3 start(); start4 start(); start1 join(); start2 join(); start3 join(); start4 join(); traffic gen = new TopicTrafficGenerator(edge1 getConnectionUrl(), edge2 getConnectionUrl()); traffic gen start(); echo svc = new EchoService( echo , edge1 getConnectionUrl()); echo svc start(); LOG info( ** STARTING TEMP TOPIC TESTS ); iter = 0; while ((iter < TOTAL CLIENT ITER) && (!fatalTestError)) { clientExecPool execute(new Runnable() { public void run() { try { RequestReplyToTopicViaThreeNetworkHopsTest this testTempTopic(edge1 getConnectionUrl(), edge2 getConnectionUrl()); } catch (Exception exc) { LOG error( test exception , exc); fatalTestError = true; testError = true; } clientCompletionLatch countDown(); } }); iter++; } boolean allDoneOnTime = clientCompletionLatch await(20, TimeUnit MINUTES); LOG info( ** FINISHED TEMP TOPIC TESTS AFTER + iter + ITERATIONS, testError + testError + , fatal + fatalTestError + , onTime + allDoneOnTime); Thread sleep(100); echo svc shutdown(); traffic gen shutdown(); shutdown(); assertTrue( test completed in time , allDoneOnTime); assertTrue( no errors , !testError); } public void shutdown() throws Exception { edge1 stop(); edge2 stop(); core1 stop(); core2 stop(); } protected Connection createConnection(String url) throws Exception { return org apache activemq ActiveMQConnection makeConnection(url); } protected static void removeQueue(Connection conn, String dest name) throws java lang Exception { org apache activemq command ActiveMQDestination dest; if (conn instanceof org apache activemq ActiveMQConnection) { dest = org apache activemq command ActiveMQDestination createDestination(dest name, (byte) org apache activemq command ActiveMQDestination QUEUE TYPE); ((org apache activemq ActiveMQConnection) conn) destroyDestination(dest); } } protected static void removeTopic(Connection conn, String dest name) throws java lang Exception { org apache activemq command ActiveMQDestination dest; if (conn instanceof org apache activemq ActiveMQConnection) { dest = org apache activemq command ActiveMQDestination createDestination(dest name, (byte) org apache activemq command ActiveMQDestination TOPIC TYPE); ((org apache activemq ActiveMQConnection) conn) destroyDestination(dest); } } public static String fmtMsgInfo(Message msg) throws Exception { StringBuilder msg desc; String prop; Enumeration prop enum; msg desc = new StringBuilder(); msg desc = new StringBuilder(); if (msg instanceof TextMessage) { msg desc append(((TextMessage) msg) getText()); } else { msg desc append( [ ); msg desc append(msg getClass() getName()); msg desc append( ] ); } prop enum = msg getPropertyNames(); while (prop enum hasMoreElements()) { prop = (String) prop enum nextElement(); msg desc append( ; ); msg desc append(prop); msg desc append( = ); msg desc append(msg getStringProperty(prop)); } return msg desc toString(); } protected class EmbeddedTcpBroker { protected BrokerService brokerSvc; protected int brokerNum; protected String brokerName; protected String brokerId; protected int port; protected String tcpUrl; protected String fullUrl; public EmbeddedTcpBroker(String name, int number) throws Exception { brokerSvc = new BrokerService(); synchronized (this getClass()) { brokerNum = Next broker num; Next broker num++; } brokerName = name + number; brokerId = brokerName; brokerSvc setBrokerName(brokerName); brokerSvc setBrokerId(brokerId); brokerSvc setPersistent(false); brokerSvc setUseJmx(false); port = 60000 + (brokerNum * 10); tcpUrl = tcp fullUrl = tcpUrl + jms watchTopicAdvisories=false ; brokerSvc addConnector(tcpUrl); } public Connection createConnection() throws URISyntaxException, JMSException { Connection result; result = org apache activemq ActiveMQConnection makeConnection(this fullUrl); return result; } public String getConnectionUrl() { return this fullUrl; } public void coreConnectTo(EmbeddedTcpBroker other, boolean duplex f) throws Exception { this makeConnectionTo(other, duplex f, true); this makeConnectionTo(other, duplex f, false); if (!duplex f) { other makeConnectionTo(this, duplex f, true); other makeConnectionTo(this, duplex f, false); } } public void start() throws Exception { brokerSvc start(); brokerSvc waitUntilStarted(); } public void stop() throws Exception { brokerSvc stop(); } protected void makeConnectionTo(EmbeddedTcpBroker other, boolean duplex f, boolean queue f) throws Exception { NetworkConnector nw conn; String prefix; ActiveMQDestination excl dest; ArrayList excludes; nw conn = new DiscoveryNetworkConnector(new URI( static ( + other tcpUrl + ) )); nw conn setDuplex(duplex f); if (queue f) nw conn setConduitSubscriptions(false); else nw conn setConduitSubscriptions(true); nw conn setNetworkTTL(3); nw conn setSuppressDuplicateQueueSubscriptions(true); nw conn setDecreaseNetworkConsumerPriority(true); nw conn setBridgeTempDestinations(queue f); if (queue f) { prefix = queue ; excl dest = ActiveMQDestination createDestination( > , ActiveMQDestination TOPIC TYPE); } else { prefix = topic ; excl dest = ActiveMQDestination createDestination( > , ActiveMQDestination QUEUE TYPE); } excludes = new ArrayList(); excludes add(excl dest); nw conn setExcludedDestinations(excludes); if (duplex f) nw conn setName(this brokerId + <- + prefix + -> + other brokerId); else nw conn setName(this brokerId + - + prefix + -> + other brokerId); brokerSvc addNetworkConnector(nw conn); } } protected class MessageClient extends java lang Thread { protected MessageConsumer msgCons; protected boolean shutdownInd; protected int expectedCount; protected int lastSeq = 0; protected int msgCount = 0; protected boolean haveFirstSeq; protected CountDownLatch shutdownLatch; public MessageClient(MessageConsumer cons, int num to expect) { msgCons = cons; expectedCount = (num to expect * (echoResponseFill + 1)); shutdownLatch = new CountDownLatch(1); } public void run() { CountDownLatch latch; try { synchronized (this) { latch = shutdownLatch; } shutdownInd = false; processMessages(); latch countDown(); } catch (Exception exc) { LOG error( message client error , exc); } } public void waitShutdown(long timeout) { CountDownLatch latch; try { synchronized (this) { latch = shutdownLatch; } if (latch != null) latch await(timeout, TimeUnit MILLISECONDS); else LOG info( echo client shutdown client does not appear to be active ); } catch (InterruptedException int exc) { LOG warn( wait for message client shutdown interrupted , int exc); } } public boolean shutdown() { boolean down ind; if (!shutdownInd) { shutdownInd = true; } waitShutdown(200); synchronized (this) { if ((shutdownLatch == null) || (shutdownLatch getCount() == 0)) down ind = true; else down ind = false; } return down ind; } public int getNumMsgReceived() { return msgCount; } protected void processMessages() throws Exception { Message in msg; haveFirstSeq = false; while ((!shutdownInd) && (!fatalTestError)) { in msg = msgCons receive(100); if (in msg != null) { msgCount++; checkMessage(in msg); } } msgCons close(); } protected void checkMessage(Message in msg) throws Exception { int seq; LOG debug( received message + fmtMsgInfo(in msg) + from + in msg getJMSDestination()); if (in msg propertyExists( SEQ )) { seq = in msg getIntProperty( SEQ ); if ((haveFirstSeq) && (seq != (lastSeq + 1))) { LOG error( ***ERROR*** incorrect sequence number; expected + Integer toString(lastSeq + 1) + but have + Integer toString(seq)); testError = true; } lastSeq = seq; if (msgCount > expectedCount) { LOG error( *** have more messages than expected; have + msgCount + ; expect + expectedCount); testError = true; } } if (in msg propertyExists( end-of-response )) { LOG trace( received end-of-response message ); } } } protected class EchoService extends java lang Thread { protected String destName; protected Connection jmsConn; protected Session sess; protected MessageConsumer msg cons; protected boolean Shutdown ind; protected Destination req dest; protected CountDownLatch waitShutdown; protected ThreadPoolExecutor processorPool; public EchoService(String dest, Connection broker conn) throws Exception { destName = dest; jmsConn = broker conn; Shutdown ind = false; sess = jmsConn createSession(false, Session AUTO ACKNOWLEDGE); req dest = sess createQueue(destName); msg cons = sess createConsumer(req dest); jmsConn start(); waitShutdown = new CountDownLatch(1); processorPool = new ThreadPoolExecutor(CONCURRENT SERVER COUNT, CONCURRENT SERVER COUNT, 0, TimeUnit SECONDS, new ArrayBlockingQueue<Runnable>(10000)); } public EchoService(String dest, String broker url) throws Exception { this(dest, ActiveMQConnection makeConnection(broker url)); } public void run() { Message req; try { LOG info( STARTING ECHO SERVICE ); while (!Shutdown ind) { req = msg cons receive(100); if (req != null) { processorPool execute(new EchoRequestProcessor(sess, req)); } } } catch (Exception ex) { LOG error( error processing echo service requests , ex); } finally { LOG info( shutting down test echo service ); try { jmsConn stop(); } catch (javax jms JMSException jms exc) { LOG warn( error on shutting down JMS connection , jms exc); } synchronized (this) { waitShutdown countDown(); } } } public void shutdown() { CountDownLatch wait l; synchronized (this) { wait l = waitShutdown; } Shutdown ind = true; try { if (wait l != null) { if (wait l await(3000, TimeUnit MILLISECONDS)) LOG info( echo service shutdown complete ); else LOG warn( timeout waiting for echo service shutdown ); } else { LOG info( echo service shutdown service does not appear to be active ); } } catch (InterruptedException int exc) { LOG warn( interrupted while waiting for echo service shutdown ); } } } protected class EchoRequestProcessor implements Runnable { protected Session session; protected Destination resp dest; protected MessageProducer msg prod; protected Message request; public EchoRequestProcessor(Session sess, Message req) throws Exception { this session = sess; this request = req; this resp dest = req getJMSReplyTo(); if (resp dest == null) { throw new Exception( invalid request no reply-to destination given ); } this msg prod = session createProducer(this resp dest); } public void run() { try { this processRequest(this request); } catch (Exception ex) { LOG error( Failed to process request , ex); } } protected void processRequest(Message req) throws Exception { if (LOG isDebugEnabled()) LOG debug( ECHO request message + req toString()); resp dest = req getJMSReplyTo(); if (resp dest != null) { msg prod = session createProducer(resp dest); LOG debug( SENDING ECHO RESPONSE to + resp dest); msg prod send(req); LOG debug((((ActiveMQSession) session) getConnection()) getBrokerName() + SENT ECHO RESPONSE to + resp dest); msg prod close(); msg prod = null; } else { LOG warn( invalid request no reply-to destination given ); } } } protected class TopicTrafficGenerator extends java lang Thread { protected Connection conn1; protected Connection conn2; protected Session sess1; protected Session sess2; protected Destination dest; protected MessageProducer prod; protected MessageConsumer cons; protected boolean Shutdown ind; protected int send count; public TopicTrafficGenerator(String url1, String url2) throws Exception { conn1 = createConnection(url1); conn2 = createConnection(url2); sess1 = conn1 createSession(false, Session AUTO ACKNOWLEDGE); sess2 = conn2 createSession(false, Session AUTO ACKNOWLEDGE); conn1 start(); conn2 start(); dest = sess1 createTopic( traffic ); prod = sess1 createProducer(dest); dest = sess2 createTopic( traffic ); cons = sess2 createConsumer(dest); } public void shutdown() { Shutdown ind = true; } public void run() { Message msg; try { LOG info( Starting Topic Traffic Generator ); while (!Shutdown ind) { msg = sess1 createTextMessage( TRAFFIC ); prod send(msg); send count++; msg = cons receive(250); } } catch (JMSException jms exc) { LOG warn( traffic generator failed on jms exception , jms exc); } finally { LOG info( Shutdown of Topic Traffic Generator; send count = + send count); if (conn1 != null) { try { conn1 stop(); } catch (JMSException jms exc) { LOG warn( failed to shutdown connection , jms exc); } } if (conn2 != null) { try { conn2 stop(); } catch (JMSException jms exc) { LOG warn( failed to shutdown connection , jms exc); } } } } } }",1.0,
3413,3413,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\RequestReplyToTopicViaThreeNetworkHopsTest.,MessageClient,"protected class MessageClient extends java lang Thread { protected MessageConsumer msgCons; protected boolean shutdownInd; protected int expectedCount; protected int lastSeq = 0; protected int msgCount = 0; protected boolean haveFirstSeq; protected CountDownLatch shutdownLatch; public MessageClient(MessageConsumer cons, int num to expect) { msgCons = cons; expectedCount = (num to expect * (echoResponseFill + 1)); shutdownLatch = new CountDownLatch(1); } public void run() { CountDownLatch latch; try { synchronized (this) { latch = shutdownLatch; } shutdownInd = false; processMessages(); latch countDown(); } catch (Exception exc) { LOG error( message client error , exc); } } public void waitShutdown(long timeout) { CountDownLatch latch; try { synchronized (this) { latch = shutdownLatch; } if (latch != null) latch await(timeout, TimeUnit MILLISECONDS); else LOG info( echo client shutdown client does not appear to be active ); } catch (InterruptedException int exc) { LOG warn( wait for message client shutdown interrupted , int exc); } } public boolean shutdown() { boolean down ind; if (!shutdownInd) { shutdownInd = true; } waitShutdown(200); synchronized (this) { if ((shutdownLatch == null) || (shutdownLatch getCount() == 0)) down ind = true; else down ind = false; } return down ind; } public int getNumMsgReceived() { return msgCount; } protected void processMessages() throws Exception { Message in msg; haveFirstSeq = false; while ((!shutdownInd) && (!fatalTestError)) { in msg = msgCons receive(100); if (in msg != null) { msgCount++; checkMessage(in msg); } } msgCons close(); } protected void checkMessage(Message in msg) throws Exception { int seq; LOG debug( received message + fmtMsgInfo(in msg) + from + in msg getJMSDestination()); if (in msg propertyExists( SEQ )) { seq = in msg getIntProperty( SEQ ); if ((haveFirstSeq) && (seq != (lastSeq + 1))) { LOG error( ***ERROR*** incorrect sequence number; expected + Integer toString(lastSeq + 1) + but have + Integer toString(seq)); testError = true; } lastSeq = seq; if (msgCount > expectedCount) { LOG error( *** have more messages than expected; have + msgCount + ; expect + expectedCount); testError = true; } } if (in msg propertyExists( end-of-response )) { LOG trace( received end-of-response message ); } } }",1.0,
3414,3414,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\RequestReplyToTopicViaThreeNetworkHopsTest.,EchoService,"protected class EchoService extends java lang Thread { protected String destName; protected Connection jmsConn; protected Session sess; protected MessageConsumer msg cons; protected boolean Shutdown ind; protected Destination req dest; protected CountDownLatch waitShutdown; protected ThreadPoolExecutor processorPool; public EchoService(String dest, Connection broker conn) throws Exception { destName = dest; jmsConn = broker conn; Shutdown ind = false; sess = jmsConn createSession(false, Session AUTO ACKNOWLEDGE); req dest = sess createQueue(destName); msg cons = sess createConsumer(req dest); jmsConn start(); waitShutdown = new CountDownLatch(1); processorPool = new ThreadPoolExecutor(CONCURRENT SERVER COUNT, CONCURRENT SERVER COUNT, 0, TimeUnit SECONDS, new ArrayBlockingQueue<Runnable>(10000)); } public EchoService(String dest, String broker url) throws Exception { this(dest, ActiveMQConnection makeConnection(broker url)); } public void run() { Message req; try { LOG info( STARTING ECHO SERVICE ); while (!Shutdown ind) { req = msg cons receive(100); if (req != null) { processorPool execute(new EchoRequestProcessor(sess, req)); } } } catch (Exception ex) { LOG error( error processing echo service requests , ex); } finally { LOG info( shutting down test echo service ); try { jmsConn stop(); } catch (javax jms JMSException jms exc) { LOG warn( error on shutting down JMS connection , jms exc); } synchronized (this) { waitShutdown countDown(); } } } public void shutdown() { CountDownLatch wait l; synchronized (this) { wait l = waitShutdown; } Shutdown ind = true; try { if (wait l != null) { if (wait l await(3000, TimeUnit MILLISECONDS)) LOG info( echo service shutdown complete ); else LOG warn( timeout waiting for echo service shutdown ); } else { LOG info( echo service shutdown service does not appear to be active ); } } catch (InterruptedException int exc) { LOG warn( interrupted while waiting for echo service shutdown ); } } }",1.0,
3415,3415,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\RequestReplyToTopicViaThreeNetworkHopsTest.,EchoRequestProcessor,"protected class EchoRequestProcessor implements Runnable { protected Session session; protected Destination resp dest; protected MessageProducer msg prod; protected Message request; public EchoRequestProcessor(Session sess, Message req) throws Exception { this session = sess; this request = req; this resp dest = req getJMSReplyTo(); if (resp dest == null) { throw new Exception( invalid request no reply-to destination given ); } this msg prod = session createProducer(this resp dest); } public void run() { try { this processRequest(this request); } catch (Exception ex) { LOG error( Failed to process request , ex); } } protected void processRequest(Message req) throws Exception { if (LOG isDebugEnabled()) LOG debug( ECHO request message + req toString()); resp dest = req getJMSReplyTo(); if (resp dest != null) { msg prod = session createProducer(resp dest); LOG debug( SENDING ECHO RESPONSE to + resp dest); msg prod send(req); LOG debug((((ActiveMQSession) session) getConnection()) getBrokerName() + SENT ECHO RESPONSE to + resp dest); msg prod close(); msg prod = null; } else { LOG warn( invalid request no reply-to destination given ); } } }",1.0,
3416,3416,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\RequestReplyToTopicViaThreeNetworkHopsTest.,TopicTrafficGenerator,"protected class TopicTrafficGenerator extends java lang Thread { protected Connection conn1; protected Connection conn2; protected Session sess1; protected Session sess2; protected Destination dest; protected MessageProducer prod; protected MessageConsumer cons; protected boolean Shutdown ind; protected int send count; public TopicTrafficGenerator(String url1, String url2) throws Exception { conn1 = createConnection(url1); conn2 = createConnection(url2); sess1 = conn1 createSession(false, Session AUTO ACKNOWLEDGE); sess2 = conn2 createSession(false, Session AUTO ACKNOWLEDGE); conn1 start(); conn2 start(); dest = sess1 createTopic( traffic ); prod = sess1 createProducer(dest); dest = sess2 createTopic( traffic ); cons = sess2 createConsumer(dest); } public void shutdown() { Shutdown ind = true; } public void run() { Message msg; try { LOG info( Starting Topic Traffic Generator ); while (!Shutdown ind) { msg = sess1 createTextMessage( TRAFFIC ); prod send(msg); send count++; msg = cons receive(250); } } catch (JMSException jms exc) { LOG warn( traffic generator failed on jms exception , jms exc); } finally { LOG info( Shutdown of Topic Traffic Generator; send count = + send count); if (conn1 != null) { try { conn1 stop(); } catch (JMSException jms exc) { LOG warn( failed to shutdown connection , jms exc); } } if (conn2 != null) { try { conn2 stop(); } catch (JMSException jms exc) { LOG warn( failed to shutdown connection , jms exc); } } } } }",1.0,
3417,3417,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\SingleBrokerVirtualDestinationsWithWildcardTest.,SingleBrokerVirtualDestinationsWithWildcardTest,"public class SingleBrokerVirtualDestinationsWithWildcardTest extends JmsMultipleBrokersTestSupport { public void testVirtualDestinations() throws Exception { startAllBrokers(); sendReceive( local test , true, Consumer a local test , false, 1, 1); sendReceive( global test , true, Consumer a global test , false, 1, 1); destroyAllBrokers(); } public void testVirtualDestinationsWithWildcardWithoutIndividualVirtualQueue() throws Exception { startAllBrokers(); sendReceive( local test 1 , true, Consumer a local test > , false, 1, 1); sendReceive( global test 1 , true, Consumer a global test > , false, 1, 1); destroyAllBrokers(); } public void testVirtualDestinationsWithWildcardWithIndividualVirtualQueue() throws Exception { startAllBrokers(); sendReceive( local test 1 , true, Consumer a local test 1 , false, 1, 1); sendReceive( local test 1 , true, Consumer a local test > , false, 1, 1); sendReceive( global test 1 , true, Consumer a global test 1 , false, 1, 1); sendReceive( global test 1 , true, Consumer a global test > , false, 1, 1); destroyAllBrokers(); } public void testVirtualDestinationsWithWildcardWithVirtualQueuePreCreated() throws Exception { startAllBrokers(); sendReceive( Consumer a local test > , false, Consumer a local test > , false, 1, 1); sendReceive( local test 1 , true, Consumer a local test > , false, 1, 1); sendReceive( Consumer a global test > , false, Consumer a global test > , false, 1, 1); sendReceive( global test 1 , true, Consumer a global test > , false, 1, 1); destroyAllBrokers(); } public void sendReceive(String dest1, boolean topic1, String dest2, boolean topic2, int send, int expected) throws Exception{ MessageConsumer client = createConsumer( BrokerA , createDestination(dest2, topic2)); Thread sleep(1000); sendMessages( BrokerA , createDestination(dest1, topic1), send); MessageIdList msgs = getConsumerMessages( BrokerA , client); msgs setMaximumDuration(1000); assertEquals(expected, msgs getMessageCount()); client close(); Thread sleep(500); } public void setUp() throws Exception { super setAutoFail(true); super setUp(); String options = new String( useJmx=false&deleteAllMessagesOnStartup=true ); createAndConfigureBroker(new URI( broker (tcp } private BrokerService createAndConfigureBroker(URI uri) throws Exception { BrokerService broker = createBroker(uri); configurePersistenceAdapter(broker); VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor(); virtualDestinationInterceptor setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()}); DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor}; broker setDestinationInterceptors(destinationInterceptors); return broker; } protected void configurePersistenceAdapter(BrokerService broker) throws IOException { File dataFileDir = new File( target/test-amq-data/kahadb/ + broker getBrokerName()); KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(dataFileDir); broker setPersistenceAdapter(kaha); } }",1.0,
3420,3420,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\StaticNetworkTest.,StaticNetworkTest,"public class StaticNetworkTest extends JmsMultipleBrokersTestSupport { public void testStaticNetwork() throws Exception { ActiveMQDestination dest = createDestination( TEST , false); ActiveMQDestination dest1 = createDestination( TEST1 , false); NetworkConnector bridgeAB =bridgeBrokers( BrokerA , BrokerB , true); bridgeAB addStaticallyIncludedDestination(dest); bridgeAB setStaticBridge(true); startAllBrokers(); waitForBridgeFormation(); MessageConsumer consumer1 = createConsumer( BrokerB , dest); MessageConsumer consumer2 = createConsumer( BrokerB , dest1); Thread sleep(1000); sendMessages( BrokerA , dest, 1); sendMessages( BrokerA , dest1, 1); MessageIdList msgs1 = getConsumerMessages( BrokerB , consumer1); MessageIdList msgs2 = getConsumerMessages( BrokerB , consumer2); msgs1 waitForMessagesToArrive(1); Thread sleep(1000); assertEquals(1, msgs1 getMessageCount()); assertEquals(0, msgs2 getMessageCount()); } Override public void setUp() throws Exception { super setAutoFail(true); super setUp(); createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp } }",1.0,
3422,3422,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TempTopicProducerFlowControlTest.,TempTopicProducerFlowControlTest,"public class TempTopicProducerFlowControlTest extends TopicProducerFlowControlTest { Override protected void setDestinationPolicy(BrokerService broker, PolicyMap pm) { PolicyEntry tpe = new PolicyEntry(); tpe setTempTopic(true); tpe setMemoryLimit(destinationMemLimit); tpe setProducerFlowControl(true); tpe setAdvisoryWhenFull(true); pm setDefaultEntry(tpe); broker setDestinationPolicy(pm); } Override protected Destination createDestination(Session session) throws Exception { return session createTemporaryTopic(); } }",1.0,
3423,3423,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TestBrokerConnectionDuplexExcludedDestinations.,TestBrokerConnectionDuplexExcludedDestinations,"public class TestBrokerConnectionDuplexExcludedDestinations extends TestCase { BrokerService receiverBroker; BrokerService senderBroker; Connection hubConnection; Session hubSession; Connection spokeConnection; Session spokeSession; public void setUp() throws Exception { String configFileName = org/apache/activemq/usecases/receiver-duplex xml ; URI uri = new URI( xbean + configFileName); receiverBroker = BrokerFactory createBroker(uri); receiverBroker setPersistent(false); receiverBroker setBrokerName( Hub ); configFileName = org/apache/activemq/usecases/sender-duplex xml ; uri = new URI( xbean + configFileName); senderBroker = BrokerFactory createBroker(uri); senderBroker setPersistent(false); senderBroker setBrokerName( Spoke ); receiverBroker start(); senderBroker start(); ConnectionFactory cfHub = new ActiveMQConnectionFactory( tcp hubConnection = cfHub createConnection(); hubConnection start(); hubSession = hubConnection createSession(false, Session AUTO ACKNOWLEDGE); ConnectionFactory cfSpoke = new ActiveMQConnectionFactory( tcp spokeConnection = cfSpoke createConnection(); spokeConnection start(); spokeSession = spokeConnection createSession(false, Session AUTO ACKNOWLEDGE); } public void tearDown() throws Exception { hubSession close(); hubConnection stop(); hubConnection close(); spokeSession close(); spokeConnection stop(); spokeConnection close(); senderBroker stop(); receiverBroker stop(); } public void testDuplexSendFromHubToSpoke() throws Exception { MessageProducer hubProducer = hubSession createProducer(null); hubProducer setDeliveryMode(DeliveryMode NON PERSISTENT); hubProducer setDisableMessageID(true); hubProducer setDisableMessageTimestamp(true); MessageProducer spokeProducer = hubSession createProducer(null); spokeProducer setDeliveryMode(DeliveryMode NON PERSISTENT); spokeProducer setDisableMessageID(true); spokeProducer setDisableMessageTimestamp(true); Queue excludedQueueHub = hubSession createQueue( exclude test foo ); TextMessage excludedMsgHub = hubSession createTextMessage(); excludedMsgHub setText(excludedQueueHub toString()); Queue includedQueueHub = hubSession createQueue( include test foo ); TextMessage includedMsgHub = hubSession createTextMessage(); includedMsgHub setText(includedQueueHub toString()); Queue alwaysIncludedQueueHub = hubSession createQueue( always include test foo ); TextMessage alwaysIncludedMsgHub = hubSession createTextMessage(); alwaysIncludedMsgHub setText(alwaysIncludedQueueHub toString()); hubProducer send(excludedQueueHub, excludedMsgHub); hubProducer send(includedQueueHub, includedMsgHub); hubProducer send(alwaysIncludedQueueHub, alwaysIncludedMsgHub); Queue excludedQueueSpoke = spokeSession createQueue( exclude test foo ); MessageConsumer excludedConsumerSpoke = spokeSession createConsumer(excludedQueueSpoke); Thread sleep(100); Queue includedQueueSpoke = spokeSession createQueue( include test foo ); MessageConsumer includedConsumerSpoke = spokeSession createConsumer(includedQueueSpoke); Thread sleep(100); Queue alwaysIncludedQueueSpoke = spokeSession createQueue( always include test foo ); MessageConsumer alwaysIncludedConsumerSpoke = spokeSession createConsumer(alwaysIncludedQueueHub); Thread sleep(100); TextMessage alwaysIncludedMsgSpoke = spokeSession createTextMessage(); alwaysIncludedMsgSpoke setText(alwaysIncludedQueueSpoke toString()); spokeProducer send(alwaysIncludedQueueSpoke, alwaysIncludedMsgSpoke); MessageConsumer alwaysIncludedConsumerHub = spokeSession createConsumer(alwaysIncludedQueueHub); Message msg = excludedConsumerSpoke receive(200); assertNull(msg); msg = includedConsumerSpoke receive(200); assertEquals(includedMsgHub, msg); msg = alwaysIncludedConsumerSpoke receive(200); assertEquals(alwaysIncludedMsgHub, msg); MessageConsumer excludedConsumerHub = hubSession createConsumer(excludedQueueHub); msg = excludedConsumerHub receive(200);; assertEquals(excludedMsgHub, msg); hubProducer close(); excludedConsumerSpoke close(); } }",1.0,
3426,3426,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ThreeBrokerQueueNetworkUsingTcpTest.,ThreeBrokerQueueNetworkUsingTcpTest,"public class ThreeBrokerQueueNetworkUsingTcpTest extends ThreeBrokerQueueNetworkTest { protected List<DemandForwardingBridge> bridges; protected void bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception { List remoteTransports = remoteBroker getTransportConnectors(); List localTransports = localBroker getTransportConnectors(); URI remoteURI; URI localURI; if (!remoteTransports isEmpty() && !localTransports isEmpty()) { remoteURI = ((TransportConnector)remoteTransports get(0)) getConnectUri(); localURI = ((TransportConnector)localTransports get(0)) getConnectUri(); if (remoteURI toString() startsWith( tcp ) && localURI toString() startsWith( tcp )) { NetworkBridgeConfiguration config = new NetworkBridgeConfiguration(); config setBrokerName(localBroker getBrokerName()); DemandForwardingBridge bridge = new DemandForwardingBridge(config, TransportFactory connect(localURI), TransportFactory connect(remoteURI)); bridge setBrokerService(localBroker); bridges add(bridge); bridge start(); } else { throw new Exception( Remote broker or local broker is not using tcp connectors ); } } else { throw new Exception( Remote broker or local broker has no registered connectors ); } maxSetupTime = 2000; } public void setUp() throws Exception { super setUp(); bridges = new ArrayList<DemandForwardingBridge>(); } }",1.0,
3428,3428,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ThreeBrokerTempDestDemandSubscriptionCleanupTest.,ThreeBrokerTempDestDemandSubscriptionCleanupTest,"public class ThreeBrokerTempDestDemandSubscriptionCleanupTest extends JmsMultipleBrokersTestSupport { private static final Logger LOG = LoggerFactory getLogger(ThreeBrokerTempDestDemandSubscriptionCleanupTest class); boolean enableTempDestinationBridging = true; private static final String BROKER A = BrokerA ; private static final String BROKER B = BrokerB ; private static final String BROKER C = BrokerC ; private static final String ECHO QUEUE NAME = echo ; private static final int NUM ITER = 100; private static final long CONSUME TIMEOUT = 500; public void testSubscriptionsCleanedUpRace() throws Exception { final BrokerItem brokerA = brokers get(BROKER A); Runnable tester = new Runnable() { Override public void run() { for (int i = 0; i < NUM ITER; i++) { Connection conn = null; try { conn = brokerA createConnection(); conn start(); final Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = sess createQueue(ECHO QUEUE NAME); MessageProducer producer = sess createProducer(destination); LOG info( Starting iter + i); Destination replyTo = sess createTemporaryQueue(); MessageConsumer responseConsumer = sess createConsumer(replyTo); Message message = sess createTextMessage( Iteration + i); message setJMSReplyTo(replyTo); producer send(message); TextMessage response = (TextMessage)responseConsumer receive(CONSUME TIMEOUT); assertNotNull( We should have gotten a response, but didn t for iter + i, response); assertEquals( We got the wrong response from the echo service , Iteration + i, response getText()); responseConsumer close(); conn close(); } catch (Exception e) { e printStackTrace(); fail(); } } } }; ExecutorService threadService = Executors newFixedThreadPool(2); threadService submit(tester); threadService submit(tester); threadService shutdown(); assertTrue( executor done on time , threadService awaitTermination(10l, TimeUnit SECONDS)); BrokerItem brokerC = brokers get(BROKER C); RegionBroker regionBroker = (RegionBroker) brokerC broker getRegionBroker(); final AbstractRegion region = (AbstractRegion) regionBroker getTempQueueRegion(); assertTrue( There were no lingering temp-queue destinations , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { LOG info( Lingering temps + region getSubscriptions() size()); return 0 == region getSubscriptions() size(); } })); } public void testSubscriptionsCleanedUpAfterConnectionClose() throws Exception { final BrokerItem brokerA = brokers get(BROKER A); for (int i = 0; i < NUM ITER; i++) { Connection conn = null; try { conn = brokerA createConnection(); conn start(); final Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = sess createQueue(ECHO QUEUE NAME); MessageProducer producer = sess createProducer(destination); LOG info( Starting iter + i); Destination replyTo = sess createTemporaryQueue(); MessageConsumer responseConsumer = sess createConsumer(replyTo); Message message = sess createTextMessage( Iteration + i); message setJMSReplyTo(replyTo); producer send(message); TextMessage response = (TextMessage)responseConsumer receive(CONSUME TIMEOUT); assertNotNull( We should have gotten a response, but didn t for iter + i, response); assertEquals( We got the wrong response from the echo service , Iteration + i, response getText()); conn close(); } catch (Exception e) { e printStackTrace(); fail(); } } BrokerItem brokerC = brokers get(BROKER C); RegionBroker regionBroker = (RegionBroker) brokerC broker getRegionBroker(); final AbstractRegion region = (AbstractRegion) regionBroker getTempQueueRegion(); assertTrue( There were no lingering temp-queue destinations , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { LOG info( Lingering temps + region getSubscriptions() size()); return 0 == region getSubscriptions() size(); } })); } private void installEchoClientOnBrokerC() throws Exception { BrokerItem brokerC = brokers get(BROKER C); Connection conn = brokerC createConnection(); conn start(); final Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); Destination destination = sess createQueue(ECHO QUEUE NAME); MessageConsumer consumer = sess createConsumer(destination); consumer setMessageListener(new MessageListener() { Override public void onMessage(Message message) { TextMessage textMessage = (TextMessage) message; try { Destination replyTo = message getJMSReplyTo(); MessageProducer producer = sess createProducer(replyTo); Message response = sess createTextMessage(textMessage getText()); LOG info( Replying to this request + textMessage getText()); producer send(response); producer close(); } catch (JMSException e) { e printStackTrace(); fail( Could not respond to an echo request ); } } }); } Override protected void setUp() throws Exception { super setUp(); createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp bridgeBrokers( BrokerA , BrokerB , false, 3); bridgeBrokers( BrokerB , BrokerC , false, 3); startAllBrokers(); installEchoClientOnBrokerC(); } protected NetworkConnector bridgeBrokers(String localBrokerName, String remoteBrokerName, boolean dynamicOnly, int networkTTL) throws Exception { NetworkConnector connector = super bridgeBrokers(localBrokerName, remoteBrokerName, dynamicOnly, networkTTL, true); connector setBridgeTempDestinations(enableTempDestinationBridging); connector setDuplex(true); return connector; } }",1.0,
3429,3429,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ThreeBrokerTempQueueNetworkTest.,ThreeBrokerTempQueueNetworkTest,"public class ThreeBrokerTempQueueNetworkTest extends JmsMultipleBrokersTestSupport { protected static final int MESSAGE COUNT = 100; boolean enableTempDestinationBridging = true; public void testTempQueueCleanup() throws Exception { bridgeBrokers( BrokerA , BrokerB , false, 2); bridgeBrokers( BrokerB , BrokerC , false, 2); startAllBrokers(); BrokerItem brokerItem = (BrokerItem)brokers get( BrokerC ); Connection conn = brokerItem createConnection(); conn start(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); TemporaryQueue tempQ = sess createTemporaryQueue(); Thread sleep(5000); for (Iterator i = brokers values() iterator(); i hasNext();) { BrokerItem bi = (BrokerItem)i next(); assertEquals( No queues on broker + bi broker getBrokerName(), 1, bi broker getAdminView() getTemporaryQueues() length); } tempQ delete(); Thread sleep(2000); for (Iterator i = brokers values() iterator(); i hasNext();) { BrokerItem bi = (BrokerItem)i next(); assertEquals( Temp queue left behind on broker + bi broker getBrokerName(), 0, bi broker getAdminView() getTemporaryQueues() length); } } public void testTempQueueRecovery() throws Exception { bridgeBrokers( BrokerA , BrokerB , false, 3); bridgeBrokers( BrokerB , BrokerC , false, 3); startAllBrokers(); BrokerItem brokerItem = (BrokerItem)brokers get( BrokerC ); Connection conn = brokerItem createConnection(); conn start(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); TemporaryQueue tempQ = sess createTemporaryQueue(); Thread sleep(5000); for (Iterator i = brokers values() iterator(); i hasNext();) { BrokerItem bi = (BrokerItem)i next(); assertEquals( No queues on broker + bi broker getBrokerName(), 1, bi broker getAdminView() getTemporaryQueues() length); } createBroker(new URI( broker (tcp bridgeBrokers( BrokerD , BrokerA , false, 3); BrokerItem newBroker = (BrokerItem)brokers get( BrokerD ); newBroker broker start(); Thread sleep(1000); assertEquals( No queues on broker D , 1, newBroker broker getAdminView() getTemporaryQueues() length); tempQ delete(); Thread sleep(2000); for (Iterator i = brokers values() iterator(); i hasNext();) { BrokerItem bi = (BrokerItem)i next(); assertEquals( Temp queue left behind on broker + bi broker getBrokerName(), 0, bi broker getAdminView() getTemporaryQueues() length); } } public void testTempDisable() throws Exception { enableTempDestinationBridging = false; try { testTempQueueCleanup(); } catch (Throwable e) { return; } fail( Test should have failed since temp queues are disabled ); } public void setUp() throws Exception { super setAutoFail(true); super setUp(); createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp } protected NetworkConnector bridgeBrokers(String localBrokerName, String remoteBrokerName, boolean dynamicOnly, int networkTTL) throws Exception { NetworkConnector connector = super bridgeBrokers(localBrokerName, remoteBrokerName, dynamicOnly, networkTTL, true); connector setBridgeTempDestinations(enableTempDestinationBridging); return connector; } }",1.0,
3431,3431,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ThreeBrokerTopicNetworkUsingTcpTest.,ThreeBrokerTopicNetworkUsingTcpTest,"public class ThreeBrokerTopicNetworkUsingTcpTest extends ThreeBrokerTopicNetworkTest { protected List<DemandForwardingBridge> bridges; protected void bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception { List remoteTransports = remoteBroker getTransportConnectors(); List localTransports = localBroker getTransportConnectors(); URI remoteURI; URI localURI; if (!remoteTransports isEmpty() && !localTransports isEmpty()) { remoteURI = ((TransportConnector)remoteTransports get(0)) getConnectUri(); localURI = ((TransportConnector)localTransports get(0)) getConnectUri(); if (remoteURI toString() startsWith( tcp ) && localURI toString() startsWith( tcp )) { NetworkBridgeConfiguration config = new NetworkBridgeConfiguration(); config setBrokerName(localBroker getBrokerName()); DemandForwardingBridge bridge = new DemandForwardingBridge(config, TransportFactory connect(localURI), TransportFactory connect(remoteURI)); bridge setBrokerService(localBroker); bridges add(bridge); bridge start(); } else { throw new Exception( Remote broker or local broker is not using tcp connectors ); } } else { throw new Exception( Remote broker or local broker has no registered connectors ); } maxSetupTime = 2000; } public void setUp() throws Exception { super setUp(); bridges = new ArrayList<DemandForwardingBridge>(); } }",1.0,
3432,3432,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ThreeBrokerVirtualTopicNetworkAMQPATest.,ThreeBrokerVirtualTopicNetworkAMQPATest,public class ThreeBrokerVirtualTopicNetworkAMQPATest extends ThreeBrokerVirtualTopicNetworkTest { protected void configurePersistenceAdapter(BrokerService broker) throws IOException { File dataFileDir = new File( target/test-amq-data/amq/ + broker getBrokerName()); AMQPersistenceAdapter adapter = new AMQPersistenceAdapter(); adapter setDirectory(dataFileDir); broker setPersistenceAdapter(adapter); } },1.0,
3433,3433,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ThreeBrokerVirtualTopicNetworkTest.,ThreeBrokerVirtualTopicNetworkTest,"public class ThreeBrokerVirtualTopicNetworkTest extends JmsMultipleBrokersTestSupport { private static final Logger LOG = LoggerFactory getLogger(ThreeBrokerVirtualTopicNetworkTest class); protected static final int MESSAGE COUNT = 1; public boolean dynamicOnly = false; public void testNetworkVirtualTopic() throws Exception { int networkTTL = 6; boolean conduitSubs = true; bridgeAndConfigureBrokers( BrokerA , BrokerB , dynamicOnly, networkTTL, conduitSubs); bridgeAndConfigureBrokers( BrokerA , BrokerC , dynamicOnly, networkTTL, conduitSubs); bridgeAndConfigureBrokers( BrokerB , BrokerA , dynamicOnly, networkTTL, conduitSubs); bridgeAndConfigureBrokers( BrokerB , BrokerC , dynamicOnly, networkTTL, conduitSubs); bridgeAndConfigureBrokers( BrokerC , BrokerA , dynamicOnly, networkTTL, conduitSubs); bridgeAndConfigureBrokers( BrokerC , BrokerB , dynamicOnly, networkTTL, conduitSubs); startAllBrokers(); waitForBridgeFormation(); Destination dest = createDestination( TEST FOO , true); MessageConsumer clientA = createConsumer( BrokerA , createDestination( Consumer A TEST FOO , false)); MessageConsumer clientB = createConsumer( BrokerB , createDestination( Consumer B TEST FOO , false)); MessageConsumer clientC = createConsumer( BrokerC , createDestination( Consumer C TEST FOO , false)); Thread sleep(2000); sendMessages( BrokerA , dest, 1); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); MessageIdList msgsB = getConsumerMessages( BrokerB , clientB); MessageIdList msgsC = getConsumerMessages( BrokerC , clientC); msgsA waitForMessagesToArrive(1); msgsB waitForMessagesToArrive(1); msgsC waitForMessagesToArrive(1); Thread sleep(2000); assertEquals(1, msgsA getMessageCount()); assertEquals(1, msgsB getMessageCount()); assertEquals(1, msgsC getMessageCount()); LOG info( Restarting brokerA ); BrokerItem brokerItem = brokers remove( BrokerA ); if (brokerItem != null) { brokerItem destroy(); } BrokerService restartedBroker = createAndConfigureBroker(new URI( broker (tcp bridgeAndConfigureBrokers( BrokerA , BrokerB , dynamicOnly, networkTTL, conduitSubs); bridgeAndConfigureBrokers( BrokerA , BrokerC , dynamicOnly, networkTTL, conduitSubs); restartedBroker start(); waitForBridgeFormation(); clientA = createConsumer( BrokerA , createDestination( Consumer A TEST FOO , false)); LOG info( recreated clientA ); Thread sleep(2000); sendMessages( BrokerA , dest, 10); msgsA = getConsumerMessages( BrokerA , clientA); msgsA waitForMessagesToArrive(10); msgsB waitForMessagesToArrive(11); msgsC waitForMessagesToArrive(11); Thread sleep(2000); LOG info( MessagesA + msgsA getMessageIds()); assertEquals(10, msgsA getMessageCount()); assertEquals(11, msgsB getMessageCount()); assertEquals(11, msgsC getMessageCount()); LOG info( Restarting brokerA again ); brokerItem = brokers remove( BrokerA ); if (brokerItem != null) { brokerItem destroy(); } restartedBroker = createAndConfigureBroker(new URI( broker (tcp bridgeAndConfigureBrokers( BrokerA , BrokerB , dynamicOnly, networkTTL, conduitSubs); bridgeAndConfigureBrokers( BrokerA , BrokerC , dynamicOnly, networkTTL, conduitSubs); restartedBroker start(); waitForBridgeFormation(); clientA = createConsumer( BrokerA , createDestination( Consumer A TEST FOO , false)); LOG info( recreated clientA again ); Thread sleep(2000); msgsA = getConsumerMessages( BrokerA , clientA); Thread sleep(5000); LOG info( Extra MessagesA + msgsA getMessageIds()); assertEquals(0, msgsA getMessageCount()); assertEquals(11, msgsB getMessageCount()); assertEquals(11, msgsC getMessageCount()); } private void bridgeAndConfigureBrokers(String local, String remote, boolean dynamicOnly, int networkTTL, boolean conduitSubs) throws Exception { NetworkConnector bridge = bridgeBrokers(local, remote, dynamicOnly, networkTTL, conduitSubs); bridge setDecreaseNetworkConsumerPriority(true); } public void setUp() throws Exception { super setAutoFail(true); super setUp(); String options = new String( useJmx=false&deleteAllMessagesOnStartup=true ); createAndConfigureBroker(new URI( broker (tcp createAndConfigureBroker(new URI( broker (tcp createAndConfigureBroker(new URI( broker (tcp } private BrokerService createAndConfigureBroker(URI uri) throws Exception { BrokerService broker = createBroker(uri); configurePersistenceAdapter(broker); VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor(); virtualDestinationInterceptor setVirtualDestinations(new VirtualDestination[]{new VirtualTopic()}); DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor}; broker setDestinationInterceptors(destinationInterceptors); return broker; } protected void configurePersistenceAdapter(BrokerService broker) throws IOException { File dataFileDir = new File( target/test-amq-data/kahadb/ + broker getBrokerName()); KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(dataFileDir); broker setPersistenceAdapter(kaha); } }",1.0,
3435,3435,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TopicDurableConnectStatsTest.,Listener,"public static class Listener implements MessageListener { int count = 0; String id = null; Listener() { } public void onMessage(Message message) { count++; try { session2 commit(); } catch (JMSException e1) { e1 printStackTrace(); } if (id != null) { try { LOG info(id + , + message getJMSMessageID()); } catch (Exception ignored) { } } try { Thread sleep(2); } catch (InterruptedException e) { e printStackTrace(); } } }",1.0,
3438,3438,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TopicReplicationTest.,TopicReplicationTest,"public class TopicReplicationTest extends JmsMultipleBrokersTestSupport { public static final int MSG COUNT = 10; public void testReplication() throws Exception { createBroker(new ClassPathResource( org/apache/activemq/usecases/replication-broker1 xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/replication-broker2 xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/replication-broker3 xml )); createBroker(new ClassPathResource( org/apache/activemq/usecases/replication-broker4 xml )); brokers get( replication-broker1 ) broker waitUntilStarted(); brokers get( replication-broker2 ) broker waitUntilStarted(); brokers get( replication-broker3 ) broker waitUntilStarted(); brokers get( replication-broker4 ) broker waitUntilStarted(); Destination dest = createDestination( replication , true); MessageConsumer clientA = createConsumer( replication-broker2 , dest); MessageConsumer clientB = createConsumer( replication-broker3 , dest); MessageConsumer clientC = createConsumer( replication-broker4 , dest); MessageConsumer clientD = createConsumer( replication-broker4 , dest); Thread sleep(2000); MessageIdList msgsA = getConsumerMessages( replication-broker2 , clientA); MessageIdList msgsB = getConsumerMessages( replication-broker3 , clientB); MessageIdList msgsC = getConsumerMessages( replication-broker4 , clientC); MessageIdList msgsD = getConsumerMessages( replication-broker4 , clientD); sendMessages( replication-broker1 , dest, MSG COUNT); msgsA waitForMessagesToArrive(MSG COUNT); msgsB waitForMessagesToArrive(MSG COUNT); msgsC waitForMessagesToArrive(MSG COUNT); msgsD waitForMessagesToArrive(MSG COUNT); assertEquals(MSG COUNT, msgsA getMessageCount()); assertEquals(MSG COUNT, msgsB getMessageCount()); assertEquals(MSG COUNT, msgsC getMessageCount()); assertEquals(MSG COUNT, msgsD getMessageCount()); sendMessages( replication-broker4 , dest, MSG COUNT); msgsA waitForMessagesToArrive(2 * MSG COUNT); msgsB waitForMessagesToArrive(2 * MSG COUNT); msgsC waitForMessagesToArrive(2 * MSG COUNT); msgsD waitForMessagesToArrive(2 * MSG COUNT); assertEquals(2 * MSG COUNT, msgsA getMessageCount()); assertEquals(2 * MSG COUNT, msgsB getMessageCount()); assertEquals(2 * MSG COUNT, msgsC getMessageCount()); assertEquals(2 * MSG COUNT, msgsD getMessageCount()); sendMessages( replication-broker3 , dest, MSG COUNT); msgsA waitForMessagesToArrive(3 * MSG COUNT); msgsB waitForMessagesToArrive(3 * MSG COUNT); msgsC waitForMessagesToArrive(3 * MSG COUNT); msgsD waitForMessagesToArrive(3 * MSG COUNT); assertEquals(3 * MSG COUNT, msgsA getMessageCount()); assertEquals(3 * MSG COUNT, msgsB getMessageCount()); assertEquals(3 * MSG COUNT, msgsC getMessageCount()); assertEquals(3 * MSG COUNT, msgsD getMessageCount()); sendMessages( replication-broker2 , dest, MSG COUNT); msgsA waitForMessagesToArrive(4 * MSG COUNT); msgsB waitForMessagesToArrive(4 * MSG COUNT); msgsC waitForMessagesToArrive(4 * MSG COUNT); msgsD waitForMessagesToArrive(4 * MSG COUNT); assertEquals(4 * MSG COUNT, msgsA getMessageCount()); assertEquals(4 * MSG COUNT, msgsB getMessageCount()); assertEquals(4 * MSG COUNT, msgsC getMessageCount()); assertEquals(4 * MSG COUNT, msgsD getMessageCount()); } }",1.0,
3439,3439,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TopicSubscriptionSlowConsumerTest.,TopicSubscriptionSlowConsumerTest,"public class TopicSubscriptionSlowConsumerTest extends TestCase { private static final String TOPIC NAME = slow consumer ; Connection connection; private Session session; private ActiveMQTopic destination; private MessageProducer producer; private MessageConsumer consumer; private BrokerService brokerService; public void setUp() throws Exception { brokerService = createBroker(); ActiveMQConnectionFactory activeMQConnectionFactory = new ActiveMQConnectionFactory( vm activeMQConnectionFactory setWatchTopicAdvisories(true); connection = activeMQConnectionFactory createConnection(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); destination = new ActiveMQTopic(TOPIC NAME); producer = session createProducer(destination); connection start(); } public void testPrefetchValueOne() throws Exception{ ActiveMQTopic consumerDestination = new ActiveMQTopic(TOPIC NAME+ consumer prefetchSize=1 ); consumer = session createConsumer(consumerDestination); ActiveMQTopic slowConsumerAdvisoryTopic = AdvisorySupport getSlowConsumerAdvisoryTopic(destination); MessageConsumer slowConsumerAdvisory = session createConsumer(slowConsumerAdvisoryTopic); Message txtMessage = session createTextMessage( Sample Text Message ); for(int i= 0; i<2; i++){ producer send(txtMessage); } for(int i= 0; i<2; i++){ Message receivedMsg = consumer receive(100); Assert assertNotNull( received msg +i+ should not be null ,receivedMsg); } Message slowAdvisoryMessage = slowConsumerAdvisory receive(100); Assert assertNull( should not have received a slow consumer advisory message ,slowAdvisoryMessage); } public void tearDown() throws Exception { consumer close(); producer close(); session close(); connection close(); brokerService stop(); } private BrokerService createBroker() throws Exception { BrokerService broker = new BrokerService(); broker setBrokerName( localhost ); broker setUseJmx(true); broker setDeleteAllMessagesOnStartup(true); broker addConnector( vm PolicyMap policyMap = new PolicyMap(); PolicyEntry defaultEntry = new PolicyEntry(); defaultEntry setAdvisoryForSlowConsumers(true); policyMap setDefaultEntry(defaultEntry); broker setDestinationPolicy(policyMap); broker start(); broker waitUntilStarted(); return broker; } }",1.0,
3443,3443,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TransientQueueRedeliverTest.,TransientQueueRedeliverTest,public class TransientQueueRedeliverTest extends TopicRedeliverTest { protected void setUp() throws Exception { super setUp(); topic = false; deliveryMode = DeliveryMode NON PERSISTENT; } },1.0,
3444,3444,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest.,TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest,"public class TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest extends JmsMultipleBrokersTestSupport { protected static final int MESSAGE COUNT = 100; public void testRemoteBrokerHasConsumer() throws Exception { bridgeBrokers( BrokerA , BrokerB ); startAllBrokers(); Destination dest = createDestination( TEST FOO , true); MessageConsumer clientA = createConsumer( BrokerA , dest); MessageConsumer clientB = createConsumer( BrokerB , dest); Thread sleep(2000); sendMessages( BrokerA , dest, MESSAGE COUNT); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); MessageIdList msgsB = getConsumerMessages( BrokerB , clientB); msgsA waitForMessagesToArrive(MESSAGE COUNT); msgsB waitForMessagesToArrive(MESSAGE COUNT); assertEquals(MESSAGE COUNT, msgsA getMessageCount()); assertEquals(MESSAGE COUNT, msgsB getMessageCount()); } public void testRemoteBrokerHasNoConsumer() throws Exception { bridgeBrokers( BrokerA , BrokerB ); startAllBrokers(); Destination dest = createDestination( TEST FOO , true); MessageConsumer clientA = createConsumer( BrokerA , dest); sendMessages( BrokerA , dest, MESSAGE COUNT); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); msgsA waitForMessagesToArrive(MESSAGE COUNT); assertEquals(MESSAGE COUNT, msgsA getMessageCount()); } public void testDuplexStaticRemoteBrokerHasNoConsumer() throws Exception { boolean dynamicOnly = true; int networkTTL = 2; boolean conduit = true; bridgeBrokers( BrokerA , BrokerB , dynamicOnly, networkTTL, conduit); bridgeBrokers( BrokerB , BrokerA , dynamicOnly, networkTTL, conduit); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); MessageConsumer clientA = createConsumer( BrokerA , dest); Thread sleep(2*1000); int messageCount = 2000; sendMessages( BrokerA , dest, messageCount); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); msgsA waitForMessagesToArrive(messageCount); assertEquals(messageCount, msgsA getMessageCount()); } public void setUp() throws Exception { super setAutoFail(true); super setUp(); createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp } }",1.0,
3445,3445,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TwoBrokerMulticastQueueTest.,TwoBrokerMulticastQueueTest,"public class TwoBrokerMulticastQueueTest extends CombinationTestSupport { public static final int MESSAGE COUNT = 100; public static final int BROKER COUNT = 2; public static final int CONSUMER COUNT = 20; public String sendUri; public String recvUri; private BrokerService[] brokers; private String groupId; public static Test suite() { return suite(TwoBrokerMulticastQueueTest class); } public static void main(String[] args) { junit textui TestRunner run(suite()); } public void setUp() throws Exception { groupId = getClass() getName()+ - +System currentTimeMillis(); System setProperty( groupId , groupId); super setAutoFail(true); super setUp(); } public void tearDown() throws Exception { if (brokers != null) { for (int i = 0; i < BROKER COUNT; i++) { if (brokers[i] != null) { brokers[i] stop(); } } super tearDown(); } } private void doSendReceiveTest() throws Exception { Destination dest = new ActiveMQQueue( TEST FOO ); ConnectionFactory sendFactory = createConnectionFactory(sendUri); Connection conn = createConnection(sendFactory); sendMessages(conn, dest, MESSAGE COUNT); Thread sleep(500); ConnectionFactory recvFactory = createConnectionFactory(recvUri); assertEquals(MESSAGE COUNT, receiveMessages(createConnection(recvFactory), dest, 0)); } private void doMultipleConsumersConnectTest() throws Exception { Destination dest = new ActiveMQQueue( TEST FOO ); ConnectionFactory sendFactory = createConnectionFactory(sendUri); Connection conn = createConnection(sendFactory); sendMessages(conn, dest, MESSAGE COUNT); Thread sleep(500); ConnectionFactory recvFactory = createConnectionFactory(recvUri); assertEquals(MESSAGE COUNT, receiveMessages(createConnection(recvFactory), dest, 0)); for (int i = 0; i < (CONSUMER COUNT - 1); i++) { assertEquals(0, receiveMessages(createConnection(recvFactory), dest, 200)); } } public void initCombosForTestSendReceive() { addCombinationValues( sendUri , new Object[] { tcp addCombinationValues( recvUri , new Object[] { tcp } public void testSendReceive() throws Exception { createMulticastBrokerNetwork(); doSendReceiveTest(); } public void initCombosForTestMultipleConsumersConnect() { addCombinationValues( sendUri , new Object[] { tcp addCombinationValues( recvUri , new Object[] { tcp } public void testMultipleConsumersConnect() throws Exception { createMulticastBrokerNetwork(); doMultipleConsumersConnectTest(); } public void testSendReceiveUsingFailover() throws Exception { sendUri = failover (tcp recvUri = failover (tcp createMulticastBrokerNetwork(); doSendReceiveTest(); } public void testMultipleConsumersConnectUsingFailover() throws Exception { sendUri = failover (tcp recvUri = failover (tcp createMulticastBrokerNetwork(); doMultipleConsumersConnectTest(); } public void testSendReceiveUsingDiscovery() throws Exception { sendUri = discovery multicast recvUri = discovery multicast createMulticastBrokerNetwork(); doSendReceiveTest(); } public void testMultipleConsumersConnectUsingDiscovery() throws Exception { sendUri = discovery multicast recvUri = discovery multicast createMulticastBrokerNetwork(); doMultipleConsumersConnectTest(); } public void testSendReceiveUsingAutoAssignFailover() throws Exception { sendUri = failover (discovery multicast default group= recvUri = failover (discovery multicast default group= createAutoAssignMulticastBrokerNetwork(); doSendReceiveTest(); } public void testMultipleConsumersConnectUsingAutoAssignFailover() throws Exception { sendUri = failover (discovery multicast default group= recvUri = failover (discovery multicast default group= createAutoAssignMulticastBrokerNetwork(); doMultipleConsumersConnectTest(); } public void testSendReceiveUsingAutoAssignDiscovery() throws Exception { sendUri = discovery multicast recvUri = discovery multicast createAutoAssignMulticastBrokerNetwork(); doSendReceiveTest(); } public void testMultipleConsumersConnectUsingAutoAssignDiscovery() throws Exception { sendUri = discovery multicast recvUri = discovery multicast createAutoAssignMulticastBrokerNetwork(); doMultipleConsumersConnectTest(); } protected void createMulticastBrokerNetwork() throws Exception { brokers = new BrokerService[BROKER COUNT]; for (int i = 0; i < BROKER COUNT; i++) { brokers[i] = createBroker( org/apache/activemq/usecases/multicast-broker- + (i + 1) + xml ); brokers[i] start(); } Thread sleep(1000); } protected void createAutoAssignMulticastBrokerNetwork() throws Exception { brokers = new BrokerService[BROKER COUNT]; for (int i = 0; i < BROKER COUNT; i++) { brokers[i] = createBroker( org/apache/activemq/usecases/multicast-broker-auto xml ); brokers[i] start(); } Thread sleep(1000); } protected BrokerService createBroker(String uri) throws Exception { return (new XBeanBrokerFactory()) createBroker(new URI(uri)); } protected ConnectionFactory createConnectionFactory(String uri) { return new ActiveMQConnectionFactory(uri); } protected Connection createConnection(ConnectionFactory factory) throws JMSException { Connection conn = factory createConnection(); return conn; } protected int receiveMessages(Connection conn, Destination dest, int waitTime) throws JMSException, InterruptedException { conn start(); MessageIdList list = new MessageIdList(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); MessageConsumer consumer = sess createConsumer(dest); consumer setMessageListener(list); if (waitTime > 0) { Thread sleep(waitTime); } else { list waitForMessagesToArrive(MESSAGE COUNT); } conn close(); return list getMessageCount(); } protected void sendMessages(Connection conn, Destination dest, int count) throws JMSException { conn start(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer prod = sess createProducer(dest); for (int i = 0; i < count; i++) { prod send(createTextMessage(sess, Message + i, 1024)); } conn close(); } protected TextMessage createTextMessage(Session session, String initText, int messageSize) throws JMSException { TextMessage msg = session createTextMessage(); if (initText length() < messageSize) { char[] data = new char[messageSize - initText length()]; Arrays fill(data, * ); String str = new String(data); msg setText(initText + str); } else { msg setText(initText); } return msg; } }",1.0,
3448,3448,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TwoBrokerNetworkLoadBalanceTest.,TwoBrokerNetworkLoadBalanceTest,"public class TwoBrokerNetworkLoadBalanceTest extends JmsMultipleBrokersTestSupport { protected static final Logger LOG = LoggerFactory getLogger(TwoBrokerNetworkLoadBalanceTest class); public void testLoadBalancing() throws Exception { bridgeBrokers( BrokerA , BrokerB ); bridgeBrokers( BrokerB , BrokerA ); startAllBrokers(); waitForBridgeFormation(); Destination dest = createDestination( TEST FOO , false); MessageConsumer clientA = createConsumer( BrokerA , dest); MessageConsumer clientB = createConsumer( BrokerB , dest); sendMessages( BrokerA , dest, 5000); sendMessages( BrokerB , dest, 1000); final MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); final MessageIdList msgsB = getConsumerMessages( BrokerB , clientB); Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { return msgsA getMessageCount() + msgsB getMessageCount() == 6000; }}); LOG info( A got + msgsA getMessageCount()); LOG info( B got + msgsB getMessageCount()); assertTrue( B got is fair share + msgsB getMessageCount(), msgsB getMessageCount() > 2000); } public void setUp() throws Exception { super setAutoFail(true); super setUp(); createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp } }",1.0,
3449,3449,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TwoBrokerQueueClientsReconnectTest.,TwoBrokerQueueClientsReconnectTest,"public class TwoBrokerQueueClientsReconnectTest extends JmsMultipleBrokersTestSupport { protected static final int MESSAGE COUNT = 100; protected static final int PREFETCH COUNT = 1; protected static final int NETWORK PREFETCH = 1; private static final Logger LOG = LoggerFactory getLogger(TwoBrokerQueueClientsReconnectTest class); protected int msgsClient1; protected int msgsClient2; protected String broker1; protected String broker2; public void testClientAReceivesOnly() throws Exception { broker1 = BrokerA ; broker2 = BrokerB ; doOneClientReceivesOnly(); } public void testClientBReceivesOnly() throws Exception { broker1 = BrokerB ; broker2 = BrokerA ; doOneClientReceivesOnly(); } public void doOneClientReceivesOnly() throws Exception { applyRateLimitNetworkFilter(0); bridgeBrokers(broker1, broker2); bridgeBrokers(broker2, broker1); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); MessageConsumer client1 = createConsumer(broker1, dest); MessageConsumer client2 = createConsumer(broker2, dest); Thread sleep(500); sendMessages( BrokerA , dest, MESSAGE COUNT); client2 close(); msgsClient1 += receiveAllMessages(client1); client1 close(); assertEquals( Client for + broker1 + should have receive all messages , MESSAGE COUNT, msgsClient1); } public void testClientAReceivesOnlyAfterReconnect() throws Exception { broker1 = BrokerA ; broker2 = BrokerB ; doOneClientReceivesOnlyAfterReconnect(); } public void testClientBReceivesOnlyAfterReconnect() throws Exception { broker1 = BrokerB ; broker2 = BrokerA ; doOneClientReceivesOnlyAfterReconnect(); } public void doOneClientReceivesOnlyAfterReconnect() throws Exception { applyRateLimitNetworkFilter(0); bridgeBrokers(broker1, broker2); bridgeBrokers(broker2, broker1); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); MessageConsumer client1 = createConsumer(broker1, dest); MessageConsumer client2 = createConsumer(broker2, dest); Thread sleep(500); sendMessages( BrokerA , dest, MESSAGE COUNT); msgsClient1 += receiveExactMessages(client1, (int)(MESSAGE COUNT * 0 20)); client1 close(); client1 = createConsumer(broker1, dest); Thread sleep(500); client2 close(); msgsClient1 += receiveAllMessages(client1); client1 close(); assertEquals( Client for + broker1 + should have received all messages , MESSAGE COUNT, msgsClient1); } public void testTwoClientsReceiveClientADisconnects() throws Exception { broker1 = BrokerA ; broker2 = BrokerB ; doTwoClientsReceiveOneClientDisconnects(); } public void testTwoClientsReceiveClientBDisconnects() throws Exception { broker1 = BrokerB ; broker2 = BrokerA ; doTwoClientsReceiveOneClientDisconnects(); } public void doTwoClientsReceiveOneClientDisconnects() throws Exception { applyRateLimitNetworkFilter(0 8 * MESSAGE COUNT); bridgeBrokers(broker1, broker2); bridgeBrokers(broker2, broker1); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); MessageConsumer client1 = createConsumer(broker1, dest); MessageConsumer client2 = createConsumer(broker2, dest); Thread sleep(500); sendMessages( BrokerA , dest, MESSAGE COUNT); LOG info( Let each client receive 20% of the messages - 40% total ); msgsClient1 += receiveExactMessages(client1, (int)(MESSAGE COUNT * 0 20)); msgsClient2 += receiveExactMessages(client2, (int)(MESSAGE COUNT * 0 20)); client1 close(); LOG info( Let the second client receive the rest of the messages ); msgsClient2 += receiveAllMessages(client2); client2 close(); assertEquals( Client for + broker1 + should have received 20% of the messages , (int)(MESSAGE COUNT * 0 20), msgsClient1); assertEquals( Client for + broker2 + should have received 80% of the messages , (int)(MESSAGE COUNT * 0 80), msgsClient2); } public void testTwoClientsReceiveClientAReconnects() throws Exception { broker1 = BrokerA ; broker2 = BrokerB ; doTwoClientsReceiveOneClientReconnects(); } public void testTwoClientsReceiveClientBReconnects() throws Exception { broker1 = BrokerB ; broker2 = BrokerA ; doTwoClientsReceiveOneClientReconnects(); } public void doTwoClientsReceiveOneClientReconnects() throws Exception { applyRateLimitNetworkFilter(0 2 * MESSAGE COUNT); bridgeBrokers(broker1, broker2); bridgeBrokers(broker2, broker1); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); MessageConsumer client1 = createConsumer(broker1, dest); MessageConsumer client2 = createConsumer(broker2, dest); Thread sleep(500); sendMessages( BrokerA , dest, MESSAGE COUNT); msgsClient1 += receiveExactMessages(client1, (int)(MESSAGE COUNT * 0 20)); msgsClient2 += receiveExactMessages(client2, (int)(MESSAGE COUNT * 0 20)); LOG info( msgsClient1= + msgsClient1); LOG info( msgsClient2= + msgsClient2); Thread sleep(1000); LOG info( Disconnect the first client ); client1 close(); LOG info( Let the second client receive 20% more of the total messages ); msgsClient2 += receiveExactMessages(client2, (int)(MESSAGE COUNT * 0 20)); LOG info( msgsClient2= + msgsClient2); client1 = createConsumer(broker1, dest); Thread sleep(1000); msgsClient1 += receiveExactMessages(client1, (int)(MESSAGE COUNT * 0 20)); client1 close(); LOG info( new consumer addition, msgsClient1= + msgsClient1); Thread sleep(2000); msgsClient2 += receiveExactMessages(client2, (int)(MESSAGE COUNT * 0 20)); client2 close(); LOG info( msgsClient2= + msgsClient2); assertEquals( Client for + broker1 + should have received 40% of the messages , (int)(MESSAGE COUNT * 0 40), msgsClient1); assertEquals( Client for + broker2 + should have received 60% of the messages , (int)(MESSAGE COUNT * 0 60), msgsClient2); } private void applyRateLimitNetworkFilter(double rateLimit) { ConditionalNetworkBridgeFilterFactory filterFactory = new ConditionalNetworkBridgeFilterFactory(); filterFactory setReplayWhenNoConsumers(true); filterFactory setRateLimit((int) rateLimit); filterFactory setRateDuration(1000); Collection<BrokerItem> brokerList = brokers values(); for (Iterator<BrokerItem> i = brokerList iterator(); i hasNext();) { BrokerService broker = i next() broker; broker getDestinationPolicy() getDefaultEntry() setNetworkBridgeFilterFactory(filterFactory); } } public void testTwoClientsReceiveTwoClientReconnects() throws Exception { applyRateLimitNetworkFilter(0 5 * MESSAGE COUNT); broker1 = BrokerA ; broker2 = BrokerB ; bridgeBrokers(broker1, broker2); bridgeBrokers(broker2, broker1); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); MessageConsumer client1 = createConsumer(broker1, dest); MessageConsumer client2 = createConsumer(broker2, dest); Thread sleep(500); sendMessages( BrokerA , dest, MESSAGE COUNT); msgsClient1 += receiveExactMessages(client1, (int)(MESSAGE COUNT * 0 20)); msgsClient2 += receiveExactMessages(client2, (int)(MESSAGE COUNT * 0 20)); LOG info( Disconnect both clients ); client1 close(); client2 close(); LOG info( Serially create another two clients for each broker and consume in turn ); client1 = createConsumer(broker1, dest); msgsClient1 += receiveExactMessages(client1, (int)(MESSAGE COUNT * 0 30)); client1 close(); client2 = createConsumer(broker2, dest); msgsClient2 += receiveExactMessages(client2, (int)(MESSAGE COUNT * 0 30)); client2 close(); assertEquals( Client for + broker1 + should have received 50% of the messages , (int)(MESSAGE COUNT * 0 50), msgsClient1); assertEquals( Client for + broker2 + should have received 50% of the messages , (int)(MESSAGE COUNT * 0 50), msgsClient2); } public void testDuplicateSend() throws Exception { broker1 = BrokerA ; broker2 = BrokerB ; brokers get(broker2) broker getTransportConnectors() get(0) setAuditNetworkProducers(true); bridgeBrokers(broker1, broker2); final AtomicBoolean first = new AtomicBoolean(); final CountDownLatch gotMessageLatch = new CountDownLatch(1); BrokerService brokerService = brokers get(broker2) broker; brokerService setPersistent(true); brokerService setDeleteAllMessagesOnStartup(true); brokerService setPlugins(new BrokerPlugin[]{ new BrokerPluginSupport() { Override public void send(final ProducerBrokerExchange producerExchange, org apache activemq command Message messageSend) throws Exception { super send(producerExchange, messageSend); if (first compareAndSet(false, true)) { producerExchange getConnectionContext() setDontSendReponse(true); Executors newSingleThreadExecutor() execute(new Runnable() { public void run() { try { LOG info( Waiting for recepit ); assertTrue( message received on time , gotMessageLatch await(60, TimeUnit SECONDS)); LOG info( Stopping connection post send and receive and multiple producers ); producerExchange getConnectionContext() getConnection() stop(); } catch (Exception e) { e printStackTrace(); } } }); } } } }); startAllBrokers(); waitForBridgeFormation(); Destination dest = createDestination( TEST FOO , false); MessageConsumer client2 = createConsumer(broker2, dest); sendMessages( BrokerA , dest, 1); assertEquals( Client got message , 1, receiveExactMessages(client2, 1)); client2 close(); gotMessageLatch countDown(); assertEquals( messages message still there , 1, brokers get(broker1) broker getAdminView() getTotalMessageCount()); client2 = createConsumer(broker2, dest); LOG info( Let the second client receive the rest of the messages ); assertEquals( no duplicate message , 0, receiveAllMessages(client2)); assertEquals( no duplicate message , 0, receiveAllMessages(client2)); assertEquals( no messages enqueued , 0, brokers get(broker2) broker getAdminView() getTotalMessageCount()); assertTrue( no messages enqueued on origin , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 0 == brokers get(broker1) broker getAdminView() getTotalMessageCount(); } })); } public void testDuplicateSendWithNoAuditEnqueueCountStat() throws Exception { broker1 = BrokerA ; broker2 = BrokerB ; NetworkConnector networkConnector = bridgeBrokers(broker1, broker2); final AtomicBoolean first = new AtomicBoolean(); final CountDownLatch gotMessageLatch = new CountDownLatch(1); BrokerService brokerService = brokers get(broker2) broker; brokerService setPersistent(true); brokerService setDeleteAllMessagesOnStartup(true); brokerService setPlugins(new BrokerPlugin[]{ new BrokerPluginSupport() { Override public void send(final ProducerBrokerExchange producerExchange, org apache activemq command Message messageSend) throws Exception { super send(producerExchange, messageSend); if (first compareAndSet(false, true)) { producerExchange getConnectionContext() setDontSendReponse(true); Executors newSingleThreadExecutor() execute(new Runnable() { public void run() { try { LOG info( Waiting for recepit ); assertTrue( message received on time , gotMessageLatch await(60, TimeUnit SECONDS)); LOG info( Stopping connection post send and receive and multiple producers ); producerExchange getConnectionContext() getConnection() stop(); } catch (Exception e) { e printStackTrace(); } } }); } } } }); ActiveMQDestination dest = createDestination( TEST FOO , false); networkConnector addStaticallyIncludedDestination(dest); startAllBrokers(); waitForBridgeFormation(); sendMessages( BrokerA , dest, 1); Wait waitFor(new Wait Condition(){ Override public boolean isSatisified() throws Exception { return brokers get(broker2) broker getAdminView() getTotalMessageCount() == 1; } }); assertEquals( messages message still there , 1, brokers get(broker1) broker getAdminView() getTotalMessageCount()); gotMessageLatch countDown(); assertTrue( no messages enqueued on origin , Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return 0 == brokers get(broker1) broker getAdminView() getTotalMessageCount(); } })); assertEquals( one messages pending , 1, brokers get(broker2) broker getAdminView() getTotalMessageCount()); assertEquals( one messages enqueued , 1, brokers get(broker2) broker getDestination(dest) getDestinationStatistics() getEnqueues() getCount()); } protected int receiveExactMessages(MessageConsumer consumer, int msgCount) throws Exception { Message msg; int i; for (i = 0; i < msgCount; i++) { msg = consumer receive(4000); if (msg == null) { LOG error( Consumer failed to receive exactly + msgCount + messages Actual messages received is + i); break; } } return i; } protected int receiveAllMessages(MessageConsumer consumer) throws Exception { int msgsReceived = 0; Message msg; do { msg = consumer receive(1000); if (msg != null) { msgsReceived++; } } while (msg != null); return msgsReceived; } protected MessageConsumer createConsumer(String brokerName, Destination dest) throws Exception { Connection conn = createConnection(brokerName); conn start(); Session sess = conn createSession(false, Session AUTO ACKNOWLEDGE); return sess createConsumer(dest); } protected void configureBroker(BrokerService broker) { PolicyMap policyMap = new PolicyMap(); PolicyEntry defaultEntry = new PolicyEntry(); defaultEntry setEnableAudit(false); policyMap setDefaultEntry(defaultEntry); broker setDestinationPolicy(policyMap); } protected NetworkConnector bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker, boolean dynamicOnly, int networkTTL, boolean conduit, boolean failover) throws Exception { NetworkConnector nc = super bridgeBrokers(localBroker,remoteBroker, dynamicOnly, networkTTL, conduit, failover); nc setPrefetchSize(NETWORK PREFETCH); nc setDecreaseNetworkConsumerPriority(true); return nc; } public void setUp() throws Exception { super setAutoFail(true); super setUp(); createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp ActiveMQConnectionFactory factoryA; ActiveMQConnectionFactory factoryB; factoryA = (ActiveMQConnectionFactory)getConnectionFactory( BrokerA ); factoryB = (ActiveMQConnectionFactory)getConnectionFactory( BrokerB ); ActiveMQPrefetchPolicy policy = new ActiveMQPrefetchPolicy(); policy setAll(PREFETCH COUNT); factoryA setPrefetchPolicy(policy); factoryB setPrefetchPolicy(policy); msgsClient1 = 0; msgsClient2 = 0; } }",1.0,
3450,3450,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TwoBrokerQueueSendReceiveTest.,TwoBrokerQueueSendReceiveTest,"public class TwoBrokerQueueSendReceiveTest extends TwoBrokerTopicSendReceiveTest { private static final Logger LOG = LoggerFactory getLogger(TwoBrokerQueueSendReceiveTest class); protected void setUp() throws Exception { topic = false; super setUp(); } public void testReceiveOnXConsumersNoLeak() throws Exception { consumer close(); sendMessages(); for (int i=0; i<data length; i++) { consumer = createConsumer(); onMessage(consumer receive(10000)); consumer close(); } waitForMessagesToBeDelivered(); assertEquals( Got all messages , data length, messages size()); BrokerService broker = (BrokerService) brokers get( receiver ); final DemandForwardingBridgeSupport bridge = (DemandForwardingBridgeSupport) broker getNetworkConnectors() get(0) activeBridges() toArray()[0]; assertTrue( No extra, size + bridge getLocalSubscriptionMap() size(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { LOG info( local subs map size = + bridge getLocalSubscriptionMap() size()); return 0 == bridge getLocalSubscriptionMap() size(); } })); } }",1.0,
3452,3452,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TwoBrokerTopicSendReceiveLotsOfMessagesUsingTcpTest.,TwoBrokerTopicSendReceiveLotsOfMessagesUsingTcpTest,public class TwoBrokerTopicSendReceiveLotsOfMessagesUsingTcpTest extends TwoBrokerTopicSendReceiveUsingTcpTest { protected void setUp() throws Exception { this messageCount = 5000; super setUp(); } },1.0,
3456,3456,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TwoBrokerVirtualDestDinamicallyIncludedDestTest.,TwoBrokerVirtualDestDinamicallyIncludedDestTest,"public class TwoBrokerVirtualDestDinamicallyIncludedDestTest extends JmsMultipleBrokersTestSupport { protected static final int MESSAGE COUNT = 10; boolean dynamicOnly = true; int networkTTL = 1; boolean conduit = true; boolean suppressDuplicateQueueSubscriptions = true; boolean decreaseNetworkConsumerPriority = true; public void testTopicDinamicallyIncludedBehavior() throws Exception { startAllBrokers(); Destination dest = createDestination( test , true); MessageConsumer clientA = createConsumer( BrokerA , dest); MessageConsumer clientB = createConsumer( BrokerB , dest); Thread sleep(2*1000); sendMessages( BrokerA , dest, MESSAGE COUNT); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); msgsA waitForMessagesToArrive(MESSAGE COUNT); assertEquals(MESSAGE COUNT, msgsA getMessageCount()); MessageIdList msgsB = getConsumerMessages( BrokerB , clientB); msgsB waitForMessagesToArrive(MESSAGE COUNT); assertEquals(0, msgsB getMessageCount()); } public void testVirtualDestinationsDinamicallyIncludedBehavior1() throws Exception { startAllBrokers(); Destination dest = createDestination( global test , true); MessageConsumer clientB1 = createConsumer( BrokerB , dest); MessageConsumer clientB2 = createConsumer( BrokerB , createDestination( Consumer foo-bar global test , false)); Thread sleep(2*1000); int messageCount = MESSAGE COUNT; sendMessages( BrokerA , dest, messageCount); MessageIdList msgsB1 = getConsumerMessages( BrokerB , clientB1); msgsB1 waitForMessagesToArrive(messageCount); assertEquals(messageCount, msgsB1 getMessageCount()); MessageIdList msgsB2 = getConsumerMessages( BrokerB , clientB2); msgsB2 waitForMessagesToArrive(messageCount); assertEquals(messageCount, msgsB2 getMessageCount()); } public void testVirtualDestinationsDinamicallyIncludedBehavior2() throws Exception { startAllBrokers(); Destination dest = createDestination( global test , true); MessageConsumer clientB2 = createConsumer( BrokerB , createDestination( Consumer foo-bar global test , false)); Thread sleep(2*1000); sendMessages( BrokerA , dest, MESSAGE COUNT); MessageIdList msgsB2 = getConsumerMessages( BrokerB , clientB2); msgsB2 waitForMessagesToArrive(MESSAGE COUNT); assertEquals(MESSAGE COUNT, msgsB2 getMessageCount()); } public void testVirtualDestinationsDinamicallyIncludedBehavior3() throws Exception { final String topic = global test ; final String vq = Consumer foo + topic; startAllBrokers(); final int msgs1 = 1001; final int msgs2 = 1456; Destination tDest = createDestination(topic, true); Destination vqDest = createDestination(vq, false); MessageConsumer clientB1t = createConsumer( BrokerA , tDest); MessageConsumer clientB2t = createConsumer( BrokerB , tDest); MessageConsumer clientB1vq = createConsumer( BrokerA , vqDest); Thread sleep(2*1000); sendMessages( BrokerA , tDest, msgs1); sendMessages( BrokerB , tDest, msgs2); Thread sleep(5000); MessageIdList msgsB1t = getConsumerMessages( BrokerA , clientB1t); msgsB1t waitForMessagesToArrive(msgs1 + msgs2); assertEquals(msgs1 + msgs2, msgsB1t getMessageCount()); MessageIdList msgsB2t = getConsumerMessages( BrokerB , clientB2t); msgsB2t waitForMessagesToArrive(msgs1 + msgs2); assertEquals(msgs1 + msgs2, msgsB2t getMessageCount()); MessageIdList msgsB1vq = getConsumerMessages( BrokerA , clientB1vq); msgsB1vq waitForMessagesToArrive(msgs1 + msgs2); assertEquals(msgs1 + msgs2, msgsB1vq getMessageCount()); assertEquals(0, getQueueSize( BrokerA , (ActiveMQDestination)vqDest)); assertEquals(0, getQueueSize( BrokerB , (ActiveMQDestination)vqDest)); destroyAllBrokers(); } public long getQueueSize(String broker, ActiveMQDestination destination) throws Exception { BrokerItem bi = brokers get(broker); return bi broker getDestination(destination) getDestinationStatistics() getMessages() getCount(); } public void setUp() throws Exception { super setAutoFail(true); super setUp(); String options = new String( useJmx=false&deleteAllMessagesOnStartup=true ); createAndConfigureBroker(new URI( broker (tcp createAndConfigureBroker(new URI( broker (tcp NetworkConnector nc1 = bridgeBrokers( BrokerA , BrokerB , dynamicOnly, networkTTL, conduit); nc1 setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority); nc1 setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions); nc1 addStaticallyIncludedDestination(ActiveMQDestination createDestination( global > , ActiveMQDestination TOPIC TYPE)); nc1 addDynamicallyIncludedDestination(ActiveMQDestination createDestination( global > , ActiveMQDestination QUEUE TYPE)); nc1 addDynamicallyIncludedDestination(ActiveMQDestination createDestination( global > , ActiveMQDestination TOPIC TYPE)); nc1 addDynamicallyIncludedDestination(ActiveMQDestination createDestination( Consumer * global > , ActiveMQDestination QUEUE TYPE)); NetworkConnector nc2 = bridgeBrokers( BrokerB , BrokerA , dynamicOnly, networkTTL, conduit); nc2 setDecreaseNetworkConsumerPriority(decreaseNetworkConsumerPriority); nc2 setSuppressDuplicateQueueSubscriptions(suppressDuplicateQueueSubscriptions); nc2 addStaticallyIncludedDestination(ActiveMQDestination createDestination( global > , ActiveMQDestination TOPIC TYPE)); nc2 addDynamicallyIncludedDestination(ActiveMQDestination createDestination( global > , ActiveMQDestination QUEUE TYPE)); nc2 addDynamicallyIncludedDestination(ActiveMQDestination createDestination( global > , ActiveMQDestination TOPIC TYPE)); nc2 addDynamicallyIncludedDestination(ActiveMQDestination createDestination( Consumer * global > , ActiveMQDestination QUEUE TYPE)); } private BrokerService createAndConfigureBroker(URI uri) throws Exception { BrokerService broker = createBroker(uri); configurePersistenceAdapter(broker); VirtualDestinationInterceptor virtualDestinationInterceptor = new VirtualDestinationInterceptor(); VirtualTopic vTopic = new VirtualTopic(); vTopic setLocal(true); virtualDestinationInterceptor setVirtualDestinations(new VirtualDestination[]{vTopic}); DestinationInterceptor[] destinationInterceptors = new DestinationInterceptor[]{virtualDestinationInterceptor}; broker setDestinationInterceptors(destinationInterceptors); return broker; } protected void configurePersistenceAdapter(BrokerService broker) throws IOException { File dataFileDir = new File( target/test-amq-data/kahadb/ + broker getBrokerName()); KahaDBStore kaha = new KahaDBStore(); kaha setDirectory(dataFileDir); kaha deleteAllMessages(); broker setPersistenceAdapter(kaha); } }",1.0,
3461,3461,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\util\ConsumerThread.,ConsumerThread,"public class ConsumerThread extends Thread { private static final Logger LOG = LoggerFactory getLogger(ConsumerThread class); int messageCount = 1000; int received = 0; Destination dest; Session sess; boolean breakOnNull = true; public ConsumerThread(Session sess, Destination dest) { this dest = dest; this sess = sess; } Override public void run() { MessageConsumer consumer = null; try { consumer = sess createConsumer(dest); while (received < messageCount) { Message msg = consumer receive(3000); if (msg != null) { LOG info( Received + ((TextMessage)msg) getText()); received++; } else { if (breakOnNull) { break; } } } } catch (JMSException e) { e printStackTrace(); } finally { if (consumer != null) { try { consumer close(); } catch (JMSException e) { e printStackTrace(); } } } } public int getReceived() { return received; } public void setMessageCount(int messageCount) { this messageCount = messageCount; } public void setBreakOnNull(boolean breakOnNull) { this breakOnNull = breakOnNull; } }",1.0,
3462,3462,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\util\DefaultTestAppender.,DefaultTestAppender,public abstract class DefaultTestAppender implements Appender { String name = this getClass() getSimpleName(); Override public void addFilter(Filter newFilter) { } Override public Filter getFilter() { return null; } Override public void clearFilters() { } Override public void close() { } Override public String getName() { return name; } Override public void setErrorHandler(ErrorHandler errorHandler) { } Override public ErrorHandler getErrorHandler() { return null; } Override public void setLayout(Layout layout) { } Override public Layout getLayout() { return null; } Override public void setName(String name) { this name = name; } Override public boolean requiresLayout() { return false; } },1.0,
3463,3463,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\util\LinkedNodeTest.,LinkedNodeTest,public class LinkedNodeTest extends TestCase { static class IntLinkedNode extends LinkedNode { public final int v; public IntLinkedNode(int v) { this v = v; }; Override public String toString() { return + v; } } IntLinkedNode i1 = new IntLinkedNode(1); IntLinkedNode i2 = new IntLinkedNode(2); IntLinkedNode i3 = new IntLinkedNode(3); IntLinkedNode i4 = new IntLinkedNode(4); IntLinkedNode i5 = new IntLinkedNode(5); IntLinkedNode i6 = new IntLinkedNode(6); public void testLinkAfter() { i1 linkAfter(i2 linkAfter(i3)); assertTrue(i1 getNext() == i2); assertTrue(i1 getNext() getNext() == i3); assertNull(i1 getNext() getNext() getNext()); assertTrue(i3 getPrevious() == i2); assertTrue(i3 getPrevious() getPrevious() == i1); assertNull(i3 getPrevious() getPrevious() getPrevious()); assertTrue(i1 isHeadNode()); assertFalse(i1 isTailNode()); assertFalse(i2 isHeadNode()); assertFalse(i2 isTailNode()); assertTrue(i3 isTailNode()); assertFalse(i3 isHeadNode()); i1 linkAfter(i4 linkAfter(i5)); assertTrue(i1 getNext() == i4); assertTrue(i1 getNext() getNext() == i5); assertTrue(i1 getNext() getNext() getNext() == i2); assertTrue(i1 getNext() getNext() getNext() getNext() == i3); assertNull(i1 getNext() getNext() getNext() getNext() getNext()); assertTrue(i3 getPrevious() == i2); assertTrue(i3 getPrevious() getPrevious() == i5); assertTrue(i3 getPrevious() getPrevious() getPrevious() == i4); assertTrue(i3 getPrevious() getPrevious() getPrevious() getPrevious() == i1); assertNull(i3 getPrevious() getPrevious() getPrevious() getPrevious() getPrevious()); assertTrue(i1 isHeadNode()); assertFalse(i1 isTailNode()); assertFalse(i4 isHeadNode()); assertFalse(i4 isTailNode()); assertFalse(i5 isHeadNode()); assertFalse(i5 isTailNode()); assertFalse(i2 isHeadNode()); assertFalse(i2 isTailNode()); assertTrue(i3 isTailNode()); assertFalse(i3 isHeadNode()); } public void testLinkBefore() { i3 linkBefore(i2 linkBefore(i1)); assertTrue(i1 getNext() == i2); assertTrue(i1 getNext() getNext() == i3); assertNull(i1 getNext() getNext() getNext()); assertTrue(i3 getPrevious() == i2); assertTrue(i3 getPrevious() getPrevious() == i1); assertNull(i3 getPrevious() getPrevious() getPrevious()); assertTrue(i1 isHeadNode()); assertFalse(i1 isTailNode()); assertFalse(i2 isHeadNode()); assertFalse(i2 isTailNode()); assertTrue(i3 isTailNode()); assertFalse(i3 isHeadNode()); i2 linkBefore(i5 linkBefore(i4)); assertTrue(i1 getNext() == i4); assertTrue(i1 getNext() getNext() == i5); assertTrue(i1 getNext() getNext() getNext() == i2); assertTrue(i1 getNext() getNext() getNext() getNext() == i3); assertNull(i1 getNext() getNext() getNext() getNext() getNext()); assertTrue(i3 getPrevious() == i2); assertTrue(i3 getPrevious() getPrevious() == i5); assertTrue(i3 getPrevious() getPrevious() getPrevious() == i4); assertTrue(i3 getPrevious() getPrevious() getPrevious() getPrevious() == i1); assertNull(i3 getPrevious() getPrevious() getPrevious() getPrevious() getPrevious()); assertTrue(i1 isHeadNode()); assertFalse(i1 isTailNode()); assertFalse(i4 isHeadNode()); assertFalse(i4 isTailNode()); assertFalse(i5 isHeadNode()); assertFalse(i5 isTailNode()); assertFalse(i2 isHeadNode()); assertFalse(i2 isTailNode()); assertTrue(i3 isTailNode()); assertFalse(i3 isHeadNode()); } public void testUnlink() { i1 linkAfter(i2 linkAfter(i3)); i3 linkAfter(i4); i1 linkBefore(i5); i1 linkAfter(i6); i4 unlink(); i5 unlink(); i6 unlink(); assertTrue(i1 getNext() == i2); assertTrue(i1 getNext() getNext() == i3); assertNull(i1 getNext() getNext() getNext()); assertTrue(i3 getPrevious() == i2); assertTrue(i3 getPrevious() getPrevious() == i1); assertNull(i3 getPrevious() getPrevious() getPrevious()); assertTrue(i1 isHeadNode()); assertFalse(i1 isTailNode()); assertFalse(i2 isHeadNode()); assertFalse(i2 isTailNode()); assertTrue(i3 isTailNode()); assertFalse(i3 isHeadNode()); } },1.0,
3464,3464,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\util\LinkedNodeTest.,IntLinkedNode,static class IntLinkedNode extends LinkedNode { public final int v; public IntLinkedNode(int v) { this v = v; }; Override public String toString() { return + v; } },1.0,
3466,3466,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\util\ProducerThread.,ProducerThread,"public class ProducerThread extends Thread { private static final Logger LOG = LoggerFactory getLogger(ProducerThread class); int messageCount = 1000; Destination dest; protected Session sess; int sleep = 0; int sentCount = 0; public ProducerThread(Session sess, Destination dest) { this dest = dest; this sess = sess; } public void run() { MessageProducer producer = null; try { producer = sess createProducer(dest); for (sentCount = 0; sentCount < messageCount; sentCount++) { producer send(createMessage(sentCount)); LOG info( Sent test message + sentCount + ); if (sleep > 0) { Thread sleep(sleep); } } } catch (Exception e) { e printStackTrace(); } finally { if (producer != null) { try { producer close(); } catch (JMSException e) { e printStackTrace(); } } } } protected Message createMessage(int i) throws Exception { return sess createTextMessage( test message + i); } public void setMessageCount(int messageCount) { this messageCount = messageCount; } public void setSleep(int sleep) { this sleep = sleep; } public int getMessageCount() { return messageCount; } public int getSentCount() { return sentCount; } }",1.0,
3467,3467,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\util\ReflectionSupportTest.,ReflectionSupportTest,"public class ReflectionSupportTest extends TestCase { List<ActiveMQDestination> favorites = new ArrayList<ActiveMQDestination>(); String favoritesString = [queue List<ActiveMQDestination> nonFavorites = new ArrayList<ActiveMQDestination>(); String nonFavoritesString = [topic public void setUp() { favorites add(new ActiveMQQueue( test )); favorites add(new ActiveMQTopic( test )); nonFavorites add(new ActiveMQTopic( test1 )); } public void testSetProperties() throws URISyntaxException { SimplePojo pojo = new SimplePojo(); HashMap<String, String> map = new HashMap<String, String>(); map put( age , 27 ); map put( name , Hiram ); map put( enabled , true ); map put( uri , test map put( favorites , favoritesString); map put( nonFavorites , nonFavoritesString); map put( others , null); map put( systems , windows,mac ); IntrospectionSupport setProperties(pojo, map); assertEquals(27, pojo getAge()); assertEquals( Hiram , pojo getName()); assertEquals(true, pojo isEnabled()); assertEquals(new URI( test assertEquals(favorites, pojo getFavorites()); assertEquals(nonFavorites, pojo getNonFavorites()); assertNull(pojo getOthers()); assertEquals( windows , pojo getSystems()[0]); assertEquals( mac , pojo getSystems()[1]); } public void testGetProperties() { SimplePojo pojo = new SimplePojo(); pojo setAge(31); pojo setName( Dejan ); pojo setEnabled(true); pojo setFavorites(favorites); pojo setNonFavorites(nonFavorites); pojo setOthers(null); pojo setSystems(new String[]{ windows , mac }); Properties props = new Properties(); IntrospectionSupport getProperties(pojo, props, null); assertEquals( Dejan , props get( name )); assertEquals( 31 , props get( age )); assertEquals( true , props get( enabled )); assertEquals(favoritesString, props get( favorites )); assertEquals(nonFavoritesString, props get( nonFavorites )); assertNull(props get( others )); assertEquals( windows,mac , props get( systems )); } public void testSetBoolean() { TestWitBoolean target = new TestWitBoolean(); assertTrue(!target getKeepAlive()); IntrospectionSupport setProperty(target, keepAlive , TRUE ); assertTrue(target getKeepAlive()); IntrospectionSupport setProperty(target, keepAlive , false ); assertTrue(!target getKeepAlive()); } public static class TestWitBoolean { private Boolean keepAlive = new Boolean(false); public Boolean getKeepAlive() { return keepAlive; } public void setKeepAlive(Boolean keepAlive) { this keepAlive = keepAlive; } } }",1.0,
3469,3469,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\util\SimplePojo.,SimplePojo,public class SimplePojo { String name; int age; boolean enabled; URI uri; List<ActiveMQDestination> favorites = new ArrayList<ActiveMQDestination>(); List<ActiveMQDestination> nonFavorites = new ArrayList<ActiveMQDestination>(); List<ActiveMQDestination> others = new ArrayList<ActiveMQDestination>(); String[] systems; public int getAge() { return age; } public void setAge(int age) { this age = age; } public boolean isEnabled() { return enabled; } public void setEnabled(boolean enabled) { this enabled = enabled; } public String getName() { return name; } public void setName(String name) { this name = name; } public URI getUri() { return uri; } public void setUri(URI uri) { this uri = uri; } public List<ActiveMQDestination> getFavorites() { return favorites; } public void setFavorites(List<ActiveMQDestination> favorites) { this favorites = favorites; } public List<ActiveMQDestination> getNonFavorites() { return nonFavorites; } public void setNonFavorites(List<ActiveMQDestination> nonFavorites) { this nonFavorites = nonFavorites; } public List<ActiveMQDestination> getOthers() { return others; } public void setOthers(List<ActiveMQDestination> others) { this others = others; } public String[] getSystems() { return systems; } public void setSystems(String[] systems) { this systems = systems; } },1.0,
3471,3471,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\JDBCPersistenceAdapterXBeanConfigTest.,JDBCPersistenceAdapterXBeanConfigTest,"public class JDBCPersistenceAdapterXBeanConfigTest extends TestCase { protected BrokerService brokerService; public void testConfiguredCorrectly() throws Exception { PersistenceAdapter persistenceAdapter = brokerService getPersistenceAdapter(); assertNotNull(persistenceAdapter); assertTrue(persistenceAdapter instanceof JDBCPersistenceAdapter); JDBCPersistenceAdapter jpa = (JDBCPersistenceAdapter)persistenceAdapter; assertEquals( BROKER1 , jpa getStatements() getTablePrefix()); } protected void setUp() throws Exception { brokerService = createBroker(); brokerService start(); } protected void tearDown() throws Exception { if (brokerService != null) { brokerService stop(); } } protected BrokerService createBroker() throws Exception { String uri = org/apache/activemq/xbean/jdbc-persistence-adapter-test xml ; return BrokerFactory createBroker(new URI( xbean + uri)); } }",1.0,
3472,3472,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\JDBCPersistenceXBeanConfigTest.,JDBCPersistenceXBeanConfigTest,"public class JDBCPersistenceXBeanConfigTest extends TestCase { protected BrokerService brokerService; public void testConfiguredCorrectly() throws Exception { PersistenceAdapter persistenceAdapter = brokerService getPersistenceAdapter(); assertNotNull(persistenceAdapter); assertTrue(persistenceAdapter instanceof JDBCPersistenceAdapter); JDBCPersistenceAdapter jpa = (JDBCPersistenceAdapter)persistenceAdapter; assertEquals( BROKER1 , jpa getStatements() getTablePrefix()); } protected void setUp() throws Exception { brokerService = createBroker(); brokerService start(); } protected void tearDown() throws Exception { if (brokerService != null) { brokerService stop(); } } protected BrokerService createBroker() throws Exception { String uri = org/apache/activemq/xbean/jdbc-persistence-test xml ; return BrokerFactory createBroker(new URI( xbean + uri)); } }",1.0,
3474,3474,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\MultipleTestsWithEmbeddedBrokerAndPersistenceTest.,MultipleTestsWithEmbeddedBrokerAndPersistenceTest,public class MultipleTestsWithEmbeddedBrokerAndPersistenceTest extends MultipleTestsWithEmbeddedBrokerTest { protected boolean isPersistent() { return true; } },1.0,
3475,3475,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\MultipleTestsWithEmbeddedBrokerTest.,MultipleTestsWithEmbeddedBrokerTest,public class MultipleTestsWithEmbeddedBrokerTest extends EmbeddedBrokerTestSupport { private static final Logger LOG = LoggerFactory getLogger(MultipleTestsWithEmbeddedBrokerTest class); protected Connection connection; public void test1() throws Exception { } public void test2() throws Exception { } protected void setUp() throws Exception { LOG info( starting up the test case + getName()); super setUp(); connection = connectionFactory createConnection(); connection start(); LOG info( started up the test case + getName()); } protected void tearDown() throws Exception { connection close(); super tearDown(); LOG info( closed down the test case + getName()); } },1.0,
3477,3477,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\MultipleTestsWithSpringXBeanFactoryBeanTest.,MultipleTestsWithSpringXBeanFactoryBeanTest,public class MultipleTestsWithSpringXBeanFactoryBeanTest extends MultipleTestsWithEmbeddedBrokerTest { private ClassPathXmlApplicationContext context; protected BrokerService createBroker() throws Exception { context = new ClassPathXmlApplicationContext( org/apache/activemq/xbean/spring2 xml ); return (BrokerService) context getBean( broker ); } protected void tearDown() throws Exception { super tearDown(); if (context != null) { context destroy(); } } },1.0,
3478,3478,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\MultipleTestsWithXBeanFactoryBeanTest.,MultipleTestsWithXBeanFactoryBeanTest,public class MultipleTestsWithXBeanFactoryBeanTest extends MultipleTestsWithEmbeddedBrokerTest { protected BrokerService createBroker() throws Exception { BrokerFactoryBean factory = new BrokerFactoryBean(); factory setConfig(new ClassPathResource( org/apache/activemq/xbean/activemq2 xml )); factory afterPropertiesSet(); return factory getBroker(); } },1.0,
3479,3479,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\XBeanConfigTest.,XBeanConfigTest,"public class XBeanConfigTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(XBeanConfigTest class); protected BrokerService brokerService; protected Broker broker; protected ConnectionContext context; protected ConnectionInfo info; public void testBrokerConfiguredCorrectly() throws Exception { assertEquals( testbroker , brokerService getBrokerName()); Topic topic = (Topic)broker addDestination(context, new ActiveMQTopic( FOO BAR ),true); DispatchPolicy dispatchPolicy = topic getDispatchPolicy(); assertTrue( dispatchPolicy should be RoundRobinDispatchPolicy + dispatchPolicy, dispatchPolicy instanceof RoundRobinDispatchPolicy); SubscriptionRecoveryPolicy subscriptionRecoveryPolicy = topic getSubscriptionRecoveryPolicy(); assertTrue( subscriptionRecoveryPolicy should be LastImageSubscriptionRecoveryPolicy + subscriptionRecoveryPolicy, subscriptionRecoveryPolicy instanceof LastImageSubscriptionRecoveryPolicy); LOG info( destination + topic); LOG info( dispatchPolicy + dispatchPolicy); LOG info( subscriptionRecoveryPolicy + subscriptionRecoveryPolicy); topic = (Topic)broker addDestination(context, new ActiveMQTopic( ORDERS BOOKS ),true); dispatchPolicy = topic getDispatchPolicy(); assertTrue( dispatchPolicy should be StrictOrderDispatchPolicy + dispatchPolicy, dispatchPolicy instanceof StrictOrderDispatchPolicy); subscriptionRecoveryPolicy = topic getSubscriptionRecoveryPolicy(); assertTrue( subscriptionRecoveryPolicy should be TimedSubscriptionRecoveryPolicy + subscriptionRecoveryPolicy, subscriptionRecoveryPolicy instanceof TimedSubscriptionRecoveryPolicy); TimedSubscriptionRecoveryPolicy timedSubcriptionPolicy = (TimedSubscriptionRecoveryPolicy)subscriptionRecoveryPolicy; assertEquals( getRecoverDuration() , 60000, timedSubcriptionPolicy getRecoverDuration()); LOG info( destination + topic); LOG info( dispatchPolicy + dispatchPolicy); LOG info( subscriptionRecoveryPolicy + subscriptionRecoveryPolicy); } Override protected void setUp() throws Exception { System setProperty( brokername , testbroker ); brokerService = createBroker(); broker = brokerService getBroker(); context = new ConnectionContext(); context setBroker(broker); info = new ConnectionInfo(); info setClientId( James ); info setUserName( James ); info setConnectionId(new ConnectionId( 1234 )); try { broker addConnection(context, info); } catch (Throwable e) { e printStackTrace(); fail(e getMessage()); } assertNotNull( No broker created! ); } Override protected void tearDown() throws Exception { if (brokerService != null) { brokerService stop(); } } protected BrokerService createBroker() throws Exception { String uri = org/apache/activemq/xbean/activemq-policy xml ; LOG info( Loading broker configuration from the classpath with URI + uri); return BrokerFactory createBroker(new URI( xbean + uri)); } }",1.0,
3480,3480,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\XBeanStartFalseTest.,XBeanStartFalseTest,"public class XBeanStartFalseTest extends TestCase { public void testStartFalse() throws Exception { BrokerService broker = BrokerFactory createBroker(new URI( xbean org/apache/activemq/xbean/activemq2 xml )); assertFalse( Broker is started , broker isStarted()); } }",1.0,
3481,3481,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\XBeanXmlTest.,XBeanXmlTest,public class XBeanXmlTest extends SpringTest { public void testSenderWithSpringXml() throws Exception { assertSenderConfig( org/apache/activemq/xbean/spring xml ); } },1.0,
3482,3482,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\AjaxListener.,AjaxListener,"public class AjaxListener implements MessageAvailableListener { private static final Logger LOG = LoggerFactory getLogger(AjaxListener class); private long maximumReadTimeout; private AjaxWebClient client; private long lastAccess; private Continuation continuation; private LinkedList<UndeliveredAjaxMessage> undeliveredMessages = new LinkedList<UndeliveredAjaxMessage>(); AjaxListener(AjaxWebClient client, long maximumReadTimeout) { this client = client; this maximumReadTimeout = maximumReadTimeout; access(); } public void access() { lastAccess = System currentTimeMillis(); } public synchronized void setContinuation(Continuation continuation) { this continuation = continuation; } public LinkedList<UndeliveredAjaxMessage> getUndeliveredMessages() { return undeliveredMessages; } public synchronized void onMessageAvailable(MessageConsumer consumer) { if (LOG isDebugEnabled()) { LOG debug( message for + consumer + continuation= + continuation); } if (continuation != null) { try { Message message = consumer receive(10); LOG debug( message is + message ); if( message != null ) { if( continuation isSuspended() ) { LOG debug( Resuming suspended continuation + continuation ); continuation setAttribute( undelivered message , new UndeliveredAjaxMessage( message, consumer ) ); continuation resume(); } else { LOG debug( Message available, but continuation is already resumed Buffer for next time ); bufferMessageForDelivery( message, consumer ); } } } catch (Exception e) { LOG error( Error receiving message + e, e); } } else if (System currentTimeMillis() - lastAccess > 2 * this maximumReadTimeout) { new Thread() { public void run() { client closeConsumers(); }; } start(); } else { try { Message message = consumer receive(10); bufferMessageForDelivery( message, consumer ); } catch (Exception e) { LOG error( Error receiving message + e, e); } } } public void bufferMessageForDelivery( Message message, MessageConsumer consumer ) { if( message != null ) { synchronized( undeliveredMessages ) { undeliveredMessages addLast( new UndeliveredAjaxMessage( message, consumer ) ); } } } }",1.0,
3483,3483,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\AjaxServlet.,AjaxServlet,"public class AjaxServlet extends MessageListenerServlet { private static final long serialVersionUID = -3875280764356406114L; private Map<String, byte[]> jsCache = new HashMap<String, byte[]>(); private long jsLastModified = 1000 * (System currentTimeMillis() / 1000); protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { if (request getPathInfo() != null && request getPathInfo() endsWith( js )) { doJavaScript(request, response); } else { super doGet(request, response); } } protected void doJavaScript(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException { String js = request getServletPath() + request getPathInfo(); URL url = getServletContext() getResource(js); if (url != null) { getServletContext() getNamedDispatcher( default ) forward(request, response); return; } String resource = org/apache/activemq/web + request getPathInfo(); synchronized (jsCache) { byte[] data = jsCache get(resource); if (data == null) { InputStream in = Thread currentThread() getContextClassLoader() getResourceAsStream(resource); if (in != null) { ByteArrayOutputStream out = new ByteArrayOutputStream(); byte[] buf = new byte[4096]; int len = in read(buf); while (len >= 0) { out write(buf, 0, len); len = in read(buf); } in close(); out close(); data = out toByteArray(); jsCache put(resource, data); } } if (data != null) { long ifModified = request getDateHeader( If-Modified-Since ); if (ifModified == jsLastModified) { response sendError(HttpServletResponse SC NOT MODIFIED); } else { response setContentType( application/x-javascript ); response setContentLength(data length); response setDateHeader( Last-Modified , jsLastModified); response getOutputStream() write(data); } } else { response sendError(HttpServletResponse SC NOT FOUND); } } } }",1.0,
3484,3484,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\AjaxWebClient.,AjaxWebClient,"public class AjaxWebClient extends WebClient { private static final Logger LOG = LoggerFactory getLogger(AjaxWebClient class); final long expireAfter = 60 * 1000; Map<MessageAvailableConsumer, String> idMap; Map<MessageAvailableConsumer, String> destinationNameMap; AjaxListener listener; Long lastAccessed; public AjaxWebClient( HttpServletRequest request, long maximumReadTimeout ) { this idMap = new HashMap<MessageAvailableConsumer, String>(); this destinationNameMap = new HashMap<MessageAvailableConsumer, String>(); this listener = new AjaxListener( this, maximumReadTimeout ); this lastAccessed = this getNow(); } public Map<MessageAvailableConsumer, String> getIdMap() { return this idMap; } public Map<MessageAvailableConsumer, String> getDestinationNameMap() { return this destinationNameMap; } public AjaxListener getListener() { return this listener; } public long getMillisSinceLastAccessed() { return this getNow() - this lastAccessed; } public void updateLastAccessed() { this lastAccessed = this getNow(); } public boolean closeIfExpired() { long now = (new Date()) getTime(); boolean returnVal = false; if( this getMillisSinceLastAccessed() > this expireAfter ) { this close(); returnVal = true; } return returnVal; } protected long getNow() { return (new Date()) getTime(); } }",1.0,
3486,3486,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\BrokerFacadeSupport.,BrokerFacadeSupport,"public abstract class BrokerFacadeSupport implements BrokerFacade { public abstract ManagementContext getManagementContext(); public abstract Set queryNames(ObjectName name, QueryExp query) throws Exception; public abstract Object newProxyInstance( ObjectName objectName, Class interfaceClass, boolean notificationBroadcaster) throws Exception; public Collection<QueueViewMBean> getQueues() throws Exception { BrokerViewMBean broker = getBrokerAdmin(); if (broker == null) { return Collections EMPTY LIST; } ObjectName[] queues = broker getQueues(); return getManagedObjects(queues, QueueViewMBean class); } public Collection<TopicViewMBean> getTopics() throws Exception { BrokerViewMBean broker = getBrokerAdmin(); if (broker == null) { return Collections EMPTY LIST; } ObjectName[] queues = broker getTopics(); return getManagedObjects(queues, TopicViewMBean class); } public Collection<DurableSubscriptionViewMBean> getDurableTopicSubscribers() throws Exception { BrokerViewMBean broker = getBrokerAdmin(); if (broker == null) { return Collections EMPTY LIST; } ObjectName[] queues = broker getDurableTopicSubscribers(); return getManagedObjects(queues, DurableSubscriptionViewMBean class); } public Collection<DurableSubscriptionViewMBean> getInactiveDurableTopicSubscribers() throws Exception { BrokerViewMBean broker = getBrokerAdmin(); if (broker == null) { return Collections EMPTY LIST; } ObjectName[] queues = broker getInactiveDurableTopicSubscribers(); return getManagedObjects(queues, DurableSubscriptionViewMBean class); } public QueueViewMBean getQueue(String name) throws Exception { return (QueueViewMBean) getDestinationByName(getQueues(), name); } public TopicViewMBean getTopic(String name) throws Exception { return (TopicViewMBean) getDestinationByName(getTopics(), name); } protected DestinationViewMBean getDestinationByName(Collection< extends DestinationViewMBean> collection, String name) { Iterator< extends DestinationViewMBean> iter = collection iterator(); while (iter hasNext()) { DestinationViewMBean destinationViewMBean = iter next(); if (name equals(destinationViewMBean getName())) { return destinationViewMBean; } } return null; } SuppressWarnings( unchecked ) protected <T> Collection<T> getManagedObjects(ObjectName[] names, Class<T> type) throws Exception { List<T> answer = new ArrayList<T>(); for (int i = 0; i < names length; i++) { ObjectName name = names[i]; T value = (T) newProxyInstance(name, type, true); if (value != null) { answer add(value); } } return answer; } SuppressWarnings( unchecked ) public Collection<ConnectionViewMBean> getConnections() throws Exception { String brokerName = getBrokerName(); ObjectName query = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,connector=clientConnectors,connectorName=*,connectionName=* ); Set<ObjectName> queryResult = queryNames(query, null); return getManagedObjects(queryResult toArray(new ObjectName[queryResult size()]), ConnectionViewMBean class); } SuppressWarnings( unchecked ) public Collection<String> getConnections(String connectorName) throws Exception { String brokerName = getBrokerName(); ObjectName query = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,connector=clientConnectors,connectorName= + connectorName + ,connectionName=* ); Set<ObjectName> queryResult = queryNames(query, null); Collection<String> result = new ArrayList<String>(queryResult size()); for (ObjectName on queryResult) { String name = StringUtils replace(on getKeyProperty( connectionName ), , ); result add(name); } return result; } SuppressWarnings( unchecked ) public ConnectionViewMBean getConnection(String connectionName) throws Exception { connectionName = StringUtils replace(connectionName, , ); String brokerName = getBrokerName(); ObjectName query = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,connector=clientConnectors,*,connectionName= + connectionName); Set<ObjectName> queryResult = queryNames(query, null); if (queryResult size() == 0) return null; ObjectName objectName = queryResult iterator() next(); return (ConnectionViewMBean) newProxyInstance(objectName, ConnectionViewMBean class, true); } SuppressWarnings( unchecked ) public Collection<String> getConnectors() throws Exception { String brokerName = getBrokerName(); ObjectName query = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,connector=clientConnectors,connectorName=* ); Set<ObjectName> queryResult = queryNames(query, null); Collection<String> result = new ArrayList<String>(queryResult size()); for (ObjectName on queryResult) result add(on getKeyProperty( connectorName )); return result; } public ConnectorViewMBean getConnector(String name) throws Exception { String brokerName = getBrokerName(); ObjectName objectName = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,connector=clientConnectors,connectorName= + name); return (ConnectorViewMBean) newProxyInstance(objectName, ConnectorViewMBean class, true); } SuppressWarnings( unchecked ) public Collection<NetworkConnectorViewMBean> getNetworkConnectors() throws Exception { String brokerName = getBrokerName(); ObjectName query = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,connector=networkConnectors,networkConnectorName=* ); Set<ObjectName> queryResult = queryNames(query, null); return getManagedObjects(queryResult toArray(new ObjectName[queryResult size()]), NetworkConnectorViewMBean class); } public Collection<NetworkBridgeViewMBean> getNetworkBridges() throws Exception { String brokerName = getBrokerName(); ObjectName query = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,connector=networkConnectors,networkConnectorName=*,networkBridge=* ); Set<ObjectName> queryResult = queryNames(query, null); return getManagedObjects(queryResult toArray(new ObjectName[queryResult size()]), NetworkBridgeViewMBean class); } SuppressWarnings( unchecked ) public Collection<SubscriptionViewMBean> getQueueConsumers(String queueName) throws Exception { String brokerName = getBrokerName(); queueName = StringUtils replace(queueName, , ); ObjectName query = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,destinationType=Queue,destinationName= + queueName + ,endpoint=Consumer,* ); Set<ObjectName> queryResult = queryNames(query, null); return getManagedObjects(queryResult toArray(new ObjectName[queryResult size()]), SubscriptionViewMBean class); } SuppressWarnings( unchecked ) public Collection<SubscriptionViewMBean> getConsumersOnConnection(String connectionName) throws Exception { connectionName = StringUtils replace(connectionName, , ); String brokerName = getBrokerName(); ObjectName query = new ObjectName( org apache activemq type=Broker,brokerName= + brokerName + ,*,endpoint=Consumer,clientId= + connectionName); Set<ObjectName> queryResult = queryNames(query, null); return getManagedObjects(queryResult toArray(new ObjectName[queryResult size()]), SubscriptionViewMBean class); } public JobSchedulerViewMBean getJobScheduler() throws Exception { ObjectName name = getBrokerAdmin() getJMSJobScheduler(); return (JobSchedulerViewMBean) newProxyInstance(name, JobSchedulerViewMBean class, true); } public Collection<JobFacade> getScheduledJobs() throws Exception { JobSchedulerViewMBean jobScheduler = getJobScheduler(); List<JobFacade> result = new ArrayList<JobFacade>(); TabularData table = jobScheduler getAllJobs(); for (Object object table values()) { CompositeData cd = (CompositeData) object; JobFacade jf = new JobFacade(cd); result add(jf); } return result; } public boolean isJobSchedulerStarted() { try { JobSchedulerViewMBean jobScheduler = getJobScheduler(); return true; } catch (Exception e) { return false; } } }",1.0,
3487,3487,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\ConnectionQuery.,ConnectionQuery,public class ConnectionQuery { private final BrokerFacade mBrokerFacade; private String mConnectionID; public ConnectionQuery(BrokerFacade brokerFacade) { mBrokerFacade = brokerFacade; } public void destroy() { } public void setConnectionID(String connectionID) { mConnectionID = connectionID; } public String getConnectionID() { return mConnectionID; } public ConnectionViewMBean getConnection() throws Exception { String connectionID = getConnectionID(); if (connectionID == null) return null; return mBrokerFacade getConnection(connectionID); } public Collection<SubscriptionViewMBean> getConsumers() throws Exception { String connectionID = getConnectionID(); if (connectionID == null) return Collections emptyList(); return mBrokerFacade getConsumersOnConnection(connectionID); } },1.0,
3489,3489,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\DurableSubscriberFacade.,DurableSubscriberFacade,public class DurableSubscriberFacade extends DestinationFacade { private String clientId; private String subscriberName; public DurableSubscriberFacade(BrokerFacade brokerFacade) { super(brokerFacade); } public String getClientId() { return clientId; } public void setClientId(String clientId) { if (clientId != null) { clientId = clientId trim(); } this clientId = clientId; } public String getSubscriberName() { return subscriberName; } public void setSubscriberName(String subscriberName) { if (subscriberName != null) { subscriberName = subscriberName trim(); } this subscriberName = subscriberName; } },1.0,
3490,3490,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\HttpAuditLogEntry.,HttpAuditLogEntry,"public class HttpAuditLogEntry extends AuditLogEntry { Override public String toString() { String formattedParams = ; Map<String, String[]> params = (Map<String, String[]>)parameters get( params ); if (params != null) { for (String paramName params keySet()) { formattedParams += paramName + = + Arrays toString(params get(paramName)) + ; } } return user + requested + operation + [ + formattedParams + ] from + remoteAddr + at + getFormattedTime(); } }",1.0,
3492,3492,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\LocalBrokerFacade.,LocalBrokerFacade,"public class LocalBrokerFacade extends BrokerFacadeSupport { private BrokerService brokerService; public LocalBrokerFacade(BrokerService brokerService) { this brokerService = brokerService; } public BrokerService getBrokerService() { return brokerService; } public String getBrokerName() throws Exception { return brokerService getBrokerName(); } public Broker getBroker() throws Exception { return brokerService getBroker(); } public ManagementContext getManagementContext() { return brokerService getManagementContext(); } public BrokerViewMBean getBrokerAdmin() throws Exception { return brokerService getAdminView(); } public ManagedRegionBroker getManagedBroker() throws Exception { BrokerView adminView = brokerService getAdminView(); if (adminView == null) { return null; } return adminView getBroker(); } public void purgeQueue(ActiveMQDestination destination) throws Exception { Set destinations = getManagedBroker() getQueueRegion() getDestinations(destination); for (Iterator i = destinations iterator(); i hasNext();) { Destination dest = (Destination) i next(); if (dest instanceof Queue) { Queue regionQueue = (Queue) dest; regionQueue purge(); } } } Override public Set queryNames(ObjectName name, QueryExp query) throws Exception { return getManagementContext() queryNames(name, query); } Override public Object newProxyInstance(ObjectName objectName, Class interfaceClass, boolean notificationBroadcaster) { return getManagementContext() newProxyInstance(objectName, interfaceClass, notificationBroadcaster); } }",1.0,
3493,3493,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\MessageListenerServlet.,MessageListenerServlet,"public class MessageListenerServlet extends MessageServletSupport { private static final Logger LOG = LoggerFactory getLogger(MessageListenerServlet class); private String readTimeoutParameter = timeout ; private long defaultReadTimeout = -1; private long maximumReadTimeout = 25000; private int maximumMessages = 100; private Timer clientCleanupTimer = new Timer( ActiveMQ Ajax Client Cleanup Timer , true); private HashMap<String,AjaxWebClient> ajaxWebClients = new HashMap<String,AjaxWebClient>(); public void init() throws ServletException { ServletConfig servletConfig = getServletConfig(); String name = servletConfig getInitParameter( defaultReadTimeout ); if (name != null) { defaultReadTimeout = asLong(name); } name = servletConfig getInitParameter( maximumReadTimeout ); if (name != null) { maximumReadTimeout = asLong(name); } name = servletConfig getInitParameter( maximumMessages ); if (name != null) { maximumMessages = (int)asLong(name); } clientCleanupTimer schedule( new ClientCleaner(), 5000, 60000 ); } protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { AjaxWebClient client = getAjaxWebClient( request ); String messageIds = ; synchronized (client) { if (LOG isDebugEnabled()) { LOG debug( POST client= + client + session= + request getSession() getId() + clientId= + request getParameter( clientId ) + info= + request getPathInfo() + contentType= + request getContentType()); } int messages = 0; while (true) { String destinationName = request getParameter(messages == 0 destination ( d + messages)); if (destinationName == null) { destinationName = request getHeader( destination ); } String message = request getParameter(messages == 0 message ( m + messages)); String type = request getParameter(messages == 0 type ( t + messages)); if (destinationName == null || message == null || type == null) { break; } try { Destination destination = getDestination(client, request, destinationName); if (LOG isDebugEnabled()) { LOG debug(messages + destination= + destinationName + message= + message + type= + type); LOG debug(destination + is a + destination getClass() getName()); } messages++; if ( listen equals(type)) { AjaxListener listener = client getListener(); Map<MessageAvailableConsumer, String> consumerIdMap = client getIdMap(); Map<MessageAvailableConsumer, String> consumerDestinationNameMap = client getDestinationNameMap(); client closeConsumer(destination); MessageAvailableConsumer consumer = (MessageAvailableConsumer)client getConsumer(destination, request getHeader(WebClient selectorName)); consumer setAvailableListener(listener); consumerIdMap put(consumer, message); consumerDestinationNameMap put(consumer, destinationName); if (LOG isDebugEnabled()) { LOG debug( Subscribed + consumer + to + destination + id= + message); } } else if ( unlisten equals(type)) { Map<MessageAvailableConsumer, String> consumerIdMap = client getIdMap(); Map<MessageAvailableConsumer, String> consumerDestinationNameMap = client getDestinationNameMap(); MessageAvailableConsumer consumer = (MessageAvailableConsumer)client getConsumer(destination, request getHeader(WebClient selectorName)); consumer setAvailableListener(null); consumerIdMap remove(consumer); consumerDestinationNameMap remove(consumer); client closeConsumer(destination); if (LOG isDebugEnabled()) { LOG debug( Unsubscribed + consumer); } } else if ( send equals(type)) { TextMessage text = client getSession() createTextMessage(message); appendParametersToMessage(request, text); client send(destination, text); messageIds += text getJMSMessageID() + n ; if (LOG isDebugEnabled()) { LOG debug( Sent + message + to + destination); } } else { LOG warn( unknown type + type); } } catch (JMSException e) { LOG warn( jms , e); } } } if ( true equals(request getParameter( poll ))) { try { doMessages(client, request, response); } catch (JMSException e) { throw new ServletException( JMS problem + e, e); } } else { if (request getContentLength() != 0 && (request getContentType() == null || !request getContentType() toLowerCase() startsWith( application/x-www-form-urlencoded ))) { try { Destination destination = getDestination(client, request); String body = getPostedMessageBody(request); TextMessage message = client getSession() createTextMessage(body); appendParametersToMessage(request, message); client send(destination, message); if (LOG isDebugEnabled()) { LOG debug( Sent to destination + destination + body + body); } messageIds += message getJMSMessageID() + n ; } catch (JMSException e) { throw new ServletException(e); } } response setContentType( text/plain ); response setHeader( Cache-Control , no-cache ); response getWriter() print(messageIds); } } protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { try { AjaxWebClient client = getAjaxWebClient(request); if (LOG isDebugEnabled()) { LOG debug( GET client= + client + session= + request getSession() getId() + clientId= + request getParameter( clientId ) + uri= + request getRequestURI() + query= + request getQueryString()); } doMessages(client, request, response); } catch (JMSException e) { throw new ServletException( JMS problem + e, e); } } protected void doMessages(AjaxWebClient client, HttpServletRequest request, HttpServletResponse response) throws JMSException, IOException { int messages = 0; long timeout = getReadTimeout(request); if (LOG isDebugEnabled()) { LOG debug( doMessage timeout= + timeout); } UndeliveredAjaxMessage undelivered message = null; Message message = null; undelivered message = (UndeliveredAjaxMessage)request getAttribute( undelivered message ); if( undelivered message != null ) { message = (Message)undelivered message getMessage(); } synchronized (client) { List<MessageConsumer> consumers = client getConsumers(); MessageAvailableConsumer consumer = null; if( undelivered message != null ) { consumer = (MessageAvailableConsumer)undelivered message getConsumer(); } if (message == null) { for (int i = 0; message == null && i < consumers size(); i++) { consumer = (MessageAvailableConsumer)consumers get(i); if (consumer getAvailableListener() == null) { continue; } message = consumer receive(10); if (LOG isDebugEnabled()) { LOG debug( received + message + from + consumer); } } } response setContentType( text/xml ); response setHeader( Cache-Control , no-cache ); if (message == null && client getListener() getUndeliveredMessages() size() == 0) { Continuation continuation = ContinuationSupport getContinuation(request); if (continuation isExpired()) { response setStatus(HttpServletResponse SC OK); StringWriter swriter = new StringWriter(); PrintWriter writer = new PrintWriter(swriter); writer println( <ajax-response> ); writer print( </ajax-response> ); writer flush(); String m = swriter toString(); response getWriter() println(m); return; } continuation setTimeout(timeout); continuation suspend(); LOG debug( Suspending continuation + continuation ); AjaxListener listener = client getListener(); listener access(); listener setContinuation(continuation); return; } StringWriter swriter = new StringWriter(); PrintWriter writer = new PrintWriter(swriter); Map<MessageAvailableConsumer, String> consumerIdMap = client getIdMap(); Map<MessageAvailableConsumer, String> consumerDestinationNameMap = client getDestinationNameMap(); response setStatus(HttpServletResponse SC OK); writer println( <ajax-response> ); if (message != null) { String id = consumerIdMap get(consumer); String destinationName = consumerDestinationNameMap get(consumer); LOG debug( sending pre-existing message ); writeMessageResponse(writer, message, id, destinationName); messages++; } LinkedList<UndeliveredAjaxMessage> undeliveredMessages = ((AjaxListener)consumer getAvailableListener()) getUndeliveredMessages(); LOG debug( Send + undeliveredMessages size() + unconsumed messages ); synchronized( undeliveredMessages ) { for (Iterator<UndeliveredAjaxMessage> it = undeliveredMessages iterator(); it hasNext(); ) { messages++; UndeliveredAjaxMessage undelivered = it next(); Message msg = (Message)undelivered getMessage(); consumer = (MessageAvailableConsumer)undelivered getConsumer(); String id = consumerIdMap get(consumer); String destinationName = consumerDestinationNameMap get(consumer); LOG debug( sending undelivered/buffered messages ); LOG debug( msg +msg+ , id +id+ , destinationName +destinationName); writeMessageResponse(writer, msg, id, destinationName); it remove(); if (messages >= maximumMessages) { break; } } } for (int i = 0; i < consumers size() && messages < maximumMessages; i++) { consumer = (MessageAvailableConsumer)consumers get(i); if (consumer getAvailableListener() == null) { continue; } while (messages < maximumMessages) { message = consumer receiveNoWait(); if (message == null) { break; } messages++; String id = consumerIdMap get(consumer); String destinationName = consumerDestinationNameMap get(consumer); LOG debug( sending final available messages ); writeMessageResponse(writer, message, id, destinationName); } } writer print( </ajax-response> ); writer flush(); String m = swriter toString(); response getWriter() println(m); } } protected void writeMessageResponse(PrintWriter writer, Message message, String id, String destinationName) throws JMSException, IOException { writer print( <response id= ); writer print(id); writer print( ); if (destinationName != null) { writer print( destination= + destinationName + ); } writer print( > ); if (message instanceof TextMessage) { TextMessage textMsg = (TextMessage)message; String txt = textMsg getText(); if (txt != null) { if (txt startsWith( < )) { txt = txt substring(txt indexOf( > ) + 2); } writer print(txt); } } else if (message instanceof ObjectMessage) { ObjectMessage objectMsg = (ObjectMessage)message; Object object = objectMsg getObject(); if (object != null) { writer print(object toString()); } } writer println( </response> ); } protected AjaxWebClient getAjaxWebClient( HttpServletRequest request ) { HttpSession session = request getSession(true); String clientId = request getParameter( clientId ); if( clientId == null ) { clientId = defaultAjaxWebClient ; } String sessionKey = session getId() + - + clientId; AjaxWebClient client = null; synchronized (ajaxWebClients) { client = ajaxWebClients get( sessionKey ); if( client == null ) { if (LOG isDebugEnabled()) { LOG debug( creating new AjaxWebClient in +sessionKey ); } client = new AjaxWebClient( request, maximumReadTimeout ); ajaxWebClients put( sessionKey, client ); } client updateLastAccessed(); } return client; } protected long getReadTimeout(HttpServletRequest request) { long answer = defaultReadTimeout; String name = request getParameter(readTimeoutParameter); if (name != null) { answer = asLong(name); } if (answer < 0 || answer > maximumReadTimeout) { answer = maximumReadTimeout; } return answer; } private class ClientCleaner extends TimerTask { public void run() { if( LOG isDebugEnabled() ) { LOG debug( Cleaning up expired web clients ); } synchronized( ajaxWebClients ) { Iterator<Map Entry<String, AjaxWebClient>> it = ajaxWebClients entrySet() iterator(); while ( it hasNext() ) { Map Entry<String,AjaxWebClient> e = it next(); String key = e getKey(); AjaxWebClient val = e getValue(); if ( LOG isDebugEnabled() ) { LOG debug( AjaxWebClient + key + last accessed + val getMillisSinceLastAccessed()/1000 + seconds ago ); } if( val closeIfExpired() ) { if ( LOG isDebugEnabled() ) { LOG debug( Removing expired AjaxWebClient + key ); } it remove(); } } } } } public void destroy() { clientCleanupTimer cancel(); super destroy(); } }",1.0,
3494,3494,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\MessageListenerServlet.,ClientCleaner,"private class ClientCleaner extends TimerTask { public void run() { if( LOG isDebugEnabled() ) { LOG debug( Cleaning up expired web clients ); } synchronized( ajaxWebClients ) { Iterator<Map Entry<String, AjaxWebClient>> it = ajaxWebClients entrySet() iterator(); while ( it hasNext() ) { Map Entry<String,AjaxWebClient> e = it next(); String key = e getKey(); AjaxWebClient val = e getValue(); if ( LOG isDebugEnabled() ) { LOG debug( AjaxWebClient + key + last accessed + val getMillisSinceLastAccessed()/1000 + seconds ago ); } if( val closeIfExpired() ) { if ( LOG isDebugEnabled() ) { LOG debug( Removing expired AjaxWebClient + key ); } it remove(); } } } } }",1.0,
3495,3495,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\MessageQuery.,MessageQuery,"public class MessageQuery extends QueueBrowseQuery { private String id; private Message message; public MessageQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException { super(brokerFacade, sessionPool); } public String getId() { return id; } public void setId(String id) { this id = id; } public void setMessage(Message message) { this message = message; } public Message getMessage() throws JMSException { if (message == null) { if (id != null) { QueueBrowser tempBrowser=getBrowser(); Enumeration iter = tempBrowser getEnumeration(); while (iter hasMoreElements()) { Message item = (Message) iter nextElement(); if (id equals(item getJMSMessageID())) { message = item; break; } } tempBrowser close(); } } return message; } public Object getBody() throws JMSException { Message message = getMessage(); if (message instanceof TextMessage) { return ((TextMessage) message) getText(); } if (message instanceof ObjectMessage) { try { return ((ObjectMessage) message) getObject(); } catch (JMSException e) { return e; } } if (message instanceof MapMessage) { return createMapBody((MapMessage) message); } if (message instanceof BytesMessage) { BytesMessage msg = (BytesMessage) message; int len = (int) msg getBodyLength(); if (len > -1) { byte[] data = new byte[len]; msg readBytes(data); return new String(data); } else { return ; } } if (message instanceof StreamMessage) { return StreamMessage is not viewable ; } if (message != null) { return Unknown message type [ + message getClass() getName() + ] + message; } return null; } public Map<String, Object> getPropertiesMap() throws JMSException { Map<String, Object> answer = new HashMap<String, Object>(); Message aMessage = getMessage(); Enumeration iter = aMessage getPropertyNames(); while (iter hasMoreElements()) { String name = (String) iter nextElement(); Object value = aMessage getObjectProperty(name); if (value != null) { answer put(name, value); } } return answer; } protected Map<String, Object> createMapBody(MapMessage mapMessage) throws JMSException { Map<String, Object> answer = new HashMap<String, Object>(); Enumeration iter = mapMessage getMapNames(); while (iter hasMoreElements()) { String name = (String) iter nextElement(); Object value = mapMessage getObject(name); if (value != null) { answer put(name, value); } } return answer; } }",1.0,
3497,3497,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\MessageServlet.,Listener,"private static class Listener implements MessageAvailableListener { MessageConsumer consumer; Continuation continuation; Listener(MessageConsumer consumer) { this consumer = consumer; } public void setContinuation(Continuation continuation) { synchronized (consumer) { this continuation = continuation; } } public void onMessageAvailable(MessageConsumer consumer) { assert this consumer == consumer; synchronized (this consumer) { if (continuation != null) { try { Message message = consumer receiveNoWait(); continuation setAttribute( message , message); } catch (Exception e) { LOG error( Error receiving message + e, e); } continuation resume(); } } } }",1.0,
3499,3499,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\NoDestinationSuppliedException.,NoDestinationSuppliedException,public class NoDestinationSuppliedException extends ServletException { public NoDestinationSuppliedException() { super( Could not perform the JMS operation as no Destination was supplied ); } },1.0,
3500,3500,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\NoSuchViewStyleException.,NoSuchViewStyleException,"public class NoSuchViewStyleException extends ServletException { private static final long serialVersionUID = -3590398087507019767L; private final String style; public NoSuchViewStyleException(String style, Throwable cause) { super( The view style + style + could not be created , cause); this style = style; } public String getStyle() { return style; } }",1.0,
3501,3501,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\PortfolioPublishServlet.,PortfolioPublishServlet,"public class PortfolioPublishServlet extends MessageServletSupport { private static final int MAX DELTA PERCENT = 1; private static final Map<String, Double> LAST PRICES = new Hashtable<String, Double>(); public void init() throws ServletException { super init(); } protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PrintWriter out = response getWriter(); String[] stocks = request getParameterValues( stocks ); if (stocks == null || stocks length == 0) { out println( <html><body>No <b>stocks</b> query parameter specified Cannot publish market data</body></html> ); } else { Integer total = (Integer)request getSession(true) getAttribute( total ); if (total == null) { total = Integer valueOf(0); } int count = getNumberOfMessages(request); total = Integer valueOf(total intValue() + count); request getSession() setAttribute( total , total); try { WebClient client = WebClient getWebClient(request); for (int i = 0; i < count; i++) { sendMessage(client, stocks); } out print( <html><head><meta http-equiv= refresh content= ); String refreshRate = request getParameter( refresh ); if (refreshRate == null || refreshRate length() == 0) { refreshRate = 1 ; } out print(refreshRate); out println( /></head> ); out println( <body>Published <b> + escape(Integer toString(count)) + </b> of + escape(Integer toString(total)) + price messages Refresh = + escape(refreshRate) + s ); out println( </body></html> ); } catch (JMSException e) { out println( <html><body>Failed sending price messages due to <b> + e + </b></body></html> ); log( Failed to send message + e, e); } } } protected void sendMessage(WebClient client, String[] stocks) throws JMSException { Session session = client getSession(); int idx = 0; while (true) { idx = (int)Math round(stocks length * Math random()); if (idx < stocks length) { break; } } String stock = stocks[idx]; Destination destination = session createTopic( STOCKS + stock); String stockText = createStockText(stock); log( Sending + stockText + on destination + destination); Message message = session createTextMessage(stockText); client send(destination, message); } protected String createStockText(String stock) { Double value = LAST PRICES get(stock); if (value == null) { value = new Double(Math random() * 100); } double oldPrice = value doubleValue(); value = new Double(mutatePrice(oldPrice)); LAST PRICES put(stock, value); double price = value doubleValue(); double offer = price * 1 001; String movement = (price > oldPrice) up down ; return <price stock= + stock + bid= + price + offer= + offer + movement= + movement + /> ; } protected double mutatePrice(double price) { double percentChange = (2 * Math random() * MAX DELTA PERCENT) - MAX DELTA PERCENT; return price * (100 + percentChange) / 100; } protected int getNumberOfMessages(HttpServletRequest request) { String name = request getParameter( count ); if (name != null) { return Integer parseInt(name); } return 1; } protected String escape(String text) throws IOException { return java net URLEncoder encode(text, UTF-8 ); } }",1.0,
3502,3502,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\QueueBrowseQuery.,QueueBrowseQuery,"public class QueueBrowseQuery extends DestinationFacade implements DisposableBean { private SessionPool sessionPool; private String selector; private Session session; private Queue queue; private QueueBrowser browser; public QueueBrowseQuery(BrokerFacade brokerFacade, SessionPool sessionPool) throws JMSException { super(brokerFacade); this sessionPool = sessionPool; this session = sessionPool borrowSession(); setJMSDestinationType( query ); } public void destroy() throws Exception { if (browser != null) { browser close(); } sessionPool returnSession(session); session = null; } public QueueBrowser getBrowser() throws JMSException { if (browser == null) { browser = createBrowser(); } return browser; } public void setBrowser(QueueBrowser browser) { this browser = browser; } public Queue getQueue() throws JMSException { if (queue == null) { queue = session createQueue(getValidDestination()); } return queue; } public void setQueue(Queue queue) { this queue = queue; } public String getSelector() { return selector; } public void setSelector(String selector) { this selector = selector; } public Session getSession() { return session; } public boolean isQueue() { return true; } protected QueueBrowser createBrowser() throws JMSException { return getSession() createBrowser(getQueue(), getSelector()); } }",1.0,
3503,3503,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\QueueBrowseServlet.,QueueBrowseServlet,"public class QueueBrowseServlet extends HttpServlet { private static FactoryFinder factoryFinder = new FactoryFinder( META-INF/services/org/apache/activemq/web/view/ ); protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { try { WebClient client = WebClient getWebClient(request); Session session = client getSession(); Queue queue = getQueue(request, session); if (queue == null) { throw new ServletException( No queue URI specified ); } String msgId = request getParameter( msgId ); if (msgId == null) { MessageRenderer renderer = getMessageRenderer(request); configureRenderer(request, renderer); String selector = getSelector(request); QueueBrowser browser = session createBrowser(queue, selector); renderer renderMessages(request, response, browser); } else { XmlMessageRenderer renderer = new XmlMessageRenderer(); QueueBrowser browser = session createBrowser(queue, JMSMessageID= + msgId + ); if (!browser getEnumeration() hasMoreElements()) { response sendError(HttpServletResponse SC NOT FOUND); return; } Message message = (Message) browser getEnumeration() nextElement(); PrintWriter writer = response getWriter(); renderer renderMessage(writer, request, response, browser, message); writer flush(); } } catch (JMSException e) { throw new ServletException(e); } } protected MessageRenderer getMessageRenderer(HttpServletRequest request) throws IOException, ServletException { String style = request getParameter( view ); if (style == null) { style = simple ; } try { return (MessageRenderer) factoryFinder newInstance(style); } catch (IllegalAccessException e) { throw new NoSuchViewStyleException(style, e); } catch (InstantiationException e) { throw new NoSuchViewStyleException(style, e); } catch (ClassNotFoundException e) { throw new NoSuchViewStyleException(style, e); } } SuppressWarnings( unchecked ) protected void configureRenderer(HttpServletRequest request, MessageRenderer renderer) { Map<String, String> properties = new HashMap<String, String>(); for (Enumeration<String> iter = request getParameterNames(); iter hasMoreElements();) { String name = (String) iter nextElement(); properties put(name, request getParameter(name)); } IntrospectionSupport setProperties(renderer, properties); } protected String getSelector(HttpServletRequest request) { return request getParameter( selector ); } protected Queue getQueue(HttpServletRequest request, Session session) throws JMSException { String uri = request getPathInfo(); if (uri == null) { return null; } if (uri startsWith( / )) { uri = uri substring(1); if (uri length() == 0) { return null; } } uri = uri replace( / , ); return session createQueue(uri); } }",1.0,
3504,3504,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\QueueConsumerQuery.,QueueConsumerQuery,public class QueueConsumerQuery extends DestinationFacade { public QueueConsumerQuery(BrokerFacade brokerFacade) throws JMSException { super(brokerFacade); setJMSDestinationType( queue ); } public Collection<SubscriptionViewMBean> getConsumers() throws Exception { return getBrokerFacade() getQueueConsumers(getJMSDestination()); } public void destroy() { } },1.0,
3505,3505,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\RemoteJMXBrokerFacade.,RemoteJMXBrokerFacade,"public class RemoteJMXBrokerFacade extends BrokerFacadeSupport { private static final transient Logger LOG = LoggerFactory getLogger(RemoteJMXBrokerFacade class); private String brokerName; private JMXConnector connector; private WebConsoleConfiguration configuration; public void setBrokerName(String brokerName) { this brokerName = brokerName; } public WebConsoleConfiguration getConfiguration() { return configuration; } public void setConfiguration(WebConsoleConfiguration configuration) { this configuration = configuration; } public void shutdown() { closeConnection(); } private ObjectName getBrokerObjectName(MBeanServerConnection connection) throws IOException, MalformedObjectNameException { Set<ObjectName> brokers = findBrokers(connection); if (brokers size() == 0) { throw new IOException( No broker could be found in the JMX ); } ObjectName name = brokers iterator() next(); return name; } public BrokerViewMBean getBrokerAdmin() throws Exception { MBeanServerConnection connection = getMBeanServerConnection(); Set brokers = findBrokers(connection); if (brokers size() == 0) { throw new IOException( No broker could be found in the JMX ); } ObjectName name = (ObjectName)brokers iterator() next(); BrokerViewMBean mbean = (BrokerViewMBean)MBeanServerInvocationHandler newProxyInstance(connection, name, BrokerViewMBean class, true); return mbean; } public String getBrokerName() throws Exception, MalformedObjectNameException { return getBrokerAdmin() getBrokerName(); } protected MBeanServerConnection getMBeanServerConnection() throws Exception { JMXConnector connector = this connector; if (isConnectionActive(connector)) { return connector getMBeanServerConnection(); } synchronized (this) { closeConnection(); LOG debug( Creating a new JMX-Connection to the broker ); this connector = createConnection(); return this connector getMBeanServerConnection(); } } protected boolean isConnectionActive(JMXConnector connector) { if (connector == null) { return false; } try { MBeanServerConnection connection = connector getMBeanServerConnection(); int brokerCount = findBrokers(connection) size(); return brokerCount > 0; } catch (Exception e) { return false; } } protected JMXConnector createConnection() { Map<String, Object> env = new HashMap<String, Object>(); if (this configuration getJmxUser() != null) { env put( jmx remote credentials , new String[] { this configuration getJmxUser(), this configuration getJmxPassword() }); } Collection<JMXServiceURL> jmxUrls = this configuration getJmxUrls(); Exception exception = null; for (JMXServiceURL url jmxUrls) { try { JMXConnector connector = JMXConnectorFactory connect(url, env); connector connect(); MBeanServerConnection connection = connector getMBeanServerConnection(); Set<ObjectName> brokers = findBrokers(connection); if (brokers size() > 0) { LOG info( Connected via JMX to the broker at + url); return connector; } } catch (Exception e) { exception = e; } } if (exception != null) { if (exception instanceof RuntimeException) { throw (RuntimeException) exception; } else { throw new RuntimeException(exception); } } throw new IllegalStateException( No broker is found at any of the + jmxUrls size() + configured urls ); } protected synchronized void closeConnection() { if (connector != null) { try { LOG debug( Closing a connection to a broker ( + connector getConnectionId() + ) ); connector close(); } catch (IOException e) { } } } SuppressWarnings( unchecked ) protected Set<ObjectName> findBrokers(MBeanServerConnection connection) throws IOException, MalformedObjectNameException { ObjectName name; if (this brokerName == null) { name = new ObjectName( org apache activemq type=Broker,brokerName=* ); } else { name = new ObjectName( org apache activemq brokerName= + this brokerName + ,Type=broker ); } Set<ObjectName> brokers = connection queryNames(name, null); return brokers; } public void purgeQueue(ActiveMQDestination destination) throws Exception { QueueViewMBean queue = getQueue(destination getPhysicalName()); queue purge(); } public ManagementContext getManagementContext() { throw new IllegalStateException( not supported ); } SuppressWarnings( unchecked ) protected <T> Collection<T> getManagedObjects(ObjectName[] names, Class<T> type) { MBeanServerConnection connection; try { connection = getMBeanServerConnection(); } catch (Exception e) { throw new RuntimeException(e); } List<T> answer = new ArrayList<T>(); if (connection != null) { for (int i = 0; i < names length; i++) { ObjectName name = names[i]; T value = (T) MBeanServerInvocationHandler newProxyInstance( connection, name, type, true); if (value != null) { answer add(value); } } } return answer; } Override public Set queryNames(ObjectName name, QueryExp query) throws Exception { return getMBeanServerConnection() queryNames(name, query); } Override public Object newProxyInstance(ObjectName objectName, Class interfaceClass,boolean notificationBroadcaster) throws Exception { return MBeanServerInvocationHandler newProxyInstance(getMBeanServerConnection(), objectName, interfaceClass, notificationBroadcaster); } }",1.0,
3506,3506,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\SessionFilter.,SessionFilter,"public class SessionFilter implements Filter { public void init(FilterConfig filterConfig) throws ServletException { } public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { ((HttpServletRequest)request) getSession(true) setAttribute( secret , UUID randomUUID() toString());; chain doFilter(request, response); } public void destroy() { } }",1.0,
3507,3507,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\SessionListener.,SessionListener,public class SessionListener implements HttpSessionListener { private static final Logger LOG = LoggerFactory getLogger(SessionListener class); public void sessionCreated(HttpSessionEvent se) { } public void sessionDestroyed(HttpSessionEvent se) { WebClient client = WebClient getWebClient(se getSession()); if (client != null) { client close(); } } },1.0,
3508,3508,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\SessionPool.,SessionPool,"public class SessionPool { private static final Logger LOG = LoggerFactory getLogger(SessionPool class); private ConnectionFactory connectionFactory; private Connection connection; private LinkedList<Session> sessions = new LinkedList<Session>(); public Connection getConnection() throws JMSException { if (checkConnection()) { return connection; } synchronized (this) { connection = getConnectionFactory() createConnection(); connection start(); return connection; } } private boolean checkConnection() { if (connection == null) { return false; } try { connection getMetaData(); return true; } catch (JMSException e) { return false; } } public void setConnection(Connection connection) { this connection = connection; } public ConnectionFactory getConnectionFactory() { if (connectionFactory == null) { throw new IllegalStateException( No ConnectionFactory has been set for the session pool ); } return connectionFactory; } public void setConnectionFactory(ConnectionFactory connectionFactory) { this connectionFactory = connectionFactory; } public Session borrowSession() throws JMSException { Session answer = null; synchronized (sessions) { if (sessions isEmpty()) { LOG trace( Creating a new session ); answer = createSession(); } else { LOG trace( Serving session from the pool ); answer = sessions removeLast(); } } return answer; } public void returnSession(Session session) { if (session != null && !((ActiveMQSession) session) isClosed()) { synchronized (sessions) { LOG trace( Returning session to the pool ); sessions add(session); } } else { LOG debug( Session closed or null, not returning to the pool ); } } protected Session createSession() throws JMSException { return getConnection() createSession(false, Session AUTO ACKNOWLEDGE); } }",1.0,
3509,3509,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\SingletonBrokerFacade.,SingletonBrokerFacade,public class SingletonBrokerFacade extends LocalBrokerFacade { public SingletonBrokerFacade() { super(findSingletonBroker()); } protected static BrokerService findSingletonBroker() { BrokerService broker = BrokerRegistry getInstance() findFirst(); if (broker == null) { throw new IllegalArgumentException( No BrokerService is registered with the BrokerRegistry Are you sure there is a configured broker in the same ClassLoader ); } return broker; } },1.0,
3511,3511,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\UndeliveredAjaxMessage.,UndeliveredAjaxMessage,"class UndeliveredAjaxMessage { private Message message; private MessageConsumer consumer; UndeliveredAjaxMessage( Message message, MessageConsumer consumer ) { this message = message; this consumer = consumer; } public MessageConsumer getConsumer() { return this consumer; } public Message getMessage() { return this message; } }",1.0,
3513,3513,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\config\AbstractConfiguration.,AbstractConfiguration,"public abstract class AbstractConfiguration implements WebConsoleConfiguration { public ConnectionFactory getConnectionFactory() { return null; } public String getJmxPassword() { return null; } public Collection<JMXServiceURL> getJmxUrls() { return null; } public String getJmxUser() { return null; } protected ConnectionFactory makeConnectionFactory(String jmsUrl, String jmsUser, String jmsPassword) { if (jmsUser != null && jmsUser length() > 0) return new ActiveMQConnectionFactory(jmsUser, jmsPassword, jmsUrl); else return new ActiveMQConnectionFactory(jmsUrl); } protected Collection<JMXServiceURL> makeJmxUrls(String jmxUrls) { String[] urls = jmxUrls split( , ); if (urls == null || urls length == 0) { urls = new String[] { jmxUrls }; } try { Collection<JMXServiceURL> result = new ArrayList<JMXServiceURL>( jmxUrls length()); for (String url urls) { result add(new JMXServiceURL(url)); } return result; } catch (MalformedURLException e) { throw new IllegalArgumentException( Invalid JMX-url , e); } } }",1.0,
3514,3514,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\config\JNDIConfiguration.,JNDIConfiguration,"public class JNDIConfiguration extends AbstractConfiguration { private static final String JNDI JMS CONNECTION FACTORY = java comp/env/jms/connectionFactory ; private static final String JNDI JMS URL = java comp/env/jms/url ; private static final String JNDI JMS USER = java comp/env/jms/user ; private static final String JNDI JMS PASSWORD = java comp/env/jms/password ; private static final String JNDI JMX URL = java comp/env/jmx/url ; private static final String JNDI JMX USER = java comp/env/jmx/user ; private static final String JNDI JMX PASSWORD = java comp/env/jmx/password ; private InitialContext context; public JNDIConfiguration() throws NamingException { this context = new InitialContext(); } public JNDIConfiguration(InitialContext context) { this context = context; } public ConnectionFactory getConnectionFactory() { try { ConnectionFactory connectionFactory = (ConnectionFactory) this context lookup(JNDI JMS CONNECTION FACTORY); return connectionFactory; } catch (NameNotFoundException e) { } catch (NamingException e) { throw new RuntimeException(e); } try { String jmsUrl = (String) this context lookup(JNDI JMS URL); if (jmsUrl == null) { throw new IllegalArgumentException( A JMS-url must be specified (system property + JNDI JMS URL); } String jmsUser = getJndiString(JNDI JMS USER); String jmsPassword = getJndiString(JNDI JMS PASSWORD); return makeConnectionFactory(jmsUrl, jmsUser, jmsPassword); } catch (NameNotFoundException e) { throw new IllegalArgumentException( Neither a ConnectionFactory nor a JMS-url were specified ); } catch (NamingException e) { throw new RuntimeException(e); } } protected String getJndiString(String name) { try { return (String) this context lookup(name); } catch (NamingException e) { return null; } } public Collection<JMXServiceURL> getJmxUrls() { String jmxUrls = getJndiString(JNDI JMX URL); return makeJmxUrls(jmxUrls); } public String getJmxPassword() { return getJndiString(JNDI JMX PASSWORD); } public String getJmxUser() { return getJndiString(JNDI JMX USER); } }",1.0,
3515,3515,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\config\SystemPropertiesConfiguration.,SystemPropertiesConfiguration,"public class SystemPropertiesConfiguration extends AbstractConfiguration { public static final String PROPERTY JMS URL = webconsole jms url ; public static final String PROPERTY JMS USER = webconsole jms user ; public static final String PROPERTY JMS PASSWORD = webconsole jms password ; public static final String PROPERTY JMX URL = webconsole jmx url ; public static final String PROPERTY JMX USER = webconsole jmx user ; public static final String PROPERTY JMX PASSWORD = webconsole jmx password ; public ConnectionFactory getConnectionFactory() { String jmsUrl = System getProperty(PROPERTY JMS URL); if (jmsUrl == null) throw new IllegalArgumentException( A JMS-url must be specified (system property + PROPERTY JMS URL); String jmsUser = System getProperty(PROPERTY JMS USER); String jmsPassword = System getProperty(PROPERTY JMS PASSWORD); return makeConnectionFactory(jmsUrl, jmsUser, jmsPassword); } public Collection<JMXServiceURL> getJmxUrls() { String jmxUrls = System getProperty(PROPERTY JMX URL); return makeJmxUrls(jmxUrls); } public String getJmxPassword() { return System getProperty(PROPERTY JMX PASSWORD); } public String getJmxUser() { return System getProperty(PROPERTY JMX USER); } }",1.0,
3517,3517,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\view\SimpleMessageRenderer.,SimpleMessageRenderer,"public class SimpleMessageRenderer implements MessageRenderer { private String contentType = text/xml ; private int maxMessages; public void renderMessages(HttpServletRequest request, HttpServletResponse response, QueueBrowser browser) throws IOException, JMSException, ServletException { response setContentType(getContentType()); PrintWriter writer = response getWriter(); printHeader(writer, browser, request); Enumeration iter = browser getEnumeration(); for (int counter = 0; iter hasMoreElements() && (maxMessages <= 0 || counter < maxMessages); counter++) { Message message = (Message)iter nextElement(); renderMessage(writer, request, response, browser, message); } printFooter(writer, browser, request); } public void renderMessage(PrintWriter writer, HttpServletRequest request, HttpServletResponse response, QueueBrowser browser, Message message) throws JMSException, ServletException { writer print( <message id= ); writer print(message getJMSMessageID()); writer println( /> ); } public int getMaxMessages() { return maxMessages; } public void setMaxMessages(int maxMessages) { this maxMessages = maxMessages; } public String getContentType() { return contentType; } public void setContentType(String contentType) { this contentType = contentType; } protected void printHeader(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException, ServletException { writer println( ); writer print( <messages queue= ); writer print(browser getQueue()); writer print( ); String selector = browser getMessageSelector(); if (selector != null) { writer print( selector= ); writer print(selector); writer print( ); } writer println( > ); } protected void printFooter(PrintWriter writer, QueueBrowser browser, HttpServletRequest request) throws IOException, JMSException, ServletException { writer println( </messages> ); } }",1.0,
3518,3518,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\view\XmlMessageRenderer.,XmlMessageRenderer,"public class XmlMessageRenderer extends SimpleMessageRenderer { private XStream xstream; public void renderMessage(PrintWriter writer, HttpServletRequest request, HttpServletResponse response, QueueBrowser browser, Message message) throws JMSException { getXstream() toXML(message, writer); } public XStream getXstream() { if (xstream == null) { xstream = new XStream(); } return xstream; } public void setXstream(XStream xstream) { this xstream = xstream; } }",1.0,
3520,3520,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\WebConsoleStarter.,WebConsoleStarter,"public class WebConsoleStarter implements ServletContextListener { private static final Logger LOG = LoggerFactory getLogger(WebConsoleStarter class); public void contextInitialized(ServletContextEvent event) { LOG debug( Initializing ActiveMQ WebConsole ); ServletContext servletContext = event getServletContext(); WebApplicationContext context = createWebapplicationContext(servletContext); initializeWebClient(servletContext, context); LOG info( ActiveMQ WebConsole initialized ); } private WebApplicationContext createWebapplicationContext(ServletContext servletContext) { String webconsoleType = System getProperty( webconsole type , embedded ); try { if (OsgiUtil isOsgi()) { webconsoleType = osgi ; } } catch (NoClassDefFoundError ignore) { } String configuration = /WEB-INF/webconsole- + webconsoleType + xml ; LOG info( Web console type + webconsoleType); XmlWebApplicationContext context = new XmlWebApplicationContext(); context setServletContext(servletContext); context setConfigLocations(new String[] { configuration }); context refresh(); context start(); servletContext setAttribute(WebApplicationContext ROOT WEB APPLICATION CONTEXT ATTRIBUTE, context); return context; } private void initializeWebClient(ServletContext servletContext, WebApplicationContext context) { ConnectionFactory connectionFactory = (ConnectionFactory)context getBean( connectionFactory ); servletContext setAttribute(WebClient CONNECTION FACTORY ATTRIBUTE, connectionFactory); WebClient initContext(servletContext); } public void contextDestroyed(ServletContextEvent event) { XmlWebApplicationContext context = (XmlWebApplicationContext)WebApplicationContextUtils getWebApplicationContext(event getServletContext()); if (context != null) { context stop(); context destroy(); } } static class OsgiUtil { static boolean isOsgi() { return (FrameworkUtil getBundle(WebConsoleStarter class) != null); } } }",1.0,
3521,3521,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\WebConsoleStarter.,OsgiUtil,static class OsgiUtil { static boolean isOsgi() { return (FrameworkUtil getBundle(WebConsoleStarter class) != null); } },1.0,
3524,3524,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\controller\CreateDestination.,CreateDestination,"public class CreateDestination extends DestinationFacade implements Controller { public CreateDestination(BrokerFacade brokerFacade) { super(brokerFacade); } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { addDestination(); return redirectToBrowseView(); } public String[] getSupportedHttpMethods() { return new String[]{ POST }; } }",1.0,
3525,3525,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\controller\CreateSubscriber.,CreateSubscriber,"public class CreateSubscriber extends DurableSubscriberFacade implements Controller { private String selector; public CreateSubscriber(BrokerFacade brokerFacade) { super(brokerFacade); } public String getSelector() { return selector; } public void setSelector(String selector) { if (selector != null) { selector = selector trim(); } this selector = selector; } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { if (selector != null && selector length() == 0) { selector = null; } getBrokerAdmin() createDurableSubscriber(getClientId(), getSubscriberName(), getValidDestination(), selector); return new ModelAndView( redirect subscribers jsp ); } public String[] getSupportedHttpMethods() { return new String[]{ POST }; } }",1.0,
3526,3526,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\controller\DeleteDestination.,DeleteDestination,"public class DeleteDestination extends DestinationFacade implements Controller { public DeleteDestination(BrokerFacade brokerFacade) { super(brokerFacade); } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { removeDestination(); return redirectToBrowseView(); } }",1.0,
3527,3527,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\controller\DeleteJob.,DeleteJob,"public class DeleteJob extends DestinationFacade implements Controller { private String jobId; private static final Logger LOG = LoggerFactory getLogger(DeleteJob class); public DeleteJob(BrokerFacade brokerFacade) { super(brokerFacade); } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { if (jobId != null) { JobSchedulerViewMBean jobScheduler = getBrokerFacade() getJobScheduler(); if (jobScheduler != null) { jobScheduler removeJob(jobId); LOG info( Removed scheduled Job + jobId); } else { LOG warn( Scheduler not configured ); } } return new ModelAndView( redirect scheduled jsp ); } public String getJobId() { return jobId; } public void setJobId(String id) { this jobId=id; } }",1.0,
3529,3529,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\controller\DeleteSubscriber.,DeleteSubscriber,"public class DeleteSubscriber extends DurableSubscriberFacade implements Controller { public DeleteSubscriber(BrokerFacade brokerFacade) { super(brokerFacade); } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { getBrokerAdmin() destroyDurableSubscriber(getClientId(), getSubscriberName()); return new ModelAndView( redirect subscribers jsp ); } }",1.0,
3530,3530,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\controller\MoveMessage.,MoveMessage,"public class MoveMessage extends DestinationFacade implements Controller { private String messageId; private String destination; private static final Logger log = LoggerFactory getLogger(MoveMessage class); public MoveMessage(BrokerFacade brokerFacade) { super(brokerFacade); } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { if (messageId != null) { QueueViewMBean queueView = getQueueView(); if (queueView != null) { log info( Moving message + getJMSDestination() + ( + messageId + ) + to + destination); queueView moveMessageTo(messageId, destination); } else { log warn( No queue named + getPhysicalDestinationName()); } } return redirectToBrowseView(); } public String getMessageId() { return messageId; } public void setMessageId(String messageId) { this messageId = messageId; } public String getDestination() { return destination; } public void setDestination(String destination) { this destination = destination; } }",1.0,
3531,3531,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\controller\PurgeDestination.,PurgeDestination,"public class PurgeDestination extends DestinationFacade implements Controller { public PurgeDestination(BrokerFacade brokerFacade) { super(brokerFacade); } public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response) throws Exception { purgeDestination(); return redirectToBrowseView(); } public void purgeDestination() throws Exception { if (isQueue()) { getBrokerFacade() purgeQueue(createDestination()); } else { throw new UnsupportedOperationException( Purge supported for queues only Receieved JMSDestinationType= + getJMSDestinationType()); } } }",1.0,
3533,3533,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\filter\ApplicationContextFilter.,ApplicationContextFilter,"public class ApplicationContextFilter implements Filter { private static final transient Logger LOG = LoggerFactory getLogger(ApplicationContextFilter class); private ServletContext servletContext; private String applicationContextName = applicationContext ; private String requestContextName = requestContext ; private String requestName = request ; public void init(FilterConfig config) throws ServletException { this servletContext = config getServletContext(); this applicationContextName = getInitParameter(config, applicationContextName , applicationContextName); this requestContextName = getInitParameter(config, requestContextName , requestContextName); this requestName = getInitParameter(config, requestName , requestName); WebApplicationContext context = WebApplicationContextUtils getWebApplicationContext(servletContext); Map wrapper = createApplicationContextWrapper(context); servletContext setAttribute(applicationContextName, wrapper); } public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { Map requestContextWrapper = createRequestContextWrapper(request); String path = ((HttpServletRequest)request) getRequestURI(); request setAttribute(requestContextName, requestContextWrapper); request setAttribute(requestName, request); chain doFilter(request, response); } public void destroy() { } public ServletContext getServletContext() { return servletContext; } public String getApplicationContextName() { return applicationContextName; } public void setApplicationContextName(String variableName) { this applicationContextName = variableName; } public String getRequestContextName() { return requestContextName; } public void setRequestContextName(String requestContextName) { this requestContextName = requestContextName; } protected String getInitParameter(FilterConfig config, String key, String defaultValue) { String parameter = config getInitParameter(key); return (parameter != null) parameter defaultValue; } protected Map createApplicationContextWrapper(final WebApplicationContext context) { Map wrapper = new AbstractMap() { public WebApplicationContext getContext() { return context; } public Object get(Object key) { if (key == null) { return null; } return context getBean(key toString()); } public Set entrySet() { return Collections EMPTY SET; } }; return wrapper; } protected Map createRequestContextWrapper(final ServletRequest request) { final WebApplicationContext context = WebApplicationContextUtils getWebApplicationContext(servletContext); Map wrapper = new AbstractMap() { public WebApplicationContext getContext() { return context; } public Object get(Object key) { if (key == null) { return null; } return bindRequestBean(context getBean(key toString()), request); } public Set entrySet() { return Collections EMPTY SET; } }; return wrapper; } protected Object bindRequestBean(Object bean, ServletRequest request) { ServletRequestDataBinder binder = new ServletRequestDataBinder(bean, null); binder bind(request); return bean; } }",1.0,
3534,3534,data,\smellybot\activemq\activemq-web-console\src\main\java\org\apache\activemq\web\handler\BindingBeanNameUrlHandlerMapping.,BindingBeanNameUrlHandlerMapping,"public class BindingBeanNameUrlHandlerMapping extends BeanNameUrlHandlerMapping { private static final transient Logger LOG = LoggerFactory getLogger(BindingBeanNameUrlHandlerMapping class); Override protected Object getHandlerInternal(HttpServletRequest request) throws Exception { Object object = super getHandlerInternal(request); if (object instanceof String) { String handlerName = (String) object; object = getApplicationContext() getBean(handlerName); } if (object instanceof HandlerExecutionChain) { HandlerExecutionChain handlerExecutionChain = (HandlerExecutionChain) object; object = handlerExecutionChain getHandler(); } if (object != null) { if (object instanceof DestinationFacade) { if (!Arrays asList(((DestinationFacade)object) getSupportedHttpMethods()) contains(request getMethod())) { throw new UnsupportedOperationException( Unsupported method + request getMethod() + for path + request getRequestURI()); } if (request getSession() getAttribute( secret ) == null || !request getSession() getAttribute( secret ) equals(request getParameter( secret ))) { throw new UnsupportedOperationException( Possible CSRF attack ); } } ServletRequestDataBinder binder = new ServletRequestDataBinder(object, request ); try { binder bind(request); binder setIgnoreUnknownFields(true); if (LOG isDebugEnabled()) { LOG debug( Bound POJO is now + object); } } catch (Exception e) { LOG warn( Caught + e, e); throw e; } } return object; } }",1.0,
3535,3535,data,\smellybot\activemq\activemq-web-console\src\test\java\org\apache\activemq\web\tool\Main.,Main,public final class Main { public static final int PORT = 8080; public static final String WEBAPP DIR = src/main/webapp ; public static final String WEBAPP CTX = / ; private Main() { } public static void main(String[] args) throws Exception { int port = PORT; if (args length > 0) { String text = args[0]; port = Integer parseInt(text); } System out println( Starting Web Server on port + port); Server server = new Server(); SelectChannelConnector connector = new SelectChannelConnector(); connector setPort(port); connector setServer(server); WebAppContext context = new WebAppContext(); context setResourceBase(WEBAPP DIR); context setContextPath(WEBAPP CTX); context setServer(server); server setHandler(context); server setConnectors(new Connector[] { connector }); server start(); System out println(); System out println( ============================================================================== ); System out println( Started the ActiveMQ Console point your web browser at http System out println( ============================================================================== ); System out println(); } },1.0,
3536,3536,data,\smellybot\activemq\activemq-web-demo\src\test\java\org\apache\activemq\web\AjaxTest.,AjaxTest,"public class AjaxTest extends JettyTestSupport { private static final Logger LOG = LoggerFactory getLogger(AjaxTest class); private class AjaxTestContentExchange extends ContentExchange { private HashMap<String,String> headers; private String responseContent; AjaxTestContentExchange() { super(true); this headers = new HashMap<String,String>(); this responseContent = ; } protected void onResponseContent( Buffer content ) { this responseContent += content toString(); } protected void onResponseHeader( Buffer name, Buffer value ) { headers put( name toString(), value toString() ); } public String getJsessionId() { String cookie = headers get( Set-Cookie ); String[] cookie parts = cookie split( ; ); return cookie parts[0]; } public String getResponseContent() { return responseContent; } } public void assertContains( String expected, String actual ) { assertTrue( +actual+ does not contain expected fragment +expected+ , actual indexOf( expected ) != -1 ); } public void assertResponseCount( int expected, String actual ) { int occurrences = StringUtils countMatches( actual, <response ); assertEquals( Expected number of <response> elements is not correct , expected, occurrences ); } public void testAjaxClientReceivesMessagesWhichAreSentToQueueWhileClientIsPolling() throws Exception { LOG debug( *** testAjaxClientReceivesMessagesWhichAreSentToQueueWhileClientIsPolling *** ); HttpClient httpClient = new HttpClient(); httpClient start(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); LOG debug( SENDING LISTEN ); AjaxTestContentExchange contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=queue contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); String jsessionid = contentExchange getJsessionId(); LOG debug( SENDING POLL ); AjaxTestContentExchange poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); LOG debug( SENDING MESSAGES ); contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=queue d1=queue d2=queue ) ); contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); LOG debug( DONE POSTING MESSAGES ); poll waitForDone(); String response = poll getResponseContent(); poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); poll waitForDone(); String fullResponse = response + poll getResponseContent(); LOG debug( full response + fullResponse ); assertContains( <response id= handler destination= queue assertContains( <response id= handler destination= queue assertContains( <response id= handler destination= queue assertResponseCount( 3, fullResponse ); } public void testAjaxClientReceivesMessagesWhichAreSentToTopicWhileClientIsPolling() throws Exception { LOG debug( *** testAjaxClientReceivesMessagesWhichAreSentToTopicWhileClientIsPolling *** ); HttpClient httpClient = new HttpClient(); httpClient start(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); LOG debug( SENDING LISTEN ); AjaxTestContentExchange contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=topic contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); String jsessionid = contentExchange getJsessionId(); LOG debug( SENDING POLL ); AjaxTestContentExchange poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); LOG debug( SENDING MESSAGES ); contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=topic d1=topic d2=topic ) ); contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); LOG debug( DONE POSTING MESSAGES ); poll waitForDone(); String response = poll getResponseContent(); poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); poll waitForDone(); String fullResponse = response + poll getResponseContent(); LOG debug( full response + fullResponse ); assertContains( <response id= handler destination= topic assertContains( <response id= handler destination= topic assertContains( <response id= handler destination= topic assertResponseCount( 3, fullResponse ); } public void testAjaxClientReceivesMessagesWhichAreQueuedBeforeClientSubscribes() throws Exception { LOG debug( *** testAjaxClientReceivesMessagesWhichAreQueuedBeforeClientSubscribes *** ); producer send( session createTextMessage( test one ) ); producer send( session createTextMessage( test two ) ); producer send( session createTextMessage( test three ) ); HttpClient httpClient = new HttpClient(); httpClient start(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); LOG debug( SENDING LISTEN ); AjaxTestContentExchange contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=queue contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); String jsessionid = contentExchange getJsessionId(); LOG debug( SENDING POLL ); AjaxTestContentExchange poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); poll waitForDone(); String response = poll getResponseContent(); assertContains( <response id= handler destination= queue assertContains( <response id= handler destination= queue assertContains( <response id= handler destination= queue assertResponseCount( 3, response ); } public void testStompMessagesAreReceivedByAjaxClient() throws Exception { LOG debug( *** testStompMessagesAreRecievedByAjaxClient *** ); HttpClient httpClient = new HttpClient(); httpClient start(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); LOG debug( SENDING LISTEN ); AjaxTestContentExchange contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=queue contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); String jsessionid = contentExchange getJsessionId(); LOG debug( SENDING POLL ); AjaxTestContentExchange poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); StompConnection connection = new StompConnection(); connection open(stompUri getHost(), stompUri getPort()); connection connect( user , password ); HashMap<String, String> headers = new HashMap<String, String>(); headers put( amq-msg-type , text ); connection send( /queue/test , message1 , (String)null, headers ); connection send( /queue/test , message2 , (String)null, headers ); connection send( /queue/test , message3 , (String)null, headers ); connection send( /queue/test , message4 , (String)null, headers ); connection send( /queue/test , message5 , (String)null, headers ); String frame = DISCONNECT n + n n + Stomp NULL; connection sendFrame(frame); TimeUnit SECONDS sleep(5); connection disconnect(); poll waitForDone(); String response = poll getResponseContent(); poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); poll waitForDone(); String fullResponse = response + poll getResponseContent(); assertContains( <response id= handler destination= queue assertContains( <response id= handler destination= queue assertContains( <response id= handler destination= queue assertContains( <response id= handler destination= queue assertContains( <response id= handler destination= queue assertResponseCount( 5, fullResponse ); } public void testAjaxMessagesAreReceivedByStompClient() throws Exception { LOG debug( *** testAjaxMessagesAreReceivedByStompClient *** ); HttpClient httpClient = new HttpClient(); httpClient start(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); AjaxTestContentExchange contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=queue d1=queue d2=queue d3=queue contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); StompConnection connection = new StompConnection(); connection open(stompUri getHost(), stompUri getPort()); connection connect( user , password ); connection subscribe( /queue/test ); StompFrame message; String allMessageBodies = ; try { while( true ) { message = connection receive(5000); allMessageBodies = allMessageBodies + n + message getBody(); } } catch (SocketTimeoutException e) {} LOG debug( All message bodies + allMessageBodies ); assertContains( msg1 , allMessageBodies ); assertContains( msg2 , allMessageBodies ); assertContains( msg3 , allMessageBodies ); assertContains( msg4 , allMessageBodies ); } public void testAjaxClientMayUseSelectors() throws Exception { LOG debug( *** testAjaxClientMayUseSelectors *** ); Message msg = session createTextMessage( test one ); msg setStringProperty( filter , one ); producer send( msg ); msg = session createTextMessage( test two ); msg setStringProperty( filter , two ); producer send( msg ); HttpClient httpClient = new HttpClient(); httpClient start(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); LOG debug( SENDING LISTEN ); AjaxTestContentExchange contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=queue contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); contentExchange setRequestHeader( selector , filter= two ); httpClient send(contentExchange); contentExchange waitForDone(); String jsessionid = contentExchange getJsessionId(); LOG debug( SENDING POLL ); AjaxTestContentExchange poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); poll waitForDone(); LOG debug( poll getResponseContent() ); String expected = <response id= handler destination= queue assertContains( expected, poll getResponseContent() ); } public void testMultipleAjaxClientsMayExistInTheSameSession() throws Exception { LOG debug( *** testMultipleAjaxClientsMayExistInTheSameSession *** ); MessageProducer producerA = session createProducer(session createQueue( testA )); MessageProducer producerB = session createProducer(session createQueue( testB )); producerA send( session createTextMessage( A1 ) ); producerA send( session createTextMessage( A2 ) ); producerB send( session createTextMessage( B1 ) ); producerB send( session createTextMessage( B2 ) ); HttpClient httpClient = new HttpClient(); httpClient start(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); LOG debug( SENDING LISTEN ); AjaxTestContentExchange contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=queue type=listen& + message=handlerA& + clientId=clientA ) ); contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); String jsessionid = contentExchange getJsessionId(); contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestHeader( Cookie , jsessionid ); contentExchange setRequestContent( new ByteArrayBuffer( destination=queue type=listen& + message=handlerB& + clientId=clientB ) ); contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); AjaxTestContentExchange poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); poll waitForDone(); LOG debug( clientA response + poll getResponseContent() ); String expected1 = <response id= handlerA destination= queue String expected2 = <response id= handlerA destination= queue assertContains( expected1, poll getResponseContent() ); assertContains( expected2, poll getResponseContent() ); poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); poll waitForDone(); LOG debug( clientB response + poll getResponseContent() ); expected1 = <response id= handlerB destination= queue expected2 = <response id= handlerB destination= queue assertContains( expected1, poll getResponseContent() ); assertContains( expected2, poll getResponseContent() ); } public void testAjaxClientReceivesMessagesForMultipleTopics() throws Exception { LOG debug( *** testAjaxClientReceivesMessagesForMultipleTopics *** ); HttpClient httpClient = new HttpClient(); httpClient start(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); LOG debug( SENDING LISTEN FOR /topic/topicA ); AjaxTestContentExchange contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=topic contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); String jsessionid = contentExchange getJsessionId(); LOG debug( SENDING LISTEN FOR /topic/topicB ); contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=topic contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); contentExchange setRequestHeader( Cookie , jsessionid ); httpClient send(contentExchange); contentExchange waitForDone(); LOG debug( SENDING POLL ); AjaxTestContentExchange poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); LOG debug( SENDING MESSAGES ); contentExchange = new AjaxTestContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestContent( new ByteArrayBuffer( destination=topic d1=topic d2=topic d3=topic ) ); contentExchange setRequestContentType( application/x-www-form-urlencoded; charset=UTF-8 ); httpClient send(contentExchange); contentExchange waitForDone(); LOG debug( DONE POSTING MESSAGES ); poll waitForDone(); String response = poll getResponseContent(); poll = new AjaxTestContentExchange(); poll setMethod( GET ); poll setURL( http poll setRequestHeader( Cookie , jsessionid ); httpClient send( poll ); poll waitForDone(); String fullResponse = response + poll getResponseContent(); LOG debug( full response + fullResponse ); assertContains( <response id= handlerA destination= topic assertContains( <response id= handlerB destination= topic assertContains( <response id= handlerA destination= topic assertContains( <response id= handlerB destination= topic assertResponseCount( 4, fullResponse ); } }",1.0,
3537,3537,data,\smellybot\activemq\activemq-web-demo\src\test\java\org\apache\activemq\web\AjaxTest.,AjaxTestContentExchange,"private class AjaxTestContentExchange extends ContentExchange { private HashMap<String,String> headers; private String responseContent; AjaxTestContentExchange() { super(true); this headers = new HashMap<String,String>(); this responseContent = ; } protected void onResponseContent( Buffer content ) { this responseContent += content toString(); } protected void onResponseHeader( Buffer name, Buffer value ) { headers put( name toString(), value toString() ); } public String getJsessionId() { String cookie = headers get( Set-Cookie ); String[] cookie parts = cookie split( ; ); return cookie parts[0]; } public String getResponseContent() { return responseContent; } }",1.0,
3538,3538,data,\smellybot\activemq\activemq-web-demo\src\test\java\org\apache\activemq\web\JettyServer.,JettyServer,public final class JettyServer { public static final int PORT = 8080; public static final String WEBAPP DIR = src/main/webapp ; public static final String WEBAPP CTX = / ; private JettyServer() { } public static void main(String[] args) throws Exception { BrokerService broker = new BrokerService(); broker setPersistent(false); broker setUseJmx(true); broker addConnector( tcp broker addConnector( stomp broker start(); DefaultQueueSender main(new String[] { FOO BAR }); int port = PORT; if (args length > 0) { String text = args[0]; port = Integer parseInt(text); } System out println( Starting Web Server on port + port); Server server = new Server(); SelectChannelConnector connector = new SelectChannelConnector(); connector setPort(port); connector setServer(server); WebAppContext context = new WebAppContext(); context setResourceBase(WEBAPP DIR); context setContextPath(WEBAPP CTX); context setServer(server); server setHandler(context); server setConnectors(new Connector[] { connector }); server start(); } },1.0,
3539,3539,data,\smellybot\activemq\activemq-web-demo\src\test\java\org\apache\activemq\web\JettyTestSupport.,JettyTestSupport,"public class JettyTestSupport extends TestCase { private static final Logger LOG = LoggerFactory getLogger(JettyTestSupport class); BrokerService broker; Server server; ActiveMQConnectionFactory factory; Connection connection; Session session; MessageProducer producer; URI tcpUri; URI stompUri; protected void setUp() throws Exception { broker = new BrokerService(); broker setBrokerName( amq-broker ); broker setPersistent(false); broker setUseJmx(true); tcpUri = new URI(broker addConnector( tcp stompUri = new URI(broker addConnector( stomp broker start(); broker waitUntilStarted(); server = new Server(); SelectChannelConnector connector = new SelectChannelConnector(); connector setPort(8080); connector setServer(server); WebAppContext context = new WebAppContext(); context setResourceBase( src/main/webapp ); context setContextPath( / ); context setServer(server); server setHandler(context); server setConnectors(new Connector[] { connector }); server start(); waitForJettySocketToAccept( http factory = new ActiveMQConnectionFactory(tcpUri); connection = factory createConnection(); connection start(); session = connection createSession(false, Session AUTO ACKNOWLEDGE); producer = session createProducer(session createQueue( test )); } protected void tearDown() throws Exception { session close(); connection close(); server stop(); broker stop(); broker waitUntilStopped(); } public void waitForJettySocketToAccept(String bindLocation) throws Exception { final URL url = new URL(bindLocation); assertTrue( Jetty endpoint is available , Wait waitFor(new Wait Condition() { public boolean isSatisified() throws Exception { boolean canConnect = false; try { Socket socket = SocketFactory getDefault() createSocket(url getHost(), url getPort()); socket close(); canConnect = true; } catch (Exception e) { LOG warn( verify jetty available, failed to connect to + url + e); } return canConnect; }}, 60 * 1000)); } }",1.0,
3540,3540,data,\smellybot\activemq\activemq-web-demo\src\test\java\org\apache\activemq\web\RestTest.,RestTest,"public class RestTest extends JettyTestSupport { private static final Logger LOG = LoggerFactory getLogger(RestTest class); public void testConsume() throws Exception { producer send(session createTextMessage( test )); LOG info( message sent ); HttpClient httpClient = new HttpClient(); httpClient start(); ContentExchange contentExchange = new ContentExchange(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); contentExchange setURL( http httpClient send(contentExchange); contentExchange waitForDone(); assertEquals( test , contentExchange getResponseContent()); } public void testSubscribeFirst() throws Exception { HttpClient httpClient = new HttpClient(); httpClient start(); ContentExchange contentExchange = new ContentExchange(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); contentExchange setURL( http httpClient send(contentExchange); Thread sleep(1000); producer send(session createTextMessage( test )); LOG info( message sent ); contentExchange waitForDone(); assertEquals( test , contentExchange getResponseContent()); } public void testSelector() throws Exception { TextMessage msg1 = session createTextMessage( test1 ); msg1 setIntProperty( test , 1); producer send(msg1); LOG info( message 1 sent ); TextMessage msg2 = session createTextMessage( test2 ); msg2 setIntProperty( test , 2); producer send(msg2); LOG info( message 2 sent ); HttpClient httpClient = new HttpClient(); httpClient start(); ContentExchange contentExchange = new ContentExchange(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); contentExchange setURL( http contentExchange setRequestHeader( selector , test=2 ); httpClient send(contentExchange); contentExchange waitForDone(); assertEquals( test2 , contentExchange getResponseContent()); } public void testCorrelation() throws Exception { for (int i = 0; i < 200; i++) { String correlId = RESTY + RandomStringUtils randomNumeric(10); TextMessage message = session createTextMessage(correlId); message setStringProperty( correlationId , correlId); message setJMSCorrelationID(correlId); LOG info( Sending + correlId); producer send(message); HttpClient httpClient = new HttpClient(); httpClient start(); ContentExchange contentExchange = new ContentExchange(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); contentExchange setURL( http httpClient send(contentExchange); contentExchange waitForDone(); LOG info( Received [ + contentExchange getResponseStatus() + ] + contentExchange getResponseContent()); assertEquals(200, contentExchange getResponseStatus()); assertEquals(correlId, contentExchange getResponseContent()); } } public void testDisconnect() throws Exception { producer send(session createTextMessage( test )); HttpClient httpClient = new HttpClient(); httpClient start(); ContentExchange contentExchange = new ContentExchange(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); contentExchange setURL( http httpClient send(contentExchange); contentExchange waitForDone(); LOG info( Received [ + contentExchange getResponseStatus() + ] + contentExchange getResponseContent()); contentExchange = new ContentExchange(); contentExchange setMethod( POST ); contentExchange setURL( http httpClient send(contentExchange); contentExchange waitForDone(); httpClient stop(); ObjectName query = new ObjectName( org apache activemq BrokerName=localhost,Type=Subscription,destinationType=Queue,destinationName=test,* ); Set<ObjectName> subs = broker getManagementContext() queryNames(query, null); assertEquals( Consumers not closed , 0 , subs size()); } public void testPost() throws Exception { HttpClient httpClient = new HttpClient(); httpClient start(); ContentExchange contentExchange = new ContentExchange(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); contentExchange setMethod( POST ); contentExchange setURL( http httpClient send(contentExchange); contentExchange waitForDone(); assertTrue( success status , HttpStatus isSuccess(contentExchange getResponseStatus())); ContentExchange contentExchange2 = new ContentExchange(); contentExchange2 setURL( http httpClient send(contentExchange2); contentExchange2 waitForDone(); assertTrue( success status , HttpStatus isSuccess(contentExchange2 getResponseStatus())); } public void testProperties() throws Exception { HttpClient httpClient = new HttpClient(); httpClient start(); ContentExchange contentExchange = new ContentExchange(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); contentExchange setMethod( POST ); contentExchange setURL( http httpClient send(contentExchange); contentExchange waitForDone(); assertTrue( success status , HttpStatus isSuccess(contentExchange getResponseStatus())); ContentExchange contentExchange2 = new ContentExchange(true); contentExchange2 setURL( http httpClient send(contentExchange2); contentExchange2 waitForDone(); assertTrue( success status , HttpStatus isSuccess(contentExchange2 getResponseStatus())); HttpFields fields = contentExchange2 getResponseFields(); assertNotNull( Headers Exist , fields); assertEquals( header value , value , fields getStringField( property )); } public void testAuth() throws Exception { HttpClient httpClient = new HttpClient(); httpClient start(); ContentExchange contentExchange = new ContentExchange(); httpClient setConnectorType(HttpClient CONNECTOR SELECT CHANNEL); contentExchange setMethod( POST ); contentExchange setURL( http contentExchange setRequestHeader( Authorization , Basic YWRtaW46YWRtaW4= ); httpClient send(contentExchange); contentExchange waitForDone(); assertTrue( success status , HttpStatus isSuccess(contentExchange getResponseStatus())); } }",1.0,
3542,3542,data,\smellybot\activemq\activemq-xmpp\src\main\java\org\apache\activemq\transport\xmpp\XmppTransport.,XmppTransport,"public class XmppTransport extends TcpTransport { protected static final QName ATTRIBUTE TO = new QName( to ); private static final transient Logger LOG = LoggerFactory getLogger(XmppTransport class); protected OutputStream outputStream; protected InputStream inputStream; private static JAXBContext context; private XMLEventReader xmlReader; private Unmarshaller unmarshaller; private Marshaller marshaller; private XMLStreamWriter xmlWriter; private String to = client ; private ProtocolConverter converter; private String from = localhost ; private String brokerId = broker-id-1 ; public XmppTransport(WireFormat wireFormat, Socket socket) throws IOException { super(wireFormat, socket); init(); } public XmppTransport(WireFormat wireFormat, SocketFactory socketFactory, URI uri, URI uri1) throws IOException { super(wireFormat, socketFactory, uri, uri1); init(); } private void init() { LOG debug( Creating new instance of XmppTransport ); converter = new ProtocolConverter(this); } Override public void oneway(Object object) throws IOException { if (object instanceof Command) { Command command = (Command)object; if (command instanceof BrokerInfo) { BrokerInfo brokerInfo = (BrokerInfo)command; brokerId = brokerInfo getBrokerId() toString(); from = brokerInfo getBrokerName(); try { writeOpenStream(brokerId, from); } catch (XMLStreamException e) { throw IOExceptionSupport create(e); } } else { try { converter onActiveMQCommand(command); } catch (IOException e) { throw e; } catch (Exception e) { throw IOExceptionSupport create(e); } } } else { LOG warn( Unkown command + object); } } public void marshall(Object command) throws IOException { if (isStopped() || isStopping()) { LOG warn( Not marshalling command as shutting down + command); return; } try { marshaller marshal(command, xmlWriter); xmlWriter flush(); outputStream flush(); } catch (JAXBException e) { throw IOExceptionSupport create(e); } catch (XMLStreamException e) { throw IOExceptionSupport create(e); } } Override public void doRun() throws IOException { LOG debug( XMPP consumer thread starting ); try { XMLInputFactory xif = XMLInputFactory newInstance(); xif setXMLReporter(new XMLReporter() { Override public void report(String message, String errorType, Object relatedInformation, Location location) throws XMLStreamException { LOG warn(message + errorType + errorType + relatedInfo + relatedInformation); } }); xmlReader = xif createXMLEventReader(inputStream); XMLEvent docStart = xmlReader nextEvent(); XMLEvent rootElement = xmlReader nextTag(); if (rootElement instanceof StartElement) { StartElement startElement = (StartElement)rootElement; Attribute toAttribute = startElement getAttributeByName(ATTRIBUTE TO); if (toAttribute != null) { to = toAttribute getValue(); } } while (true) { if (isStopped()) { break; } XMLEvent event = xmlReader peek(); if (event isStartElement()) { Object object = unmarshaller unmarshal(xmlReader); if (object != null) { LOG debug( Unmarshalled new incoming event - + object getClass() getName()); converter onXmppCommand(object); } } else { if (event getEventType() == XMLEvent END ELEMENT) { break; } else if (event getEventType() == XMLEvent END ELEMENT || event getEventType() == XMLEvent END DOCUMENT) { break; } else { xmlReader nextEvent(); } } } } catch (Exception e) { throw IOExceptionSupport create(e); } } public String getFrom() { return from; } Override protected void doStop(ServiceStopper stopper) throws Exception { if (xmlWriter != null) { try { xmlWriter writeEndElement(); xmlWriter writeEndDocument(); xmlWriter close(); } catch (XMLStreamException e) { LOG info( Caught trying to close transport + e, e); } } if (xmlReader != null) { try { xmlReader close(); } catch (XMLStreamException e) { LOG info( Caught trying to close transport + e, e); } } super doStop(stopper); } Override protected void initializeStreams() throws Exception { if ( context == null ) { context = JAXBContext newInstance( jabber server + jabber server dialback + jabber client + jabber iq private + jabber iq auth + jabber iq gateway + jabber iq version + jabber iq roster + jabber iq pass + jabber iq last + jabber iq oob + jabber iq time + storage rosternotes + ietf params xml ns xmpp streams + ietf params xml ns xmpp sasl + ietf params xml ns xmpp stanzas + ietf params xml ns xmpp bind + ietf params xml ns xmpp tls + org jabber protocol muc + org jabber protocol rosterx + org jabber protocol disco info + org jabber protocol disco items + org jabber protocol activity + org jabber protocol amp errors + org jabber protocol amp + org jabber protocol address + org jabber protocol muc user + org jabber protocol muc admin + org jabber etherx streams ); } inputStream = new TcpBufferedInputStream(socket getInputStream(), 8 * 1024); outputStream = new TcpBufferedOutputStream(socket getOutputStream(), 16 * 1024); unmarshaller = context createUnmarshaller(); marshaller = context createMarshaller(); marshaller setProperty(Marshaller JAXB FRAGMENT, true); } protected void writeOpenStream(String id, String from) throws IOException, XMLStreamException { LOG debug( Sending initial stream element ); XMLOutputFactory factory = XMLOutputFactory newInstance(); xmlWriter = factory createXMLStreamWriter(outputStream); xmlWriter writeStartDocument(); xmlWriter writeStartElement( stream , stream , http xmlWriter writeDefaultNamespace( jabber client ); xmlWriter writeNamespace( stream , http xmlWriter writeAttribute( version , 1 0 ); xmlWriter writeAttribute( id , id); if (to == null) { to = client ; } xmlWriter writeAttribute( to , to); xmlWriter writeAttribute( from , from); Features features = new Features(); features getAny() add(new ietf params xml ns xmpp bind ObjectFactory() createBind()); features getAny() add(new ietf params xml ns xmpp session ObjectFactory() createSession( )); marshall(features); LOG debug( Initial stream element sent! ); } }",1.0,
3543,3543,data,\smellybot\activemq\activemq-xmpp\src\main\java\org\apache\activemq\transport\xmpp\XmppTransportFactory.,XmppTransportFactory,"public class XmppTransportFactory extends TcpTransportFactory { Override protected String getDefaultWireFormatType() { return xmpp ; } Override public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { return super compositeConfigure(transport, format, options); } Override protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws IOException { return new XmppTransport(wf, socketFactory, location, localLocation); } Override protected TcpTransportServer createTcpTransportServer(final URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new XmppTransportServer(this, location, serverSocketFactory); } }",1.0,
3544,3544,data,\smellybot\activemq\activemq-xmpp\src\main\java\org\apache\activemq\transport\xmpp\XmppTransportServer.,XmppTransportServer,"public class XmppTransportServer extends TcpTransportServer { public XmppTransportServer(TcpTransportFactory transportFactory, URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { super(transportFactory, location, serverSocketFactory); } Override protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new XmppTransport(format, socket); } }",1.0,
3545,3545,data,\smellybot\activemq\activemq-xmpp\src\main\java\org\apache\activemq\transport\xmpp\XmppWireFormat.,XmppWireFormat,"public class XmppWireFormat implements WireFormat { private int version = 1; public WireFormat copy() { return new XmppWireFormat(); } public ByteSequence marshal(Object command) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream dos = new DataOutputStream(baos); marshal(command, dos); dos close(); return baos toByteSequence(); } public Object unmarshal(ByteSequence packet) throws IOException { ByteArrayInputStream stream = new ByteArrayInputStream(packet); DataInputStream dis = new DataInputStream(stream); return unmarshal(dis); } public void marshal(Object object, DataOutput dataOutput) throws IOException { } public Object unmarshal(DataInput dataInput) throws IOException { return null; } public int getVersion() { return version; } public void setVersion(int version) { this version = version; } public boolean inReceive() { return false; } }",1.0,
3546,3546,data,\smellybot\activemq\activemq-xmpp\src\main\java\org\apache\activemq\transport\xmpp\XmppWireFormatFactory.,XmppWireFormatFactory,public class XmppWireFormatFactory implements WireFormatFactory { public WireFormat createWireFormat() { return new XmppWireFormat(); } },1.0,
3547,3547,data,\smellybot\activemq\activemq-xmpp\src\main\java\org\apache\activemq\transport\xmpp\command\HandlerRegistry.,HandlerRegistry,"public class HandlerRegistry { private Map<Class, Handler> map = new HashMap<Class, Handler>(); public Handler getHandler(Class eventType) { synchronized (map) { return map get(eventType); } } public void registerHandler(Class eventType, Handler handler) { synchronized (map) { map put(eventType, handler); } } }",1.0,
3548,3548,data,\smellybot\activemq\activemq-xmpp\src\test\java\org\apache\activemq\transport\xmpp\XmppBroker.,XmppBroker,public class XmppBroker implements Service { private BrokerService broker = new BrokerService(); public static void main(String[] args) { try { XmppBroker broker = new XmppBroker(); broker start(); System out println( Press any key to terminate ); System in read(); } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } public void start() throws Exception { broker setPersistent(false); broker setUseJmx(false); broker addConnector( xmpp broker start(); } public void stop() throws Exception { broker stop(); } },1.0,
3549,3549,data,\smellybot\activemq\activemq-xmpp\src\test\java\org\apache\activemq\transport\xmpp\XmppTest.,XmppTest,"public class XmppTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(XmppTest class); protected static boolean block; private final XmppBroker broker = new XmppBroker(); private final long sleepTime = 5000; public static void main(String[] args) { block = true; TestRunner run(XmppTest class); } public void testConnect() throws Exception { ConnectionConfiguration config = new ConnectionConfiguration( localhost , 61222); try { XMPPConnection con = new XMPPConnection(config); con connect(); con login( amq-user , amq-pwd ); ChatManager chatManager = con getChatManager(); Chat chat = chatManager createChat( test localhost , new MessageListener() { public void processMessage(Chat chat, Message message) { LOG info( Got XMPP message from chat + chat getParticipant() + message - + message getBody()); } }); for (int i = 0; i < 10; i++) { LOG info( Sending message + i); chat sendMessage( Hello from Message + i); } LOG info( Sent all messages! ); con disconnect(); } catch (XMPPException e) { if (block) { LOG info( Caught + e); e printStackTrace(); } else { throw e; } } if (block) { Thread sleep(20000); LOG info( Press any key to quit! ); System in read(); } LOG info( Done! ); } public void testChat() throws Exception { ConnectionConfiguration config = new ConnectionConfiguration( localhost , 61222); XMPPConnection consumerCon = new XMPPConnection(config); consumerCon connect(); consumerCon login( consumer , consumer ); consumerCon addPacketListener(new XmppLogger( CONSUMER INBOUND ), new PacketFilter() { public boolean accept(Packet packet) { return true; } }); consumerCon addPacketWriterListener(new XmppLogger( CONSUMER OUTBOUND ), new PacketFilter() { public boolean accept(Packet packet) { return true; } }); final ConsumerMessageListener listener = new ConsumerMessageListener(); consumerCon getChatManager() addChatListener(new ChatManagerListener() { public void chatCreated(Chat chat, boolean createdLocally) { chat addMessageListener(listener); } }); XMPPConnection producerCon = new XMPPConnection(config); producerCon connect(); producerCon login( producer , producer ); producerCon addPacketListener(new XmppLogger( PRODUCER INBOUND ), new PacketFilter() { public boolean accept(Packet packet) { return true; } }); producerCon addPacketWriterListener(new XmppLogger( PRODUCER OUTBOUND ), new PacketFilter() { public boolean accept(Packet packet) { return true; } }); Chat chat = producerCon getChatManager() createChat( consumer , new MessageListener() { public void processMessage(Chat chat, Message message) { LOG info( Got XMPP message from chat + chat getParticipant() + message - + message getBody()); } }); for (int i = 0; i < 10; i++) { LOG info( Sending message + i); Message message = new Message( consumer ); message setType(Message Type chat); message setBody( Hello from producer, message + i); chat sendMessage(message); } LOG info( Sent all messages! ); assertTrue( Consumer received - + listener getMessageCount(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return listener getMessageCount() == 10; } })); LOG info( Consumer received - + listener getMessageCount()); } public void testMultiUserChat() throws Exception { LOG info( n n n n n n ); ConnectionConfiguration config = new ConnectionConfiguration( localhost , 61222); XMPPConnection consumerCon = new XMPPConnection(config); consumerCon connect(); consumerCon login( consumer , consumer ); MultiUserChat consumerMuc = new MultiUserChat(consumerCon, muc-test ); consumerMuc join( consumer ); final ConsumerMUCMessageListener listener = new ConsumerMUCMessageListener(); consumerMuc addMessageListener(listener); XMPPConnection producerCon = new XMPPConnection(config); producerCon connect(); producerCon login( producer , producer ); MultiUserChat producerMuc = new MultiUserChat(producerCon, muc-test ); producerMuc join( producer ); for (int i = 0; i < 10; i++) { LOG info( Sending message + i); Message message = producerMuc createMessage(); message setBody( Hello from producer, message + i); producerMuc sendMessage(message); } LOG info( Sent all messages! ); assertTrue( Consumer received - + listener getMessageCount(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return listener getMessageCount() == 10; } })); LOG info( Consumer received - + listener getMessageCount()); } public void addLoggingListeners(String name, XMPPConnection connection) { connection addPacketListener(new XmppLogger(name + INBOUND ), new PacketFilter() { public boolean accept(Packet packet) { return true; } }); connection addPacketWriterListener(new XmppLogger(name + OUTBOUND ), new PacketFilter() { public boolean accept(Packet packet) { return true; } }); } public void testTwoConnections() throws Exception { LOG info( n n n n n n ); ConnectionConfiguration config = new ConnectionConfiguration( localhost , 61222); XMPPConnection consumerCon = new XMPPConnection(config); consumerCon connect(); addLoggingListeners( CONSUMER , consumerCon); consumerCon login( consumer , consumer ); final ConsumerMessageListener listener1 = new ConsumerMessageListener(); consumerCon getChatManager() addChatListener(new ChatManagerListener() { public void chatCreated(Chat chat, boolean createdLocally) { chat addMessageListener(listener1); } }); XMPPConnection producerCon = new XMPPConnection(config); LOG info( Connecting producer and consumer ); producerCon connect(); addLoggingListeners( PRODUCER , producerCon); producerCon login( producer , producer ); Chat chat = producerCon getChatManager() createChat( consumer , new MessageListener() { public void processMessage(Chat chat, Message message) { LOG info( Got XMPP message from chat + chat getParticipant() + message - + message getBody()); } }); for (int i = 0; i < 10; i++) { LOG info( Sending message + i); Message message = new Message( consumer ); message setType(Message Type chat); message setBody( Hello from producer, message + i); chat sendMessage(message); } Thread sleep(sleepTime); XMPPConnection lastguyCon = new XMPPConnection(config); lastguyCon connect(); addLoggingListeners( LASTGUY , consumerCon); lastguyCon login( consumer , consumer ); final ConsumerMessageListener listener2 = new ConsumerMessageListener(); lastguyCon getChatManager() addChatListener(new ChatManagerListener() { public void chatCreated(Chat chat, boolean createdLocally) { chat addMessageListener(listener2); } }); for (int i = 0; i < 10; i++) { LOG info( Sending message + i); Message message = new Message( consumer ); message setType(Message Type chat); message setBody( Hello from producer, message + i); chat sendMessage(message); } LOG info( Sent all messages! ); assertTrue( Consumer received - + listener1 getMessageCount(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return listener1 getMessageCount() == 20; } })); assertTrue( Consumer received - + listener2 getMessageCount(), Wait waitFor(new Wait Condition() { Override public boolean isSatisified() throws Exception { return listener2 getMessageCount() == 10; } })); } class XmppLogger implements PacketListener { private final String direction; public XmppLogger(String direction) { this direction = direction; } public void processPacket(Packet packet) { LOG info(direction + + packet toXML()); } } class ConsumerMUCMessageListener implements PacketListener { private int messageCount=0; public void processPacket(Packet packet) { if ( packet instanceof Message) { LOG info( Received message number + (messageCount++)); } } public int getMessageCount() { return messageCount; } } class ConsumerMessageListener implements MessageListener { private int messageCount=0; public void processMessage(Chat chat, Message message) { LOG info( Received message number + (messageCount++)); } public int getMessageCount() { return messageCount; } } Override protected void setUp() throws Exception { broker start(); } Override protected void tearDown() throws Exception { broker stop(); } }",1.0,
3550,3550,data,\smellybot\activemq\activemq-xmpp\src\test\java\org\apache\activemq\transport\xmpp\XmppTest.,XmppLogger,class XmppLogger implements PacketListener { private final String direction; public XmppLogger(String direction) { this direction = direction; } public void processPacket(Packet packet) { LOG info(direction + + packet toXML()); } },1.0,
3551,3551,data,\smellybot\activemq\activemq-xmpp\src\test\java\org\apache\activemq\transport\xmpp\XmppTest.,ConsumerMUCMessageListener,class ConsumerMUCMessageListener implements PacketListener { private int messageCount=0; public void processPacket(Packet packet) { if ( packet instanceof Message) { LOG info( Received message number + (messageCount++)); } } public int getMessageCount() { return messageCount; } },1.0,
3552,3552,data,\smellybot\activemq\activemq-xmpp\src\test\java\org\apache\activemq\transport\xmpp\XmppTest.,ConsumerMessageListener,"class ConsumerMessageListener implements MessageListener { private int messageCount=0; public void processMessage(Chat chat, Message message) { LOG info( Received message number + (messageCount++)); } public int getMessageCount() { return messageCount; } } Override",1.0,
3553,3553,data,\smellybot\activemq\assembly\src\release\example\src\CommandLineSupport.,CommandLineSupport,"public final class CommandLineSupport { private CommandLineSupport() { } public static String[] setOptions(Object target, String[] args) { ArrayList<String> rc = new ArrayList<String>(); for (int i = 0; i < args length; i++) { if (args[i] == null) { continue; } if (args[i] startsWith( -- )) { String value = true ; String name = args[i] substring(2); int p = name indexOf( = ); if (p > 0) { value = name substring(p + 1); name = name substring(0, p); } if (name length() == 0) { rc add(args[i]); continue; } String propName = convertOptionToPropertyName(name); if (!IntrospectionSupport setProperty(target, propName, value)) { rc add(args[i]); continue; } } } String r[] = new String[rc size()]; rc toArray(r); return r; } private static String convertOptionToPropertyName(String name) { String rc = ; int p = name indexOf( - ); while (p > 0) { rc += name substring(0, p); name = name substring(p + 1); if (name length() > 0) { rc += name substring(0, 1) toUpperCase(); name = name substring(1); } p = name indexOf( - ); } return rc + name; } }",1.0,
3554,3554,data,\smellybot\activemq\assembly\src\release\example\src\ConsumerTool.,ConsumerTool,"public class ConsumerTool extends Thread implements MessageListener, ExceptionListener { private boolean running; private Session session; private Destination destination; private MessageProducer replyProducer; private boolean pauseBeforeShutdown = false; private boolean verbose = true; private int maxiumMessages; private static int parallelThreads = 1; private String subject = TOOL DEFAULT ; private boolean topic; private String user = ActiveMQConnection DEFAULT USER; private String password = ActiveMQConnection DEFAULT PASSWORD; private String url = ActiveMQConnection DEFAULT BROKER URL; private boolean transacted; private boolean durable; private String clientId; private int ackMode = Session AUTO ACKNOWLEDGE; private String consumerName = James ; private long sleepTime; private long receiveTimeOut; private long batch = 10; private long messagesReceived = 0; public static void main(String[] args) { ArrayList<ConsumerTool> threads = new ArrayList(); ConsumerTool consumerTool = new ConsumerTool(); String[] unknown = CommandLineSupport setOptions(consumerTool, args); if (unknown length > 0) { System out println( Unknown options + Arrays toString(unknown)); System exit(-1); } consumerTool showParameters(); for (int threadCount = 1; threadCount <= parallelThreads; threadCount++) { consumerTool = new ConsumerTool(); CommandLineSupport setOptions(consumerTool, args); consumerTool start(); threads add(consumerTool); } while (true) { Iterator<ConsumerTool> itr = threads iterator(); int running = 0; while (itr hasNext()) { ConsumerTool thread = itr next(); if (thread isAlive()) { running++; } } if (running <= 0) { System out println( All threads completed their work ); break; } try { Thread sleep(1000); } catch (Exception e) { } } Iterator<ConsumerTool> itr = threads iterator(); while (itr hasNext()) { ConsumerTool thread = itr next(); } } public void showParameters() { System out println( Connecting to URL + url + ( + user + + password + ) ); System out println( Consuming + (topic topic queue ) + + subject); System out println( Using a + (durable durable non-durable ) + subscription ); System out println( Running + parallelThreads + parallel threads ); } public void run() { try { running = true; ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url); Connection connection = connectionFactory createConnection(); if (durable && clientId != null && clientId length() > 0 && ! null equals(clientId)) { connection setClientID(clientId); } connection setExceptionListener(this); connection start(); session = connection createSession(transacted, ackMode); if (topic) { destination = session createTopic(subject); } else { destination = session createQueue(subject); } replyProducer = session createProducer(null); replyProducer setDeliveryMode(DeliveryMode NON PERSISTENT); MessageConsumer consumer = null; if (durable && topic) { consumer = session createDurableSubscriber((Topic) destination, consumerName); } else { consumer = session createConsumer(destination); } if (maxiumMessages > 0) { consumeMessagesAndClose(connection, session, consumer); } else { if (receiveTimeOut == 0) { consumer setMessageListener(this); } else { consumeMessagesAndClose(connection, session, consumer, receiveTimeOut); } } } catch (Exception e) { System out println( [ + this getName() + ] Caught + e); e printStackTrace(); } } public void onMessage(Message message) { messagesReceived++; try { if (message instanceof TextMessage) { TextMessage txtMsg = (TextMessage) message; if (verbose) { String msg = txtMsg getText(); int length = msg length(); if (length > 50) { msg = msg substring(0, 50) + ; } System out println( [ + this getName() + ] Received + msg + (length + length + ) ); } } else { if (verbose) { System out println( [ + this getName() + ] Received + message + ); } } if (message getJMSReplyTo() != null) { replyProducer send(message getJMSReplyTo(), session createTextMessage( Reply + message getJMSMessageID())); } if (transacted) { if ((messagesReceived % batch) == 0) { System out println( Commiting transaction for last + batch + messages; messages so far = + messagesReceived); session commit(); } } else if (ackMode == Session CLIENT ACKNOWLEDGE) { if ((messagesReceived % batch) == 0) { System out println( Acknowledging last + batch + messages; messages so far = + messagesReceived); message acknowledge(); } } } catch (JMSException e) { System out println( [ + this getName() + ] Caught + e); e printStackTrace(); } finally { if (sleepTime > 0) { try { Thread sleep(sleepTime); } catch (InterruptedException e) { } } } } public synchronized void onException(JMSException ex) { System out println( [ + this getName() + ] JMS Exception occured Shutting down client ); running = false; } synchronized boolean isRunning() { return running; } protected void consumeMessagesAndClose(Connection connection, Session session, MessageConsumer consumer) throws JMSException, IOException { System out println( [ + this getName() + ] We are about to wait until we consume + maxiumMessages + message(s) then we will shutdown ); for (int i = 0; i < maxiumMessages && isRunning();) { Message message = consumer receive(1000); if (message != null) { i++; onMessage(message); } } System out println( [ + this getName() + ] Closing connection ); consumer close(); session close(); connection close(); if (pauseBeforeShutdown) { System out println( [ + this getName() + ] Press return to shut down ); System in read(); } } protected void consumeMessagesAndClose(Connection connection, Session session, MessageConsumer consumer, long timeout) throws JMSException, IOException { System out println( [ + this getName() + ] We will consume messages while they continue to be delivered within + timeout + ms, and then we will shutdown ); Message message; while ((message = consumer receive(timeout)) != null) { onMessage(message); } System out println( [ + this getName() + ] Closing connection ); consumer close(); session close(); connection close(); if (pauseBeforeShutdown) { System out println( [ + this getName() + ] Press return to shut down ); System in read(); } } public void setAckMode(String ackMode) { if ( CLIENT ACKNOWLEDGE equals(ackMode)) { this ackMode = Session CLIENT ACKNOWLEDGE; } if ( AUTO ACKNOWLEDGE equals(ackMode)) { this ackMode = Session AUTO ACKNOWLEDGE; } if ( DUPS OK ACKNOWLEDGE equals(ackMode)) { this ackMode = Session DUPS OK ACKNOWLEDGE; } if ( SESSION TRANSACTED equals(ackMode)) { this ackMode = Session SESSION TRANSACTED; } } public void setClientId(String clientID) { this clientId = clientID; } public void setConsumerName(String consumerName) { this consumerName = consumerName; } public void setDurable(boolean durable) { this durable = durable; } public void setMaxiumMessages(int maxiumMessages) { this maxiumMessages = maxiumMessages; } public void setPauseBeforeShutdown(boolean pauseBeforeShutdown) { this pauseBeforeShutdown = pauseBeforeShutdown; } public void setPassword(String pwd) { this password = pwd; } public void setReceiveTimeOut(long receiveTimeOut) { this receiveTimeOut = receiveTimeOut; } public void setSleepTime(long sleepTime) { this sleepTime = sleepTime; } public void setSubject(String subject) { this subject = subject; } public void setParallelThreads(int parallelThreads) { if (parallelThreads < 1) { parallelThreads = 1; } this parallelThreads = parallelThreads; } public void setTopic(boolean topic) { this topic = topic; } public void setQueue(boolean queue) { this topic = !queue; } public void setTransacted(boolean transacted) { this transacted = transacted; } public void setUrl(String url) { this url = url; } public void setUser(String user) { this user = user; } public void setVerbose(boolean verbose) { this verbose = verbose; } public void setBatch(long batch) { this batch = batch; } }",1.0,
3555,3555,data,\smellybot\activemq\assembly\src\release\example\src\EmbeddedBroker.,EmbeddedBroker,public final class EmbeddedBroker { private EmbeddedBroker() { } public static void main(String[] args) throws Exception { BrokerService broker = new BrokerService(); broker setUseJmx(true); broker addConnector( tcp broker start(); Object lock = new Object(); synchronized (lock) { lock wait(); } } },1.0,
3557,3557,data,\smellybot\activemq\assembly\src\release\example\src\ProducerAndConsumerTool.,ProducerAndConsumerTool,"public class ProducerAndConsumerTool extends ConsumerTool implements MessageListener { public static void main(String[] args) { ConsumerTool consumerTool = new ConsumerTool(); String[] unknown = CommandLineSupport setOptions(consumerTool, args); HashSet<String> set1 = new HashSet<String>(Arrays asList(unknown)); ProducerTool producerTool = new ProducerTool(); unknown = CommandLineSupport setOptions(producerTool, args); HashSet<String> set2 = new HashSet<String>(Arrays asList(unknown)); set1 retainAll(set2); if (set1 size() > 0) { System out println( Unknown options + set1); System exit(-1); } consumerTool run(); producerTool run(); } }",1.0,
3558,3558,data,\smellybot\activemq\assembly\src\release\example\src\ProducerTool.,ProducerTool,"public class ProducerTool extends Thread { private Destination destination; private int messageCount = 10; private long sleepTime; private boolean verbose = true; private int messageSize = 255; private static int parallelThreads = 1; private long timeToLive; private String user = ActiveMQConnection DEFAULT USER; private String password = ActiveMQConnection DEFAULT PASSWORD; private String url = ActiveMQConnection DEFAULT BROKER URL; private String subject = TOOL DEFAULT ; private boolean topic; private boolean transacted; private boolean persistent; private static Object lockResults = new Object(); public static void main(String[] args) { ArrayList<ProducerTool> threads = new ArrayList(); ProducerTool producerTool = new ProducerTool(); String[] unknown = CommandLineSupport setOptions(producerTool, args); if (unknown length > 0) { System out println( Unknown options + Arrays toString(unknown)); System exit(-1); } producerTool showParameters(); for (int threadCount = 1; threadCount <= parallelThreads; threadCount++) { producerTool = new ProducerTool(); CommandLineSupport setOptions(producerTool, args); producerTool start(); threads add(producerTool); } while (true) { Iterator<ProducerTool> itr = threads iterator(); int running = 0; while (itr hasNext()) { ProducerTool thread = itr next(); if (thread isAlive()) { running++; } } if (running <= 0) { System out println( All threads completed their work ); break; } try { Thread sleep(1000); } catch (Exception e) { } } } public void showParameters() { System out println( Connecting to URL + url + ( + user + + password + ) ); System out println( Publishing a Message with size + messageSize + to + (topic topic queue ) + + subject); System out println( Using + (persistent persistent non-persistent ) + messages ); System out println( Sleeping between publish + sleepTime + ms ); System out println( Running + parallelThreads + parallel threads ); if (timeToLive != 0) { System out println( Messages time to live + timeToLive + ms ); } } public void run() { Connection connection = null; try { ActiveMQConnectionFactory connectionFactory = new ActiveMQConnectionFactory(user, password, url); connection = connectionFactory createConnection(); connection start(); Session session = connection createSession(transacted, Session AUTO ACKNOWLEDGE); if (topic) { destination = session createTopic(subject); } else { destination = session createQueue(subject); } MessageProducer producer = session createProducer(destination); if (persistent) { producer setDeliveryMode(DeliveryMode PERSISTENT); } else { producer setDeliveryMode(DeliveryMode NON PERSISTENT); } if (timeToLive != 0) { producer setTimeToLive(timeToLive); } sendLoop(session, producer); System out println( [ + this getName() + ] Done ); synchronized (lockResults) { ActiveMQConnection c = (ActiveMQConnection) connection; System out println( [ + this getName() + ] Results n ); c getConnectionStats() dump(new IndentPrinter()); } } catch (Exception e) { System out println( [ + this getName() + ] Caught + e); e printStackTrace(); } finally { try { connection close(); } catch (Throwable ignore) { } } } protected void sendLoop(Session session, MessageProducer producer) throws Exception { for (int i = 0; i < messageCount || messageCount == 0; i++) { TextMessage message = session createTextMessage(createMessageText(i)); if (verbose) { String msg = message getText(); if (msg length() > 50) { msg = msg substring(0, 50) + ; } System out println( [ + this getName() + ] Sending message + msg + ); } producer send(message); if (transacted) { System out println( [ + this getName() + ] Committing + messageCount + messages ); session commit(); } Thread sleep(sleepTime); } } private String createMessageText(int index) { StringBuffer buffer = new StringBuffer(messageSize); buffer append( Message + index + sent at + new Date()); if (buffer length() > messageSize) { return buffer substring(0, messageSize); } for (int i = buffer length(); i < messageSize; i++) { buffer append( ); } return buffer toString(); } public void setPersistent(boolean durable) { this persistent = durable; } public void setMessageCount(int messageCount) { this messageCount = messageCount; } public void setMessageSize(int messageSize) { this messageSize = messageSize; } public void setPassword(String pwd) { this password = pwd; } public void setSleepTime(long sleepTime) { this sleepTime = sleepTime; } public void setSubject(String subject) { this subject = subject; } public void setTimeToLive(long timeToLive) { this timeToLive = timeToLive; } public void setParallelThreads(int parallelThreads) { if (parallelThreads < 1) { parallelThreads = 1; } this parallelThreads = parallelThreads; } public void setTopic(boolean topic) { this topic = topic; } public void setQueue(boolean queue) { this topic = !queue; } public void setTransacted(boolean transacted) { this transacted = transacted; } public void setUrl(String url) { this url = url; } public void setUser(String user) { this user = user; } public void setVerbose(boolean verbose) { this verbose = verbose; } }",1.0,
3565,3565,data,\smellybot\activemq\assembly\src\release\example\transactions\src\TransactionsDemo.,TransactionsDemo,"public class TransactionsDemo { public static void main(String[] args) { String url = tcp String user = null; String password = null; if (args length >= 1) { url = args[0]; } if (args length >= 2) { user = args[1]; } if (args length >= 3) { password = args[2]; } Retailer r = new Retailer(url, user, password); Vendor v = new Vendor(url, user, password); Supplier s1 = new Supplier( HardDrive , StorageOrderQueue , url, user, password); Supplier s2 = new Supplier( Monitor , MonitorOrderQueue , url, user, password); new Thread(r, Retailer ) start(); new Thread(v, Vendor ) start(); new Thread(s1, Supplier 1 ) start(); new Thread(s2, Supplier 2 ) start(); } }",1.0,
3567,3567,data,\smellybot\activemq\assembly\src\release\example\transactions\src\Vendor.,Order,"public static class Order { private static Map<Integer, Order> pendingOrders = new HashMap<Integer, Order>(); private static int nextOrderNumber = 1; private int orderNumber; private int quantity; private MapMessage monitor = null; private MapMessage storage = null; private MapMessage message; private String status; public Order(MapMessage message) { this orderNumber = nextOrderNumber++; this message = message; try { this quantity = message getInt( Quantity ); } catch (JMSException e) { e printStackTrace(); this quantity = 0; } status = Pending ; pendingOrders put(orderNumber, this); } public Object getStatus() { return status; } public int getOrderNumber() { return orderNumber; } public static int getOutstandingOrders() { return pendingOrders size(); } public static Order getOrder(int number) { return pendingOrders get(number); } public MapMessage getMessage() { return message; } public void processSubOrder(MapMessage message) { String itemName = null; try { itemName = message getString( Item ); } catch (JMSException e) { e printStackTrace(); } if ( Monitor equals(itemName)) { monitor = message; } else if ( HardDrive equals(itemName)) { storage = message; } if (null != monitor && null != storage) { try { if (quantity > monitor getInt( Quantity )) { status = Cancelled ; } else if (quantity > storage getInt( Quantity )) { status = Cancelled ; } else { status = Fulfilled ; } } catch (JMSException e) { e printStackTrace(); status = Cancelled ; } } } }",1.0,
3569,3569,data,\smellybot\activemq\assembly\src\test\java\org\apache\activemq\benchmark\Consumer.,Consumer,"public class Consumer extends BenchmarkSupport implements MessageListener { public Consumer() { } public static void main(String[] args) { Consumer tool = new Consumer(); if (args length > 0) { tool setUrl(args[0]); } if (args length > 1) { tool setTopic(parseBoolean(args[1])); } if (args length > 2) { tool setSubject(args[2]); } if (args length > 3) { tool setDurable(parseBoolean(args[3])); } if (args length > 4) { tool setConnectionCount(Integer parseInt(args[4])); } try { tool run(); } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } public void run() throws JMSException { start(); subscribe(); } protected void subscribe() throws JMSException { for (int i = 0; i < subjects length; i++) { subscribe(subjects[i]); } } protected void subscribe(String subject) throws JMSException { Session session = createSession(); Destination destination = createDestination(session, subject); System out println( Consuming on + destination + of type + destination getClass() getName()); MessageConsumer consumer = null; if (isDurable() && isTopic()) { consumer = session createDurableSubscriber((Topic)destination, getClass() getName()); } else { consumer = session createConsumer(destination); } consumer setMessageListener(this); addResource(consumer); } public void onMessage(Message message) { try { TextMessage textMessage = (TextMessage)message; textMessage getText(); count(1); } catch (JMSException e) { e printStackTrace(); } } }",1.0,
3570,3570,data,\smellybot\activemq\assembly\src\test\java\org\apache\activemq\benchmark\Producer.,Producer,"public class Producer extends BenchmarkSupport { int loops = -1; int loopSize = 1000; private int messageSize = 1000; public Producer() { } public static void main(String[] args) { Producer tool = new Producer(); if (args length > 0) { tool setUrl(args[0]); } if (args length > 1) { tool setTopic(parseBoolean(args[1])); } if (args length > 2) { tool setSubject(args[2]); } if (args length > 3) { tool setDurable(parseBoolean(args[3])); } if (args length > 4) { tool setMessageSize(Integer parseInt(args[4])); } if (args length > 5) { tool setConnectionCount(Integer parseInt(args[5])); } try { tool run(); } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } public void run() throws Exception { start(); publish(); } public int getMessageSize() { return messageSize; } public void setMessageSize(int messageSize) { this messageSize = messageSize; } public int getLoopSize() { return loopSize; } public void setLoopSize(int loopSize) { this loopSize = loopSize; } protected void publish() throws Exception { final String text = getMessage(); System out println( Publishing to + subjects length + subject(s) ); for (int i = 0; i < subjects length; i++) { final String subject = subjects[i]; Thread thread = new Thread() { public void run() { try { publish(text, subject); } catch (JMSException e) { System out println( Caught + e); e printStackTrace(); } } }; thread start(); } } protected String getMessage() { StringBuffer buffer = new StringBuffer(); for (int i = 0; i < messageSize; i++) { char ch = X ; buffer append(ch); } return buffer toString(); } protected void publish(String text, String subject) throws JMSException { Session session = createSession(); Destination destination = createDestination(session, subject); MessageProducer publisher = session createProducer(destination); if (isDurable()) { publisher setDeliveryMode(DeliveryMode PERSISTENT); } else { publisher setDeliveryMode(DeliveryMode NON PERSISTENT); } System out println( Starting publisher on + destination + of type + destination getClass() getName()); System out println( Message length + text length()); if (loops <= 0) { while (true) { publishLoop(session, publisher, text); } } else { for (int i = 0; i < loops; i++) { publishLoop(session, publisher, text); } } } protected void publishLoop(Session session, MessageProducer publisher, String text) throws JMSException { for (int i = 0; i < loopSize; i++) { Message message = session createTextMessage(text); publisher send(message); count(1); } } protected String loadFile(String file) throws IOException { System out println( Loading file + file); StringBuffer buffer = new StringBuffer(); BufferedReader in = new BufferedReader(new FileReader(file)); while (true) { String line = in readLine(); if (line == null) { break; } buffer append(line); buffer append(File separator); } in close(); return buffer toString(); } }",1.0,
3571,3571,data,\smellybot\activemq\assembly\src\test\java\org\apache\activemq\benchmark\ProducerConsumer.,ProducerConsumer,public class ProducerConsumer extends Producer { private Consumer consumer = new Consumer(); public ProducerConsumer() { } public static void main(String[] args) { ProducerConsumer tool = new ProducerConsumer(); if (args length > 0) { tool setUrl(args[0]); } if (args length > 1) { tool setTopic(parseBoolean(args[1])); } if (args length > 2) { tool setSubject(args[2]); } if (args length > 3) { tool setDurable(Boolean getBoolean(args[3])); } if (args length > 4) { tool setConnectionCount(Integer parseInt(args[4])); } try { tool run(); } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } public void run() throws Exception { consumer start(); consumer subscribe(); start(); publish(); } public void setTopic(boolean topic) { super setTopic(topic); consumer setTopic(topic); } public void setSubject(String subject) { super setSubject(subject); consumer setSubject(subject); } public void setUrl(String url) { super setUrl(url); consumer setUrl(url); } protected boolean useTimerLoop() { return false; } },1.0,
3575,3575,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\benchmark\Consumer.,Consumer,"public class Consumer extends BenchmarkSupport implements MessageListener { public Consumer() { } public static void main(String[] args) { Consumer tool = new Consumer(); if (args length > 0) { tool setUrl(args[0]); } if (args length > 1) { tool setTopic(parseBoolean(args[1])); } if (args length > 2) { tool setSubject(args[2]); } if (args length > 3) { tool setDurable(parseBoolean(args[3])); } if (args length > 4) { tool setConnectionCount(Integer parseInt(args[4])); } try { tool run(); } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } public void run() throws JMSException { start(); subscribe(); } protected void subscribe() throws JMSException { for (int i = 0; i < subjects length; i++) { subscribe(subjects[i]); } } protected void subscribe(String subject) throws JMSException { Session session = createSession(); Destination destination = createDestination(session, subject); System out println( Consuming on + destination + of type + destination getClass() getName()); MessageConsumer consumer = null; if (isDurable() && isTopic()) { consumer = session createDurableSubscriber((Topic)destination, getClass() getName()); } else { consumer = session createConsumer(destination); } consumer setMessageListener(this); addResource(consumer); } public void onMessage(Message message) { try { TextMessage textMessage = (TextMessage)message; textMessage getText(); count(1); } catch (JMSException e) { e printStackTrace(); } } }",1.0,
3576,3576,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\benchmark\Producer.,Producer,"public class Producer extends BenchmarkSupport { int loops = -1; int loopSize = 1000; private int messageSize = 1000; public Producer() { } public static void main(String[] args) { Producer tool = new Producer(); if (args length > 0) { tool setUrl(args[0]); } if (args length > 1) { tool setTopic(parseBoolean(args[1])); } if (args length > 2) { tool setSubject(args[2]); } if (args length > 3) { tool setDurable(parseBoolean(args[3])); } if (args length > 4) { tool setMessageSize(Integer parseInt(args[4])); } if (args length > 5) { tool setConnectionCount(Integer parseInt(args[5])); } try { tool run(); } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } public void run() throws Exception { start(); publish(); } public int getMessageSize() { return messageSize; } public void setMessageSize(int messageSize) { this messageSize = messageSize; } public int getLoopSize() { return loopSize; } public void setLoopSize(int loopSize) { this loopSize = loopSize; } protected void publish() throws Exception { final String text = getMessage(); System out println( Publishing to + subjects length + subject(s) ); for (int i = 0; i < subjects length; i++) { final String subject = subjects[i]; Thread thread = new Thread() { public void run() { try { publish(text, subject); } catch (JMSException e) { System out println( Caught + e); e printStackTrace(); } } }; thread start(); } } protected String getMessage() { StringBuffer buffer = new StringBuffer(); for (int i = 0; i < messageSize; i++) { char ch = X ; buffer append(ch); } return buffer toString(); } protected void publish(String text, String subject) throws JMSException { Session session = createSession(); Destination destination = createDestination(session, subject); MessageProducer publisher = session createProducer(destination); if (isDurable()) { publisher setDeliveryMode(DeliveryMode PERSISTENT); } else { publisher setDeliveryMode(DeliveryMode NON PERSISTENT); } System out println( Starting publisher on + destination + of type + destination getClass() getName()); System out println( Message length + text length()); if (loops <= 0) { while (true) { publishLoop(session, publisher, text); } } else { for (int i = 0; i < loops; i++) { publishLoop(session, publisher, text); } } } protected void publishLoop(Session session, MessageProducer publisher, String text) throws JMSException { for (int i = 0; i < loopSize; i++) { Message message = session createTextMessage(text); publisher send(message); count(1); } } protected String loadFile(String file) throws IOException { System out println( Loading file + file); StringBuffer buffer = new StringBuffer(); BufferedReader in = new BufferedReader(new FileReader(file)); while (true) { String line = in readLine(); if (line == null) { break; } buffer append(line); buffer append(File separator); } in close(); return buffer toString(); } public int getLoops() { return loops; } public void setLoops(int loops) { this loops = loops; } }",1.0,
3577,3577,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\benchmark\ProducerConsumer.,ProducerConsumer,public class ProducerConsumer extends Producer { private Consumer consumer = new Consumer(); public ProducerConsumer() { } public static void main(String[] args) { ProducerConsumer tool = new ProducerConsumer(); if (args length > 0) { tool setUrl(args[0]); } if (args length > 1) { tool setTopic(parseBoolean(args[1])); } if (args length > 2) { tool setSubject(args[2]); } if (args length > 3) { tool setDurable(Boolean getBoolean(args[3])); } if (args length > 4) { tool setConnectionCount(Integer parseInt(args[4])); } try { tool run(); } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } public void run() throws Exception { consumer start(); consumer subscribe(); start(); publish(); } public void setTopic(boolean topic) { super setTopic(topic); consumer setTopic(topic); } public void setSubject(String subject) { super setSubject(subject); consumer setSubject(subject); } public void setUrl(String url) { super setUrl(url); consumer setUrl(url); } protected boolean useTimerLoop() { return false; } public Consumer getConsumer() { return consumer; } },1.0,
3579,3579,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\tool\AcidTestTool.,ProducerWorker,"private final class ProducerWorker implements Worker { private Session session; private MessageProducer producer; private BytesMessage message; private CountDownLatch doneLatch = new CountDownLatch(1); ProducerWorker(Session session, String workerId) throws JMSException { this session = session; producer = session createProducer(target); producer setDeliveryMode(DeliveryMode PERSISTENT); message = session createBytesMessage(); message setStringProperty( workerId , workerId); message writeBytes(data); } public void run() { try { for (int batchId = 0; true; batchId++) { for (int msgId = 0; msgId < batchSize; msgId++) { try { Thread sleep(random nextInt(workerThinkTime)); } catch (InterruptedException e1) { return; } message setIntProperty( batch-id , batchId); message setIntProperty( msg-id , msgId); producer send(message); } session commit(); publishedBatches incrementAndGet(); } } catch (JMSException e) { if (!ignoreJMSErrors get()) { e printStackTrace(); errors add(e); } return; } catch (Throwable e) { e printStackTrace(); errors add(e); return; } finally { System out println( Producer exiting ); doneLatch countDown(); } } public boolean waitForExit(long i) throws InterruptedException { return doneLatch await(i, TimeUnit MILLISECONDS); } }",1.0,
3580,3580,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\tool\AcidTestTool.,ConsumerWorker,"private final class ConsumerWorker implements Worker { private Session session; private MessageConsumer consumer; private final long timeout; private CountDownLatch doneLatch = new CountDownLatch(1); ConsumerWorker(Session session, String workerId, long timeout) throws JMSException { this session = session; this timeout = timeout; consumer = session createConsumer(target, workerId= + workerId + ); } public void run() { try { int batchId = 0; while (true) { for (int msgId = 0; msgId < batchSize; msgId++) { try { Thread sleep(random nextInt(workerThinkTime)); } catch (InterruptedException e1) { return; } Message message = consumer receive(timeout); if (msgId > 0) { assertNotNull(message); assertEquals(message getIntProperty( batch-id ), batchId); assertEquals(message getIntProperty( msg-id ), msgId); } else { if (message == null) { System out println( At end of batch an don t have a next batch to process done ); return; } assertEquals(msgId, message getIntProperty( msg-id )); batchId = message getIntProperty( batch-id ); } } session commit(); consumedBatches incrementAndGet(); } } catch (JMSException e) { if (!ignoreJMSErrors get()) { e printStackTrace(); errors add(e); } return; } catch (Throwable e) { e printStackTrace(); errors add(e); return; } finally { System out println( Consumer exiting ); doneLatch countDown(); } } public boolean waitForExit(long i) throws InterruptedException { return doneLatch await(i, TimeUnit MILLISECONDS); } }",1.0,
3581,3581,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\tool\ConsumerTool.,ConsumerTool,"public class ConsumerTool extends ToolSupport implements MessageListener { protected int count; protected int dumpCount = 10; protected boolean verbose = true; protected int maxiumMessages; private boolean pauseBeforeShutdown; public static void main(String[] args) { ConsumerTool tool = new ConsumerTool(); if (args length > 0) { tool url = args[0]; } if (args length > 1) { tool topic = args[1] equalsIgnoreCase( true ); } if (args length > 2) { tool subject = args[2]; } if (args length > 3) { tool durable = args[3] equalsIgnoreCase( true ); } if (args length > 4) { tool maxiumMessages = Integer parseInt(args[4]); } tool run(); } public void run() { try { System out println( Connecting to URL + url); System out println( Consuming + (topic topic queue ) + + subject); System out println( Using + (durable durable non-durable ) + subscription ); Connection connection = createConnection(); Session session = createSession(connection); MessageConsumer consumer = null; if (durable && topic) { consumer = session createDurableSubscriber((Topic)destination, consumerName); } else { consumer = session createConsumer(destination); } if (maxiumMessages <= 0) { consumer setMessageListener(this); } connection start(); if (maxiumMessages > 0) { consumeMessagesAndClose(connection, session, consumer); } } catch (Exception e) { System out println( Caught + e); e printStackTrace(); } } public void onMessage(Message message) { try { if (message instanceof TextMessage) { TextMessage txtMsg = (TextMessage)message; if (verbose) { String msg = txtMsg getText(); if (msg length() > 50) { msg = msg substring(0, 50) + ; } System out println( Received + msg); } } else { if (verbose) { System out println( Received + message); } } } catch (JMSException e) { System out println( Caught + e); e printStackTrace(); } } protected void consumeMessagesAndClose(Connection connection, Session session, MessageConsumer consumer) throws JMSException, IOException { System out println( We are about to wait until we consume + maxiumMessages + message(s) then we will shutdown ); for (int i = 0; i < maxiumMessages; i++) { Message message = consumer receive(); onMessage(message); } System out println( Closing connection ); consumer close(); session close(); connection close(); if (pauseBeforeShutdown) { System out println( Press return to shut down ); System in read(); } } }",1.0,
3582,3582,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\tool\JndiProducerTool.,JndiProducerTool,"public class JndiProducerTool extends ProducerTool { public static void main(String[] args) { runTool(args, new JndiProducerTool()); } protected Connection createConnection() throws Exception { InitialContext jndiContext = new InitialContext(); ConnectionFactory queueConnectionFactory = (ConnectionFactory) jndiContext lookup( ConnectionFactory ); Connection connection = queueConnectionFactory createConnection(); destination = (Queue) jndiContext lookup(subject); return connection; } }",1.0,
3585,3585,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\tool\WebServer.,WebServer,public final class WebServer { public static final int PORT = 8080; public static final String WEBAPP DIR = src/webapp ; public static final String WEBAPP CTX = / ; private WebServer() { } public static void main(String[] args) throws Exception { Server server = new Server(); Connector context = new SocketConnector(); context setServer(server); context setPort(PORT); String webappDir = WEBAPP DIR; if (args length > 0) { webappDir = args[0]; } WebAppContext webapp = new WebAppContext(); webapp setServer(server); webapp setContextPath(WEBAPP CTX); webapp setResourceBase(webappDir); server setHandler(webapp); server setConnectors(new Connector[] { context }); server start(); } },1.0,
3586,3586,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\util\oxm\AbstractXMLMessageTransformer.,AbstractXMLMessageTransformer,"public abstract class AbstractXMLMessageTransformer extends MessageTransformerSupport { protected MessageTransform transformType; public enum MessageTransform { XML, OBJECT, ADAPTIVE }; public AbstractXMLMessageTransformer() { this(MessageTransform XML); } public AbstractXMLMessageTransformer(MessageTransform transformType) { this transformType = transformType; } public Message consumerTransform(Session session, MessageConsumer consumer, Message message) throws JMSException { switch (transformType) { case XML return (message instanceof TextMessage) textToObject(session, (TextMessage)message) message; case OBJECT return (message instanceof ObjectMessage) objectToText(session, (ObjectMessage)message) message; case ADAPTIVE return (message instanceof TextMessage) textToObject(session, (TextMessage)message) (message instanceof ObjectMessage) objectToText(session, (ObjectMessage)message) message; default } return message; } public Message producerTransform(Session session, MessageProducer producer, Message message) throws JMSException { switch (transformType) { case XML return (message instanceof ObjectMessage) objectToText(session, (ObjectMessage)message) message; case OBJECT return (message instanceof TextMessage) textToObject(session, (TextMessage)message) message; case ADAPTIVE return (message instanceof TextMessage) textToObject(session, (TextMessage)message) (message instanceof ObjectMessage) objectToText(session, (ObjectMessage)message) message; default } return message; } public MessageTransform getTransformType() { return transformType; } public void setTransformType(MessageTransform transformType) { this transformType = transformType; } protected ObjectMessage textToObject(Session session, TextMessage textMessage) throws JMSException { Object object = unmarshall(session, textMessage); if (object instanceof Serializable) { ObjectMessage answer = session createObjectMessage((Serializable)object); copyProperties(textMessage, answer); return answer; } else { throw new JMSException( Object is not serializable + object); } } protected TextMessage objectToText(Session session, ObjectMessage objectMessage) throws JMSException { TextMessage answer = session createTextMessage(marshall(session, objectMessage)); copyProperties(objectMessage, answer); return answer; } protected abstract String marshall(Session session, ObjectMessage objectMessage) throws JMSException; protected abstract Object unmarshall(Session session, TextMessage textMessage) throws JMSException; }",1.0,
3587,3587,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\util\oxm\OXMMessageTransformer.,OXMMessageTransformer,"public class OXMMessageTransformer extends AbstractXMLMessageTransformer { private AbstractMarshaller marshaller; public AbstractMarshaller getMarshaller() { return marshaller; } public void setMarshaller(AbstractMarshaller marshaller) { this marshaller = marshaller; } protected String marshall(Session session, ObjectMessage objectMessage) throws JMSException { try { StringWriter writer = new StringWriter(); Result result = new StreamResult(writer); marshaller marshal(objectMessage getObject(), result); writer flush(); return writer toString(); } catch (Exception e) { throw new JMSException(e getMessage()); } } protected Object unmarshall(Session session, TextMessage textMessage) throws JMSException { try { String text = textMessage getText(); Source source = new StreamSource(new StringReader(text)); return marshaller unmarshal(source); } catch (Exception e) { throw new JMSException(e getMessage()); } } }",1.0,
3588,3588,data,\smellybot\activemq\trash\activemq-optional\src\main\java\org\apache\activemq\util\oxm\XStreamMessageTransformer.,XStreamMessageTransformer,"public class XStreamMessageTransformer extends AbstractXMLMessageTransformer { private XStream xStream; private HierarchicalStreamDriver streamDriver; public XStream getXStream() { if (xStream == null) { xStream = createXStream(); } return xStream; } public void setXStream(XStream xStream) { this xStream = xStream; } public HierarchicalStreamDriver getStreamDriver() { return streamDriver; } public void setStreamDriver(HierarchicalStreamDriver streamDriver) { this streamDriver = streamDriver; } protected XStream createXStream() { return new XStream(); } protected String marshall(Session session, ObjectMessage objectMessage) throws JMSException { Serializable object = objectMessage getObject(); StringWriter buffer = new StringWriter(); HierarchicalStreamWriter out; if (streamDriver != null) { out = streamDriver createWriter(buffer); } else { out = new PrettyPrintWriter(buffer); } getXStream() marshal(object, out); return buffer toString(); } protected Object unmarshall(Session session, TextMessage textMessage) throws JMSException { HierarchicalStreamReader in; if (streamDriver != null) { in = streamDriver createReader(new StringReader(textMessage getText())); } else { in = new XppReader(new StringReader(textMessage getText()), new MXParser()); } return getXStream() unmarshal(in); } }",1.0,
3590,3590,data,\smellybot\activemq\trash\activemq-optional\src\test\java\org\apache\activemq\util\oxm\OXMMessageTransformTest.,OXMMessageTransformTest,public class OXMMessageTransformTest extends AbstractXMLMessageTransformerTest { protected AbstractXMLMessageTransformer createTransformer() { OXMMessageTransformer transformer = new OXMMessageTransformer(); transformer setMarshaller(new XStreamMarshaller()); return transformer; } },1.0,
3592,3592,data,\smellybot\activemq\trash\activemq-optional\src\test\java\org\apache\activemq\util\xstream\SamplePojo.,SamplePojo,"public class SamplePojo implements Serializable { private String name; private String city; public SamplePojo() { } public SamplePojo(String name, String city) { this name = name; this city = city; } public String getCity() { return city; } public void setCity(String city) { this city = city; } public String getName() { return name; } public void setName(String name) { this name = name; } }",1.0,
3595,1,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\console\command\store\amq\AMQJournalToolCommand.,AMQJournalToolCommand,"public class AMQJournalToolCommand implements Command { private CommandContext context; Override public String getName() { return journal-audit ; } Override public String getOneLineDescription() { return Allows you to view records stored in the persistent journal ; } public void execute(List<String> tokens) throws Exception { AMQJournalTool consumerTool = new AMQJournalTool(); String args[] = new String[tokens size()]; tokens toArray(args); String[] directories = CommandLineSupport setOptions(consumerTool, args); for (int i = 0; i < directories length; i++) { consumerTool getDirs() add(new File(directories[i])); } consumerTool execute(); } public void setCommandContext(CommandContext context) { this context = context; } }",,1.0
3604,10,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\ContainerId.,ContainerId,"public class ContainerId implements Externalizable { private static final long serialVersionUID = -8883779541021821943L; private Object key; private String dataContainerName; public ContainerId() { } public ContainerId(Object key, String dataContainerName) { this key = key; this dataContainerName = dataContainerName; } public String getDataContainerName() { return dataContainerName; } public Object getKey() { return key; } public int hashCode() { return key hashCode() ^ dataContainerName hashCode(); } public boolean equals(Object obj) { if (obj == null || obj getClass() != ContainerId class) { return false; } ContainerId other = (ContainerId)obj; return other key equals(this key) && other dataContainerName equals(this dataContainerName); } public void writeExternal(ObjectOutput out) throws IOException { out writeUTF(getDataContainerName()); out writeObject(key); } public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException { dataContainerName = in readUTF(); key = in readObject(); } public String toString() { return CID{ + dataContainerName + + key + } ; } }",,1.0
3636,42,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerEntrySetIterator.,ContainerEntrySetIterator,"public class ContainerEntrySetIterator implements Iterator { private MapContainerImpl container; private Iterator iter; private ContainerMapEntry currentEntry; ContainerEntrySetIterator(MapContainerImpl container, Iterator iter) { this container = container; this iter = iter; } public boolean hasNext() { return iter hasNext(); } public Object next() { currentEntry = (ContainerMapEntry)iter next(); return currentEntry; } public void remove() { if (currentEntry != null) { container remove(currentEntry getKey()); } } }",,1.0
3638,44,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\kaha\impl\container\ContainerKeySetIterator.,ContainerKeySetIterator,public class ContainerKeySetIterator implements Iterator { protected IndexItem nextItem; protected IndexItem currentItem; private MapContainerImpl container; private IndexLinkedList list; ContainerKeySetIterator(MapContainerImpl container) { this container = container; this list = container getInternalList(); this currentItem = list getRoot(); this nextItem = list getNextEntry(currentItem); } public boolean hasNext() { return nextItem != null; } public Object next() { currentItem = nextItem; Object result = container getKey(nextItem); nextItem = list getNextEntry(nextItem); return result; } public void remove() { if (currentItem != null) { container remove(currentItem); if (nextItem != null) { list refreshEntry(nextItem); } } } },,1.0
3669,75,data,\smellybot\activemq\activemq-amq-store\src\main\java\org\apache\activemq\store\amq\AMQJournalToolCommand.,AMQJournalToolCommand,"public class AMQJournalToolCommand implements Command { private CommandContext context; Override public String getName() { return journal-audit ; } Override public String getOneLineDescription() { return Allows you to view records stored in the persistent journal ; } public void execute(List<String> tokens) throws Exception { AMQJournalTool consumerTool = new AMQJournalTool(); String args[] = new String[tokens size()]; tokens toArray(args); String[] directories = CommandLineSupport setOptions(consumerTool, args); for (int i = 0; i < directories length; i++) { consumerTool getDirs() add(new File(directories[i])); } consumerTool execute(); } public void setCommandContext(CommandContext context) { this context = context; } }",,1.0
3712,118,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\LoadTest.,LoadTest,"public class LoadTest extends TestCase { static final int COUNT = 10000; static final int NUM LOADERS = 5; protected String name = load db ; protected KahaStore store; public void testLoad() throws Exception { CountDownLatch start = new CountDownLatch(NUM LOADERS); CountDownLatch stop = new CountDownLatch(NUM LOADERS); for (int i = 0; i < NUM LOADERS; i++) { Loader loader = new Loader( loader + i, store, COUNT, start, stop); loader start(); } stop await(); } protected KahaStore getStore() throws IOException { return (KahaStore)StoreFactory open(name, rw ); } protected void setUp() throws Exception { super setUp(); name = System getProperty( basedir , ) + /target/activemq-data/load db ; StoreFactory delete(name); store = getStore(); } protected void tearDown() throws Exception { super tearDown(); store clear(); store close(); assertTrue(StoreFactory delete(name)); } }",,1.0
3715,121,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\VolumeTest.,VolumeTest,"public class VolumeTest extends TestCase { protected static final int NUMBER = 1; private static final transient Logger LOG = LoggerFactory getLogger(VolumeTest class); protected Store store; protected String name; public void testListVolume() throws Exception { ListContainer container = store getListContainer( volume ); container setMarshaller(Store BYTES MARSHALLER); byte[] data = new byte[10]; for (int i = 0; i < NUMBER; i++) { container add(data); if (i % 100000 == 0) { LOG error( persisted + i); } } int count = 0; for (Iterator i = container iterator(); i hasNext();) { assertNotNull(i next()); count++; if (count % 100000 == 0) { LOG error( retrived + count); } } assertEquals( Different retrieved to stored , NUMBER, count); } protected Store getStore() throws IOException { return StoreFactory open(name, rw ); } protected void setUp() throws Exception { super setUp(); name = System getProperty( basedir , ) + /target/activemq-data/volume-container db ; StoreFactory delete(name); store = StoreFactory open(name, rw ); } protected void tearDown() throws Exception { super tearDown(); if (store != null) { store close(); } assertTrue(StoreFactory delete(name)); } }",,1.0
3718,124,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\async\LocationTest.,LocationTest,"public class LocationTest extends TestCase { private static final transient Logger LOG = LoggerFactory getLogger(LocationTest class); SuppressWarnings( unchecked ) public synchronized void testRecordLocationImplComparison() throws IOException { Location l1 = new Location(); l1 setDataFileId(0); l1 setOffset(5); Location l2 = new Location(l1); l2 setOffset(10); Location l3 = new Location(l2); l3 setDataFileId(2); l3 setOffset(0); assertTrue(l1 compareTo(l2) < 0); ArrayList<RecordLocationFacade> l = new ArrayList<RecordLocationFacade>(); l add(new RecordLocationFacade(l2)); l add(new RecordLocationFacade(l3)); l add(new RecordLocationFacade(l1)); Collections sort(l); LOG debug(l get(0) toString()); assertSame(l get(0) getLocation(), l1); assertSame(l get(1) getLocation(), l2); assertSame(l get(2) getLocation(), l3); } }",,1.0
3725,131,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\kaha\impl\index\hash\HashIndexBenchMark.,HashIndexBenchMark,"public class HashIndexBenchMark extends IndexBenchmark { Override protected Index createIndex(File root, String name) throws Exception { HashIndex index = new HashIndex(root, name, indexManager); index setNumberOfBins(12); index setPageSize(32 * 1024); index setKeyMarshaller(Store STRING MARSHALLER); return index; } }",,1.0
3728,134,data,\smellybot\activemq\activemq-amq-store\src\test\java\org\apache\activemq\store\amq\reader\AMQReaderTest.,AMQReaderTest,"public class AMQReaderTest extends TestCase { public void testIterateArchive() throws Exception{ String resourceName = getClass() getPackage() getName() + File separator + data ; resourceName = resourceName replace( , File separatorChar); Resource resource = new ClassPathResource(resourceName); AMQReader reader = new AMQReader(resource getFile()); for (Message m reader) { assertNotNull(m); } } public void xtestIterateFile() throws Exception{ String resourceName = getClass() getPackage() getName() + File separator + data ; resourceName = resourceName replace( , File separatorChar); Resource resource = new ClassPathResource(resourceName); Set<File> files = AMQReader listDataFiles(resource getFile()); assertNotNull(files); assertTrue(files size() >0); for (File file files) { System err println( READING + file); AMQReader reader = new AMQReader(file); for (Message m reader) { assertNotNull(m); } } } }",,1.0
3738,144,data,\smellybot\activemq\activemq-amqp\src\main\java\org\apache\activemq\transport\amqp\AmqpProtocolConverter.,BaseProducerContext,"abstract class BaseProducerContext extends AmqpDeliveryListener { ByteArrayOutputStream current = new ByteArrayOutputStream(); Override public void onDelivery(Delivery delivery) throws Exception { Receiver receiver = ((Receiver)delivery getLink()); if( !delivery isReadable() ) { System out println( it was not readable! ); return; } if( current==null ) { current = new ByteArrayOutputStream(); } int count; byte data[] = new byte[1024*4]; while( (count = receiver recv(data, 0, data length)) > 0 ) { current write(data, 0, count); } if( count == 0 ) { return; } receiver advance(); Buffer buffer = current toBuffer(); current = null; onMessage(receiver, delivery, buffer); } abstract protected void onMessage(Receiver receiver, Delivery delivery, Buffer buffer) throws Exception; }",,1.0
3750,156,data,\smellybot\activemq\activemq-amqp\src\test\java\org\apache\activemq\transport\amqp\AmqpSslTest.,AmqpSslTest,"public class AmqpSslTest extends AmqpTestSupport { public void startBroker() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super startBroker(); } protected void addAMQPConnector(BrokerService brokerService) throws Exception { brokerService addConnector( amqp+ssl } static class DefaultTrustManager implements X509TrustManager { public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { } public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException { } public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; } } }",,1.0
3769,175,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\DefaultBrokerFactory.,DefaultBrokerFactory,"public class DefaultBrokerFactory implements BrokerFactoryHandler { public BrokerService createBroker(URI brokerURI) throws Exception { CompositeData compositeData = URISupport parseComposite(brokerURI); Map<String, String> params = new HashMap<String, String>(compositeData getParameters()); BrokerService brokerService = new BrokerService(); IntrospectionSupport setProperties(brokerService, params); if (!params isEmpty()) { String msg = There are + params size() + Broker options that couldn t be set on the BrokerService + Check the options are spelled correctly + Unknown parameters=[ + params + ] + This BrokerService cannot be started ; throw new IllegalArgumentException(msg); } if (compositeData getPath() != null) { brokerService setBrokerName(compositeData getPath()); } URI[] components = compositeData getComponents(); for (int i = 0; i < components length; i++) { if ( network equals(components[i] getScheme())) { brokerService addNetworkConnector(components[i] getSchemeSpecificPart()); } else if ( proxy equals(components[i] getScheme())) { brokerService addProxyConnector(components[i] getSchemeSpecificPart()); } else { brokerService addConnector(components[i]); } } return brokerService; } }",,1.0
3777,183,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\PropertiesBrokerFactory.,PropertiesBrokerFactory,"public class PropertiesBrokerFactory implements BrokerFactoryHandler { public BrokerService createBroker(URI brokerURI) throws Exception { Map properties = loadProperties(brokerURI); BrokerService brokerService = createBrokerService(brokerURI, properties); IntrospectionSupport setProperties(brokerService, properties); return brokerService; } protected Map loadProperties(URI brokerURI) throws IOException { String remaining = brokerURI getSchemeSpecificPart(); Properties properties = new Properties(); File file = new File(remaining); InputStream inputStream = null; if (file exists()) { inputStream = new FileInputStream(file); } else { URL url = null; try { url = new URL(remaining); } catch (MalformedURLException e) { inputStream = findResourceOnClassPath(remaining); if (inputStream == null) { throw new IOException( File does not exist + remaining + , could not be found on the classpath and is not a valid URL + e); } } if (inputStream == null && url != null) { inputStream = url openStream(); } } if (inputStream != null) { properties load(inputStream); inputStream close(); } try { Properties systemProperties = System getProperties(); properties putAll(systemProperties); } catch (Exception e) { } return properties; } protected InputStream findResourceOnClassPath(String remaining) { InputStream answer = Thread currentThread() getContextClassLoader() getResourceAsStream(remaining); if (answer == null) { answer = getClass() getClassLoader() getResourceAsStream(remaining); } return answer; } protected BrokerService createBrokerService(URI brokerURI, Map properties) { return new BrokerService(); } }",,1.0
3794,200,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\jmx\CompositeDataHelper.,CompositeDataHelper,"public class CompositeDataHelper { public static Map getTabularMap(CompositeData cdata, String fieldName) { Map map = new HashMap(); appendTabularMap(map, cdata, fieldName); return map; } public static void appendTabularMap(Map map, CompositeData cdata, String fieldName) { Object tabularObject = cdata get(fieldName); if (tabularObject instanceof TabularData) { TabularData tabularData = (TabularData) tabularObject; Collection<CompositeData> values = (Collection<CompositeData>) tabularData values(); for (CompositeData compositeData values) { Object key = compositeData get( key ); Object value = compositeData get( value ); map put(key, value); } } } public static Map getMessageUserProperties(CompositeData cdata) { Map map = new HashMap(); appendTabularMap(map, cdata, CompositeDataConstants STRING PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants BOOLEAN PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants BYTE PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants SHORT PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants INT PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants LONG PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants FLOAT PROPERTIES); appendTabularMap(map, cdata, CompositeDataConstants DOUBLE PROPERTIES); return map; } }",,1.0
3909,315,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\SimpleDispatchPolicy.,SimpleDispatchPolicy,"public class SimpleDispatchPolicy implements DispatchPolicy { public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List<Subscription> consumers) throws Exception { int count = 0; for (Subscription sub consumers) { if (sub getConsumerInfo() isBrowser()) { continue; } if (!sub matches(node, msgContext)) { sub unmatched(node); continue; } sub add(node); count++; } return count > 0; } }",,1.0
3912,318,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\StorePendingDurableSubscriberMessageStoragePolicy.,StorePendingDurableSubscriberMessageStoragePolicy,"public class StorePendingDurableSubscriberMessageStoragePolicy implements PendingDurableSubscriberMessageStoragePolicy { boolean immediatePriorityDispatch = true; boolean useCache = true; public boolean isImmediatePriorityDispatch() { return immediatePriorityDispatch; } public void setImmediatePriorityDispatch(boolean immediatePriorityDispatch) { this immediatePriorityDispatch = immediatePriorityDispatch; } public boolean isUseCache() { return useCache; } public void setUseCache(boolean useCache) { this useCache = useCache; } public PendingMessageCursor getSubscriberPendingMessageCursor(Broker broker,String clientId, String name, int maxBatchSize, DurableTopicSubscription sub) { StoreDurableSubscriberCursor cursor = new StoreDurableSubscriberCursor(broker,clientId, name, maxBatchSize, sub); cursor setUseCache(isUseCache()); cursor setImmediatePriorityDispatch(isImmediatePriorityDispatch()); return cursor; } }",,1.0
3914,320,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\region\policy\StrictOrderDispatchPolicy.,StrictOrderDispatchPolicy,"public class StrictOrderDispatchPolicy implements DispatchPolicy { public boolean dispatch(MessageReference node, MessageEvaluationContext msgContext, List consumers) throws Exception { synchronized (consumers) { int count = 0; for (Iterator iter = consumers iterator(); iter hasNext();) { Subscription sub = (Subscription)iter next(); if (!sub matches(node, msgContext)) { sub unmatched(node); continue; } sub add(node); count++; } return count > 0; } } }",,1.0
3932,338,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\broker\scheduler\JobSupport.,JobSupport,public class JobSupport { public static String getDateTime(long value) { DateFormat dateFormat = new SimpleDateFormat( yyyy-MM-dd HH mm ss ); Date date = new Date(value); return dateFormat format(date); } public static long getDataTime(String value) throws Exception { DateFormat dfm = new SimpleDateFormat( yyyy-MM-dd HH mm ss ); Date date = dfm parse(value); return date getTime(); } },,1.0
3959,365,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\memory\CacheFilter.,CacheFilter,"public class CacheFilter implements Cache { protected final Cache next; public CacheFilter(Cache next) { this next = next; } public Object put(Object key, Object value) { return next put(key, value); } public Object get(Object key) { return next get(key); } public Object remove(Object key) { return next remove(key); } public void close() { next close(); } public int size() { return next size(); } }",,1.0
4020,426,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\security\JaasCertificateSecurityContext.,JaasCertificateSecurityContext,"public class JaasCertificateSecurityContext extends SecurityContext { private Subject subject; private X509Certificate[] certs; public JaasCertificateSecurityContext(String userName, Subject subject, X509Certificate[] certs) { super(userName); this subject = subject; this certs = certs; } public Set<Principal> getPrincipals() { return subject getPrincipals(); } public String getUserName() { if (certs != null && certs length > 0) { return certs[0] getSubjectDN() getName(); } return super getUserName(); } }",,1.0
4047,453,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\TransportFactorySupport.,TransportFactorySupport,"public class TransportFactorySupport { public static TransportServer bind(BrokerService brokerService, URI location) throws IOException { TransportFactory tf = TransportFactory findTransportFactory(location); if( brokerService!=null && tf instanceof BrokerServiceAware) { ((BrokerServiceAware)tf) setBrokerService(brokerService); } try { if( brokerService!=null ) { SslContext setCurrentSslContext(brokerService getSslContext()); } return tf doBind(location); } finally { SslContext setCurrentSslContext(null); } } }",,1.0
4049,455,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\transport\TransportLoggerControl.,TransportLoggerControl,"public class TransportLoggerControl implements TransportLoggerControlMBean { public TransportLoggerControl(ManagementContext managementContext) { } public void disableAllTransportLoggers() { TransportLoggerView disableAllTransportLoggers(); } public void enableAllTransportLoggers() { TransportLoggerView enableAllTransportLoggers(); } public void reloadLog4jProperties() throws Throwable { new BrokerView(null, null) reloadLog4jProperties(); } }",,1.0
4072,478,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\MemoryIntPropertyEditor.,MemoryIntPropertyEditor,"public class MemoryIntPropertyEditor extends PropertyEditorSupport { public void setAsText(String text) throws IllegalArgumentException { Pattern p = Pattern compile( ^ s*( d+) s*(b) s* , Pattern CASE INSENSITIVE); Matcher m = p matcher(text); if (m matches()) { setValue(Integer valueOf(Integer parseInt(m group(1)))); return; } p = Pattern compile( ^ s*( d+) s*k(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Integer valueOf(Integer parseInt(m group(1)) * 1024)); return; } p = Pattern compile( ^ s*( d+) s*m(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Integer valueOf(Integer parseInt(m group(1)) * 1024 * 1024)); return; } p = Pattern compile( ^ s*( d+) s*g(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Integer valueOf(Integer parseInt(m group(1)) * 1024 * 1024 * 1024)); return; } throw new IllegalArgumentException( Could convert not to a memory size + text); } public String getAsText() { Integer value = (Integer)getValue(); return value != null value toString() ; } }",,1.0
4073,479,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\MemoryPropertyEditor.,MemoryPropertyEditor,"public class MemoryPropertyEditor extends PropertyEditorSupport { public void setAsText(String text) throws IllegalArgumentException { Pattern p = Pattern compile( ^ s*( d+) s*(b) s* , Pattern CASE INSENSITIVE); Matcher m = p matcher(text); if (m matches()) { setValue(Long valueOf(Long parseLong(m group(1)))); return; } p = Pattern compile( ^ s*( d+) s*k(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Long valueOf(Long parseLong(m group(1)) * 1024)); return; } p = Pattern compile( ^ s*( d+) s*m(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Long valueOf(Long parseLong(m group(1)) * 1024 * 1024)); return; } p = Pattern compile( ^ s*( d+) s*g(b) s* , Pattern CASE INSENSITIVE); m = p matcher(text); if (m matches()) { setValue(Long valueOf(Long parseLong(m group(1)) * 1024 * 1024 * 1024)); return; } throw new IllegalArgumentException( Could convert not to a memory size + text); } public String getAsText() { Long value = (Long)getValue(); return value != null value toString() ; } }",,1.0
4077,483,data,\smellybot\activemq\activemq-broker\src\main\java\org\apache\activemq\util\ThreadTracker.,Tracker,"class Tracker extends HashMap<Long, Trace> { public void track() { Trace current = new Trace(); synchronized(this) { Trace exist = get(current id); if (exist != null) { exist count++; } else { put(current id, current); } } } }",,1.0
4088,494,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\store\PListTestSupport.,B,"class B implements Runnable { Override public void run() { final String threadName = Thread currentThread() getName(); try { for (int i=0; i<iterations; i++) { PList candidate = lists[i%numLists]; Thread currentThread() setName( ALRF +candidate getName()); synchronized (plistLocks(candidate)) { Object last = candidate addLast(String valueOf(i), payload); getFirst(candidate); assertTrue(candidate remove(last)); } } } catch (Exception error) { error printStackTrace(); exceptions add(error); } finally { Thread currentThread() setName(threadName); } }",,1.0
4096,502,data,\smellybot\activemq\activemq-broker\src\test\java\org\apache\activemq\util\Wait.,Wait,"public class Wait { public static final long MAX WAIT MILLIS = 30*1000; public static final int SLEEP MILLIS = 1000; public interface Condition { boolean isSatisified() throws Exception; } public static boolean waitFor(Condition condition) throws Exception { return waitFor(condition, MAX WAIT MILLIS); } public static boolean waitFor(final Condition condition, final long duration) throws Exception { return waitFor(condition, duration, SLEEP MILLIS); } public static boolean waitFor(final Condition condition, final long duration, final int sleepMillis) throws Exception { final long expiry = System currentTimeMillis() + duration; boolean conditionSatisified = condition isSatisified(); while (!conditionSatisified && System currentTimeMillis() < expiry) { TimeUnit MILLISECONDS sleep(sleepMillis); conditionSatisified = condition isSatisified(); } return conditionSatisified; } }",,1.0
4097,503,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelConnection.,CamelConnection,"public class CamelConnection extends ActiveMQConnection implements CamelContextAware { private CamelContext camelContext; protected CamelConnection(Transport transport, IdGenerator clientIdGenerator, IdGenerator connectionIdGenerator, JMSStatsImpl factoryStats) throws Exception { super(transport, clientIdGenerator, connectionIdGenerator, factoryStats); } public CamelContext getCamelContext() { return camelContext; } public void setCamelContext(CamelContext camelContext) { this camelContext = camelContext; } }",,1.0
4107,513,data,\smellybot\activemq\activemq-camel\src\main\java\org\apache\activemq\camel\CamelTopicSubscriber.,CamelTopicSubscriber,"public class CamelTopicSubscriber extends CamelMessageConsumer implements TopicSubscriber { public CamelTopicSubscriber(CamelTopic destination, Endpoint endpoint, ActiveMQSession session, String name, String messageSelector, boolean noLocal) { super(destination, endpoint, session, messageSelector, noLocal); } public Topic getTopic() throws JMSException { checkClosed(); return (Topic) super getDestination(); } public boolean getNoLocal() throws JMSException { checkClosed(); return super isNoLocal(); } }",,1.0
4118,524,data,\smellybot\activemq\activemq-camel\src\test\java\org\apache\activemq\camel\CamelEmbeddedBrokerTestSupport.,CamelEmbeddedBrokerTestSupport,"public abstract class CamelEmbeddedBrokerTestSupport extends EmbeddedBrokerTestSupport { protected CamelContext camelContext; protected ProducerTemplate template; Override protected void setUp() throws Exception { bindAddress = tcp super setUp(); camelContext = createCamelContext(); addCamelRoutes(camelContext); assertValidContext(camelContext); camelContext start(); template = camelContext createProducerTemplate(); template start(); } Override protected void tearDown() throws Exception { super tearDown(); if (template != null) { template stop(); } if (camelContext != null) { camelContext stop(); } } protected CamelContext createCamelContext() throws Exception { return new DefaultCamelContext(createJndiContext()); } protected Context createJndiContext() throws Exception { return new JndiContext(new Hashtable()); } protected void addCamelRoutes(CamelContext camelContext) throws Exception { } protected Endpoint resolveMandatoryEndpoint(String uri) { return resolveMandatoryEndpoint(camelContext, uri); } protected <T extends Endpoint> T resolveMandatoryEndpoint(String uri, Class<T> endpointType) { return resolveMandatoryEndpoint(camelContext, uri, endpointType); } protected Endpoint resolveMandatoryEndpoint(CamelContext context, String uri) { Endpoint endpoint = context getEndpoint(uri); assertNotNull( No endpoint found for URI + uri, endpoint); return endpoint; } protected <T extends Endpoint> T resolveMandatoryEndpoint(CamelContext context, String uri, Class<T> endpointType) { T endpoint = context getEndpoint(uri, endpointType); assertNotNull( No endpoint found for URI + uri, endpoint); return endpoint; } protected MockEndpoint getMockEndpoint(String uri) { return resolveMandatoryEndpoint(uri, MockEndpoint class); } protected void assertMockEndpointsSatisifed() throws InterruptedException { MockEndpoint assertIsSatisfied(camelContext); } protected void assertValidContext(CamelContext context) { assertNotNull( No context found! , context); } }",,1.0
4154,560,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQMessageConsumer.,PreviouslyDeliveredMap,"class PreviouslyDeliveredMap<K, V> extends HashMap<K, V> { final TransactionId transactionId; public PreviouslyDeliveredMap(TransactionId transactionId) { this transactionId = transactionId; } }",,1.0
4170,576,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQXAConnection.,ActiveMQXAConnection,"public class ActiveMQXAConnection extends ActiveMQConnection implements XATopicConnection, XAQueueConnection, XAConnection { protected ActiveMQXAConnection(Transport transport, IdGenerator clientIdGenerator, IdGenerator connectionIdGenerator, JMSStatsImpl factoryStats) throws Exception { super(transport, clientIdGenerator, connectionIdGenerator, factoryStats); } public XASession createXASession() throws JMSException { return (XASession) createSession(true, Session SESSION TRANSACTED); } public XATopicSession createXATopicSession() throws JMSException { return (XATopicSession) createSession(true, Session SESSION TRANSACTED); } public XAQueueSession createXAQueueSession() throws JMSException { return (XAQueueSession) createSession(true, Session SESSION TRANSACTED); } public Session createSession(boolean transacted, int acknowledgeMode) throws JMSException { checkClosedOrFailed(); ensureConnectionInfoSent(); return new ActiveMQXASession(this, getNextSessionId(), Session SESSION TRANSACTED, isDispatchAsync()); } }",,1.0
4172,578,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\ActiveMQXASession.,ActiveMQXASession,"public class ActiveMQXASession extends ActiveMQSession implements QueueSession, TopicSession, XAQueueSession, XATopicSession { public ActiveMQXASession(ActiveMQXAConnection connection, SessionId sessionId, int theAcknowlegeMode, boolean dispatchAsync) throws JMSException { super(connection, sessionId, theAcknowlegeMode, dispatchAsync); } public boolean getTransacted() throws JMSException { return getTransactionContext() isInXATransaction(); } public void rollback() throws JMSException { throw new TransactionInProgressException( Cannot rollback() inside an XASession ); } public void commit() throws JMSException { throw new TransactionInProgressException( Cannot commit() inside an XASession ); } public Session getSession() throws JMSException { return this; } public XAResource getXAResource() { return getTransactionContext(); } public QueueSession getQueueSession() throws JMSException { return new ActiveMQQueueSession(this); } public TopicSession getTopicSession() throws JMSException { return new ActiveMQTopicSession(this); } public boolean isAutoAcknowledge() { return true; } protected void doStartTransaction() throws JMSException { } }",,1.0
4206,612,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\blob\FTPBlobUploadStrategy.,FTPBlobUploadStrategy,"public class FTPBlobUploadStrategy extends FTPStrategy implements BlobUploadStrategy { public FTPBlobUploadStrategy(BlobTransferPolicy transferPolicy) throws MalformedURLException { super(transferPolicy); } public URL uploadFile(ActiveMQBlobMessage message, File file) throws JMSException, IOException { return uploadStream(message, new FileInputStream(file)); } public URL uploadStream(ActiveMQBlobMessage message, InputStream in) throws JMSException, IOException { FTPClient ftp = createFTP(); try { String path = url getPath(); String workingDir = path substring(0, path lastIndexOf( / )); String filename = message getMessageId() toString() replaceAll( , ); ftp setFileType(FTPClient BINARY FILE TYPE); String url; if(!ftp changeWorkingDirectory(workingDir)) { url = this url toString() replaceFirst(this url getPath(), )+ / ; } else { url = this url toString(); } if (!ftp storeFile(filename, in)) { throw new JMSException( FTP store failed + ftp getReplyString()); } return new URL(url + filename); } finally { ftp quit(); ftp disconnect(); } } }",,1.0
4225,631,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\BaseCommand.,BaseCommand,"public abstract class BaseCommand implements Command { protected int commandId; protected boolean responseRequired; private transient Endpoint from; private transient Endpoint to; public void copy(BaseCommand copy) { copy commandId = commandId; copy responseRequired = responseRequired; } public int getCommandId() { return commandId; } public void setCommandId(int commandId) { this commandId = commandId; } public boolean isResponseRequired() { return responseRequired; } public void setResponseRequired(boolean responseRequired) { this responseRequired = responseRequired; } Override public String toString() { return toString(null); } public String toString(Map<String, Object>overrideFields) { return IntrospectionSupport toString(this, BaseCommand class, overrideFields); } public boolean isWireFormatInfo() { return false; } public boolean isBrokerInfo() { return false; } public boolean isResponse() { return false; } public boolean isMessageDispatch() { return false; } public boolean isMessage() { return false; } public boolean isMarshallAware() { return false; } public boolean isMessageAck() { return false; } public boolean isMessageDispatchNotification() { return false; } public boolean isShutdownInfo() { return false; } public boolean isConnectionControl() { return false; } public Endpoint getFrom() { return from; } public void setFrom(Endpoint from) { this from = from; } public Endpoint getTo() { return to; } public void setTo(Endpoint to) { this to = to; } }",,1.0
4236,642,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ControlCommand.,ControlCommand,public class ControlCommand extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes CONTROL COMMAND; private String command; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public String getCommand() { return command; } public void setCommand(String command) { this command = command; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processControlCommand(this); } },,1.0
4242,648,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\ExceptionResponse.,ExceptionResponse,public class ExceptionResponse extends Response { public static final byte DATA STRUCTURE TYPE = CommandTypes EXCEPTION RESPONSE; Throwable exception; public ExceptionResponse() { } public ExceptionResponse(Throwable e) { setException(e); } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public Throwable getException() { return exception; } public void setException(Throwable exception) { this exception = exception; } public boolean isException() { return true; } },,1.0
4266,672,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\Response.,Response,public class Response extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes RESPONSE; int correlationId; public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public int getCorrelationId() { return correlationId; } public void setCorrelationId(int responseId) { this correlationId = responseId; } public boolean isResponse() { return true; } public boolean isException() { return false; } public Response visit(CommandVisitor visitor) throws Exception { return null; } },,1.0
4268,674,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\command\SessionInfo.,SessionInfo,"public class SessionInfo extends BaseCommand { public static final byte DATA STRUCTURE TYPE = CommandTypes SESSION INFO; protected SessionId sessionId; public SessionInfo() { sessionId = new SessionId(); } public SessionInfo(ConnectionInfo connectionInfo, long sessionId) { this sessionId = new SessionId(connectionInfo getConnectionId(), sessionId); } public SessionInfo(SessionId sessionId) { this sessionId = sessionId; } public byte getDataStructureType() { return DATA STRUCTURE TYPE; } public SessionId getSessionId() { return sessionId; } public void setSessionId(SessionId sessionId) { this sessionId = sessionId; } public RemoveInfo createRemoveCommand() { RemoveInfo command = new RemoveInfo(getSessionId()); command setResponseRequired(isResponseRequired()); return command; } public Response visit(CommandVisitor visitor) throws Exception { return visitor processAddSession(this); } }",,1.0
4529,935,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\state\ProducerState.,ProducerState,public class ProducerState { final ProducerInfo info; private TransactionState transactionState; public ProducerState(ProducerInfo info) { this info = info; } public String toString() { return info toString(); } public ProducerInfo getInfo() { return info; } public void setTransactionState(TransactionState transactionState) { this transactionState = transactionState; } public TransactionState getTransactionState() { return transactionState; } },,1.0
4533,939,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\thread\DedicatedTaskRunner.,DedicatedTaskRunner,"class DedicatedTaskRunner implements TaskRunner { private static final Logger LOG = LoggerFactory getLogger(DedicatedTaskRunner class); private final Task task; private final Thread thread; private final Object mutex = new Object(); private boolean threadTerminated; private boolean pending; private boolean shutdown; public DedicatedTaskRunner(final Task task, String name, int priority, boolean daemon) { this task = task; thread = new Thread(name) { public void run() { try { runTask(); } finally { LOG trace( Run task done {} , task); } } }; thread setDaemon(daemon); thread setName(name); thread setPriority(priority); thread start(); } public void wakeup() throws InterruptedException { synchronized (mutex) { if (shutdown) { return; } pending = true; mutex notifyAll(); } } public void shutdown(long timeout) throws InterruptedException { LOG trace( Shutdown timeout {} task {} , task); synchronized (mutex) { shutdown = true; pending = true; mutex notifyAll(); if (Thread currentThread() != thread && !threadTerminated) { mutex wait(timeout); } } } public void shutdown() throws InterruptedException { shutdown(0); } final void runTask() { try { while (true) { synchronized (mutex) { pending = false; if (shutdown) { return; } } LOG trace( Running task {} , task); if (!task iterate()) { synchronized (mutex) { if (shutdown) { return; } while (!pending) { mutex wait(); } } } } } catch (InterruptedException e) { Thread currentThread() interrupt(); } finally { synchronized (mutex) { threadTerminated = true; mutex notifyAll(); } } } }",,1.0
4551,957,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\ThreadNameFilter.,ThreadNameFilter,public class ThreadNameFilter extends TransportFilter { public ThreadNameFilter(Transport next) { super(next); } Override public void oneway(Object command) throws IOException { String address =(next!=null next getRemoteAddress() null); if (address!=null) { String name = Thread currentThread() getName(); try { String sendname = name + - SendTo +address; Thread currentThread() setName(sendname); super oneway(command); }finally { Thread currentThread() setName(name); } } else { super oneway(command); } } },,1.0
4563,969,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\DiscoveryAgentFactory.,DiscoveryAgentFactory,"public abstract class DiscoveryAgentFactory { private static final FactoryFinder DISCOVERY AGENT FINDER = new FactoryFinder( META-INF/services/org/apache/activemq/transport/discoveryagent/ ); private static final ConcurrentHashMap<String, DiscoveryAgentFactory> DISCOVERY AGENT FACTORYS = new ConcurrentHashMap<String, DiscoveryAgentFactory>(); private static DiscoveryAgentFactory findDiscoveryAgentFactory(URI uri) throws IOException { String scheme = uri getScheme(); if (scheme == null) { throw new IOException( DiscoveryAgent scheme not specified [ + uri + ] ); } DiscoveryAgentFactory daf = DISCOVERY AGENT FACTORYS get(scheme); if (daf == null) { try { daf = (DiscoveryAgentFactory)DISCOVERY AGENT FINDER newInstance(scheme); DISCOVERY AGENT FACTORYS put(scheme, daf); } catch (Throwable e) { throw IOExceptionSupport create( DiscoveryAgent scheme NOT recognized [ + scheme + ] , e); } } return daf; } public static DiscoveryAgent createDiscoveryAgent(URI uri) throws IOException { DiscoveryAgentFactory tf = findDiscoveryAgentFactory(uri); return tf doCreateDiscoveryAgent(uri); } protected abstract DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException; }",,1.0
4565,971,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\DiscoveryTransportFactory.,DiscoveryTransportFactory,"public class DiscoveryTransportFactory extends FailoverTransportFactory { public Transport createTransport(CompositeData compositeData) throws IOException { Map<String, String> parameters = new HashMap<String, String>(compositeData getParameters()); FailoverTransport failoverTransport = createTransport(parameters); return createTransport(failoverTransport, compositeData, parameters); } public static DiscoveryTransport createTransport(CompositeTransport compositeTransport, CompositeData compositeData, Map<String, String> parameters) throws IOException { DiscoveryTransport transport = new DiscoveryTransport(compositeTransport); IntrospectionSupport setProperties(transport, parameters); transport setParameters(parameters); URI discoveryAgentURI = compositeData getComponents()[0]; DiscoveryAgent discoveryAgent = DiscoveryAgentFactory createDiscoveryAgent(discoveryAgentURI); transport setDiscoveryAgent(discoveryAgent); return transport; } public TransportServer doBind(URI location) throws IOException { throw new IOException( Invalid server URI + location); } }",,1.0
4577,983,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\discovery\zeroconf\ZeroconfDiscoveryAgentFactory.,ZeroconfDiscoveryAgentFactory,"public class ZeroconfDiscoveryAgentFactory extends DiscoveryAgentFactory { protected DiscoveryAgent doCreateDiscoveryAgent(URI uri) throws IOException { try { Map options = URISupport parseParameters(uri); ZeroconfDiscoveryAgent rc = new ZeroconfDiscoveryAgent(); rc setGroup(uri getHost()); IntrospectionSupport setProperties(rc, options); return rc; } catch (Throwable e) { throw IOExceptionSupport create( Could not create discovery agent + uri, e); } } }",,1.0
4583,989,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\fanout\FanoutTransport.,FanoutTransportHandler,"class FanoutTransportHandler extends DefaultTransportListener { private final URI uri; private Transport transport; private int connectFailures; private long reconnectDelay = initialReconnectDelay; private long reconnectDate; public FanoutTransportHandler(URI uri) { this uri = uri; } Override public void onCommand(Object o) { Command command = (Command)o; if (command isResponse()) { Integer id = new Integer(((Response)command) getCorrelationId()); RequestCounter rc = requestMap get(id); if (rc != null) { if (rc ackCount decrementAndGet() <= 0) { requestMap remove(id); transportListenerOnCommand(command); } } else { transportListenerOnCommand(command); } } else { transportListenerOnCommand(command); } } Override public void onException(IOException error) { try { synchronized (reconnectMutex) { if (transport == null || !transport isConnected()) { return; } LOG debug( Transport failed, starting up reconnect task , error); ServiceSupport dispose(transport); transport = null; connectedCount--; if (primary == this) { primary = null; } reconnectTask wakeup(); } } catch (InterruptedException e) { Thread currentThread() interrupt(); if (transportListener != null) { transportListener onException(new InterruptedIOException()); } } } }",,1.0
4584,990,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\fanout\FanoutTransportFactory.,FanoutTransportFactory,"public class FanoutTransportFactory extends TransportFactory { public Transport doConnect(URI location) throws IOException { try { Transport transport = createTransport(location); transport = new MutexTransport(transport); transport = new ResponseCorrelator(transport); return transport; } catch (URISyntaxException e) { throw new IOException( Invalid location + location); } } public Transport doCompositeConnect(URI location) throws IOException { try { return createTransport(location); } catch (URISyntaxException e) { throw new IOException( Invalid location + location); } } public Transport createTransport(URI location) throws IOException, URISyntaxException { CompositeData compositeData = URISupport parseComposite(location); Map<String, String> parameters = compositeData getParameters(); FanoutTransport fanoutTransport = createTransport(parameters); DiscoveryTransport discoveryTransport = DiscoveryTransportFactory createTransport(fanoutTransport, compositeData, parameters); return discoveryTransport; } public FanoutTransport createTransport(Map<String,String> parameters) throws IOException { FanoutTransport transport = new FanoutTransport(); IntrospectionSupport setProperties(transport, parameters); return transport; } public TransportServer doBind(URI location) throws IOException { throw new IOException( Invalid server URI + location); } }",,1.0
4586,992,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\mock\MockTransportFactory.,MockTransportFactory,"public class MockTransportFactory extends TransportFactory { public Transport doConnect(URI location) throws URISyntaxException, Exception { Transport transport = createTransport(URISupport parseComposite(location)); transport = new MutexTransport(transport); transport = new ResponseCorrelator(transport); return transport; } public Transport doCompositeConnect(URI location) throws URISyntaxException, Exception { return createTransport(URISupport parseComposite(location)); } public Transport createTransport(CompositeData compositData) throws Exception { MockTransport transport = new MockTransport(TransportFactory compositeConnect(compositData getComponents()[0])); IntrospectionSupport setProperties(transport, compositData getParameters()); return transport; } public TransportServer doBind(URI location) throws IOException { throw new IOException( This protocol does not support being bound ); } }",,1.0
4599,1005,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\nio\SelectorSelection.,SelectorSelection,"public final class SelectorSelection { private final SelectorWorker worker; private final Listener listener; private int interest; private SelectionKey key; private AtomicBoolean closed = new AtomicBoolean(); public SelectorSelection(final SelectorWorker worker, final SocketChannel socketChannel, Listener listener) throws ClosedChannelException { this worker = worker; this listener = listener; worker addIoTask(new Runnable() { public void run() { try { SelectorSelection this key = socketChannel register(worker selector, 0, SelectorSelection this); } catch (Exception e) { e printStackTrace(); } } }); } public void setInterestOps(int ops) { interest = ops; } public void enable() { worker addIoTask(new Runnable() { public void run() { try { key interestOps(interest); } catch (CancelledKeyException e) { } } }); } public void disable() { worker addIoTask(new Runnable() { public void run() { try { key interestOps(0); } catch (CancelledKeyException e) { } } }); } public void close() { if( closed compareAndSet(false, true) ) { worker addIoTask(new Runnable() { public void run() { try { key cancel(); } catch (CancelledKeyException e) { } worker release(); } }); } } public void onSelect() { listener onSelect(this); } public void onError(Throwable e) { listener onError(this, e); } }",,1.0
4601,1007,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\reliable\DefaultReplayBuffer.,DefaultReplayBuffer,"public class DefaultReplayBuffer implements ReplayBuffer { private static final Logger LOG = LoggerFactory getLogger(DefaultReplayBuffer class); private final int size; private ReplayBufferListener listener; private Map<Integer, Object> map; private int lowestCommandId = 1; private Object lock = new Object(); public DefaultReplayBuffer(int size) { this size = size; map = createMap(size); } public void addBuffer(int commandId, Object buffer) { if (LOG isDebugEnabled()) { LOG debug( Adding command ID + commandId + to replay buffer + this + object + buffer); } synchronized (lock) { int max = size - 1; while (map size() >= max) { Object evictedBuffer = map remove(Integer valueOf(++lowestCommandId)); onEvictedBuffer(lowestCommandId, evictedBuffer); } map put(Integer valueOf(commandId), buffer); } } public void setReplayBufferListener(ReplayBufferListener bufferPoolAdapter) { this listener = bufferPoolAdapter; } public void replayMessages(int fromCommandId, int toCommandId, Replayer replayer) throws IOException { if (replayer == null) { throw new IllegalArgumentException( No Replayer parameter specified ); } if (LOG isDebugEnabled()) { LOG debug( Buffer + this + replaying messages from + fromCommandId + to + toCommandId); } for (int i = fromCommandId; i <= toCommandId; i++) { Object buffer = null; synchronized (lock) { buffer = map get(Integer valueOf(i)); } replayer sendBuffer(i, buffer); } } protected Map<Integer, Object> createMap(int maximumSize) { return new HashMap<Integer, Object>(maximumSize); } protected void onEvictedBuffer(int commandId, Object buffer) { if (listener != null) { listener onBufferDiscarded(commandId, buffer); } } }",,1.0
4607,1013,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\ResponseHolder.,ResponseHolder,public class ResponseHolder { protected Response response; protected Object lock = new Object(); protected boolean notified; public ResponseHolder() { } public void setResponse(Response r) { synchronized (lock) { this response = r; notified = true; lock notify(); } } public Response getResponse() { return getResponse(0); } public Response getResponse(int timeout) { synchronized (lock) { if (!notified) { try { lock wait(timeout); } catch (InterruptedException e) { Thread currentThread() interrupt(); } } } return this response; } public void close() { synchronized (lock) { notified = true; lock notifyAll(); } } },,1.0
4608,1014,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\SslTransport.,SslTransport,"public class SslTransport extends TcpTransport { public SslTransport(WireFormat wireFormat, SSLSocketFactory socketFactory, URI remoteLocation, URI localLocation, boolean needClientAuth) throws IOException { super(wireFormat, socketFactory, remoteLocation, localLocation); if (this socket != null) { ((SSLSocket)this socket) setNeedClientAuth(needClientAuth); } } public SslTransport(WireFormat wireFormat, SSLSocket socket) throws IOException { super(wireFormat, socket); } public void doConsume(Object command) { if (command instanceof ConnectionInfo) { ConnectionInfo connectionInfo = (ConnectionInfo)command; connectionInfo setTransportContext(getPeerCertificates()); } super doConsume(command); } public X509Certificate[] getPeerCertificates() { SSLSocket sslSocket = (SSLSocket)this socket; SSLSession sslSession = sslSocket getSession(); X509Certificate[] clientCertChain; try { clientCertChain = (X509Certificate[])sslSession getPeerCertificates(); } catch (SSLPeerUnverifiedException e) { clientCertChain = null; } return clientCertChain; } public String toString() { return ssl } }",,1.0
4610,1016,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\tcp\SslTransportServer.,SslTransportServer,"public class SslTransportServer extends TcpTransportServer { private boolean needClientAuth; private boolean wantClientAuth; public SslTransportServer(SslTransportFactory transportFactory, URI location, SSLServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { super(transportFactory, location, serverSocketFactory); } public void setNeedClientAuth(boolean needAuth) { this needClientAuth = needAuth; } public boolean getNeedClientAuth() { return this needClientAuth; } public boolean getWantClientAuth() { return this wantClientAuth; } public void setWantClientAuth(boolean wantAuth) { this wantClientAuth = wantAuth; } public void bind() throws IOException { super bind(); if (needClientAuth) { ((SSLServerSocket)this serverSocket) setNeedClientAuth(true); } else if (wantClientAuth) { ((SSLServerSocket)this serverSocket) setWantClientAuth(true); } } protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new SslTransport(format, (SSLSocket)socket); } Override public boolean isSslServer() { return true; } }",,1.0
4623,1029,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\transport\udp\SimpleBufferPool.,SimpleBufferPool,public class SimpleBufferPool implements ByteBufferPool { private int defaultSize; private boolean useDirect; public SimpleBufferPool() { this(false); } public SimpleBufferPool(boolean useDirect) { this useDirect = useDirect; } public synchronized ByteBuffer borrowBuffer() { return createBuffer(); } public void returnBuffer(ByteBuffer buffer) { } public void setDefaultSize(int defaultSize) { this defaultSize = defaultSize; } public boolean isUseDirect() { return useDirect; } public void setUseDirect(boolean useDirect) { this useDirect = useDirect; } public void start() throws Exception { } public void stop() throws Exception { } protected ByteBuffer createBuffer() { if (useDirect) { return ByteBuffer allocateDirect(defaultSize); } else { return ByteBuffer allocate(defaultSize); } } },,1.0
4643,1049,data,\smellybot\activemq\activemq-client\src\main\java\org\apache\activemq\util\InetAddressUtil.,InetAddressUtil,"public class InetAddressUtil { public static String getLocalHostName() throws UnknownHostException { try { return (InetAddress getLocalHost()) getHostName(); } catch (UnknownHostException uhe) { String host = uhe getMessage(); if (host != null) { int colon = host indexOf( ); if (colon > 0) { return host substring(0, colon); } } throw uhe; } } }",,1.0
4667,1073,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\thread\PooledTaskRunnerTest.,IgnoreUncaughtExceptionThreadFactory,"class IgnoreUncaughtExceptionThreadFactory implements ThreadFactory, Thread UncaughtExceptionHandler { ThreadFactory threadFactory = Executors defaultThreadFactory(); public Thread newThread(Runnable r) { Thread thread = threadFactory newThread(r); thread setUncaughtExceptionHandler(this); return thread; } public void uncaughtException(Thread t, Throwable e) { } }",,1.0
4672,1078,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\DataByteArrayOutputStreamTest.,DataByteArrayOutputStreamTest,"public class DataByteArrayOutputStreamTest extends TestCase { public void testResize() throws IOException { int initSize = 64; DataByteArrayOutputStream out = new DataByteArrayOutputStream(); fillOut(out, initSize); out writeBoolean(true); fillOut(out, initSize); out writeByte(1); fillOut(out, initSize); out writeBytes( test ); fillOut(out, initSize); out writeChar( C ); fillOut(out, initSize); out writeChars( test ); fillOut(out, initSize); out writeDouble(3 1416); fillOut(out, initSize); out writeFloat((float)3 1416); fillOut(out, initSize); out writeInt(12345); fillOut(out, initSize); out writeLong(12345); fillOut(out, initSize); out writeShort(1234); fillOut(out, initSize); out writeUTF( test ); fillOut(out, initSize); out write(1234); fillOut(out, initSize); out write(new byte[10], 5, 5); fillOut(out, initSize); out write(new byte[10]); } public void fillOut(DataByteArrayOutputStream out, int size) throws IOException { out restart(size); out write(new byte[size]); } }",,1.0
4673,1079,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\IntrospectionSupportTest.,IntrospectionSupportTest,"public class IntrospectionSupportTest extends TestCase { class DummyClass { private boolean trace; DummyClass(boolean trace) { this trace = trace; } public boolean isTrace() { return trace; } public void setTrace(boolean trace) { this trace = trace; } } public void testSetPropertyPrimitiveWithWrapperValue() { Boolean value = Boolean valueOf(true); DummyClass dummyClass = new DummyClass(false); IntrospectionSupport setProperty(dummyClass, trace , value); assertTrue(dummyClass isTrace()); } }",,1.0
4676,1082,data,\smellybot\activemq\activemq-client\src\test\java\org\apache\activemq\util\MarshallingSupportTest.,MarshallingSupportTest,"public class MarshallingSupportTest extends TestCase { protected void setUp() throws Exception { super setUp(); } protected void tearDown() throws Exception { super tearDown(); } public void testPropertiesToString() throws Exception { Properties props = new Properties(); for (int i = 0; i < 10; i++) { String key = key + i; String value = value + i; props put(key, value); } String str = MarshallingSupport propertiesToString(props); Properties props2 = MarshallingSupport stringToProperties(str); assertEquals(props, props2); } }",,1.0
4691,1097,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\command\DecryptCommand.,DecryptCommand,"public class DecryptCommand extends EncryptCommand { protected String[] helpFile = new String[] { Task Usage Main decrypt --password <password> --input <input> , Description Decrypts given text , , Encrypt Options , --password <password> Password to be used by the encryptor , --input <input> Text to be encrypted , --version Display the version information , -h,- ,--help Display the stop broker help information , }; Override public String getName() { return decrypt ; } Override public String getOneLineDescription() { return Decrypts given text ; } Override protected void runTask(List<String> tokens) throws Exception { if (password == null || input == null) { context printException(new IllegalArgumentException( input and password parameters are mandatory )); return; } encryptor setPassword(password); try { context print( Decrypted text + encryptor decrypt(input)); } catch (EncryptionOperationNotPossibleException e) { context print( ERROR Text cannot be decrypted, check your input and password and try again! ); } } }",,1.0
4720,1126,data,\smellybot\activemq\activemq-console\src\main\java\org\apache\activemq\console\filter\ResultTransformFilter.,ResultTransformFilter,public abstract class ResultTransformFilter implements QueryFilter { private QueryFilter next; protected ResultTransformFilter(QueryFilter next) { this next = next; } public List query(String query) throws Exception { return transformList(next query(query)); } public List<Object> query(List queries) throws Exception { return transformList(next query(queries)); } protected List<Object> transformList(List<Object> result) throws Exception { List<Object> props = new ArrayList<Object>(); for (Iterator<Object> i = result iterator(); i hasNext();) { props add(transformElement(i next())); } return props; } protected abstract Object transformElement(Object obj) throws Exception; },,1.0
4756,1162,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\https\HttpsTransportFactory.,HttpsTransportFactory,"public class HttpsTransportFactory extends HttpTransportFactory { public TransportServer doBind(String brokerId, URI location) throws IOException { return doBind(location); } public TransportServer doBind(URI location) throws IOException { try { Map<String, String> options = new HashMap<String, String>(URISupport parseParameters(location)); HttpsTransportServer result = new HttpsTransportServer(location, this, SslContext getCurrentSslContext()); Map<String, Object> transportOptions = IntrospectionSupport extractProperties(options, transport ); result setTransportOption(transportOptions); return result; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } protected Transport createTransport(URI location, WireFormat wf) throws MalformedURLException { URI uri; try { uri = URISupport removeQuery(location); } catch (URISyntaxException e) { MalformedURLException cause = new MalformedURLException( Error removing query on + location); cause initCause(e); throw cause; } return new HttpsClientTransport(asTextWireFormat(wf), uri); } }",,1.0
4758,1164,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\https\Krb5AndCertsSslSocketConnector.,Krb5AndCertsSslSocketConnector,"public class Krb5AndCertsSslSocketConnector extends SslSocketConnector { public static final List<String> KRB5 CIPHER SUITES = Collections unmodifiableList(Collections singletonList( TLS KRB5 WITH 3DES EDE CBC SHA )); static { System setProperty( https cipherSuites , KRB5 CIPHER SUITES get(0)); } private static final Logger LOG = LoggerFactory getLogger(Krb5AndCertsSslSocketConnector class); private static final String REMOTE PRINCIPAL = remote principal ; public enum MODE { KRB, CERTS, BOTH } private boolean useKrb; private boolean useCerts; public Krb5AndCertsSslSocketConnector() { super(); useKrb = false; useCerts = true; setPasswords(); } public static boolean isKrb(String mode) { return mode == MODE KRB toString() || mode == MODE BOTH toString(); } public void setMode(String mode) { useKrb = mode == MODE KRB toString() || mode == MODE BOTH toString(); useCerts = mode == MODE CERTS toString() || mode == MODE BOTH toString(); logIfDebug( useKerb = + useKrb + , useCerts = + useCerts); } private void setPasswords() { if (!useCerts) { Random r = new Random(); System setProperty( jetty ssl password , String valueOf(r nextLong())); System setProperty( jetty ssl keypassword , String valueOf(r nextLong())); } } Override public SslContextFactory getSslContextFactory() { final SslContextFactory factory = super getSslContextFactory(); if (useCerts) { return factory; } try { SSLContext context = factory getProvider() == null SSLContext getInstance(factory getProtocol()) SSLContext getInstance(factory getProtocol(), factory getProvider()); context init(null, null, null); factory setSslContext(context); } catch (NoSuchAlgorithmException e) { } catch (NoSuchProviderException e) { } catch (KeyManagementException e) { } return factory; } Override protected ServerSocket newServerSocket(String host, int port, int backlog) throws IOException { logIfDebug( Creating new KrbServerSocket for + host); SSLServerSocket ss = null; if (useCerts) ss = (SSLServerSocket) super newServerSocket(host, port, backlog); else { try { ss = (SSLServerSocket) super newServerSocket(host, port, backlog); } catch (Exception e) { LOG warn( Could not create KRB5 Listener , e); throw new IOException( Could not create KRB5 Listener + e toString()); } } if (useKrb) { ss setNeedClientAuth(true); String[] combined; if (useCerts) { String[] certs = ss getEnabledCipherSuites(); combined = new String[certs length + KRB5 CIPHER SUITES size()]; System arraycopy(certs, 0, combined, 0, certs length); System arraycopy(KRB5 CIPHER SUITES toArray(new String[0]), 0, combined, certs length, KRB5 CIPHER SUITES size()); } else { combined = KRB5 CIPHER SUITES toArray(new String[0]); } ss setEnabledCipherSuites(combined); } return ss; }; Override public void customize(EndPoint endpoint, Request request) throws IOException { if (useKrb) { SSLSocket sslSocket = (SSLSocket) endpoint getTransport(); Principal remotePrincipal = sslSocket getSession() getPeerPrincipal(); logIfDebug( Remote principal = + remotePrincipal); request setScheme(HttpSchemes HTTPS); request setAttribute(REMOTE PRINCIPAL, remotePrincipal); if (!useCerts) { String cipherSuite = sslSocket getSession() getCipherSuite(); Integer keySize = Integer valueOf(ServletSSL deduceKeyLength(cipherSuite)); ; request setAttribute( javax servlet request cipher suite , cipherSuite); request setAttribute( javax servlet request key size , keySize); } } if (useCerts) super customize(endpoint, request); } private void logIfDebug(String s) { if (LOG isDebugEnabled()) LOG debug(s); } }",,1.0
4760,1166,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\ws\StompServlet.,StompServlet,"public class StompServlet extends WebSocketServlet { private static final long serialVersionUID = -4716657876092884139L; private TransportAcceptListener listener; public void init() throws ServletException { super init(); listener = (TransportAcceptListener)getServletContext() getAttribute( acceptListener ); if (listener == null) { throw new ServletException( No such attribute acceptListener available in the ServletContext ); } } protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException ,IOException { getServletContext() getNamedDispatcher( default ) forward(request,response); } Override public WebSocket doWebSocketConnect(HttpServletRequest request, String protocol) { StompSocket socket = new StompSocket(); listener onAccept(socket); return socket; } }",,1.0
4762,1168,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\ws\WSTransportFactory.,WSTransportFactory,"public class WSTransportFactory extends TransportFactory { public TransportServer doBind(URI location) throws IOException { try { Map<String, String> options = new HashMap<String, String>(URISupport parseParameters(location)); WSTransportServer result = new WSTransportServer(location); Map<String, Object> transportOptions = IntrospectionSupport extractProperties(options, ); result setTransportOption(transportOptions); return result; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } }",,1.0
4764,1170,data,\smellybot\activemq\activemq-http\src\main\java\org\apache\activemq\transport\wss\WSSTransportFactory.,WSSTransportFactory,"public class WSSTransportFactory extends TransportFactory { public TransportServer doBind(URI location) throws IOException { try { Map<String, String> options = new HashMap<String, String>(URISupport parseParameters(location)); WSSTransportServer result = new WSSTransportServer(location, SslContext getCurrentSslContext()); Map<String, Object> transportOptions = IntrospectionSupport extractProperties(options, ); result setTransportOption(transportOptions); return result; } catch (URISyntaxException e) { throw IOExceptionSupport create(e); } } }",,1.0
4784,1190,data,\smellybot\activemq\activemq-http\src\test\java\org\apache\activemq\transport\https\HttpsJmsSendAndReceiveTest.,HttpsJmsSendAndReceiveTest,"public class HttpsJmsSendAndReceiveTest extends HttpJmsSendAndReceiveTest { protected void setUp() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/client keystore ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/server keystore ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); super setUp(); } protected String getBrokerURL() { return https } }",,1.0
4804,1210,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\GroupPrincipalTest.,GroupPrincipalTest,"public class GroupPrincipalTest extends TestCase { public void testArguments() { GroupPrincipal principal = new GroupPrincipal( FOO ); assertEquals( FOO , principal getName()); try { new GroupPrincipal(null); fail( Should have thrown IllegalArgumentException ); } catch (IllegalArgumentException ingore) { } } public void testHash() { GroupPrincipal p1 = new GroupPrincipal( FOO ); GroupPrincipal p2 = new GroupPrincipal( FOO ); assertEquals(p1 hashCode(), p1 hashCode()); assertEquals(p1 hashCode(), p2 hashCode()); } public void testEquals() { GroupPrincipal p1 = new GroupPrincipal( FOO ); GroupPrincipal p2 = new GroupPrincipal( FOO ); GroupPrincipal p3 = new GroupPrincipal( BAR ); assertTrue(p1 equals(p1)); assertTrue(p1 equals(p2)); assertFalse(p1 equals(null)); assertFalse(p1 equals( FOO )); assertFalse(p1 equals(p3)); } }",,1.0
4812,1218,data,\smellybot\activemq\activemq-jaas\src\test\java\org\apache\activemq\jaas\UserPrincipalTest.,UserPrincipalTest,"public class UserPrincipalTest extends TestCase { public void testArguments() { UserPrincipal principal = new UserPrincipal( FOO ); assertEquals( FOO , principal getName()); try { new UserPrincipal(null); fail( Should have thrown IllegalArgumentException ); } catch (IllegalArgumentException ingore) { } } public void testHash() { UserPrincipal p1 = new UserPrincipal( FOO ); UserPrincipal p2 = new UserPrincipal( FOO ); assertEquals(p1 hashCode(), p1 hashCode()); assertEquals(p1 hashCode(), p2 hashCode()); } public void testEquals() { UserPrincipal p1 = new UserPrincipal( FOO ); UserPrincipal p2 = new UserPrincipal( FOO ); UserPrincipal p3 = new UserPrincipal( BAR ); assertTrue(p1 equals(p1)); assertTrue(p1 equals(p2)); assertFalse(p1 equals(null)); assertFalse(p1 equals( FOO )); assertFalse(p1 equals(p3)); } }",,1.0
4818,1224,data,\smellybot\activemq\activemq-jdbc-store\src\main\java\org\apache\activemq\store\jdbc\JDBCMessageStore.,Duration,class Duration { static final int LIMIT = 100; final long start = System currentTimeMillis(); final String name; Duration(String name) { this name = name; } void end() { end(null); } void end(Object o) { long duration = System currentTimeMillis() - start; if (duration > LIMIT) { System err println(name + took a long time + duration + ms + o); } } },,1.0
4895,1301,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,MessageRecord,"static class MessageRecord { final String messageId; final ByteSequence data; public MessageRecord(String messageId, ByteSequence location) { this messageId=messageId; this data=location; } Override public String toString() { return [ +messageId+ , +data+ ] ; } }",,1.0
4900,1306,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\TempMessageDatabase.,KahaSubscriptionCommandMarshaller,"static class KahaSubscriptionCommandMarshaller extends VariableMarshaller<KahaSubscriptionCommand> { final static KahaSubscriptionCommandMarshaller INSTANCE = new KahaSubscriptionCommandMarshaller(); public KahaSubscriptionCommand readPayload(DataInput dataIn) throws IOException { KahaSubscriptionCommand rc = new KahaSubscriptionCommand(); rc mergeFramed((InputStream)dataIn); return rc; } public void writePayload(KahaSubscriptionCommand object, DataOutput dataOut) throws IOException { object writeFramed((OutputStream)dataOut); } }",,1.0
4921,1327,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\index\HashBin.,Marshaller,"static public class Marshaller<Key, Value> extends VariableMarshaller<HashBin<Key, Value>> { private final HashIndex<Key, Value> hashIndex; public Marshaller(HashIndex<Key, Value> index) { this hashIndex = index; } public HashBin<Key, Value> readPayload(DataInput is) throws IOException { HashBin<Key, Value> bin = new HashBin<Key, Value>(); int size = is readInt(); for(int i=0; i < size; i++) { Key key = hashIndex getKeyMarshaller() readPayload(is); Value value = hashIndex getValueMarshaller() readPayload(is); bin data put(key, value); } return bin; } public void writePayload(HashBin<Key, Value> bin, DataOutput os) throws IOException { os writeInt(bin data size()); for (Map Entry<Key, Value> entry bin data entrySet()) { hashIndex getKeyMarshaller() writePayload(entry getKey(), os); hashIndex getValueMarshaller() writePayload(entry getValue(), os); } } }",,1.0
4944,1350,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\disk\journal\ReadOnlyDataFile.,ReadOnlyDataFile,"public class ReadOnlyDataFile extends DataFile { ReadOnlyDataFile(File file, int number, int preferedSize) { super(file, number, preferedSize); } public RandomAccessFile openRandomAccessFile(boolean appender) throws IOException { return new RandomAccessFile(file, r ); } public void closeRandomAccessFile(RandomAccessFile file) throws IOException { file close(); } public synchronized boolean delete() throws IOException { throw new RuntimeException( Not valid on a read only file ); } public synchronized void move(File targetDirectory) throws IOException{ throw new RuntimeException( Not valid on a read only file ); } }",,1.0
4985,1391,data,\smellybot\activemq\activemq-kahadb-store\src\main\java\org\apache\activemq\store\kahadb\scheduler\JobSchedulerImpl.,ScheduleTime,static class ScheduleTime { private final int DEFAULT WAIT = 500; private final int DEFAULT NEW JOB WAIT = 100; private boolean newJob; private long waitTime = DEFAULT WAIT; private final Object mutex = new Object(); long getWaitTime() { return this waitTime; } void setWaitTime(long waitTime) { if (!this newJob) { this waitTime = waitTime > 0 waitTime DEFAULT WAIT; } } void pause() { synchronized (mutex) { try { mutex wait(this waitTime); } catch (InterruptedException e) { } } } void newJob() { this newJob = true; this waitTime = DEFAULT NEW JOB WAIT; wakeup(); } void clearNewJob() { this newJob = false; } void wakeup() { synchronized (this mutex) { mutex notifyAll(); } } },,1.0
5452,1858,data,\smellybot\activemq\activemq-pool\src\main\java\org\apache\activemq\pool\SessionKey.,SessionKey,"public class SessionKey { private final boolean transacted; private final int ackMode; private int hash; public SessionKey(boolean transacted, int ackMode) { this transacted = transacted; this ackMode = ackMode; hash = ackMode; if (transacted) { hash = 31 * hash + 1; } } public int hashCode() { return hash; } public boolean equals(Object that) { if (this == that) { return true; } if (that instanceof SessionKey) { return equals((SessionKey) that); } return false; } public boolean equals(SessionKey that) { return this transacted == that transacted && this ackMode == that ackMode; } public boolean isTransacted() { return transacted; } public int getAckMode() { return ackMode; } }",,1.0
5534,1940,data,\smellybot\activemq\activemq-spring\src\main\java\org\apache\activemq\xbean\XBeanBrokerService.,XBeanBrokerService,public class XBeanBrokerService extends BrokerService { private boolean start; public XBeanBrokerService() { start = BrokerFactory getStartDefault(); } PostConstruct public void afterPropertiesSet() throws Exception { ensureSystemUsageHasStore(); if (shouldAutostart()) { start(); } } Override protected boolean shouldAutostart() { return start; } private void ensureSystemUsageHasStore() throws IOException { SystemUsage usage = getSystemUsage(); if (usage getStoreUsage() getStore() == null) { usage getStoreUsage() setStore(getPersistenceAdapter()); } if (usage getTempUsage() getStore() == null) { usage getTempUsage() setStore(getTempDataStore()); } if (usage getJobSchedulerUsage() getStore() == null) { usage getJobSchedulerUsage() setStore(getJobSchedulerStore()); } } PreDestroy public void destroy() throws Exception { stop(); } Override public void stop() throws Exception { CachedIntrospectionResults clearClassLoader(getClass() getClassLoader()); super stop(); } public void setStart(boolean start) { this start = start; } },,1.0
5539,1945,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\activemq\spring\SpringTest.,SpringTest,"public class SpringTest extends TestCase { public void testSenderWithSpringXmlEmbeddedPooledBrokerConfiguredViaXml() throws Exception { String config = spring-embedded-pooled xml ; Thread currentThread() setContextClassLoader(SpringTest class getClassLoader()); ClassPathXmlApplicationContext context1 = new ClassPathXmlApplicationContext(config); BrokerService bs1 = (BrokerService) context1 getBean( broker1 ); assertNotNull(bs1); BrokerService bs2 = (BrokerService) context1 getBean( broker2 ); assertNotNull(bs1); assertEquals(bs1, bs2); ClassPathXmlApplicationContext context2 = new ClassPathXmlApplicationContext(config); BrokerService bs3 = (BrokerService) context2 getBean( broker1 ); assertNotNull(bs3); BrokerService bs4 = (BrokerService) context2 getBean( broker2 ); assertNotNull(bs4); assertEquals(bs1, bs3); assertEquals(bs1, bs4); assertTrue(bs1 isStarted()); context2 close(); assertTrue(bs1 isStarted()); context1 close(); assertFalse(bs1 isStarted()); } }",,1.0
5552,1958,data,\smellybot\activemq\activemq-spring\src\test\java\org\apache\bugs\AMQ1730Test.,ValueHolder,private class ValueHolder<T> { private T value; public ValueHolder(T value) { super(); this value = value; } void set(T value) { this value = value; } T get() { return value; } },,1.0
5569,1975,data,\smellybot\activemq\activemq-stomp\src\main\java\org\apache\activemq\transport\stomp\StompNIOTransportFactory.,StompNIOTransportFactory,"public class StompNIOTransportFactory extends NIOTransportFactory implements BrokerServiceAware { private BrokerContext brokerContext = null; protected String getDefaultWireFormatType() { return stomp ; } protected TcpTransportServer createTcpTransportServer(URI location, ServerSocketFactory serverSocketFactory) throws IOException, URISyntaxException { return new TcpTransportServer(this, location, serverSocketFactory) { protected Transport createTransport(Socket socket, WireFormat format) throws IOException { return new StompNIOTransport(format, socket); } }; } protected TcpTransport createTcpTransport(WireFormat wf, SocketFactory socketFactory, URI location, URI localLocation) throws UnknownHostException, IOException { return new StompNIOTransport(wf, socketFactory, location, localLocation); } SuppressWarnings( rawtypes ) Override public Transport serverConfigure(Transport transport, WireFormat format, HashMap options) throws Exception { transport = super serverConfigure(transport, format, options); MutexTransport mutex = transport narrow(MutexTransport class); if (mutex != null) { mutex setSyncOnCommand(true); } return transport; } SuppressWarnings( rawtypes ) public Transport compositeConfigure(Transport transport, WireFormat format, Map options) { transport = new StompTransportFilter(transport, format, brokerContext); IntrospectionSupport setProperties(transport, options); return super compositeConfigure(transport, format, options); } public void setBrokerService(BrokerService brokerService) { this brokerContext = brokerService getBrokerContext(); } Override protected Transport createInactivityMonitor(Transport transport, WireFormat format) { StompInactivityMonitor monitor = new StompInactivityMonitor(transport, format); StompTransportFilter filter = (StompTransportFilter) transport narrow(StompTransportFilter class); filter setInactivityMonitor(monitor); return monitor; } }",,1.0
5612,2018,data,\smellybot\activemq\activemq-tooling\activemq-memtest-maven-plugin\src\main\java\org\apache\activemq\tool\MemConsumer.,MemConsumer,"public class MemConsumer extends MemMessageIdList implements MessageListener { static long ctr; protected Connection connection; protected MessageConsumer consumer; protected long counter; protected boolean isParent; protected boolean inOrder = true; public MemConsumer() { super(); } public MemConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException { connection = fac createConnection(); Session s = connection createSession(false, Session AUTO ACKNOWLEDGE); if (dest instanceof Topic && consumerName != null && consumerName length() > 0) { consumer = s createDurableSubscriber((Topic) dest, consumerName); } else { consumer = s createConsumer(dest); } consumer setMessageListener(this); } public MemConsumer(ConnectionFactory fac, Destination dest) throws JMSException { this(fac, dest, null); } public void start() throws JMSException { connection start(); } public void stop() throws JMSException { connection stop(); } public void shutDown() throws JMSException { connection close(); } public Message receive() throws JMSException { return consumer receive(); } public Message receive(long wait) throws JMSException { return consumer receive(wait); } public void onMessage(Message msg) { super onMessage(msg); if (isParent) { try { long ctr = msg getLongProperty( counter ); if (counter != ctr) { inOrder = false; } counter++; } catch (Exception e) { e printStackTrace(); } } } public boolean isInOrder() { return inOrder; } public void setAsParent(boolean isParent) { this isParent = isParent; } public boolean isParent() { return this isParent; } }",,1.0
5622,2028,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\AbstractJmsMeasurableClient.,AbstractJmsMeasurableClient,public abstract class AbstractJmsMeasurableClient extends AbstractJmsClient implements MeasurableClient { protected AtomicLong throughput = new AtomicLong(0); public AbstractJmsMeasurableClient(ConnectionFactory factory) { super(factory); } public void reset() { setThroughput(0); } public long getThroughput() { return throughput get(); } public void setThroughput(long val) { throughput set(val); } public void incThroughput() { throughput incrementAndGet(); } public void incThroughput(long val) { throughput addAndGet(val); } },,1.0
5644,2050,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\main\java\org\apache\activemq\tool\sampler\ThroughputSamplerTask.,ThroughputSamplerTask,"public class ThroughputSamplerTask extends AbstractPerformanceSampler { private final Object mutex = new Object(); private List<MeasurableClient> clients = new ArrayList<MeasurableClient>(); public void registerClient(MeasurableClient client) { synchronized (mutex) { clients add(client); } } public void sampleData() { for (Iterator<MeasurableClient> i = clients iterator(); i hasNext();) { MeasurableClient client = i next(); if (perfReportWriter != null) { perfReportWriter writeCsvData(AbstractPerfReportWriter REPORT PLUGIN THROUGHPUT, index= + sampleIndex + ,clientName= + client getClientName() + ,throughput= + client getThroughput()); } client reset(); } } protected void onSamplerStart() { for (Iterator<MeasurableClient> i = clients iterator(); i hasNext();) { MeasurableClient client = i next(); client reset(); } } }",,1.0
5655,2061,data,\smellybot\activemq\activemq-tooling\activemq-perf-maven-plugin\src\test\java\org\apache\activemq\tool\ReflectionUtilTest.,TestClass5,"public class TestClass5 implements ReflectionConfigurable { public boolean intercepted; public boolean willIntercept = true; public TestClass5 nest; public void configureProperties(Properties props) { } public Properties retrieveProperties(Properties props) { return null; } public boolean acceptConfig(String key, String val) { intercepted = true; return !willIntercept; } public TestClass5 getNest() { return nest; } public void setNest(TestClass5 nest) { this nest = nest; } }",,1.0
5722,2128,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\JmsTopicSendReceiveSubscriberTest.,JmsTopicSendReceiveSubscriberTest,"public class JmsTopicSendReceiveSubscriberTest extends JmsTopicSendReceiveTest { protected MessageConsumer createConsumer() throws JMSException { if (durable) { return super createConsumer(); } else { TopicSession topicSession = (TopicSession)session; return topicSession createSubscriber((Topic)consumerDestination, null, false); } } }",,1.0
5739,2145,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\OnePrefetchAsyncConsumerTest.,TestServerSessionPool,"private class TestServerSessionPool implements ServerSessionPool { Connection connection; TestServerSession serverSession; boolean serverSessionInUse = false; public TestServerSessionPool(Connection connection) throws JMSException { this connection = connection; this serverSession = new TestServerSession(this); } Override public ServerSession getServerSession() throws JMSException { synchronized (this) { if (serverSessionInUse) { LOG info( asked for session while in use, not serialised delivery ); success set(false); completed set(true); } serverSessionInUse = true; return serverSession; } } }",,1.0
5787,2193,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\NioQueueSubscriptionTest.,NioQueueSubscriptionTestListener,"class NioQueueSubscriptionTestListener implements ExceptionListener { private int id = 0; protected Logger LOG; private final Map<Thread, Throwable> exceptions; public NioQueueSubscriptionTestListener(int id, Map<Thread, Throwable> exceptions, Logger log) { this id = id; this exceptions = exceptions; this LOG = log; } Override public void onException(JMSException exception) { LOG error( >>>> Exception in onException() on thread + id, exception); exceptions put(Thread currentThread(), exception); } }",,1.0
5796,2202,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\StubBroker.,StubBroker,"public class StubBroker extends EmptyBroker { public LinkedList<AddConnectionData> addConnectionData = new LinkedList<AddConnectionData>(); public LinkedList<RemoveConnectionData> removeConnectionData = new LinkedList<RemoveConnectionData>(); public class AddConnectionData { public final ConnectionContext connectionContext; public final ConnectionInfo connectionInfo; public AddConnectionData(ConnectionContext context, ConnectionInfo info) { connectionContext = context; connectionInfo = info; } } public static class RemoveConnectionData { public final ConnectionContext connectionContext; public final ConnectionInfo connectionInfo; public final Throwable error; public RemoveConnectionData(ConnectionContext context, ConnectionInfo info, Throwable error) { connectionContext = context; connectionInfo = info; this error = error; } } public void addConnection(ConnectionContext context, ConnectionInfo info) throws Exception { addConnectionData add(new AddConnectionData(context, info)); } public void removeConnection(ConnectionContext context, ConnectionInfo info, Throwable error) throws Exception { removeConnectionData add(new RemoveConnectionData(context, info, error)); } }",,1.0
5806,2212,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest.,DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest,"public class DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest extends DbRestartJDBCQueueMasterSlaveLeaseTest { private static final transient Logger LOG = LoggerFactory getLogger(DbRestartJDBCQueueMasterSlaveLeaseQuiesceTest class); private long restartDelay = 500; Override protected void configureBroker(BrokerService brokerService) { brokerService setIoExceptionHandler(new JDBCIOExceptionHandler()); } Override protected void delayTillRestartRequired() { if (restartDelay > 500) { LOG info( delay for more than lease quantum While Db is offline, master should stay alive but could loose lease ); } else { LOG info( delay for less than lease quantum While Db is offline, master should stay alive ); } try { TimeUnit MILLISECONDS sleep(restartDelay); } catch (InterruptedException e) { e printStackTrace(); } } Override protected void verifyExpectedBroker(int inflightMessageCount) { if (inflightMessageCount == 0 || (inflightMessageCount == failureCount + 10 && restartDelay <= 500)) { assertEquals( connected to master , master getBrokerName(), ((ActiveMQConnection)sendConnection) getBrokerName()); } } Override public void setUp() throws Exception { restartDelay = 500; super setUp(); } public void testSendReceiveWithLeaseExpiry() throws Exception { restartDelay = 3000; testSendReceive(); } public void testAdvisory() throws Exception {} }",,1.0
5807,2213,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\DbRestartJDBCQueueMasterSlaveLeaseTest.,DbRestartJDBCQueueMasterSlaveLeaseTest,"public class DbRestartJDBCQueueMasterSlaveLeaseTest extends DbRestartJDBCQueueMasterSlaveTest { private static final transient Logger LOG = LoggerFactory getLogger(DbRestartJDBCQueueMasterSlaveLeaseTest class); Override protected void configureJdbcPersistenceAdapter(JDBCPersistenceAdapter persistenceAdapter) throws IOException { super configureJdbcPersistenceAdapter(persistenceAdapter); persistenceAdapter setLocker(new LeaseDatabaseLocker()); persistenceAdapter getLocker() setLockAcquireSleepInterval(getLockAcquireSleepInterval()); persistenceAdapter setLockKeepAlivePeriod(getLockKeepAlivePeriod()); } private long getLockKeepAlivePeriod() { return 500; } private long getLockAcquireSleepInterval() { return 2000; } Override protected void delayTillRestartRequired() { LOG info( delay for less than lease quantum While Db is offline, master should stay alive ); try { TimeUnit SECONDS sleep(1); } catch (InterruptedException e) { e printStackTrace(); } } Override protected void verifyExpectedBroker(int inflightMessageCount) { if (inflightMessageCount == 0 || inflightMessageCount == failureCount + 10) { assertEquals( connected to master , master getBrokerName(), ((ActiveMQConnection)sendConnection) getBrokerName()); } } }",,1.0
5811,2217,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\ft\JDBCQueueMasterSlaveTest.,SyncDataSource,"class SyncDataSource implements DataSource { final EmbeddedDataSource delegate; SyncDataSource(EmbeddedDataSource dataSource) { this delegate = dataSource; } Override public Connection getConnection() throws SQLException { synchronized (this) { return delegate getConnection(); } } Override public Connection getConnection(String username, String password) throws SQLException { synchronized (this) { return delegate getConnection(); } } Override public PrintWriter getLogWriter() throws SQLException { return null; } Override public void setLogWriter(PrintWriter out) throws SQLException { } Override public void setLoginTimeout(int seconds) throws SQLException { } Override public int getLoginTimeout() throws SQLException { return 0; } Override public <T> T unwrap(Class<T> iface) throws SQLException { return null; } Override public boolean isWrapperFor(Class< > iface) throws SQLException { return false; } EmbeddedDataSource getDelegate() { return delegate; } public Logger getParentLogger() throws SQLFeatureNotSupportedException { return null; } };",,1.0
5826,2232,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\IndividualDeadLetterTest.,IndividualDeadLetterTest,"public class IndividualDeadLetterTest extends DeadLetterTest { private static final Logger LOG = LoggerFactory getLogger(IndividualDeadLetterTest class); protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PolicyEntry policy = new PolicyEntry(); DeadLetterStrategy strategy = new IndividualDeadLetterStrategy(); strategy setProcessNonPersistent(true); policy setDeadLetterStrategy(strategy); PolicyMap pMap = new PolicyMap(); pMap setDefaultEntry(policy); broker setDestinationPolicy(pMap); return broker; } protected Destination createDlqDestination() { String prefix = topic ActiveMQ DLQ Topic ActiveMQ DLQ Queue ; return new ActiveMQQueue(prefix + getClass() getName() + + getName()); } public void testDLQBrowsing() throws Exception { super topic = false; deliveryMode = DeliveryMode PERSISTENT; durableSubscriber = false; messageCount = 1; connection start(); ActiveMQConnection amqConnection = (ActiveMQConnection) connection; rollbackCount = amqConnection getRedeliveryPolicy() getMaximumRedeliveries() + 1; LOG info( Will redeliver messages + rollbackCount + times ); sendMessages(); for (int i = 0; i < rollbackCount; i++) { makeConsumer(); Message message = consumer receive(5000); assertNotNull( No message received , message); session rollback(); LOG info( Rolled back + rollbackCount + times ); consumer close(); } makeDlqBrowser(); browseDlq(); dlqBrowser close(); session close(); Thread sleep(1000); session = connection createSession(transactedMode, acknowledgeMode); Queue testQueue = new ActiveMQQueue( ActiveMQ DLQ Queue ActiveMQ DLQ Queue + getClass() getName() + + getName()); MessageConsumer testConsumer = session createConsumer(testQueue); assertNull( The message shouldn t be sent to another DLQ , testConsumer receive(1000)); } protected void browseDlq() throws Exception { Enumeration messages = dlqBrowser getEnumeration(); while (messages hasMoreElements()) { LOG info( Browsing + messages nextElement()); } } }",,1.0
5836,2242,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\policy\StrictOrderDispatchPolicyTest.,StrictOrderDispatchPolicyTest,"public class StrictOrderDispatchPolicyTest extends TopicSubscriptionTest { protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PolicyEntry policy = new PolicyEntry(); policy setDispatchPolicy(new StrictOrderDispatchPolicy()); PolicyMap pMap = new PolicyMap(); pMap setDefaultEntry(policy); broker setDestinationPolicy(pMap); return broker; } public void testOneProducerTwoConsumersLargeMessagesOnePrefetch() throws Exception { super testOneProducerTwoConsumersLargeMessagesOnePrefetch(); assertReceivedMessagesAreOrdered(); } public void testOneProducerTwoConsumersSmallMessagesOnePrefetch() throws Exception { super testOneProducerTwoConsumersSmallMessagesOnePrefetch(); assertReceivedMessagesAreOrdered(); } public void testOneProducerTwoConsumersSmallMessagesLargePrefetch() throws Exception { super testOneProducerTwoConsumersSmallMessagesLargePrefetch(); assertReceivedMessagesAreOrdered(); } public void testOneProducerTwoConsumersLargeMessagesLargePrefetch() throws Exception { super testOneProducerTwoConsumersLargeMessagesLargePrefetch(); assertReceivedMessagesAreOrdered(); } public void testOneProducerManyConsumersFewMessages() throws Exception { super testOneProducerManyConsumersFewMessages(); assertReceivedMessagesAreOrdered(); } public void testOneProducerManyConsumersManyMessages() throws Exception { super testOneProducerManyConsumersManyMessages(); assertReceivedMessagesAreOrdered(); } public void testManyProducersOneConsumer() throws Exception { super testManyProducersOneConsumer(); assertReceivedMessagesAreOrdered(); } public void testManyProducersManyConsumers() throws Exception { super testManyProducersManyConsumers(); assertReceivedMessagesAreOrdered(); } public void assertReceivedMessagesAreOrdered() throws Exception { if (consumers size() <= 1) { return; } Iterator i = consumers keySet() iterator(); MessageIdList messageOrder = (MessageIdList)consumers get(i next()); for (; i hasNext();) { MessageIdList messageIdList = (MessageIdList)consumers get(i next()); assertTrue( Messages are not ordered , messageOrder equals(messageIdList)); } } }",,1.0
5857,2263,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\StoreQueueCursorJournalNoDuplicateTest.,StoreQueueCursorJournalNoDuplicateTest,"public class StoreQueueCursorJournalNoDuplicateTest extends StoreQueueCursorNoDuplicateTest { Override protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); File dataFileDir = new File( target/activemq-data/StoreQueueCursorJournalNoDuplicateTest ); File journalDir = new File(dataFileDir, journal ) getCanonicalFile(); JournalImpl journal = new JournalImpl(journalDir, 3, 1024 * 1024 * 20); KahaPersistenceAdapter kahaAdaptor = new KahaPersistenceAdapter(); kahaAdaptor setDirectory(dataFileDir); JournalPersistenceAdapter journalAdaptor = new JournalPersistenceAdapter(journal, kahaAdaptor, broker getTaskRunnerFactory()); journalAdaptor setMaxCheckpointWorkers(1); broker setPersistenceAdapter(journalAdaptor); return broker; } }",,1.0
5858,2264,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\region\cursors\StoreQueueCursorKahaDBNoDuplicateTest.,StoreQueueCursorKahaDBNoDuplicateTest,public class StoreQueueCursorKahaDBNoDuplicateTest extends StoreQueueCursorNoDuplicateTest { Override protected BrokerService createBroker() throws Exception { BrokerService broker = super createBroker(); PersistenceAdapter persistenceAdapter = new KahaDBStore(); persistenceAdapter setDirectory(new File( target/activemq-data/kahadb )); broker setPersistenceAdapter(persistenceAdapter); return broker; } },,1.0
5867,2273,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\broker\scheduler\JobSchedulerStoreTest.,JobSchedulerStoreTest,"public class JobSchedulerStoreTest extends TestCase { public void testRestart() throws Exception { JobSchedulerStore store = new JobSchedulerStoreImpl(); File directory = new File( target/test/ScheduledDB ); IOHelper mkdirs(directory); IOHelper deleteChildren(directory); store setDirectory(directory); final int NUMBER = 1000; store start(); List<ByteSequence>list = new ArrayList<ByteSequence>(); for (int i = 0; i < NUMBER;i++ ) { ByteSequence buff = new ByteSequence(new String( testjob +i) getBytes()); list add(buff); } JobScheduler js = store getJobScheduler( test ); int count = 0; long startTime = 10 * 60 * 1000; long period = startTime; for (ByteSequence job list) { js schedule( id +(count++), job, , startTime, period, -1); } List<Job>test = js getAllJobs(); assertEquals(list size(),test size()); store stop(); store start(); js = store getJobScheduler( test ); test = js getAllJobs(); assertEquals(list size(),test size()); for (int i = 0; i < list size();i++) { String orig = new String(list get(i) getData()); String payload = new String(test get(i) getPayload()); assertEquals(orig,payload); } } }",,1.0
5906,2312,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ1917Test.,LimitedThreadFactory,public class LimitedThreadFactory implements ThreadFactory { int threadCount; private ThreadFactory factory; public LimitedThreadFactory(ThreadFactory threadFactory) { this factory = threadFactory; } public Thread newThread(Runnable arg0) { if (++threadCount > NUM THREADS) { errorLatch countDown(); fail( too many threads requested ); } return factory newThread(arg0); } },,1.0
5927,2333,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2401Test.,TestProducer,"private class TestProducer implements Runnable, Service { Thread thread; BytesMessage message; Connection connection; Session session; MessageProducer producer; TestProducer() throws Exception { thread = new Thread(this, TestProducer ); connection = factory createConnection(); connection start(); session = connection createSession(false, Session DUPS OK ACKNOWLEDGE); producer = session createProducer(session createQueue( AMQ2401Test )); } Override public void start() { thread start(); } Override public void run() { int count = SEND COUNT / PRODUCER COUNT; for (int i = 1; i <= count; i++) { try { if ((i % LOG INTERVAL) == 0) { LOG debug( Sending + i); } message = session createBytesMessage(); message writeBytes(new byte[1024]); producer send(message); } catch (JMSException jmse) { jmse printStackTrace(); break; } } } Override public void close() { try { connection close(); } catch (JMSException e) { } } }",,1.0
5939,2345,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2528Test.,AMQ2528Test,"public class AMQ2528Test extends EmbeddedBrokerTestSupport { protected void setUp() throws Exception { useTopic = false; super setUp(); } public void testRemoveMatchingMessages() throws Exception { final int NUM MESSAGES = 100; final String MESSAGE ID = id ; Connection conn = createConnection(); try { conn start(); Session session = conn createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = session createProducer(destination); for (int id = 0; id < NUM MESSAGES; id++) { Message message = session createMessage(); message setIntProperty(MESSAGE ID, id); producer send(message); } producer close(); session close(); } finally { conn close(); } Queue queue = (Queue) broker getRegionBroker() getDestinations( destination) iterator() next(); Assert assertEquals(NUM MESSAGES / 2, queue removeMatchingMessages(MESSAGE ID + < + NUM MESSAGES / 2)); Assert assertEquals(NUM MESSAGES - NUM MESSAGES / 2, queue removeMatchingMessages( )); } }",,1.0
5951,2357,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ2832Test.,StagedConsumer,"private class StagedConsumer { Connection connection; MessageConsumer consumer; StagedConsumer() throws Exception { connection = new ActiveMQConnectionFactory( failover broker getTransportConnectors() get(0) getConnectUri() toString()) createConnection(); connection start(); consumer = connection createSession(false, ActiveMQSession INDIVIDUAL ACKNOWLEDGE) createConsumer(destination); } public Message receive(int numToReceive) throws Exception { return receive(numToReceive, 2); } public Message receive(int numToReceive, int timeoutInSeconds) throws Exception { Message msg = null; for (; numToReceive > 0; numToReceive--) { do { msg = consumer receive(1*1000); } while (msg == null && --timeoutInSeconds > 0); if (numToReceive > 1) { msg acknowledge(); } if (msg != null) { LOG debug( received + msg getJMSMessageID()); } } return msg; } void close() throws JMSException { consumer close(); connection close(); } }",,1.0
5978,2384,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\AMQ3405Test.,RollbackMessageListener,"class RollbackMessageListener implements MessageListener { final int maxRollbacks; final int deliveryCount; final AtomicInteger rollbacks = new AtomicInteger(); RollbackMessageListener(int c, int delvery) { maxRollbacks = c; deliveryCount = delvery; } Override public void onMessage(Message message) { try { int expectedMessageId = rollbacks get() / deliveryCount; LOG info( expecting messageId + expectedMessageId); rollbacks incrementAndGet(); session rollback(); } catch (Throwable e) { LOG error( unexpected exception + e, e); if (e instanceof Error) { error[0] = (Error) e; } else { fail( unexpected exception + e); } } } }",,1.0
6022,2428,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\DurableConsumerTest.,MessagePublisher,"private class MessagePublisher implements Runnable{ private final boolean shouldPublish = true; public void run(){ TopicConnectionFactory topicConnectionFactory = null; TopicConnection topicConnection = null; TopicSession topicSession = null; Topic topic = null; TopicPublisher topicPublisher = null; Message message = null; topicConnectionFactory = new ActiveMQConnectionFactory(CONNECTION URL); try { topic = new ActiveMQTopic(TOPIC NAME); topicConnection = topicConnectionFactory createTopicConnection(); topicSession = topicConnection createTopicSession(false, Session AUTO ACKNOWLEDGE); topicPublisher = topicSession createPublisher(topic); message = topicSession createMessage(); } catch (Exception ex) { exceptions add(ex); } while (shouldPublish) { try { topicPublisher publish(message, DeliveryMode PERSISTENT, 1, 2 * 60 * 60 * 1000); } catch (JMSException ex) { exceptions add(ex); } try { Thread sleep(1); } catch (Exception ex) { } } } }",,1.0
6029,2435,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\bugs\MessageSender.,MessageSender,"public class MessageSender { private MessageProducer producer; private Session session; public MessageSender(String queueName, Connection connection, boolean useTransactedSession, boolean topic) throws Exception { session = useTransactedSession connection createSession(true, Session SESSION TRANSACTED) connection createSession(false, Session AUTO ACKNOWLEDGE); producer = session createProducer(topic session createTopic(queueName) session createQueue(queueName)); } public void send(String payload) throws Exception { ObjectMessage message = session createObjectMessage(); message setObject(payload); producer send(message); if (session getTransacted()) { session commit(); } } public MessageProducer getProducer() { return producer; } }",,1.0
6084,2490,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\demo\SimpleQueueReceiver.,SimpleQueueReceiver,"public final class SimpleQueueReceiver { private static final Logger LOG = LoggerFactory getLogger(SimpleQueueReceiver class); private SimpleQueueReceiver() { } public static void main(String[] args) { String queueName = null; Context jndiContext = null; QueueConnectionFactory queueConnectionFactory = null; QueueConnection queueConnection = null; QueueSession queueSession = null; Queue queue = null; QueueReceiver queueReceiver = null; TextMessage message = null; if (args length != 1) { LOG info( Usage java + SimpleQueueReceiver <queue-name> ); System exit(1); } queueName = args[0]; LOG info( Queue name is + queueName); try { jndiContext = new InitialContext(); } catch (NamingException e) { LOG info( Could not create JNDI API + context + e toString()); System exit(1); } try { queueConnectionFactory = (QueueConnectionFactory)jndiContext lookup( QueueConnectionFactory ); queue = (Queue)jndiContext lookup(queueName); } catch (NamingException e) { LOG info( JNDI API lookup failed + e toString()); System exit(1); } try { queueConnection = queueConnectionFactory createQueueConnection(); queueSession = queueConnection createQueueSession(false, Session AUTO ACKNOWLEDGE); queueReceiver = queueSession createReceiver(queue); queueConnection start(); while (true) { Message m = queueReceiver receive(1); if (m != null) { if (m instanceof TextMessage) { message = (TextMessage)m; LOG info( Reading message + message getText()); } else { break; } } } } catch (JMSException e) { LOG info( Exception occurred + e toString()); } finally { if (queueConnection != null) { try { queueConnection close(); } catch (JMSException e) { } } } } }",,1.0
6086,2492,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\filter\DestinationFilterTest.,DestinationFilterTest,"public class DestinationFilterTest extends TestCase { public void testPrefixFilter() throws Exception { DestinationFilter filter = DestinationFilter parseFilter(new ActiveMQQueue( > )); assertTrue( Filter not parsed well + filter getClass(), filter instanceof PrefixDestinationFilter); System out println(filter); assertFalse( Filter matched wrong destination type , filter matches(new ActiveMQTopic( > ))); } public void testWildcardFilter() throws Exception { DestinationFilter filter = DestinationFilter parseFilter(new ActiveMQQueue( A * )); assertTrue( Filter not parsed well + filter getClass(), filter instanceof WildcardDestinationFilter); assertFalse( Filter matched wrong destination type , filter matches(new ActiveMQTopic( A B ))); } public void testCompositeFilter() throws Exception { DestinationFilter filter = DestinationFilter parseFilter(new ActiveMQQueue( A B,B C )); assertTrue( Filter not parsed well + filter getClass(), filter instanceof CompositeDestinationFilter); assertFalse( Filter matched wrong destination type , filter matches(new ActiveMQTopic( A B ))); } }",,1.0
6090,2496,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\filter\DestinationPathTest.,DestinationPathTest,"public class DestinationPathTest extends TestSupport { public void testPathParse() { assertParse( FOO , new String[]{ FOO }); assertParse( FOO BAR , new String[]{ FOO , BAR }); assertParse( FOO * , new String[]{ FOO , * }); assertParse( FOO > , new String[]{ FOO , > }); assertParse( FOO BAR XYZ , new String[]{ FOO , BAR , XYZ }); assertParse( FOO BAR , new String[]{ FOO , BAR , }); } protected void assertParse(String subject, String[] expected) { String[] path = DestinationPath getDestinationPaths(subject); assertArrayEqual(subject, expected, path); } }",,1.0
6134,2540,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\network\NetworkDestinationFilterTest.,NetworkDestinationFilterTest,"public class NetworkDestinationFilterTest extends TestCase { public void testFilter() throws Exception { NetworkBridgeConfiguration config = new NetworkBridgeConfiguration(); assertEquals(AdvisorySupport CONSUMER ADVISORY TOPIC PREFIX + > , config getDestinationFilter()); List<ActiveMQDestination> dests = new ArrayList<ActiveMQDestination>(); config setDynamicallyIncludedDestinations(dests); assertEquals(AdvisorySupport CONSUMER ADVISORY TOPIC PREFIX + > , config getDestinationFilter()); dests add(new ActiveMQQueue( TEST > )); dests add(new ActiveMQTopic( TEST > )); dests add(new ActiveMQTempQueue( TEST > )); String prefix = AdvisorySupport CONSUMER ADVISORY TOPIC PREFIX; assertEquals(prefix + Queue TEST >, + prefix + Topic TEST > , config getDestinationFilter()); } }",,1.0
6158,2564,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\ItStillMarshallsTheSameTest.,ItStillMarshallsTheSameTest,public class ItStillMarshallsTheSameTest extends TestCase { public void testAll() throws Exception { BrokerInfoData assertAllControlFileAreEqual(); } },,1.0
6199,2605,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static final MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification)object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6214,2620,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static final SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo)object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); } },,1.0
6216,2622,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v1\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static final TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo)object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte)1); } },,1.0
6246,2652,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\ExceptionResponseTest.,ExceptionResponseTest,public class ExceptionResponseTest extends ResponseTest { public static final ExceptionResponseTest SINGLETON = new ExceptionResponseTest(); public Object createObject() throws Exception { ExceptionResponse info = new ExceptionResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ExceptionResponse info = (ExceptionResponse) object; info setException(createThrowable( Exception 1 )); } },,1.0
6257,2663,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static final MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6258,2664,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static final MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },,1.0
6260,2666,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static final MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); } },,1.0
6273,2679,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static final SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); } },,1.0
6275,2681,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v2\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static final TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },,1.0
6293,2699,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\ExceptionResponseTest.,ExceptionResponseTest,public class ExceptionResponseTest extends ResponseTest { public static final ExceptionResponseTest SINGLETON = new ExceptionResponseTest(); public Object createObject() throws Exception { ExceptionResponse info = new ExceptionResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ExceptionResponse info = (ExceptionResponse) object; info setException(createThrowable( Exception 1 )); } },,1.0
6304,2710,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static final MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6305,2711,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static final MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },,1.0
6321,2727,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static final SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },,1.0
6323,2729,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v3\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static final TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },,1.0
6332,2738,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setClose(true); info setConsumerId(createConsumerId( ConsumerId 1 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },,1.0
6337,2743,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },,1.0
6351,2757,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6352,2758,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },,1.0
6354,2760,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },,1.0
6365,2771,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\SessionIdTest.,SessionIdTest,public class SessionIdTest extends DataFileGeneratorTestSupport { public static SessionIdTest SINGLETON = new SessionIdTest(); public Object createObject() throws Exception { SessionId info = new SessionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionId info = (SessionId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); } },,1.0
6368,2774,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },,1.0
6370,2776,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v4\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },,1.0
6379,2785,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\ConsumerControlTest.,ConsumerControlTest,public class ConsumerControlTest extends BaseCommandTestSupport { public static ConsumerControlTest SINGLETON = new ConsumerControlTest(); public Object createObject() throws Exception { ConsumerControl info = new ConsumerControl(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); ConsumerControl info = (ConsumerControl) object; info setClose(true); info setConsumerId(createConsumerId( ConsumerId 1 )); info setPrefetch(1); info setFlush(false); info setStart(true); info setStop(false); } },,1.0
6384,2790,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },,1.0
6398,2804,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6399,2805,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },,1.0
6401,2807,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },,1.0
6412,2818,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\SessionIdTest.,SessionIdTest,public class SessionIdTest extends DataFileGeneratorTestSupport { public static SessionIdTest SINGLETON = new SessionIdTest(); public Object createObject() throws Exception { SessionId info = new SessionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionId info = (SessionId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); } },,1.0
6415,2821,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubscriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },,1.0
6417,2823,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v5\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },,1.0
6431,2837,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },,1.0
6445,2851,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6446,2852,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },,1.0
6448,2854,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },,1.0
6459,2865,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\SessionIdTest.,SessionIdTest,public class SessionIdTest extends DataFileGeneratorTestSupport { public static SessionIdTest SINGLETON = new SessionIdTest(); public Object createObject() throws Exception { SessionId info = new SessionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionId info = (SessionId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); } },,1.0
6462,2868,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubcriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },,1.0
6464,2870,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v6\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },,1.0
6478,2884,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },,1.0
6492,2898,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6493,2899,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },,1.0
6495,2901,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },,1.0
6506,2912,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\SessionIdTest.,SessionIdTest,public class SessionIdTest extends DataFileGeneratorTestSupport { public static SessionIdTest SINGLETON = new SessionIdTest(); public Object createObject() throws Exception { SessionId info = new SessionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionId info = (SessionId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); } },,1.0
6509,2915,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubcriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },,1.0
6511,2917,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v7\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },,1.0
6525,2931,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },,1.0
6539,2945,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6540,2946,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },,1.0
6542,2948,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },,1.0
6553,2959,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\SessionIdTest.,SessionIdTest,public class SessionIdTest extends DataFileGeneratorTestSupport { public static SessionIdTest SINGLETON = new SessionIdTest(); public Object createObject() throws Exception { SessionId info = new SessionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionId info = (SessionId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); } },,1.0
6556,2962,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubcriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },,1.0
6558,2964,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v8\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },,1.0
6572,2978,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\DataResponseTest.,DataResponseTest,public class DataResponseTest extends ResponseTest { public static DataResponseTest SINGLETON = new DataResponseTest(); public Object createObject() throws Exception { DataResponse info = new DataResponse(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); DataResponse info = (DataResponse) object; info setData(createDataStructure( Data 1 )); } },,1.0
6586,2992,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\MessageDispatchNotificationTest.,MessageDispatchNotificationTest,public class MessageDispatchNotificationTest extends BaseCommandTestSupport { public static MessageDispatchNotificationTest SINGLETON = new MessageDispatchNotificationTest(); public Object createObject() throws Exception { MessageDispatchNotification info = new MessageDispatchNotification(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatchNotification info = (MessageDispatchNotification) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setDeliverySequenceId(1); info setMessageId(createMessageId( MessageId 3 )); } },,1.0
6587,2993,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\MessageDispatchTest.,MessageDispatchTest,public class MessageDispatchTest extends BaseCommandTestSupport { public static MessageDispatchTest SINGLETON = new MessageDispatchTest(); public Object createObject() throws Exception { MessageDispatch info = new MessageDispatch(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessageDispatch info = (MessageDispatch) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setMessage(createMessage( Message 3 )); info setRedeliveryCounter(1); } },,1.0
6589,2995,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\MessagePullTest.,MessagePullTest,public class MessagePullTest extends BaseCommandTestSupport { public static MessagePullTest SINGLETON = new MessagePullTest(); public Object createObject() throws Exception { MessagePull info = new MessagePull(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); MessagePull info = (MessagePull) object; info setConsumerId(createConsumerId( ConsumerId 1 )); info setDestination(createActiveMQDestination( Destination 2 )); info setTimeout(1); info setCorrelationId( CorrelationId 3 ); info setMessageId(createMessageId( MessageId 4 )); } },,1.0
6600,3006,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\SessionIdTest.,SessionIdTest,public class SessionIdTest extends DataFileGeneratorTestSupport { public static SessionIdTest SINGLETON = new SessionIdTest(); public Object createObject() throws Exception { SessionId info = new SessionId(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SessionId info = (SessionId) object; info setConnectionId( ConnectionId 1 ); info setValue(1); } },,1.0
6603,3009,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\SubscriptionInfoTest.,SubscriptionInfoTest,public class SubscriptionInfoTest extends DataFileGeneratorTestSupport { public static SubscriptionInfoTest SINGLETON = new SubscriptionInfoTest(); public Object createObject() throws Exception { SubscriptionInfo info = new SubscriptionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); SubscriptionInfo info = (SubscriptionInfo) object; info setClientId( ClientId 1 ); info setDestination(createActiveMQDestination( Destination 2 )); info setSelector( Selector 3 ); info setSubcriptionName( SubcriptionName 4 ); info setSubscribedDestination(createActiveMQDestination( SubscribedDestination 5 )); } },,1.0
6605,3011,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\openwire\v9\TransactionInfoTest.,TransactionInfoTest,public class TransactionInfoTest extends BaseCommandTestSupport { public static TransactionInfoTest SINGLETON = new TransactionInfoTest(); public Object createObject() throws Exception { TransactionInfo info = new TransactionInfo(); populateObject(info); return info; } protected void populateObject(Object object) throws Exception { super populateObject(object); TransactionInfo info = (TransactionInfo) object; info setConnectionId(createConnectionId( ConnectionId 1 )); info setTransactionId(createTransactionId( TransactionId 2 )); info setType((byte) 1); } },,1.0
6628,3034,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\RunBroker.,RunBroker,"public class RunBroker { public static void main(String arg[]) { try { KahaDBPersistenceAdapter kahaDB = new KahaDBPersistenceAdapter(); File dataFileDir = new File( target/test-amq-data/perfTest/kahadb ); IOHelper deleteChildren(dataFileDir); File archiveDir = new File(dataFileDir, archive ); kahaDB setDirectory(dataFileDir); kahaDB setIndexWriteBatchSize(1000); kahaDB setIndexCacheSize(10000); BrokerService broker = new BrokerService(); broker setUseJmx(false); broker setPersistenceAdapter(kahaDB); broker setDeleteAllMessagesOnStartup(true); broker addConnector( tcp broker start(); System err println( Running ); Thread sleep(Long MAX VALUE); } catch (Throwable e) { e printStackTrace(); } } }",,1.0
6637,3043,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\perf\SlowConsumer.,SlowConsumer,"public class SlowConsumer extends PerfConsumer { private static final transient Logger LOG = LoggerFactory getLogger(SlowConsumer class); public SlowConsumer(ConnectionFactory fac, Destination dest, String consumerName) throws JMSException { super(fac, dest, consumerName); } public SlowConsumer(ConnectionFactory fac, Destination dest) throws JMSException { super(fac, dest, null); } public void onMessage(Message msg) { super onMessage(msg); LOG debug( GOT A MSG + msg); try { Thread sleep(10000); } catch (InterruptedException e) { e printStackTrace(); } } }",,1.0
6650,3056,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\CachedLDAPAuthorizationModuleLegacyTest.,CachedLDAPAuthorizationModuleLegacyTest,"public class CachedLDAPAuthorizationModuleLegacyTest extends AbstractCachedLDAPAuthorizationMapLegacyTest { Override protected SimpleCachedLDAPAuthorizationMap createMap() { SimpleCachedLDAPAuthorizationMap map = super createMap(); map setConnectionURL( ldap return map; } protected InputStream getAddLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-apacheds-legacy-add ldif ); } protected InputStream getRemoveLdif() { return getClass() getClassLoader() getResourceAsStream( org/apache/activemq/security/activemq-apacheds-legacy-delete ldif ); } protected String getQueueBaseDn() { return ou=Queue,ou=Destination,ou=ActiveMQ,ou=system ; } protected LdapConnection getLdapConnection() throws LdapException, IOException { LdapConnection connection = new LdapNetworkConnection( localhost , getLdapServer() getPort()); connection bind(new Dn( uid=admin,ou=system ), secret ); return connection; } }",,1.0
6658,3064,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\security\JaasNetworkTest.,JaasNetworkTest,"public class JaasNetworkTest extends TestCase { BrokerService broker1; BrokerService broker2; public void setUp() throws Exception { System setProperty( java security auth login config , src/test/resources/login config ); broker1 = BrokerFactory createBroker(new URI( xbean org/apache/activemq/security/broker1 xml )); broker2 = BrokerFactory createBroker(new URI( xbean org/apache/activemq/security/broker2 xml )); broker1 waitUntilStarted(); broker2 waitUntilStarted(); Thread sleep(2000); } protected void tearDown() throws Exception { super tearDown(); broker1 stop(); broker1 waitUntilStopped(); broker2 stop(); broker2 waitUntilStopped(); } public void testNetwork() throws Exception { System setProperty( javax net ssl trustStore , src/test/resources/org/apache/activemq/security/client ts ); System setProperty( javax net ssl trustStorePassword , password ); System setProperty( javax net ssl trustStoreType , jks ); System setProperty( javax net ssl keyStore , src/test/resources/org/apache/activemq/security/client ks ); System setProperty( javax net ssl keyStorePassword , password ); System setProperty( javax net ssl keyStoreType , jks ); ActiveMQConnectionFactory producerFactory = new ActiveMQConnectionFactory( ssl Connection producerConn = producerFactory createConnection(); Session producerSess = producerConn createSession(false, Session AUTO ACKNOWLEDGE); MessageProducer producer = producerSess createProducer(new ActiveMQQueue( test )); producerConn start(); TextMessage sentMessage = producerSess createTextMessage( test ); producer send(sentMessage); ActiveMQConnectionFactory consumerFactory = new ActiveMQConnectionFactory( ssl Connection consumerConn = consumerFactory createConnection(); Session consumerSess = consumerConn createSession(false, Session AUTO ACKNOWLEDGE); consumerConn start(); MessageConsumer consumer = consumerSess createConsumer(new ActiveMQQueue( test )); TextMessage receivedMessage = (TextMessage)consumer receive(100); assertEquals(sentMessage, receivedMessage); } }",,1.0
6678,3084,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\selector\SelectorParserTest.,SelectorParserTest,"public class SelectorParserTest extends TestCase { private static final Logger LOG = LoggerFactory getLogger(SelectorParserTest class); public void testParseXPath() throws Exception { BooleanExpression filter = parse( XPATH assertTrue( Created XPath expression , filter instanceof XPathExpression); LOG info( Expression + filter); } public void testParseWithParensAround() throws Exception { String[] values = { x = 1 and y = 2 , (x = 1) and (y = 2) , ((x = 1) and (y = 2)) }; for (int i = 0; i < values length; i++) { String value = values[i]; LOG info( Parsing + value); BooleanExpression andExpression = parse(value); assertTrue( Created LogicExpression expression , andExpression instanceof LogicExpression); LogicExpression logicExpression = (LogicExpression)andExpression; Expression left = logicExpression getLeft(); Expression right = logicExpression getRight(); assertTrue( Left is a binary filter , left instanceof ComparisonExpression); assertTrue( Right is a binary filter , right instanceof ComparisonExpression); ComparisonExpression leftCompare = (ComparisonExpression)left; ComparisonExpression rightCompare = (ComparisonExpression)right; assertPropertyExpression( left , leftCompare getLeft(), x ); assertPropertyExpression( right , rightCompare getLeft(), y ); } } protected void assertPropertyExpression(String message, Expression expression, String expected) { assertTrue(message + Must be PropertyExpression , expression instanceof PropertyExpression); PropertyExpression propExp = (PropertyExpression)expression; assertEquals(message + Property name , expected, propExp getName()); } protected BooleanExpression parse(String text) throws Exception { return SelectorParser parse(text); } }",,1.0
6700,3106,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\jdbc\JDBCPersistenceAdapterTest.,JDBCPersistenceAdapterTest,public class JDBCPersistenceAdapterTest extends PersistenceAdapterTestSupport { protected PersistenceAdapter createPersistenceAdapter(boolean delete) throws IOException { JDBCPersistenceAdapter jdbc = new JDBCPersistenceAdapter(); jdbc setEnableAudit(true); brokerService setSchedulerSupport(false); brokerService setPersistenceAdapter(jdbc); jdbc setBrokerService(brokerService); EmbeddedDataSource dataSource = new EmbeddedDataSource(); dataSource setDatabaseName( derbyDb ); dataSource setCreateDatabase( create ); jdbc setDataSource(dataSource); if( delete ) { jdbc deleteAllMessages(); } return jdbc; } public void testAuditOff() throws Exception { pa stop(); pa = createPersistenceAdapter(true); ((JDBCPersistenceAdapter)pa) setEnableAudit(false); pa start(); boolean failed = true; try { testStoreCanHandleDupMessages(); failed = false; } catch (AssertionFailedError e) { } if (!failed) { fail( Should have failed with audit turned off ); } } },,1.0
6706,3112,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\CustomLockerTest.,CustomLockerTest,public class CustomLockerTest extends TestCase { public void testCustomLocker() throws Exception { BrokerService broker = BrokerFactory createBroker( xbean org/apache/activemq/store/kahadb/shared xml ); broker waitUntilStarted(); broker stop(); broker waitUntilStopped(); } },,1.0
6718,3124,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\PBMesssagesTest.,PBMesssagesTest,"public class PBMesssagesTest extends TestCase { public void testKahaAddMessageCommand() throws IOException { KahaAddMessageCommand expected = new KahaAddMessageCommand(); expected setDestination(new KahaDestination() setName( Foo ) setType(DestinationType QUEUE)); expected setMessage(new Buffer(new byte[] {1,2,3,4,5,6} )); expected setMessageId( Hello World ); int size = expected serializedSizeFramed(); DataByteArrayOutputStream os = new DataByteArrayOutputStream(size + 1); os writeByte(expected type() getNumber()); expected writeFramed(os); ByteSequence seq = os toByteSequence(); DataByteArrayInputStream is = new DataByteArrayInputStream(seq); KahaEntryType type = KahaEntryType valueOf(is readByte()); JournalCommand message = (JournalCommand)type createMessage(); message mergeFramed(is); assertEquals(expected, message); } }",,1.0
6726,3132,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\plist\PListTest.,A,"class A implements Runnable { Override public void run() { final String threadName = Thread currentThread() getName(); try { for (int i = 0; i < iterations; i++) { PList candidate = lists[i % numLists]; Thread currentThread() setName( ALRF + candidate getName()); synchronized (plistLocks(candidate)) { Object locator = candidate addLast(String valueOf(i), payload); getFirst(candidate); assertTrue(candidate remove(locator)); } } } catch (Exception error) { LOG error( Unexpcted ex , error); error printStackTrace(); exceptions add(error); } finally { Thread currentThread() setName(threadName); } }",,1.0
6727,3133,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\store\kahadb\plist\PListTest.,B,"class B implements Runnable { Override public void run() { final String threadName = Thread currentThread() getName(); try { for (int i = 0; i < iterations; i++) { PList candidate = lists[i % numLists]; Thread currentThread() setName( ALRF + candidate getName()); synchronized (plistLocks(candidate)) { Object locator = candidate addLast(String valueOf(i), payload); getFirst(candidate); assertTrue(candidate remove(locator)); } } } catch (Exception error) { error printStackTrace(); exceptions add(error); } finally { Thread currentThread() setName(threadName); } }",,1.0
6804,3210,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\reliable\UnreliableCommandDatagramChannel.,UnreliableCommandDatagramChannel,"public class UnreliableCommandDatagramChannel extends CommandDatagramChannel { private static final Logger LOG = LoggerFactory getLogger(UnreliableCommandDatagramChannel class); private DropCommandStrategy dropCommandStrategy; public UnreliableCommandDatagramChannel(UdpTransport transport, OpenWireFormat wireFormat, int datagramSize, SocketAddress targetAddress, DatagramHeaderMarshaller headerMarshaller, ReplayBuffer replayBuffer, DatagramChannel channel, ByteBufferPool bufferPool, DropCommandStrategy strategy) { super(transport, wireFormat, datagramSize, targetAddress, headerMarshaller, channel, bufferPool); this dropCommandStrategy = strategy; } protected void sendWriteBuffer(int commandId, SocketAddress address, ByteBuffer writeBuffer, boolean redelivery) throws IOException { if (dropCommandStrategy shouldDropCommand(commandId, address, redelivery)) { writeBuffer flip(); LOG info( Dropping datagram with command + commandId); getReplayBuffer() addBuffer(commandId, writeBuffer); } else { super sendWriteBuffer(commandId, address, writeBuffer, redelivery); } } }",,1.0
6816,3222,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\transport\tcp\SslContextBrokerServiceTest.,SslContextBrokerServiceTest,public class SslContextBrokerServiceTest extends TestCase { private ClassPathXmlApplicationContext context; private BrokerService broker; private TransportConnector connector; public void testConfiguration() throws URISyntaxException { assertNotNull(broker); assertNotNull(connector); assertEquals(new URI( ssl assertNotNull(broker getSslContext()); assertFalse(broker getSslContext() getKeyManagers() isEmpty()); assertFalse(broker getSslContext() getTrustManagers() isEmpty()); } protected void setUp() throws Exception { Thread currentThread() setContextClassLoader(SslContextBrokerServiceTest class getClassLoader()); context = new ClassPathXmlApplicationContext( org/apache/activemq/transport/tcp/activemq-ssl xml ); Map beansOfType = context getBeansOfType(BrokerService class); broker = (BrokerService)beansOfType values() iterator() next(); connector = broker getTransportConnectors() get(0); } Override protected void tearDown() throws Exception { context destroy(); } },,1.0
6891,3297,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableConsumerCloseAndReconnectTcpTest.,SlowCloseSocketTcpTransportFactory,"class SlowCloseSocketTcpTransportFactory extends TcpTransportFactory { class SlowCloseSocketFactory extends SocketFactory { class SlowCloseSocket extends Socket { public SlowCloseSocket(String host, int port) throws IOException { super(host, port); } public SlowCloseSocket(InetAddress host, int port) throws IOException { super(host, port); } public SlowCloseSocket(String host, int port, InetAddress localHost, int localPort) throws IOException { super(host, port, localHost, localPort); } public SlowCloseSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException { super(address, port, localAddress, localPort); } Override public synchronized void close() throws IOException { LOG info( delaying close ); try { TimeUnit MILLISECONDS sleep(500); } catch (InterruptedException e) { e printStackTrace(); } super close(); } } Override public Socket createSocket(String host, int port) throws IOException, UnknownHostException { return new SlowCloseSocket(host, port); } Override public Socket createSocket(InetAddress host, int port) throws IOException { return new SlowCloseSocket(host, port); } Override public Socket createSocket(String host, int port, InetAddress localHost, int localPort) throws IOException, UnknownHostException { return new SlowCloseSocket(host, port, localHost, localPort); } Override public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort) throws IOException { return new SlowCloseSocket(address, port, localAddress, localPort); } } Override protected SocketFactory createSocketFactory() throws IOException { return new SlowCloseSocketFactory(); } }",,1.0
6903,3309,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessConcurrentCommitActivateNoDuplicateTest.,ClientManager,"private final class ClientManager extends Thread { private int clientRover = 0; private final CopyOnWriteArrayList<Client> clients = new CopyOnWriteArrayList<Client>(); private boolean end; public ClientManager() { super( ClientManager ); setDaemon(true); } public synchronized void setEnd(boolean end) { this end = end; } Override public void run() { try { while (true) { if (clients size() < MAX CLIENTS && !end) { processLock readLock() lock(); try { createNewClient(); } finally { processLock readLock() unlock(); } } int size = clients size(); Thread sleep(100); } } catch (Throwable e) { exit( ClientManager run failed , e); } } private void createNewClient() throws JMSException { ClientType type = ClientType randomClientType(); Client client; synchronized (server sendMutex) { client = new Client(++clientRover, type, CLIENT LIFETIME, CLIENT ONLINE, CLIENT OFFLINE); clients add(client); } client start(); LOG info(client toString() + created + this); } public void removeClient(Client client) { clients remove(client); } public void onServerMessage(Message message) throws JMSException { for (Client client clients) { client onServerMessage(message); } } Override public String toString() { StringBuilder sb = new StringBuilder( ClientManager[count= ); sb append(clients size()); sb append( , clients= ); boolean sep = false; for (Client client clients) { if (sep) sb append( , ); else sep = true; sb append(client toString()); } sb append( ] ); return sb toString(); } }",,1.0
6912,3318,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubProcessTest.,ClientManager,"private final class ClientManager extends Thread { private int clientRover = 0; private final CopyOnWriteArrayList<Client> clients = new CopyOnWriteArrayList<Client>(); public ClientManager() { super( ClientManager ); setDaemon(true); } Override public void run() { try { while (true) { if (clients size() < MAX CLIENTS) createNewClient(); int size = clients size(); sleepRandom(size * 3 * 1000, size * 6 * 1000); } } catch (Throwable e) { exit( ClientManager run failed , e); } } private void createNewClient() throws JMSException { ClientType type = ClientType randomClientType(); Client client; synchronized (server sendMutex) { client = new Client(++clientRover, type, CLIENT LIFETIME, CLIENT ONLINE, CLIENT OFFLINE); clients add(client); } client start(); LOG info(client toString() + created + this); } public void removeClient(Client client) { clients remove(client); } public void onServerMessage(Message message) throws JMSException { for (Client client clients) { client onServerMessage(message); } } Override public String toString() { StringBuilder sb = new StringBuilder( ClientManager[count= ); sb append(clients size()); sb append( , clients= ); boolean sep = false; for (Client client clients) { if (sep) sb append( , ); else sep = true; sb append(client toString()); } sb append( ] ); return sb toString(); } }",,1.0
6933,3339,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\DurableSubscriptionOfflineTest.,FilterCheckListener,"public class FilterCheckListener extends Listener { Override public void onMessage(Message message) { count++; try { Object b = message getObjectProperty( b ); if (b != null) { boolean c = message getBooleanProperty( c ); assertTrue( , c); } else { String d = message getStringProperty( d ); assertTrue( , D1 equals(d) || D2 equals(d)); } } catch (JMSException e) { e printStackTrace(); exceptions add(e); } } }",,1.0
7020,3426,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ThreeBrokerQueueNetworkUsingTcpTest.,ThreeBrokerQueueNetworkUsingTcpTest,"public class ThreeBrokerQueueNetworkUsingTcpTest extends ThreeBrokerQueueNetworkTest { protected List<DemandForwardingBridge> bridges; protected void bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception { List remoteTransports = remoteBroker getTransportConnectors(); List localTransports = localBroker getTransportConnectors(); URI remoteURI; URI localURI; if (!remoteTransports isEmpty() && !localTransports isEmpty()) { remoteURI = ((TransportConnector)remoteTransports get(0)) getConnectUri(); localURI = ((TransportConnector)localTransports get(0)) getConnectUri(); if (remoteURI toString() startsWith( tcp ) && localURI toString() startsWith( tcp )) { NetworkBridgeConfiguration config = new NetworkBridgeConfiguration(); config setBrokerName(localBroker getBrokerName()); DemandForwardingBridge bridge = new DemandForwardingBridge(config, TransportFactory connect(localURI), TransportFactory connect(remoteURI)); bridge setBrokerService(localBroker); bridges add(bridge); bridge start(); } else { throw new Exception( Remote broker or local broker is not using tcp connectors ); } } else { throw new Exception( Remote broker or local broker has no registered connectors ); } maxSetupTime = 2000; } public void setUp() throws Exception { super setUp(); bridges = new ArrayList<DemandForwardingBridge>(); } }",,1.0
7025,3431,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\ThreeBrokerTopicNetworkUsingTcpTest.,ThreeBrokerTopicNetworkUsingTcpTest,"public class ThreeBrokerTopicNetworkUsingTcpTest extends ThreeBrokerTopicNetworkTest { protected List<DemandForwardingBridge> bridges; protected void bridgeBrokers(BrokerService localBroker, BrokerService remoteBroker) throws Exception { List remoteTransports = remoteBroker getTransportConnectors(); List localTransports = localBroker getTransportConnectors(); URI remoteURI; URI localURI; if (!remoteTransports isEmpty() && !localTransports isEmpty()) { remoteURI = ((TransportConnector)remoteTransports get(0)) getConnectUri(); localURI = ((TransportConnector)localTransports get(0)) getConnectUri(); if (remoteURI toString() startsWith( tcp ) && localURI toString() startsWith( tcp )) { NetworkBridgeConfiguration config = new NetworkBridgeConfiguration(); config setBrokerName(localBroker getBrokerName()); DemandForwardingBridge bridge = new DemandForwardingBridge(config, TransportFactory connect(localURI), TransportFactory connect(remoteURI)); bridge setBrokerService(localBroker); bridges add(bridge); bridge start(); } else { throw new Exception( Remote broker or local broker is not using tcp connectors ); } } else { throw new Exception( Remote broker or local broker has no registered connectors ); } maxSetupTime = 2000; } public void setUp() throws Exception { super setUp(); bridges = new ArrayList<DemandForwardingBridge>(); } }",,1.0
7038,3444,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\usecases\TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest.,TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest,"public class TwoBrokerMessageNotSentToRemoteWhenNoConsumerTest extends JmsMultipleBrokersTestSupport { protected static final int MESSAGE COUNT = 100; public void testRemoteBrokerHasConsumer() throws Exception { bridgeBrokers( BrokerA , BrokerB ); startAllBrokers(); Destination dest = createDestination( TEST FOO , true); MessageConsumer clientA = createConsumer( BrokerA , dest); MessageConsumer clientB = createConsumer( BrokerB , dest); Thread sleep(2000); sendMessages( BrokerA , dest, MESSAGE COUNT); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); MessageIdList msgsB = getConsumerMessages( BrokerB , clientB); msgsA waitForMessagesToArrive(MESSAGE COUNT); msgsB waitForMessagesToArrive(MESSAGE COUNT); assertEquals(MESSAGE COUNT, msgsA getMessageCount()); assertEquals(MESSAGE COUNT, msgsB getMessageCount()); } public void testRemoteBrokerHasNoConsumer() throws Exception { bridgeBrokers( BrokerA , BrokerB ); startAllBrokers(); Destination dest = createDestination( TEST FOO , true); MessageConsumer clientA = createConsumer( BrokerA , dest); sendMessages( BrokerA , dest, MESSAGE COUNT); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); msgsA waitForMessagesToArrive(MESSAGE COUNT); assertEquals(MESSAGE COUNT, msgsA getMessageCount()); } public void testDuplexStaticRemoteBrokerHasNoConsumer() throws Exception { boolean dynamicOnly = true; int networkTTL = 2; boolean conduit = true; bridgeBrokers( BrokerA , BrokerB , dynamicOnly, networkTTL, conduit); bridgeBrokers( BrokerB , BrokerA , dynamicOnly, networkTTL, conduit); startAllBrokers(); Destination dest = createDestination( TEST FOO , false); MessageConsumer clientA = createConsumer( BrokerA , dest); Thread sleep(2*1000); int messageCount = 2000; sendMessages( BrokerA , dest, messageCount); MessageIdList msgsA = getConsumerMessages( BrokerA , clientA); msgsA waitForMessagesToArrive(messageCount); assertEquals(messageCount, msgsA getMessageCount()); } public void setUp() throws Exception { super setAutoFail(true); super setUp(); createBroker(new URI( broker (tcp createBroker(new URI( broker (tcp } }",,1.0
7074,3480,data,\smellybot\activemq\activemq-unit-tests\src\test\java\org\apache\activemq\xbean\XBeanStartFalseTest.,XBeanStartFalseTest,"public class XBeanStartFalseTest extends TestCase { public void testStartFalse() throws Exception { BrokerService broker = BrokerFactory createBroker(new URI( xbean org/apache/activemq/xbean/activemq2 xml )); assertFalse( Broker is started , broker isStarted()); } }",,1.0
7092,3498,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\MessageServletSupport.,MessageServletSupport,"public abstract class MessageServletSupport extends HttpServlet { private static final transient Logger LOG = LoggerFactory getLogger(MessageServletSupport class); private boolean defaultTopicFlag = true; private Destination defaultDestination; private String destinationParameter = destination ; private String typeParameter = type ; private String bodyParameter = body ; private boolean defaultMessagePersistent = true; private int defaultMessagePriority = 5; private long defaultMessageTimeToLive; private String destinationOptions; public void init(ServletConfig servletConfig) throws ServletException { super init(servletConfig); destinationOptions = servletConfig getInitParameter( destinationOptions ); String name = servletConfig getInitParameter( topic ); if (name != null) { defaultTopicFlag = asBoolean(name); } if (LOG isDebugEnabled()) { LOG debug( Defaulting to use topics + defaultTopicFlag); } name = servletConfig getInitParameter( destination ); if (name != null) { if (defaultTopicFlag) { defaultDestination = new ActiveMQTopic(name); } else { defaultDestination = new ActiveMQQueue(name); } } WebClient initContext(getServletContext()); } public static boolean asBoolean(String param) { return asBoolean(param, false); } public static boolean asBoolean(String param, boolean defaultValue) { if (param == null) { return defaultValue; } else { return param equalsIgnoreCase( true ); } } SuppressWarnings({ rawtypes , unchecked }) protected void appendParametersToMessage(HttpServletRequest request, TextMessage message) throws JMSException { Map parameterMap = request getParameterMap(); if (parameterMap == null) { return; } Map parameters = new HashMap(parameterMap); String correlationID = asString(parameters remove( JMSCorrelationID )); if (correlationID != null) { message setJMSCorrelationID(correlationID); } Long expiration = asLong(parameters remove( JMSExpiration )); if (expiration != null) { message setJMSExpiration(expiration longValue()); } Destination replyTo = asDestination(parameters remove( JMSReplyTo )); if (replyTo != null) { message setJMSReplyTo(replyTo); } String type = (String)asString(parameters remove( JMSType )); if (type != null) { message setJMSType(type); } for (Iterator iter = parameters entrySet() iterator(); iter hasNext();) { Map Entry entry = (Map Entry)iter next(); String name = (String)entry getKey(); if (!destinationParameter equals(name) && !typeParameter equals(name) && !bodyParameter equals(name) && ! JMSDeliveryMode equals(name) && ! JMSPriority equals(name) && ! JMSTimeToLive equals(name)) { Object value = entry getValue(); if (value instanceof Object[]) { Object[] array = (Object[])value; if (array length == 1) { value = array[0]; } else { LOG warn( Can t use property + name + which is of type + value getClass() getName() + value ); value = null; int size = array length; for (int i = 0; i < size; i++) { LOG debug( value[ + i + ] = + array[i]); } } } if (value != null) { message setObjectProperty(name, value); } } } } protected long getSendTimeToLive(HttpServletRequest request) { String text = request getParameter( JMSTimeToLive ); if (text != null) { return asLong(text); } return defaultMessageTimeToLive; } protected int getSendPriority(HttpServletRequest request) { String text = request getParameter( JMSPriority ); if (text != null) { return asInt(text); } return defaultMessagePriority; } protected boolean isSendPersistent(HttpServletRequest request) { String text = request getParameter( JMSDeliveryMode ); if (text != null) { return text trim() equalsIgnoreCase( persistent ); } return defaultMessagePersistent; } protected boolean isSync(HttpServletRequest request) { String text = request getParameter( sync ); if (text != null) { return true; } return false; } protected Destination asDestination(Object value) { if (value instanceof Destination) { return (Destination)value; } if (value instanceof String) { String text = (String)value; return ActiveMQDestination createDestination(text, ActiveMQDestination QUEUE TYPE); } if (value instanceof String[]) { String text = ((String[])value)[0]; if (text == null) { return null; } return ActiveMQDestination createDestination(text, ActiveMQDestination QUEUE TYPE); } return null; } protected Integer asInteger(Object value) { if (value instanceof Integer) { return (Integer)value; } if (value instanceof String) { return Integer valueOf((String)value); } if (value instanceof String[]) { return Integer valueOf(((String[])value)[0]); } return null; } protected Long asLong(Object value) { if (value instanceof Long) { return (Long)value; } if (value instanceof String) { return Long valueOf((String)value); } if (value instanceof String[]) { return Long valueOf(((String[])value)[0]); } return null; } protected long asLong(String name) { return Long parseLong(name); } protected int asInt(String name) { return Integer parseInt(name); } protected String asString(Object value) { if (value instanceof String[]) { return ((String[])value)[0]; } if (value != null) { return value toString(); } return null; } protected Destination getDestination(WebClient client, HttpServletRequest request) throws JMSException { String destinationName = request getParameter(destinationParameter); if (destinationName == null || destinationName equals( )) { if (defaultDestination == null) { return getDestinationFromURI(client, request); } else { return defaultDestination; } } return getDestination(client, request, destinationName); } protected Destination getDestinationFromURI(WebClient client, HttpServletRequest request) throws JMSException { String uri = request getPathInfo(); if (uri == null) { return null; } if (uri startsWith( / )) { uri = uri substring(1); if (uri length() == 0) { return null; } } uri = uri replace( / , ); LOG debug( destination uri= + uri); return getDestination(client, request, uri); } protected Destination getDestination(WebClient client, HttpServletRequest request, String destinationName) throws JMSException { boolean isTopic = defaultTopicFlag; if (destinationName startsWith( topic isTopic = true; } else if (destinationName startsWith( channel isTopic = false; } else { isTopic = isTopic(request); } if (destinationName indexOf( destinationName = destinationName substring(destinationName indexOf( } if (destinationOptions != null) { destinationName += + destinationOptions; } LOG debug(destinationName + ( + (isTopic topic queue ) + ) ); if (isTopic) { return client getSession() createTopic(destinationName); } else { return client getSession() createQueue(destinationName); } } protected boolean isTopic(HttpServletRequest request) { String typeText = request getParameter(typeParameter); if (typeText == null) { return defaultTopicFlag; } return typeText equalsIgnoreCase( topic ); } protected String getPostedMessageBody(HttpServletRequest request) throws IOException { String answer = request getParameter(bodyParameter); String contentType = request getContentType(); if (answer == null && contentType != null && contentType toLowerCase() startsWith( text/xml )) { BufferedReader reader = request getReader(); StringBuffer buffer = new StringBuffer(); while (true) { String line = reader readLine(); if (line == null) { break; } buffer append(line); buffer append( n ); } return buffer toString(); } return answer; } protected String getSelector(HttpServletRequest request) throws IOException { return request getHeader(WebClient selectorName); } }",,1.0
7093,3499,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\NoDestinationSuppliedException.,NoDestinationSuppliedException,public class NoDestinationSuppliedException extends ServletException { public NoDestinationSuppliedException() { super( Could not perform the JMS operation as no Destination was supplied ); } },,1.0
7098,3504,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\QueueConsumerQuery.,QueueConsumerQuery,public class QueueConsumerQuery extends DestinationFacade { public QueueConsumerQuery(BrokerFacade brokerFacade) throws JMSException { super(brokerFacade); setJMSDestinationType( queue ); } public Collection<SubscriptionViewMBean> getConsumers() throws Exception { return getBrokerFacade() getQueueConsumers(getJMSDestination()); } public void destroy() { } },,1.0
7100,3506,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\SessionFilter.,SessionFilter,"public class SessionFilter implements Filter { public void init(FilterConfig filterConfig) throws ServletException { } public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { ((HttpServletRequest)request) getSession(true) setAttribute( secret , UUID randomUUID() toString());; chain doFilter(request, response); } public void destroy() { } }",,1.0
7101,3507,data,\smellybot\activemq\activemq-web\src\main\java\org\apache\activemq\web\SessionListener.,SessionListener,public class SessionListener implements HttpSessionListener { private static final Logger LOG = LoggerFactory getLogger(SessionListener class); public void sessionCreated(HttpSessionEvent se) { } public void sessionDestroyed(HttpSessionEvent se) { WebClient client = WebClient getWebClient(se getSession()); if (client != null) { client close(); } } },,1.0
7139,3545,data,\smellybot\activemq\activemq-xmpp\src\main\java\org\apache\activemq\transport\xmpp\XmppWireFormat.,XmppWireFormat,"public class XmppWireFormat implements WireFormat { private int version = 1; public WireFormat copy() { return new XmppWireFormat(); } public ByteSequence marshal(Object command) throws IOException { ByteArrayOutputStream baos = new ByteArrayOutputStream(); DataOutputStream dos = new DataOutputStream(baos); marshal(command, dos); dos close(); return baos toByteSequence(); } public Object unmarshal(ByteSequence packet) throws IOException { ByteArrayInputStream stream = new ByteArrayInputStream(packet); DataInputStream dis = new DataInputStream(stream); return unmarshal(dis); } public void marshal(Object object, DataOutput dataOutput) throws IOException { } public Object unmarshal(DataInput dataInput) throws IOException { return null; } public int getVersion() { return version; } public void setVersion(int version) { this version = version; } public boolean inReceive() { return false; } }",,1.0
