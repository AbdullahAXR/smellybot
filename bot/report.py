import requests
import sys

import logging
import logging.handlers
import pandas as pd


def create_issue(url, payload, headers):
    response = requests.post(url, json=payload, headers=headers)

    if response.status_code == 201:
        print("Comment posted successfully!")
    else:
        print("Failed to post comment. Status Code:", response.status_code)
        print("Response Content:", response.text)
        print("Response Headers:", response.headers)


def issue_data(repo, owner, branch):

    # Read content from report.md
    #with open(smellytype+'_smelly_report.md', 'r') as f:
    try:
        with open('summary_report.md', 'r') as f:
            report = f.read()
    except Exception as e:
        print("Error reading summary report")
        report = "No code smells has been detected."

    # Issue data
    table_content = f'{report}'
    #issue_title = 'Code smells - '+smellytype
    issue_title = 'Code Smells Report'
    #comment = f"This is an automated comment.\n\n{table_content}"
    comment = f"**Code Smell Report by Smellybot**\n\nWe would like to bring to your attention the following code smell report generated by our automated analysis tool, which has been added to the repository. This information is provided to help you maintain the quality and integrity of the codebase.\n\nYou can access the detailed reports here: [Smellybot report class-level](https://github.com/{owner}/{repo}/blob/{branch}/Smellybot_report_class_level.csv) and [Smellybot report method-level](https://github.com/{owner}/{repo}/blob/{branch}/Smellybot_report_method_level.csv) \n\n**Summary:**\n\n{table_content}\n\n**Action Required:**\n\nPlease review the code smell report and take any necessary actions to address the identified issues. Maintaining code quality is vital for the long-term health and maintainability of the project."
    payload = {"title": issue_title, "body": comment}

    return payload

def log_file(results_file, output_file):
    logger = logging.getLogger(__name__)
    logger.setLevel(logging.DEBUG)
    logger_file_handler = logging.handlers.RotatingFileHandler(
        output_file,
        maxBytes=1024 * 1024,
        backupCount=1,
        encoding="utf8",
    )
    formatter = logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
    logger_file_handler.setFormatter(formatter)
    logger.addHandler(logger_file_handler)

    # Read the CSV file
    csv_file = results_file
    try:
        df = pd.read_csv(csv_file)
        rows = df.iterrows()  # Iterate over rows

        for index, row in rows:
            logger.info(f'Row {index}: {row}')
    except FileNotFoundError:
        logger.error(f"File '{csv_file}' not found.")
    except Exception as e:
        logger.error(f"An error occurred: {e}")


def main():
    repo =  sys.argv[1] 
    token = sys.argv[2]  # token uilyu 
    owner = sys.argv[3]
    branch = sys.argv[4]
    print('============================== ', owner, branch)

    # Create a new issue
    url = f"https://api.github.com/repos/{repo}/issues"

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept": "application/vnd.github.v3+json"
    }

    payload_class = issue_data(repo, owner, branch)
    create_issue(url, payload_class, headers)
    #log_file('class_report.csv', "smelly_classes.log")

    #payload_method = issue_data('method')
    #create_issue(url, payload_method, headers)
    #log_file('method_report.csv', "smelly_methods.log")



if __name__ == "__main__":
    main()